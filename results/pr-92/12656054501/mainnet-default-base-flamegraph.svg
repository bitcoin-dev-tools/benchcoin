<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1590" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1573.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1573.00"> </text><svg id="frames" x="10" width="1180" total_samples="6033"><g><title>b-addcon (4 samples, 0.07%)</title><rect x="0.0000%" y="1525" width="0.0663%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="0.0000%" y="1509" width="0.0663%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="0.0000%" y="1493" width="0.0663%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="0.0000%" y="1477" width="0.0663%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1487.50"></text></g><g><title>_M_run (4 samples, 0.07%)</title><rect x="0.0000%" y="1461" width="0.0663%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1471.50"></text></g><g><title>operator (4 samples, 0.07%)</title><rect x="0.0000%" y="1445" width="0.0663%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1429" width="0.0663%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1413" width="0.0663%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#3}&gt; &gt; &gt;::_M_run (4 samples, 0.07%)</title><rect x="0.0000%" y="1397" width="0.0663%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1407.50"></text></g><g><title>util::TraceThread (4 samples, 0.07%)</title><rect x="0.0000%" y="1381" width="0.0663%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (4 samples, 0.07%)</title><rect x="0.0000%" y="1365" width="0.0663%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1375.50"></text></g><g><title>CConnman::ThreadOpenAddedConnections (4 samples, 0.07%)</title><rect x="0.0000%" y="1349" width="0.0663%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1359.50"></text></g><g><title>CThreadInterrupt::sleep_for (4 samples, 0.07%)</title><rect x="0.0000%" y="1333" width="0.0663%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1343.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1317" width="0.0663%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1327.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1301" width="0.0663%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1285" width="0.0663%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1269" width="0.0663%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1279.50"></text></g><g><title>std::__condvar::wait_until (4 samples, 0.07%)</title><rect x="0.0000%" y="1253" width="0.0663%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1263.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (4 samples, 0.07%)</title><rect x="0.0000%" y="1237" width="0.0663%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1247.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="0.0000%" y="1221" width="0.0663%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1205" width="0.0663%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1189" width="0.0663%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1173" width="0.0663%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1157" width="0.0663%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1141" width="0.0663%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1125" width="0.0663%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1109" width="0.0663%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1093" width="0.0663%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1077" width="0.0663%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0166%" y="1061" width="0.0497%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="3"/><text x="0.2666%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0166%" y="1045" width="0.0497%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="3"/><text x="0.2666%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0166%" y="1029" width="0.0497%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="3"/><text x="0.2666%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0166%" y="1013" width="0.0497%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="3"/><text x="0.2666%" y="1023.50"></text></g><g><title>b-http (4 samples, 0.07%)</title><rect x="0.0663%" y="1525" width="0.0663%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="0.0663%" y="1509" width="0.0663%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="0.0663%" y="1493" width="0.0663%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="0.0663%" y="1477" width="0.0663%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1487.50"></text></g><g><title>ThreadHTTP (4 samples, 0.07%)</title><rect x="0.0663%" y="1461" width="0.0663%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1471.50"></text></g><g><title>event_base_loop (4 samples, 0.07%)</title><rect x="0.0663%" y="1445" width="0.0663%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1455.50"></text></g><g><title>epoll_dispatch (4 samples, 0.07%)</title><rect x="0.0663%" y="1429" width="0.0663%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1439.50"></text></g><g><title>epoll_wait (4 samples, 0.07%)</title><rect x="0.0663%" y="1413" width="0.0663%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1397" width="0.0663%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1381" width="0.0663%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1365" width="0.0663%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1349" width="0.0663%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1333" width="0.0663%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1317" width="0.0663%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1301" width="0.0663%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1285" width="0.0663%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1269" width="0.0663%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1253" width="0.0663%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1237" width="0.0663%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1221" width="0.0663%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0663%" y="1205" width="0.0663%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="4"/><text x="0.3163%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1160%" y="1189" width="0.0166%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="1"/><text x="0.3660%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1160%" y="1173" width="0.0166%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="1"/><text x="0.3660%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1160%" y="1157" width="0.0166%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="1"/><text x="0.3660%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1160%" y="1141" width="0.0166%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="1"/><text x="0.3660%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1160%" y="1125" width="0.0166%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="1"/><text x="0.3660%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1160%" y="1109" width="0.0166%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="1"/><text x="0.3660%" y="1119.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (14 samples, 0.23%)</title><rect x="0.8122%" y="1493" width="0.2321%" height="15" fill="rgb(248,47,43)" fg:x="49" fg:w="14"/><text x="1.0622%" y="1503.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.23%)</title><rect x="0.8122%" y="1477" width="0.2321%" height="15" fill="rgb(221,10,30)" fg:x="49" fg:w="14"/><text x="1.0622%" y="1487.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.23%)</title><rect x="0.8122%" y="1461" width="0.2321%" height="15" fill="rgb(210,229,1)" fg:x="49" fg:w="14"/><text x="1.0622%" y="1471.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (14 samples, 0.23%)</title><rect x="0.8122%" y="1445" width="0.2321%" height="15" fill="rgb(222,148,37)" fg:x="49" fg:w="14"/><text x="1.0622%" y="1455.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (14 samples, 0.23%)</title><rect x="0.8122%" y="1429" width="0.2321%" height="15" fill="rgb(234,67,33)" fg:x="49" fg:w="14"/><text x="1.0622%" y="1439.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (3 samples, 0.05%)</title><rect x="0.9945%" y="1413" width="0.0497%" height="15" fill="rgb(247,98,35)" fg:x="60" fg:w="3"/><text x="1.2445%" y="1423.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="1.0443%" y="1493" width="0.0332%" height="15" fill="rgb(247,138,52)" fg:x="63" fg:w="2"/><text x="1.2943%" y="1503.50"></text></g><g><title>AutoFile::write (149 samples, 2.47%)</title><rect x="0.1326%" y="1509" width="2.4697%" height="15" fill="rgb(213,79,30)" fg:x="8" fg:w="149"/><text x="0.3826%" y="1519.50">Au..</text></g><g><title>util::Xor (92 samples, 1.52%)</title><rect x="1.0774%" y="1493" width="1.5249%" height="15" fill="rgb(246,177,23)" fg:x="65" fg:w="92"/><text x="1.3274%" y="1503.50"></text></g><g><title>std::operator^= (28 samples, 0.46%)</title><rect x="2.1382%" y="1477" width="0.4641%" height="15" fill="rgb(230,62,27)" fg:x="129" fg:w="28"/><text x="2.3882%" y="1487.50"></text></g><g><title>std::operator^ (28 samples, 0.46%)</title><rect x="2.1382%" y="1461" width="0.4641%" height="15" fill="rgb(216,154,8)" fg:x="129" fg:w="28"/><text x="2.3882%" y="1471.50"></text></g><g><title>CBlockIndex::GetBlockHash (1 samples, 0.02%)</title><rect x="2.6024%" y="1509" width="0.0166%" height="15" fill="rgb(244,35,45)" fg:x="157" fg:w="1"/><text x="2.8524%" y="1519.50"></text></g><g><title>CCoinsViewCache::AddCoin (2 samples, 0.03%)</title><rect x="2.6189%" y="1509" width="0.0332%" height="15" fill="rgb(251,115,12)" fg:x="158" fg:w="2"/><text x="2.8689%" y="1519.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="2.6355%" y="1493" width="0.0166%" height="15" fill="rgb(240,54,50)" fg:x="159" fg:w="1"/><text x="2.8855%" y="1503.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="2.6521%" y="1509" width="0.0166%" height="15" fill="rgb(233,84,52)" fg:x="160" fg:w="1"/><text x="2.9021%" y="1519.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (1 samples, 0.02%)</title><rect x="2.6521%" y="1493" width="0.0166%" height="15" fill="rgb(207,117,47)" fg:x="160" fg:w="1"/><text x="2.9021%" y="1503.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="2.6521%" y="1477" width="0.0166%" height="15" fill="rgb(249,43,39)" fg:x="160" fg:w="1"/><text x="2.9021%" y="1487.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="2.6687%" y="1509" width="0.0166%" height="15" fill="rgb(209,38,44)" fg:x="161" fg:w="1"/><text x="2.9187%" y="1519.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="2.6687%" y="1493" width="0.0166%" height="15" fill="rgb(236,212,23)" fg:x="161" fg:w="1"/><text x="2.9187%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="2.6687%" y="1477" width="0.0166%" height="15" fill="rgb(242,79,21)" fg:x="161" fg:w="1"/><text x="2.9187%" y="1487.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="2.6687%" y="1461" width="0.0166%" height="15" fill="rgb(211,96,35)" fg:x="161" fg:w="1"/><text x="2.9187%" y="1471.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="2.6687%" y="1445" width="0.0166%" height="15" fill="rgb(253,215,40)" fg:x="161" fg:w="1"/><text x="2.9187%" y="1455.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.6687%" y="1429" width="0.0166%" height="15" fill="rgb(211,81,21)" fg:x="161" fg:w="1"/><text x="2.9187%" y="1439.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="2.6852%" y="1509" width="0.0166%" height="15" fill="rgb(208,190,38)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1519.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="2.6852%" y="1493" width="0.0166%" height="15" fill="rgb(235,213,38)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1503.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="2.6852%" y="1477" width="0.0166%" height="15" fill="rgb(237,122,38)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1487.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.6852%" y="1461" width="0.0166%" height="15" fill="rgb(244,218,35)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1471.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.6852%" y="1445" width="0.0166%" height="15" fill="rgb(240,68,47)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1455.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.6852%" y="1429" width="0.0166%" height="15" fill="rgb(210,16,53)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1439.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="2.6852%" y="1413" width="0.0166%" height="15" fill="rgb(235,124,12)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1423.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="2.6852%" y="1397" width="0.0166%" height="15" fill="rgb(224,169,11)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1407.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="2.6852%" y="1381" width="0.0166%" height="15" fill="rgb(250,166,2)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1391.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="2.6852%" y="1365" width="0.0166%" height="15" fill="rgb(242,216,29)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1375.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="2.6852%" y="1349" width="0.0166%" height="15" fill="rgb(230,116,27)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1359.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="2.6852%" y="1333" width="0.0166%" height="15" fill="rgb(228,99,48)" fg:x="162" fg:w="1"/><text x="2.9352%" y="1343.50"></text></g><g><title>DataStream::Xor (2 samples, 0.03%)</title><rect x="2.7184%" y="1477" width="0.0332%" height="15" fill="rgb(253,11,6)" fg:x="164" fg:w="2"/><text x="2.9684%" y="1487.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="2.7184%" y="1461" width="0.0332%" height="15" fill="rgb(247,143,39)" fg:x="164" fg:w="2"/><text x="2.9684%" y="1471.50"></text></g><g><title>CCoinsViewDB::GetCoin (4 samples, 0.07%)</title><rect x="2.7018%" y="1509" width="0.0663%" height="15" fill="rgb(236,97,10)" fg:x="163" fg:w="4"/><text x="2.9518%" y="1519.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (3 samples, 0.05%)</title><rect x="2.7184%" y="1493" width="0.0497%" height="15" fill="rgb(233,208,19)" fg:x="164" fg:w="3"/><text x="2.9684%" y="1503.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1477" width="0.0166%" height="15" fill="rgb(216,164,2)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1487.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1461" width="0.0166%" height="15" fill="rgb(220,129,5)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1471.50"></text></g><g><title>Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1445" width="0.0166%" height="15" fill="rgb(242,17,10)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1455.50"></text></g><g><title>Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1429" width="0.0166%" height="15" fill="rgb(242,107,0)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1439.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1413" width="0.0166%" height="15" fill="rgb(251,28,31)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1423.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1397" width="0.0166%" height="15" fill="rgb(233,223,10)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1407.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1381" width="0.0166%" height="15" fill="rgb(215,21,27)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1391.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1365" width="0.0166%" height="15" fill="rgb(232,23,21)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1375.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1349" width="0.0166%" height="15" fill="rgb(244,5,23)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1359.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="2.7515%" y="1333" width="0.0166%" height="15" fill="rgb(226,81,46)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1343.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1317" width="0.0166%" height="15" fill="rgb(247,70,30)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1327.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="2.7515%" y="1301" width="0.0166%" height="15" fill="rgb(212,68,19)" fg:x="166" fg:w="1"/><text x="3.0015%" y="1311.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (1 samples, 0.02%)</title><rect x="2.7681%" y="1509" width="0.0166%" height="15" fill="rgb(240,187,13)" fg:x="167" fg:w="1"/><text x="3.0181%" y="1519.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (1 samples, 0.02%)</title><rect x="2.7847%" y="1509" width="0.0166%" height="15" fill="rgb(223,113,26)" fg:x="168" fg:w="1"/><text x="3.0347%" y="1519.50"></text></g><g><title>leveldb::Status::ok (1 samples, 0.02%)</title><rect x="2.7847%" y="1493" width="0.0166%" height="15" fill="rgb(206,192,2)" fg:x="168" fg:w="1"/><text x="3.0347%" y="1503.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="2.8013%" y="1509" width="0.0166%" height="15" fill="rgb(241,108,4)" fg:x="169" fg:w="1"/><text x="3.0513%" y="1519.50"></text></g><g><title>WriteBE32 (1 samples, 0.02%)</title><rect x="2.8013%" y="1493" width="0.0166%" height="15" fill="rgb(247,173,49)" fg:x="169" fg:w="1"/><text x="3.0513%" y="1503.50"></text></g><g><title>htobe32_internal (1 samples, 0.02%)</title><rect x="2.8013%" y="1477" width="0.0166%" height="15" fill="rgb(224,114,35)" fg:x="169" fg:w="1"/><text x="3.0513%" y="1487.50"></text></g><g><title>internal_bswap_32 (1 samples, 0.02%)</title><rect x="2.8013%" y="1461" width="0.0166%" height="15" fill="rgb(245,159,27)" fg:x="169" fg:w="1"/><text x="3.0513%" y="1471.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="2.8178%" y="1509" width="0.0166%" height="15" fill="rgb(245,172,44)" fg:x="170" fg:w="1"/><text x="3.0678%" y="1519.50"></text></g><g><title>CScript::IsPayToScriptHash (2 samples, 0.03%)</title><rect x="2.8344%" y="1509" width="0.0332%" height="15" fill="rgb(236,23,11)" fg:x="171" fg:w="2"/><text x="3.0844%" y="1519.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="2.8510%" y="1493" width="0.0166%" height="15" fill="rgb(205,117,38)" fg:x="172" fg:w="1"/><text x="3.1010%" y="1503.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="2.8676%" y="1461" width="0.0166%" height="15" fill="rgb(237,72,25)" fg:x="173" fg:w="1"/><text x="3.1176%" y="1471.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="2.8676%" y="1445" width="0.0166%" height="15" fill="rgb(244,70,9)" fg:x="173" fg:w="1"/><text x="3.1176%" y="1455.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="2.8676%" y="1429" width="0.0166%" height="15" fill="rgb(217,125,39)" fg:x="173" fg:w="1"/><text x="3.1176%" y="1439.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="2.8676%" y="1413" width="0.0166%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="1"/><text x="3.1176%" y="1423.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="2.8676%" y="1397" width="0.0166%" height="15" fill="rgb(251,123,47)" fg:x="173" fg:w="1"/><text x="3.1176%" y="1407.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.03%)</title><rect x="2.8676%" y="1509" width="0.0332%" height="15" fill="rgb(221,13,13)" fg:x="173" fg:w="2"/><text x="3.1176%" y="1519.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (2 samples, 0.03%)</title><rect x="2.8676%" y="1493" width="0.0332%" height="15" fill="rgb(238,131,9)" fg:x="173" fg:w="2"/><text x="3.1176%" y="1503.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.03%)</title><rect x="2.8676%" y="1477" width="0.0332%" height="15" fill="rgb(211,50,8)" fg:x="173" fg:w="2"/><text x="3.1176%" y="1487.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1461" width="0.0166%" height="15" fill="rgb(245,182,24)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1471.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1445" width="0.0166%" height="15" fill="rgb(242,14,37)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1429" width="0.0166%" height="15" fill="rgb(246,228,12)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1439.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1413" width="0.0166%" height="15" fill="rgb(213,55,15)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1423.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1397" width="0.0166%" height="15" fill="rgb(209,9,3)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1407.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1381" width="0.0166%" height="15" fill="rgb(230,59,30)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1365" width="0.0166%" height="15" fill="rgb(209,121,21)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="2.8841%" y="1349" width="0.0166%" height="15" fill="rgb(220,109,13)" fg:x="174" fg:w="1"/><text x="3.1341%" y="1359.50"></text></g><g><title>CTransaction::CTransaction (1 samples, 0.02%)</title><rect x="2.9007%" y="1509" width="0.0166%" height="15" fill="rgb(232,18,1)" fg:x="175" fg:w="1"/><text x="3.1507%" y="1519.50"></text></g><g><title>Chainstate::ConnectBlock (2 samples, 0.03%)</title><rect x="2.9173%" y="1509" width="0.0332%" height="15" fill="rgb(215,41,42)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1519.50"></text></g><g><title>CBlockUndo::~CBlockUndo (2 samples, 0.03%)</title><rect x="2.9173%" y="1493" width="0.0332%" height="15" fill="rgb(224,123,36)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1503.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="2.9173%" y="1477" width="0.0332%" height="15" fill="rgb(240,125,3)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1487.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="2.9173%" y="1461" width="0.0332%" height="15" fill="rgb(205,98,50)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1471.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (2 samples, 0.03%)</title><rect x="2.9173%" y="1445" width="0.0332%" height="15" fill="rgb(205,185,37)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1455.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (2 samples, 0.03%)</title><rect x="2.9173%" y="1429" width="0.0332%" height="15" fill="rgb(238,207,15)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (2 samples, 0.03%)</title><rect x="2.9173%" y="1413" width="0.0332%" height="15" fill="rgb(213,199,42)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1423.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (2 samples, 0.03%)</title><rect x="2.9173%" y="1397" width="0.0332%" height="15" fill="rgb(235,201,11)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1407.50"></text></g><g><title>CTxUndo::~CTxUndo (2 samples, 0.03%)</title><rect x="2.9173%" y="1381" width="0.0332%" height="15" fill="rgb(207,46,11)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1391.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="2.9173%" y="1365" width="0.0332%" height="15" fill="rgb(241,35,35)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1375.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (2 samples, 0.03%)</title><rect x="2.9173%" y="1349" width="0.0332%" height="15" fill="rgb(243,32,47)" fg:x="176" fg:w="2"/><text x="3.1673%" y="1359.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="2.9339%" y="1333" width="0.0166%" height="15" fill="rgb(247,202,23)" fg:x="177" fg:w="1"/><text x="3.1839%" y="1343.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="2.9339%" y="1317" width="0.0166%" height="15" fill="rgb(219,102,11)" fg:x="177" fg:w="1"/><text x="3.1839%" y="1327.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (1 samples, 0.02%)</title><rect x="2.9339%" y="1301" width="0.0166%" height="15" fill="rgb(243,110,44)" fg:x="177" fg:w="1"/><text x="3.1839%" y="1311.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (1 samples, 0.02%)</title><rect x="2.9339%" y="1285" width="0.0166%" height="15" fill="rgb(222,74,54)" fg:x="177" fg:w="1"/><text x="3.1839%" y="1295.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="949" width="0.1492%" height="15" fill="rgb(216,99,12)" fg:x="178" fg:w="9"/><text x="3.2004%" y="959.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="933" width="0.1492%" height="15" fill="rgb(226,22,26)" fg:x="178" fg:w="9"/><text x="3.2004%" y="943.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="917" width="0.1492%" height="15" fill="rgb(217,163,10)" fg:x="178" fg:w="9"/><text x="3.2004%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (9 samples, 0.15%)</title><rect x="2.9504%" y="901" width="0.1492%" height="15" fill="rgb(213,25,53)" fg:x="178" fg:w="9"/><text x="3.2004%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="885" width="0.1492%" height="15" fill="rgb(252,105,26)" fg:x="178" fg:w="9"/><text x="3.2004%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="869" width="0.1492%" height="15" fill="rgb(220,39,43)" fg:x="178" fg:w="9"/><text x="3.2004%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="853" width="0.1492%" height="15" fill="rgb(229,68,48)" fg:x="178" fg:w="9"/><text x="3.2004%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="837" width="0.1492%" height="15" fill="rgb(252,8,32)" fg:x="178" fg:w="9"/><text x="3.2004%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (9 samples, 0.15%)</title><rect x="2.9504%" y="821" width="0.1492%" height="15" fill="rgb(223,20,43)" fg:x="178" fg:w="9"/><text x="3.2004%" y="831.50"></text></g><g><title>AutoFile::write (9 samples, 0.15%)</title><rect x="2.9504%" y="805" width="0.1492%" height="15" fill="rgb(229,81,49)" fg:x="178" fg:w="9"/><text x="3.2004%" y="815.50"></text></g><g><title>_IO_fwrite (9 samples, 0.15%)</title><rect x="2.9504%" y="789" width="0.1492%" height="15" fill="rgb(236,28,36)" fg:x="178" fg:w="9"/><text x="3.2004%" y="799.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.0665%" y="773" width="0.0332%" height="15" fill="rgb(249,185,26)" fg:x="185" fg:w="2"/><text x="3.3165%" y="783.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.0665%" y="757" width="0.0332%" height="15" fill="rgb(249,174,33)" fg:x="185" fg:w="2"/><text x="3.3165%" y="767.50"></text></g><g><title>new_do_write (2 samples, 0.03%)</title><rect x="3.0665%" y="741" width="0.0332%" height="15" fill="rgb(233,201,37)" fg:x="185" fg:w="2"/><text x="3.3165%" y="751.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.0665%" y="725" width="0.0332%" height="15" fill="rgb(221,78,26)" fg:x="185" fg:w="2"/><text x="3.3165%" y="735.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="3.0665%" y="709" width="0.0332%" height="15" fill="rgb(250,127,30)" fg:x="185" fg:w="2"/><text x="3.3165%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.0665%" y="693" width="0.0332%" height="15" fill="rgb(230,49,44)" fg:x="185" fg:w="2"/><text x="3.3165%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.0665%" y="677" width="0.0332%" height="15" fill="rgb(229,67,23)" fg:x="185" fg:w="2"/><text x="3.3165%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.0665%" y="661" width="0.0332%" height="15" fill="rgb(249,83,47)" fg:x="185" fg:w="2"/><text x="3.3165%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.0665%" y="645" width="0.0332%" height="15" fill="rgb(215,43,3)" fg:x="185" fg:w="2"/><text x="3.3165%" y="655.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="3.0665%" y="629" width="0.0332%" height="15" fill="rgb(238,154,13)" fg:x="185" fg:w="2"/><text x="3.3165%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.0665%" y="613" width="0.0332%" height="15" fill="rgb(219,56,2)" fg:x="185" fg:w="2"/><text x="3.3165%" y="623.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="3.0665%" y="597" width="0.0332%" height="15" fill="rgb(233,0,4)" fg:x="185" fg:w="2"/><text x="3.3165%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.0665%" y="581" width="0.0332%" height="15" fill="rgb(235,30,7)" fg:x="185" fg:w="2"/><text x="3.3165%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.0665%" y="565" width="0.0332%" height="15" fill="rgb(250,79,13)" fg:x="185" fg:w="2"/><text x="3.3165%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.0830%" y="549" width="0.0166%" height="15" fill="rgb(211,146,34)" fg:x="186" fg:w="1"/><text x="3.3330%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.0830%" y="533" width="0.0166%" height="15" fill="rgb(228,22,38)" fg:x="186" fg:w="1"/><text x="3.3330%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.0830%" y="517" width="0.0166%" height="15" fill="rgb(235,168,5)" fg:x="186" fg:w="1"/><text x="3.3330%" y="527.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.1328%" y="629" width="0.0166%" height="15" fill="rgb(221,155,16)" fg:x="189" fg:w="1"/><text x="3.3828%" y="639.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="3.1162%" y="645" width="0.0497%" height="15" fill="rgb(215,215,53)" fg:x="188" fg:w="3"/><text x="3.3662%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.1493%" y="629" width="0.0166%" height="15" fill="rgb(223,4,10)" fg:x="190" fg:w="1"/><text x="3.3993%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.1493%" y="613" width="0.0166%" height="15" fill="rgb(234,103,6)" fg:x="190" fg:w="1"/><text x="3.3993%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.1493%" y="597" width="0.0166%" height="15" fill="rgb(227,97,0)" fg:x="190" fg:w="1"/><text x="3.3993%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.1493%" y="581" width="0.0166%" height="15" fill="rgb(234,150,53)" fg:x="190" fg:w="1"/><text x="3.3993%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.1493%" y="565" width="0.0166%" height="15" fill="rgb(228,201,54)" fg:x="190" fg:w="1"/><text x="3.3993%" y="575.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="3.1162%" y="693" width="0.0829%" height="15" fill="rgb(222,22,37)" fg:x="188" fg:w="5"/><text x="3.3662%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="3.1162%" y="677" width="0.0829%" height="15" fill="rgb(237,53,32)" fg:x="188" fg:w="5"/><text x="3.3662%" y="687.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="3.1162%" y="661" width="0.0829%" height="15" fill="rgb(233,25,53)" fg:x="188" fg:w="5"/><text x="3.3662%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1659%" y="645" width="0.0332%" height="15" fill="rgb(210,40,34)" fg:x="191" fg:w="2"/><text x="3.4159%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1659%" y="629" width="0.0332%" height="15" fill="rgb(241,220,44)" fg:x="191" fg:w="2"/><text x="3.4159%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1659%" y="613" width="0.0332%" height="15" fill="rgb(235,28,35)" fg:x="191" fg:w="2"/><text x="3.4159%" y="623.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (8 samples, 0.13%)</title><rect x="3.0996%" y="901" width="0.1326%" height="15" fill="rgb(210,56,17)" fg:x="187" fg:w="8"/><text x="3.3496%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (8 samples, 0.13%)</title><rect x="3.0996%" y="885" width="0.1326%" height="15" fill="rgb(224,130,29)" fg:x="187" fg:w="8"/><text x="3.3496%" y="895.50"></text></g><g><title>AutoFile::write (8 samples, 0.13%)</title><rect x="3.0996%" y="869" width="0.1326%" height="15" fill="rgb(235,212,8)" fg:x="187" fg:w="8"/><text x="3.3496%" y="879.50"></text></g><g><title>_IO_fwrite (8 samples, 0.13%)</title><rect x="3.0996%" y="853" width="0.1326%" height="15" fill="rgb(223,33,50)" fg:x="187" fg:w="8"/><text x="3.3496%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="3.0996%" y="837" width="0.1326%" height="15" fill="rgb(219,149,13)" fg:x="187" fg:w="8"/><text x="3.3496%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="3.0996%" y="821" width="0.1326%" height="15" fill="rgb(250,156,29)" fg:x="187" fg:w="8"/><text x="3.3496%" y="831.50"></text></g><g><title>new_do_write (8 samples, 0.13%)</title><rect x="3.0996%" y="805" width="0.1326%" height="15" fill="rgb(216,193,19)" fg:x="187" fg:w="8"/><text x="3.3496%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="3.0996%" y="789" width="0.1326%" height="15" fill="rgb(216,135,14)" fg:x="187" fg:w="8"/><text x="3.3496%" y="799.50"></text></g><g><title>__GI___libc_write (8 samples, 0.13%)</title><rect x="3.0996%" y="773" width="0.1326%" height="15" fill="rgb(241,47,5)" fg:x="187" fg:w="8"/><text x="3.3496%" y="783.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="3.0996%" y="757" width="0.1326%" height="15" fill="rgb(233,42,35)" fg:x="187" fg:w="8"/><text x="3.3496%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="3.0996%" y="741" width="0.1326%" height="15" fill="rgb(231,13,6)" fg:x="187" fg:w="8"/><text x="3.3496%" y="751.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="3.0996%" y="725" width="0.1326%" height="15" fill="rgb(207,181,40)" fg:x="187" fg:w="8"/><text x="3.3496%" y="735.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="3.1162%" y="709" width="0.1160%" height="15" fill="rgb(254,173,49)" fg:x="188" fg:w="7"/><text x="3.3662%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.1991%" y="693" width="0.0332%" height="15" fill="rgb(221,1,38)" fg:x="193" fg:w="2"/><text x="3.4491%" y="703.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.2488%" y="645" width="0.0166%" height="15" fill="rgb(206,124,46)" fg:x="196" fg:w="1"/><text x="3.4988%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2488%" y="629" width="0.0166%" height="15" fill="rgb(249,21,11)" fg:x="196" fg:w="1"/><text x="3.4988%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2488%" y="613" width="0.0166%" height="15" fill="rgb(222,201,40)" fg:x="196" fg:w="1"/><text x="3.4988%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2488%" y="597" width="0.0166%" height="15" fill="rgb(235,61,29)" fg:x="196" fg:w="1"/><text x="3.4988%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2488%" y="581" width="0.0166%" height="15" fill="rgb(219,207,3)" fg:x="196" fg:w="1"/><text x="3.4988%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2488%" y="565" width="0.0166%" height="15" fill="rgb(222,56,46)" fg:x="196" fg:w="1"/><text x="3.4988%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2488%" y="549" width="0.0166%" height="15" fill="rgb(239,76,54)" fg:x="196" fg:w="1"/><text x="3.4988%" y="559.50"></text></g><g><title>AutoFile::write (3 samples, 0.05%)</title><rect x="3.2322%" y="869" width="0.0497%" height="15" fill="rgb(231,124,27)" fg:x="195" fg:w="3"/><text x="3.4822%" y="879.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="3.2322%" y="853" width="0.0497%" height="15" fill="rgb(249,195,6)" fg:x="195" fg:w="3"/><text x="3.4822%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="3.2322%" y="837" width="0.0497%" height="15" fill="rgb(237,174,47)" fg:x="195" fg:w="3"/><text x="3.4822%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="3.2322%" y="821" width="0.0497%" height="15" fill="rgb(206,201,31)" fg:x="195" fg:w="3"/><text x="3.4822%" y="831.50"></text></g><g><title>new_do_write (3 samples, 0.05%)</title><rect x="3.2322%" y="805" width="0.0497%" height="15" fill="rgb(231,57,52)" fg:x="195" fg:w="3"/><text x="3.4822%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="3.2322%" y="789" width="0.0497%" height="15" fill="rgb(248,177,22)" fg:x="195" fg:w="3"/><text x="3.4822%" y="799.50"></text></g><g><title>__GI___libc_write (3 samples, 0.05%)</title><rect x="3.2322%" y="773" width="0.0497%" height="15" fill="rgb(215,211,37)" fg:x="195" fg:w="3"/><text x="3.4822%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.2322%" y="757" width="0.0497%" height="15" fill="rgb(241,128,51)" fg:x="195" fg:w="3"/><text x="3.4822%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.2322%" y="741" width="0.0497%" height="15" fill="rgb(227,165,31)" fg:x="195" fg:w="3"/><text x="3.4822%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.2322%" y="725" width="0.0497%" height="15" fill="rgb(228,167,24)" fg:x="195" fg:w="3"/><text x="3.4822%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.2322%" y="709" width="0.0497%" height="15" fill="rgb(228,143,12)" fg:x="195" fg:w="3"/><text x="3.4822%" y="719.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="3.2488%" y="693" width="0.0332%" height="15" fill="rgb(249,149,8)" fg:x="196" fg:w="2"/><text x="3.4988%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.2488%" y="677" width="0.0332%" height="15" fill="rgb(243,35,44)" fg:x="196" fg:w="2"/><text x="3.4988%" y="687.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="3.2488%" y="661" width="0.0332%" height="15" fill="rgb(246,89,9)" fg:x="196" fg:w="2"/><text x="3.4988%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2654%" y="645" width="0.0166%" height="15" fill="rgb(233,213,13)" fg:x="197" fg:w="1"/><text x="3.5154%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.2654%" y="629" width="0.0166%" height="15" fill="rgb(233,141,41)" fg:x="197" fg:w="1"/><text x="3.5154%" y="639.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (4 samples, 0.07%)</title><rect x="3.2322%" y="901" width="0.0663%" height="15" fill="rgb(239,167,4)" fg:x="195" fg:w="4"/><text x="3.4822%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (4 samples, 0.07%)</title><rect x="3.2322%" y="885" width="0.0663%" height="15" fill="rgb(209,217,16)" fg:x="195" fg:w="4"/><text x="3.4822%" y="895.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="3.2819%" y="869" width="0.0166%" height="15" fill="rgb(219,88,35)" fg:x="198" fg:w="1"/><text x="3.5319%" y="879.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (22 samples, 0.36%)</title><rect x="2.9504%" y="1045" width="0.3647%" height="15" fill="rgb(220,193,23)" fg:x="178" fg:w="22"/><text x="3.2004%" y="1055.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (22 samples, 0.36%)</title><rect x="2.9504%" y="1029" width="0.3647%" height="15" fill="rgb(230,90,52)" fg:x="178" fg:w="22"/><text x="3.2004%" y="1039.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (22 samples, 0.36%)</title><rect x="2.9504%" y="1013" width="0.3647%" height="15" fill="rgb(252,106,19)" fg:x="178" fg:w="22"/><text x="3.2004%" y="1023.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (22 samples, 0.36%)</title><rect x="2.9504%" y="997" width="0.3647%" height="15" fill="rgb(206,74,20)" fg:x="178" fg:w="22"/><text x="3.2004%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (22 samples, 0.36%)</title><rect x="2.9504%" y="981" width="0.3647%" height="15" fill="rgb(230,138,44)" fg:x="178" fg:w="22"/><text x="3.2004%" y="991.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (22 samples, 0.36%)</title><rect x="2.9504%" y="965" width="0.3647%" height="15" fill="rgb(235,182,43)" fg:x="178" fg:w="22"/><text x="3.2004%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.22%)</title><rect x="3.0996%" y="949" width="0.2155%" height="15" fill="rgb(242,16,51)" fg:x="187" fg:w="13"/><text x="3.3496%" y="959.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (13 samples, 0.22%)</title><rect x="3.0996%" y="933" width="0.2155%" height="15" fill="rgb(248,9,4)" fg:x="187" fg:w="13"/><text x="3.3496%" y="943.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (13 samples, 0.22%)</title><rect x="3.0996%" y="917" width="0.2155%" height="15" fill="rgb(210,31,22)" fg:x="187" fg:w="13"/><text x="3.3496%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.2985%" y="901" width="0.0166%" height="15" fill="rgb(239,54,39)" fg:x="199" fg:w="1"/><text x="3.5485%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.2985%" y="885" width="0.0166%" height="15" fill="rgb(230,99,41)" fg:x="199" fg:w="1"/><text x="3.5485%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.2985%" y="869" width="0.0166%" height="15" fill="rgb(253,106,12)" fg:x="199" fg:w="1"/><text x="3.5485%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (1 samples, 0.02%)</title><rect x="3.2985%" y="853" width="0.0166%" height="15" fill="rgb(213,46,41)" fg:x="199" fg:w="1"/><text x="3.5485%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="3.2985%" y="837" width="0.0166%" height="15" fill="rgb(215,133,35)" fg:x="199" fg:w="1"/><text x="3.5485%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.2985%" y="821" width="0.0166%" height="15" fill="rgb(213,28,5)" fg:x="199" fg:w="1"/><text x="3.5485%" y="831.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="3.2985%" y="805" width="0.0166%" height="15" fill="rgb(215,77,49)" fg:x="199" fg:w="1"/><text x="3.5485%" y="815.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="3.2985%" y="789" width="0.0166%" height="15" fill="rgb(248,100,22)" fg:x="199" fg:w="1"/><text x="3.5485%" y="799.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.4477%" y="725" width="0.0166%" height="15" fill="rgb(208,67,9)" fg:x="208" fg:w="1"/><text x="3.6977%" y="735.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.4477%" y="709" width="0.0166%" height="15" fill="rgb(219,133,21)" fg:x="208" fg:w="1"/><text x="3.6977%" y="719.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (10 samples, 0.17%)</title><rect x="3.3151%" y="1045" width="0.1658%" height="15" fill="rgb(246,46,29)" fg:x="200" fg:w="10"/><text x="3.5651%" y="1055.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (10 samples, 0.17%)</title><rect x="3.3151%" y="1029" width="0.1658%" height="15" fill="rgb(246,185,52)" fg:x="200" fg:w="10"/><text x="3.5651%" y="1039.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (10 samples, 0.17%)</title><rect x="3.3151%" y="1013" width="0.1658%" height="15" fill="rgb(252,136,11)" fg:x="200" fg:w="10"/><text x="3.5651%" y="1023.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (10 samples, 0.17%)</title><rect x="3.3151%" y="997" width="0.1658%" height="15" fill="rgb(219,138,53)" fg:x="200" fg:w="10"/><text x="3.5651%" y="1007.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (10 samples, 0.17%)</title><rect x="3.3151%" y="981" width="0.1658%" height="15" fill="rgb(211,51,23)" fg:x="200" fg:w="10"/><text x="3.5651%" y="991.50"></text></g><g><title>AutoFile::write (10 samples, 0.17%)</title><rect x="3.3151%" y="965" width="0.1658%" height="15" fill="rgb(247,221,28)" fg:x="200" fg:w="10"/><text x="3.5651%" y="975.50"></text></g><g><title>_IO_fwrite (10 samples, 0.17%)</title><rect x="3.3151%" y="949" width="0.1658%" height="15" fill="rgb(251,222,45)" fg:x="200" fg:w="10"/><text x="3.5651%" y="959.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.4477%" y="933" width="0.0332%" height="15" fill="rgb(217,162,53)" fg:x="208" fg:w="2"/><text x="3.6977%" y="943.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.4477%" y="917" width="0.0332%" height="15" fill="rgb(229,93,14)" fg:x="208" fg:w="2"/><text x="3.6977%" y="927.50"></text></g><g><title>new_do_write (2 samples, 0.03%)</title><rect x="3.4477%" y="901" width="0.0332%" height="15" fill="rgb(209,67,49)" fg:x="208" fg:w="2"/><text x="3.6977%" y="911.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="3.4477%" y="885" width="0.0332%" height="15" fill="rgb(213,87,29)" fg:x="208" fg:w="2"/><text x="3.6977%" y="895.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="3.4477%" y="869" width="0.0332%" height="15" fill="rgb(205,151,52)" fg:x="208" fg:w="2"/><text x="3.6977%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.4477%" y="853" width="0.0332%" height="15" fill="rgb(253,215,39)" fg:x="208" fg:w="2"/><text x="3.6977%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.4477%" y="837" width="0.0332%" height="15" fill="rgb(221,220,41)" fg:x="208" fg:w="2"/><text x="3.6977%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.4477%" y="821" width="0.0332%" height="15" fill="rgb(218,133,21)" fg:x="208" fg:w="2"/><text x="3.6977%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.4477%" y="805" width="0.0332%" height="15" fill="rgb(221,193,43)" fg:x="208" fg:w="2"/><text x="3.6977%" y="815.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="3.4477%" y="789" width="0.0332%" height="15" fill="rgb(240,128,52)" fg:x="208" fg:w="2"/><text x="3.6977%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="3.4477%" y="773" width="0.0332%" height="15" fill="rgb(253,114,12)" fg:x="208" fg:w="2"/><text x="3.6977%" y="783.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="3.4477%" y="757" width="0.0332%" height="15" fill="rgb(215,223,47)" fg:x="208" fg:w="2"/><text x="3.6977%" y="767.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="3.4477%" y="741" width="0.0332%" height="15" fill="rgb(248,225,23)" fg:x="208" fg:w="2"/><text x="3.6977%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4643%" y="725" width="0.0166%" height="15" fill="rgb(250,108,0)" fg:x="209" fg:w="1"/><text x="3.7143%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4643%" y="709" width="0.0166%" height="15" fill="rgb(228,208,7)" fg:x="209" fg:w="1"/><text x="3.7143%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4643%" y="693" width="0.0166%" height="15" fill="rgb(244,45,10)" fg:x="209" fg:w="1"/><text x="3.7143%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4643%" y="677" width="0.0166%" height="15" fill="rgb(207,125,25)" fg:x="209" fg:w="1"/><text x="3.7143%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4643%" y="661" width="0.0166%" height="15" fill="rgb(210,195,18)" fg:x="209" fg:w="1"/><text x="3.7143%" y="671.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (36 samples, 0.60%)</title><rect x="2.9504%" y="1061" width="0.5967%" height="15" fill="rgb(249,80,12)" fg:x="178" fg:w="36"/><text x="3.2004%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="3.4809%" y="1045" width="0.0663%" height="15" fill="rgb(221,65,9)" fg:x="210" fg:w="4"/><text x="3.7309%" y="1055.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="3.4809%" y="1029" width="0.0663%" height="15" fill="rgb(235,49,36)" fg:x="210" fg:w="4"/><text x="3.7309%" y="1039.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="3.4809%" y="1013" width="0.0663%" height="15" fill="rgb(225,32,20)" fg:x="210" fg:w="4"/><text x="3.7309%" y="1023.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="3.4809%" y="997" width="0.0663%" height="15" fill="rgb(215,141,46)" fg:x="210" fg:w="4"/><text x="3.7309%" y="1007.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (38 samples, 0.63%)</title><rect x="2.9504%" y="1509" width="0.6299%" height="15" fill="rgb(250,160,47)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1519.50"></text></g><g><title>Chainstate::ActivateBestChain (38 samples, 0.63%)</title><rect x="2.9504%" y="1493" width="0.6299%" height="15" fill="rgb(216,222,40)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1503.50"></text></g><g><title>Chainstate::ActivateBestChainStep (38 samples, 0.63%)</title><rect x="2.9504%" y="1477" width="0.6299%" height="15" fill="rgb(234,217,39)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1487.50"></text></g><g><title>Chainstate::ConnectTip (38 samples, 0.63%)</title><rect x="2.9504%" y="1461" width="0.6299%" height="15" fill="rgb(207,178,40)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1471.50"></text></g><g><title>Chainstate::ConnectBlock (38 samples, 0.63%)</title><rect x="2.9504%" y="1445" width="0.6299%" height="15" fill="rgb(221,136,13)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1455.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (38 samples, 0.63%)</title><rect x="2.9504%" y="1429" width="0.6299%" height="15" fill="rgb(249,199,10)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1439.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (38 samples, 0.63%)</title><rect x="2.9504%" y="1413" width="0.6299%" height="15" fill="rgb(249,222,13)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1423.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (38 samples, 0.63%)</title><rect x="2.9504%" y="1397" width="0.6299%" height="15" fill="rgb(244,185,38)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1381" width="0.6299%" height="15" fill="rgb(236,202,9)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1391.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1365" width="0.6299%" height="15" fill="rgb(250,229,37)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1375.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1349" width="0.6299%" height="15" fill="rgb(206,174,23)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1359.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1333" width="0.6299%" height="15" fill="rgb(211,33,43)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1343.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1317" width="0.6299%" height="15" fill="rgb(245,58,50)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1327.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1301" width="0.6299%" height="15" fill="rgb(244,68,36)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1311.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1285" width="0.6299%" height="15" fill="rgb(232,229,15)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1295.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1269" width="0.6299%" height="15" fill="rgb(254,30,23)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1279.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1253" width="0.6299%" height="15" fill="rgb(235,160,14)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1263.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1237" width="0.6299%" height="15" fill="rgb(212,155,44)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1247.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1221" width="0.6299%" height="15" fill="rgb(226,2,50)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1205" width="0.6299%" height="15" fill="rgb(234,177,6)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1215.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1189" width="0.6299%" height="15" fill="rgb(217,24,9)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1199.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1173" width="0.6299%" height="15" fill="rgb(220,13,46)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1183.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1157" width="0.6299%" height="15" fill="rgb(239,221,27)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1141" width="0.6299%" height="15" fill="rgb(222,198,25)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1125" width="0.6299%" height="15" fill="rgb(211,99,13)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1109" width="0.6299%" height="15" fill="rgb(232,111,31)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1093" width="0.6299%" height="15" fill="rgb(245,82,37)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (38 samples, 0.63%)</title><rect x="2.9504%" y="1077" width="0.6299%" height="15" fill="rgb(227,149,46)" fg:x="178" fg:w="38"/><text x="3.2004%" y="1087.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="3.5472%" y="1061" width="0.0332%" height="15" fill="rgb(218,36,50)" fg:x="214" fg:w="2"/><text x="3.7972%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (2 samples, 0.03%)</title><rect x="3.5472%" y="1045" width="0.0332%" height="15" fill="rgb(226,80,48)" fg:x="214" fg:w="2"/><text x="3.7972%" y="1055.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="3.5472%" y="1029" width="0.0332%" height="15" fill="rgb(238,224,15)" fg:x="214" fg:w="2"/><text x="3.7972%" y="1039.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="3.5472%" y="1013" width="0.0332%" height="15" fill="rgb(241,136,10)" fg:x="214" fg:w="2"/><text x="3.7972%" y="1023.50"></text></g><g><title>CheckBlock (1 samples, 0.02%)</title><rect x="3.5803%" y="1509" width="0.0166%" height="15" fill="rgb(208,32,45)" fg:x="216" fg:w="1"/><text x="3.8303%" y="1519.50"></text></g><g><title>TxValidationState::TxValidationState (1 samples, 0.02%)</title><rect x="3.5803%" y="1493" width="0.0166%" height="15" fill="rgb(207,135,9)" fg:x="216" fg:w="1"/><text x="3.8303%" y="1503.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::ValidationState (1 samples, 0.02%)</title><rect x="3.5803%" y="1477" width="0.0166%" height="15" fill="rgb(206,86,44)" fg:x="216" fg:w="1"/><text x="3.8303%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="3.5803%" y="1461" width="0.0166%" height="15" fill="rgb(245,177,15)" fg:x="216" fg:w="1"/><text x="3.8303%" y="1471.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="3.5803%" y="1445" width="0.0166%" height="15" fill="rgb(206,64,50)" fg:x="216" fg:w="1"/><text x="3.8303%" y="1455.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.6135%" y="1381" width="0.0166%" height="15" fill="rgb(234,36,40)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1391.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1365" width="0.0166%" height="15" fill="rgb(213,64,8)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1349" width="0.0166%" height="15" fill="rgb(210,75,36)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1359.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1333" width="0.0166%" height="15" fill="rgb(229,88,21)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1343.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1317" width="0.0166%" height="15" fill="rgb(252,204,47)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1327.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1301" width="0.0166%" height="15" fill="rgb(208,77,27)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1311.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1285" width="0.0166%" height="15" fill="rgb(221,76,26)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1295.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1269" width="0.0166%" height="15" fill="rgb(225,139,18)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1279.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1253" width="0.0166%" height="15" fill="rgb(230,137,11)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1263.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1237" width="0.0166%" height="15" fill="rgb(212,28,1)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1247.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1221" width="0.0166%" height="15" fill="rgb(248,164,17)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1231.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1205" width="0.0166%" height="15" fill="rgb(222,171,42)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1189" width="0.0166%" height="15" fill="rgb(243,84,45)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1199.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1173" width="0.0166%" height="15" fill="rgb(252,49,23)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1183.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1157" width="0.0166%" height="15" fill="rgb(215,19,7)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1167.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1141" width="0.0166%" height="15" fill="rgb(238,81,41)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1125" width="0.0166%" height="15" fill="rgb(210,199,37)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1135.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1109" width="0.0166%" height="15" fill="rgb(244,192,49)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="3.6135%" y="1093" width="0.0166%" height="15" fill="rgb(226,211,11)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="3.6135%" y="1077" width="0.0166%" height="15" fill="rgb(236,162,54)" fg:x="218" fg:w="1"/><text x="3.8635%" y="1087.50"></text></g><g><title>CheckTransaction (3 samples, 0.05%)</title><rect x="3.5969%" y="1509" width="0.0497%" height="15" fill="rgb(220,229,9)" fg:x="217" fg:w="3"/><text x="3.8469%" y="1519.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (2 samples, 0.03%)</title><rect x="3.6135%" y="1493" width="0.0332%" height="15" fill="rgb(250,87,22)" fg:x="218" fg:w="2"/><text x="3.8635%" y="1503.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (2 samples, 0.03%)</title><rect x="3.6135%" y="1477" width="0.0332%" height="15" fill="rgb(239,43,17)" fg:x="218" fg:w="2"/><text x="3.8635%" y="1487.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (2 samples, 0.03%)</title><rect x="3.6135%" y="1461" width="0.0332%" height="15" fill="rgb(231,177,25)" fg:x="218" fg:w="2"/><text x="3.8635%" y="1471.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="3.6135%" y="1445" width="0.0332%" height="15" fill="rgb(219,179,1)" fg:x="218" fg:w="2"/><text x="3.8635%" y="1455.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="3.6135%" y="1429" width="0.0332%" height="15" fill="rgb(238,219,53)" fg:x="218" fg:w="2"/><text x="3.8635%" y="1439.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="3.6135%" y="1413" width="0.0332%" height="15" fill="rgb(232,167,36)" fg:x="218" fg:w="2"/><text x="3.8635%" y="1423.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="3.6135%" y="1397" width="0.0332%" height="15" fill="rgb(244,19,51)" fg:x="218" fg:w="2"/><text x="3.8635%" y="1407.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="3.6300%" y="1381" width="0.0166%" height="15" fill="rgb(224,6,22)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1391.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1365" width="0.0166%" height="15" fill="rgb(224,145,5)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1349" width="0.0166%" height="15" fill="rgb(234,130,49)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1359.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1333" width="0.0166%" height="15" fill="rgb(254,6,2)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1343.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1317" width="0.0166%" height="15" fill="rgb(208,96,46)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1327.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1301" width="0.0166%" height="15" fill="rgb(239,3,39)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1311.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1285" width="0.0166%" height="15" fill="rgb(233,210,1)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1295.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1269" width="0.0166%" height="15" fill="rgb(244,137,37)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1279.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1253" width="0.0166%" height="15" fill="rgb(240,136,2)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1263.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1237" width="0.0166%" height="15" fill="rgb(239,18,37)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1247.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1221" width="0.0166%" height="15" fill="rgb(218,185,22)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1231.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1205" width="0.0166%" height="15" fill="rgb(225,218,4)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1189" width="0.0166%" height="15" fill="rgb(230,182,32)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1199.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1173" width="0.0166%" height="15" fill="rgb(242,56,43)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1183.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1157" width="0.0166%" height="15" fill="rgb(233,99,24)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1167.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1141" width="0.0166%" height="15" fill="rgb(234,209,42)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1125" width="0.0166%" height="15" fill="rgb(227,7,12)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1135.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1109" width="0.0166%" height="15" fill="rgb(245,203,43)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1093" width="0.0166%" height="15" fill="rgb(238,205,33)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1103.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1077" width="0.0166%" height="15" fill="rgb(231,56,7)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1087.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="3.6300%" y="1061" width="0.0166%" height="15" fill="rgb(244,186,29)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1071.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="3.6300%" y="1045" width="0.0166%" height="15" fill="rgb(234,111,31)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1055.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="3.6300%" y="1029" width="0.0166%" height="15" fill="rgb(241,149,10)" fg:x="219" fg:w="1"/><text x="3.8800%" y="1039.50"></text></g><g><title>CompressAmount (2 samples, 0.03%)</title><rect x="3.6466%" y="1509" width="0.0332%" height="15" fill="rgb(249,206,44)" fg:x="220" fg:w="2"/><text x="3.8966%" y="1519.50"></text></g><g><title>CountWitnessSigOps (2 samples, 0.03%)</title><rect x="3.6798%" y="1509" width="0.0332%" height="15" fill="rgb(251,153,30)" fg:x="222" fg:w="2"/><text x="3.9298%" y="1519.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="3.6798%" y="1493" width="0.0332%" height="15" fill="rgb(239,152,38)" fg:x="222" fg:w="2"/><text x="3.9298%" y="1503.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.13%)</title><rect x="3.7129%" y="1509" width="0.1326%" height="15" fill="rgb(249,139,47)" fg:x="224" fg:w="8"/><text x="3.9629%" y="1519.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="3.7958%" y="1493" width="0.0497%" height="15" fill="rgb(244,64,35)" fg:x="229" fg:w="3"/><text x="4.0458%" y="1503.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="3.7958%" y="1477" width="0.0497%" height="15" fill="rgb(216,46,15)" fg:x="229" fg:w="3"/><text x="4.0458%" y="1487.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="3.8455%" y="1477" width="0.0166%" height="15" fill="rgb(250,74,19)" fg:x="232" fg:w="1"/><text x="4.0955%" y="1487.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="3.8455%" y="1461" width="0.0166%" height="15" fill="rgb(249,42,33)" fg:x="232" fg:w="1"/><text x="4.0955%" y="1471.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="3.8455%" y="1445" width="0.0166%" height="15" fill="rgb(242,149,17)" fg:x="232" fg:w="1"/><text x="4.0955%" y="1455.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="3.8455%" y="1429" width="0.0166%" height="15" fill="rgb(244,29,21)" fg:x="232" fg:w="1"/><text x="4.0955%" y="1439.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="3.8455%" y="1413" width="0.0166%" height="15" fill="rgb(220,130,37)" fg:x="232" fg:w="1"/><text x="4.0955%" y="1423.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="3.8455%" y="1397" width="0.0166%" height="15" fill="rgb(211,67,2)" fg:x="232" fg:w="1"/><text x="4.0955%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.8455%" y="1381" width="0.0166%" height="15" fill="rgb(235,68,52)" fg:x="232" fg:w="1"/><text x="4.0955%" y="1391.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="3.8621%" y="1477" width="0.0166%" height="15" fill="rgb(246,142,3)" fg:x="233" fg:w="1"/><text x="4.1121%" y="1487.50"></text></g><g><title>UpdateCoins (3 samples, 0.05%)</title><rect x="3.8455%" y="1509" width="0.0497%" height="15" fill="rgb(241,25,7)" fg:x="232" fg:w="3"/><text x="4.0955%" y="1519.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (3 samples, 0.05%)</title><rect x="3.8455%" y="1493" width="0.0497%" height="15" fill="rgb(242,119,39)" fg:x="232" fg:w="3"/><text x="4.0955%" y="1503.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::size (1 samples, 0.02%)</title><rect x="3.8787%" y="1477" width="0.0166%" height="15" fill="rgb(241,98,45)" fg:x="234" fg:w="1"/><text x="4.1287%" y="1487.50"></text></g><g><title>[000369.ldb] (1 samples, 0.02%)</title><rect x="3.8952%" y="1509" width="0.0166%" height="15" fill="rgb(254,28,30)" fg:x="235" fg:w="1"/><text x="4.1452%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="3.8952%" y="1493" width="0.0166%" height="15" fill="rgb(241,142,54)" fg:x="235" fg:w="1"/><text x="4.1452%" y="1503.50"></text></g><g><title>[000596.ldb] (1 samples, 0.02%)</title><rect x="3.9118%" y="1509" width="0.0166%" height="15" fill="rgb(222,85,15)" fg:x="236" fg:w="1"/><text x="4.1618%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9118%" y="1493" width="0.0166%" height="15" fill="rgb(210,85,47)" fg:x="236" fg:w="1"/><text x="4.1618%" y="1503.50"></text></g><g><title>[002240.ldb] (1 samples, 0.02%)</title><rect x="3.9284%" y="1509" width="0.0166%" height="15" fill="rgb(224,206,25)" fg:x="237" fg:w="1"/><text x="4.1784%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="3.9284%" y="1493" width="0.0166%" height="15" fill="rgb(243,201,19)" fg:x="237" fg:w="1"/><text x="4.1784%" y="1503.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.02%)</title><rect x="3.9450%" y="1493" width="0.0166%" height="15" fill="rgb(236,59,4)" fg:x="238" fg:w="1"/><text x="4.1950%" y="1503.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="3.9615%" y="1493" width="0.0166%" height="15" fill="rgb(254,179,45)" fg:x="239" fg:w="1"/><text x="4.2115%" y="1503.50"></text></g><g><title>UpdateCoins (1 samples, 0.02%)</title><rect x="3.9781%" y="1493" width="0.0166%" height="15" fill="rgb(226,14,10)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1503.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="3.9781%" y="1477" width="0.0166%" height="15" fill="rgb(244,27,41)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1487.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="3.9781%" y="1461" width="0.0166%" height="15" fill="rgb(235,35,32)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1471.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="3.9781%" y="1445" width="0.0166%" height="15" fill="rgb(218,68,31)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1455.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="3.9781%" y="1429" width="0.0166%" height="15" fill="rgb(207,120,37)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1439.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="3.9781%" y="1413" width="0.0166%" height="15" fill="rgb(227,98,0)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1423.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="3.9781%" y="1397" width="0.0166%" height="15" fill="rgb(207,7,3)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9781%" y="1381" width="0.0166%" height="15" fill="rgb(206,98,19)" fg:x="240" fg:w="1"/><text x="4.2281%" y="1391.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="3.9947%" y="1493" width="0.0166%" height="15" fill="rgb(217,5,26)" fg:x="241" fg:w="1"/><text x="4.2447%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="4.0113%" y="1493" width="0.0497%" height="15" fill="rgb(235,190,38)" fg:x="242" fg:w="3"/><text x="4.2613%" y="1503.50"></text></g><g><title>_int_free (9 samples, 0.15%)</title><rect x="4.0610%" y="1493" width="0.1492%" height="15" fill="rgb(247,86,24)" fg:x="245" fg:w="9"/><text x="4.3110%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="4.2102%" y="1493" width="0.0332%" height="15" fill="rgb(205,101,16)" fg:x="254" fg:w="2"/><text x="4.4602%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="4.2433%" y="1493" width="0.0166%" height="15" fill="rgb(246,168,33)" fg:x="256" fg:w="1"/><text x="4.4933%" y="1503.50"></text></g><g><title>[[heap]] (27 samples, 0.45%)</title><rect x="3.9450%" y="1509" width="0.4475%" height="15" fill="rgb(231,114,1)" fg:x="238" fg:w="27"/><text x="4.1950%" y="1519.50"></text></g><g><title>malloc_consolidate (8 samples, 0.13%)</title><rect x="4.2599%" y="1493" width="0.1326%" height="15" fill="rgb(207,184,53)" fg:x="257" fg:w="8"/><text x="4.5099%" y="1503.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="4.3925%" y="1493" width="0.0332%" height="15" fill="rgb(224,95,51)" fg:x="265" fg:w="2"/><text x="4.6425%" y="1503.50"></text></g><g><title>CCoinsViewCache::AddCoin (2 samples, 0.03%)</title><rect x="4.4257%" y="1493" width="0.0332%" height="15" fill="rgb(212,188,45)" fg:x="267" fg:w="2"/><text x="4.6757%" y="1503.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.07%)</title><rect x="4.4588%" y="1493" width="0.0663%" height="15" fill="rgb(223,154,38)" fg:x="269" fg:w="4"/><text x="4.7088%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="4.5085%" y="1477" width="0.0166%" height="15" fill="rgb(251,22,52)" fg:x="272" fg:w="1"/><text x="4.7585%" y="1487.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="4.5085%" y="1461" width="0.0166%" height="15" fill="rgb(229,209,22)" fg:x="272" fg:w="1"/><text x="4.7585%" y="1471.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="4.5085%" y="1445" width="0.0166%" height="15" fill="rgb(234,138,34)" fg:x="272" fg:w="1"/><text x="4.7585%" y="1455.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="4.5085%" y="1429" width="0.0166%" height="15" fill="rgb(212,95,11)" fg:x="272" fg:w="1"/><text x="4.7585%" y="1439.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="4.5251%" y="1493" width="0.0166%" height="15" fill="rgb(240,179,47)" fg:x="273" fg:w="1"/><text x="4.7751%" y="1503.50"></text></g><g><title>CSHA256::Write (15 samples, 0.25%)</title><rect x="4.5417%" y="1493" width="0.2486%" height="15" fill="rgb(240,163,11)" fg:x="274" fg:w="15"/><text x="4.7917%" y="1503.50"></text></g><g><title>CScript::GetSigOpCount (6 samples, 0.10%)</title><rect x="4.7903%" y="1493" width="0.0995%" height="15" fill="rgb(236,37,12)" fg:x="289" fg:w="6"/><text x="5.0403%" y="1503.50"></text></g><g><title>CScript::IsPushOnly (1 samples, 0.02%)</title><rect x="4.8898%" y="1493" width="0.0166%" height="15" fill="rgb(232,164,16)" fg:x="295" fg:w="1"/><text x="5.1398%" y="1503.50"></text></g><g><title>CTransaction::ComputeHasWitness (2 samples, 0.03%)</title><rect x="4.9063%" y="1493" width="0.0332%" height="15" fill="rgb(244,205,15)" fg:x="296" fg:w="2"/><text x="5.1563%" y="1503.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.02%)</title><rect x="4.9229%" y="1477" width="0.0166%" height="15" fill="rgb(223,117,47)" fg:x="297" fg:w="1"/><text x="5.1729%" y="1487.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.02%)</title><rect x="4.9229%" y="1461" width="0.0166%" height="15" fill="rgb(244,107,35)" fg:x="297" fg:w="1"/><text x="5.1729%" y="1471.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.02%)</title><rect x="4.9229%" y="1445" width="0.0166%" height="15" fill="rgb(205,140,8)" fg:x="297" fg:w="1"/><text x="5.1729%" y="1455.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="4.9229%" y="1429" width="0.0166%" height="15" fill="rgb(228,84,46)" fg:x="297" fg:w="1"/><text x="5.1729%" y="1439.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="4.9229%" y="1413" width="0.0166%" height="15" fill="rgb(254,188,9)" fg:x="297" fg:w="1"/><text x="5.1729%" y="1423.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="4.9229%" y="1397" width="0.0166%" height="15" fill="rgb(206,112,54)" fg:x="297" fg:w="1"/><text x="5.1729%" y="1407.50"></text></g><g><title>CTxMemPool::ClearPrioritisation (1 samples, 0.02%)</title><rect x="4.9395%" y="1493" width="0.0166%" height="15" fill="rgb(216,84,49)" fg:x="298" fg:w="1"/><text x="5.1895%" y="1503.50"></text></g><g><title>CalculateSequenceLocks (1 samples, 0.02%)</title><rect x="4.9561%" y="1493" width="0.0166%" height="15" fill="rgb(214,194,35)" fg:x="299" fg:w="1"/><text x="5.2061%" y="1503.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="4.9727%" y="1493" width="0.0166%" height="15" fill="rgb(249,28,3)" fg:x="300" fg:w="1"/><text x="5.2227%" y="1503.50"></text></g><g><title>CompressScript (2 samples, 0.03%)</title><rect x="4.9892%" y="1493" width="0.0332%" height="15" fill="rgb(222,56,52)" fg:x="301" fg:w="2"/><text x="5.2392%" y="1503.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="5.0224%" y="1493" width="0.0166%" height="15" fill="rgb(245,217,50)" fg:x="303" fg:w="1"/><text x="5.2724%" y="1503.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="5.0390%" y="1493" width="0.0166%" height="15" fill="rgb(213,201,24)" fg:x="304" fg:w="1"/><text x="5.2890%" y="1503.50"></text></g><g><title>GetScriptOp (3 samples, 0.05%)</title><rect x="5.0555%" y="1493" width="0.0497%" height="15" fill="rgb(248,116,28)" fg:x="305" fg:w="3"/><text x="5.3055%" y="1503.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.13%)</title><rect x="5.1053%" y="1493" width="0.1326%" height="15" fill="rgb(219,72,43)" fg:x="308" fg:w="8"/><text x="5.3553%" y="1503.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="5.2379%" y="1493" width="0.0166%" height="15" fill="rgb(209,138,14)" fg:x="316" fg:w="1"/><text x="5.4879%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.22%)</title><rect x="5.2544%" y="1493" width="0.2155%" height="15" fill="rgb(222,18,33)" fg:x="317" fg:w="13"/><text x="5.5044%" y="1503.50"></text></g><g><title>_IO_fwrite (17 samples, 0.28%)</title><rect x="5.4699%" y="1493" width="0.2818%" height="15" fill="rgb(213,199,7)" fg:x="330" fg:w="17"/><text x="5.7199%" y="1503.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (3 samples, 0.05%)</title><rect x="5.7517%" y="1493" width="0.0497%" height="15" fill="rgb(250,110,10)" fg:x="347" fg:w="3"/><text x="6.0017%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (30 samples, 0.50%)</title><rect x="5.8014%" y="1493" width="0.4973%" height="15" fill="rgb(248,123,6)" fg:x="350" fg:w="30"/><text x="6.0514%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (35 samples, 0.58%)</title><rect x="6.2987%" y="1493" width="0.5801%" height="15" fill="rgb(206,91,31)" fg:x="380" fg:w="35"/><text x="6.5487%" y="1503.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (4 samples, 0.07%)</title><rect x="6.8788%" y="1493" width="0.0663%" height="15" fill="rgb(211,154,13)" fg:x="415" fg:w="4"/><text x="7.1288%" y="1503.50"></text></g><g><title>_int_free (13 samples, 0.22%)</title><rect x="6.9451%" y="1493" width="0.2155%" height="15" fill="rgb(225,148,7)" fg:x="419" fg:w="13"/><text x="7.1951%" y="1503.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.03%)</title><rect x="7.1606%" y="1493" width="0.0332%" height="15" fill="rgb(220,160,43)" fg:x="432" fg:w="2"/><text x="7.4106%" y="1503.50"></text></g><g><title>_int_malloc (19 samples, 0.31%)</title><rect x="7.1938%" y="1493" width="0.3149%" height="15" fill="rgb(213,52,39)" fg:x="434" fg:w="19"/><text x="7.4438%" y="1503.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="7.5087%" y="1493" width="0.0166%" height="15" fill="rgb(243,137,7)" fg:x="453" fg:w="1"/><text x="7.7587%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.15%)</title><rect x="7.5253%" y="1493" width="0.1492%" height="15" fill="rgb(230,79,13)" fg:x="454" fg:w="9"/><text x="7.7753%" y="1503.50"></text></g><g><title>fwrite@plt (1 samples, 0.02%)</title><rect x="7.6745%" y="1493" width="0.0166%" height="15" fill="rgb(247,105,23)" fg:x="463" fg:w="1"/><text x="7.9245%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="7.6910%" y="1493" width="0.0663%" height="15" fill="rgb(223,179,41)" fg:x="464" fg:w="4"/><text x="7.9410%" y="1503.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="7.7573%" y="1493" width="0.0166%" height="15" fill="rgb(218,9,34)" fg:x="468" fg:w="1"/><text x="8.0073%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="7.7739%" y="1493" width="0.0166%" height="15" fill="rgb(222,106,8)" fg:x="469" fg:w="1"/><text x="8.0239%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::key (2 samples, 0.03%)</title><rect x="7.7905%" y="1493" width="0.0332%" height="15" fill="rgb(211,220,0)" fg:x="470" fg:w="2"/><text x="8.0405%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="7.8236%" y="1493" width="0.0166%" height="15" fill="rgb(229,52,16)" fg:x="472" fg:w="1"/><text x="8.0736%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (12 samples, 0.20%)</title><rect x="7.8402%" y="1493" width="0.1989%" height="15" fill="rgb(212,155,18)" fg:x="473" fg:w="12"/><text x="8.0902%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.10%)</title><rect x="8.0391%" y="1493" width="0.0995%" height="15" fill="rgb(242,21,14)" fg:x="485" fg:w="6"/><text x="8.2891%" y="1503.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="8.1386%" y="1493" width="0.0166%" height="15" fill="rgb(222,19,48)" fg:x="491" fg:w="1"/><text x="8.3886%" y="1503.50"></text></g><g><title>leveldb::VarintLength (1 samples, 0.02%)</title><rect x="8.1551%" y="1493" width="0.0166%" height="15" fill="rgb(232,45,27)" fg:x="492" fg:w="1"/><text x="8.4051%" y="1503.50"></text></g><g><title>malloc (15 samples, 0.25%)</title><rect x="8.1717%" y="1493" width="0.2486%" height="15" fill="rgb(249,103,42)" fg:x="493" fg:w="15"/><text x="8.4217%" y="1503.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="8.4204%" y="1493" width="0.0166%" height="15" fill="rgb(246,81,33)" fg:x="508" fg:w="1"/><text x="8.6704%" y="1503.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="8.4369%" y="1493" width="0.0166%" height="15" fill="rgb(252,33,42)" fg:x="509" fg:w="1"/><text x="8.6869%" y="1503.50"></text></g><g><title>memcpy@plt (5 samples, 0.08%)</title><rect x="8.4535%" y="1493" width="0.0829%" height="15" fill="rgb(209,212,41)" fg:x="510" fg:w="5"/><text x="8.7035%" y="1503.50"></text></g><g><title>operator new (3 samples, 0.05%)</title><rect x="8.5364%" y="1493" width="0.0497%" height="15" fill="rgb(207,154,6)" fg:x="515" fg:w="3"/><text x="8.7864%" y="1503.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="8.5861%" y="1493" width="0.0166%" height="15" fill="rgb(223,64,47)" fg:x="518" fg:w="1"/><text x="8.8361%" y="1503.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="8.6027%" y="1493" width="0.0166%" height="15" fill="rgb(211,161,38)" fg:x="519" fg:w="1"/><text x="8.8527%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="8.6193%" y="1493" width="0.0332%" height="15" fill="rgb(219,138,40)" fg:x="520" fg:w="2"/><text x="8.8693%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.05%)</title><rect x="8.6524%" y="1493" width="0.0497%" height="15" fill="rgb(241,228,46)" fg:x="522" fg:w="3"/><text x="8.9024%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="8.6856%" y="1477" width="0.0166%" height="15" fill="rgb(223,209,38)" fg:x="524" fg:w="1"/><text x="8.9356%" y="1487.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="8.6856%" y="1461" width="0.0166%" height="15" fill="rgb(236,164,45)" fg:x="524" fg:w="1"/><text x="8.9356%" y="1471.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="8.6856%" y="1445" width="0.0166%" height="15" fill="rgb(231,15,5)" fg:x="524" fg:w="1"/><text x="8.9356%" y="1455.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="8.7021%" y="1493" width="0.0166%" height="15" fill="rgb(252,35,15)" fg:x="525" fg:w="1"/><text x="8.9521%" y="1503.50"></text></g><g><title>std::_Rb_tree_increment (1 samples, 0.02%)</title><rect x="8.7187%" y="1493" width="0.0166%" height="15" fill="rgb(248,181,18)" fg:x="526" fg:w="1"/><text x="8.9687%" y="1503.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (3 samples, 0.05%)</title><rect x="8.7353%" y="1493" width="0.0497%" height="15" fill="rgb(233,39,42)" fg:x="527" fg:w="3"/><text x="8.9853%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="8.7850%" y="1493" width="0.0166%" height="15" fill="rgb(238,110,33)" fg:x="530" fg:w="1"/><text x="9.0350%" y="1503.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="8.8016%" y="1493" width="0.0166%" height="15" fill="rgb(233,195,10)" fg:x="531" fg:w="1"/><text x="9.0516%" y="1503.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%)</title><rect x="8.8182%" y="1493" width="0.0166%" height="15" fill="rgb(254,105,3)" fg:x="532" fg:w="1"/><text x="9.0682%" y="1503.50"></text></g><g><title>std::filesystem::__cxx11::path::_List::_List (1 samples, 0.02%)</title><rect x="8.8347%" y="1493" width="0.0166%" height="15" fill="rgb(221,225,9)" fg:x="533" fg:w="1"/><text x="9.0847%" y="1503.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 0.08%)</title><rect x="8.8513%" y="1493" width="0.0829%" height="15" fill="rgb(224,227,45)" fg:x="534" fg:w="5"/><text x="9.1013%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="8.9342%" y="1493" width="0.0166%" height="15" fill="rgb(229,198,43)" fg:x="539" fg:w="1"/><text x="9.1842%" y="1503.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (2 samples, 0.03%)</title><rect x="8.9508%" y="1493" width="0.0332%" height="15" fill="rgb(206,209,35)" fg:x="540" fg:w="2"/><text x="9.2008%" y="1503.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.05%)</title><rect x="8.9839%" y="1493" width="0.0497%" height="15" fill="rgb(245,195,53)" fg:x="542" fg:w="3"/><text x="9.2339%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="9.0336%" y="1493" width="0.0166%" height="15" fill="rgb(240,92,26)" fg:x="545" fg:w="1"/><text x="9.2836%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="9.0502%" y="1493" width="0.0332%" height="15" fill="rgb(207,40,23)" fg:x="546" fg:w="2"/><text x="9.3002%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.15%)</title><rect x="9.0834%" y="1493" width="0.1492%" height="15" fill="rgb(223,111,35)" fg:x="548" fg:w="9"/><text x="9.3334%" y="1503.50"></text></g><g><title>[anon] (293 samples, 4.86%)</title><rect x="4.3925%" y="1509" width="4.8566%" height="15" fill="rgb(229,147,28)" fg:x="265" fg:w="293"/><text x="4.6425%" y="1519.50">[anon]</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="9.2326%" y="1493" width="0.0166%" height="15" fill="rgb(211,29,28)" fg:x="557" fg:w="1"/><text x="9.4826%" y="1503.50"></text></g><g><title>[bitcoind-base] (1 samples, 0.02%)</title><rect x="9.2491%" y="1509" width="0.0166%" height="15" fill="rgb(228,72,33)" fg:x="558" fg:w="1"/><text x="9.4991%" y="1519.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="9.2491%" y="1493" width="0.0166%" height="15" fill="rgb(205,214,31)" fg:x="558" fg:w="1"/><text x="9.4991%" y="1503.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="9.3486%" y="1493" width="0.0663%" height="15" fill="rgb(224,111,15)" fg:x="564" fg:w="4"/><text x="9.5986%" y="1503.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="9.4149%" y="1493" width="0.0166%" height="15" fill="rgb(253,21,26)" fg:x="568" fg:w="1"/><text x="9.6649%" y="1503.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="9.4315%" y="1493" width="0.0497%" height="15" fill="rgb(245,139,43)" fg:x="569" fg:w="3"/><text x="9.6815%" y="1503.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="9.4812%" y="1493" width="0.0166%" height="15" fill="rgb(252,170,7)" fg:x="572" fg:w="1"/><text x="9.7312%" y="1503.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="9.4978%" y="1493" width="0.0166%" height="15" fill="rgb(231,118,14)" fg:x="573" fg:w="1"/><text x="9.7478%" y="1503.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="9.5143%" y="1493" width="0.0166%" height="15" fill="rgb(238,83,0)" fg:x="574" fg:w="1"/><text x="9.7643%" y="1503.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="9.5309%" y="1493" width="0.0663%" height="15" fill="rgb(221,39,39)" fg:x="575" fg:w="4"/><text x="9.7809%" y="1503.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="9.5972%" y="1493" width="0.1492%" height="15" fill="rgb(222,119,46)" fg:x="579" fg:w="9"/><text x="9.8472%" y="1503.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="9.6967%" y="1477" width="0.0497%" height="15" fill="rgb(222,165,49)" fg:x="585" fg:w="3"/><text x="9.9467%" y="1487.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="9.6967%" y="1461" width="0.0497%" height="15" fill="rgb(219,113,52)" fg:x="585" fg:w="3"/><text x="9.9467%" y="1471.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="9.6967%" y="1445" width="0.0497%" height="15" fill="rgb(214,7,15)" fg:x="585" fg:w="3"/><text x="9.9467%" y="1455.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="9.7464%" y="1493" width="0.0166%" height="15" fill="rgb(235,32,4)" fg:x="588" fg:w="1"/><text x="9.9964%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (18 samples, 0.30%)</title><rect x="9.7630%" y="1493" width="0.2984%" height="15" fill="rgb(238,90,54)" fg:x="589" fg:w="18"/><text x="10.0130%" y="1503.50"></text></g><g><title>_IO_fwrite (22 samples, 0.36%)</title><rect x="10.0613%" y="1493" width="0.3647%" height="15" fill="rgb(213,208,19)" fg:x="607" fg:w="22"/><text x="10.3113%" y="1503.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="10.4260%" y="1493" width="0.0166%" height="15" fill="rgb(233,156,4)" fg:x="629" fg:w="1"/><text x="10.6760%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.05%)</title><rect x="10.4426%" y="1493" width="0.0497%" height="15" fill="rgb(207,194,5)" fg:x="630" fg:w="3"/><text x="10.6926%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.22%)</title><rect x="10.4923%" y="1493" width="0.2155%" height="15" fill="rgb(206,111,30)" fg:x="633" fg:w="13"/><text x="10.7423%" y="1503.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="10.7078%" y="1493" width="0.0497%" height="15" fill="rgb(243,70,54)" fg:x="646" fg:w="3"/><text x="10.9578%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="10.7575%" y="1493" width="0.0166%" height="15" fill="rgb(242,28,8)" fg:x="649" fg:w="1"/><text x="11.0075%" y="1503.50"></text></g><g><title>_int_free (5 samples, 0.08%)</title><rect x="10.7741%" y="1493" width="0.0829%" height="15" fill="rgb(219,106,18)" fg:x="650" fg:w="5"/><text x="11.0241%" y="1503.50"></text></g><g><title>_int_malloc (26 samples, 0.43%)</title><rect x="10.8570%" y="1493" width="0.4310%" height="15" fill="rgb(244,222,10)" fg:x="655" fg:w="26"/><text x="11.1070%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.10%)</title><rect x="11.2879%" y="1493" width="0.0995%" height="15" fill="rgb(236,179,52)" fg:x="681" fg:w="6"/><text x="11.5379%" y="1503.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="11.3874%" y="1493" width="0.0166%" height="15" fill="rgb(213,23,39)" fg:x="687" fg:w="1"/><text x="11.6374%" y="1503.50"></text></g><g><title>fwrite@plt (1 samples, 0.02%)</title><rect x="11.4039%" y="1493" width="0.0166%" height="15" fill="rgb(238,48,10)" fg:x="688" fg:w="1"/><text x="11.6539%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.08%)</title><rect x="11.4205%" y="1493" width="0.0829%" height="15" fill="rgb(251,196,23)" fg:x="689" fg:w="5"/><text x="11.6705%" y="1503.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="11.5034%" y="1493" width="0.0166%" height="15" fill="rgb(250,152,24)" fg:x="694" fg:w="1"/><text x="11.7534%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="11.5200%" y="1493" width="0.0166%" height="15" fill="rgb(209,150,17)" fg:x="695" fg:w="1"/><text x="11.7700%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::status (2 samples, 0.03%)</title><rect x="11.5365%" y="1493" width="0.0332%" height="15" fill="rgb(234,202,34)" fg:x="696" fg:w="2"/><text x="11.7865%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="11.5697%" y="1493" width="0.0166%" height="15" fill="rgb(253,148,53)" fg:x="698" fg:w="1"/><text x="11.8197%" y="1503.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (1 samples, 0.02%)</title><rect x="11.5863%" y="1493" width="0.0166%" height="15" fill="rgb(218,129,16)" fg:x="699" fg:w="1"/><text x="11.8363%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="11.6029%" y="1493" width="0.0497%" height="15" fill="rgb(216,85,19)" fg:x="700" fg:w="3"/><text x="11.8529%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="11.6360%" y="1477" width="0.0166%" height="15" fill="rgb(235,228,7)" fg:x="702" fg:w="1"/><text x="11.8860%" y="1487.50"></text></g><g><title>leveldb::MemTable::Get (1 samples, 0.02%)</title><rect x="11.6526%" y="1493" width="0.0166%" height="15" fill="rgb(245,175,0)" fg:x="703" fg:w="1"/><text x="11.9026%" y="1503.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Seek (1 samples, 0.02%)</title><rect x="11.6526%" y="1477" width="0.0166%" height="15" fill="rgb(208,168,36)" fg:x="703" fg:w="1"/><text x="11.9026%" y="1487.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="11.6526%" y="1461" width="0.0166%" height="15" fill="rgb(246,171,24)" fg:x="703" fg:w="1"/><text x="11.9026%" y="1471.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.03%)</title><rect x="11.6692%" y="1493" width="0.0332%" height="15" fill="rgb(215,142,24)" fg:x="704" fg:w="2"/><text x="11.9192%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="11.7023%" y="1493" width="0.0166%" height="15" fill="rgb(250,187,7)" fg:x="706" fg:w="1"/><text x="11.9523%" y="1503.50"></text></g><g><title>malloc (12 samples, 0.20%)</title><rect x="11.7189%" y="1493" width="0.1989%" height="15" fill="rgb(228,66,33)" fg:x="707" fg:w="12"/><text x="11.9689%" y="1503.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="11.9178%" y="1493" width="0.0166%" height="15" fill="rgb(234,215,21)" fg:x="719" fg:w="1"/><text x="12.1678%" y="1503.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="11.9344%" y="1493" width="0.0166%" height="15" fill="rgb(222,191,20)" fg:x="720" fg:w="1"/><text x="12.1844%" y="1503.50"></text></g><g><title>operator new (2 samples, 0.03%)</title><rect x="11.9509%" y="1493" width="0.0332%" height="15" fill="rgb(245,79,54)" fg:x="721" fg:w="2"/><text x="12.2009%" y="1503.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="11.9841%" y="1493" width="0.0332%" height="15" fill="rgb(240,10,37)" fg:x="723" fg:w="2"/><text x="12.2341%" y="1503.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="12.0172%" y="1493" width="0.0166%" height="15" fill="rgb(214,192,32)" fg:x="725" fg:w="1"/><text x="12.2672%" y="1503.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (1 samples, 0.02%)</title><rect x="12.0338%" y="1493" width="0.0166%" height="15" fill="rgb(209,36,54)" fg:x="726" fg:w="1"/><text x="12.2838%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="12.0504%" y="1493" width="0.0166%" height="15" fill="rgb(220,10,11)" fg:x="727" fg:w="1"/><text x="12.3004%" y="1503.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="12.0670%" y="1493" width="0.0166%" height="15" fill="rgb(221,106,17)" fg:x="728" fg:w="1"/><text x="12.3170%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="12.0835%" y="1493" width="0.0497%" height="15" fill="rgb(251,142,44)" fg:x="729" fg:w="3"/><text x="12.3335%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="12.1333%" y="1493" width="0.0166%" height="15" fill="rgb(238,13,15)" fg:x="732" fg:w="1"/><text x="12.3833%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="12.1498%" y="1493" width="0.0166%" height="15" fill="rgb(208,107,27)" fg:x="733" fg:w="1"/><text x="12.3998%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="12.1664%" y="1493" width="0.0166%" height="15" fill="rgb(205,136,37)" fg:x="734" fg:w="1"/><text x="12.4164%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="12.1830%" y="1493" width="0.0166%" height="15" fill="rgb(250,205,27)" fg:x="735" fg:w="1"/><text x="12.4330%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="12.1996%" y="1493" width="0.0829%" height="15" fill="rgb(210,80,43)" fg:x="736" fg:w="5"/><text x="12.4496%" y="1503.50"></text></g><g><title>[unknown] (183 samples, 3.03%)</title><rect x="9.2657%" y="1509" width="3.0333%" height="15" fill="rgb(247,160,36)" fg:x="559" fg:w="183"/><text x="9.5157%" y="1519.50">[un..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="12.2824%" y="1493" width="0.0166%" height="15" fill="rgb(234,13,49)" fg:x="741" fg:w="1"/><text x="12.5324%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (6 samples, 0.10%)</title><rect x="12.2990%" y="1509" width="0.0995%" height="15" fill="rgb(234,122,0)" fg:x="742" fg:w="6"/><text x="12.5490%" y="1519.50"></text></g><g><title>_IO_fwrite (5 samples, 0.08%)</title><rect x="12.3985%" y="1509" width="0.0829%" height="15" fill="rgb(207,146,38)" fg:x="748" fg:w="5"/><text x="12.6485%" y="1519.50"></text></g><g><title>_M_run (3 samples, 0.05%)</title><rect x="12.4814%" y="1509" width="0.0497%" height="15" fill="rgb(207,177,25)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1519.50"></text></g><g><title>operator (3 samples, 0.05%)</title><rect x="12.4814%" y="1493" width="0.0497%" height="15" fill="rgb(211,178,42)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1503.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (3 samples, 0.05%)</title><rect x="12.4814%" y="1477" width="0.0497%" height="15" fill="rgb(230,69,54)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1487.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (3 samples, 0.05%)</title><rect x="12.4814%" y="1461" width="0.0497%" height="15" fill="rgb(214,135,41)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1471.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (3 samples, 0.05%)</title><rect x="12.4814%" y="1445" width="0.0497%" height="15" fill="rgb(237,67,25)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1455.50"></text></g><g><title>util::TraceThread (3 samples, 0.05%)</title><rect x="12.4814%" y="1429" width="0.0497%" height="15" fill="rgb(222,189,50)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1439.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (3 samples, 0.05%)</title><rect x="12.4814%" y="1413" width="0.0497%" height="15" fill="rgb(245,148,34)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1423.50"></text></g><g><title>CConnman::ThreadMessageHandler (3 samples, 0.05%)</title><rect x="12.4814%" y="1397" width="0.0497%" height="15" fill="rgb(222,29,6)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1407.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (3 samples, 0.05%)</title><rect x="12.4814%" y="1381" width="0.0497%" height="15" fill="rgb(221,189,43)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1391.50"></text></g><g><title>Chainstate::ActivateBestChain (3 samples, 0.05%)</title><rect x="12.4814%" y="1365" width="0.0497%" height="15" fill="rgb(207,36,27)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1375.50"></text></g><g><title>Chainstate::ActivateBestChainStep (3 samples, 0.05%)</title><rect x="12.4814%" y="1349" width="0.0497%" height="15" fill="rgb(217,90,24)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1359.50"></text></g><g><title>Chainstate::ConnectTip (3 samples, 0.05%)</title><rect x="12.4814%" y="1333" width="0.0497%" height="15" fill="rgb(224,66,35)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1343.50"></text></g><g><title>Chainstate::ConnectBlock (3 samples, 0.05%)</title><rect x="12.4814%" y="1317" width="0.0497%" height="15" fill="rgb(221,13,50)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1327.50"></text></g><g><title>Consensus::CheckTxInputs (3 samples, 0.05%)</title><rect x="12.4814%" y="1301" width="0.0497%" height="15" fill="rgb(236,68,49)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1311.50"></text></g><g><title>CCoinsViewCache::HaveInputs (3 samples, 0.05%)</title><rect x="12.4814%" y="1285" width="0.0497%" height="15" fill="rgb(229,146,28)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1295.50"></text></g><g><title>CCoinsViewCache::HaveCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1269" width="0.0497%" height="15" fill="rgb(225,31,38)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1279.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1253" width="0.0497%" height="15" fill="rgb(250,208,3)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1263.50"></text></g><g><title>CCoinsViewCache::GetCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1237" width="0.0497%" height="15" fill="rgb(246,54,23)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1221" width="0.0497%" height="15" fill="rgb(243,76,11)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1231.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1205" width="0.0497%" height="15" fill="rgb(245,21,50)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1215.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (3 samples, 0.05%)</title><rect x="12.4814%" y="1189" width="0.0497%" height="15" fill="rgb(228,9,43)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1199.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1173" width="0.0497%" height="15" fill="rgb(208,100,47)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1183.50"></text></g><g><title>CCoinsViewBacked::GetCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1157" width="0.0497%" height="15" fill="rgb(232,26,8)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1167.50"></text></g><g><title>CCoinsViewDB::GetCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1141" width="0.0497%" height="15" fill="rgb(216,166,38)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1151.50"></text></g><g><title>CCoinsViewDB::GetCoin (3 samples, 0.05%)</title><rect x="12.4814%" y="1125" width="0.0497%" height="15" fill="rgb(251,202,51)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1135.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (3 samples, 0.05%)</title><rect x="12.4814%" y="1109" width="0.0497%" height="15" fill="rgb(254,216,34)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1119.50"></text></g><g><title>leveldb::DBImpl::Get (3 samples, 0.05%)</title><rect x="12.4814%" y="1093" width="0.0497%" height="15" fill="rgb(251,32,27)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1103.50"></text></g><g><title>leveldb::Version::Get (3 samples, 0.05%)</title><rect x="12.4814%" y="1077" width="0.0497%" height="15" fill="rgb(208,127,28)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1087.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (3 samples, 0.05%)</title><rect x="12.4814%" y="1061" width="0.0497%" height="15" fill="rgb(224,137,22)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1071.50"></text></g><g><title>leveldb::Version::Get (3 samples, 0.05%)</title><rect x="12.4814%" y="1045" width="0.0497%" height="15" fill="rgb(254,70,32)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1055.50"></text></g><g><title>leveldb::TableCache::Get (3 samples, 0.05%)</title><rect x="12.4814%" y="1029" width="0.0497%" height="15" fill="rgb(229,75,37)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1039.50"></text></g><g><title>leveldb::TableCache::FindTable (3 samples, 0.05%)</title><rect x="12.4814%" y="1013" width="0.0497%" height="15" fill="rgb(252,64,23)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1023.50"></text></g><g><title>leveldb::Table::Open (3 samples, 0.05%)</title><rect x="12.4814%" y="997" width="0.0497%" height="15" fill="rgb(232,162,48)" fg:x="753" fg:w="3"/><text x="12.7314%" y="1007.50"></text></g><g><title>leveldb::Table::ReadMeta (3 samples, 0.05%)</title><rect x="12.4814%" y="981" width="0.0497%" height="15" fill="rgb(246,160,12)" fg:x="753" fg:w="3"/><text x="12.7314%" y="991.50"></text></g><g><title>leveldb::Table::ReadFilter (3 samples, 0.05%)</title><rect x="12.4814%" y="965" width="0.0497%" height="15" fill="rgb(247,166,0)" fg:x="753" fg:w="3"/><text x="12.7314%" y="975.50"></text></g><g><title>leveldb::ReadBlock (3 samples, 0.05%)</title><rect x="12.4814%" y="949" width="0.0497%" height="15" fill="rgb(249,219,21)" fg:x="753" fg:w="3"/><text x="12.7314%" y="959.50"></text></g><g><title>leveldb::crc32c::Value (3 samples, 0.05%)</title><rect x="12.4814%" y="933" width="0.0497%" height="15" fill="rgb(205,209,3)" fg:x="753" fg:w="3"/><text x="12.7314%" y="943.50"></text></g><g><title>crc32c::ExtendSse42 (3 samples, 0.05%)</title><rect x="12.4814%" y="917" width="0.0497%" height="15" fill="rgb(243,44,1)" fg:x="753" fg:w="3"/><text x="12.7314%" y="927.50"></text></g><g><title>_mm_crc32_u64 (3 samples, 0.05%)</title><rect x="12.4814%" y="901" width="0.0497%" height="15" fill="rgb(206,159,16)" fg:x="753" fg:w="3"/><text x="12.7314%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.5145%" y="885" width="0.0166%" height="15" fill="rgb(244,77,30)" fg:x="755" fg:w="1"/><text x="12.7645%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.5145%" y="869" width="0.0166%" height="15" fill="rgb(218,69,12)" fg:x="755" fg:w="1"/><text x="12.7645%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.5145%" y="853" width="0.0166%" height="15" fill="rgb(212,87,7)" fg:x="755" fg:w="1"/><text x="12.7645%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.5145%" y="837" width="0.0166%" height="15" fill="rgb(245,114,25)" fg:x="755" fg:w="1"/><text x="12.7645%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="12.5145%" y="821" width="0.0166%" height="15" fill="rgb(210,61,42)" fg:x="755" fg:w="1"/><text x="12.7645%" y="831.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (4 samples, 0.07%)</title><rect x="12.5808%" y="1269" width="0.0663%" height="15" fill="rgb(211,52,33)" fg:x="759" fg:w="4"/><text x="12.8308%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (4 samples, 0.07%)</title><rect x="12.5808%" y="1253" width="0.0663%" height="15" fill="rgb(234,58,33)" fg:x="759" fg:w="4"/><text x="12.8308%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="12.5808%" y="1237" width="0.0663%" height="15" fill="rgb(220,115,36)" fg:x="759" fg:w="4"/><text x="12.8308%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="12.5808%" y="1221" width="0.0663%" height="15" fill="rgb(243,153,54)" fg:x="759" fg:w="4"/><text x="12.8308%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="12.5808%" y="1205" width="0.0663%" height="15" fill="rgb(251,47,18)" fg:x="759" fg:w="4"/><text x="12.8308%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="12.5808%" y="1189" width="0.0663%" height="15" fill="rgb(242,102,42)" fg:x="759" fg:w="4"/><text x="12.8308%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="12.5974%" y="1173" width="0.0497%" height="15" fill="rgb(234,31,38)" fg:x="760" fg:w="3"/><text x="12.8474%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="12.5974%" y="1157" width="0.0497%" height="15" fill="rgb(221,117,51)" fg:x="760" fg:w="3"/><text x="12.8474%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="12.5974%" y="1141" width="0.0497%" height="15" fill="rgb(212,20,18)" fg:x="760" fg:w="3"/><text x="12.8474%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="12.5974%" y="1125" width="0.0497%" height="15" fill="rgb(245,133,36)" fg:x="760" fg:w="3"/><text x="12.8474%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="12.5974%" y="1109" width="0.0497%" height="15" fill="rgb(212,6,19)" fg:x="760" fg:w="3"/><text x="12.8474%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="12.5974%" y="1093" width="0.0497%" height="15" fill="rgb(218,1,36)" fg:x="760" fg:w="3"/><text x="12.8474%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="12.5974%" y="1077" width="0.0497%" height="15" fill="rgb(246,84,54)" fg:x="760" fg:w="3"/><text x="12.8474%" y="1087.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.02%)</title><rect x="12.6471%" y="1269" width="0.0166%" height="15" fill="rgb(242,110,6)" fg:x="763" fg:w="1"/><text x="12.8971%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (1 samples, 0.02%)</title><rect x="12.6471%" y="1253" width="0.0166%" height="15" fill="rgb(214,47,5)" fg:x="763" fg:w="1"/><text x="12.8971%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (1 samples, 0.02%)</title><rect x="12.6471%" y="1237" width="0.0166%" height="15" fill="rgb(218,159,25)" fg:x="763" fg:w="1"/><text x="12.8971%" y="1247.50"></text></g><g><title>CalculateClaimedHeadersWork (6 samples, 0.10%)</title><rect x="12.5808%" y="1333" width="0.0995%" height="15" fill="rgb(215,211,28)" fg:x="759" fg:w="6"/><text x="12.8308%" y="1343.50"></text></g><g><title>GetBlockProof (6 samples, 0.10%)</title><rect x="12.5808%" y="1317" width="0.0995%" height="15" fill="rgb(238,59,32)" fg:x="759" fg:w="6"/><text x="12.8308%" y="1327.50"></text></g><g><title>operator/ (6 samples, 0.10%)</title><rect x="12.5808%" y="1301" width="0.0995%" height="15" fill="rgb(226,82,3)" fg:x="759" fg:w="6"/><text x="12.8308%" y="1311.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (6 samples, 0.10%)</title><rect x="12.5808%" y="1285" width="0.0995%" height="15" fill="rgb(240,164,32)" fg:x="759" fg:w="6"/><text x="12.8308%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="12.6637%" y="1269" width="0.0166%" height="15" fill="rgb(232,46,7)" fg:x="764" fg:w="1"/><text x="12.9137%" y="1279.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="12.6803%" y="1269" width="0.0166%" height="15" fill="rgb(229,129,53)" fg:x="765" fg:w="1"/><text x="12.9303%" y="1279.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="12.6968%" y="1269" width="0.0166%" height="15" fill="rgb(234,188,29)" fg:x="766" fg:w="1"/><text x="12.9468%" y="1279.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="12.6968%" y="1253" width="0.0166%" height="15" fill="rgb(246,141,4)" fg:x="766" fg:w="1"/><text x="12.9468%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="12.6968%" y="1237" width="0.0166%" height="15" fill="rgb(229,23,39)" fg:x="766" fg:w="1"/><text x="12.9468%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="12.6968%" y="1221" width="0.0166%" height="15" fill="rgb(206,12,3)" fg:x="766" fg:w="1"/><text x="12.9468%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="12.6968%" y="1205" width="0.0166%" height="15" fill="rgb(252,226,20)" fg:x="766" fg:w="1"/><text x="12.9468%" y="1215.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="12.6968%" y="1189" width="0.0166%" height="15" fill="rgb(216,123,35)" fg:x="766" fg:w="1"/><text x="12.9468%" y="1199.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (1 samples, 0.02%)</title><rect x="12.7134%" y="1237" width="0.0166%" height="15" fill="rgb(212,68,40)" fg:x="767" fg:w="1"/><text x="12.9634%" y="1247.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="12.7631%" y="1205" width="0.0497%" height="15" fill="rgb(254,125,32)" fg:x="770" fg:w="3"/><text x="13.0131%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="12.7797%" y="1189" width="0.0332%" height="15" fill="rgb(253,97,22)" fg:x="771" fg:w="2"/><text x="13.0297%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="12.7797%" y="1173" width="0.0332%" height="15" fill="rgb(241,101,14)" fg:x="771" fg:w="2"/><text x="13.0297%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="12.8129%" y="1205" width="0.0166%" height="15" fill="rgb(238,103,29)" fg:x="773" fg:w="1"/><text x="13.0629%" y="1215.50"></text></g><g><title>SipHashUint256Extra (31 samples, 0.51%)</title><rect x="12.8294%" y="1189" width="0.5138%" height="15" fill="rgb(233,195,47)" fg:x="774" fg:w="31"/><text x="13.0794%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (13 samples, 0.22%)</title><rect x="13.1278%" y="1173" width="0.2155%" height="15" fill="rgb(246,218,30)" fg:x="792" fg:w="13"/><text x="13.3778%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (13 samples, 0.22%)</title><rect x="13.1278%" y="1157" width="0.2155%" height="15" fill="rgb(219,145,47)" fg:x="792" fg:w="13"/><text x="13.3778%" y="1167.50"></text></g><g><title>SipHashUint256Extra (86 samples, 1.43%)</title><rect x="13.4262%" y="1109" width="1.4255%" height="15" fill="rgb(243,12,26)" fg:x="810" fg:w="86"/><text x="13.6762%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (33 samples, 0.55%)</title><rect x="14.3047%" y="1093" width="0.5470%" height="15" fill="rgb(214,87,16)" fg:x="863" fg:w="33"/><text x="14.5547%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (33 samples, 0.55%)</title><rect x="14.3047%" y="1077" width="0.5470%" height="15" fill="rgb(208,99,42)" fg:x="863" fg:w="33"/><text x="14.5547%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (131 samples, 2.17%)</title><rect x="12.8294%" y="1205" width="2.1714%" height="15" fill="rgb(253,99,2)" fg:x="774" fg:w="131"/><text x="13.0794%" y="1215.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (100 samples, 1.66%)</title><rect x="13.3433%" y="1189" width="1.6576%" height="15" fill="rgb(220,168,23)" fg:x="805" fg:w="100"/><text x="13.5933%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (97 samples, 1.61%)</title><rect x="13.3930%" y="1173" width="1.6078%" height="15" fill="rgb(242,38,24)" fg:x="808" fg:w="97"/><text x="13.6430%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (97 samples, 1.61%)</title><rect x="13.3930%" y="1157" width="1.6078%" height="15" fill="rgb(225,182,9)" fg:x="808" fg:w="97"/><text x="13.6430%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (97 samples, 1.61%)</title><rect x="13.3930%" y="1141" width="1.6078%" height="15" fill="rgb(243,178,37)" fg:x="808" fg:w="97"/><text x="13.6430%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (97 samples, 1.61%)</title><rect x="13.3930%" y="1125" width="1.6078%" height="15" fill="rgb(232,139,19)" fg:x="808" fg:w="97"/><text x="13.6430%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.15%)</title><rect x="14.8516%" y="1109" width="0.1492%" height="15" fill="rgb(225,201,24)" fg:x="896" fg:w="9"/><text x="15.1016%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="14.9511%" y="1093" width="0.0497%" height="15" fill="rgb(221,47,46)" fg:x="902" fg:w="3"/><text x="15.2011%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="14.9511%" y="1077" width="0.0497%" height="15" fill="rgb(249,23,13)" fg:x="902" fg:w="3"/><text x="15.2011%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="14.9511%" y="1061" width="0.0497%" height="15" fill="rgb(219,9,5)" fg:x="902" fg:w="3"/><text x="15.2011%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="14.9511%" y="1045" width="0.0497%" height="15" fill="rgb(254,171,16)" fg:x="902" fg:w="3"/><text x="15.2011%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (2 samples, 0.03%)</title><rect x="14.9677%" y="1029" width="0.0332%" height="15" fill="rgb(230,171,20)" fg:x="903" fg:w="2"/><text x="15.2177%" y="1039.50"></text></g><g><title>SipHashUint256Extra (73 samples, 1.21%)</title><rect x="15.0008%" y="1189" width="1.2100%" height="15" fill="rgb(210,71,41)" fg:x="905" fg:w="73"/><text x="15.2508%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (41 samples, 0.68%)</title><rect x="15.5312%" y="1173" width="0.6796%" height="15" fill="rgb(206,173,20)" fg:x="937" fg:w="41"/><text x="15.7812%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (41 samples, 0.68%)</title><rect x="15.5312%" y="1157" width="0.6796%" height="15" fill="rgb(233,88,34)" fg:x="937" fg:w="41"/><text x="15.7812%" y="1167.50"></text></g><g><title>SipHashUint256Extra (17 samples, 0.28%)</title><rect x="16.2108%" y="1109" width="0.2818%" height="15" fill="rgb(223,209,46)" fg:x="978" fg:w="17"/><text x="16.4608%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="16.3932%" y="1093" width="0.0995%" height="15" fill="rgb(250,43,18)" fg:x="989" fg:w="6"/><text x="16.6432%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="16.3932%" y="1077" width="0.0995%" height="15" fill="rgb(208,13,10)" fg:x="989" fg:w="6"/><text x="16.6432%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.30%)</title><rect x="16.4926%" y="1109" width="0.2984%" height="15" fill="rgb(212,200,36)" fg:x="995" fg:w="18"/><text x="16.7426%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (36 samples, 0.60%)</title><rect x="16.2108%" y="1189" width="0.5967%" height="15" fill="rgb(225,90,30)" fg:x="978" fg:w="36"/><text x="16.4608%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (36 samples, 0.60%)</title><rect x="16.2108%" y="1173" width="0.5967%" height="15" fill="rgb(236,182,39)" fg:x="978" fg:w="36"/><text x="16.4608%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (36 samples, 0.60%)</title><rect x="16.2108%" y="1157" width="0.5967%" height="15" fill="rgb(212,144,35)" fg:x="978" fg:w="36"/><text x="16.4608%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (36 samples, 0.60%)</title><rect x="16.2108%" y="1141" width="0.5967%" height="15" fill="rgb(228,63,44)" fg:x="978" fg:w="36"/><text x="16.4608%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (36 samples, 0.60%)</title><rect x="16.2108%" y="1125" width="0.5967%" height="15" fill="rgb(228,109,6)" fg:x="978" fg:w="36"/><text x="16.4608%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="16.7910%" y="1109" width="0.0166%" height="15" fill="rgb(238,117,24)" fg:x="1013" fg:w="1"/><text x="17.0410%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1157" width="0.0166%" height="15" fill="rgb(242,26,26)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1141" width="0.0166%" height="15" fill="rgb(221,92,48)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1125" width="0.0166%" height="15" fill="rgb(209,209,32)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1109" width="0.0166%" height="15" fill="rgb(221,70,22)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1093" width="0.0166%" height="15" fill="rgb(248,145,5)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1077" width="0.0166%" height="15" fill="rgb(226,116,26)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1061" width="0.0166%" height="15" fill="rgb(244,5,17)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1045" width="0.0166%" height="15" fill="rgb(252,159,33)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1029" width="0.0166%" height="15" fill="rgb(206,71,0)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="1013" width="0.0166%" height="15" fill="rgb(233,118,54)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="997" width="0.0166%" height="15" fill="rgb(234,83,48)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8407%" y="981" width="0.0166%" height="15" fill="rgb(228,3,54)" fg:x="1016" fg:w="1"/><text x="17.0907%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (2 samples, 0.03%)</title><rect x="16.8573%" y="1157" width="0.0332%" height="15" fill="rgb(226,155,13)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (2 samples, 0.03%)</title><rect x="16.8573%" y="1141" width="0.0332%" height="15" fill="rgb(241,28,37)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1151.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="16.8573%" y="1125" width="0.0332%" height="15" fill="rgb(233,93,10)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="1109" width="0.0332%" height="15" fill="rgb(225,113,19)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="1093" width="0.0332%" height="15" fill="rgb(241,2,18)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="1077" width="0.0332%" height="15" fill="rgb(228,207,21)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="1061" width="0.0332%" height="15" fill="rgb(213,211,35)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="1045" width="0.0332%" height="15" fill="rgb(209,83,10)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="1029" width="0.0332%" height="15" fill="rgb(209,164,1)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="1013" width="0.0332%" height="15" fill="rgb(213,184,43)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="16.8573%" y="997" width="0.0332%" height="15" fill="rgb(231,61,34)" fg:x="1017" fg:w="2"/><text x="17.1073%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="16.8739%" y="981" width="0.0166%" height="15" fill="rgb(235,75,3)" fg:x="1018" fg:w="1"/><text x="17.1239%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (116 samples, 1.92%)</title><rect x="15.0008%" y="1205" width="1.9228%" height="15" fill="rgb(220,106,47)" fg:x="905" fg:w="116"/><text x="15.2508%" y="1215.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (7 samples, 0.12%)</title><rect x="16.8076%" y="1189" width="0.1160%" height="15" fill="rgb(210,196,33)" fg:x="1014" fg:w="7"/><text x="17.0576%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (7 samples, 0.12%)</title><rect x="16.8076%" y="1173" width="0.1160%" height="15" fill="rgb(229,154,42)" fg:x="1014" fg:w="7"/><text x="17.0576%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="16.8904%" y="1157" width="0.0332%" height="15" fill="rgb(228,114,26)" fg:x="1019" fg:w="2"/><text x="17.1404%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="16.8904%" y="1141" width="0.0332%" height="15" fill="rgb(208,144,1)" fg:x="1019" fg:w="2"/><text x="17.1404%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="16.8904%" y="1125" width="0.0332%" height="15" fill="rgb(239,112,37)" fg:x="1019" fg:w="2"/><text x="17.1404%" y="1135.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="16.9070%" y="1109" width="0.0166%" height="15" fill="rgb(210,96,50)" fg:x="1020" fg:w="1"/><text x="17.1570%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="16.9236%" y="1189" width="0.0166%" height="15" fill="rgb(222,178,2)" fg:x="1021" fg:w="1"/><text x="17.1736%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="1029" width="0.0166%" height="15" fill="rgb(226,74,18)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="1013" width="0.0166%" height="15" fill="rgb(225,67,54)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="997" width="0.0166%" height="15" fill="rgb(251,92,32)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="981" width="0.0166%" height="15" fill="rgb(228,149,22)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="965" width="0.0166%" height="15" fill="rgb(243,54,13)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="949" width="0.0166%" height="15" fill="rgb(243,180,28)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="933" width="0.0166%" height="15" fill="rgb(208,167,24)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="917" width="0.0166%" height="15" fill="rgb(245,73,45)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="901" width="0.0166%" height="15" fill="rgb(237,203,48)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.0396%" y="885" width="0.0166%" height="15" fill="rgb(211,197,16)" fg:x="1028" fg:w="1"/><text x="17.2896%" y="895.50"></text></g><g><title>malloc_consolidate (3 samples, 0.05%)</title><rect x="17.0562%" y="1029" width="0.0497%" height="15" fill="rgb(243,99,51)" fg:x="1029" fg:w="3"/><text x="17.3062%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (12 samples, 0.20%)</title><rect x="16.9236%" y="1205" width="0.1989%" height="15" fill="rgb(215,123,29)" fg:x="1021" fg:w="12"/><text x="17.1736%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.18%)</title><rect x="16.9402%" y="1189" width="0.1823%" height="15" fill="rgb(239,186,37)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (11 samples, 0.18%)</title><rect x="16.9402%" y="1173" width="0.1823%" height="15" fill="rgb(252,136,39)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (11 samples, 0.18%)</title><rect x="16.9402%" y="1157" width="0.1823%" height="15" fill="rgb(223,213,32)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (11 samples, 0.18%)</title><rect x="16.9402%" y="1141" width="0.1823%" height="15" fill="rgb(233,115,5)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (11 samples, 0.18%)</title><rect x="16.9402%" y="1125" width="0.1823%" height="15" fill="rgb(207,226,44)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (11 samples, 0.18%)</title><rect x="16.9402%" y="1109" width="0.1823%" height="15" fill="rgb(208,126,0)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1119.50"></text></g><g><title>operator new (11 samples, 0.18%)</title><rect x="16.9402%" y="1093" width="0.1823%" height="15" fill="rgb(244,66,21)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1103.50"></text></g><g><title>__posix_memalign (11 samples, 0.18%)</title><rect x="16.9402%" y="1077" width="0.1823%" height="15" fill="rgb(222,97,12)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1087.50"></text></g><g><title>malloc (11 samples, 0.18%)</title><rect x="16.9402%" y="1061" width="0.1823%" height="15" fill="rgb(219,213,19)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1071.50"></text></g><g><title>_int_malloc (11 samples, 0.18%)</title><rect x="16.9402%" y="1045" width="0.1823%" height="15" fill="rgb(252,169,30)" fg:x="1022" fg:w="11"/><text x="17.1902%" y="1055.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="17.1059%" y="1029" width="0.0166%" height="15" fill="rgb(206,32,51)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="1013" width="0.0166%" height="15" fill="rgb(250,172,42)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="997" width="0.0166%" height="15" fill="rgb(209,34,43)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="981" width="0.0166%" height="15" fill="rgb(223,11,35)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="965" width="0.0166%" height="15" fill="rgb(251,219,26)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="949" width="0.0166%" height="15" fill="rgb(231,119,3)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="933" width="0.0166%" height="15" fill="rgb(216,97,11)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="917" width="0.0166%" height="15" fill="rgb(223,59,9)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.1059%" y="901" width="0.0166%" height="15" fill="rgb(233,93,31)" fg:x="1032" fg:w="1"/><text x="17.3559%" y="911.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (268 samples, 4.44%)</title><rect x="12.7300%" y="1237" width="4.4422%" height="15" fill="rgb(239,81,33)" fg:x="768" fg:w="268"/><text x="12.9800%" y="1247.50">std::..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (268 samples, 4.44%)</title><rect x="12.7300%" y="1221" width="4.4422%" height="15" fill="rgb(213,120,34)" fg:x="768" fg:w="268"/><text x="12.9800%" y="1231.50">std::..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="17.1225%" y="1205" width="0.0497%" height="15" fill="rgb(243,49,53)" fg:x="1033" fg:w="3"/><text x="17.3725%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="17.1225%" y="1189" width="0.0497%" height="15" fill="rgb(247,216,33)" fg:x="1033" fg:w="3"/><text x="17.3725%" y="1199.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="17.1225%" y="1173" width="0.0497%" height="15" fill="rgb(226,26,14)" fg:x="1033" fg:w="3"/><text x="17.3725%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="17.1556%" y="1157" width="0.0166%" height="15" fill="rgb(215,49,53)" fg:x="1035" fg:w="1"/><text x="17.4056%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="17.1556%" y="1141" width="0.0166%" height="15" fill="rgb(245,162,40)" fg:x="1035" fg:w="1"/><text x="17.4056%" y="1151.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="17.1888%" y="1189" width="0.0166%" height="15" fill="rgb(229,68,17)" fg:x="1037" fg:w="1"/><text x="17.4388%" y="1199.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="17.1888%" y="1173" width="0.0166%" height="15" fill="rgb(213,182,10)" fg:x="1037" fg:w="1"/><text x="17.4388%" y="1183.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="17.1888%" y="1157" width="0.0166%" height="15" fill="rgb(245,125,30)" fg:x="1037" fg:w="1"/><text x="17.4388%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="17.1888%" y="1141" width="0.0166%" height="15" fill="rgb(232,202,2)" fg:x="1037" fg:w="1"/><text x="17.4388%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (3 samples, 0.05%)</title><rect x="17.1722%" y="1205" width="0.0497%" height="15" fill="rgb(237,140,51)" fg:x="1036" fg:w="3"/><text x="17.4222%" y="1215.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="17.2054%" y="1189" width="0.0166%" height="15" fill="rgb(236,157,25)" fg:x="1038" fg:w="1"/><text x="17.4554%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="17.2054%" y="1173" width="0.0166%" height="15" fill="rgb(219,209,0)" fg:x="1038" fg:w="1"/><text x="17.4554%" y="1183.50"></text></g><g><title>SipHashUint256Extra (47 samples, 0.78%)</title><rect x="17.2219%" y="1205" width="0.7790%" height="15" fill="rgb(240,116,54)" fg:x="1039" fg:w="47"/><text x="17.4719%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (21 samples, 0.35%)</title><rect x="17.6529%" y="1189" width="0.3481%" height="15" fill="rgb(216,10,36)" fg:x="1065" fg:w="21"/><text x="17.9029%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (21 samples, 0.35%)</title><rect x="17.6529%" y="1173" width="0.3481%" height="15" fill="rgb(222,72,44)" fg:x="1065" fg:w="21"/><text x="17.9029%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="18.0176%" y="1125" width="0.0166%" height="15" fill="rgb(232,159,9)" fg:x="1087" fg:w="1"/><text x="18.2676%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (3 samples, 0.05%)</title><rect x="18.0010%" y="1205" width="0.0497%" height="15" fill="rgb(210,39,32)" fg:x="1086" fg:w="3"/><text x="18.2510%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="18.0176%" y="1189" width="0.0332%" height="15" fill="rgb(216,194,45)" fg:x="1087" fg:w="2"/><text x="18.2676%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="18.0176%" y="1173" width="0.0332%" height="15" fill="rgb(218,18,35)" fg:x="1087" fg:w="2"/><text x="18.2676%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="18.0176%" y="1157" width="0.0332%" height="15" fill="rgb(207,83,51)" fg:x="1087" fg:w="2"/><text x="18.2676%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="18.0176%" y="1141" width="0.0332%" height="15" fill="rgb(225,63,43)" fg:x="1087" fg:w="2"/><text x="18.2676%" y="1151.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="18.0341%" y="1125" width="0.0166%" height="15" fill="rgb(207,57,36)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="1109" width="0.0166%" height="15" fill="rgb(216,99,33)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="1093" width="0.0166%" height="15" fill="rgb(225,42,16)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="1077" width="0.0166%" height="15" fill="rgb(220,201,45)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="1061" width="0.0166%" height="15" fill="rgb(225,33,4)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="1045" width="0.0166%" height="15" fill="rgb(224,33,50)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="1029" width="0.0166%" height="15" fill="rgb(246,198,51)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1039.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="18.0341%" y="1013" width="0.0166%" height="15" fill="rgb(205,22,4)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="997" width="0.0166%" height="15" fill="rgb(206,3,8)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="981" width="0.0166%" height="15" fill="rgb(251,23,15)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="965" width="0.0166%" height="15" fill="rgb(252,88,28)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="949" width="0.0166%" height="15" fill="rgb(212,127,14)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="933" width="0.0166%" height="15" fill="rgb(247,145,37)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="917" width="0.0166%" height="15" fill="rgb(209,117,53)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="901" width="0.0166%" height="15" fill="rgb(212,90,42)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="885" width="0.0166%" height="15" fill="rgb(218,164,37)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="869" width="0.0166%" height="15" fill="rgb(246,65,34)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="853" width="0.0166%" height="15" fill="rgb(231,100,33)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="837" width="0.0166%" height="15" fill="rgb(228,126,14)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="821" width="0.0166%" height="15" fill="rgb(215,173,21)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="805" width="0.0166%" height="15" fill="rgb(210,6,40)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0341%" y="789" width="0.0166%" height="15" fill="rgb(212,48,18)" fg:x="1088" fg:w="1"/><text x="18.2841%" y="799.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.0839%" y="1189" width="0.0166%" height="15" fill="rgb(230,214,11)" fg:x="1091" fg:w="1"/><text x="18.3339%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.0839%" y="1173" width="0.0166%" height="15" fill="rgb(254,105,39)" fg:x="1091" fg:w="1"/><text x="18.3339%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="18.0839%" y="1157" width="0.0166%" height="15" fill="rgb(245,158,5)" fg:x="1091" fg:w="1"/><text x="18.3339%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="18.0839%" y="1141" width="0.0166%" height="15" fill="rgb(249,208,11)" fg:x="1091" fg:w="1"/><text x="18.3339%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.07%)</title><rect x="18.0507%" y="1205" width="0.0663%" height="15" fill="rgb(210,39,28)" fg:x="1089" fg:w="4"/><text x="18.3007%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="18.1004%" y="1189" width="0.0166%" height="15" fill="rgb(211,56,53)" fg:x="1092" fg:w="1"/><text x="18.3504%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="18.1004%" y="1173" width="0.0166%" height="15" fill="rgb(226,201,30)" fg:x="1092" fg:w="1"/><text x="18.3504%" y="1183.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="18.1004%" y="1157" width="0.0166%" height="15" fill="rgb(239,101,34)" fg:x="1092" fg:w="1"/><text x="18.3504%" y="1167.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="18.1004%" y="1141" width="0.0166%" height="15" fill="rgb(226,209,5)" fg:x="1092" fg:w="1"/><text x="18.3504%" y="1151.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="18.1004%" y="1125" width="0.0166%" height="15" fill="rgb(250,105,47)" fg:x="1092" fg:w="1"/><text x="18.3504%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="18.1004%" y="1109" width="0.0166%" height="15" fill="rgb(230,72,3)" fg:x="1092" fg:w="1"/><text x="18.3504%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="18.1004%" y="1093" width="0.0166%" height="15" fill="rgb(232,218,39)" fg:x="1092" fg:w="1"/><text x="18.3504%" y="1103.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="18.1336%" y="1125" width="0.0166%" height="15" fill="rgb(248,166,6)" fg:x="1094" fg:w="1"/><text x="18.3836%" y="1135.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (60 samples, 0.99%)</title><rect x="17.1722%" y="1237" width="0.9945%" height="15" fill="rgb(247,89,20)" fg:x="1036" fg:w="60"/><text x="17.4222%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (60 samples, 0.99%)</title><rect x="17.1722%" y="1221" width="0.9945%" height="15" fill="rgb(248,130,54)" fg:x="1036" fg:w="60"/><text x="17.4222%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (3 samples, 0.05%)</title><rect x="18.1170%" y="1205" width="0.0497%" height="15" fill="rgb(234,196,4)" fg:x="1093" fg:w="3"/><text x="18.3670%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="18.1336%" y="1189" width="0.0332%" height="15" fill="rgb(250,143,31)" fg:x="1094" fg:w="2"/><text x="18.3836%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="18.1336%" y="1173" width="0.0332%" height="15" fill="rgb(211,110,34)" fg:x="1094" fg:w="2"/><text x="18.3836%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="18.1336%" y="1157" width="0.0332%" height="15" fill="rgb(215,124,48)" fg:x="1094" fg:w="2"/><text x="18.3836%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="18.1336%" y="1141" width="0.0332%" height="15" fill="rgb(216,46,13)" fg:x="1094" fg:w="2"/><text x="18.3836%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="18.1502%" y="1125" width="0.0166%" height="15" fill="rgb(205,184,25)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="18.1502%" y="1109" width="0.0166%" height="15" fill="rgb(228,1,10)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="18.1502%" y="1093" width="0.0166%" height="15" fill="rgb(213,116,27)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1103.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="18.1502%" y="1077" width="0.0166%" height="15" fill="rgb(241,95,50)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1087.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="18.1502%" y="1061" width="0.0166%" height="15" fill="rgb(238,48,32)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1071.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="18.1502%" y="1045" width="0.0166%" height="15" fill="rgb(235,113,49)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="18.1502%" y="1029" width="0.0166%" height="15" fill="rgb(205,127,43)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1039.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="18.1502%" y="1013" width="0.0166%" height="15" fill="rgb(250,162,2)" fg:x="1095" fg:w="1"/><text x="18.4002%" y="1023.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="18.1667%" y="1221" width="0.0829%" height="15" fill="rgb(220,13,41)" fg:x="1096" fg:w="5"/><text x="18.4167%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.2331%" y="1205" width="0.0166%" height="15" fill="rgb(249,221,25)" fg:x="1100" fg:w="1"/><text x="18.4831%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.2331%" y="1189" width="0.0166%" height="15" fill="rgb(215,208,19)" fg:x="1100" fg:w="1"/><text x="18.4831%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="18.2496%" y="1221" width="0.0166%" height="15" fill="rgb(236,175,2)" fg:x="1101" fg:w="1"/><text x="18.4996%" y="1231.50"></text></g><g><title>Coin::operator= (3 samples, 0.05%)</title><rect x="18.2828%" y="1157" width="0.0497%" height="15" fill="rgb(241,52,2)" fg:x="1103" fg:w="3"/><text x="18.5328%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (5 samples, 0.08%)</title><rect x="18.2662%" y="1173" width="0.0829%" height="15" fill="rgb(248,140,14)" fg:x="1102" fg:w="5"/><text x="18.5162%" y="1183.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (1 samples, 0.02%)</title><rect x="18.3325%" y="1157" width="0.0166%" height="15" fill="rgb(253,22,42)" fg:x="1106" fg:w="1"/><text x="18.5825%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (2 samples, 0.03%)</title><rect x="19.1779%" y="1157" width="0.0332%" height="15" fill="rgb(234,61,47)" fg:x="1157" fg:w="2"/><text x="19.4279%" y="1167.50"></text></g><g><title>ReadLE64 (2 samples, 0.03%)</title><rect x="19.1779%" y="1141" width="0.0332%" height="15" fill="rgb(208,226,15)" fg:x="1157" fg:w="2"/><text x="19.4279%" y="1151.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="19.1779%" y="1125" width="0.0332%" height="15" fill="rgb(217,221,4)" fg:x="1157" fg:w="2"/><text x="19.4279%" y="1135.50"></text></g><g><title>SipHashUint256Extra (93 samples, 1.54%)</title><rect x="18.3491%" y="1173" width="1.5415%" height="15" fill="rgb(212,174,34)" fg:x="1107" fg:w="93"/><text x="18.5991%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (41 samples, 0.68%)</title><rect x="19.2110%" y="1157" width="0.6796%" height="15" fill="rgb(253,83,4)" fg:x="1159" fg:w="41"/><text x="19.4610%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (41 samples, 0.68%)</title><rect x="19.2110%" y="1141" width="0.6796%" height="15" fill="rgb(250,195,49)" fg:x="1159" fg:w="41"/><text x="19.4610%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="20.1061%" y="1093" width="0.0166%" height="15" fill="rgb(241,192,25)" fg:x="1213" fg:w="1"/><text x="20.3561%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="20.1061%" y="1077" width="0.0166%" height="15" fill="rgb(208,124,10)" fg:x="1213" fg:w="1"/><text x="20.3561%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="20.1061%" y="1061" width="0.0166%" height="15" fill="rgb(222,33,0)" fg:x="1213" fg:w="1"/><text x="20.3561%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.07%)</title><rect x="20.1227%" y="1093" width="0.0663%" height="15" fill="rgb(234,209,28)" fg:x="1214" fg:w="4"/><text x="20.3727%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.10%)</title><rect x="20.1061%" y="1157" width="0.0995%" height="15" fill="rgb(224,11,23)" fg:x="1213" fg:w="6"/><text x="20.3561%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.10%)</title><rect x="20.1061%" y="1141" width="0.0995%" height="15" fill="rgb(232,99,1)" fg:x="1213" fg:w="6"/><text x="20.3561%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.10%)</title><rect x="20.1061%" y="1125" width="0.0995%" height="15" fill="rgb(237,95,45)" fg:x="1213" fg:w="6"/><text x="20.3561%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.10%)</title><rect x="20.1061%" y="1109" width="0.0995%" height="15" fill="rgb(208,109,11)" fg:x="1213" fg:w="6"/><text x="20.3561%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="20.1890%" y="1093" width="0.0166%" height="15" fill="rgb(216,190,48)" fg:x="1218" fg:w="1"/><text x="20.4390%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20 samples, 0.33%)</title><rect x="19.8906%" y="1173" width="0.3315%" height="15" fill="rgb(251,171,36)" fg:x="1200" fg:w="20"/><text x="20.1406%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="20.2055%" y="1157" width="0.0166%" height="15" fill="rgb(230,62,22)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="20.2055%" y="1141" width="0.0166%" height="15" fill="rgb(225,114,35)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1151.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="20.2055%" y="1125" width="0.0166%" height="15" fill="rgb(215,118,42)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1135.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="20.2055%" y="1109" width="0.0166%" height="15" fill="rgb(243,119,21)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="20.2055%" y="1093" width="0.0166%" height="15" fill="rgb(252,177,53)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="20.2055%" y="1077" width="0.0166%" height="15" fill="rgb(237,209,29)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="20.2055%" y="1061" width="0.0166%" height="15" fill="rgb(212,65,23)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.2055%" y="1045" width="0.0166%" height="15" fill="rgb(230,222,46)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.2055%" y="1029" width="0.0166%" height="15" fill="rgb(215,135,32)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.2055%" y="1013" width="0.0166%" height="15" fill="rgb(246,101,22)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.2055%" y="997" width="0.0166%" height="15" fill="rgb(206,107,13)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.2055%" y="981" width="0.0166%" height="15" fill="rgb(250,100,44)" fg:x="1219" fg:w="1"/><text x="20.4555%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (123 samples, 2.04%)</title><rect x="18.2662%" y="1189" width="2.0388%" height="15" fill="rgb(231,147,38)" fg:x="1102" fg:w="123"/><text x="18.5162%" y="1199.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.08%)</title><rect x="20.2221%" y="1173" width="0.0829%" height="15" fill="rgb(229,8,40)" fg:x="1220" fg:w="5"/><text x="20.4721%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.08%)</title><rect x="20.2221%" y="1157" width="0.0829%" height="15" fill="rgb(221,135,30)" fg:x="1220" fg:w="5"/><text x="20.4721%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.08%)</title><rect x="20.2221%" y="1141" width="0.0829%" height="15" fill="rgb(249,193,18)" fg:x="1220" fg:w="5"/><text x="20.4721%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.08%)</title><rect x="20.2221%" y="1125" width="0.0829%" height="15" fill="rgb(209,133,39)" fg:x="1220" fg:w="5"/><text x="20.4721%" y="1135.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="20.3050%" y="1157" width="0.0166%" height="15" fill="rgb(232,100,14)" fg:x="1225" fg:w="1"/><text x="20.5550%" y="1167.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="20.3050%" y="1141" width="0.0166%" height="15" fill="rgb(224,185,1)" fg:x="1225" fg:w="1"/><text x="20.5550%" y="1151.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="20.3050%" y="1125" width="0.0166%" height="15" fill="rgb(223,139,8)" fg:x="1225" fg:w="1"/><text x="20.5550%" y="1135.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="20.3050%" y="1109" width="0.0166%" height="15" fill="rgb(232,213,38)" fg:x="1225" fg:w="1"/><text x="20.5550%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="20.3050%" y="1093" width="0.0166%" height="15" fill="rgb(207,94,22)" fg:x="1225" fg:w="1"/><text x="20.5550%" y="1103.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="20.3216%" y="1157" width="0.0829%" height="15" fill="rgb(219,183,54)" fg:x="1226" fg:w="5"/><text x="20.5716%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="20.3381%" y="1141" width="0.0663%" height="15" fill="rgb(216,185,54)" fg:x="1227" fg:w="4"/><text x="20.5881%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="20.3381%" y="1125" width="0.0663%" height="15" fill="rgb(254,217,39)" fg:x="1227" fg:w="4"/><text x="20.5881%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="1109" width="0.0166%" height="15" fill="rgb(240,178,23)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="1093" width="0.0166%" height="15" fill="rgb(218,11,47)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="1077" width="0.0166%" height="15" fill="rgb(218,51,51)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="1061" width="0.0166%" height="15" fill="rgb(238,126,27)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="1045" width="0.0166%" height="15" fill="rgb(249,202,22)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="1029" width="0.0166%" height="15" fill="rgb(254,195,49)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1039.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="20.3879%" y="1013" width="0.0166%" height="15" fill="rgb(208,123,14)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="997" width="0.0166%" height="15" fill="rgb(224,200,8)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="981" width="0.0166%" height="15" fill="rgb(217,61,36)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="965" width="0.0166%" height="15" fill="rgb(206,35,45)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="949" width="0.0166%" height="15" fill="rgb(217,65,33)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="933" width="0.0166%" height="15" fill="rgb(222,158,48)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.3879%" y="917" width="0.0166%" height="15" fill="rgb(254,2,54)" fg:x="1230" fg:w="1"/><text x="20.6379%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="20.4044%" y="1157" width="0.0166%" height="15" fill="rgb(250,143,38)" fg:x="1231" fg:w="1"/><text x="20.6544%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="20.4044%" y="1141" width="0.0166%" height="15" fill="rgb(248,25,0)" fg:x="1231" fg:w="1"/><text x="20.6544%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="20.4044%" y="1125" width="0.0166%" height="15" fill="rgb(206,152,27)" fg:x="1231" fg:w="1"/><text x="20.6544%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="20.4044%" y="1109" width="0.0166%" height="15" fill="rgb(240,77,30)" fg:x="1231" fg:w="1"/><text x="20.6544%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="20.4044%" y="1093" width="0.0166%" height="15" fill="rgb(231,5,3)" fg:x="1231" fg:w="1"/><text x="20.6544%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="20.4044%" y="1077" width="0.0166%" height="15" fill="rgb(207,226,32)" fg:x="1231" fg:w="1"/><text x="20.6544%" y="1087.50"></text></g><g><title>CCoinsViewCache::BatchWrite (466 samples, 7.72%)</title><rect x="12.7134%" y="1253" width="7.7242%" height="15" fill="rgb(222,207,47)" fg:x="767" fg:w="466"/><text x="12.9634%" y="1263.50">CCoinsViewC..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (137 samples, 2.27%)</title><rect x="18.1667%" y="1237" width="2.2708%" height="15" fill="rgb(229,115,45)" fg:x="1096" fg:w="137"/><text x="18.4167%" y="1247.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (131 samples, 2.17%)</title><rect x="18.2662%" y="1221" width="2.1714%" height="15" fill="rgb(224,191,6)" fg:x="1102" fg:w="131"/><text x="18.5162%" y="1231.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (131 samples, 2.17%)</title><rect x="18.2662%" y="1205" width="2.1714%" height="15" fill="rgb(230,227,24)" fg:x="1102" fg:w="131"/><text x="18.5162%" y="1215.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.13%)</title><rect x="20.3050%" y="1189" width="0.1326%" height="15" fill="rgb(228,80,19)" fg:x="1225" fg:w="8"/><text x="20.5550%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.13%)</title><rect x="20.3050%" y="1173" width="0.1326%" height="15" fill="rgb(247,229,0)" fg:x="1225" fg:w="8"/><text x="20.5550%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="20.4210%" y="1157" width="0.0166%" height="15" fill="rgb(237,194,15)" fg:x="1232" fg:w="1"/><text x="20.6710%" y="1167.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (1 samples, 0.02%)</title><rect x="20.4376%" y="1253" width="0.0166%" height="15" fill="rgb(219,203,20)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1263.50"></text></g><g><title>SaltedOutpointHasher::SaltedOutpointHasher (1 samples, 0.02%)</title><rect x="20.4376%" y="1237" width="0.0166%" height="15" fill="rgb(234,128,8)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1247.50"></text></g><g><title>FastRandomContext::rand64 (1 samples, 0.02%)</title><rect x="20.4376%" y="1221" width="0.0166%" height="15" fill="rgb(248,202,8)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1231.50"></text></g><g><title>FastRandomContext::RandomSeed (1 samples, 0.02%)</title><rect x="20.4376%" y="1205" width="0.0166%" height="15" fill="rgb(206,104,37)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1215.50"></text></g><g><title>GetRandHash (1 samples, 0.02%)</title><rect x="20.4376%" y="1189" width="0.0166%" height="15" fill="rgb(223,8,27)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1199.50"></text></g><g><title>CSHA512::Finalize (1 samples, 0.02%)</title><rect x="20.4376%" y="1173" width="0.0166%" height="15" fill="rgb(216,217,28)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1183.50"></text></g><g><title>CSHA512::Write (1 samples, 0.02%)</title><rect x="20.4376%" y="1157" width="0.0166%" height="15" fill="rgb(249,199,1)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1167.50"></text></g><g><title>Transform (1 samples, 0.02%)</title><rect x="20.4376%" y="1141" width="0.0166%" height="15" fill="rgb(240,85,17)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1151.50"></text></g><g><title>Round (1 samples, 0.02%)</title><rect x="20.4376%" y="1125" width="0.0166%" height="15" fill="rgb(206,108,45)" fg:x="1233" fg:w="1"/><text x="20.6876%" y="1135.50"></text></g><g><title>SipHashUint256Extra (36 samples, 0.60%)</title><rect x="20.4542%" y="1253" width="0.5967%" height="15" fill="rgb(245,210,41)" fg:x="1234" fg:w="36"/><text x="20.7042%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.20%)</title><rect x="20.8520%" y="1237" width="0.1989%" height="15" fill="rgb(206,13,37)" fg:x="1258" fg:w="12"/><text x="21.1020%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.20%)</title><rect x="20.8520%" y="1221" width="0.1989%" height="15" fill="rgb(250,61,18)" fg:x="1258" fg:w="12"/><text x="21.1020%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="21.0509%" y="1253" width="0.0166%" height="15" fill="rgb(235,172,48)" fg:x="1270" fg:w="1"/><text x="21.3009%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="21.0509%" y="1237" width="0.0166%" height="15" fill="rgb(249,201,17)" fg:x="1270" fg:w="1"/><text x="21.3009%" y="1247.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="21.0509%" y="1221" width="0.0166%" height="15" fill="rgb(219,208,6)" fg:x="1270" fg:w="1"/><text x="21.3009%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="21.0509%" y="1205" width="0.0166%" height="15" fill="rgb(248,31,23)" fg:x="1270" fg:w="1"/><text x="21.3009%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="21.0509%" y="1189" width="0.0166%" height="15" fill="rgb(245,15,42)" fg:x="1270" fg:w="1"/><text x="21.3009%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="21.0675%" y="1253" width="0.0332%" height="15" fill="rgb(222,217,39)" fg:x="1271" fg:w="2"/><text x="21.3175%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.03%)</title><rect x="21.1006%" y="1253" width="0.0332%" height="15" fill="rgb(210,219,27)" fg:x="1273" fg:w="2"/><text x="21.3506%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="21.1172%" y="1237" width="0.0166%" height="15" fill="rgb(252,166,36)" fg:x="1274" fg:w="1"/><text x="21.3672%" y="1247.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.1338%" y="1253" width="0.0166%" height="15" fill="rgb(245,132,34)" fg:x="1275" fg:w="1"/><text x="21.3838%" y="1263.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="21.1338%" y="1237" width="0.0166%" height="15" fill="rgb(236,54,3)" fg:x="1275" fg:w="1"/><text x="21.3838%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.1338%" y="1221" width="0.0166%" height="15" fill="rgb(241,173,43)" fg:x="1275" fg:w="1"/><text x="21.3838%" y="1231.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="21.1338%" y="1205" width="0.0166%" height="15" fill="rgb(215,190,9)" fg:x="1275" fg:w="1"/><text x="21.3838%" y="1215.50"></text></g><g><title>std::tuple&lt;COutPoint const&amp;&gt;::tuple (1 samples, 0.02%)</title><rect x="21.1338%" y="1189" width="0.0166%" height="15" fill="rgb(242,101,16)" fg:x="1275" fg:w="1"/><text x="21.3838%" y="1199.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, COutPoint const&amp;&gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="21.1338%" y="1173" width="0.0166%" height="15" fill="rgb(223,190,21)" fg:x="1275" fg:w="1"/><text x="21.3838%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (2 samples, 0.03%)</title><rect x="21.1503%" y="1205" width="0.0332%" height="15" fill="rgb(215,228,25)" fg:x="1276" fg:w="2"/><text x="21.4003%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.02%)</title><rect x="21.1835%" y="1189" width="0.0166%" height="15" fill="rgb(225,36,22)" fg:x="1278" fg:w="1"/><text x="21.4335%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="21.1835%" y="1173" width="0.0166%" height="15" fill="rgb(251,106,46)" fg:x="1278" fg:w="1"/><text x="21.4335%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (1 samples, 0.02%)</title><rect x="21.1835%" y="1157" width="0.0166%" height="15" fill="rgb(208,90,1)" fg:x="1278" fg:w="1"/><text x="21.4335%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="21.1835%" y="1141" width="0.0166%" height="15" fill="rgb(243,10,4)" fg:x="1278" fg:w="1"/><text x="21.4335%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="21.1835%" y="1125" width="0.0166%" height="15" fill="rgb(212,137,27)" fg:x="1278" fg:w="1"/><text x="21.4335%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (1 samples, 0.02%)</title><rect x="21.1835%" y="1109" width="0.0166%" height="15" fill="rgb(231,220,49)" fg:x="1278" fg:w="1"/><text x="21.4335%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (1 samples, 0.02%)</title><rect x="21.1835%" y="1093" width="0.0166%" height="15" fill="rgb(237,96,20)" fg:x="1278" fg:w="1"/><text x="21.4335%" y="1103.50"></text></g><g><title>CCoinsViewCache::Flush (516 samples, 8.55%)</title><rect x="12.7134%" y="1269" width="8.5530%" height="15" fill="rgb(239,229,30)" fg:x="767" fg:w="516"/><text x="12.9634%" y="1279.50">CCoinsViewCa..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (7 samples, 0.12%)</title><rect x="21.1503%" y="1253" width="0.1160%" height="15" fill="rgb(219,65,33)" fg:x="1276" fg:w="7"/><text x="21.4003%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (7 samples, 0.12%)</title><rect x="21.1503%" y="1237" width="0.1160%" height="15" fill="rgb(243,134,7)" fg:x="1276" fg:w="7"/><text x="21.4003%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (7 samples, 0.12%)</title><rect x="21.1503%" y="1221" width="0.1160%" height="15" fill="rgb(216,177,54)" fg:x="1276" fg:w="7"/><text x="21.4003%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (5 samples, 0.08%)</title><rect x="21.1835%" y="1205" width="0.0829%" height="15" fill="rgb(211,160,20)" fg:x="1278" fg:w="5"/><text x="21.4335%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="21.2001%" y="1189" width="0.0663%" height="15" fill="rgb(239,85,39)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="21.2001%" y="1173" width="0.0663%" height="15" fill="rgb(232,125,22)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="21.2001%" y="1157" width="0.0663%" height="15" fill="rgb(244,57,34)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1167.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="21.2001%" y="1141" width="0.0663%" height="15" fill="rgb(214,203,32)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (4 samples, 0.07%)</title><rect x="21.2001%" y="1125" width="0.0663%" height="15" fill="rgb(207,58,43)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1135.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (4 samples, 0.07%)</title><rect x="21.2001%" y="1109" width="0.0663%" height="15" fill="rgb(215,193,15)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (4 samples, 0.07%)</title><rect x="21.2001%" y="1093" width="0.0663%" height="15" fill="rgb(232,15,44)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1103.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (4 samples, 0.07%)</title><rect x="21.2001%" y="1077" width="0.0663%" height="15" fill="rgb(212,3,48)" fg:x="1279" fg:w="4"/><text x="21.4501%" y="1087.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="21.2664%" y="1269" width="0.0166%" height="15" fill="rgb(218,128,7)" fg:x="1283" fg:w="1"/><text x="21.5164%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="21.2664%" y="1253" width="0.0166%" height="15" fill="rgb(226,216,39)" fg:x="1283" fg:w="1"/><text x="21.5164%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="21.2664%" y="1237" width="0.0166%" height="15" fill="rgb(243,47,51)" fg:x="1283" fg:w="1"/><text x="21.5164%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl_data::_M_swap_data (1 samples, 0.02%)</title><rect x="21.2664%" y="1221" width="0.0166%" height="15" fill="rgb(241,183,40)" fg:x="1283" fg:w="1"/><text x="21.5164%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl_data::_M_copy_data (1 samples, 0.02%)</title><rect x="21.2664%" y="1205" width="0.0166%" height="15" fill="rgb(231,217,32)" fg:x="1283" fg:w="1"/><text x="21.5164%" y="1215.50"></text></g><g><title>CTxMemPool::removeConflicts (2 samples, 0.03%)</title><rect x="21.2829%" y="1269" width="0.0332%" height="15" fill="rgb(229,61,38)" fg:x="1284" fg:w="2"/><text x="21.5329%" y="1279.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (2 samples, 0.03%)</title><rect x="21.2829%" y="1253" width="0.0332%" height="15" fill="rgb(225,210,5)" fg:x="1284" fg:w="2"/><text x="21.5329%" y="1263.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (2 samples, 0.03%)</title><rect x="21.2829%" y="1237" width="0.0332%" height="15" fill="rgb(231,79,45)" fg:x="1284" fg:w="2"/><text x="21.5329%" y="1247.50"></text></g><g><title>CTxMemPool::removeConflicts (1 samples, 0.02%)</title><rect x="21.3161%" y="1253" width="0.0166%" height="15" fill="rgb(224,100,7)" fg:x="1286" fg:w="1"/><text x="21.5661%" y="1263.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (1 samples, 0.02%)</title><rect x="21.3161%" y="1237" width="0.0166%" height="15" fill="rgb(241,198,18)" fg:x="1286" fg:w="1"/><text x="21.5661%" y="1247.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="21.3161%" y="1221" width="0.0166%" height="15" fill="rgb(252,97,53)" fg:x="1286" fg:w="1"/><text x="21.5661%" y="1231.50"></text></g><g><title>SipHashUint256 (1 samples, 0.02%)</title><rect x="21.3161%" y="1205" width="0.0166%" height="15" fill="rgb(220,88,7)" fg:x="1286" fg:w="1"/><text x="21.5661%" y="1215.50"></text></g><g><title>SipHashUint256 (7 samples, 0.12%)</title><rect x="21.3327%" y="1253" width="0.1160%" height="15" fill="rgb(213,176,14)" fg:x="1287" fg:w="7"/><text x="21.5827%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="21.3990%" y="1237" width="0.0497%" height="15" fill="rgb(246,73,7)" fg:x="1291" fg:w="3"/><text x="21.6490%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="21.3990%" y="1221" width="0.0497%" height="15" fill="rgb(245,64,36)" fg:x="1291" fg:w="3"/><text x="21.6490%" y="1231.50"></text></g><g><title>boost::multi_index::detail::bucket_array_base&lt;true&gt;::position (2 samples, 0.03%)</title><rect x="21.4487%" y="1173" width="0.0332%" height="15" fill="rgb(245,80,10)" fg:x="1294" fg:w="2"/><text x="21.6987%" y="1183.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt; &gt; (3 samples, 0.05%)</title><rect x="21.4487%" y="1253" width="0.0497%" height="15" fill="rgb(232,107,50)" fg:x="1294" fg:w="3"/><text x="21.6987%" y="1263.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (3 samples, 0.05%)</title><rect x="21.4487%" y="1237" width="0.0497%" height="15" fill="rgb(253,3,0)" fg:x="1294" fg:w="3"/><text x="21.6987%" y="1247.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (3 samples, 0.05%)</title><rect x="21.4487%" y="1221" width="0.0497%" height="15" fill="rgb(212,99,53)" fg:x="1294" fg:w="3"/><text x="21.6987%" y="1231.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;uint256, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (3 samples, 0.05%)</title><rect x="21.4487%" y="1205" width="0.0497%" height="15" fill="rgb(249,111,54)" fg:x="1294" fg:w="3"/><text x="21.6987%" y="1215.50"></text></g><g><title>SaltedTxidHasher::operator (3 samples, 0.05%)</title><rect x="21.4487%" y="1189" width="0.0497%" height="15" fill="rgb(249,55,30)" fg:x="1294" fg:w="3"/><text x="21.6987%" y="1199.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="21.4818%" y="1173" width="0.0166%" height="15" fill="rgb(237,47,42)" fg:x="1296" fg:w="1"/><text x="21.7318%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="21.4818%" y="1157" width="0.0166%" height="15" fill="rgb(211,20,18)" fg:x="1296" fg:w="1"/><text x="21.7318%" y="1167.50"></text></g><g><title>SipHashUint256 (2 samples, 0.03%)</title><rect x="21.5150%" y="1237" width="0.0332%" height="15" fill="rgb(231,203,46)" fg:x="1298" fg:w="2"/><text x="21.7650%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="21.5150%" y="1221" width="0.0332%" height="15" fill="rgb(237,142,3)" fg:x="1298" fg:w="2"/><text x="21.7650%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="21.5150%" y="1205" width="0.0332%" height="15" fill="rgb(241,107,1)" fg:x="1298" fg:w="2"/><text x="21.7650%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (4 samples, 0.07%)</title><rect x="21.4984%" y="1253" width="0.0663%" height="15" fill="rgb(229,83,13)" fg:x="1297" fg:w="4"/><text x="21.7484%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (1 samples, 0.02%)</title><rect x="21.5482%" y="1237" width="0.0166%" height="15" fill="rgb(241,91,40)" fg:x="1300" fg:w="1"/><text x="21.7982%" y="1247.50"></text></g><g><title>CTxMemPool::removeForBlock (16 samples, 0.27%)</title><rect x="21.3161%" y="1269" width="0.2652%" height="15" fill="rgb(225,3,45)" fg:x="1286" fg:w="16"/><text x="21.5661%" y="1279.50"></text></g><g><title>std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="21.5647%" y="1253" width="0.0166%" height="15" fill="rgb(244,223,14)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="21.5647%" y="1237" width="0.0166%" height="15" fill="rgb(224,124,37)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="21.5647%" y="1221" width="0.0166%" height="15" fill="rgb(251,171,30)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="21.5647%" y="1205" width="0.0166%" height="15" fill="rgb(236,46,54)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1215.50"></text></g><g><title>std::allocator&lt;RemovedMempoolTransactionInfo&gt;::allocate (1 samples, 0.02%)</title><rect x="21.5647%" y="1189" width="0.0166%" height="15" fill="rgb(245,213,5)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1199.50"></text></g><g><title>std::__new_allocator&lt;RemovedMempoolTransactionInfo&gt;::allocate (1 samples, 0.02%)</title><rect x="21.5647%" y="1173" width="0.0166%" height="15" fill="rgb(230,144,27)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1183.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="21.5647%" y="1157" width="0.0166%" height="15" fill="rgb(220,86,6)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1167.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="21.5647%" y="1141" width="0.0166%" height="15" fill="rgb(240,20,13)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1151.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="21.5647%" y="1125" width="0.0166%" height="15" fill="rgb(217,89,34)" fg:x="1301" fg:w="1"/><text x="21.8147%" y="1135.50"></text></g><g><title>AddCoins (4 samples, 0.07%)</title><rect x="21.5979%" y="1237" width="0.0663%" height="15" fill="rgb(229,13,5)" fg:x="1303" fg:w="4"/><text x="21.8479%" y="1247.50"></text></g><g><title>Coin::Coin (4 samples, 0.07%)</title><rect x="21.5979%" y="1221" width="0.0663%" height="15" fill="rgb(244,67,35)" fg:x="1303" fg:w="4"/><text x="21.8479%" y="1231.50"></text></g><g><title>CTxOut::CTxOut (4 samples, 0.07%)</title><rect x="21.5979%" y="1205" width="0.0663%" height="15" fill="rgb(221,40,2)" fg:x="1303" fg:w="4"/><text x="21.8479%" y="1215.50"></text></g><g><title>CScript::CScript (4 samples, 0.07%)</title><rect x="21.5979%" y="1189" width="0.0663%" height="15" fill="rgb(237,157,21)" fg:x="1303" fg:w="4"/><text x="21.8479%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (4 samples, 0.07%)</title><rect x="21.5979%" y="1173" width="0.0663%" height="15" fill="rgb(222,94,11)" fg:x="1303" fg:w="4"/><text x="21.8479%" y="1183.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.07%)</title><rect x="21.5979%" y="1157" width="0.0663%" height="15" fill="rgb(249,113,6)" fg:x="1303" fg:w="4"/><text x="21.8479%" y="1167.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (1 samples, 0.02%)</title><rect x="21.6642%" y="1221" width="0.0166%" height="15" fill="rgb(238,137,36)" fg:x="1307" fg:w="1"/><text x="21.9142%" y="1231.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="21.7139%" y="1173" width="0.0332%" height="15" fill="rgb(210,102,26)" fg:x="1310" fg:w="2"/><text x="21.9639%" y="1183.50"></text></g><g><title>AddCoins (1 samples, 0.02%)</title><rect x="21.7471%" y="1157" width="0.0166%" height="15" fill="rgb(218,30,30)" fg:x="1312" fg:w="1"/><text x="21.9971%" y="1167.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="21.7471%" y="1141" width="0.0166%" height="15" fill="rgb(214,67,26)" fg:x="1312" fg:w="1"/><text x="21.9971%" y="1151.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="21.7636%" y="1157" width="0.0166%" height="15" fill="rgb(251,9,53)" fg:x="1313" fg:w="1"/><text x="22.0136%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.7636%" y="1141" width="0.0166%" height="15" fill="rgb(228,204,25)" fg:x="1313" fg:w="1"/><text x="22.0136%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.7636%" y="1125" width="0.0166%" height="15" fill="rgb(207,153,8)" fg:x="1313" fg:w="1"/><text x="22.0136%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.7636%" y="1109" width="0.0166%" height="15" fill="rgb(242,9,16)" fg:x="1313" fg:w="1"/><text x="22.0136%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="21.7636%" y="1093" width="0.0166%" height="15" fill="rgb(217,211,10)" fg:x="1313" fg:w="1"/><text x="22.0136%" y="1103.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.15%)</title><rect x="21.7802%" y="1157" width="0.1492%" height="15" fill="rgb(219,228,52)" fg:x="1314" fg:w="9"/><text x="22.0302%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="21.8631%" y="1141" width="0.0663%" height="15" fill="rgb(231,92,29)" fg:x="1319" fg:w="4"/><text x="22.1131%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="21.8631%" y="1125" width="0.0663%" height="15" fill="rgb(232,8,23)" fg:x="1319" fg:w="4"/><text x="22.1131%" y="1135.50"></text></g><g><title>AddCoins (2 samples, 0.03%)</title><rect x="21.9294%" y="1077" width="0.0332%" height="15" fill="rgb(216,211,34)" fg:x="1323" fg:w="2"/><text x="22.1794%" y="1087.50"></text></g><g><title>COutPoint::COutPoint (1 samples, 0.02%)</title><rect x="21.9460%" y="1061" width="0.0166%" height="15" fill="rgb(236,151,0)" fg:x="1324" fg:w="1"/><text x="22.1960%" y="1071.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="21.9625%" y="1077" width="0.0166%" height="15" fill="rgb(209,168,3)" fg:x="1325" fg:w="1"/><text x="22.2125%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.9625%" y="1061" width="0.0166%" height="15" fill="rgb(208,129,28)" fg:x="1325" fg:w="1"/><text x="22.2125%" y="1071.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.9625%" y="1045" width="0.0166%" height="15" fill="rgb(229,78,22)" fg:x="1325" fg:w="1"/><text x="22.2125%" y="1055.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="21.9625%" y="1029" width="0.0166%" height="15" fill="rgb(228,187,13)" fg:x="1325" fg:w="1"/><text x="22.2125%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.13%)</title><rect x="21.9294%" y="1141" width="0.1326%" height="15" fill="rgb(240,119,24)" fg:x="1323" fg:w="8"/><text x="22.1794%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.13%)</title><rect x="21.9294%" y="1125" width="0.1326%" height="15" fill="rgb(209,194,42)" fg:x="1323" fg:w="8"/><text x="22.1794%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.13%)</title><rect x="21.9294%" y="1109" width="0.1326%" height="15" fill="rgb(247,200,46)" fg:x="1323" fg:w="8"/><text x="22.1794%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.13%)</title><rect x="21.9294%" y="1093" width="0.1326%" height="15" fill="rgb(218,76,16)" fg:x="1323" fg:w="8"/><text x="22.1794%" y="1103.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="21.9791%" y="1077" width="0.0829%" height="15" fill="rgb(225,21,48)" fg:x="1326" fg:w="5"/><text x="22.2291%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="22.0288%" y="1061" width="0.0332%" height="15" fill="rgb(239,223,50)" fg:x="1329" fg:w="2"/><text x="22.2788%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="22.0288%" y="1045" width="0.0332%" height="15" fill="rgb(244,45,21)" fg:x="1329" fg:w="2"/><text x="22.2788%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.15%)</title><rect x="21.9294%" y="1157" width="0.1492%" height="15" fill="rgb(232,33,43)" fg:x="1323" fg:w="9"/><text x="22.1794%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="22.0620%" y="1141" width="0.0166%" height="15" fill="rgb(209,8,3)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="22.0620%" y="1125" width="0.0166%" height="15" fill="rgb(214,25,53)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1135.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="22.0620%" y="1109" width="0.0166%" height="15" fill="rgb(254,186,54)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1119.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="22.0620%" y="1093" width="0.0166%" height="15" fill="rgb(208,174,49)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1103.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="22.0620%" y="1077" width="0.0166%" height="15" fill="rgb(233,191,51)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1087.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="22.0620%" y="1061" width="0.0166%" height="15" fill="rgb(222,134,10)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1071.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="22.0620%" y="1045" width="0.0166%" height="15" fill="rgb(230,226,20)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="1029" width="0.0166%" height="15" fill="rgb(251,111,25)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="1013" width="0.0166%" height="15" fill="rgb(224,40,46)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="997" width="0.0166%" height="15" fill="rgb(236,108,47)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="981" width="0.0166%" height="15" fill="rgb(234,93,0)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="965" width="0.0166%" height="15" fill="rgb(224,213,32)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="949" width="0.0166%" height="15" fill="rgb(251,11,48)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="959.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="22.0620%" y="933" width="0.0166%" height="15" fill="rgb(236,173,5)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="917" width="0.0166%" height="15" fill="rgb(230,95,12)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="901" width="0.0166%" height="15" fill="rgb(232,209,1)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="885" width="0.0166%" height="15" fill="rgb(232,6,1)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="869" width="0.0166%" height="15" fill="rgb(210,224,50)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="853" width="0.0166%" height="15" fill="rgb(228,127,35)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="837" width="0.0166%" height="15" fill="rgb(245,102,45)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="821" width="0.0166%" height="15" fill="rgb(214,1,49)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="805" width="0.0166%" height="15" fill="rgb(226,163,40)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="789" width="0.0166%" height="15" fill="rgb(239,212,28)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.0620%" y="773" width="0.0166%" height="15" fill="rgb(220,20,13)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="783.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="22.0620%" y="757" width="0.0166%" height="15" fill="rgb(210,164,35)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="767.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="22.0620%" y="741" width="0.0166%" height="15" fill="rgb(248,109,41)" fg:x="1331" fg:w="1"/><text x="22.3120%" y="751.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (21 samples, 0.35%)</title><rect x="21.7471%" y="1173" width="0.3481%" height="15" fill="rgb(238,23,50)" fg:x="1312" fg:w="21"/><text x="21.9971%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="22.0786%" y="1157" width="0.0166%" height="15" fill="rgb(211,48,49)" fg:x="1332" fg:w="1"/><text x="22.3286%" y="1167.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="22.0786%" y="1141" width="0.0166%" height="15" fill="rgb(223,36,21)" fg:x="1332" fg:w="1"/><text x="22.3286%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="22.0786%" y="1125" width="0.0166%" height="15" fill="rgb(207,123,46)" fg:x="1332" fg:w="1"/><text x="22.3286%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="22.0786%" y="1109" width="0.0166%" height="15" fill="rgb(240,218,32)" fg:x="1332" fg:w="1"/><text x="22.3286%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="22.0786%" y="1093" width="0.0166%" height="15" fill="rgb(252,5,43)" fg:x="1332" fg:w="1"/><text x="22.3286%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="22.0786%" y="1077" width="0.0166%" height="15" fill="rgb(252,84,19)" fg:x="1332" fg:w="1"/><text x="22.3286%" y="1087.50"></text></g><g><title>SipHashUint256Extra (10 samples, 0.17%)</title><rect x="22.0951%" y="1157" width="0.1658%" height="15" fill="rgb(243,152,39)" fg:x="1333" fg:w="10"/><text x="22.3451%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="22.2277%" y="1141" width="0.0332%" height="15" fill="rgb(234,160,15)" fg:x="1341" fg:w="2"/><text x="22.4777%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="22.2277%" y="1125" width="0.0332%" height="15" fill="rgb(237,34,20)" fg:x="1341" fg:w="2"/><text x="22.4777%" y="1135.50"></text></g><g><title>CCoinsViewCache::AddCoin (3 samples, 0.05%)</title><rect x="22.2609%" y="1077" width="0.0497%" height="15" fill="rgb(229,97,13)" fg:x="1343" fg:w="3"/><text x="22.5109%" y="1087.50"></text></g><g><title>CScript::IsUnspendable (1 samples, 0.02%)</title><rect x="22.2940%" y="1061" width="0.0166%" height="15" fill="rgb(234,71,50)" fg:x="1345" fg:w="1"/><text x="22.5440%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="22.2940%" y="1045" width="0.0166%" height="15" fill="rgb(253,155,4)" fg:x="1345" fg:w="1"/><text x="22.5440%" y="1055.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="22.3106%" y="1077" width="0.0332%" height="15" fill="rgb(222,185,37)" fg:x="1346" fg:w="2"/><text x="22.5606%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="22.3272%" y="1061" width="0.0166%" height="15" fill="rgb(251,177,13)" fg:x="1347" fg:w="1"/><text x="22.5772%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="22.3272%" y="1045" width="0.0166%" height="15" fill="rgb(250,179,40)" fg:x="1347" fg:w="1"/><text x="22.5772%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (6 samples, 0.10%)</title><rect x="22.2609%" y="1157" width="0.0995%" height="15" fill="rgb(242,44,2)" fg:x="1343" fg:w="6"/><text x="22.5109%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.10%)</title><rect x="22.2609%" y="1141" width="0.0995%" height="15" fill="rgb(216,177,13)" fg:x="1343" fg:w="6"/><text x="22.5109%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.10%)</title><rect x="22.2609%" y="1125" width="0.0995%" height="15" fill="rgb(216,106,43)" fg:x="1343" fg:w="6"/><text x="22.5109%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.10%)</title><rect x="22.2609%" y="1109" width="0.0995%" height="15" fill="rgb(216,183,2)" fg:x="1343" fg:w="6"/><text x="22.5109%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.10%)</title><rect x="22.2609%" y="1093" width="0.0995%" height="15" fill="rgb(249,75,3)" fg:x="1343" fg:w="6"/><text x="22.5109%" y="1103.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="22.3438%" y="1077" width="0.0166%" height="15" fill="rgb(219,67,39)" fg:x="1348" fg:w="1"/><text x="22.5938%" y="1087.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="22.3438%" y="1061" width="0.0166%" height="15" fill="rgb(253,228,2)" fg:x="1348" fg:w="1"/><text x="22.5938%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="22.3438%" y="1045" width="0.0166%" height="15" fill="rgb(235,138,27)" fg:x="1348" fg:w="1"/><text x="22.5938%" y="1055.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="22.3438%" y="1029" width="0.0166%" height="15" fill="rgb(236,97,51)" fg:x="1348" fg:w="1"/><text x="22.5938%" y="1039.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="22.3438%" y="1013" width="0.0166%" height="15" fill="rgb(240,80,30)" fg:x="1348" fg:w="1"/><text x="22.5938%" y="1023.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="22.3438%" y="997" width="0.0166%" height="15" fill="rgb(230,178,19)" fg:x="1348" fg:w="1"/><text x="22.5938%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (2 samples, 0.03%)</title><rect x="22.3769%" y="1125" width="0.0332%" height="15" fill="rgb(210,190,27)" fg:x="1350" fg:w="2"/><text x="22.6269%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (2 samples, 0.03%)</title><rect x="22.3769%" y="1109" width="0.0332%" height="15" fill="rgb(222,107,31)" fg:x="1350" fg:w="2"/><text x="22.6269%" y="1119.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="22.3769%" y="1093" width="0.0332%" height="15" fill="rgb(216,127,34)" fg:x="1350" fg:w="2"/><text x="22.6269%" y="1103.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.15%)</title><rect x="22.4101%" y="1077" width="0.1492%" height="15" fill="rgb(234,116,52)" fg:x="1352" fg:w="9"/><text x="22.6601%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="22.5095%" y="1061" width="0.0497%" height="15" fill="rgb(222,124,15)" fg:x="1358" fg:w="3"/><text x="22.7595%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="22.5095%" y="1045" width="0.0497%" height="15" fill="rgb(231,179,28)" fg:x="1358" fg:w="3"/><text x="22.7595%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (30 samples, 0.50%)</title><rect x="22.0951%" y="1173" width="0.4973%" height="15" fill="rgb(226,93,45)" fg:x="1333" fg:w="30"/><text x="22.3451%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (14 samples, 0.23%)</title><rect x="22.3604%" y="1157" width="0.2321%" height="15" fill="rgb(215,8,51)" fg:x="1349" fg:w="14"/><text x="22.6104%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (14 samples, 0.23%)</title><rect x="22.3604%" y="1141" width="0.2321%" height="15" fill="rgb(223,106,5)" fg:x="1349" fg:w="14"/><text x="22.6104%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (11 samples, 0.18%)</title><rect x="22.4101%" y="1125" width="0.1823%" height="15" fill="rgb(250,191,5)" fg:x="1352" fg:w="11"/><text x="22.6601%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (11 samples, 0.18%)</title><rect x="22.4101%" y="1109" width="0.1823%" height="15" fill="rgb(242,132,44)" fg:x="1352" fg:w="11"/><text x="22.6601%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (11 samples, 0.18%)</title><rect x="22.4101%" y="1093" width="0.1823%" height="15" fill="rgb(251,152,29)" fg:x="1352" fg:w="11"/><text x="22.6601%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (2 samples, 0.03%)</title><rect x="22.5593%" y="1077" width="0.0332%" height="15" fill="rgb(218,179,5)" fg:x="1361" fg:w="2"/><text x="22.8093%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (2 samples, 0.03%)</title><rect x="22.5593%" y="1061" width="0.0332%" height="15" fill="rgb(227,67,19)" fg:x="1361" fg:w="2"/><text x="22.8093%" y="1071.50"></text></g><g><title>AddCoins (3 samples, 0.05%)</title><rect x="22.5924%" y="1157" width="0.0497%" height="15" fill="rgb(233,119,31)" fg:x="1363" fg:w="3"/><text x="22.8424%" y="1167.50"></text></g><g><title>Coin::Coin (3 samples, 0.05%)</title><rect x="22.5924%" y="1141" width="0.0497%" height="15" fill="rgb(241,120,22)" fg:x="1363" fg:w="3"/><text x="22.8424%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (3 samples, 0.05%)</title><rect x="22.5924%" y="1125" width="0.0497%" height="15" fill="rgb(224,102,30)" fg:x="1363" fg:w="3"/><text x="22.8424%" y="1135.50"></text></g><g><title>CScript::CScript (3 samples, 0.05%)</title><rect x="22.5924%" y="1109" width="0.0497%" height="15" fill="rgb(210,164,37)" fg:x="1363" fg:w="3"/><text x="22.8424%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (3 samples, 0.05%)</title><rect x="22.5924%" y="1093" width="0.0497%" height="15" fill="rgb(226,191,16)" fg:x="1363" fg:w="3"/><text x="22.8424%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (3 samples, 0.05%)</title><rect x="22.5924%" y="1077" width="0.0497%" height="15" fill="rgb(214,40,45)" fg:x="1363" fg:w="3"/><text x="22.8424%" y="1087.50"></text></g><g><title>CCoinsViewCache::AddCoin (62 samples, 1.03%)</title><rect x="21.6642%" y="1237" width="1.0277%" height="15" fill="rgb(244,29,26)" fg:x="1307" fg:w="62"/><text x="21.9142%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (61 samples, 1.01%)</title><rect x="21.6808%" y="1221" width="1.0111%" height="15" fill="rgb(216,16,5)" fg:x="1308" fg:w="61"/><text x="21.9308%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (61 samples, 1.01%)</title><rect x="21.6808%" y="1205" width="1.0111%" height="15" fill="rgb(249,76,35)" fg:x="1308" fg:w="61"/><text x="21.9308%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (61 samples, 1.01%)</title><rect x="21.6808%" y="1189" width="1.0111%" height="15" fill="rgb(207,11,44)" fg:x="1308" fg:w="61"/><text x="21.9308%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (6 samples, 0.10%)</title><rect x="22.5924%" y="1173" width="0.0995%" height="15" fill="rgb(228,190,49)" fg:x="1363" fg:w="6"/><text x="22.8424%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="22.6421%" y="1157" width="0.0497%" height="15" fill="rgb(214,173,12)" fg:x="1366" fg:w="3"/><text x="22.8921%" y="1167.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="22.6421%" y="1141" width="0.0497%" height="15" fill="rgb(218,26,35)" fg:x="1366" fg:w="3"/><text x="22.8921%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="22.6421%" y="1125" width="0.0497%" height="15" fill="rgb(220,200,19)" fg:x="1366" fg:w="3"/><text x="22.8921%" y="1135.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="22.6421%" y="1109" width="0.0497%" height="15" fill="rgb(239,95,49)" fg:x="1366" fg:w="3"/><text x="22.8921%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (3 samples, 0.05%)</title><rect x="22.6421%" y="1093" width="0.0497%" height="15" fill="rgb(235,85,53)" fg:x="1366" fg:w="3"/><text x="22.8921%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (3 samples, 0.05%)</title><rect x="22.6421%" y="1077" width="0.0497%" height="15" fill="rgb(233,133,31)" fg:x="1366" fg:w="3"/><text x="22.8921%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="22.6421%" y="1061" width="0.0497%" height="15" fill="rgb(218,25,20)" fg:x="1366" fg:w="3"/><text x="22.8921%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.6587%" y="1045" width="0.0332%" height="15" fill="rgb(252,210,38)" fg:x="1367" fg:w="2"/><text x="22.9087%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.6587%" y="1029" width="0.0332%" height="15" fill="rgb(242,134,21)" fg:x="1367" fg:w="2"/><text x="22.9087%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.6587%" y="1013" width="0.0332%" height="15" fill="rgb(213,28,48)" fg:x="1367" fg:w="2"/><text x="22.9087%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.6587%" y="997" width="0.0332%" height="15" fill="rgb(250,196,2)" fg:x="1367" fg:w="2"/><text x="22.9087%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.6587%" y="981" width="0.0332%" height="15" fill="rgb(227,5,17)" fg:x="1367" fg:w="2"/><text x="22.9087%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="22.6587%" y="965" width="0.0332%" height="15" fill="rgb(221,226,24)" fg:x="1367" fg:w="2"/><text x="22.9087%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.6753%" y="949" width="0.0166%" height="15" fill="rgb(211,5,48)" fg:x="1368" fg:w="1"/><text x="22.9253%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.6753%" y="933" width="0.0166%" height="15" fill="rgb(219,150,6)" fg:x="1368" fg:w="1"/><text x="22.9253%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.6753%" y="917" width="0.0166%" height="15" fill="rgb(251,46,16)" fg:x="1368" fg:w="1"/><text x="22.9253%" y="927.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="22.6919%" y="1237" width="0.0166%" height="15" fill="rgb(220,204,40)" fg:x="1369" fg:w="1"/><text x="22.9419%" y="1247.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="22.6919%" y="1221" width="0.0166%" height="15" fill="rgb(211,85,2)" fg:x="1369" fg:w="1"/><text x="22.9419%" y="1231.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="22.6919%" y="1205" width="0.0166%" height="15" fill="rgb(229,17,7)" fg:x="1369" fg:w="1"/><text x="22.9419%" y="1215.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="22.6919%" y="1189" width="0.0166%" height="15" fill="rgb(239,72,28)" fg:x="1369" fg:w="1"/><text x="22.9419%" y="1199.50"></text></g><g><title>std::array&lt;unsigned char, 32ul&gt;::end (1 samples, 0.02%)</title><rect x="22.6919%" y="1173" width="0.0166%" height="15" fill="rgb(230,47,54)" fg:x="1369" fg:w="1"/><text x="22.9419%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (2 samples, 0.03%)</title><rect x="22.7084%" y="1173" width="0.0332%" height="15" fill="rgb(214,50,8)" fg:x="1370" fg:w="2"/><text x="22.9584%" y="1183.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="22.7250%" y="1157" width="0.0166%" height="15" fill="rgb(216,198,43)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1167.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="22.7250%" y="1141" width="0.0166%" height="15" fill="rgb(234,20,35)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1125" width="0.0166%" height="15" fill="rgb(254,45,19)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1109" width="0.0166%" height="15" fill="rgb(219,14,44)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1093" width="0.0166%" height="15" fill="rgb(217,220,26)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1077" width="0.0166%" height="15" fill="rgb(213,158,28)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1061" width="0.0166%" height="15" fill="rgb(252,51,52)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1045" width="0.0166%" height="15" fill="rgb(246,89,16)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1029" width="0.0166%" height="15" fill="rgb(216,158,49)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="1013" width="0.0166%" height="15" fill="rgb(236,107,19)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.7250%" y="997" width="0.0166%" height="15" fill="rgb(228,185,30)" fg:x="1371" fg:w="1"/><text x="22.9750%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="22.7416%" y="1157" width="0.0166%" height="15" fill="rgb(246,134,8)" fg:x="1372" fg:w="1"/><text x="22.9916%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="22.7416%" y="1141" width="0.0166%" height="15" fill="rgb(214,143,50)" fg:x="1372" fg:w="1"/><text x="22.9916%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (2 samples, 0.03%)</title><rect x="22.7416%" y="1173" width="0.0332%" height="15" fill="rgb(228,75,8)" fg:x="1372" fg:w="2"/><text x="22.9916%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="22.7582%" y="1157" width="0.0166%" height="15" fill="rgb(207,175,4)" fg:x="1373" fg:w="1"/><text x="23.0082%" y="1167.50"></text></g><g><title>Coin::Coin (5 samples, 0.08%)</title><rect x="22.7084%" y="1237" width="0.0829%" height="15" fill="rgb(205,108,24)" fg:x="1370" fg:w="5"/><text x="22.9584%" y="1247.50"></text></g><g><title>CTxOut::CTxOut (5 samples, 0.08%)</title><rect x="22.7084%" y="1221" width="0.0829%" height="15" fill="rgb(244,120,49)" fg:x="1370" fg:w="5"/><text x="22.9584%" y="1231.50"></text></g><g><title>CScript::CScript (5 samples, 0.08%)</title><rect x="22.7084%" y="1205" width="0.0829%" height="15" fill="rgb(223,47,38)" fg:x="1370" fg:w="5"/><text x="22.9584%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (5 samples, 0.08%)</title><rect x="22.7084%" y="1189" width="0.0829%" height="15" fill="rgb(229,179,11)" fg:x="1370" fg:w="5"/><text x="22.9584%" y="1199.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="22.7747%" y="1173" width="0.0166%" height="15" fill="rgb(231,122,1)" fg:x="1374" fg:w="1"/><text x="23.0247%" y="1183.50"></text></g><g><title>SipHashUint256Extra (37 samples, 0.61%)</title><rect x="22.7913%" y="1237" width="0.6133%" height="15" fill="rgb(245,119,9)" fg:x="1375" fg:w="37"/><text x="23.0413%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (11 samples, 0.18%)</title><rect x="23.2223%" y="1221" width="0.1823%" height="15" fill="rgb(241,163,25)" fg:x="1401" fg:w="11"/><text x="23.4723%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (11 samples, 0.18%)</title><rect x="23.2223%" y="1205" width="0.1823%" height="15" fill="rgb(217,214,3)" fg:x="1401" fg:w="11"/><text x="23.4723%" y="1215.50"></text></g><g><title>UpdateCoins (1 samples, 0.02%)</title><rect x="23.4046%" y="1237" width="0.0166%" height="15" fill="rgb(240,86,28)" fg:x="1412" fg:w="1"/><text x="23.6546%" y="1247.50"></text></g><g><title>AddCoins (116 samples, 1.92%)</title><rect x="21.5813%" y="1253" width="1.9228%" height="15" fill="rgb(215,47,9)" fg:x="1302" fg:w="116"/><text x="21.8313%" y="1263.50">A..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.08%)</title><rect x="23.4212%" y="1237" width="0.0829%" height="15" fill="rgb(252,25,45)" fg:x="1413" fg:w="5"/><text x="23.6712%" y="1247.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.02%)</title><rect x="23.5041%" y="1253" width="0.0166%" height="15" fill="rgb(251,164,9)" fg:x="1418" fg:w="1"/><text x="23.7541%" y="1263.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.02%)</title><rect x="23.5041%" y="1237" width="0.0166%" height="15" fill="rgb(233,194,0)" fg:x="1418" fg:w="1"/><text x="23.7541%" y="1247.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="23.5041%" y="1221" width="0.0166%" height="15" fill="rgb(249,111,24)" fg:x="1418" fg:w="1"/><text x="23.7541%" y="1231.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="23.5041%" y="1205" width="0.0166%" height="15" fill="rgb(250,223,3)" fg:x="1418" fg:w="1"/><text x="23.7541%" y="1215.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="23.5041%" y="1189" width="0.0166%" height="15" fill="rgb(236,178,37)" fg:x="1418" fg:w="1"/><text x="23.7541%" y="1199.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="23.5041%" y="1173" width="0.0166%" height="15" fill="rgb(241,158,50)" fg:x="1418" fg:w="1"/><text x="23.7541%" y="1183.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="23.5206%" y="1253" width="0.0166%" height="15" fill="rgb(213,121,41)" fg:x="1419" fg:w="1"/><text x="23.7706%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (5 samples, 0.08%)</title><rect x="23.5372%" y="1221" width="0.0829%" height="15" fill="rgb(240,92,3)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (5 samples, 0.08%)</title><rect x="23.5372%" y="1205" width="0.0829%" height="15" fill="rgb(205,123,3)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (5 samples, 0.08%)</title><rect x="23.5372%" y="1189" width="0.0829%" height="15" fill="rgb(205,97,47)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1199.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (5 samples, 0.08%)</title><rect x="23.5372%" y="1173" width="0.0829%" height="15" fill="rgb(247,152,14)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (5 samples, 0.08%)</title><rect x="23.5372%" y="1157" width="0.0829%" height="15" fill="rgb(248,195,53)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.08%)</title><rect x="23.5372%" y="1141" width="0.0829%" height="15" fill="rgb(226,201,16)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1151.50"></text></g><g><title>_int_free (5 samples, 0.08%)</title><rect x="23.5372%" y="1125" width="0.0829%" height="15" fill="rgb(205,98,0)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1135.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (5 samples, 0.08%)</title><rect x="23.5372%" y="1109" width="0.0829%" height="15" fill="rgb(214,191,48)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1119.50"></text></g><g><title>malloc_consolidate (5 samples, 0.08%)</title><rect x="23.5372%" y="1093" width="0.0829%" height="15" fill="rgb(237,112,39)" fg:x="1420" fg:w="5"/><text x="23.7872%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="1077" width="0.0166%" height="15" fill="rgb(247,203,27)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="1061" width="0.0166%" height="15" fill="rgb(235,124,28)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="1045" width="0.0166%" height="15" fill="rgb(208,207,46)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="1029" width="0.0166%" height="15" fill="rgb(234,176,4)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="1013" width="0.0166%" height="15" fill="rgb(230,133,28)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="997" width="0.0166%" height="15" fill="rgb(211,137,40)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="981" width="0.0166%" height="15" fill="rgb(254,35,13)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="965" width="0.0166%" height="15" fill="rgb(225,49,51)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="949" width="0.0166%" height="15" fill="rgb(251,10,15)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.6035%" y="933" width="0.0166%" height="15" fill="rgb(228,207,15)" fg:x="1424" fg:w="1"/><text x="23.8535%" y="943.50"></text></g><g><title>CBlockUndo::~CBlockUndo (8 samples, 0.13%)</title><rect x="23.5372%" y="1253" width="0.1326%" height="15" fill="rgb(241,99,19)" fg:x="1420" fg:w="8"/><text x="23.7872%" y="1263.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (8 samples, 0.13%)</title><rect x="23.5372%" y="1237" width="0.1326%" height="15" fill="rgb(207,104,49)" fg:x="1420" fg:w="8"/><text x="23.7872%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (3 samples, 0.05%)</title><rect x="23.6201%" y="1221" width="0.0497%" height="15" fill="rgb(234,99,18)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (3 samples, 0.05%)</title><rect x="23.6201%" y="1205" width="0.0497%" height="15" fill="rgb(213,191,49)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1215.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (3 samples, 0.05%)</title><rect x="23.6201%" y="1189" width="0.0497%" height="15" fill="rgb(210,226,19)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (3 samples, 0.05%)</title><rect x="23.6201%" y="1173" width="0.0497%" height="15" fill="rgb(229,97,18)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (3 samples, 0.05%)</title><rect x="23.6201%" y="1157" width="0.0497%" height="15" fill="rgb(211,167,15)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1167.50"></text></g><g><title>CTxUndo::~CTxUndo (3 samples, 0.05%)</title><rect x="23.6201%" y="1141" width="0.0497%" height="15" fill="rgb(210,169,34)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1151.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (3 samples, 0.05%)</title><rect x="23.6201%" y="1125" width="0.0497%" height="15" fill="rgb(241,121,31)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (3 samples, 0.05%)</title><rect x="23.6201%" y="1109" width="0.0497%" height="15" fill="rgb(232,40,11)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (3 samples, 0.05%)</title><rect x="23.6201%" y="1093" width="0.0497%" height="15" fill="rgb(205,86,26)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (3 samples, 0.05%)</title><rect x="23.6201%" y="1077" width="0.0497%" height="15" fill="rgb(231,126,28)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1087.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (3 samples, 0.05%)</title><rect x="23.6201%" y="1061" width="0.0497%" height="15" fill="rgb(219,221,18)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (3 samples, 0.05%)</title><rect x="23.6201%" y="1045" width="0.0497%" height="15" fill="rgb(211,40,0)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1055.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="23.6201%" y="1029" width="0.0497%" height="15" fill="rgb(239,85,43)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1039.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="23.6201%" y="1013" width="0.0497%" height="15" fill="rgb(231,55,21)" fg:x="1425" fg:w="3"/><text x="23.8701%" y="1023.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.03%)</title><rect x="23.6367%" y="997" width="0.0332%" height="15" fill="rgb(225,184,43)" fg:x="1426" fg:w="2"/><text x="23.8867%" y="1007.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="23.6367%" y="981" width="0.0332%" height="15" fill="rgb(251,158,41)" fg:x="1426" fg:w="2"/><text x="23.8867%" y="991.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="23.6864%" y="1173" width="0.0166%" height="15" fill="rgb(234,159,37)" fg:x="1429" fg:w="1"/><text x="23.9364%" y="1183.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="23.6864%" y="1157" width="0.0166%" height="15" fill="rgb(216,204,22)" fg:x="1429" fg:w="1"/><text x="23.9364%" y="1167.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="23.7030%" y="1173" width="0.0332%" height="15" fill="rgb(214,17,3)" fg:x="1430" fg:w="2"/><text x="23.9530%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.7195%" y="1157" width="0.0166%" height="15" fill="rgb(212,111,17)" fg:x="1431" fg:w="1"/><text x="23.9695%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.7195%" y="1141" width="0.0166%" height="15" fill="rgb(221,157,24)" fg:x="1431" fg:w="1"/><text x="23.9695%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (4 samples, 0.07%)</title><rect x="23.6864%" y="1189" width="0.0663%" height="15" fill="rgb(252,16,13)" fg:x="1429" fg:w="4"/><text x="23.9364%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="23.7361%" y="1173" width="0.0166%" height="15" fill="rgb(221,62,2)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="23.7361%" y="1157" width="0.0166%" height="15" fill="rgb(247,87,22)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="23.7361%" y="1141" width="0.0166%" height="15" fill="rgb(215,73,9)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1151.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="23.7361%" y="1125" width="0.0166%" height="15" fill="rgb(207,175,33)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1135.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="23.7361%" y="1109" width="0.0166%" height="15" fill="rgb(243,129,54)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="23.7361%" y="1093" width="0.0166%" height="15" fill="rgb(227,119,45)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="23.7361%" y="1077" width="0.0166%" height="15" fill="rgb(205,109,36)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="23.7361%" y="1061" width="0.0166%" height="15" fill="rgb(205,6,39)" fg:x="1432" fg:w="1"/><text x="23.9861%" y="1071.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="23.7527%" y="1157" width="0.0166%" height="15" fill="rgb(221,32,16)" fg:x="1433" fg:w="1"/><text x="24.0027%" y="1167.50"></text></g><g><title>CCoinsViewCache::HaveCoin (1 samples, 0.02%)</title><rect x="23.7527%" y="1141" width="0.0166%" height="15" fill="rgb(228,144,50)" fg:x="1433" fg:w="1"/><text x="24.0027%" y="1151.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.02%)</title><rect x="23.7693%" y="1157" width="0.0166%" height="15" fill="rgb(229,201,53)" fg:x="1434" fg:w="1"/><text x="24.0193%" y="1167.50"></text></g><g><title>MoneyRange (1 samples, 0.02%)</title><rect x="23.7693%" y="1141" width="0.0166%" height="15" fill="rgb(249,153,27)" fg:x="1434" fg:w="1"/><text x="24.0193%" y="1151.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="23.7858%" y="1157" width="0.0663%" height="15" fill="rgb(227,106,25)" fg:x="1435" fg:w="4"/><text x="24.0358%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (11 samples, 0.18%)</title><rect x="23.6864%" y="1237" width="0.1823%" height="15" fill="rgb(230,65,29)" fg:x="1429" fg:w="11"/><text x="23.9364%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (11 samples, 0.18%)</title><rect x="23.6864%" y="1221" width="0.1823%" height="15" fill="rgb(221,57,46)" fg:x="1429" fg:w="11"/><text x="23.9364%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (11 samples, 0.18%)</title><rect x="23.6864%" y="1205" width="0.1823%" height="15" fill="rgb(229,161,17)" fg:x="1429" fg:w="11"/><text x="23.9364%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.12%)</title><rect x="23.7527%" y="1189" width="0.1160%" height="15" fill="rgb(222,213,11)" fg:x="1433" fg:w="7"/><text x="24.0027%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.12%)</title><rect x="23.7527%" y="1173" width="0.1160%" height="15" fill="rgb(235,35,13)" fg:x="1433" fg:w="7"/><text x="24.0027%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="23.8521%" y="1157" width="0.0166%" height="15" fill="rgb(233,158,34)" fg:x="1439" fg:w="1"/><text x="24.1021%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="23.8521%" y="1141" width="0.0166%" height="15" fill="rgb(215,151,48)" fg:x="1439" fg:w="1"/><text x="24.1021%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="23.8521%" y="1125" width="0.0166%" height="15" fill="rgb(229,84,14)" fg:x="1439" fg:w="1"/><text x="24.1021%" y="1135.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="23.8521%" y="1109" width="0.0166%" height="15" fill="rgb(229,68,14)" fg:x="1439" fg:w="1"/><text x="24.1021%" y="1119.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="23.8521%" y="1093" width="0.0166%" height="15" fill="rgb(243,106,26)" fg:x="1439" fg:w="1"/><text x="24.1021%" y="1103.50"></text></g><g><title>CCoinsViewCache::AccessCoin (13 samples, 0.22%)</title><rect x="23.6698%" y="1253" width="0.2155%" height="15" fill="rgb(206,45,38)" fg:x="1428" fg:w="13"/><text x="23.9198%" y="1263.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="23.8687%" y="1237" width="0.0166%" height="15" fill="rgb(226,6,15)" fg:x="1440" fg:w="1"/><text x="24.1187%" y="1247.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="23.8687%" y="1221" width="0.0166%" height="15" fill="rgb(232,22,54)" fg:x="1440" fg:w="1"/><text x="24.1187%" y="1231.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="23.8853%" y="1253" width="0.0166%" height="15" fill="rgb(229,222,32)" fg:x="1441" fg:w="1"/><text x="24.1353%" y="1263.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="23.9019%" y="1253" width="0.0166%" height="15" fill="rgb(228,62,29)" fg:x="1442" fg:w="1"/><text x="24.1519%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="23.9019%" y="1237" width="0.0166%" height="15" fill="rgb(251,103,34)" fg:x="1442" fg:w="1"/><text x="24.1519%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="23.9019%" y="1221" width="0.0166%" height="15" fill="rgb(233,12,30)" fg:x="1442" fg:w="1"/><text x="24.1519%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="23.9019%" y="1205" width="0.0166%" height="15" fill="rgb(238,52,0)" fg:x="1442" fg:w="1"/><text x="24.1519%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="23.9184%" y="1077" width="0.0166%" height="15" fill="rgb(223,98,5)" fg:x="1443" fg:w="1"/><text x="24.1684%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="23.9184%" y="1061" width="0.0166%" height="15" fill="rgb(228,75,37)" fg:x="1443" fg:w="1"/><text x="24.1684%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="23.9184%" y="1045" width="0.0166%" height="15" fill="rgb(205,115,49)" fg:x="1443" fg:w="1"/><text x="24.1684%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="23.9350%" y="1077" width="0.0166%" height="15" fill="rgb(250,154,43)" fg:x="1444" fg:w="1"/><text x="24.1850%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="23.9350%" y="1061" width="0.0166%" height="15" fill="rgb(226,43,29)" fg:x="1444" fg:w="1"/><text x="24.1850%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (12 samples, 0.20%)</title><rect x="23.9184%" y="1253" width="0.1989%" height="15" fill="rgb(249,228,39)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1263.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (12 samples, 0.20%)</title><rect x="23.9184%" y="1237" width="0.1989%" height="15" fill="rgb(216,79,43)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1247.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (12 samples, 0.20%)</title><rect x="23.9184%" y="1221" width="0.1989%" height="15" fill="rgb(228,95,12)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1231.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (12 samples, 0.20%)</title><rect x="23.9184%" y="1205" width="0.1989%" height="15" fill="rgb(249,221,15)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (12 samples, 0.20%)</title><rect x="23.9184%" y="1189" width="0.1989%" height="15" fill="rgb(233,34,13)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1199.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (12 samples, 0.20%)</title><rect x="23.9184%" y="1173" width="0.1989%" height="15" fill="rgb(214,103,39)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (12 samples, 0.20%)</title><rect x="23.9184%" y="1157" width="0.1989%" height="15" fill="rgb(251,126,39)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1167.50"></text></g><g><title>Coin::Coin (12 samples, 0.20%)</title><rect x="23.9184%" y="1141" width="0.1989%" height="15" fill="rgb(214,216,36)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (12 samples, 0.20%)</title><rect x="23.9184%" y="1125" width="0.1989%" height="15" fill="rgb(220,221,8)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1135.50"></text></g><g><title>CScript::CScript (12 samples, 0.20%)</title><rect x="23.9184%" y="1109" width="0.1989%" height="15" fill="rgb(240,216,3)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (12 samples, 0.20%)</title><rect x="23.9184%" y="1093" width="0.1989%" height="15" fill="rgb(232,218,17)" fg:x="1443" fg:w="12"/><text x="24.1684%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (10 samples, 0.17%)</title><rect x="23.9516%" y="1077" width="0.1658%" height="15" fill="rgb(229,163,45)" fg:x="1445" fg:w="10"/><text x="24.2016%" y="1087.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="24.1174%" y="1253" width="0.0166%" height="15" fill="rgb(231,110,42)" fg:x="1455" fg:w="1"/><text x="24.3674%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="24.1174%" y="1237" width="0.0166%" height="15" fill="rgb(208,170,48)" fg:x="1455" fg:w="1"/><text x="24.3674%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="24.1174%" y="1221" width="0.0166%" height="15" fill="rgb(239,116,25)" fg:x="1455" fg:w="1"/><text x="24.3674%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="24.1174%" y="1205" width="0.0166%" height="15" fill="rgb(219,200,50)" fg:x="1455" fg:w="1"/><text x="24.3674%" y="1215.50"></text></g><g><title>CScript::IsWitnessProgram (4 samples, 0.07%)</title><rect x="24.1339%" y="1253" width="0.0663%" height="15" fill="rgb(245,200,0)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1237" width="0.0663%" height="15" fill="rgb(245,119,33)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1221" width="0.0663%" height="15" fill="rgb(231,125,12)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1231.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1205" width="0.0663%" height="15" fill="rgb(216,96,41)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1215.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1189" width="0.0663%" height="15" fill="rgb(248,43,45)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1173" width="0.0663%" height="15" fill="rgb(217,222,7)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1183.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1157" width="0.0663%" height="15" fill="rgb(233,28,6)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1141" width="0.0663%" height="15" fill="rgb(231,218,15)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1125" width="0.0663%" height="15" fill="rgb(226,171,48)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1109" width="0.0663%" height="15" fill="rgb(235,201,9)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="24.1339%" y="1093" width="0.0663%" height="15" fill="rgb(217,80,15)" fg:x="1456" fg:w="4"/><text x="24.3839%" y="1103.50"></text></g><g><title>CalculateSequenceLocks (1 samples, 0.02%)</title><rect x="24.2002%" y="1253" width="0.0166%" height="15" fill="rgb(219,152,8)" fg:x="1460" fg:w="1"/><text x="24.4502%" y="1263.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="24.2168%" y="1253" width="0.0166%" height="15" fill="rgb(243,107,38)" fg:x="1461" fg:w="1"/><text x="24.4668%" y="1263.50"></text></g><g><title>CTxUndo::~CTxUndo (1 samples, 0.02%)</title><rect x="24.2168%" y="1237" width="0.0166%" height="15" fill="rgb(231,17,5)" fg:x="1461" fg:w="1"/><text x="24.4668%" y="1247.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="24.2168%" y="1221" width="0.0166%" height="15" fill="rgb(209,25,54)" fg:x="1461" fg:w="1"/><text x="24.4668%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="24.2168%" y="1205" width="0.0166%" height="15" fill="rgb(219,0,2)" fg:x="1461" fg:w="1"/><text x="24.4668%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="24.2168%" y="1189" width="0.0166%" height="15" fill="rgb(246,9,5)" fg:x="1461" fg:w="1"/><text x="24.4668%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="24.2665%" y="1157" width="0.0166%" height="15" fill="rgb(226,159,4)" fg:x="1464" fg:w="1"/><text x="24.5165%" y="1167.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="24.2831%" y="1157" width="0.0166%" height="15" fill="rgb(219,175,34)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="24.2831%" y="1141" width="0.0166%" height="15" fill="rgb(236,10,46)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="24.2831%" y="1125" width="0.0166%" height="15" fill="rgb(240,211,16)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.2831%" y="1109" width="0.0166%" height="15" fill="rgb(205,3,43)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.2831%" y="1093" width="0.0166%" height="15" fill="rgb(245,7,22)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.2831%" y="1077" width="0.0166%" height="15" fill="rgb(239,132,32)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.2831%" y="1061" width="0.0166%" height="15" fill="rgb(228,202,34)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1071.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="24.2831%" y="1045" width="0.0166%" height="15" fill="rgb(254,200,22)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="24.2831%" y="1029" width="0.0166%" height="15" fill="rgb(219,10,39)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1039.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="24.2831%" y="1013" width="0.0166%" height="15" fill="rgb(226,210,39)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="24.2831%" y="997" width="0.0166%" height="15" fill="rgb(208,219,16)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="24.2831%" y="981" width="0.0166%" height="15" fill="rgb(216,158,51)" fg:x="1465" fg:w="1"/><text x="24.5331%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3 samples, 0.05%)</title><rect x="24.2665%" y="1173" width="0.0497%" height="15" fill="rgb(233,14,44)" fg:x="1464" fg:w="3"/><text x="24.5165%" y="1183.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="24.2997%" y="1157" width="0.0166%" height="15" fill="rgb(237,97,39)" fg:x="1466" fg:w="1"/><text x="24.5497%" y="1167.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="24.3163%" y="1141" width="0.0166%" height="15" fill="rgb(218,198,43)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="24.3163%" y="1125" width="0.0166%" height="15" fill="rgb(231,104,20)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="24.3163%" y="1109" width="0.0166%" height="15" fill="rgb(254,36,13)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.3163%" y="1093" width="0.0166%" height="15" fill="rgb(248,14,50)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.3163%" y="1077" width="0.0166%" height="15" fill="rgb(217,107,29)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.3163%" y="1061" width="0.0166%" height="15" fill="rgb(251,169,33)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="24.3163%" y="1045" width="0.0166%" height="15" fill="rgb(217,108,32)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1055.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="24.3163%" y="1029" width="0.0166%" height="15" fill="rgb(219,66,42)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="24.3163%" y="1013" width="0.0166%" height="15" fill="rgb(206,180,7)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1023.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="24.3163%" y="997" width="0.0166%" height="15" fill="rgb(208,226,31)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="24.3163%" y="981" width="0.0166%" height="15" fill="rgb(218,26,49)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="24.3163%" y="965" width="0.0166%" height="15" fill="rgb(233,197,48)" fg:x="1467" fg:w="1"/><text x="24.5663%" y="975.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="24.3328%" y="1141" width="0.0166%" height="15" fill="rgb(252,181,51)" fg:x="1468" fg:w="1"/><text x="24.5828%" y="1151.50"></text></g><g><title>CCoinsViewCache::HaveCoin (1 samples, 0.02%)</title><rect x="24.3328%" y="1125" width="0.0166%" height="15" fill="rgb(253,90,19)" fg:x="1468" fg:w="1"/><text x="24.5828%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (8 samples, 0.13%)</title><rect x="24.2334%" y="1221" width="0.1326%" height="15" fill="rgb(215,171,30)" fg:x="1462" fg:w="8"/><text x="24.4834%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (6 samples, 0.10%)</title><rect x="24.2665%" y="1205" width="0.0995%" height="15" fill="rgb(214,222,9)" fg:x="1464" fg:w="6"/><text x="24.5165%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (6 samples, 0.10%)</title><rect x="24.2665%" y="1189" width="0.0995%" height="15" fill="rgb(223,3,22)" fg:x="1464" fg:w="6"/><text x="24.5165%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="24.3163%" y="1173" width="0.0497%" height="15" fill="rgb(225,196,46)" fg:x="1467" fg:w="3"/><text x="24.5663%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="24.3163%" y="1157" width="0.0497%" height="15" fill="rgb(209,110,37)" fg:x="1467" fg:w="3"/><text x="24.5663%" y="1167.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="24.3494%" y="1141" width="0.0166%" height="15" fill="rgb(249,89,12)" fg:x="1469" fg:w="1"/><text x="24.5994%" y="1151.50"></text></g><g><title>TxValidationState::TxValidationState (1 samples, 0.02%)</title><rect x="24.3494%" y="1125" width="0.0166%" height="15" fill="rgb(226,27,33)" fg:x="1469" fg:w="1"/><text x="24.5994%" y="1135.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::ValidationState (1 samples, 0.02%)</title><rect x="24.3494%" y="1109" width="0.0166%" height="15" fill="rgb(213,82,22)" fg:x="1469" fg:w="1"/><text x="24.5994%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="24.3494%" y="1093" width="0.0166%" height="15" fill="rgb(248,140,0)" fg:x="1469" fg:w="1"/><text x="24.5994%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="24.3494%" y="1077" width="0.0166%" height="15" fill="rgb(228,106,3)" fg:x="1469" fg:w="1"/><text x="24.5994%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (7 samples, 0.12%)</title><rect x="24.3660%" y="1221" width="0.1160%" height="15" fill="rgb(209,23,37)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1231.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (7 samples, 0.12%)</title><rect x="24.3660%" y="1205" width="0.1160%" height="15" fill="rgb(241,93,50)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1215.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (7 samples, 0.12%)</title><rect x="24.3660%" y="1189" width="0.1160%" height="15" fill="rgb(253,46,43)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (7 samples, 0.12%)</title><rect x="24.3660%" y="1173" width="0.1160%" height="15" fill="rgb(226,206,43)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (7 samples, 0.12%)</title><rect x="24.3660%" y="1157" width="0.1160%" height="15" fill="rgb(217,54,7)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (7 samples, 0.12%)</title><rect x="24.3660%" y="1141" width="0.1160%" height="15" fill="rgb(223,5,52)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (7 samples, 0.12%)</title><rect x="24.3660%" y="1125" width="0.1160%" height="15" fill="rgb(206,52,46)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1135.50"></text></g><g><title>Coin::Coin (7 samples, 0.12%)</title><rect x="24.3660%" y="1109" width="0.1160%" height="15" fill="rgb(253,136,11)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1119.50"></text></g><g><title>CTxOut::CTxOut (7 samples, 0.12%)</title><rect x="24.3660%" y="1093" width="0.1160%" height="15" fill="rgb(208,106,33)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1103.50"></text></g><g><title>CScript::CScript (7 samples, 0.12%)</title><rect x="24.3660%" y="1077" width="0.1160%" height="15" fill="rgb(206,54,4)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (7 samples, 0.12%)</title><rect x="24.3660%" y="1061" width="0.1160%" height="15" fill="rgb(213,3,15)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1071.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (7 samples, 0.12%)</title><rect x="24.3660%" y="1045" width="0.1160%" height="15" fill="rgb(252,211,39)" fg:x="1470" fg:w="7"/><text x="24.6160%" y="1055.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="24.4820%" y="1221" width="0.0166%" height="15" fill="rgb(223,6,36)" fg:x="1477" fg:w="1"/><text x="24.7320%" y="1231.50"></text></g><g><title>CCoinsViewCache::AccessCoin (17 samples, 0.28%)</title><rect x="24.2334%" y="1237" width="0.2818%" height="15" fill="rgb(252,169,45)" fg:x="1462" fg:w="17"/><text x="24.4834%" y="1247.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="24.4986%" y="1221" width="0.0166%" height="15" fill="rgb(212,48,26)" fg:x="1478" fg:w="1"/><text x="24.7486%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.4986%" y="1205" width="0.0166%" height="15" fill="rgb(251,102,48)" fg:x="1478" fg:w="1"/><text x="24.7486%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.4986%" y="1189" width="0.0166%" height="15" fill="rgb(243,208,16)" fg:x="1478" fg:w="1"/><text x="24.7486%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.07%)</title><rect x="24.5152%" y="1237" width="0.0663%" height="15" fill="rgb(219,96,24)" fg:x="1479" fg:w="4"/><text x="24.7652%" y="1247.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="24.5649%" y="1221" width="0.0166%" height="15" fill="rgb(219,33,29)" fg:x="1482" fg:w="1"/><text x="24.8149%" y="1231.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="24.5649%" y="1205" width="0.0166%" height="15" fill="rgb(223,176,5)" fg:x="1482" fg:w="1"/><text x="24.8149%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="24.5649%" y="1189" width="0.0166%" height="15" fill="rgb(228,140,14)" fg:x="1482" fg:w="1"/><text x="24.8149%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="24.5815%" y="1061" width="0.0166%" height="15" fill="rgb(217,179,31)" fg:x="1483" fg:w="1"/><text x="24.8315%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="24.5815%" y="1045" width="0.0166%" height="15" fill="rgb(230,9,30)" fg:x="1483" fg:w="1"/><text x="24.8315%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="24.5815%" y="1029" width="0.0166%" height="15" fill="rgb(230,136,20)" fg:x="1483" fg:w="1"/><text x="24.8315%" y="1039.50"></text></g><g><title>CCoinsViewCache::GetCoin (15 samples, 0.25%)</title><rect x="24.5815%" y="1237" width="0.2486%" height="15" fill="rgb(215,210,22)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1247.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (15 samples, 0.25%)</title><rect x="24.5815%" y="1221" width="0.2486%" height="15" fill="rgb(218,43,5)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1231.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (15 samples, 0.25%)</title><rect x="24.5815%" y="1205" width="0.2486%" height="15" fill="rgb(216,11,5)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.25%)</title><rect x="24.5815%" y="1189" width="0.2486%" height="15" fill="rgb(209,82,29)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.25%)</title><rect x="24.5815%" y="1173" width="0.2486%" height="15" fill="rgb(244,115,12)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (15 samples, 0.25%)</title><rect x="24.5815%" y="1157" width="0.2486%" height="15" fill="rgb(222,82,18)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (15 samples, 0.25%)</title><rect x="24.5815%" y="1141" width="0.2486%" height="15" fill="rgb(249,227,8)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1151.50"></text></g><g><title>Coin::Coin (15 samples, 0.25%)</title><rect x="24.5815%" y="1125" width="0.2486%" height="15" fill="rgb(253,141,45)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1135.50"></text></g><g><title>CTxOut::CTxOut (15 samples, 0.25%)</title><rect x="24.5815%" y="1109" width="0.2486%" height="15" fill="rgb(234,184,4)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1119.50"></text></g><g><title>CScript::CScript (15 samples, 0.25%)</title><rect x="24.5815%" y="1093" width="0.2486%" height="15" fill="rgb(218,194,23)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (15 samples, 0.25%)</title><rect x="24.5815%" y="1077" width="0.2486%" height="15" fill="rgb(235,66,41)" fg:x="1483" fg:w="15"/><text x="24.8315%" y="1087.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (14 samples, 0.23%)</title><rect x="24.5980%" y="1061" width="0.2321%" height="15" fill="rgb(245,217,1)" fg:x="1484" fg:w="14"/><text x="24.8480%" y="1071.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="24.8467%" y="1205" width="0.0166%" height="15" fill="rgb(229,91,1)" fg:x="1499" fg:w="1"/><text x="25.0967%" y="1215.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="24.8467%" y="1189" width="0.0166%" height="15" fill="rgb(207,101,30)" fg:x="1499" fg:w="1"/><text x="25.0967%" y="1199.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="24.8467%" y="1173" width="0.0166%" height="15" fill="rgb(223,82,49)" fg:x="1499" fg:w="1"/><text x="25.0967%" y="1183.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="24.8467%" y="1157" width="0.0166%" height="15" fill="rgb(218,167,17)" fg:x="1499" fg:w="1"/><text x="25.0967%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="24.8467%" y="1141" width="0.0166%" height="15" fill="rgb(208,103,14)" fg:x="1499" fg:w="1"/><text x="25.0967%" y="1151.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="24.8633%" y="1029" width="0.0166%" height="15" fill="rgb(238,20,8)" fg:x="1500" fg:w="1"/><text x="25.1133%" y="1039.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="24.8798%" y="1029" width="0.0166%" height="15" fill="rgb(218,80,54)" fg:x="1501" fg:w="1"/><text x="25.1298%" y="1039.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="24.8964%" y="997" width="0.0166%" height="15" fill="rgb(240,144,17)" fg:x="1502" fg:w="1"/><text x="25.1464%" y="1007.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="24.9296%" y="949" width="0.0166%" height="15" fill="rgb(245,27,50)" fg:x="1504" fg:w="1"/><text x="25.1796%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="24.9296%" y="933" width="0.0166%" height="15" fill="rgb(251,51,7)" fg:x="1504" fg:w="1"/><text x="25.1796%" y="943.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="24.9296%" y="917" width="0.0166%" height="15" fill="rgb(245,217,29)" fg:x="1504" fg:w="1"/><text x="25.1796%" y="927.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.07%)</title><rect x="24.9461%" y="949" width="0.0663%" height="15" fill="rgb(221,176,29)" fg:x="1505" fg:w="4"/><text x="25.1961%" y="959.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="24.9959%" y="933" width="0.0166%" height="15" fill="rgb(212,180,24)" fg:x="1508" fg:w="1"/><text x="25.2459%" y="943.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="24.9959%" y="917" width="0.0166%" height="15" fill="rgb(254,24,2)" fg:x="1508" fg:w="1"/><text x="25.2459%" y="927.50"></text></g><g><title>leveldb::MemTable::Get (8 samples, 0.13%)</title><rect x="24.8964%" y="1029" width="0.1326%" height="15" fill="rgb(230,100,2)" fg:x="1502" fg:w="8"/><text x="25.1464%" y="1039.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Seek (8 samples, 0.13%)</title><rect x="24.8964%" y="1013" width="0.1326%" height="15" fill="rgb(219,142,25)" fg:x="1502" fg:w="8"/><text x="25.1464%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (7 samples, 0.12%)</title><rect x="24.9130%" y="997" width="0.1160%" height="15" fill="rgb(240,73,43)" fg:x="1503" fg:w="7"/><text x="25.1630%" y="1007.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (6 samples, 0.10%)</title><rect x="24.9296%" y="981" width="0.0995%" height="15" fill="rgb(214,114,15)" fg:x="1504" fg:w="6"/><text x="25.1796%" y="991.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.10%)</title><rect x="24.9296%" y="965" width="0.0995%" height="15" fill="rgb(207,130,4)" fg:x="1504" fg:w="6"/><text x="25.1796%" y="975.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="25.0124%" y="949" width="0.0166%" height="15" fill="rgb(221,25,40)" fg:x="1509" fg:w="1"/><text x="25.2624%" y="959.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="25.0290%" y="1029" width="0.0166%" height="15" fill="rgb(241,184,7)" fg:x="1510" fg:w="1"/><text x="25.2790%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="25.0290%" y="1013" width="0.0166%" height="15" fill="rgb(235,159,4)" fg:x="1510" fg:w="1"/><text x="25.2790%" y="1023.50"></text></g><g><title>leveldb::LookupKey::LookupKey (1 samples, 0.02%)</title><rect x="25.0456%" y="1013" width="0.0166%" height="15" fill="rgb(214,87,48)" fg:x="1511" fg:w="1"/><text x="25.2956%" y="1023.50"></text></g><g><title>leveldb::LookupKey::LookupKey (1 samples, 0.02%)</title><rect x="25.0456%" y="997" width="0.0166%" height="15" fill="rgb(246,198,24)" fg:x="1511" fg:w="1"/><text x="25.2956%" y="1007.50"></text></g><g><title>leveldb::MemTable::Get (1 samples, 0.02%)</title><rect x="25.0622%" y="1013" width="0.0166%" height="15" fill="rgb(209,66,40)" fg:x="1512" fg:w="1"/><text x="25.3122%" y="1023.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="25.0787%" y="1013" width="0.0166%" height="15" fill="rgb(233,147,39)" fg:x="1513" fg:w="1"/><text x="25.3287%" y="1023.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="25.0953%" y="997" width="0.0166%" height="15" fill="rgb(231,145,52)" fg:x="1514" fg:w="1"/><text x="25.3453%" y="1007.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.12%)</title><rect x="25.1285%" y="981" width="0.1160%" height="15" fill="rgb(206,20,26)" fg:x="1516" fg:w="7"/><text x="25.3785%" y="991.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.03%)</title><rect x="25.2113%" y="965" width="0.0332%" height="15" fill="rgb(238,220,4)" fg:x="1521" fg:w="2"/><text x="25.4613%" y="975.50"></text></g><g><title>leveldb::FindFile (5 samples, 0.08%)</title><rect x="25.2445%" y="981" width="0.0829%" height="15" fill="rgb(252,195,42)" fg:x="1523" fg:w="5"/><text x="25.4945%" y="991.50"></text></g><g><title>leveldb::InternalKey::Encode (1 samples, 0.02%)</title><rect x="25.3108%" y="965" width="0.0166%" height="15" fill="rgb(209,10,6)" fg:x="1527" fg:w="1"/><text x="25.5608%" y="975.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty (1 samples, 0.02%)</title><rect x="25.3108%" y="949" width="0.0166%" height="15" fill="rgb(229,3,52)" fg:x="1527" fg:w="1"/><text x="25.5608%" y="959.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="25.3108%" y="933" width="0.0166%" height="15" fill="rgb(253,49,37)" fg:x="1527" fg:w="1"/><text x="25.5608%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6 samples, 0.10%)</title><rect x="25.3771%" y="965" width="0.0995%" height="15" fill="rgb(240,103,49)" fg:x="1531" fg:w="6"/><text x="25.6271%" y="975.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="25.4600%" y="949" width="0.0166%" height="15" fill="rgb(250,182,30)" fg:x="1536" fg:w="1"/><text x="25.7100%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.18%)</title><rect x="25.3274%" y="981" width="0.1823%" height="15" fill="rgb(248,8,30)" fg:x="1528" fg:w="11"/><text x="25.5774%" y="991.50"></text></g><g><title>leveldb::FindFile (2 samples, 0.03%)</title><rect x="25.4765%" y="965" width="0.0332%" height="15" fill="rgb(237,120,30)" fg:x="1537" fg:w="2"/><text x="25.7265%" y="975.50"></text></g><g><title>leveldb::FindFile (26 samples, 0.43%)</title><rect x="25.1119%" y="997" width="0.4310%" height="15" fill="rgb(221,146,34)" fg:x="1515" fg:w="26"/><text x="25.3619%" y="1007.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (2 samples, 0.03%)</title><rect x="25.5097%" y="981" width="0.0332%" height="15" fill="rgb(242,55,13)" fg:x="1539" fg:w="2"/><text x="25.7597%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="25.5428%" y="997" width="0.0166%" height="15" fill="rgb(242,112,31)" fg:x="1541" fg:w="1"/><text x="25.7928%" y="1007.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="25.5760%" y="981" width="0.0166%" height="15" fill="rgb(249,192,27)" fg:x="1543" fg:w="1"/><text x="25.8260%" y="991.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="25.5926%" y="965" width="0.0166%" height="15" fill="rgb(208,204,44)" fg:x="1544" fg:w="1"/><text x="25.8426%" y="975.50"></text></g><g><title>leveldb::Block::Iter::status (1 samples, 0.02%)</title><rect x="25.6091%" y="965" width="0.0166%" height="15" fill="rgb(208,93,54)" fg:x="1545" fg:w="1"/><text x="25.8591%" y="975.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="25.6257%" y="965" width="0.0166%" height="15" fill="rgb(242,1,31)" fg:x="1546" fg:w="1"/><text x="25.8757%" y="975.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="25.6257%" y="949" width="0.0166%" height="15" fill="rgb(241,83,25)" fg:x="1546" fg:w="1"/><text x="25.8757%" y="959.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="25.6257%" y="933" width="0.0166%" height="15" fill="rgb(205,169,50)" fg:x="1546" fg:w="1"/><text x="25.8757%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="25.6257%" y="917" width="0.0166%" height="15" fill="rgb(239,186,37)" fg:x="1546" fg:w="1"/><text x="25.8757%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="25.6257%" y="901" width="0.0166%" height="15" fill="rgb(205,221,10)" fg:x="1546" fg:w="1"/><text x="25.8757%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (49 samples, 0.81%)</title><rect x="25.6589%" y="949" width="0.8122%" height="15" fill="rgb(218,196,15)" fg:x="1548" fg:w="49"/><text x="25.9089%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.12%)</title><rect x="26.4711%" y="949" width="0.1160%" height="15" fill="rgb(218,196,35)" fg:x="1597" fg:w="7"/><text x="26.7211%" y="959.50"></text></g><g><title>leveldb::Slice::compare (5 samples, 0.08%)</title><rect x="26.5042%" y="933" width="0.0829%" height="15" fill="rgb(233,63,24)" fg:x="1599" fg:w="5"/><text x="26.7542%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="26.6037%" y="901" width="0.0166%" height="15" fill="rgb(225,8,4)" fg:x="1605" fg:w="1"/><text x="26.8537%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="26.6037%" y="885" width="0.0166%" height="15" fill="rgb(234,105,35)" fg:x="1605" fg:w="1"/><text x="26.8537%" y="895.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (3 samples, 0.05%)</title><rect x="26.5871%" y="949" width="0.0497%" height="15" fill="rgb(236,21,32)" fg:x="1604" fg:w="3"/><text x="26.8371%" y="959.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="26.6037%" y="933" width="0.0332%" height="15" fill="rgb(228,109,6)" fg:x="1605" fg:w="2"/><text x="26.8537%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="26.6037%" y="917" width="0.0332%" height="15" fill="rgb(229,215,31)" fg:x="1605" fg:w="2"/><text x="26.8537%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="26.6203%" y="901" width="0.0166%" height="15" fill="rgb(221,52,54)" fg:x="1606" fg:w="1"/><text x="26.8703%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="26.6203%" y="885" width="0.0166%" height="15" fill="rgb(252,129,43)" fg:x="1606" fg:w="1"/><text x="26.8703%" y="895.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="26.6203%" y="869" width="0.0166%" height="15" fill="rgb(248,183,27)" fg:x="1606" fg:w="1"/><text x="26.8703%" y="879.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.02%)</title><rect x="26.7860%" y="805" width="0.0166%" height="15" fill="rgb(250,0,22)" fg:x="1616" fg:w="1"/><text x="27.0360%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.7860%" y="789" width="0.0166%" height="15" fill="rgb(213,166,10)" fg:x="1616" fg:w="1"/><text x="27.0360%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.7860%" y="773" width="0.0166%" height="15" fill="rgb(207,163,36)" fg:x="1616" fg:w="1"/><text x="27.0360%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.7860%" y="757" width="0.0166%" height="15" fill="rgb(208,122,22)" fg:x="1616" fg:w="1"/><text x="27.0360%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.7860%" y="741" width="0.0166%" height="15" fill="rgb(207,104,49)" fg:x="1616" fg:w="1"/><text x="27.0360%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.7860%" y="725" width="0.0166%" height="15" fill="rgb(248,211,50)" fg:x="1616" fg:w="1"/><text x="27.0360%" y="735.50"></text></g><g><title>DecodeEntry (2 samples, 0.03%)</title><rect x="26.7860%" y="933" width="0.0332%" height="15" fill="rgb(217,13,45)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="26.7860%" y="917" width="0.0332%" height="15" fill="rgb(211,216,49)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="26.7860%" y="901" width="0.0332%" height="15" fill="rgb(221,58,53)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="26.7860%" y="885" width="0.0332%" height="15" fill="rgb(220,112,41)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="26.7860%" y="869" width="0.0332%" height="15" fill="rgb(236,38,28)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="26.7860%" y="853" width="0.0332%" height="15" fill="rgb(227,195,22)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="26.7860%" y="837" width="0.0332%" height="15" fill="rgb(214,55,33)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="847.50"></text></g><g><title>[[igc]] (2 samples, 0.03%)</title><rect x="26.7860%" y="821" width="0.0332%" height="15" fill="rgb(248,80,13)" fg:x="1616" fg:w="2"/><text x="27.0360%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.8026%" y="805" width="0.0166%" height="15" fill="rgb(238,52,6)" fg:x="1617" fg:w="1"/><text x="27.0526%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.8026%" y="789" width="0.0166%" height="15" fill="rgb(224,198,47)" fg:x="1617" fg:w="1"/><text x="27.0526%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.8026%" y="773" width="0.0166%" height="15" fill="rgb(233,171,20)" fg:x="1617" fg:w="1"/><text x="27.0526%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.8026%" y="757" width="0.0166%" height="15" fill="rgb(241,30,25)" fg:x="1617" fg:w="1"/><text x="27.0526%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.8026%" y="741" width="0.0166%" height="15" fill="rgb(207,171,38)" fg:x="1617" fg:w="1"/><text x="27.0526%" y="751.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="27.1341%" y="917" width="0.0166%" height="15" fill="rgb(234,70,1)" fg:x="1637" fg:w="1"/><text x="27.3841%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="27.1507%" y="901" width="0.0332%" height="15" fill="rgb(232,178,18)" fg:x="1638" fg:w="2"/><text x="27.4007%" y="911.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.03%)</title><rect x="27.1507%" y="885" width="0.0332%" height="15" fill="rgb(241,78,40)" fg:x="1638" fg:w="2"/><text x="27.4007%" y="895.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.03%)</title><rect x="27.1507%" y="869" width="0.0332%" height="15" fill="rgb(222,35,25)" fg:x="1638" fg:w="2"/><text x="27.4007%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Seek (7 samples, 0.12%)</title><rect x="27.1838%" y="901" width="0.1160%" height="15" fill="rgb(207,92,16)" fg:x="1640" fg:w="7"/><text x="27.4338%" y="911.50"></text></g><g><title>leveldb::Block::Iter::Compare (3 samples, 0.05%)</title><rect x="27.2501%" y="885" width="0.0497%" height="15" fill="rgb(216,59,51)" fg:x="1644" fg:w="3"/><text x="27.5001%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="27.2999%" y="901" width="0.0497%" height="15" fill="rgb(213,80,28)" fg:x="1647" fg:w="3"/><text x="27.5499%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (13 samples, 0.22%)</title><rect x="27.1507%" y="917" width="0.2155%" height="15" fill="rgb(220,93,7)" fg:x="1638" fg:w="13"/><text x="27.4007%" y="927.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="27.3496%" y="901" width="0.0166%" height="15" fill="rgb(225,24,44)" fg:x="1650" fg:w="1"/><text x="27.5996%" y="911.50"></text></g><g><title>leveldb::Block::Iter::Compare (34 samples, 0.56%)</title><rect x="26.8192%" y="933" width="0.5636%" height="15" fill="rgb(243,74,40)" fg:x="1618" fg:w="34"/><text x="27.0692%" y="943.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="27.3662%" y="917" width="0.0166%" height="15" fill="rgb(228,39,7)" fg:x="1651" fg:w="1"/><text x="27.6162%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="27.4159%" y="885" width="0.0332%" height="15" fill="rgb(227,79,8)" fg:x="1654" fg:w="2"/><text x="27.6659%" y="895.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.03%)</title><rect x="27.4159%" y="869" width="0.0332%" height="15" fill="rgb(236,58,11)" fg:x="1654" fg:w="2"/><text x="27.6659%" y="879.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="27.4159%" y="853" width="0.0332%" height="15" fill="rgb(249,63,35)" fg:x="1654" fg:w="2"/><text x="27.6659%" y="863.50"></text></g><g><title>DecodeEntry (1 samples, 0.02%)</title><rect x="27.4490%" y="869" width="0.0166%" height="15" fill="rgb(252,114,16)" fg:x="1656" fg:w="1"/><text x="27.6990%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="27.4656%" y="869" width="0.0166%" height="15" fill="rgb(254,151,24)" fg:x="1657" fg:w="1"/><text x="27.7156%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (5 samples, 0.08%)</title><rect x="27.4822%" y="869" width="0.0829%" height="15" fill="rgb(253,54,39)" fg:x="1658" fg:w="5"/><text x="27.7322%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (5 samples, 0.08%)</title><rect x="27.4822%" y="853" width="0.0829%" height="15" fill="rgb(243,25,45)" fg:x="1658" fg:w="5"/><text x="27.7322%" y="863.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (8 samples, 0.13%)</title><rect x="27.4490%" y="885" width="0.1326%" height="15" fill="rgb(234,134,9)" fg:x="1656" fg:w="8"/><text x="27.6990%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="27.5651%" y="869" width="0.0166%" height="15" fill="rgb(227,166,31)" fg:x="1663" fg:w="1"/><text x="27.8151%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="27.5651%" y="853" width="0.0166%" height="15" fill="rgb(245,143,41)" fg:x="1663" fg:w="1"/><text x="27.8151%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="27.5816%" y="885" width="0.0497%" height="15" fill="rgb(238,181,32)" fg:x="1664" fg:w="3"/><text x="27.8316%" y="895.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="27.6148%" y="869" width="0.0166%" height="15" fill="rgb(224,113,18)" fg:x="1666" fg:w="1"/><text x="27.8648%" y="879.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="27.6148%" y="853" width="0.0166%" height="15" fill="rgb(240,229,28)" fg:x="1666" fg:w="1"/><text x="27.8648%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Compare (16 samples, 0.27%)</title><rect x="27.3993%" y="917" width="0.2652%" height="15" fill="rgb(250,185,3)" fg:x="1653" fg:w="16"/><text x="27.6493%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.25%)</title><rect x="27.4159%" y="901" width="0.2486%" height="15" fill="rgb(212,59,25)" fg:x="1654" fg:w="15"/><text x="27.6659%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.03%)</title><rect x="27.6314%" y="885" width="0.0332%" height="15" fill="rgb(221,87,20)" fg:x="1667" fg:w="2"/><text x="27.8814%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="27.6479%" y="869" width="0.0166%" height="15" fill="rgb(213,74,28)" fg:x="1668" fg:w="1"/><text x="27.8979%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1 samples, 0.02%)</title><rect x="27.6479%" y="853" width="0.0166%" height="15" fill="rgb(224,132,34)" fg:x="1668" fg:w="1"/><text x="27.8979%" y="863.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="27.6479%" y="837" width="0.0166%" height="15" fill="rgb(222,101,24)" fg:x="1668" fg:w="1"/><text x="27.8979%" y="847.50"></text></g><g><title>std::allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="27.6479%" y="821" width="0.0166%" height="15" fill="rgb(254,142,4)" fg:x="1668" fg:w="1"/><text x="27.8979%" y="831.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="27.6479%" y="805" width="0.0166%" height="15" fill="rgb(230,229,49)" fg:x="1668" fg:w="1"/><text x="27.8979%" y="815.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="27.6645%" y="869" width="0.0166%" height="15" fill="rgb(238,70,47)" fg:x="1669" fg:w="1"/><text x="27.9145%" y="879.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="27.6645%" y="853" width="0.0166%" height="15" fill="rgb(231,160,17)" fg:x="1669" fg:w="1"/><text x="27.9145%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="27.6811%" y="869" width="0.0166%" height="15" fill="rgb(218,68,53)" fg:x="1670" fg:w="1"/><text x="27.9311%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="27.6811%" y="853" width="0.0166%" height="15" fill="rgb(236,111,10)" fg:x="1670" fg:w="1"/><text x="27.9311%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="27.6977%" y="869" width="0.0332%" height="15" fill="rgb(224,34,41)" fg:x="1671" fg:w="2"/><text x="27.9477%" y="879.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="27.7142%" y="853" width="0.0166%" height="15" fill="rgb(241,118,19)" fg:x="1672" fg:w="1"/><text x="27.9642%" y="863.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (5 samples, 0.08%)</title><rect x="27.6645%" y="917" width="0.0829%" height="15" fill="rgb(238,129,25)" fg:x="1669" fg:w="5"/><text x="27.9145%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (5 samples, 0.08%)</title><rect x="27.6645%" y="901" width="0.0829%" height="15" fill="rgb(238,22,31)" fg:x="1669" fg:w="5"/><text x="27.9145%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (5 samples, 0.08%)</title><rect x="27.6645%" y="885" width="0.0829%" height="15" fill="rgb(222,174,48)" fg:x="1669" fg:w="5"/><text x="27.9145%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="27.7308%" y="869" width="0.0166%" height="15" fill="rgb(206,152,40)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="27.7308%" y="853" width="0.0166%" height="15" fill="rgb(218,99,54)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1 samples, 0.02%)</title><rect x="27.7308%" y="837" width="0.0166%" height="15" fill="rgb(220,174,26)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="847.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="27.7308%" y="821" width="0.0166%" height="15" fill="rgb(245,116,9)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="831.50"></text></g><g><title>std::allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="27.7308%" y="805" width="0.0166%" height="15" fill="rgb(209,72,35)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="815.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="27.7308%" y="789" width="0.0166%" height="15" fill="rgb(226,126,21)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="799.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="27.7308%" y="773" width="0.0166%" height="15" fill="rgb(227,192,1)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="783.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="27.7308%" y="757" width="0.0166%" height="15" fill="rgb(237,180,29)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="767.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="27.7308%" y="741" width="0.0166%" height="15" fill="rgb(230,197,35)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="725" width="0.0166%" height="15" fill="rgb(246,193,31)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="709" width="0.0166%" height="15" fill="rgb(241,36,4)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="693" width="0.0166%" height="15" fill="rgb(241,130,17)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="677" width="0.0166%" height="15" fill="rgb(206,137,32)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="661" width="0.0166%" height="15" fill="rgb(237,228,51)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="645" width="0.0166%" height="15" fill="rgb(243,6,42)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="629" width="0.0166%" height="15" fill="rgb(251,74,28)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="613" width="0.0166%" height="15" fill="rgb(218,20,49)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="597" width="0.0166%" height="15" fill="rgb(238,28,14)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="581" width="0.0166%" height="15" fill="rgb(229,40,46)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="565" width="0.0166%" height="15" fill="rgb(244,195,20)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.7308%" y="549" width="0.0166%" height="15" fill="rgb(253,56,35)" fg:x="1673" fg:w="1"/><text x="27.9808%" y="559.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.03%)</title><rect x="27.7474%" y="917" width="0.0332%" height="15" fill="rgb(210,149,44)" fg:x="1674" fg:w="2"/><text x="27.9974%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Seek (71 samples, 1.18%)</title><rect x="26.6368%" y="949" width="1.1769%" height="15" fill="rgb(240,135,12)" fg:x="1607" fg:w="71"/><text x="26.8868%" y="959.50"></text></g><g><title>leveldb::Block::Iter::Seek (26 samples, 0.43%)</title><rect x="27.3827%" y="933" width="0.4310%" height="15" fill="rgb(251,24,50)" fg:x="1652" fg:w="26"/><text x="27.6327%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="27.7805%" y="917" width="0.0332%" height="15" fill="rgb(243,200,47)" fg:x="1676" fg:w="2"/><text x="28.0305%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="27.8137%" y="949" width="0.0166%" height="15" fill="rgb(224,166,26)" fg:x="1678" fg:w="1"/><text x="28.0637%" y="959.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="27.8303%" y="949" width="0.0166%" height="15" fill="rgb(233,0,47)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="959.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="27.8303%" y="933" width="0.0166%" height="15" fill="rgb(253,80,5)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="943.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="27.8303%" y="917" width="0.0166%" height="15" fill="rgb(214,133,25)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="927.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="27.8303%" y="901" width="0.0166%" height="15" fill="rgb(209,27,14)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="911.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (1 samples, 0.02%)</title><rect x="27.8303%" y="885" width="0.0166%" height="15" fill="rgb(219,102,51)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="895.50"></text></g><g><title>SaveValue (1 samples, 0.02%)</title><rect x="27.8303%" y="869" width="0.0166%" height="15" fill="rgb(237,18,16)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="27.8303%" y="853" width="0.0166%" height="15" fill="rgb(241,85,17)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="27.8303%" y="837" width="0.0166%" height="15" fill="rgb(236,90,42)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="27.8303%" y="821" width="0.0166%" height="15" fill="rgb(249,57,21)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="27.8303%" y="805" width="0.0166%" height="15" fill="rgb(243,12,36)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1 samples, 0.02%)</title><rect x="27.8303%" y="789" width="0.0166%" height="15" fill="rgb(253,128,47)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="799.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="27.8303%" y="773" width="0.0166%" height="15" fill="rgb(207,33,20)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="783.50"></text></g><g><title>std::allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="27.8303%" y="757" width="0.0166%" height="15" fill="rgb(233,215,35)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="767.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="27.8303%" y="741" width="0.0166%" height="15" fill="rgb(249,188,52)" fg:x="1679" fg:w="1"/><text x="28.0803%" y="751.50"></text></g><g><title>leveldb::Block::Iter::Iter (3 samples, 0.05%)</title><rect x="27.8634%" y="933" width="0.0497%" height="15" fill="rgb(225,12,32)" fg:x="1681" fg:w="3"/><text x="28.1134%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="27.8966%" y="917" width="0.0166%" height="15" fill="rgb(247,98,14)" fg:x="1683" fg:w="1"/><text x="28.1466%" y="927.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="27.8966%" y="901" width="0.0166%" height="15" fill="rgb(247,219,48)" fg:x="1683" fg:w="1"/><text x="28.1466%" y="911.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="27.8966%" y="885" width="0.0166%" height="15" fill="rgb(253,60,48)" fg:x="1683" fg:w="1"/><text x="28.1466%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="27.8966%" y="869" width="0.0166%" height="15" fill="rgb(245,15,52)" fg:x="1683" fg:w="1"/><text x="28.1466%" y="879.50"></text></g><g><title>leveldb::Block::NewIterator (5 samples, 0.08%)</title><rect x="27.8468%" y="949" width="0.0829%" height="15" fill="rgb(220,133,28)" fg:x="1680" fg:w="5"/><text x="28.0968%" y="959.50"></text></g><g><title>leveldb::Block::NumRestarts (1 samples, 0.02%)</title><rect x="27.9131%" y="933" width="0.0166%" height="15" fill="rgb(217,180,4)" fg:x="1684" fg:w="1"/><text x="28.1631%" y="943.50"></text></g><g><title>leveldb::DecodeFixed32 (1 samples, 0.02%)</title><rect x="27.9131%" y="917" width="0.0166%" height="15" fill="rgb(251,24,1)" fg:x="1684" fg:w="1"/><text x="28.1631%" y="927.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="27.9131%" y="901" width="0.0166%" height="15" fill="rgb(212,185,49)" fg:x="1684" fg:w="1"/><text x="28.1631%" y="911.50"></text></g><g><title>leveldb::GetVarint64 (2 samples, 0.03%)</title><rect x="27.9297%" y="949" width="0.0332%" height="15" fill="rgb(215,175,22)" fg:x="1685" fg:w="2"/><text x="28.1797%" y="959.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.02%)</title><rect x="27.9629%" y="949" width="0.0166%" height="15" fill="rgb(250,205,14)" fg:x="1687" fg:w="1"/><text x="28.2129%" y="959.50"></text></g><g><title>leveldb::Hash (2 samples, 0.03%)</title><rect x="27.9794%" y="949" width="0.0332%" height="15" fill="rgb(225,211,22)" fg:x="1688" fg:w="2"/><text x="28.2294%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (13 samples, 0.22%)</title><rect x="28.0126%" y="949" width="0.2155%" height="15" fill="rgb(251,179,42)" fg:x="1690" fg:w="13"/><text x="28.2626%" y="959.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="28.2115%" y="933" width="0.0166%" height="15" fill="rgb(208,216,51)" fg:x="1702" fg:w="1"/><text x="28.4615%" y="943.50"></text></g><g><title>leveldb::Iterator::Iterator (1 samples, 0.02%)</title><rect x="28.2281%" y="949" width="0.0166%" height="15" fill="rgb(235,36,11)" fg:x="1703" fg:w="1"/><text x="28.4781%" y="959.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="28.2447%" y="933" width="0.0332%" height="15" fill="rgb(213,189,28)" fg:x="1704" fg:w="2"/><text x="28.4947%" y="943.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="28.2612%" y="917" width="0.0166%" height="15" fill="rgb(227,203,42)" fg:x="1705" fg:w="1"/><text x="28.5112%" y="927.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (1 samples, 0.02%)</title><rect x="28.2778%" y="933" width="0.0166%" height="15" fill="rgb(244,72,36)" fg:x="1706" fg:w="1"/><text x="28.5278%" y="943.50"></text></g><g><title>leveldb::GetVarint64Ptr (3 samples, 0.05%)</title><rect x="28.2944%" y="933" width="0.0497%" height="15" fill="rgb(213,53,17)" fg:x="1707" fg:w="3"/><text x="28.5444%" y="943.50"></text></g><g><title>leveldb::crc32c::Unmask (62 samples, 1.03%)</title><rect x="28.3441%" y="917" width="1.0277%" height="15" fill="rgb(207,167,3)" fg:x="1710" fg:w="62"/><text x="28.5941%" y="927.50"></text></g><g><title>[unknown] (62 samples, 1.03%)</title><rect x="28.3441%" y="901" width="1.0277%" height="15" fill="rgb(216,98,30)" fg:x="1710" fg:w="62"/><text x="28.5941%" y="911.50"></text></g><g><title>[unknown] (61 samples, 1.01%)</title><rect x="28.3607%" y="885" width="1.0111%" height="15" fill="rgb(236,123,15)" fg:x="1711" fg:w="61"/><text x="28.6107%" y="895.50"></text></g><g><title>[unknown] (61 samples, 1.01%)</title><rect x="28.3607%" y="869" width="1.0111%" height="15" fill="rgb(248,81,50)" fg:x="1711" fg:w="61"/><text x="28.6107%" y="879.50"></text></g><g><title>[unknown] (58 samples, 0.96%)</title><rect x="28.4104%" y="853" width="0.9614%" height="15" fill="rgb(214,120,4)" fg:x="1714" fg:w="58"/><text x="28.6604%" y="863.50"></text></g><g><title>[unknown] (55 samples, 0.91%)</title><rect x="28.4601%" y="837" width="0.9117%" height="15" fill="rgb(208,179,34)" fg:x="1717" fg:w="55"/><text x="28.7101%" y="847.50"></text></g><g><title>[unknown] (51 samples, 0.85%)</title><rect x="28.5264%" y="821" width="0.8454%" height="15" fill="rgb(227,140,7)" fg:x="1721" fg:w="51"/><text x="28.7764%" y="831.50"></text></g><g><title>[unknown] (49 samples, 0.81%)</title><rect x="28.5596%" y="805" width="0.8122%" height="15" fill="rgb(214,22,6)" fg:x="1723" fg:w="49"/><text x="28.8096%" y="815.50"></text></g><g><title>[unknown] (37 samples, 0.61%)</title><rect x="28.7585%" y="789" width="0.6133%" height="15" fill="rgb(207,137,27)" fg:x="1735" fg:w="37"/><text x="29.0085%" y="799.50"></text></g><g><title>[unknown] (26 samples, 0.43%)</title><rect x="28.9408%" y="773" width="0.4310%" height="15" fill="rgb(210,8,46)" fg:x="1746" fg:w="26"/><text x="29.1908%" y="783.50"></text></g><g><title>[unknown] (16 samples, 0.27%)</title><rect x="29.1066%" y="757" width="0.2652%" height="15" fill="rgb(240,16,54)" fg:x="1756" fg:w="16"/><text x="29.3566%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="29.2392%" y="741" width="0.1326%" height="15" fill="rgb(211,209,29)" fg:x="1764" fg:w="8"/><text x="29.4892%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3221%" y="725" width="0.0497%" height="15" fill="rgb(226,228,24)" fg:x="1769" fg:w="3"/><text x="29.5721%" y="735.50"></text></g><g><title>crc32c::Extend (1 samples, 0.02%)</title><rect x="29.3718%" y="901" width="0.0166%" height="15" fill="rgb(222,84,9)" fg:x="1772" fg:w="1"/><text x="29.6218%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="885" width="0.0166%" height="15" fill="rgb(234,203,30)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="869" width="0.0166%" height="15" fill="rgb(238,109,14)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="853" width="0.0166%" height="15" fill="rgb(233,206,34)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="837" width="0.0166%" height="15" fill="rgb(220,167,47)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="821" width="0.0166%" height="15" fill="rgb(238,105,10)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="805" width="0.0166%" height="15" fill="rgb(213,227,17)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="815.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="30.3663%" y="789" width="0.0166%" height="15" fill="rgb(217,132,38)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="773" width="0.0166%" height="15" fill="rgb(242,146,4)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="757" width="0.0166%" height="15" fill="rgb(212,61,9)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="741" width="0.0166%" height="15" fill="rgb(247,126,22)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="725" width="0.0166%" height="15" fill="rgb(220,196,2)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="709" width="0.0166%" height="15" fill="rgb(208,46,4)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="693" width="0.0166%" height="15" fill="rgb(252,104,46)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="677" width="0.0166%" height="15" fill="rgb(237,152,48)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="661" width="0.0166%" height="15" fill="rgb(221,59,37)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="645" width="0.0166%" height="15" fill="rgb(209,202,51)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="629" width="0.0166%" height="15" fill="rgb(228,81,30)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="613" width="0.0166%" height="15" fill="rgb(227,42,39)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="597" width="0.0166%" height="15" fill="rgb(221,26,2)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="581" width="0.0166%" height="15" fill="rgb(254,61,31)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="565" width="0.0166%" height="15" fill="rgb(222,173,38)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.3663%" y="549" width="0.0166%" height="15" fill="rgb(218,50,12)" fg:x="1832" fg:w="1"/><text x="30.6163%" y="559.50"></text></g><g><title>_mm_crc32_u64 (59 samples, 0.98%)</title><rect x="30.3829%" y="885" width="0.9780%" height="15" fill="rgb(223,88,40)" fg:x="1833" fg:w="59"/><text x="30.6329%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="869" width="0.0166%" height="15" fill="rgb(237,54,19)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="853" width="0.0166%" height="15" fill="rgb(251,129,25)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="837" width="0.0166%" height="15" fill="rgb(238,97,19)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="821" width="0.0166%" height="15" fill="rgb(240,169,18)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="805" width="0.0166%" height="15" fill="rgb(230,187,49)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="789" width="0.0166%" height="15" fill="rgb(209,44,26)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="799.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="31.3443%" y="773" width="0.0166%" height="15" fill="rgb(244,0,6)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="757" width="0.0166%" height="15" fill="rgb(248,18,21)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="741" width="0.0166%" height="15" fill="rgb(245,180,19)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="725" width="0.0166%" height="15" fill="rgb(252,118,36)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="709" width="0.0166%" height="15" fill="rgb(210,224,19)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="693" width="0.0166%" height="15" fill="rgb(218,30,24)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="677" width="0.0166%" height="15" fill="rgb(219,75,50)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="661" width="0.0166%" height="15" fill="rgb(234,72,50)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="645" width="0.0166%" height="15" fill="rgb(219,100,48)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="629" width="0.0166%" height="15" fill="rgb(253,5,41)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3443%" y="613" width="0.0166%" height="15" fill="rgb(247,181,11)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="623.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="31.3443%" y="597" width="0.0166%" height="15" fill="rgb(222,223,25)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="607.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="31.3443%" y="581" width="0.0166%" height="15" fill="rgb(214,198,28)" fg:x="1891" fg:w="1"/><text x="31.5943%" y="591.50"></text></g><g><title>crc32c::ExtendSse42 (122 samples, 2.02%)</title><rect x="29.3884%" y="901" width="2.0222%" height="15" fill="rgb(230,46,43)" fg:x="1773" fg:w="122"/><text x="29.6384%" y="911.50">c..</text></g><g><title>_mm_crc32_u8 (3 samples, 0.05%)</title><rect x="31.3608%" y="885" width="0.0497%" height="15" fill="rgb(233,65,53)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.3608%" y="869" width="0.0497%" height="15" fill="rgb(221,121,27)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.3608%" y="853" width="0.0497%" height="15" fill="rgb(247,70,47)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.3608%" y="837" width="0.0497%" height="15" fill="rgb(228,85,35)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.3608%" y="821" width="0.0497%" height="15" fill="rgb(209,50,18)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.3608%" y="805" width="0.0497%" height="15" fill="rgb(250,19,35)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.3608%" y="789" width="0.0497%" height="15" fill="rgb(253,107,29)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.3608%" y="773" width="0.0497%" height="15" fill="rgb(252,179,29)" fg:x="1892" fg:w="3"/><text x="31.6108%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="31.3774%" y="757" width="0.0332%" height="15" fill="rgb(238,194,6)" fg:x="1893" fg:w="2"/><text x="31.6274%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="31.3774%" y="741" width="0.0332%" height="15" fill="rgb(238,164,29)" fg:x="1893" fg:w="2"/><text x="31.6274%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3940%" y="725" width="0.0166%" height="15" fill="rgb(224,25,9)" fg:x="1894" fg:w="1"/><text x="31.6440%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3940%" y="709" width="0.0166%" height="15" fill="rgb(244,153,23)" fg:x="1894" fg:w="1"/><text x="31.6440%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.3940%" y="693" width="0.0166%" height="15" fill="rgb(212,203,14)" fg:x="1894" fg:w="1"/><text x="31.6440%" y="703.50"></text></g><g><title>leveldb::ReadBlock (186 samples, 3.08%)</title><rect x="28.3441%" y="933" width="3.0830%" height="15" fill="rgb(220,164,20)" fg:x="1710" fg:w="186"/><text x="28.5941%" y="943.50">lev..</text></g><g><title>leveldb::crc32c::Value (124 samples, 2.06%)</title><rect x="29.3718%" y="917" width="2.0554%" height="15" fill="rgb(222,203,48)" fg:x="1772" fg:w="124"/><text x="29.6218%" y="927.50">l..</text></g><g><title>leveldb::crc32c::Extend (1 samples, 0.02%)</title><rect x="31.4106%" y="901" width="0.0166%" height="15" fill="rgb(215,159,22)" fg:x="1895" fg:w="1"/><text x="31.6606%" y="911.50"></text></g><g><title>leveldb::Table::BlockReader (3 samples, 0.05%)</title><rect x="31.4272%" y="933" width="0.0497%" height="15" fill="rgb(216,183,47)" fg:x="1896" fg:w="3"/><text x="31.6772%" y="943.50"></text></g><g><title>leveldb::Table::BlockReader (196 samples, 3.25%)</title><rect x="28.2447%" y="949" width="3.2488%" height="15" fill="rgb(229,195,25)" fg:x="1704" fg:w="196"/><text x="28.4947%" y="959.50">lev..</text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="31.4769%" y="933" width="0.0166%" height="15" fill="rgb(224,132,51)" fg:x="1899" fg:w="1"/><text x="31.7269%" y="943.50"></text></g><g><title>leveldb::Table::InternalGet (2 samples, 0.03%)</title><rect x="31.4935%" y="949" width="0.0332%" height="15" fill="rgb(240,63,7)" fg:x="1900" fg:w="2"/><text x="31.7435%" y="959.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.02%)</title><rect x="31.5266%" y="949" width="0.0166%" height="15" fill="rgb(249,182,41)" fg:x="1902" fg:w="1"/><text x="31.7766%" y="959.50"></text></g><g><title>leveldb::Table::InternalGet (357 samples, 5.92%)</title><rect x="25.6423%" y="965" width="5.9175%" height="15" fill="rgb(243,47,26)" fg:x="1547" fg:w="357"/><text x="25.8923%" y="975.50">leveldb:..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="31.5432%" y="949" width="0.0166%" height="15" fill="rgb(233,48,2)" fg:x="1903" fg:w="1"/><text x="31.7932%" y="959.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="31.5598%" y="949" width="0.0166%" height="15" fill="rgb(244,165,34)" fg:x="1904" fg:w="1"/><text x="31.8098%" y="959.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="31.5598%" y="933" width="0.0166%" height="15" fill="rgb(207,89,7)" fg:x="1904" fg:w="1"/><text x="31.8098%" y="943.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="31.5598%" y="917" width="0.0166%" height="15" fill="rgb(244,117,36)" fg:x="1904" fg:w="1"/><text x="31.8098%" y="927.50"></text></g><g><title>FindPointer (1 samples, 0.02%)</title><rect x="31.5598%" y="901" width="0.0166%" height="15" fill="rgb(226,144,34)" fg:x="1904" fg:w="1"/><text x="31.8098%" y="911.50"></text></g><g><title>leveldb::operator!= (1 samples, 0.02%)</title><rect x="31.5598%" y="885" width="0.0166%" height="15" fill="rgb(213,23,19)" fg:x="1904" fg:w="1"/><text x="31.8098%" y="895.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="31.5598%" y="869" width="0.0166%" height="15" fill="rgb(217,75,12)" fg:x="1904" fg:w="1"/><text x="31.8098%" y="879.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.02%)</title><rect x="31.5598%" y="853" width="0.0166%" height="15" fill="rgb(224,159,17)" fg:x="1904" fg:w="1"/><text x="31.8098%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="31.5763%" y="949" width="0.0166%" height="15" fill="rgb(217,118,1)" fg:x="1905" fg:w="1"/><text x="31.8263%" y="959.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="31.5763%" y="933" width="0.0166%" height="15" fill="rgb(232,180,48)" fg:x="1905" fg:w="1"/><text x="31.8263%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="31.5929%" y="949" width="0.0166%" height="15" fill="rgb(230,27,33)" fg:x="1906" fg:w="1"/><text x="31.8429%" y="959.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="31.6095%" y="949" width="0.0166%" height="15" fill="rgb(205,31,21)" fg:x="1907" fg:w="1"/><text x="31.8595%" y="959.50"></text></g><g><title>leveldb::Table::Open (1 samples, 0.02%)</title><rect x="31.6261%" y="949" width="0.0166%" height="15" fill="rgb(253,59,4)" fg:x="1908" fg:w="1"/><text x="31.8761%" y="959.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="31.6261%" y="933" width="0.0166%" height="15" fill="rgb(224,201,9)" fg:x="1908" fg:w="1"/><text x="31.8761%" y="943.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="31.6261%" y="917" width="0.0166%" height="15" fill="rgb(229,206,30)" fg:x="1908" fg:w="1"/><text x="31.8761%" y="927.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="31.6261%" y="901" width="0.0166%" height="15" fill="rgb(212,67,47)" fg:x="1908" fg:w="1"/><text x="31.8761%" y="911.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="31.6261%" y="885" width="0.0166%" height="15" fill="rgb(211,96,50)" fg:x="1908" fg:w="1"/><text x="31.8761%" y="895.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.02%)</title><rect x="31.6426%" y="949" width="0.0166%" height="15" fill="rgb(252,114,18)" fg:x="1909" fg:w="1"/><text x="31.8926%" y="959.50"></text></g><g><title>leveldb::Version::Get (400 samples, 6.63%)</title><rect x="25.0456%" y="1029" width="6.6302%" height="15" fill="rgb(223,58,37)" fg:x="1511" fg:w="400"/><text x="25.2956%" y="1039.50">leveldb::..</text></g><g><title>leveldb::Version::ForEachOverlapping (397 samples, 6.58%)</title><rect x="25.0953%" y="1013" width="6.5805%" height="15" fill="rgb(237,70,4)" fg:x="1514" fg:w="397"/><text x="25.3453%" y="1023.50">leveldb::..</text></g><g><title>leveldb::Version::Get (369 samples, 6.12%)</title><rect x="25.5594%" y="997" width="6.1164%" height="15" fill="rgb(244,85,46)" fg:x="1542" fg:w="369"/><text x="25.8094%" y="1007.50">leveldb:..</text></g><g><title>leveldb::TableCache::Get (367 samples, 6.08%)</title><rect x="25.5926%" y="981" width="6.0832%" height="15" fill="rgb(223,39,52)" fg:x="1544" fg:w="367"/><text x="25.8426%" y="991.50">leveldb:..</text></g><g><title>leveldb::TableCache::FindTable (7 samples, 0.12%)</title><rect x="31.5598%" y="965" width="0.1160%" height="15" fill="rgb(218,200,14)" fg:x="1904" fg:w="7"/><text x="31.8098%" y="975.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.02%)</title><rect x="31.6592%" y="949" width="0.0166%" height="15" fill="rgb(208,171,16)" fg:x="1910" fg:w="1"/><text x="31.9092%" y="959.50"></text></g><g><title>leveldb::DBImpl::Get (412 samples, 6.83%)</title><rect x="24.8633%" y="1045" width="6.8291%" height="15" fill="rgb(234,200,18)" fg:x="1500" fg:w="412"/><text x="25.1133%" y="1055.50">leveldb::..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="31.6758%" y="1029" width="0.0166%" height="15" fill="rgb(228,45,11)" fg:x="1911" fg:w="1"/><text x="31.9258%" y="1039.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.02%)</title><rect x="31.6924%" y="1045" width="0.0166%" height="15" fill="rgb(237,182,11)" fg:x="1912" fg:w="1"/><text x="31.9424%" y="1055.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="31.6924%" y="1029" width="0.0166%" height="15" fill="rgb(241,175,49)" fg:x="1912" fg:w="1"/><text x="31.9424%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="31.6924%" y="1013" width="0.0166%" height="15" fill="rgb(247,38,35)" fg:x="1912" fg:w="1"/><text x="31.9424%" y="1023.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (415 samples, 6.88%)</title><rect x="24.8633%" y="1061" width="6.8788%" height="15" fill="rgb(228,39,49)" fg:x="1500" fg:w="415"/><text x="25.1133%" y="1071.50">CDBWrappe..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="31.7089%" y="1045" width="0.0332%" height="15" fill="rgb(226,101,26)" fg:x="1913" fg:w="2"/><text x="31.9589%" y="1055.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="31.7255%" y="1029" width="0.0166%" height="15" fill="rgb(206,141,19)" fg:x="1914" fg:w="1"/><text x="31.9755%" y="1039.50"></text></g><g><title>CCoinsViewDB::GetCoin (416 samples, 6.90%)</title><rect x="24.8633%" y="1077" width="6.8954%" height="15" fill="rgb(211,200,13)" fg:x="1500" fg:w="416"/><text x="25.1133%" y="1087.50">CCoinsVie..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="31.7421%" y="1061" width="0.0166%" height="15" fill="rgb(241,121,6)" fg:x="1915" fg:w="1"/><text x="31.9921%" y="1071.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="31.7421%" y="1045" width="0.0166%" height="15" fill="rgb(234,221,29)" fg:x="1915" fg:w="1"/><text x="31.9921%" y="1055.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="31.7587%" y="869" width="0.0332%" height="15" fill="rgb(229,136,5)" fg:x="1916" fg:w="2"/><text x="32.0087%" y="879.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.03%)</title><rect x="31.7587%" y="853" width="0.0332%" height="15" fill="rgb(238,36,11)" fg:x="1916" fg:w="2"/><text x="32.0087%" y="863.50"></text></g><g><title>DataStream::Xor (2 samples, 0.03%)</title><rect x="31.7587%" y="837" width="0.0332%" height="15" fill="rgb(251,55,41)" fg:x="1916" fg:w="2"/><text x="32.0087%" y="847.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="31.7587%" y="821" width="0.0332%" height="15" fill="rgb(242,34,40)" fg:x="1916" fg:w="2"/><text x="32.0087%" y="831.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="31.7752%" y="805" width="0.0166%" height="15" fill="rgb(215,42,17)" fg:x="1917" fg:w="1"/><text x="32.0252%" y="815.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="31.7752%" y="789" width="0.0166%" height="15" fill="rgb(207,44,46)" fg:x="1917" fg:w="1"/><text x="32.0252%" y="799.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="31.7918%" y="773" width="0.0166%" height="15" fill="rgb(211,206,28)" fg:x="1918" fg:w="1"/><text x="32.0418%" y="783.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="31.7918%" y="757" width="0.0166%" height="15" fill="rgb(237,167,16)" fg:x="1918" fg:w="1"/><text x="32.0418%" y="767.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="31.7918%" y="741" width="0.0166%" height="15" fill="rgb(233,66,6)" fg:x="1918" fg:w="1"/><text x="32.0418%" y="751.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="31.7918%" y="725" width="0.0166%" height="15" fill="rgb(246,123,29)" fg:x="1918" fg:w="1"/><text x="32.0418%" y="735.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="31.7918%" y="709" width="0.0166%" height="15" fill="rgb(209,62,40)" fg:x="1918" fg:w="1"/><text x="32.0418%" y="719.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="31.7918%" y="693" width="0.0166%" height="15" fill="rgb(218,4,25)" fg:x="1918" fg:w="1"/><text x="32.0418%" y="703.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="31.7918%" y="677" width="0.0166%" height="15" fill="rgb(253,91,49)" fg:x="1918" fg:w="1"/><text x="32.0418%" y="687.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="31.7587%" y="917" width="0.0663%" height="15" fill="rgb(228,155,29)" fg:x="1916" fg:w="4"/><text x="32.0087%" y="927.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="31.7587%" y="901" width="0.0663%" height="15" fill="rgb(243,57,37)" fg:x="1916" fg:w="4"/><text x="32.0087%" y="911.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (4 samples, 0.07%)</title><rect x="31.7587%" y="885" width="0.0663%" height="15" fill="rgb(244,167,17)" fg:x="1916" fg:w="4"/><text x="32.0087%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&amp;) (2 samples, 0.03%)</title><rect x="31.7918%" y="869" width="0.0332%" height="15" fill="rgb(207,181,38)" fg:x="1918" fg:w="2"/><text x="32.0418%" y="879.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="31.7918%" y="853" width="0.0332%" height="15" fill="rgb(211,8,23)" fg:x="1918" fg:w="2"/><text x="32.0418%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Unserialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="31.7918%" y="837" width="0.0332%" height="15" fill="rgb(235,11,44)" fg:x="1918" fg:w="2"/><text x="32.0418%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned long&gt; (2 samples, 0.03%)</title><rect x="31.7918%" y="821" width="0.0332%" height="15" fill="rgb(248,18,52)" fg:x="1918" fg:w="2"/><text x="32.0418%" y="831.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="31.7918%" y="805" width="0.0332%" height="15" fill="rgb(208,4,7)" fg:x="1918" fg:w="2"/><text x="32.0418%" y="815.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.03%)</title><rect x="31.7918%" y="789" width="0.0332%" height="15" fill="rgb(240,17,39)" fg:x="1918" fg:w="2"/><text x="32.0418%" y="799.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="31.8084%" y="773" width="0.0166%" height="15" fill="rgb(207,170,3)" fg:x="1919" fg:w="1"/><text x="32.0584%" y="783.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="31.8084%" y="757" width="0.0166%" height="15" fill="rgb(236,100,52)" fg:x="1919" fg:w="1"/><text x="32.0584%" y="767.50"></text></g><g><title>DataStream::DataStream (2 samples, 0.03%)</title><rect x="31.8250%" y="853" width="0.0332%" height="15" fill="rgb(246,78,51)" fg:x="1920" fg:w="2"/><text x="32.0750%" y="863.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="31.8250%" y="837" width="0.0332%" height="15" fill="rgb(211,17,15)" fg:x="1920" fg:w="2"/><text x="32.0750%" y="847.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="31.8250%" y="821" width="0.0332%" height="15" fill="rgb(209,59,46)" fg:x="1920" fg:w="2"/><text x="32.0750%" y="831.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="31.8250%" y="805" width="0.0332%" height="15" fill="rgb(210,92,25)" fg:x="1920" fg:w="2"/><text x="32.0750%" y="815.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="31.8415%" y="789" width="0.0166%" height="15" fill="rgb(238,174,52)" fg:x="1921" fg:w="1"/><text x="32.0915%" y="799.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="31.8415%" y="773" width="0.0166%" height="15" fill="rgb(230,73,7)" fg:x="1921" fg:w="1"/><text x="32.0915%" y="783.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="31.8415%" y="757" width="0.0166%" height="15" fill="rgb(243,124,40)" fg:x="1921" fg:w="1"/><text x="32.0915%" y="767.50"></text></g><g><title>CCoinsViewDB::GetCoin (4 samples, 0.07%)</title><rect x="31.8250%" y="885" width="0.0663%" height="15" fill="rgb(244,170,11)" fg:x="1920" fg:w="4"/><text x="32.0750%" y="895.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (4 samples, 0.07%)</title><rect x="31.8250%" y="869" width="0.0663%" height="15" fill="rgb(207,114,54)" fg:x="1920" fg:w="4"/><text x="32.0750%" y="879.50"></text></g><g><title>DataStream::Xor (2 samples, 0.03%)</title><rect x="31.8581%" y="853" width="0.0332%" height="15" fill="rgb(205,42,20)" fg:x="1922" fg:w="2"/><text x="32.1081%" y="863.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="31.8581%" y="837" width="0.0332%" height="15" fill="rgb(230,30,28)" fg:x="1922" fg:w="2"/><text x="32.1081%" y="847.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="31.8747%" y="821" width="0.0166%" height="15" fill="rgb(205,73,54)" fg:x="1923" fg:w="1"/><text x="32.1247%" y="831.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="31.8747%" y="805" width="0.0166%" height="15" fill="rgb(254,227,23)" fg:x="1923" fg:w="1"/><text x="32.1247%" y="815.50"></text></g><g><title>GetSpecialScriptSize (1 samples, 0.02%)</title><rect x="31.8913%" y="885" width="0.0166%" height="15" fill="rgb(228,202,34)" fg:x="1924" fg:w="1"/><text x="32.1413%" y="895.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (2 samples, 0.03%)</title><rect x="31.9078%" y="885" width="0.0332%" height="15" fill="rgb(222,225,37)" fg:x="1925" fg:w="2"/><text x="32.1578%" y="895.50"></text></g><g><title>unsigned char ser_readdata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="31.9244%" y="869" width="0.0166%" height="15" fill="rgb(221,14,54)" fg:x="1926" fg:w="1"/><text x="32.1744%" y="879.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="31.9244%" y="853" width="0.0166%" height="15" fill="rgb(254,102,2)" fg:x="1926" fg:w="1"/><text x="32.1744%" y="863.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="31.9244%" y="837" width="0.0166%" height="15" fill="rgb(232,104,17)" fg:x="1926" fg:w="1"/><text x="32.1744%" y="847.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="31.9410%" y="869" width="0.0166%" height="15" fill="rgb(250,220,14)" fg:x="1927" fg:w="1"/><text x="32.1910%" y="879.50"></text></g><g><title>void Unserialize&lt;DataStream, unsigned char&gt; (1 samples, 0.02%)</title><rect x="31.9410%" y="853" width="0.0166%" height="15" fill="rgb(241,158,9)" fg:x="1927" fg:w="1"/><text x="32.1910%" y="863.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="31.9410%" y="837" width="0.0166%" height="15" fill="rgb(246,9,43)" fg:x="1927" fg:w="1"/><text x="32.1910%" y="847.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="31.9410%" y="821" width="0.0166%" height="15" fill="rgb(206,73,33)" fg:x="1927" fg:w="1"/><text x="32.1910%" y="831.50"></text></g><g><title>GetSpecialScriptSize (1 samples, 0.02%)</title><rect x="31.9410%" y="805" width="0.0166%" height="15" fill="rgb(222,79,8)" fg:x="1927" fg:w="1"/><text x="32.1910%" y="815.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (14 samples, 0.23%)</title><rect x="31.7587%" y="1061" width="0.2321%" height="15" fill="rgb(234,8,54)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="1071.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="1045" width="0.2321%" height="15" fill="rgb(209,134,38)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="1055.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="1029" width="0.2321%" height="15" fill="rgb(230,127,29)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="1039.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="1013" width="0.2321%" height="15" fill="rgb(242,44,41)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="1023.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="997" width="0.2321%" height="15" fill="rgb(222,56,43)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="1007.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="981" width="0.2321%" height="15" fill="rgb(238,39,47)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="991.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="965" width="0.2321%" height="15" fill="rgb(226,79,43)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="975.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="949" width="0.2321%" height="15" fill="rgb(242,105,53)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="959.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (14 samples, 0.23%)</title><rect x="31.7587%" y="933" width="0.2321%" height="15" fill="rgb(251,132,46)" fg:x="1916" fg:w="14"/><text x="32.0087%" y="943.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (10 samples, 0.17%)</title><rect x="31.8250%" y="917" width="0.1658%" height="15" fill="rgb(231,77,14)" fg:x="1920" fg:w="10"/><text x="32.0750%" y="927.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (10 samples, 0.17%)</title><rect x="31.8250%" y="901" width="0.1658%" height="15" fill="rgb(240,135,9)" fg:x="1920" fg:w="10"/><text x="32.0750%" y="911.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="31.9410%" y="885" width="0.0497%" height="15" fill="rgb(248,109,14)" fg:x="1927" fg:w="3"/><text x="32.1910%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&amp;) (2 samples, 0.03%)</title><rect x="31.9576%" y="869" width="0.0332%" height="15" fill="rgb(227,146,52)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="879.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="31.9576%" y="853" width="0.0332%" height="15" fill="rgb(232,54,3)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="31.9576%" y="837" width="0.0332%" height="15" fill="rgb(229,201,43)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (2 samples, 0.03%)</title><rect x="31.9576%" y="821" width="0.0332%" height="15" fill="rgb(252,161,33)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="831.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="31.9576%" y="805" width="0.0332%" height="15" fill="rgb(226,146,40)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="815.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.03%)</title><rect x="31.9576%" y="789" width="0.0332%" height="15" fill="rgb(219,47,25)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="799.50"></text></g><g><title>DataStream::Xor (2 samples, 0.03%)</title><rect x="31.9576%" y="773" width="0.0332%" height="15" fill="rgb(250,135,13)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="783.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="31.9576%" y="757" width="0.0332%" height="15" fill="rgb(219,229,18)" fg:x="1928" fg:w="2"/><text x="32.2076%" y="767.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="31.9741%" y="741" width="0.0166%" height="15" fill="rgb(217,152,27)" fg:x="1929" fg:w="1"/><text x="32.2241%" y="751.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="31.9741%" y="725" width="0.0166%" height="15" fill="rgb(225,71,47)" fg:x="1929" fg:w="1"/><text x="32.2241%" y="735.50"></text></g><g><title>DataStream::DataStream (2 samples, 0.03%)</title><rect x="31.9907%" y="1061" width="0.0332%" height="15" fill="rgb(220,139,14)" fg:x="1930" fg:w="2"/><text x="32.2407%" y="1071.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="31.9907%" y="1045" width="0.0332%" height="15" fill="rgb(247,54,32)" fg:x="1930" fg:w="2"/><text x="32.2407%" y="1055.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="31.9907%" y="1029" width="0.0332%" height="15" fill="rgb(252,131,39)" fg:x="1930" fg:w="2"/><text x="32.2407%" y="1039.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="31.9907%" y="1013" width="0.0332%" height="15" fill="rgb(210,108,39)" fg:x="1930" fg:w="2"/><text x="32.2407%" y="1023.50"></text></g><g><title>decltype  (2 samples, 0.03%)</title><rect x="31.9907%" y="997" width="0.0332%" height="15" fill="rgb(205,23,29)" fg:x="1930" fg:w="2"/><text x="32.2407%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (2 samples, 0.03%)</title><rect x="31.9907%" y="981" width="0.0332%" height="15" fill="rgb(246,139,46)" fg:x="1930" fg:w="2"/><text x="32.2407%" y="991.50"></text></g><g><title>decltype (2 samples, 0.03%)</title><rect x="31.9907%" y="965" width="0.0332%" height="15" fill="rgb(250,81,26)" fg:x="1930" fg:w="2"/><text x="32.2407%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="949" width="0.0166%" height="15" fill="rgb(214,104,7)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="959.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="933" width="0.0166%" height="15" fill="rgb(233,189,8)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="943.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="917" width="0.0166%" height="15" fill="rgb(228,141,17)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="927.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="901" width="0.0166%" height="15" fill="rgb(247,157,1)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="911.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="885" width="0.0166%" height="15" fill="rgb(249,225,5)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="895.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="32.0239%" y="869" width="0.0166%" height="15" fill="rgb(242,55,13)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="879.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="853" width="0.0166%" height="15" fill="rgb(230,49,50)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="863.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="837" width="0.0166%" height="15" fill="rgb(241,111,38)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="847.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="821" width="0.0166%" height="15" fill="rgb(252,155,4)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="831.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="32.0239%" y="805" width="0.0166%" height="15" fill="rgb(212,69,32)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="815.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.0239%" y="789" width="0.0166%" height="15" fill="rgb(243,107,47)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="799.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="32.0239%" y="773" width="0.0166%" height="15" fill="rgb(247,130,12)" fg:x="1932" fg:w="1"/><text x="32.2739%" y="783.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="32.0404%" y="821" width="0.0166%" height="15" fill="rgb(233,74,16)" fg:x="1933" fg:w="1"/><text x="32.2904%" y="831.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="32.0404%" y="805" width="0.0166%" height="15" fill="rgb(208,58,18)" fg:x="1933" fg:w="1"/><text x="32.2904%" y="815.50"></text></g><g><title>CTxOut::SetNull (1 samples, 0.02%)</title><rect x="32.0404%" y="789" width="0.0166%" height="15" fill="rgb(242,225,1)" fg:x="1933" fg:w="1"/><text x="32.2904%" y="799.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.03%)</title><rect x="32.0404%" y="837" width="0.0332%" height="15" fill="rgb(249,39,40)" fg:x="1933" fg:w="2"/><text x="32.2904%" y="847.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="32.0570%" y="821" width="0.0166%" height="15" fill="rgb(207,72,44)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="831.50"></text></g><g><title>DataStream::reserve (1 samples, 0.02%)</title><rect x="32.0570%" y="805" width="0.0166%" height="15" fill="rgb(215,193,12)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="815.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="32.0570%" y="789" width="0.0166%" height="15" fill="rgb(248,41,39)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="799.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="32.0570%" y="773" width="0.0166%" height="15" fill="rgb(253,85,4)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="783.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="32.0570%" y="757" width="0.0166%" height="15" fill="rgb(243,70,31)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="767.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="32.0570%" y="741" width="0.0166%" height="15" fill="rgb(253,195,26)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="751.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::allocate (1 samples, 0.02%)</title><rect x="32.0570%" y="725" width="0.0166%" height="15" fill="rgb(243,42,11)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="735.50"></text></g><g><title>std::allocator&lt;std::byte&gt;::allocate (1 samples, 0.02%)</title><rect x="32.0570%" y="709" width="0.0166%" height="15" fill="rgb(239,66,17)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="719.50"></text></g><g><title>std::__new_allocator&lt;std::byte&gt;::allocate (1 samples, 0.02%)</title><rect x="32.0570%" y="693" width="0.0166%" height="15" fill="rgb(217,132,21)" fg:x="1934" fg:w="1"/><text x="32.3070%" y="703.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (1 samples, 0.02%)</title><rect x="32.0736%" y="837" width="0.0166%" height="15" fill="rgb(252,202,21)" fg:x="1935" fg:w="1"/><text x="32.3236%" y="847.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (4 samples, 0.07%)</title><rect x="32.0404%" y="949" width="0.0663%" height="15" fill="rgb(233,98,36)" fg:x="1933" fg:w="4"/><text x="32.2904%" y="959.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="32.0404%" y="933" width="0.0663%" height="15" fill="rgb(216,153,54)" fg:x="1933" fg:w="4"/><text x="32.2904%" y="943.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="32.0404%" y="917" width="0.0663%" height="15" fill="rgb(250,99,7)" fg:x="1933" fg:w="4"/><text x="32.2904%" y="927.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (4 samples, 0.07%)</title><rect x="32.0404%" y="901" width="0.0663%" height="15" fill="rgb(207,56,50)" fg:x="1933" fg:w="4"/><text x="32.2904%" y="911.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (4 samples, 0.07%)</title><rect x="32.0404%" y="885" width="0.0663%" height="15" fill="rgb(244,61,34)" fg:x="1933" fg:w="4"/><text x="32.2904%" y="895.50"></text></g><g><title>DataStream::write (4 samples, 0.07%)</title><rect x="32.0404%" y="869" width="0.0663%" height="15" fill="rgb(241,50,38)" fg:x="1933" fg:w="4"/><text x="32.2904%" y="879.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (4 samples, 0.07%)</title><rect x="32.0404%" y="853" width="0.0663%" height="15" fill="rgb(212,166,30)" fg:x="1933" fg:w="4"/><text x="32.2904%" y="863.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="32.0902%" y="837" width="0.0166%" height="15" fill="rgb(249,127,32)" fg:x="1936" fg:w="1"/><text x="32.3402%" y="847.50"></text></g><g><title>CCoinsViewDB::GetCoin (439 samples, 7.28%)</title><rect x="24.8633%" y="1093" width="7.2766%" height="15" fill="rgb(209,103,0)" fg:x="1500" fg:w="439"/><text x="25.1133%" y="1103.50">CCoinsView..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (23 samples, 0.38%)</title><rect x="31.7587%" y="1077" width="0.3812%" height="15" fill="rgb(238,209,51)" fg:x="1916" fg:w="23"/><text x="32.0087%" y="1087.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (7 samples, 0.12%)</title><rect x="32.0239%" y="1061" width="0.1160%" height="15" fill="rgb(237,56,23)" fg:x="1932" fg:w="7"/><text x="32.2739%" y="1071.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (7 samples, 0.12%)</title><rect x="32.0239%" y="1045" width="0.1160%" height="15" fill="rgb(215,153,46)" fg:x="1932" fg:w="7"/><text x="32.2739%" y="1055.50"></text></g><g><title>Serialize&lt;DataStream&gt; (7 samples, 0.12%)</title><rect x="32.0239%" y="1029" width="0.1160%" height="15" fill="rgb(224,49,31)" fg:x="1932" fg:w="7"/><text x="32.2739%" y="1039.50"></text></g><g><title>Ser&lt;DataStream&gt; (7 samples, 0.12%)</title><rect x="32.0239%" y="1013" width="0.1160%" height="15" fill="rgb(250,18,42)" fg:x="1932" fg:w="7"/><text x="32.2739%" y="1023.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (7 samples, 0.12%)</title><rect x="32.0239%" y="997" width="0.1160%" height="15" fill="rgb(215,176,39)" fg:x="1932" fg:w="7"/><text x="32.2739%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="32.0239%" y="981" width="0.1160%" height="15" fill="rgb(223,77,29)" fg:x="1932" fg:w="7"/><text x="32.2739%" y="991.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="32.0239%" y="965" width="0.1160%" height="15" fill="rgb(234,94,52)" fg:x="1932" fg:w="7"/><text x="32.2739%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="32.1067%" y="949" width="0.0332%" height="15" fill="rgb(220,154,50)" fg:x="1937" fg:w="2"/><text x="32.3567%" y="959.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="32.1067%" y="933" width="0.0332%" height="15" fill="rgb(212,11,10)" fg:x="1937" fg:w="2"/><text x="32.3567%" y="943.50"></text></g><g><title>DataStream::write (2 samples, 0.03%)</title><rect x="32.1067%" y="917" width="0.0332%" height="15" fill="rgb(205,166,19)" fg:x="1937" fg:w="2"/><text x="32.3567%" y="927.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="32.1067%" y="901" width="0.0332%" height="15" fill="rgb(244,198,16)" fg:x="1937" fg:w="2"/><text x="32.3567%" y="911.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="32.1067%" y="885" width="0.0332%" height="15" fill="rgb(219,69,12)" fg:x="1937" fg:w="2"/><text x="32.3567%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="32.1067%" y="869" width="0.0332%" height="15" fill="rgb(245,30,7)" fg:x="1937" fg:w="2"/><text x="32.3567%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="32.1067%" y="853" width="0.0332%" height="15" fill="rgb(218,221,48)" fg:x="1937" fg:w="2"/><text x="32.3567%" y="863.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (1 samples, 0.02%)</title><rect x="32.1399%" y="1093" width="0.0166%" height="15" fill="rgb(216,66,15)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="1103.50"></text></g><g><title>std::optional&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::optional&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (1 samples, 0.02%)</title><rect x="32.1399%" y="1077" width="0.0166%" height="15" fill="rgb(226,122,50)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="1087.50"></text></g><g><title>std::_Optional_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false, false&gt;::_Optional_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt; (1 samples, 0.02%)</title><rect x="32.1399%" y="1061" width="0.0166%" height="15" fill="rgb(239,156,16)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="1071.50"></text></g><g><title>std::_Optional_payload&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false, false, false&gt;::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="32.1399%" y="1045" width="0.0166%" height="15" fill="rgb(224,27,38)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, false, false&gt;::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="32.1399%" y="1029" width="0.0166%" height="15" fill="rgb(224,39,27)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="1039.50"></text></g><g><title>std::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="32.1399%" y="1013" width="0.0166%" height="15" fill="rgb(215,92,29)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Storage&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::_Storage&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="32.1399%" y="997" width="0.0166%" height="15" fill="rgb(207,159,16)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="32.1399%" y="981" width="0.0166%" height="15" fill="rgb(238,163,47)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="32.1399%" y="965" width="0.0166%" height="15" fill="rgb(219,91,49)" fg:x="1939" fg:w="1"/><text x="32.3899%" y="975.50"></text></g><g><title>SipHashUint256Extra (14 samples, 0.23%)</title><rect x="32.1565%" y="1093" width="0.2321%" height="15" fill="rgb(227,167,31)" fg:x="1940" fg:w="14"/><text x="32.4065%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.15%)</title><rect x="32.2394%" y="1077" width="0.1492%" height="15" fill="rgb(234,80,54)" fg:x="1945" fg:w="9"/><text x="32.4894%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.15%)</title><rect x="32.2394%" y="1061" width="0.1492%" height="15" fill="rgb(212,114,2)" fg:x="1945" fg:w="9"/><text x="32.4894%" y="1071.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="32.3885%" y="1093" width="0.0166%" height="15" fill="rgb(234,50,24)" fg:x="1954" fg:w="1"/><text x="32.6385%" y="1103.50"></text></g><g><title>leveldb::MemTable::Unref (1 samples, 0.02%)</title><rect x="32.3885%" y="1077" width="0.0166%" height="15" fill="rgb(221,68,8)" fg:x="1954" fg:w="1"/><text x="32.6385%" y="1087.50"></text></g><g><title>leveldb::Version::UpdateStats (1 samples, 0.02%)</title><rect x="32.4051%" y="1093" width="0.0166%" height="15" fill="rgb(254,180,31)" fg:x="1955" fg:w="1"/><text x="32.6551%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="32.4217%" y="1077" width="0.0166%" height="15" fill="rgb(247,130,50)" fg:x="1956" fg:w="1"/><text x="32.6717%" y="1087.50"></text></g><g><title>void Unserialize&lt;DataStream, unsigned char&gt; (1 samples, 0.02%)</title><rect x="32.4217%" y="1061" width="0.0166%" height="15" fill="rgb(211,109,4)" fg:x="1956" fg:w="1"/><text x="32.6717%" y="1071.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="32.4217%" y="1045" width="0.0166%" height="15" fill="rgb(238,50,21)" fg:x="1956" fg:w="1"/><text x="32.6717%" y="1055.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="32.4217%" y="1029" width="0.0166%" height="15" fill="rgb(225,57,45)" fg:x="1956" fg:w="1"/><text x="32.6717%" y="1039.50"></text></g><g><title>CCoinsViewBacked::GetCoin (458 samples, 7.59%)</title><rect x="24.8633%" y="1109" width="7.5916%" height="15" fill="rgb(209,196,50)" fg:x="1500" fg:w="458"/><text x="25.1133%" y="1119.50">CCoinsView..</text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="32.4217%" y="1093" width="0.0332%" height="15" fill="rgb(242,140,13)" fg:x="1956" fg:w="2"/><text x="32.6717%" y="1103.50"></text></g><g><title>Span&lt;unsigned char&gt;::Span&lt;CScript&gt; (1 samples, 0.02%)</title><rect x="32.4383%" y="1077" width="0.0166%" height="15" fill="rgb(217,111,7)" fg:x="1957" fg:w="1"/><text x="32.6883%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="32.4548%" y="1109" width="0.0166%" height="15" fill="rgb(253,193,51)" fg:x="1958" fg:w="1"/><text x="32.7048%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="32.4548%" y="1093" width="0.0166%" height="15" fill="rgb(252,70,29)" fg:x="1958" fg:w="1"/><text x="32.7048%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.4548%" y="1077" width="0.0166%" height="15" fill="rgb(232,127,12)" fg:x="1958" fg:w="1"/><text x="32.7048%" y="1087.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.13%)</title><rect x="32.4714%" y="1109" width="0.1326%" height="15" fill="rgb(211,180,21)" fg:x="1959" fg:w="8"/><text x="32.7214%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="32.5543%" y="1093" width="0.0497%" height="15" fill="rgb(229,72,13)" fg:x="1964" fg:w="3"/><text x="32.8043%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="32.5543%" y="1077" width="0.0497%" height="15" fill="rgb(240,211,49)" fg:x="1964" fg:w="3"/><text x="32.8043%" y="1087.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (472 samples, 7.82%)</title><rect x="24.8633%" y="1157" width="7.8236%" height="15" fill="rgb(219,149,40)" fg:x="1500" fg:w="472"/><text x="25.1133%" y="1167.50">CCoinsViewE..</text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (472 samples, 7.82%)</title><rect x="24.8633%" y="1141" width="7.8236%" height="15" fill="rgb(210,127,46)" fg:x="1500" fg:w="472"/><text x="25.1133%" y="1151.50">ExecuteBack..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (472 samples, 7.82%)</title><rect x="24.8633%" y="1125" width="7.8236%" height="15" fill="rgb(220,106,7)" fg:x="1500" fg:w="472"/><text x="25.1133%" y="1135.50">CCoinsViewE..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.08%)</title><rect x="32.6040%" y="1109" width="0.0829%" height="15" fill="rgb(249,31,22)" fg:x="1967" fg:w="5"/><text x="32.8540%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="32.6703%" y="1093" width="0.0166%" height="15" fill="rgb(253,1,49)" fg:x="1971" fg:w="1"/><text x="32.9203%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="32.6703%" y="1077" width="0.0166%" height="15" fill="rgb(227,144,33)" fg:x="1971" fg:w="1"/><text x="32.9203%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="32.6703%" y="1061" width="0.0166%" height="15" fill="rgb(249,163,44)" fg:x="1971" fg:w="1"/><text x="32.9203%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="32.6703%" y="1045" width="0.0166%" height="15" fill="rgb(234,15,39)" fg:x="1971" fg:w="1"/><text x="32.9203%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="32.6703%" y="1029" width="0.0166%" height="15" fill="rgb(207,66,16)" fg:x="1971" fg:w="1"/><text x="32.9203%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.05%)</title><rect x="32.6869%" y="1157" width="0.0497%" height="15" fill="rgb(233,112,24)" fg:x="1972" fg:w="3"/><text x="32.9369%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="32.7366%" y="1109" width="0.0332%" height="15" fill="rgb(230,90,22)" fg:x="1975" fg:w="2"/><text x="32.9866%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="32.7532%" y="1093" width="0.0166%" height="15" fill="rgb(229,61,13)" fg:x="1976" fg:w="1"/><text x="33.0032%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.7532%" y="1077" width="0.0166%" height="15" fill="rgb(225,57,24)" fg:x="1976" fg:w="1"/><text x="33.0032%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="32.7532%" y="1061" width="0.0166%" height="15" fill="rgb(208,169,48)" fg:x="1976" fg:w="1"/><text x="33.0032%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="32.7532%" y="1045" width="0.0166%" height="15" fill="rgb(244,218,51)" fg:x="1976" fg:w="1"/><text x="33.0032%" y="1055.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="32.7532%" y="1029" width="0.0166%" height="15" fill="rgb(214,148,10)" fg:x="1976" fg:w="1"/><text x="33.0032%" y="1039.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.03%)</title><rect x="32.7698%" y="1109" width="0.0332%" height="15" fill="rgb(225,174,27)" fg:x="1977" fg:w="2"/><text x="33.0198%" y="1119.50"></text></g><g><title>SipHashUint256Extra (13 samples, 0.22%)</title><rect x="32.8029%" y="1109" width="0.2155%" height="15" fill="rgb(230,96,26)" fg:x="1979" fg:w="13"/><text x="33.0529%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="32.9521%" y="1093" width="0.0663%" height="15" fill="rgb(232,10,30)" fg:x="1988" fg:w="4"/><text x="33.2021%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="32.9521%" y="1077" width="0.0663%" height="15" fill="rgb(222,8,50)" fg:x="1988" fg:w="4"/><text x="33.2021%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="1093" width="0.0166%" height="15" fill="rgb(213,81,27)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="1077" width="0.0166%" height="15" fill="rgb(245,50,10)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="1061" width="0.0166%" height="15" fill="rgb(216,100,18)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="1045" width="0.0166%" height="15" fill="rgb(236,147,54)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="1029" width="0.0166%" height="15" fill="rgb(205,143,26)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="1013" width="0.0166%" height="15" fill="rgb(236,26,9)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="997" width="0.0166%" height="15" fill="rgb(221,165,53)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="981" width="0.0166%" height="15" fill="rgb(214,110,17)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="965" width="0.0166%" height="15" fill="rgb(237,197,12)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="949" width="0.0166%" height="15" fill="rgb(205,84,17)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.1179%" y="933" width="0.0166%" height="15" fill="rgb(237,18,45)" fg:x="1998" fg:w="1"/><text x="33.3679%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.15%)</title><rect x="33.0184%" y="1109" width="0.1492%" height="15" fill="rgb(221,87,14)" fg:x="1992" fg:w="9"/><text x="33.2684%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="33.1344%" y="1093" width="0.0332%" height="15" fill="rgb(238,186,15)" fg:x="1999" fg:w="2"/><text x="33.3844%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="33.1344%" y="1077" width="0.0332%" height="15" fill="rgb(208,115,11)" fg:x="1999" fg:w="2"/><text x="33.3844%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="33.1344%" y="1061" width="0.0332%" height="15" fill="rgb(254,175,0)" fg:x="1999" fg:w="2"/><text x="33.3844%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="33.1344%" y="1045" width="0.0332%" height="15" fill="rgb(227,24,42)" fg:x="1999" fg:w="2"/><text x="33.3844%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="33.1344%" y="1029" width="0.0332%" height="15" fill="rgb(223,211,37)" fg:x="1999" fg:w="2"/><text x="33.3844%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (27 samples, 0.45%)</title><rect x="32.7366%" y="1125" width="0.4475%" height="15" fill="rgb(235,49,27)" fg:x="1975" fg:w="27"/><text x="32.9866%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="33.1676%" y="1109" width="0.0166%" height="15" fill="rgb(254,97,51)" fg:x="2001" fg:w="1"/><text x="33.4176%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="33.1676%" y="1093" width="0.0166%" height="15" fill="rgb(249,51,40)" fg:x="2001" fg:w="1"/><text x="33.4176%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="33.1676%" y="1077" width="0.0166%" height="15" fill="rgb(210,128,45)" fg:x="2001" fg:w="1"/><text x="33.4176%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="33.1676%" y="1061" width="0.0166%" height="15" fill="rgb(224,137,50)" fg:x="2001" fg:w="1"/><text x="33.4176%" y="1071.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="33.1676%" y="1045" width="0.0166%" height="15" fill="rgb(242,15,9)" fg:x="2001" fg:w="1"/><text x="33.4176%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (11 samples, 0.18%)</title><rect x="33.1842%" y="1125" width="0.1823%" height="15" fill="rgb(233,187,41)" fg:x="2002" fg:w="11"/><text x="33.4342%" y="1135.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.18%)</title><rect x="33.1842%" y="1109" width="0.1823%" height="15" fill="rgb(227,2,29)" fg:x="2002" fg:w="11"/><text x="33.4342%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="33.2836%" y="1093" width="0.0829%" height="15" fill="rgb(222,70,3)" fg:x="2008" fg:w="5"/><text x="33.5336%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.08%)</title><rect x="33.2836%" y="1077" width="0.0829%" height="15" fill="rgb(213,11,42)" fg:x="2008" fg:w="5"/><text x="33.5336%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="33.3665%" y="1109" width="0.0166%" height="15" fill="rgb(225,150,9)" fg:x="2013" fg:w="1"/><text x="33.6165%" y="1119.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="33.3831%" y="1093" width="0.0166%" height="15" fill="rgb(230,162,45)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="33.3831%" y="1077" width="0.0166%" height="15" fill="rgb(222,14,52)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="1087.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="33.3831%" y="1061" width="0.0166%" height="15" fill="rgb(254,198,14)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="1071.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="33.3831%" y="1045" width="0.0166%" height="15" fill="rgb(220,217,30)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="33.3831%" y="1029" width="0.0166%" height="15" fill="rgb(215,146,41)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="1013" width="0.0166%" height="15" fill="rgb(217,27,36)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="997" width="0.0166%" height="15" fill="rgb(219,218,39)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="981" width="0.0166%" height="15" fill="rgb(219,4,42)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="965" width="0.0166%" height="15" fill="rgb(249,119,36)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="949" width="0.0166%" height="15" fill="rgb(209,23,33)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="933" width="0.0166%" height="15" fill="rgb(211,10,0)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="917" width="0.0166%" height="15" fill="rgb(208,99,37)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3831%" y="901" width="0.0166%" height="15" fill="rgb(213,132,31)" fg:x="2014" fg:w="1"/><text x="33.6331%" y="911.50"></text></g><g><title>CCoinsViewCache::FetchCoin (516 samples, 8.55%)</title><rect x="24.8633%" y="1173" width="8.5530%" height="15" fill="rgb(243,129,40)" fg:x="1500" fg:w="516"/><text x="25.1133%" y="1183.50">CCoinsViewCa..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (41 samples, 0.68%)</title><rect x="32.7366%" y="1157" width="0.6796%" height="15" fill="rgb(210,66,33)" fg:x="1975" fg:w="41"/><text x="32.9866%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (41 samples, 0.68%)</title><rect x="32.7366%" y="1141" width="0.6796%" height="15" fill="rgb(209,189,4)" fg:x="1975" fg:w="41"/><text x="32.9866%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="33.3665%" y="1125" width="0.0497%" height="15" fill="rgb(214,107,37)" fg:x="2013" fg:w="3"/><text x="33.6165%" y="1135.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.03%)</title><rect x="33.3831%" y="1109" width="0.0332%" height="15" fill="rgb(245,88,54)" fg:x="2014" fg:w="2"/><text x="33.6331%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="33.3996%" y="1093" width="0.0166%" height="15" fill="rgb(205,146,20)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="1103.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (1 samples, 0.02%)</title><rect x="33.3996%" y="1077" width="0.0166%" height="15" fill="rgb(220,161,25)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.02%)</title><rect x="33.3996%" y="1061" width="0.0166%" height="15" fill="rgb(215,152,15)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.02%)</title><rect x="33.3996%" y="1045" width="0.0166%" height="15" fill="rgb(233,192,44)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (1 samples, 0.02%)</title><rect x="33.3996%" y="1029" width="0.0166%" height="15" fill="rgb(240,170,46)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="1039.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="33.3996%" y="1013" width="0.0166%" height="15" fill="rgb(207,104,33)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="1023.50"></text></g><g><title>__posix_memalign (1 samples, 0.02%)</title><rect x="33.3996%" y="997" width="0.0166%" height="15" fill="rgb(219,21,39)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="1007.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="33.3996%" y="981" width="0.0166%" height="15" fill="rgb(214,133,29)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="991.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="33.3996%" y="965" width="0.0166%" height="15" fill="rgb(226,93,6)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="975.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="33.3996%" y="949" width="0.0166%" height="15" fill="rgb(252,222,34)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="959.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="33.3996%" y="933" width="0.0166%" height="15" fill="rgb(252,92,48)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="917" width="0.0166%" height="15" fill="rgb(245,223,24)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="901" width="0.0166%" height="15" fill="rgb(205,176,3)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="885" width="0.0166%" height="15" fill="rgb(235,151,15)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="869" width="0.0166%" height="15" fill="rgb(237,209,11)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="853" width="0.0166%" height="15" fill="rgb(243,227,24)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="837" width="0.0166%" height="15" fill="rgb(239,193,16)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="821" width="0.0166%" height="15" fill="rgb(231,27,9)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="33.3996%" y="805" width="0.0166%" height="15" fill="rgb(219,169,10)" fg:x="2015" fg:w="1"/><text x="33.6496%" y="815.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.13%)</title><rect x="33.4162%" y="1173" width="0.1326%" height="15" fill="rgb(244,229,43)" fg:x="2016" fg:w="8"/><text x="33.6662%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="33.4494%" y="1157" width="0.0995%" height="15" fill="rgb(254,38,20)" fg:x="2018" fg:w="6"/><text x="33.6994%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="33.4494%" y="1141" width="0.0995%" height="15" fill="rgb(250,47,30)" fg:x="2018" fg:w="6"/><text x="33.6994%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="33.5488%" y="1173" width="0.0332%" height="15" fill="rgb(224,124,36)" fg:x="2024" fg:w="2"/><text x="33.7988%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="33.5820%" y="1013" width="0.0166%" height="15" fill="rgb(246,68,51)" fg:x="2026" fg:w="1"/><text x="33.8320%" y="1023.50"></text></g><g><title>CCoinsViewCache::GetCoin (529 samples, 8.77%)</title><rect x="24.8633%" y="1189" width="8.7684%" height="15" fill="rgb(253,43,49)" fg:x="1500" fg:w="529"/><text x="25.1133%" y="1199.50">CCoinsViewCa..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (3 samples, 0.05%)</title><rect x="33.5820%" y="1173" width="0.0497%" height="15" fill="rgb(219,54,36)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1183.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (3 samples, 0.05%)</title><rect x="33.5820%" y="1157" width="0.0497%" height="15" fill="rgb(227,133,34)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="33.5820%" y="1141" width="0.0497%" height="15" fill="rgb(247,227,15)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="33.5820%" y="1125" width="0.0497%" height="15" fill="rgb(229,96,14)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="33.5820%" y="1109" width="0.0497%" height="15" fill="rgb(220,79,17)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="33.5820%" y="1093" width="0.0497%" height="15" fill="rgb(205,131,53)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1103.50"></text></g><g><title>Coin::Coin (3 samples, 0.05%)</title><rect x="33.5820%" y="1077" width="0.0497%" height="15" fill="rgb(209,50,29)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1087.50"></text></g><g><title>CTxOut::CTxOut (3 samples, 0.05%)</title><rect x="33.5820%" y="1061" width="0.0497%" height="15" fill="rgb(245,86,46)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1071.50"></text></g><g><title>CScript::CScript (3 samples, 0.05%)</title><rect x="33.5820%" y="1045" width="0.0497%" height="15" fill="rgb(235,66,46)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (3 samples, 0.05%)</title><rect x="33.5820%" y="1029" width="0.0497%" height="15" fill="rgb(232,148,31)" fg:x="2026" fg:w="3"/><text x="33.8320%" y="1039.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.03%)</title><rect x="33.5985%" y="1013" width="0.0332%" height="15" fill="rgb(217,149,8)" fg:x="2027" fg:w="2"/><text x="33.8485%" y="1023.50"></text></g><g><title>Coin::operator= (2 samples, 0.03%)</title><rect x="33.6317%" y="1189" width="0.0332%" height="15" fill="rgb(209,183,11)" fg:x="2029" fg:w="2"/><text x="33.8817%" y="1199.50"></text></g><g><title>CTxOut::operator= (2 samples, 0.03%)</title><rect x="33.6317%" y="1173" width="0.0332%" height="15" fill="rgb(208,55,20)" fg:x="2029" fg:w="2"/><text x="33.8817%" y="1183.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="33.6483%" y="1157" width="0.0166%" height="15" fill="rgb(218,39,14)" fg:x="2030" fg:w="1"/><text x="33.8983%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="33.6483%" y="1141" width="0.0166%" height="15" fill="rgb(216,169,33)" fg:x="2030" fg:w="1"/><text x="33.8983%" y="1151.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.08%)</title><rect x="33.6648%" y="1189" width="0.0829%" height="15" fill="rgb(233,80,24)" fg:x="2031" fg:w="5"/><text x="33.9148%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.7146%" y="1173" width="0.0332%" height="15" fill="rgb(213,179,31)" fg:x="2034" fg:w="2"/><text x="33.9646%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.7146%" y="1157" width="0.0332%" height="15" fill="rgb(209,19,5)" fg:x="2034" fg:w="2"/><text x="33.9646%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="33.7477%" y="1189" width="0.0166%" height="15" fill="rgb(219,18,35)" fg:x="2036" fg:w="1"/><text x="33.9977%" y="1199.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="33.7643%" y="1157" width="0.0166%" height="15" fill="rgb(209,169,16)" fg:x="2037" fg:w="1"/><text x="34.0143%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.7643%" y="1141" width="0.0166%" height="15" fill="rgb(245,90,51)" fg:x="2037" fg:w="1"/><text x="34.0143%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.7643%" y="1125" width="0.0166%" height="15" fill="rgb(220,99,45)" fg:x="2037" fg:w="1"/><text x="34.0143%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="33.7809%" y="1141" width="0.0332%" height="15" fill="rgb(249,89,25)" fg:x="2038" fg:w="2"/><text x="34.0309%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (4 samples, 0.07%)</title><rect x="33.8140%" y="1141" width="0.0663%" height="15" fill="rgb(239,193,0)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (4 samples, 0.07%)</title><rect x="33.8140%" y="1125" width="0.0663%" height="15" fill="rgb(231,126,1)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (4 samples, 0.07%)</title><rect x="33.8140%" y="1109" width="0.0663%" height="15" fill="rgb(243,166,3)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="33.8140%" y="1093" width="0.0663%" height="15" fill="rgb(223,22,34)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="33.8140%" y="1077" width="0.0663%" height="15" fill="rgb(251,52,51)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="33.8140%" y="1061" width="0.0663%" height="15" fill="rgb(221,165,28)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="33.8140%" y="1045" width="0.0663%" height="15" fill="rgb(218,121,47)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1055.50"></text></g><g><title>Coin::Coin (4 samples, 0.07%)</title><rect x="33.8140%" y="1029" width="0.0663%" height="15" fill="rgb(209,120,9)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (4 samples, 0.07%)</title><rect x="33.8140%" y="1013" width="0.0663%" height="15" fill="rgb(236,68,12)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1023.50"></text></g><g><title>CScript::CScript (4 samples, 0.07%)</title><rect x="33.8140%" y="997" width="0.0663%" height="15" fill="rgb(225,194,26)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (4 samples, 0.07%)</title><rect x="33.8140%" y="981" width="0.0663%" height="15" fill="rgb(231,84,39)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.07%)</title><rect x="33.8140%" y="965" width="0.0663%" height="15" fill="rgb(210,11,45)" fg:x="2040" fg:w="4"/><text x="34.0640%" y="975.50"></text></g><g><title>CCoinsViewCache::HaveCoin (1 samples, 0.02%)</title><rect x="33.8803%" y="1125" width="0.0166%" height="15" fill="rgb(224,54,52)" fg:x="2044" fg:w="1"/><text x="34.1303%" y="1135.50"></text></g><g><title>CCoinsViewCache::HaveInputs (2 samples, 0.03%)</title><rect x="33.8803%" y="1141" width="0.0332%" height="15" fill="rgb(238,102,14)" fg:x="2044" fg:w="2"/><text x="34.1303%" y="1151.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="33.8969%" y="1125" width="0.0166%" height="15" fill="rgb(243,160,52)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1135.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="33.8969%" y="1109" width="0.0166%" height="15" fill="rgb(216,114,19)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="33.8969%" y="1093" width="0.0166%" height="15" fill="rgb(244,166,37)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="33.8969%" y="1077" width="0.0166%" height="15" fill="rgb(246,29,44)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1087.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="33.8969%" y="1061" width="0.0166%" height="15" fill="rgb(215,56,53)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1071.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="33.8969%" y="1045" width="0.0166%" height="15" fill="rgb(217,60,2)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1055.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="33.8969%" y="1029" width="0.0166%" height="15" fill="rgb(207,26,24)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1039.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="33.8969%" y="1013" width="0.0166%" height="15" fill="rgb(252,210,15)" fg:x="2045" fg:w="1"/><text x="34.1469%" y="1023.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="33.9135%" y="1141" width="0.0663%" height="15" fill="rgb(253,209,26)" fg:x="2046" fg:w="4"/><text x="34.1635%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.9466%" y="1125" width="0.0332%" height="15" fill="rgb(238,170,14)" fg:x="2048" fg:w="2"/><text x="34.1966%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="33.9466%" y="1109" width="0.0332%" height="15" fill="rgb(216,178,15)" fg:x="2048" fg:w="2"/><text x="34.1966%" y="1119.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="33.9798%" y="1061" width="0.0166%" height="15" fill="rgb(250,197,2)" fg:x="2050" fg:w="1"/><text x="34.2298%" y="1071.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="33.9798%" y="1045" width="0.0166%" height="15" fill="rgb(212,70,42)" fg:x="2050" fg:w="1"/><text x="34.2298%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (15 samples, 0.25%)</title><rect x="33.7809%" y="1157" width="0.2486%" height="15" fill="rgb(227,213,9)" fg:x="2038" fg:w="15"/><text x="34.0309%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.05%)</title><rect x="33.9798%" y="1141" width="0.0497%" height="15" fill="rgb(245,99,25)" fg:x="2050" fg:w="3"/><text x="34.2298%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="33.9798%" y="1125" width="0.0497%" height="15" fill="rgb(250,82,29)" fg:x="2050" fg:w="3"/><text x="34.2298%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="33.9798%" y="1109" width="0.0497%" height="15" fill="rgb(241,226,54)" fg:x="2050" fg:w="3"/><text x="34.2298%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="33.9798%" y="1093" width="0.0497%" height="15" fill="rgb(221,99,41)" fg:x="2050" fg:w="3"/><text x="34.2298%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="33.9798%" y="1077" width="0.0497%" height="15" fill="rgb(213,90,21)" fg:x="2050" fg:w="3"/><text x="34.2298%" y="1087.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.03%)</title><rect x="33.9964%" y="1061" width="0.0332%" height="15" fill="rgb(205,208,24)" fg:x="2051" fg:w="2"/><text x="34.2464%" y="1071.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="34.0295%" y="1141" width="0.0497%" height="15" fill="rgb(246,31,12)" fg:x="2053" fg:w="3"/><text x="34.2795%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.0627%" y="1125" width="0.0166%" height="15" fill="rgb(213,154,6)" fg:x="2055" fg:w="1"/><text x="34.3127%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.0627%" y="1109" width="0.0166%" height="15" fill="rgb(222,163,29)" fg:x="2055" fg:w="1"/><text x="34.3127%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="34.0792%" y="1061" width="0.0166%" height="15" fill="rgb(227,201,8)" fg:x="2056" fg:w="1"/><text x="34.3292%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (5 samples, 0.08%)</title><rect x="34.0792%" y="1141" width="0.0829%" height="15" fill="rgb(233,9,32)" fg:x="2056" fg:w="5"/><text x="34.3292%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.08%)</title><rect x="34.0792%" y="1125" width="0.0829%" height="15" fill="rgb(217,54,24)" fg:x="2056" fg:w="5"/><text x="34.3292%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5 samples, 0.08%)</title><rect x="34.0792%" y="1109" width="0.0829%" height="15" fill="rgb(235,192,0)" fg:x="2056" fg:w="5"/><text x="34.3292%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.08%)</title><rect x="34.0792%" y="1093" width="0.0829%" height="15" fill="rgb(235,45,9)" fg:x="2056" fg:w="5"/><text x="34.3292%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.08%)</title><rect x="34.0792%" y="1077" width="0.0829%" height="15" fill="rgb(246,42,40)" fg:x="2056" fg:w="5"/><text x="34.3292%" y="1087.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="34.0958%" y="1061" width="0.0663%" height="15" fill="rgb(248,111,24)" fg:x="2057" fg:w="4"/><text x="34.3458%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.1455%" y="1045" width="0.0166%" height="15" fill="rgb(249,65,22)" fg:x="2060" fg:w="1"/><text x="34.3955%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.1455%" y="1029" width="0.0166%" height="15" fill="rgb(238,111,51)" fg:x="2060" fg:w="1"/><text x="34.3955%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="34.1621%" y="1109" width="0.0166%" height="15" fill="rgb(250,118,22)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="34.1621%" y="1093" width="0.0166%" height="15" fill="rgb(234,84,26)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1103.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="34.1621%" y="1077" width="0.0166%" height="15" fill="rgb(243,172,12)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="1061" width="0.0166%" height="15" fill="rgb(236,150,49)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="1045" width="0.0166%" height="15" fill="rgb(225,197,26)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="1029" width="0.0166%" height="15" fill="rgb(214,17,42)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="1013" width="0.0166%" height="15" fill="rgb(224,165,40)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="997" width="0.0166%" height="15" fill="rgb(246,100,4)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="981" width="0.0166%" height="15" fill="rgb(222,103,0)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="965" width="0.0166%" height="15" fill="rgb(227,189,26)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="949" width="0.0166%" height="15" fill="rgb(214,202,17)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.1621%" y="933" width="0.0166%" height="15" fill="rgb(229,111,3)" fg:x="2061" fg:w="1"/><text x="34.4121%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (13 samples, 0.22%)</title><rect x="34.0295%" y="1157" width="0.2155%" height="15" fill="rgb(229,172,15)" fg:x="2053" fg:w="13"/><text x="34.2795%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (5 samples, 0.08%)</title><rect x="34.1621%" y="1141" width="0.0829%" height="15" fill="rgb(230,224,35)" fg:x="2061" fg:w="5"/><text x="34.4121%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (5 samples, 0.08%)</title><rect x="34.1621%" y="1125" width="0.0829%" height="15" fill="rgb(251,141,6)" fg:x="2061" fg:w="5"/><text x="34.4121%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="34.1787%" y="1109" width="0.0663%" height="15" fill="rgb(225,208,6)" fg:x="2062" fg:w="4"/><text x="34.4287%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.07%)</title><rect x="34.1787%" y="1093" width="0.0663%" height="15" fill="rgb(246,181,16)" fg:x="2062" fg:w="4"/><text x="34.4287%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.07%)</title><rect x="34.1787%" y="1077" width="0.0663%" height="15" fill="rgb(227,129,36)" fg:x="2062" fg:w="4"/><text x="34.4287%" y="1087.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="34.1787%" y="1061" width="0.0663%" height="15" fill="rgb(248,117,24)" fg:x="2062" fg:w="4"/><text x="34.4287%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.03%)</title><rect x="34.2450%" y="1141" width="0.0332%" height="15" fill="rgb(214,185,35)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.03%)</title><rect x="34.2450%" y="1125" width="0.0332%" height="15" fill="rgb(236,150,34)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.03%)</title><rect x="34.2450%" y="1109" width="0.0332%" height="15" fill="rgb(243,228,27)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="34.2450%" y="1093" width="0.0332%" height="15" fill="rgb(245,77,44)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="34.2450%" y="1077" width="0.0332%" height="15" fill="rgb(235,214,42)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="34.2450%" y="1061" width="0.0332%" height="15" fill="rgb(221,74,3)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.03%)</title><rect x="34.2450%" y="1045" width="0.0332%" height="15" fill="rgb(206,121,29)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1055.50"></text></g><g><title>Coin::Coin (2 samples, 0.03%)</title><rect x="34.2450%" y="1029" width="0.0332%" height="15" fill="rgb(249,131,53)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.03%)</title><rect x="34.2450%" y="1013" width="0.0332%" height="15" fill="rgb(236,170,29)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1023.50"></text></g><g><title>CScript::CScript (2 samples, 0.03%)</title><rect x="34.2450%" y="997" width="0.0332%" height="15" fill="rgb(247,96,15)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.03%)</title><rect x="34.2450%" y="981" width="0.0332%" height="15" fill="rgb(211,210,7)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.03%)</title><rect x="34.2450%" y="965" width="0.0332%" height="15" fill="rgb(240,88,50)" fg:x="2066" fg:w="2"/><text x="34.4950%" y="975.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="34.2781%" y="1141" width="0.0166%" height="15" fill="rgb(209,229,26)" fg:x="2068" fg:w="1"/><text x="34.5281%" y="1151.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="34.2781%" y="1125" width="0.0166%" height="15" fill="rgb(210,68,23)" fg:x="2068" fg:w="1"/><text x="34.5281%" y="1135.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="34.2947%" y="1141" width="0.0166%" height="15" fill="rgb(229,180,13)" fg:x="2069" fg:w="1"/><text x="34.5447%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.2947%" y="1125" width="0.0166%" height="15" fill="rgb(236,53,44)" fg:x="2069" fg:w="1"/><text x="34.5447%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.2947%" y="1109" width="0.0166%" height="15" fill="rgb(244,214,29)" fg:x="2069" fg:w="1"/><text x="34.5447%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="34.3113%" y="1141" width="0.0166%" height="15" fill="rgb(220,75,29)" fg:x="2070" fg:w="1"/><text x="34.5613%" y="1151.50"></text></g><g><title>decltype  (4 samples, 0.07%)</title><rect x="34.3279%" y="1125" width="0.0663%" height="15" fill="rgb(214,183,37)" fg:x="2071" fg:w="4"/><text x="34.5779%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 0.07%)</title><rect x="34.3279%" y="1109" width="0.0663%" height="15" fill="rgb(239,117,29)" fg:x="2071" fg:w="4"/><text x="34.5779%" y="1119.50"></text></g><g><title>decltype  (4 samples, 0.07%)</title><rect x="34.3279%" y="1093" width="0.0663%" height="15" fill="rgb(237,171,35)" fg:x="2071" fg:w="4"/><text x="34.5779%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (4 samples, 0.07%)</title><rect x="34.3279%" y="1077" width="0.0663%" height="15" fill="rgb(229,178,53)" fg:x="2071" fg:w="4"/><text x="34.5779%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (4 samples, 0.07%)</title><rect x="34.3279%" y="1061" width="0.0663%" height="15" fill="rgb(210,102,19)" fg:x="2071" fg:w="4"/><text x="34.5779%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="34.3279%" y="1045" width="0.0663%" height="15" fill="rgb(235,127,22)" fg:x="2071" fg:w="4"/><text x="34.5779%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.3444%" y="1029" width="0.0497%" height="15" fill="rgb(244,31,31)" fg:x="2072" fg:w="3"/><text x="34.5944%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.3444%" y="1013" width="0.0497%" height="15" fill="rgb(231,43,21)" fg:x="2072" fg:w="3"/><text x="34.5944%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.3444%" y="997" width="0.0497%" height="15" fill="rgb(217,131,35)" fg:x="2072" fg:w="3"/><text x="34.5944%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="34.3444%" y="981" width="0.0497%" height="15" fill="rgb(221,149,4)" fg:x="2072" fg:w="3"/><text x="34.5944%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="34.3610%" y="965" width="0.0332%" height="15" fill="rgb(232,170,28)" fg:x="2073" fg:w="2"/><text x="34.6110%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.3776%" y="949" width="0.0166%" height="15" fill="rgb(238,56,10)" fg:x="2074" fg:w="1"/><text x="34.6276%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.17%)</title><rect x="34.2450%" y="1157" width="0.1658%" height="15" fill="rgb(235,196,14)" fg:x="2066" fg:w="10"/><text x="34.4950%" y="1167.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.08%)</title><rect x="34.3279%" y="1141" width="0.0829%" height="15" fill="rgb(216,45,48)" fg:x="2071" fg:w="5"/><text x="34.5779%" y="1151.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_Hash_node (1 samples, 0.02%)</title><rect x="34.3942%" y="1125" width="0.0166%" height="15" fill="rgb(238,213,17)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1135.50"></text></g><g><title>std::__detail::_Hash_node_base::_Hash_node_base (1 samples, 0.02%)</title><rect x="34.3942%" y="1109" width="0.0166%" height="15" fill="rgb(212,13,2)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.3942%" y="1093" width="0.0166%" height="15" fill="rgb(240,114,20)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.3942%" y="1077" width="0.0166%" height="15" fill="rgb(228,41,40)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.3942%" y="1061" width="0.0166%" height="15" fill="rgb(244,132,35)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.3942%" y="1045" width="0.0166%" height="15" fill="rgb(253,189,4)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.3942%" y="1029" width="0.0166%" height="15" fill="rgb(224,37,19)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.3942%" y="1013" width="0.0166%" height="15" fill="rgb(235,223,18)" fg:x="2075" fg:w="1"/><text x="34.6442%" y="1023.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="34.4107%" y="1125" width="0.0166%" height="15" fill="rgb(235,163,25)" fg:x="2076" fg:w="1"/><text x="34.6607%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (3 samples, 0.05%)</title><rect x="34.4273%" y="1125" width="0.0497%" height="15" fill="rgb(217,145,28)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1135.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (3 samples, 0.05%)</title><rect x="34.4273%" y="1109" width="0.0497%" height="15" fill="rgb(223,223,32)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (3 samples, 0.05%)</title><rect x="34.4273%" y="1093" width="0.0497%" height="15" fill="rgb(227,189,39)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="34.4273%" y="1077" width="0.0497%" height="15" fill="rgb(248,10,22)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="34.4273%" y="1061" width="0.0497%" height="15" fill="rgb(248,46,39)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="34.4273%" y="1045" width="0.0497%" height="15" fill="rgb(248,113,48)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (3 samples, 0.05%)</title><rect x="34.4273%" y="1029" width="0.0497%" height="15" fill="rgb(245,16,25)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1039.50"></text></g><g><title>Coin::Coin (3 samples, 0.05%)</title><rect x="34.4273%" y="1013" width="0.0497%" height="15" fill="rgb(249,152,16)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1023.50"></text></g><g><title>CTxOut::CTxOut (3 samples, 0.05%)</title><rect x="34.4273%" y="997" width="0.0497%" height="15" fill="rgb(250,16,1)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="1007.50"></text></g><g><title>CScript::CScript (3 samples, 0.05%)</title><rect x="34.4273%" y="981" width="0.0497%" height="15" fill="rgb(249,138,3)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (3 samples, 0.05%)</title><rect x="34.4273%" y="965" width="0.0497%" height="15" fill="rgb(227,71,41)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (3 samples, 0.05%)</title><rect x="34.4273%" y="949" width="0.0497%" height="15" fill="rgb(209,184,23)" fg:x="2077" fg:w="3"/><text x="34.6773%" y="959.50"></text></g><g><title>CCoinsViewCache::FetchCoin (581 samples, 9.63%)</title><rect x="24.8633%" y="1205" width="9.6304%" height="15" fill="rgb(223,215,31)" fg:x="1500" fg:w="581"/><text x="25.1133%" y="1215.50">CCoinsViewCach..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (44 samples, 0.73%)</title><rect x="33.7643%" y="1189" width="0.7293%" height="15" fill="rgb(210,146,28)" fg:x="2037" fg:w="44"/><text x="34.0143%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (44 samples, 0.73%)</title><rect x="33.7643%" y="1173" width="0.7293%" height="15" fill="rgb(209,183,41)" fg:x="2037" fg:w="44"/><text x="34.0143%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.08%)</title><rect x="34.4107%" y="1157" width="0.0829%" height="15" fill="rgb(209,224,45)" fg:x="2076" fg:w="5"/><text x="34.6607%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.08%)</title><rect x="34.4107%" y="1141" width="0.0829%" height="15" fill="rgb(224,209,51)" fg:x="2076" fg:w="5"/><text x="34.6607%" y="1151.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="34.4770%" y="1125" width="0.0166%" height="15" fill="rgb(223,17,39)" fg:x="2080" fg:w="1"/><text x="34.7270%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (5 samples, 0.08%)</title><rect x="34.4936%" y="1205" width="0.0829%" height="15" fill="rgb(234,204,37)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1215.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (5 samples, 0.08%)</title><rect x="34.4936%" y="1189" width="0.0829%" height="15" fill="rgb(236,120,5)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1199.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (5 samples, 0.08%)</title><rect x="34.4936%" y="1173" width="0.0829%" height="15" fill="rgb(248,97,27)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="34.4936%" y="1157" width="0.0829%" height="15" fill="rgb(240,66,17)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="34.4936%" y="1141" width="0.0829%" height="15" fill="rgb(210,79,3)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="34.4936%" y="1125" width="0.0829%" height="15" fill="rgb(214,176,27)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (5 samples, 0.08%)</title><rect x="34.4936%" y="1109" width="0.0829%" height="15" fill="rgb(235,185,3)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1119.50"></text></g><g><title>Coin::Coin (5 samples, 0.08%)</title><rect x="34.4936%" y="1093" width="0.0829%" height="15" fill="rgb(227,24,12)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (5 samples, 0.08%)</title><rect x="34.4936%" y="1077" width="0.0829%" height="15" fill="rgb(252,169,48)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1087.50"></text></g><g><title>CScript::CScript (5 samples, 0.08%)</title><rect x="34.4936%" y="1061" width="0.0829%" height="15" fill="rgb(212,65,1)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (5 samples, 0.08%)</title><rect x="34.4936%" y="1045" width="0.0829%" height="15" fill="rgb(242,39,24)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1055.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (5 samples, 0.08%)</title><rect x="34.4936%" y="1029" width="0.0829%" height="15" fill="rgb(249,32,23)" fg:x="2081" fg:w="5"/><text x="34.7436%" y="1039.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="34.5765%" y="1205" width="0.0166%" height="15" fill="rgb(251,195,23)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1215.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin, true&gt; (1 samples, 0.02%)</title><rect x="34.5765%" y="1189" width="0.0166%" height="15" fill="rgb(236,174,8)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1199.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin, false&gt; (1 samples, 0.02%)</title><rect x="34.5765%" y="1173" width="0.0166%" height="15" fill="rgb(220,197,8)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.5765%" y="1157" width="0.0166%" height="15" fill="rgb(240,108,37)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.5765%" y="1141" width="0.0166%" height="15" fill="rgb(232,176,24)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.5765%" y="1125" width="0.0166%" height="15" fill="rgb(243,35,29)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&gt; (1 samples, 0.02%)</title><rect x="34.5765%" y="1109" width="0.0166%" height="15" fill="rgb(210,37,18)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1119.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="34.5765%" y="1093" width="0.0166%" height="15" fill="rgb(224,184,40)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="34.5765%" y="1077" width="0.0166%" height="15" fill="rgb(236,39,29)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1087.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="34.5765%" y="1061" width="0.0166%" height="15" fill="rgb(232,48,39)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="34.5765%" y="1045" width="0.0166%" height="15" fill="rgb(236,34,42)" fg:x="2086" fg:w="1"/><text x="34.8265%" y="1055.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="34.5931%" y="1205" width="0.0166%" height="15" fill="rgb(243,106,37)" fg:x="2087" fg:w="1"/><text x="34.8431%" y="1215.50"></text></g><g><title>CCoinsViewCache::HaveInputs (591 samples, 9.80%)</title><rect x="24.8301%" y="1237" width="9.7961%" height="15" fill="rgb(218,96,6)" fg:x="1498" fg:w="591"/><text x="25.0801%" y="1247.50">CCoinsViewCach..</text></g><g><title>CCoinsViewCache::HaveCoin (590 samples, 9.78%)</title><rect x="24.8467%" y="1221" width="9.7795%" height="15" fill="rgb(235,130,12)" fg:x="1499" fg:w="590"/><text x="25.0967%" y="1231.50">CCoinsViewCach..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="34.6096%" y="1205" width="0.0166%" height="15" fill="rgb(231,95,0)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="34.6096%" y="1189" width="0.0166%" height="15" fill="rgb(228,12,23)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="34.6096%" y="1173" width="0.0166%" height="15" fill="rgb(216,12,1)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1183.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="34.6096%" y="1157" width="0.0166%" height="15" fill="rgb(219,59,3)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1167.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="34.6096%" y="1141" width="0.0166%" height="15" fill="rgb(215,208,46)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1151.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="34.6096%" y="1125" width="0.0166%" height="15" fill="rgb(254,224,29)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="34.6096%" y="1109" width="0.0166%" height="15" fill="rgb(232,14,29)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="34.6096%" y="1093" width="0.0166%" height="15" fill="rgb(208,45,52)" fg:x="2088" fg:w="1"/><text x="34.8596%" y="1103.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="34.6262%" y="1237" width="0.0166%" height="15" fill="rgb(234,191,28)" fg:x="2089" fg:w="1"/><text x="34.8762%" y="1247.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.12%)</title><rect x="34.6428%" y="1237" width="0.1160%" height="15" fill="rgb(244,67,43)" fg:x="2090" fg:w="7"/><text x="34.8928%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.7423%" y="1221" width="0.0166%" height="15" fill="rgb(236,189,24)" fg:x="2096" fg:w="1"/><text x="34.9923%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.7423%" y="1205" width="0.0166%" height="15" fill="rgb(239,214,33)" fg:x="2096" fg:w="1"/><text x="34.9923%" y="1215.50"></text></g><g><title>Consensus::CheckTxInputs (636 samples, 10.54%)</title><rect x="24.2334%" y="1253" width="10.5420%" height="15" fill="rgb(226,176,41)" fg:x="1462" fg:w="636"/><text x="24.4834%" y="1263.50">Consensus::Chec..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="34.7588%" y="1237" width="0.0166%" height="15" fill="rgb(248,47,8)" fg:x="2097" fg:w="1"/><text x="35.0088%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="34.7588%" y="1221" width="0.0166%" height="15" fill="rgb(218,81,44)" fg:x="2097" fg:w="1"/><text x="35.0088%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="34.7588%" y="1205" width="0.0166%" height="15" fill="rgb(213,98,6)" fg:x="2097" fg:w="1"/><text x="35.0088%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="34.7588%" y="1189" width="0.0166%" height="15" fill="rgb(222,85,22)" fg:x="2097" fg:w="1"/><text x="35.0088%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="34.7588%" y="1173" width="0.0166%" height="15" fill="rgb(239,46,39)" fg:x="2097" fg:w="1"/><text x="35.0088%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="34.7754%" y="1189" width="0.0166%" height="15" fill="rgb(237,12,29)" fg:x="2098" fg:w="1"/><text x="35.0254%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="34.7754%" y="1173" width="0.0166%" height="15" fill="rgb(214,77,8)" fg:x="2098" fg:w="1"/><text x="35.0254%" y="1183.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="34.7754%" y="1157" width="0.0166%" height="15" fill="rgb(217,168,37)" fg:x="2098" fg:w="1"/><text x="35.0254%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="34.7754%" y="1237" width="0.0497%" height="15" fill="rgb(221,217,23)" fg:x="2098" fg:w="3"/><text x="35.0254%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (3 samples, 0.05%)</title><rect x="34.7754%" y="1221" width="0.0497%" height="15" fill="rgb(243,229,36)" fg:x="2098" fg:w="3"/><text x="35.0254%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (3 samples, 0.05%)</title><rect x="34.7754%" y="1205" width="0.0497%" height="15" fill="rgb(251,163,40)" fg:x="2098" fg:w="3"/><text x="35.0254%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="34.7920%" y="1189" width="0.0332%" height="15" fill="rgb(237,222,12)" fg:x="2099" fg:w="2"/><text x="35.0420%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="34.7920%" y="1173" width="0.0332%" height="15" fill="rgb(248,132,6)" fg:x="2099" fg:w="2"/><text x="35.0420%" y="1183.50"></text></g><g><title>CTransaction::GetValueOut (2 samples, 0.03%)</title><rect x="34.8251%" y="1237" width="0.0332%" height="15" fill="rgb(227,167,50)" fg:x="2101" fg:w="2"/><text x="35.0751%" y="1247.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="34.8583%" y="1237" width="0.0166%" height="15" fill="rgb(242,84,37)" fg:x="2103" fg:w="1"/><text x="35.1083%" y="1247.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="34.8583%" y="1221" width="0.0166%" height="15" fill="rgb(212,4,50)" fg:x="2103" fg:w="1"/><text x="35.1083%" y="1231.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.02%)</title><rect x="34.8583%" y="1205" width="0.0166%" height="15" fill="rgb(230,228,32)" fg:x="2103" fg:w="1"/><text x="35.1083%" y="1215.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="34.8749%" y="1237" width="0.0166%" height="15" fill="rgb(248,217,23)" fg:x="2104" fg:w="1"/><text x="35.1249%" y="1247.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="34.8749%" y="1221" width="0.0166%" height="15" fill="rgb(238,197,32)" fg:x="2104" fg:w="1"/><text x="35.1249%" y="1231.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="35.0075%" y="1221" width="0.0166%" height="15" fill="rgb(236,106,1)" fg:x="2112" fg:w="1"/><text x="35.2575%" y="1231.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="35.0075%" y="1205" width="0.0166%" height="15" fill="rgb(219,228,13)" fg:x="2112" fg:w="1"/><text x="35.2575%" y="1215.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="35.0075%" y="1189" width="0.0166%" height="15" fill="rgb(238,30,35)" fg:x="2112" fg:w="1"/><text x="35.2575%" y="1199.50"></text></g><g><title>EvaluateSequenceLocks (18 samples, 0.30%)</title><rect x="34.7754%" y="1253" width="0.2984%" height="15" fill="rgb(236,70,23)" fg:x="2098" fg:w="18"/><text x="35.0254%" y="1263.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.18%)</title><rect x="34.8914%" y="1237" width="0.1823%" height="15" fill="rgb(249,104,48)" fg:x="2105" fg:w="11"/><text x="35.1414%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="35.0240%" y="1221" width="0.0497%" height="15" fill="rgb(254,117,50)" fg:x="2113" fg:w="3"/><text x="35.2740%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="35.0240%" y="1205" width="0.0497%" height="15" fill="rgb(223,152,4)" fg:x="2113" fg:w="3"/><text x="35.2740%" y="1215.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="35.0738%" y="1141" width="0.0166%" height="15" fill="rgb(245,6,2)" fg:x="2116" fg:w="1"/><text x="35.3238%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="35.0738%" y="1221" width="0.0332%" height="15" fill="rgb(249,150,24)" fg:x="2116" fg:w="2"/><text x="35.3238%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (2 samples, 0.03%)</title><rect x="35.0738%" y="1205" width="0.0332%" height="15" fill="rgb(228,185,42)" fg:x="2116" fg:w="2"/><text x="35.3238%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (2 samples, 0.03%)</title><rect x="35.0738%" y="1189" width="0.0332%" height="15" fill="rgb(226,39,33)" fg:x="2116" fg:w="2"/><text x="35.3238%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="35.0738%" y="1173" width="0.0332%" height="15" fill="rgb(221,166,19)" fg:x="2116" fg:w="2"/><text x="35.3238%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="35.0738%" y="1157" width="0.0332%" height="15" fill="rgb(209,109,2)" fg:x="2116" fg:w="2"/><text x="35.3238%" y="1167.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="35.0903%" y="1141" width="0.0166%" height="15" fill="rgb(252,216,26)" fg:x="2117" fg:w="1"/><text x="35.3403%" y="1151.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="35.1069%" y="1221" width="0.0166%" height="15" fill="rgb(227,173,36)" fg:x="2118" fg:w="1"/><text x="35.3569%" y="1231.50"></text></g><g><title>CCoinsViewCache::AccessCoin (4 samples, 0.07%)</title><rect x="35.0738%" y="1237" width="0.0663%" height="15" fill="rgb(209,90,7)" fg:x="2116" fg:w="4"/><text x="35.3238%" y="1247.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="35.1235%" y="1221" width="0.0166%" height="15" fill="rgb(250,194,11)" fg:x="2119" fg:w="1"/><text x="35.3735%" y="1231.50"></text></g><g><title>CScript::IsPayToScriptHash (1 samples, 0.02%)</title><rect x="35.1401%" y="1237" width="0.0166%" height="15" fill="rgb(220,72,50)" fg:x="2120" fg:w="1"/><text x="35.3901%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.1732%" y="1173" width="0.0166%" height="15" fill="rgb(222,106,48)" fg:x="2122" fg:w="1"/><text x="35.4232%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.1732%" y="1157" width="0.0166%" height="15" fill="rgb(216,220,45)" fg:x="2122" fg:w="1"/><text x="35.4232%" y="1167.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="35.1732%" y="1141" width="0.0166%" height="15" fill="rgb(234,112,18)" fg:x="2122" fg:w="1"/><text x="35.4232%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="35.1898%" y="1173" width="0.0166%" height="15" fill="rgb(206,179,9)" fg:x="2123" fg:w="1"/><text x="35.4398%" y="1183.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.07%)</title><rect x="35.1566%" y="1221" width="0.0663%" height="15" fill="rgb(215,115,40)" fg:x="2121" fg:w="4"/><text x="35.4066%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (4 samples, 0.07%)</title><rect x="35.1566%" y="1205" width="0.0663%" height="15" fill="rgb(222,69,34)" fg:x="2121" fg:w="4"/><text x="35.4066%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (4 samples, 0.07%)</title><rect x="35.1566%" y="1189" width="0.0663%" height="15" fill="rgb(209,161,10)" fg:x="2121" fg:w="4"/><text x="35.4066%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="35.2064%" y="1173" width="0.0166%" height="15" fill="rgb(217,6,38)" fg:x="2124" fg:w="1"/><text x="35.4564%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="35.2064%" y="1157" width="0.0166%" height="15" fill="rgb(229,229,48)" fg:x="2124" fg:w="1"/><text x="35.4564%" y="1167.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="35.2229%" y="1221" width="0.0166%" height="15" fill="rgb(225,21,28)" fg:x="2125" fg:w="1"/><text x="35.4729%" y="1231.50"></text></g><g><title>CScript::IsPayToScriptHash (1 samples, 0.02%)</title><rect x="35.2229%" y="1205" width="0.0166%" height="15" fill="rgb(206,33,13)" fg:x="2125" fg:w="1"/><text x="35.4729%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="35.2229%" y="1189" width="0.0166%" height="15" fill="rgb(242,178,17)" fg:x="2125" fg:w="1"/><text x="35.4729%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="35.2229%" y="1173" width="0.0166%" height="15" fill="rgb(220,162,5)" fg:x="2125" fg:w="1"/><text x="35.4729%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (1 samples, 0.02%)</title><rect x="35.2229%" y="1157" width="0.0166%" height="15" fill="rgb(210,33,43)" fg:x="2125" fg:w="1"/><text x="35.4729%" y="1167.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="35.2395%" y="1221" width="0.0166%" height="15" fill="rgb(216,116,54)" fg:x="2126" fg:w="1"/><text x="35.4895%" y="1231.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.2395%" y="1205" width="0.0166%" height="15" fill="rgb(249,92,24)" fg:x="2126" fg:w="1"/><text x="35.4895%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.2395%" y="1189" width="0.0166%" height="15" fill="rgb(231,189,14)" fg:x="2126" fg:w="1"/><text x="35.4895%" y="1199.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.2395%" y="1173" width="0.0166%" height="15" fill="rgb(230,8,41)" fg:x="2126" fg:w="1"/><text x="35.4895%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="35.2561%" y="1221" width="0.0166%" height="15" fill="rgb(249,7,27)" fg:x="2127" fg:w="1"/><text x="35.5061%" y="1231.50"></text></g><g><title>GetScriptOp (2 samples, 0.03%)</title><rect x="35.2727%" y="1221" width="0.0332%" height="15" fill="rgb(232,86,5)" fg:x="2128" fg:w="2"/><text x="35.5227%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1205" width="0.0166%" height="15" fill="rgb(224,175,18)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1189" width="0.0166%" height="15" fill="rgb(220,129,12)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1199.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1173" width="0.0166%" height="15" fill="rgb(210,19,36)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1157" width="0.0166%" height="15" fill="rgb(219,96,14)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1167.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1141" width="0.0166%" height="15" fill="rgb(249,106,1)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1125" width="0.0166%" height="15" fill="rgb(249,155,20)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1135.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1109" width="0.0166%" height="15" fill="rgb(244,168,9)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1093" width="0.0166%" height="15" fill="rgb(216,23,50)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1077" width="0.0166%" height="15" fill="rgb(224,219,20)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1061" width="0.0166%" height="15" fill="rgb(222,156,15)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="35.2892%" y="1045" width="0.0166%" height="15" fill="rgb(231,97,17)" fg:x="2129" fg:w="1"/><text x="35.5392%" y="1055.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.25%)</title><rect x="35.3058%" y="1221" width="0.2486%" height="15" fill="rgb(218,70,48)" fg:x="2130" fg:w="15"/><text x="35.5558%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="35.4550%" y="1205" width="0.0995%" height="15" fill="rgb(212,196,52)" fg:x="2139" fg:w="6"/><text x="35.7050%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.10%)</title><rect x="35.4550%" y="1189" width="0.0995%" height="15" fill="rgb(243,203,18)" fg:x="2139" fg:w="6"/><text x="35.7050%" y="1199.50"></text></g><g><title>CountWitnessSigOps (25 samples, 0.41%)</title><rect x="35.1566%" y="1237" width="0.4144%" height="15" fill="rgb(252,125,41)" fg:x="2121" fg:w="25"/><text x="35.4066%" y="1247.50"></text></g><g><title>WitnessSigOps (1 samples, 0.02%)</title><rect x="35.5545%" y="1221" width="0.0166%" height="15" fill="rgb(223,180,33)" fg:x="2145" fg:w="1"/><text x="35.8045%" y="1231.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.5545%" y="1205" width="0.0166%" height="15" fill="rgb(254,159,46)" fg:x="2145" fg:w="1"/><text x="35.8045%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.5545%" y="1189" width="0.0166%" height="15" fill="rgb(254,38,10)" fg:x="2145" fg:w="1"/><text x="35.8045%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="35.5545%" y="1173" width="0.0166%" height="15" fill="rgb(208,217,32)" fg:x="2145" fg:w="1"/><text x="35.8045%" y="1183.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="35.5545%" y="1157" width="0.0166%" height="15" fill="rgb(221,120,13)" fg:x="2145" fg:w="1"/><text x="35.8045%" y="1167.50"></text></g><g><title>CBlockIndex::GetBlockTime (1 samples, 0.02%)</title><rect x="35.5876%" y="1205" width="0.0166%" height="15" fill="rgb(246,54,52)" fg:x="2147" fg:w="1"/><text x="35.8376%" y="1215.50"></text></g><g><title>long std::__lg&lt;long&gt; (1 samples, 0.02%)</title><rect x="35.6042%" y="1173" width="0.0166%" height="15" fill="rgb(242,34,25)" fg:x="2148" fg:w="1"/><text x="35.8542%" y="1183.50"></text></g><g><title>int std::__bit_width&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.6042%" y="1157" width="0.0166%" height="15" fill="rgb(247,209,9)" fg:x="2148" fg:w="1"/><text x="35.8542%" y="1167.50"></text></g><g><title>int std::__countl_zero&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.6042%" y="1141" width="0.0166%" height="15" fill="rgb(228,71,26)" fg:x="2148" fg:w="1"/><text x="35.8542%" y="1151.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (4 samples, 0.07%)</title><rect x="35.5710%" y="1221" width="0.0663%" height="15" fill="rgb(222,145,49)" fg:x="2146" fg:w="4"/><text x="35.8210%" y="1231.50"></text></g><g><title>void std::sort&lt;long*&gt; (2 samples, 0.03%)</title><rect x="35.6042%" y="1205" width="0.0332%" height="15" fill="rgb(218,121,17)" fg:x="2148" fg:w="2"/><text x="35.8542%" y="1215.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.03%)</title><rect x="35.6042%" y="1189" width="0.0332%" height="15" fill="rgb(244,50,7)" fg:x="2148" fg:w="2"/><text x="35.8542%" y="1199.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="35.6208%" y="1173" width="0.0166%" height="15" fill="rgb(246,229,37)" fg:x="2149" fg:w="1"/><text x="35.8708%" y="1183.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="35.6208%" y="1157" width="0.0166%" height="15" fill="rgb(225,18,5)" fg:x="2149" fg:w="1"/><text x="35.8708%" y="1167.50"></text></g><g><title>long std::__lg&lt;long&gt; (1 samples, 0.02%)</title><rect x="35.6373%" y="1141" width="0.0166%" height="15" fill="rgb(213,204,8)" fg:x="2150" fg:w="1"/><text x="35.8873%" y="1151.50"></text></g><g><title>int std::__bit_width&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.6373%" y="1125" width="0.0166%" height="15" fill="rgb(238,103,6)" fg:x="2150" fg:w="1"/><text x="35.8873%" y="1135.50"></text></g><g><title>int std::__countl_zero&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.6373%" y="1109" width="0.0166%" height="15" fill="rgb(222,25,35)" fg:x="2150" fg:w="1"/><text x="35.8873%" y="1119.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (3 samples, 0.05%)</title><rect x="35.6373%" y="1189" width="0.0497%" height="15" fill="rgb(213,203,35)" fg:x="2150" fg:w="3"/><text x="35.8873%" y="1199.50"></text></g><g><title>void std::sort&lt;long*&gt; (3 samples, 0.05%)</title><rect x="35.6373%" y="1173" width="0.0497%" height="15" fill="rgb(221,79,53)" fg:x="2150" fg:w="3"/><text x="35.8873%" y="1183.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (3 samples, 0.05%)</title><rect x="35.6373%" y="1157" width="0.0497%" height="15" fill="rgb(243,200,35)" fg:x="2150" fg:w="3"/><text x="35.8873%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.03%)</title><rect x="35.6539%" y="1141" width="0.0332%" height="15" fill="rgb(248,60,25)" fg:x="2151" fg:w="2"/><text x="35.9039%" y="1151.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.03%)</title><rect x="35.6539%" y="1125" width="0.0332%" height="15" fill="rgb(227,53,46)" fg:x="2151" fg:w="2"/><text x="35.9039%" y="1135.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;long*, __gnu_cxx::__ops::_Val_less_iter&gt; (2 samples, 0.03%)</title><rect x="35.6539%" y="1109" width="0.0332%" height="15" fill="rgb(216,120,32)" fg:x="2151" fg:w="2"/><text x="35.9039%" y="1119.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="35.7202%" y="1173" width="0.0166%" height="15" fill="rgb(220,134,1)" fg:x="2155" fg:w="1"/><text x="35.9702%" y="1183.50"></text></g><g><title>CScript::GetSigOpCount (4 samples, 0.07%)</title><rect x="35.6871%" y="1189" width="0.0663%" height="15" fill="rgb(237,168,5)" fg:x="2153" fg:w="4"/><text x="35.9371%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::begin (1 samples, 0.02%)</title><rect x="35.7368%" y="1173" width="0.0166%" height="15" fill="rgb(231,100,33)" fg:x="2156" fg:w="1"/><text x="35.9868%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="35.7368%" y="1157" width="0.0166%" height="15" fill="rgb(236,177,47)" fg:x="2156" fg:w="1"/><text x="35.9868%" y="1167.50"></text></g><g><title>GetScriptOp (7 samples, 0.12%)</title><rect x="35.7534%" y="1189" width="0.1160%" height="15" fill="rgb(235,7,49)" fg:x="2157" fg:w="7"/><text x="36.0034%" y="1199.50"></text></g><g><title>operator- (1 samples, 0.02%)</title><rect x="35.8528%" y="1173" width="0.0166%" height="15" fill="rgb(232,119,22)" fg:x="2163" fg:w="1"/><text x="36.1028%" y="1183.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="35.8694%" y="1189" width="0.0166%" height="15" fill="rgb(254,73,53)" fg:x="2164" fg:w="1"/><text x="36.1194%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (16 samples, 0.27%)</title><rect x="35.6373%" y="1221" width="0.2652%" height="15" fill="rgb(251,35,20)" fg:x="2150" fg:w="16"/><text x="35.8873%" y="1231.50"></text></g><g><title>CScript::GetOp (16 samples, 0.27%)</title><rect x="35.6373%" y="1205" width="0.2652%" height="15" fill="rgb(241,119,20)" fg:x="2150" fg:w="16"/><text x="35.8873%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="35.8860%" y="1189" width="0.0166%" height="15" fill="rgb(207,102,14)" fg:x="2165" fg:w="1"/><text x="36.1360%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="35.8860%" y="1173" width="0.0166%" height="15" fill="rgb(248,201,50)" fg:x="2165" fg:w="1"/><text x="36.1360%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="35.8860%" y="1157" width="0.0166%" height="15" fill="rgb(222,185,44)" fg:x="2165" fg:w="1"/><text x="36.1360%" y="1167.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="35.9025%" y="1221" width="0.0166%" height="15" fill="rgb(218,107,18)" fg:x="2166" fg:w="1"/><text x="36.1525%" y="1231.50"></text></g><g><title>TxValidationState::~TxValidationState (1 samples, 0.02%)</title><rect x="35.9025%" y="1205" width="0.0166%" height="15" fill="rgb(237,177,39)" fg:x="2166" fg:w="1"/><text x="36.1525%" y="1215.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::~ValidationState (1 samples, 0.02%)</title><rect x="35.9025%" y="1189" width="0.0166%" height="15" fill="rgb(246,69,6)" fg:x="2166" fg:w="1"/><text x="36.1525%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="35.9025%" y="1173" width="0.0166%" height="15" fill="rgb(234,208,37)" fg:x="2166" fg:w="1"/><text x="36.1525%" y="1183.50"></text></g><g><title>GetLegacySigOpCount (2 samples, 0.03%)</title><rect x="35.9191%" y="1221" width="0.0332%" height="15" fill="rgb(225,4,6)" fg:x="2167" fg:w="2"/><text x="36.1691%" y="1231.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (1 samples, 0.02%)</title><rect x="35.9357%" y="1205" width="0.0166%" height="15" fill="rgb(233,45,0)" fg:x="2168" fg:w="1"/><text x="36.1857%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="35.9357%" y="1189" width="0.0166%" height="15" fill="rgb(226,136,5)" fg:x="2168" fg:w="1"/><text x="36.1857%" y="1199.50"></text></g><g><title>GetScriptOp (4 samples, 0.07%)</title><rect x="35.9523%" y="1221" width="0.0663%" height="15" fill="rgb(211,91,47)" fg:x="2169" fg:w="4"/><text x="36.2023%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (29 samples, 0.48%)</title><rect x="35.5710%" y="1237" width="0.4807%" height="15" fill="rgb(242,88,51)" fg:x="2146" fg:w="29"/><text x="35.8210%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.03%)</title><rect x="36.0186%" y="1221" width="0.0332%" height="15" fill="rgb(230,91,28)" fg:x="2173" fg:w="2"/><text x="36.2686%" y="1231.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="36.0517%" y="1125" width="0.0166%" height="15" fill="rgb(254,186,29)" fg:x="2175" fg:w="1"/><text x="36.3017%" y="1135.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="36.0517%" y="1109" width="0.0166%" height="15" fill="rgb(238,6,4)" fg:x="2175" fg:w="1"/><text x="36.3017%" y="1119.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="36.0517%" y="1093" width="0.0166%" height="15" fill="rgb(221,151,16)" fg:x="2175" fg:w="1"/><text x="36.3017%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2 samples, 0.03%)</title><rect x="36.0517%" y="1141" width="0.0332%" height="15" fill="rgb(251,143,52)" fg:x="2175" fg:w="2"/><text x="36.3017%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.0683%" y="1125" width="0.0166%" height="15" fill="rgb(206,90,15)" fg:x="2176" fg:w="1"/><text x="36.3183%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="36.0683%" y="1109" width="0.0166%" height="15" fill="rgb(218,35,8)" fg:x="2176" fg:w="1"/><text x="36.3183%" y="1119.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="36.0683%" y="1093" width="0.0166%" height="15" fill="rgb(239,215,6)" fg:x="2176" fg:w="1"/><text x="36.3183%" y="1103.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.0683%" y="1077" width="0.0166%" height="15" fill="rgb(245,116,39)" fg:x="2176" fg:w="1"/><text x="36.3183%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="36.0517%" y="1189" width="0.0497%" height="15" fill="rgb(242,65,28)" fg:x="2175" fg:w="3"/><text x="36.3017%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (3 samples, 0.05%)</title><rect x="36.0517%" y="1173" width="0.0497%" height="15" fill="rgb(252,132,53)" fg:x="2175" fg:w="3"/><text x="36.3017%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (3 samples, 0.05%)</title><rect x="36.0517%" y="1157" width="0.0497%" height="15" fill="rgb(224,159,50)" fg:x="2175" fg:w="3"/><text x="36.3017%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="36.0849%" y="1141" width="0.0166%" height="15" fill="rgb(224,93,4)" fg:x="2177" fg:w="1"/><text x="36.3349%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="36.0849%" y="1125" width="0.0166%" height="15" fill="rgb(208,81,34)" fg:x="2177" fg:w="1"/><text x="36.3349%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="36.0849%" y="1109" width="0.0166%" height="15" fill="rgb(233,92,54)" fg:x="2177" fg:w="1"/><text x="36.3349%" y="1119.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="36.1014%" y="1189" width="0.0166%" height="15" fill="rgb(237,21,14)" fg:x="2178" fg:w="1"/><text x="36.3514%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="36.1014%" y="1173" width="0.0166%" height="15" fill="rgb(249,128,51)" fg:x="2178" fg:w="1"/><text x="36.3514%" y="1183.50"></text></g><g><title>CCoinsViewCache::AccessCoin (5 samples, 0.08%)</title><rect x="36.0517%" y="1205" width="0.0829%" height="15" fill="rgb(223,129,24)" fg:x="2175" fg:w="5"/><text x="36.3017%" y="1215.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="36.1180%" y="1189" width="0.0166%" height="15" fill="rgb(231,168,25)" fg:x="2179" fg:w="1"/><text x="36.3680%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="36.1180%" y="1173" width="0.0166%" height="15" fill="rgb(224,39,20)" fg:x="2179" fg:w="1"/><text x="36.3680%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="36.1180%" y="1157" width="0.0166%" height="15" fill="rgb(225,152,53)" fg:x="2179" fg:w="1"/><text x="36.3680%" y="1167.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="36.1346%" y="1189" width="0.0166%" height="15" fill="rgb(252,17,24)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1199.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="36.1346%" y="1173" width="0.0166%" height="15" fill="rgb(250,114,30)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1183.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="36.1346%" y="1157" width="0.0166%" height="15" fill="rgb(229,5,4)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1167.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1141" width="0.0166%" height="15" fill="rgb(225,176,49)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1151.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1125" width="0.0166%" height="15" fill="rgb(224,221,49)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1135.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1109" width="0.0166%" height="15" fill="rgb(253,169,27)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1119.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1093" width="0.0166%" height="15" fill="rgb(211,206,16)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1103.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1077" width="0.0166%" height="15" fill="rgb(244,87,35)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1087.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1061" width="0.0166%" height="15" fill="rgb(246,28,10)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1071.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1045" width="0.0166%" height="15" fill="rgb(229,12,44)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1029" width="0.0166%" height="15" fill="rgb(210,145,37)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1039.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="1013" width="0.0166%" height="15" fill="rgb(227,112,52)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1023.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="997" width="0.0166%" height="15" fill="rgb(238,155,34)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="1007.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.1346%" y="981" width="0.0166%" height="15" fill="rgb(239,226,36)" fg:x="2180" fg:w="1"/><text x="36.3846%" y="991.50"></text></g><g><title>CScript::GetSigOpCount (2 samples, 0.03%)</title><rect x="36.1346%" y="1205" width="0.0332%" height="15" fill="rgb(230,16,23)" fg:x="2180" fg:w="2"/><text x="36.3846%" y="1215.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="36.1512%" y="1189" width="0.0166%" height="15" fill="rgb(236,171,36)" fg:x="2181" fg:w="1"/><text x="36.4012%" y="1199.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="36.1677%" y="1205" width="0.0166%" height="15" fill="rgb(221,22,14)" fg:x="2182" fg:w="1"/><text x="36.4177%" y="1215.50"></text></g><g><title>GetP2SHSigOpCount (9 samples, 0.15%)</title><rect x="36.0517%" y="1237" width="0.1492%" height="15" fill="rgb(242,43,11)" fg:x="2175" fg:w="9"/><text x="36.3017%" y="1247.50"></text></g><g><title>GetP2SHSigOpCount (9 samples, 0.15%)</title><rect x="36.0517%" y="1221" width="0.1492%" height="15" fill="rgb(232,69,23)" fg:x="2175" fg:w="9"/><text x="36.3017%" y="1231.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.1843%" y="1205" width="0.0166%" height="15" fill="rgb(216,180,54)" fg:x="2183" fg:w="1"/><text x="36.4343%" y="1215.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="36.2009%" y="1237" width="0.0166%" height="15" fill="rgb(216,5,24)" fg:x="2184" fg:w="1"/><text x="36.4509%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="36.2009%" y="1221" width="0.0166%" height="15" fill="rgb(225,89,9)" fg:x="2184" fg:w="1"/><text x="36.4509%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="36.2009%" y="1205" width="0.0166%" height="15" fill="rgb(243,75,33)" fg:x="2184" fg:w="1"/><text x="36.4509%" y="1215.50"></text></g><g><title>GetTransactionSigOpCost (70 samples, 1.16%)</title><rect x="35.0738%" y="1253" width="1.1603%" height="15" fill="rgb(247,141,45)" fg:x="2116" fg:w="70"/><text x="35.3238%" y="1263.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.2175%" y="1237" width="0.0166%" height="15" fill="rgb(232,177,36)" fg:x="2185" fg:w="1"/><text x="36.4675%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.2175%" y="1221" width="0.0166%" height="15" fill="rgb(219,125,36)" fg:x="2185" fg:w="1"/><text x="36.4675%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="36.2175%" y="1205" width="0.0166%" height="15" fill="rgb(227,94,9)" fg:x="2185" fg:w="1"/><text x="36.4675%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.2340%" y="1237" width="0.0166%" height="15" fill="rgb(240,34,52)" fg:x="2186" fg:w="1"/><text x="36.4840%" y="1247.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.02%)</title><rect x="36.2506%" y="1237" width="0.0166%" height="15" fill="rgb(216,45,12)" fg:x="2187" fg:w="1"/><text x="36.5006%" y="1247.50"></text></g><g><title>SequenceLocks (3 samples, 0.05%)</title><rect x="36.2340%" y="1253" width="0.0497%" height="15" fill="rgb(246,21,19)" fg:x="2186" fg:w="3"/><text x="36.4840%" y="1263.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.2672%" y="1237" width="0.0166%" height="15" fill="rgb(213,98,42)" fg:x="2188" fg:w="1"/><text x="36.5172%" y="1247.50"></text></g><g><title>SipHashUint256Extra (14 samples, 0.23%)</title><rect x="36.2838%" y="1253" width="0.2321%" height="15" fill="rgb(250,136,47)" fg:x="2189" fg:w="14"/><text x="36.5338%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="36.4661%" y="1237" width="0.0497%" height="15" fill="rgb(251,124,27)" fg:x="2200" fg:w="3"/><text x="36.7161%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="36.4661%" y="1221" width="0.0497%" height="15" fill="rgb(229,180,14)" fg:x="2200" fg:w="3"/><text x="36.7161%" y="1231.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="36.5158%" y="1205" width="0.0166%" height="15" fill="rgb(245,216,25)" fg:x="2203" fg:w="1"/><text x="36.7658%" y="1215.50"></text></g><g><title>EvaluateSequenceLocks (1 samples, 0.02%)</title><rect x="36.5324%" y="1205" width="0.0166%" height="15" fill="rgb(251,43,5)" fg:x="2204" fg:w="1"/><text x="36.7824%" y="1215.50"></text></g><g><title>TxValidationState::~TxValidationState (3 samples, 0.05%)</title><rect x="36.5158%" y="1253" width="0.0497%" height="15" fill="rgb(250,128,24)" fg:x="2203" fg:w="3"/><text x="36.7658%" y="1263.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::~ValidationState (3 samples, 0.05%)</title><rect x="36.5158%" y="1237" width="0.0497%" height="15" fill="rgb(217,117,27)" fg:x="2203" fg:w="3"/><text x="36.7658%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (3 samples, 0.05%)</title><rect x="36.5158%" y="1221" width="0.0497%" height="15" fill="rgb(245,147,4)" fg:x="2203" fg:w="3"/><text x="36.7658%" y="1231.50"></text></g><g><title>WitnessSigOps (1 samples, 0.02%)</title><rect x="36.5490%" y="1205" width="0.0166%" height="15" fill="rgb(242,201,35)" fg:x="2205" fg:w="1"/><text x="36.7990%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.07%)</title><rect x="36.5656%" y="1237" width="0.0663%" height="15" fill="rgb(218,181,1)" fg:x="2206" fg:w="4"/><text x="36.8156%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="36.6153%" y="1221" width="0.0166%" height="15" fill="rgb(222,6,29)" fg:x="2209" fg:w="1"/><text x="36.8653%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="36.6153%" y="1205" width="0.0166%" height="15" fill="rgb(208,186,3)" fg:x="2209" fg:w="1"/><text x="36.8653%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="36.6153%" y="1189" width="0.0166%" height="15" fill="rgb(216,36,26)" fg:x="2209" fg:w="1"/><text x="36.8653%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="36.6153%" y="1173" width="0.0166%" height="15" fill="rgb(248,201,23)" fg:x="2209" fg:w="1"/><text x="36.8653%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="36.6319%" y="1221" width="0.0166%" height="15" fill="rgb(251,170,31)" fg:x="2210" fg:w="1"/><text x="36.8819%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="36.6484%" y="1189" width="0.0166%" height="15" fill="rgb(207,110,25)" fg:x="2211" fg:w="1"/><text x="36.8984%" y="1199.50"></text></g><g><title>CCoinsViewCache::SpendCoin (4 samples, 0.07%)</title><rect x="36.6319%" y="1237" width="0.0663%" height="15" fill="rgb(250,54,15)" fg:x="2210" fg:w="4"/><text x="36.8819%" y="1247.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (3 samples, 0.05%)</title><rect x="36.6484%" y="1221" width="0.0497%" height="15" fill="rgb(227,68,33)" fg:x="2211" fg:w="3"/><text x="36.8984%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (3 samples, 0.05%)</title><rect x="36.6484%" y="1205" width="0.0497%" height="15" fill="rgb(238,34,41)" fg:x="2211" fg:w="3"/><text x="36.8984%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (2 samples, 0.03%)</title><rect x="36.6650%" y="1189" width="0.0332%" height="15" fill="rgb(220,11,15)" fg:x="2212" fg:w="2"/><text x="36.9150%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="36.6650%" y="1173" width="0.0332%" height="15" fill="rgb(246,111,35)" fg:x="2212" fg:w="2"/><text x="36.9150%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="36.6650%" y="1157" width="0.0332%" height="15" fill="rgb(209,88,53)" fg:x="2212" fg:w="2"/><text x="36.9150%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="36.6650%" y="1141" width="0.0332%" height="15" fill="rgb(231,185,47)" fg:x="2212" fg:w="2"/><text x="36.9150%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.03%)</title><rect x="36.6650%" y="1125" width="0.0332%" height="15" fill="rgb(233,154,1)" fg:x="2212" fg:w="2"/><text x="36.9150%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.03%)</title><rect x="36.6650%" y="1109" width="0.0332%" height="15" fill="rgb(225,15,46)" fg:x="2212" fg:w="2"/><text x="36.9150%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="36.6816%" y="1093" width="0.0166%" height="15" fill="rgb(211,135,41)" fg:x="2213" fg:w="1"/><text x="36.9316%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="36.6816%" y="1077" width="0.0166%" height="15" fill="rgb(208,54,0)" fg:x="2213" fg:w="1"/><text x="36.9316%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="36.6816%" y="1061" width="0.0166%" height="15" fill="rgb(244,136,14)" fg:x="2213" fg:w="1"/><text x="36.9316%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="36.6816%" y="1045" width="0.0166%" height="15" fill="rgb(241,56,14)" fg:x="2213" fg:w="1"/><text x="36.9316%" y="1055.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="36.6816%" y="1029" width="0.0166%" height="15" fill="rgb(205,80,24)" fg:x="2213" fg:w="1"/><text x="36.9316%" y="1039.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="36.6982%" y="1237" width="0.0166%" height="15" fill="rgb(220,57,4)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1247.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="36.6982%" y="1221" width="0.0166%" height="15" fill="rgb(226,193,50)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1231.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="36.6982%" y="1205" width="0.0166%" height="15" fill="rgb(231,168,22)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1215.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="36.6982%" y="1189" width="0.0166%" height="15" fill="rgb(254,215,14)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1199.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="36.6982%" y="1173" width="0.0166%" height="15" fill="rgb(211,115,16)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1183.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="36.6982%" y="1157" width="0.0166%" height="15" fill="rgb(236,210,16)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1167.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="36.6982%" y="1141" width="0.0166%" height="15" fill="rgb(221,94,12)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1151.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="36.6982%" y="1125" width="0.0166%" height="15" fill="rgb(235,218,49)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1135.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="36.6982%" y="1109" width="0.0166%" height="15" fill="rgb(217,114,14)" fg:x="2214" fg:w="1"/><text x="36.9482%" y="1119.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.10%)</title><rect x="36.7147%" y="1237" width="0.0995%" height="15" fill="rgb(216,145,22)" fg:x="2215" fg:w="6"/><text x="36.9647%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="36.7645%" y="1221" width="0.0497%" height="15" fill="rgb(217,112,39)" fg:x="2218" fg:w="3"/><text x="37.0145%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="36.7645%" y="1205" width="0.0497%" height="15" fill="rgb(225,85,32)" fg:x="2218" fg:w="3"/><text x="37.0145%" y="1215.50"></text></g><g><title>Coin&amp; std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::emplace_back&lt;&gt; (3 samples, 0.05%)</title><rect x="36.8308%" y="1221" width="0.0497%" height="15" fill="rgb(245,209,47)" fg:x="2222" fg:w="3"/><text x="37.0808%" y="1231.50"></text></g><g><title>UpdateCoins (20 samples, 0.33%)</title><rect x="36.5656%" y="1253" width="0.3315%" height="15" fill="rgb(218,220,15)" fg:x="2206" fg:w="20"/><text x="36.8156%" y="1263.50"></text></g><g><title>UpdateCoins (5 samples, 0.08%)</title><rect x="36.8142%" y="1237" width="0.0829%" height="15" fill="rgb(222,202,31)" fg:x="2221" fg:w="5"/><text x="37.0642%" y="1247.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="36.8805%" y="1221" width="0.0166%" height="15" fill="rgb(243,203,4)" fg:x="2225" fg:w="1"/><text x="37.1305%" y="1231.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="36.8805%" y="1205" width="0.0166%" height="15" fill="rgb(237,92,17)" fg:x="2225" fg:w="1"/><text x="37.1305%" y="1215.50"></text></g><g><title>WitnessSigOps (1 samples, 0.02%)</title><rect x="36.8971%" y="1253" width="0.0166%" height="15" fill="rgb(231,119,7)" fg:x="2226" fg:w="1"/><text x="37.1471%" y="1263.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="36.9136%" y="1237" width="0.0166%" height="15" fill="rgb(237,82,41)" fg:x="2227" fg:w="1"/><text x="37.1636%" y="1247.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="36.9302%" y="1237" width="0.0497%" height="15" fill="rgb(226,81,48)" fg:x="2228" fg:w="3"/><text x="37.1802%" y="1247.50"></text></g><g><title>node::BlockManager::FindUndoPos (1 samples, 0.02%)</title><rect x="36.9799%" y="1237" width="0.0166%" height="15" fill="rgb(234,70,51)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1247.50"></text></g><g><title>FlatFileSeq::Allocate (1 samples, 0.02%)</title><rect x="36.9799%" y="1221" width="0.0166%" height="15" fill="rgb(251,86,4)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1231.50"></text></g><g><title>AllocateFileRange (1 samples, 0.02%)</title><rect x="36.9799%" y="1205" width="0.0166%" height="15" fill="rgb(244,144,28)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1215.50"></text></g><g><title>posix_fallocate (1 samples, 0.02%)</title><rect x="36.9799%" y="1189" width="0.0166%" height="15" fill="rgb(232,161,39)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.9799%" y="1173" width="0.0166%" height="15" fill="rgb(247,34,51)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.9799%" y="1157" width="0.0166%" height="15" fill="rgb(225,132,2)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.9799%" y="1141" width="0.0166%" height="15" fill="rgb(209,159,44)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="36.9799%" y="1125" width="0.0166%" height="15" fill="rgb(251,214,1)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.9799%" y="1109" width="0.0166%" height="15" fill="rgb(247,84,47)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.9799%" y="1093" width="0.0166%" height="15" fill="rgb(240,111,43)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.9799%" y="1077" width="0.0166%" height="15" fill="rgb(215,214,35)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.9799%" y="1061" width="0.0166%" height="15" fill="rgb(248,207,23)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.9799%" y="1045" width="0.0166%" height="15" fill="rgb(214,186,4)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.9799%" y="1029" width="0.0166%" height="15" fill="rgb(220,133,22)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="36.9799%" y="1013" width="0.0166%" height="15" fill="rgb(239,134,19)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1023.50"></text></g><g><title>[[crc32c_intel]] (1 samples, 0.02%)</title><rect x="36.9799%" y="997" width="0.0166%" height="15" fill="rgb(250,140,9)" fg:x="2231" fg:w="1"/><text x="37.2299%" y="1007.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="36.9965%" y="1221" width="0.0166%" height="15" fill="rgb(225,59,14)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1205" width="0.0166%" height="15" fill="rgb(214,152,51)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1189" width="0.0166%" height="15" fill="rgb(251,227,43)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1173" width="0.0166%" height="15" fill="rgb(241,96,17)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1157" width="0.0166%" height="15" fill="rgb(234,198,43)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1141" width="0.0166%" height="15" fill="rgb(220,108,29)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1125" width="0.0166%" height="15" fill="rgb(226,163,33)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1109" width="0.0166%" height="15" fill="rgb(205,194,45)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1119.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1093" width="0.0166%" height="15" fill="rgb(206,143,44)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1077" width="0.0166%" height="15" fill="rgb(236,136,36)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1061" width="0.0166%" height="15" fill="rgb(249,172,42)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1045" width="0.0166%" height="15" fill="rgb(216,139,23)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1055.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1029" width="0.0166%" height="15" fill="rgb(207,166,20)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="1013" width="0.0166%" height="15" fill="rgb(210,209,22)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="997" width="0.0166%" height="15" fill="rgb(232,118,20)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="981" width="0.0166%" height="15" fill="rgb(238,113,42)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="965" width="0.0166%" height="15" fill="rgb(231,42,5)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="975.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="949" width="0.0166%" height="15" fill="rgb(243,166,24)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="959.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="933" width="0.0166%" height="15" fill="rgb(237,226,12)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="917" width="0.0166%" height="15" fill="rgb(229,133,24)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="901" width="0.0166%" height="15" fill="rgb(238,33,43)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="885" width="0.0166%" height="15" fill="rgb(227,59,38)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="895.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="869" width="0.0166%" height="15" fill="rgb(230,97,0)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="853" width="0.0166%" height="15" fill="rgb(250,173,50)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="837" width="0.0166%" height="15" fill="rgb(240,15,50)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="821" width="0.0166%" height="15" fill="rgb(221,93,22)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="805" width="0.0166%" height="15" fill="rgb(245,180,53)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="815.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="789" width="0.0166%" height="15" fill="rgb(231,88,51)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="773" width="0.0166%" height="15" fill="rgb(240,58,21)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="757" width="0.0166%" height="15" fill="rgb(237,21,10)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="741" width="0.0166%" height="15" fill="rgb(218,43,11)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="751.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="36.9965%" y="725" width="0.0166%" height="15" fill="rgb(218,221,29)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="36.9965%" y="709" width="0.0166%" height="15" fill="rgb(214,118,42)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="719.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="36.9965%" y="693" width="0.0166%" height="15" fill="rgb(251,200,26)" fg:x="2232" fg:w="1"/><text x="37.2465%" y="703.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.0131%" y="613" width="0.0166%" height="15" fill="rgb(237,101,39)" fg:x="2233" fg:w="1"/><text x="37.2631%" y="623.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.0131%" y="597" width="0.0166%" height="15" fill="rgb(251,117,11)" fg:x="2233" fg:w="1"/><text x="37.2631%" y="607.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="37.0297%" y="613" width="0.0166%" height="15" fill="rgb(216,223,23)" fg:x="2234" fg:w="1"/><text x="37.2797%" y="623.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (3 samples, 0.05%)</title><rect x="37.0462%" y="613" width="0.0497%" height="15" fill="rgb(251,54,12)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (3 samples, 0.05%)</title><rect x="37.0462%" y="597" width="0.0497%" height="15" fill="rgb(254,176,54)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="581" width="0.0497%" height="15" fill="rgb(210,32,8)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="565" width="0.0497%" height="15" fill="rgb(235,52,38)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="549" width="0.0497%" height="15" fill="rgb(231,4,44)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="533" width="0.0497%" height="15" fill="rgb(249,2,32)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="517" width="0.0497%" height="15" fill="rgb(224,65,26)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="501" width="0.0497%" height="15" fill="rgb(250,73,40)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="485" width="0.0497%" height="15" fill="rgb(253,177,16)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="469" width="0.0497%" height="15" fill="rgb(217,32,34)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="453" width="0.0497%" height="15" fill="rgb(212,7,10)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="437" width="0.0497%" height="15" fill="rgb(245,89,8)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="421" width="0.0497%" height="15" fill="rgb(237,16,53)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="405" width="0.0497%" height="15" fill="rgb(250,204,30)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="389" width="0.0497%" height="15" fill="rgb(208,77,27)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="373" width="0.0497%" height="15" fill="rgb(250,204,28)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="357" width="0.0497%" height="15" fill="rgb(244,63,21)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="341" width="0.0497%" height="15" fill="rgb(236,85,44)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="325" width="0.0497%" height="15" fill="rgb(215,98,4)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="309" width="0.0497%" height="15" fill="rgb(235,38,11)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="293" width="0.0497%" height="15" fill="rgb(254,186,25)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="277" width="0.0497%" height="15" fill="rgb(225,55,31)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="261" width="0.0497%" height="15" fill="rgb(211,15,21)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="245" width="0.0497%" height="15" fill="rgb(215,187,41)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="255.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="229" width="0.0497%" height="15" fill="rgb(248,69,32)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="239.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="213" width="0.0497%" height="15" fill="rgb(252,102,52)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="223.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="197" width="0.0497%" height="15" fill="rgb(253,140,32)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="181" width="0.0497%" height="15" fill="rgb(216,56,42)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="191.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="165" width="0.0497%" height="15" fill="rgb(216,184,14)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="149" width="0.0497%" height="15" fill="rgb(237,187,27)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="159.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="133" width="0.0497%" height="15" fill="rgb(219,65,3)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="143.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="117" width="0.0497%" height="15" fill="rgb(245,83,25)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="127.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (3 samples, 0.05%)</title><rect x="37.0462%" y="101" width="0.0497%" height="15" fill="rgb(214,205,45)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="111.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="85" width="0.0497%" height="15" fill="rgb(241,20,18)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="95.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="69" width="0.0497%" height="15" fill="rgb(232,163,23)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="79.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="53" width="0.0497%" height="15" fill="rgb(214,5,46)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="63.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (3 samples, 0.05%)</title><rect x="37.0462%" y="37" width="0.0497%" height="15" fill="rgb(229,78,17)" fg:x="2235" fg:w="3"/><text x="37.2962%" y="47.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="37.0960%" y="613" width="0.0166%" height="15" fill="rgb(248,89,10)" fg:x="2238" fg:w="1"/><text x="37.3460%" y="623.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="37.0960%" y="597" width="0.0166%" height="15" fill="rgb(248,54,15)" fg:x="2238" fg:w="1"/><text x="37.3460%" y="607.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="37.0960%" y="581" width="0.0166%" height="15" fill="rgb(223,116,6)" fg:x="2238" fg:w="1"/><text x="37.3460%" y="591.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (7 samples, 0.12%)</title><rect x="37.0131%" y="725" width="0.1160%" height="15" fill="rgb(205,125,38)" fg:x="2233" fg:w="7"/><text x="37.2631%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="37.0131%" y="709" width="0.1160%" height="15" fill="rgb(251,78,38)" fg:x="2233" fg:w="7"/><text x="37.2631%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.12%)</title><rect x="37.0131%" y="693" width="0.1160%" height="15" fill="rgb(253,78,28)" fg:x="2233" fg:w="7"/><text x="37.2631%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (7 samples, 0.12%)</title><rect x="37.0131%" y="677" width="0.1160%" height="15" fill="rgb(209,120,3)" fg:x="2233" fg:w="7"/><text x="37.2631%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (7 samples, 0.12%)</title><rect x="37.0131%" y="661" width="0.1160%" height="15" fill="rgb(238,229,9)" fg:x="2233" fg:w="7"/><text x="37.2631%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (7 samples, 0.12%)</title><rect x="37.0131%" y="645" width="0.1160%" height="15" fill="rgb(253,159,18)" fg:x="2233" fg:w="7"/><text x="37.2631%" y="655.50"></text></g><g><title>HashWriter::write (7 samples, 0.12%)</title><rect x="37.0131%" y="629" width="0.1160%" height="15" fill="rgb(244,42,34)" fg:x="2233" fg:w="7"/><text x="37.2631%" y="639.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.1125%" y="613" width="0.0166%" height="15" fill="rgb(224,8,7)" fg:x="2239" fg:w="1"/><text x="37.3625%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (8 samples, 0.13%)</title><rect x="37.0131%" y="773" width="0.1326%" height="15" fill="rgb(210,201,45)" fg:x="2233" fg:w="8"/><text x="37.2631%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.13%)</title><rect x="37.0131%" y="757" width="0.1326%" height="15" fill="rgb(252,185,21)" fg:x="2233" fg:w="8"/><text x="37.2631%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (8 samples, 0.13%)</title><rect x="37.0131%" y="741" width="0.1326%" height="15" fill="rgb(223,131,1)" fg:x="2233" fg:w="8"/><text x="37.2631%" y="751.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="37.1291%" y="725" width="0.0166%" height="15" fill="rgb(245,141,16)" fg:x="2240" fg:w="1"/><text x="37.3791%" y="735.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="37.1457%" y="725" width="0.0166%" height="15" fill="rgb(229,55,45)" fg:x="2241" fg:w="1"/><text x="37.3957%" y="735.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="37.1457%" y="709" width="0.0166%" height="15" fill="rgb(208,92,15)" fg:x="2241" fg:w="1"/><text x="37.3957%" y="719.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.2120%" y="661" width="0.0166%" height="15" fill="rgb(234,185,47)" fg:x="2245" fg:w="1"/><text x="37.4620%" y="671.50"></text></g><g><title>CSHA256::Write (5 samples, 0.08%)</title><rect x="37.1623%" y="677" width="0.0829%" height="15" fill="rgb(253,104,50)" fg:x="2242" fg:w="5"/><text x="37.4123%" y="687.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="37.2286%" y="661" width="0.0166%" height="15" fill="rgb(205,70,7)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="671.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="37.2286%" y="645" width="0.0166%" height="15" fill="rgb(240,178,43)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="629" width="0.0166%" height="15" fill="rgb(214,112,2)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="639.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="613" width="0.0166%" height="15" fill="rgb(206,46,17)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="623.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="597" width="0.0166%" height="15" fill="rgb(225,220,16)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="607.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="581" width="0.0166%" height="15" fill="rgb(238,65,40)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="565" width="0.0166%" height="15" fill="rgb(230,151,21)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="575.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="549" width="0.0166%" height="15" fill="rgb(218,58,49)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="533" width="0.0166%" height="15" fill="rgb(219,179,14)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="517" width="0.0166%" height="15" fill="rgb(223,72,1)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="501" width="0.0166%" height="15" fill="rgb(238,126,10)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="485" width="0.0166%" height="15" fill="rgb(224,206,38)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="469" width="0.0166%" height="15" fill="rgb(212,201,54)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="453" width="0.0166%" height="15" fill="rgb(218,154,48)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="463.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="437" width="0.0166%" height="15" fill="rgb(232,93,24)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="447.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="421" width="0.0166%" height="15" fill="rgb(245,30,21)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="431.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="405" width="0.0166%" height="15" fill="rgb(242,148,29)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="389" width="0.0166%" height="15" fill="rgb(244,153,54)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="399.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="373" width="0.0166%" height="15" fill="rgb(252,87,22)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="383.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="357" width="0.0166%" height="15" fill="rgb(210,51,29)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="341" width="0.0166%" height="15" fill="rgb(242,136,47)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="351.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="325" width="0.0166%" height="15" fill="rgb(238,68,4)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="335.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="309" width="0.0166%" height="15" fill="rgb(242,161,30)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="319.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="293" width="0.0166%" height="15" fill="rgb(218,58,44)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="303.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="277" width="0.0166%" height="15" fill="rgb(252,125,32)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="287.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="261" width="0.0166%" height="15" fill="rgb(219,178,0)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="271.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="245" width="0.0166%" height="15" fill="rgb(213,152,7)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="229" width="0.0166%" height="15" fill="rgb(249,109,34)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="239.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="213" width="0.0166%" height="15" fill="rgb(232,96,21)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="223.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="197" width="0.0166%" height="15" fill="rgb(228,27,39)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="207.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="181" width="0.0166%" height="15" fill="rgb(211,182,52)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="191.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="165" width="0.0166%" height="15" fill="rgb(234,178,38)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="175.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="37.2286%" y="149" width="0.0166%" height="15" fill="rgb(221,111,3)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="159.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="37.2286%" y="133" width="0.0166%" height="15" fill="rgb(228,175,21)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="143.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="37.2286%" y="117" width="0.0166%" height="15" fill="rgb(228,174,43)" fg:x="2246" fg:w="1"/><text x="37.4786%" y="127.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (4 samples, 0.07%)</title><rect x="37.2452%" y="677" width="0.0663%" height="15" fill="rgb(211,191,0)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="687.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (4 samples, 0.07%)</title><rect x="37.2452%" y="661" width="0.0663%" height="15" fill="rgb(253,117,3)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="645" width="0.0663%" height="15" fill="rgb(241,127,19)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="655.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="629" width="0.0663%" height="15" fill="rgb(218,103,12)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="639.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="613" width="0.0663%" height="15" fill="rgb(236,214,43)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="623.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="597" width="0.0663%" height="15" fill="rgb(244,144,19)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="581" width="0.0663%" height="15" fill="rgb(246,188,10)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="591.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="565" width="0.0663%" height="15" fill="rgb(212,193,33)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="549" width="0.0663%" height="15" fill="rgb(241,51,29)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="533" width="0.0663%" height="15" fill="rgb(211,58,19)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="517" width="0.0663%" height="15" fill="rgb(229,111,26)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="501" width="0.0663%" height="15" fill="rgb(213,115,40)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="485" width="0.0663%" height="15" fill="rgb(209,56,44)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="469" width="0.0663%" height="15" fill="rgb(230,108,32)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="479.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="453" width="0.0663%" height="15" fill="rgb(216,165,31)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="463.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="437" width="0.0663%" height="15" fill="rgb(218,122,21)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="447.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="421" width="0.0663%" height="15" fill="rgb(223,224,47)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="405" width="0.0663%" height="15" fill="rgb(238,102,44)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="415.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="389" width="0.0663%" height="15" fill="rgb(236,46,40)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="399.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="373" width="0.0663%" height="15" fill="rgb(247,202,50)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="383.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="357" width="0.0663%" height="15" fill="rgb(209,99,20)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="367.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="341" width="0.0663%" height="15" fill="rgb(252,27,34)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="351.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="325" width="0.0663%" height="15" fill="rgb(215,206,23)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="309" width="0.0663%" height="15" fill="rgb(212,135,36)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="319.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="293" width="0.0663%" height="15" fill="rgb(240,189,1)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="303.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="277" width="0.0663%" height="15" fill="rgb(242,56,20)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="287.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="261" width="0.0663%" height="15" fill="rgb(247,132,33)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="245" width="0.0663%" height="15" fill="rgb(208,149,11)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="255.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="229" width="0.0663%" height="15" fill="rgb(211,33,11)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="239.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="213" width="0.0663%" height="15" fill="rgb(221,29,38)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="223.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="197" width="0.0663%" height="15" fill="rgb(206,182,49)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="207.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="181" width="0.0663%" height="15" fill="rgb(216,140,1)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="191.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (4 samples, 0.07%)</title><rect x="37.2452%" y="165" width="0.0663%" height="15" fill="rgb(232,57,40)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="149" width="0.0663%" height="15" fill="rgb(224,186,18)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="159.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="133" width="0.0663%" height="15" fill="rgb(215,121,11)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="143.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="117" width="0.0663%" height="15" fill="rgb(245,147,10)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="127.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (4 samples, 0.07%)</title><rect x="37.2452%" y="101" width="0.0663%" height="15" fill="rgb(238,153,13)" fg:x="2247" fg:w="4"/><text x="37.4952%" y="111.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.2617%" y="85" width="0.0497%" height="15" fill="rgb(233,108,0)" fg:x="2248" fg:w="3"/><text x="37.5117%" y="95.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="37.2617%" y="69" width="0.0497%" height="15" fill="rgb(212,157,17)" fg:x="2248" fg:w="3"/><text x="37.5117%" y="79.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (10 samples, 0.17%)</title><rect x="37.1623%" y="725" width="0.1658%" height="15" fill="rgb(225,213,38)" fg:x="2242" fg:w="10"/><text x="37.4123%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (10 samples, 0.17%)</title><rect x="37.1623%" y="709" width="0.1658%" height="15" fill="rgb(248,16,11)" fg:x="2242" fg:w="10"/><text x="37.4123%" y="719.50"></text></g><g><title>HashWriter::write (10 samples, 0.17%)</title><rect x="37.1623%" y="693" width="0.1658%" height="15" fill="rgb(241,33,4)" fg:x="2242" fg:w="10"/><text x="37.4123%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="37.3115%" y="677" width="0.0166%" height="15" fill="rgb(222,26,43)" fg:x="2251" fg:w="1"/><text x="37.5615%" y="687.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="37.3115%" y="661" width="0.0166%" height="15" fill="rgb(243,29,36)" fg:x="2251" fg:w="1"/><text x="37.5615%" y="671.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="37.3115%" y="645" width="0.0166%" height="15" fill="rgb(241,9,27)" fg:x="2251" fg:w="1"/><text x="37.5615%" y="655.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="37.3115%" y="629" width="0.0166%" height="15" fill="rgb(205,117,26)" fg:x="2251" fg:w="1"/><text x="37.5615%" y="639.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (1 samples, 0.02%)</title><rect x="37.3280%" y="725" width="0.0166%" height="15" fill="rgb(209,80,39)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="709" width="0.0166%" height="15" fill="rgb(239,155,6)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="719.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="37.3280%" y="693" width="0.0166%" height="15" fill="rgb(212,104,12)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="703.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.3280%" y="677" width="0.0166%" height="15" fill="rgb(234,204,3)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="687.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="37.3280%" y="661" width="0.0166%" height="15" fill="rgb(251,218,7)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="671.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="37.3280%" y="645" width="0.0166%" height="15" fill="rgb(221,81,32)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="629" width="0.0166%" height="15" fill="rgb(214,152,26)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="639.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="613" width="0.0166%" height="15" fill="rgb(223,22,3)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="623.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="597" width="0.0166%" height="15" fill="rgb(207,174,7)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="607.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="581" width="0.0166%" height="15" fill="rgb(224,19,52)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="565" width="0.0166%" height="15" fill="rgb(228,24,14)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="575.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="549" width="0.0166%" height="15" fill="rgb(230,153,43)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="533" width="0.0166%" height="15" fill="rgb(231,106,12)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="517" width="0.0166%" height="15" fill="rgb(215,92,2)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="501" width="0.0166%" height="15" fill="rgb(249,143,25)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="485" width="0.0166%" height="15" fill="rgb(252,7,35)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="469" width="0.0166%" height="15" fill="rgb(216,69,40)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="453" width="0.0166%" height="15" fill="rgb(240,36,33)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="463.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="437" width="0.0166%" height="15" fill="rgb(231,128,14)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="447.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="421" width="0.0166%" height="15" fill="rgb(245,143,14)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="431.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="405" width="0.0166%" height="15" fill="rgb(222,130,28)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="389" width="0.0166%" height="15" fill="rgb(212,10,48)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="399.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="373" width="0.0166%" height="15" fill="rgb(254,118,45)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="383.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="357" width="0.0166%" height="15" fill="rgb(228,6,45)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="341" width="0.0166%" height="15" fill="rgb(241,18,35)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="351.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="325" width="0.0166%" height="15" fill="rgb(227,214,53)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="335.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="309" width="0.0166%" height="15" fill="rgb(224,107,51)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="319.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="293" width="0.0166%" height="15" fill="rgb(248,60,28)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="303.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="277" width="0.0166%" height="15" fill="rgb(249,101,23)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="287.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="261" width="0.0166%" height="15" fill="rgb(228,51,19)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="271.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="245" width="0.0166%" height="15" fill="rgb(213,20,6)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="229" width="0.0166%" height="15" fill="rgb(212,124,10)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="239.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="213" width="0.0166%" height="15" fill="rgb(248,3,40)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="223.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="197" width="0.0166%" height="15" fill="rgb(223,178,23)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="207.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="181" width="0.0166%" height="15" fill="rgb(240,132,45)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="191.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="165" width="0.0166%" height="15" fill="rgb(245,164,36)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="175.50"></text></g><g><title>Span&lt;unsigned char&gt;::Span&lt;prevector&lt;33u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="37.3280%" y="149" width="0.0166%" height="15" fill="rgb(231,188,53)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="159.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::data (1 samples, 0.02%)</title><rect x="37.3280%" y="133" width="0.0166%" height="15" fill="rgb(237,198,39)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="143.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="37.3280%" y="117" width="0.0166%" height="15" fill="rgb(223,120,35)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="127.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="37.3280%" y="101" width="0.0166%" height="15" fill="rgb(253,107,49)" fg:x="2252" fg:w="1"/><text x="37.5780%" y="111.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.3446%" y="661" width="0.0166%" height="15" fill="rgb(216,44,31)" fg:x="2253" fg:w="1"/><text x="37.5946%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (23 samples, 0.38%)</title><rect x="37.0131%" y="869" width="0.3812%" height="15" fill="rgb(253,87,21)" fg:x="2233" fg:w="23"/><text x="37.2631%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (23 samples, 0.38%)</title><rect x="37.0131%" y="853" width="0.3812%" height="15" fill="rgb(226,18,2)" fg:x="2233" fg:w="23"/><text x="37.2631%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (23 samples, 0.38%)</title><rect x="37.0131%" y="837" width="0.3812%" height="15" fill="rgb(216,8,46)" fg:x="2233" fg:w="23"/><text x="37.2631%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (23 samples, 0.38%)</title><rect x="37.0131%" y="821" width="0.3812%" height="15" fill="rgb(226,140,39)" fg:x="2233" fg:w="23"/><text x="37.2631%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (23 samples, 0.38%)</title><rect x="37.0131%" y="805" width="0.3812%" height="15" fill="rgb(221,194,54)" fg:x="2233" fg:w="23"/><text x="37.2631%" y="815.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (23 samples, 0.38%)</title><rect x="37.0131%" y="789" width="0.3812%" height="15" fill="rgb(213,92,11)" fg:x="2233" fg:w="23"/><text x="37.2631%" y="799.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (15 samples, 0.25%)</title><rect x="37.1457%" y="773" width="0.2486%" height="15" fill="rgb(229,162,46)" fg:x="2241" fg:w="15"/><text x="37.3957%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (15 samples, 0.25%)</title><rect x="37.1457%" y="757" width="0.2486%" height="15" fill="rgb(214,111,36)" fg:x="2241" fg:w="15"/><text x="37.3957%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (15 samples, 0.25%)</title><rect x="37.1457%" y="741" width="0.2486%" height="15" fill="rgb(207,6,21)" fg:x="2241" fg:w="15"/><text x="37.3957%" y="751.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (3 samples, 0.05%)</title><rect x="37.3446%" y="725" width="0.0497%" height="15" fill="rgb(213,127,38)" fg:x="2253" fg:w="3"/><text x="37.5946%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.3446%" y="709" width="0.0497%" height="15" fill="rgb(238,118,32)" fg:x="2253" fg:w="3"/><text x="37.5946%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (3 samples, 0.05%)</title><rect x="37.3446%" y="693" width="0.0497%" height="15" fill="rgb(240,139,39)" fg:x="2253" fg:w="3"/><text x="37.5946%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (3 samples, 0.05%)</title><rect x="37.3446%" y="677" width="0.0497%" height="15" fill="rgb(235,10,37)" fg:x="2253" fg:w="3"/><text x="37.5946%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (2 samples, 0.03%)</title><rect x="37.3612%" y="661" width="0.0332%" height="15" fill="rgb(249,171,38)" fg:x="2254" fg:w="2"/><text x="37.6112%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (2 samples, 0.03%)</title><rect x="37.3612%" y="645" width="0.0332%" height="15" fill="rgb(242,144,32)" fg:x="2254" fg:w="2"/><text x="37.6112%" y="655.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="37.3612%" y="629" width="0.0332%" height="15" fill="rgb(217,117,21)" fg:x="2254" fg:w="2"/><text x="37.6112%" y="639.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="37.3612%" y="613" width="0.0332%" height="15" fill="rgb(249,87,1)" fg:x="2254" fg:w="2"/><text x="37.6112%" y="623.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.3778%" y="597" width="0.0166%" height="15" fill="rgb(248,196,48)" fg:x="2255" fg:w="1"/><text x="37.6278%" y="607.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.3943%" y="821" width="0.0166%" height="15" fill="rgb(251,206,33)" fg:x="2256" fg:w="1"/><text x="37.6443%" y="831.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="37.4109%" y="821" width="0.0166%" height="15" fill="rgb(232,141,28)" fg:x="2257" fg:w="1"/><text x="37.6609%" y="831.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="37.4109%" y="805" width="0.0166%" height="15" fill="rgb(209,167,14)" fg:x="2257" fg:w="1"/><text x="37.6609%" y="815.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="37.4109%" y="789" width="0.0166%" height="15" fill="rgb(225,11,50)" fg:x="2257" fg:w="1"/><text x="37.6609%" y="799.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="37.4275%" y="773" width="0.0166%" height="15" fill="rgb(209,50,20)" fg:x="2258" fg:w="1"/><text x="37.6775%" y="783.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="37.4441%" y="757" width="0.0166%" height="15" fill="rgb(212,17,46)" fg:x="2259" fg:w="1"/><text x="37.6941%" y="767.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="37.4441%" y="741" width="0.0166%" height="15" fill="rgb(216,101,39)" fg:x="2259" fg:w="1"/><text x="37.6941%" y="751.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="37.4606%" y="741" width="0.0166%" height="15" fill="rgb(212,228,48)" fg:x="2260" fg:w="1"/><text x="37.7106%" y="751.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="37.4606%" y="725" width="0.0166%" height="15" fill="rgb(250,6,50)" fg:x="2260" fg:w="1"/><text x="37.7106%" y="735.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="37.4772%" y="725" width="0.0332%" height="15" fill="rgb(250,160,48)" fg:x="2261" fg:w="2"/><text x="37.7272%" y="735.50"></text></g><g><title>ShiftMessageB (4 samples, 0.07%)</title><rect x="37.4606%" y="757" width="0.0663%" height="15" fill="rgb(244,216,33)" fg:x="2260" fg:w="4"/><text x="37.7106%" y="767.50"></text></g><g><title>ShiftMessageC (3 samples, 0.05%)</title><rect x="37.4772%" y="741" width="0.0497%" height="15" fill="rgb(207,157,5)" fg:x="2261" fg:w="3"/><text x="37.7272%" y="751.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="37.5104%" y="725" width="0.0166%" height="15" fill="rgb(228,199,8)" fg:x="2263" fg:w="1"/><text x="37.7604%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (9 samples, 0.15%)</title><rect x="37.3943%" y="869" width="0.1492%" height="15" fill="rgb(227,80,20)" fg:x="2256" fg:w="9"/><text x="37.6443%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (9 samples, 0.15%)</title><rect x="37.3943%" y="853" width="0.1492%" height="15" fill="rgb(222,9,33)" fg:x="2256" fg:w="9"/><text x="37.6443%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (9 samples, 0.15%)</title><rect x="37.3943%" y="837" width="0.1492%" height="15" fill="rgb(239,44,28)" fg:x="2256" fg:w="9"/><text x="37.6443%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (7 samples, 0.12%)</title><rect x="37.4275%" y="821" width="0.1160%" height="15" fill="rgb(249,187,43)" fg:x="2258" fg:w="7"/><text x="37.6775%" y="831.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (7 samples, 0.12%)</title><rect x="37.4275%" y="805" width="0.1160%" height="15" fill="rgb(216,141,28)" fg:x="2258" fg:w="7"/><text x="37.6775%" y="815.50"></text></g><g><title>HashWriter::write (7 samples, 0.12%)</title><rect x="37.4275%" y="789" width="0.1160%" height="15" fill="rgb(230,154,53)" fg:x="2258" fg:w="7"/><text x="37.6775%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (6 samples, 0.10%)</title><rect x="37.4441%" y="773" width="0.0995%" height="15" fill="rgb(227,82,4)" fg:x="2259" fg:w="6"/><text x="37.6941%" y="783.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="37.5269%" y="757" width="0.0166%" height="15" fill="rgb(220,107,16)" fg:x="2264" fg:w="1"/><text x="37.7769%" y="767.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="37.5269%" y="741" width="0.0166%" height="15" fill="rgb(207,187,2)" fg:x="2264" fg:w="1"/><text x="37.7769%" y="751.50"></text></g><g><title>CSHA256::Write (5 samples, 0.08%)</title><rect x="37.5435%" y="821" width="0.0829%" height="15" fill="rgb(210,162,52)" fg:x="2265" fg:w="5"/><text x="37.7935%" y="831.50"></text></g><g><title>memcpy (2 samples, 0.03%)</title><rect x="37.5932%" y="805" width="0.0332%" height="15" fill="rgb(217,216,49)" fg:x="2268" fg:w="2"/><text x="37.8432%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="37.6264%" y="821" width="0.0166%" height="15" fill="rgb(218,146,49)" fg:x="2270" fg:w="1"/><text x="37.8764%" y="831.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="37.6264%" y="805" width="0.0166%" height="15" fill="rgb(216,55,40)" fg:x="2270" fg:w="1"/><text x="37.8764%" y="815.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="37.6264%" y="789" width="0.0166%" height="15" fill="rgb(208,196,21)" fg:x="2270" fg:w="1"/><text x="37.8764%" y="799.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="37.6264%" y="773" width="0.0166%" height="15" fill="rgb(242,117,42)" fg:x="2270" fg:w="1"/><text x="37.8764%" y="783.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (40 samples, 0.66%)</title><rect x="37.0131%" y="1221" width="0.6630%" height="15" fill="rgb(210,11,23)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1231.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1205" width="0.6630%" height="15" fill="rgb(217,110,2)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1189" width="0.6630%" height="15" fill="rgb(229,77,54)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1173" width="0.6630%" height="15" fill="rgb(218,53,16)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1157" width="0.6630%" height="15" fill="rgb(215,38,13)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1141" width="0.6630%" height="15" fill="rgb(235,42,18)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1151.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1125" width="0.6630%" height="15" fill="rgb(219,66,54)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1135.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1109" width="0.6630%" height="15" fill="rgb(222,205,4)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1119.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1093" width="0.6630%" height="15" fill="rgb(227,213,46)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1077" width="0.6630%" height="15" fill="rgb(250,145,42)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1061" width="0.6630%" height="15" fill="rgb(219,15,2)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1045" width="0.6630%" height="15" fill="rgb(231,181,52)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1029" width="0.6630%" height="15" fill="rgb(235,1,42)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="1013" width="0.6630%" height="15" fill="rgb(249,88,27)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="997" width="0.6630%" height="15" fill="rgb(235,145,16)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="981" width="0.6630%" height="15" fill="rgb(237,114,19)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="965" width="0.6630%" height="15" fill="rgb(238,51,50)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="975.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="949" width="0.6630%" height="15" fill="rgb(205,194,25)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="959.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="933" width="0.6630%" height="15" fill="rgb(215,203,17)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="917" width="0.6630%" height="15" fill="rgb(233,112,49)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="901" width="0.6630%" height="15" fill="rgb(241,130,26)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (40 samples, 0.66%)</title><rect x="37.0131%" y="885" width="0.6630%" height="15" fill="rgb(252,223,19)" fg:x="2233" fg:w="40"/><text x="37.2631%" y="895.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (8 samples, 0.13%)</title><rect x="37.5435%" y="869" width="0.1326%" height="15" fill="rgb(211,95,25)" fg:x="2265" fg:w="8"/><text x="37.7935%" y="879.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (8 samples, 0.13%)</title><rect x="37.5435%" y="853" width="0.1326%" height="15" fill="rgb(251,182,27)" fg:x="2265" fg:w="8"/><text x="37.7935%" y="863.50"></text></g><g><title>HashWriter::write (8 samples, 0.13%)</title><rect x="37.5435%" y="837" width="0.1326%" height="15" fill="rgb(238,24,4)" fg:x="2265" fg:w="8"/><text x="37.7935%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (2 samples, 0.03%)</title><rect x="37.6430%" y="821" width="0.0332%" height="15" fill="rgb(224,220,25)" fg:x="2271" fg:w="2"/><text x="37.8930%" y="831.50"></text></g><g><title>create_directories (1 samples, 0.02%)</title><rect x="37.6761%" y="1189" width="0.0166%" height="15" fill="rgb(239,133,26)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1199.50"></text></g><g><title>std::filesystem::is_symlink (1 samples, 0.02%)</title><rect x="37.6761%" y="1173" width="0.0166%" height="15" fill="rgb(211,94,48)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1183.50"></text></g><g><title>std::filesystem::symlink_status (1 samples, 0.02%)</title><rect x="37.6761%" y="1157" width="0.0166%" height="15" fill="rgb(239,87,6)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1167.50"></text></g><g><title>std::filesystem::symlink_status (1 samples, 0.02%)</title><rect x="37.6761%" y="1141" width="0.0166%" height="15" fill="rgb(227,62,0)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1151.50"></text></g><g><title>__GI___fstatat64 (1 samples, 0.02%)</title><rect x="37.6761%" y="1125" width="0.0166%" height="15" fill="rgb(211,226,4)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="1109" width="0.0166%" height="15" fill="rgb(253,38,52)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="1093" width="0.0166%" height="15" fill="rgb(229,126,40)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="1077" width="0.0166%" height="15" fill="rgb(229,165,44)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="1061" width="0.0166%" height="15" fill="rgb(247,95,47)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="1045" width="0.0166%" height="15" fill="rgb(216,140,30)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="1029" width="0.0166%" height="15" fill="rgb(246,214,8)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="1013" width="0.0166%" height="15" fill="rgb(227,224,15)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="997" width="0.0166%" height="15" fill="rgb(233,175,4)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6761%" y="981" width="0.0166%" height="15" fill="rgb(221,66,45)" fg:x="2273" fg:w="1"/><text x="37.9261%" y="991.50"></text></g><g><title>node::BlockManager::OpenUndoFile (2 samples, 0.03%)</title><rect x="37.6761%" y="1221" width="0.0332%" height="15" fill="rgb(221,178,18)" fg:x="2273" fg:w="2"/><text x="37.9261%" y="1231.50"></text></g><g><title>FlatFileSeq::Open (2 samples, 0.03%)</title><rect x="37.6761%" y="1205" width="0.0332%" height="15" fill="rgb(213,81,29)" fg:x="2273" fg:w="2"/><text x="37.9261%" y="1215.50"></text></g><g><title>fseek (1 samples, 0.02%)</title><rect x="37.6927%" y="1189" width="0.0166%" height="15" fill="rgb(220,89,49)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1199.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="37.6927%" y="1173" width="0.0166%" height="15" fill="rgb(227,60,33)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1183.50"></text></g><g><title>read (1 samples, 0.02%)</title><rect x="37.6927%" y="1157" width="0.0166%" height="15" fill="rgb(205,113,12)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1141" width="0.0166%" height="15" fill="rgb(211,32,1)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1125" width="0.0166%" height="15" fill="rgb(246,2,12)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1109" width="0.0166%" height="15" fill="rgb(243,37,27)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1093" width="0.0166%" height="15" fill="rgb(248,211,31)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1077" width="0.0166%" height="15" fill="rgb(242,146,47)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1061" width="0.0166%" height="15" fill="rgb(206,70,20)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1045" width="0.0166%" height="15" fill="rgb(215,10,51)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="1029" width="0.0166%" height="15" fill="rgb(243,178,53)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="37.6927%" y="1013" width="0.0166%" height="15" fill="rgb(233,221,20)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="37.6927%" y="997" width="0.0166%" height="15" fill="rgb(218,95,35)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="1007.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="37.6927%" y="981" width="0.0166%" height="15" fill="rgb(229,13,5)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="991.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="37.6927%" y="965" width="0.0166%" height="15" fill="rgb(252,164,30)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="975.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="37.6927%" y="949" width="0.0166%" height="15" fill="rgb(232,68,36)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="933" width="0.0166%" height="15" fill="rgb(219,59,54)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.6927%" y="917" width="0.0166%" height="15" fill="rgb(250,92,33)" fg:x="2274" fg:w="1"/><text x="37.9427%" y="927.50"></text></g><g><title>CompressAmount (2 samples, 0.03%)</title><rect x="37.7093%" y="1045" width="0.0332%" height="15" fill="rgb(229,162,54)" fg:x="2275" fg:w="2"/><text x="37.9593%" y="1055.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="37.7424%" y="1045" width="0.0166%" height="15" fill="rgb(244,114,52)" fg:x="2277" fg:w="1"/><text x="37.9924%" y="1055.50"></text></g><g><title>IsToKeyID (1 samples, 0.02%)</title><rect x="37.7424%" y="1029" width="0.0166%" height="15" fill="rgb(212,211,43)" fg:x="2277" fg:w="1"/><text x="37.9924%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="37.7424%" y="1013" width="0.0166%" height="15" fill="rgb(226,147,8)" fg:x="2277" fg:w="1"/><text x="37.9924%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="37.7424%" y="997" width="0.0166%" height="15" fill="rgb(226,23,13)" fg:x="2277" fg:w="1"/><text x="37.9924%" y="1007.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.7590%" y="757" width="0.0332%" height="15" fill="rgb(240,63,4)" fg:x="2278" fg:w="2"/><text x="38.0090%" y="767.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.7590%" y="741" width="0.0332%" height="15" fill="rgb(221,1,32)" fg:x="2278" fg:w="2"/><text x="38.0090%" y="751.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (2 samples, 0.03%)</title><rect x="37.7590%" y="725" width="0.0332%" height="15" fill="rgb(242,117,10)" fg:x="2278" fg:w="2"/><text x="38.0090%" y="735.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="37.7756%" y="709" width="0.0166%" height="15" fill="rgb(249,172,44)" fg:x="2279" fg:w="1"/><text x="38.0256%" y="719.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="37.8087%" y="693" width="0.0166%" height="15" fill="rgb(244,46,45)" fg:x="2281" fg:w="1"/><text x="38.0587%" y="703.50"></text></g><g><title>IsToKeyID (1 samples, 0.02%)</title><rect x="37.8087%" y="677" width="0.0166%" height="15" fill="rgb(206,43,17)" fg:x="2281" fg:w="1"/><text x="38.0587%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="37.8087%" y="661" width="0.0166%" height="15" fill="rgb(239,218,39)" fg:x="2281" fg:w="1"/><text x="38.0587%" y="671.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (51 samples, 0.85%)</title><rect x="36.9965%" y="1237" width="0.8454%" height="15" fill="rgb(208,169,54)" fg:x="2232" fg:w="51"/><text x="37.2465%" y="1247.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1221" width="0.1326%" height="15" fill="rgb(247,25,42)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1231.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (8 samples, 0.13%)</title><rect x="37.7093%" y="1205" width="0.1326%" height="15" fill="rgb(226,23,31)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1215.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1189" width="0.1326%" height="15" fill="rgb(247,16,28)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1199.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1173" width="0.1326%" height="15" fill="rgb(231,147,38)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1183.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1157" width="0.1326%" height="15" fill="rgb(253,81,48)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1167.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1141" width="0.1326%" height="15" fill="rgb(249,222,43)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1125" width="0.1326%" height="15" fill="rgb(221,3,27)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1135.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1109" width="0.1326%" height="15" fill="rgb(228,180,5)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1093" width="0.1326%" height="15" fill="rgb(227,131,42)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1103.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1077" width="0.1326%" height="15" fill="rgb(212,3,39)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1087.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.13%)</title><rect x="37.7093%" y="1061" width="0.1326%" height="15" fill="rgb(226,45,5)" fg:x="2275" fg:w="8"/><text x="37.9593%" y="1071.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="1045" width="0.0829%" height="15" fill="rgb(215,167,45)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="1055.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="1029" width="0.0829%" height="15" fill="rgb(250,218,53)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="1013" width="0.0829%" height="15" fill="rgb(207,140,0)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="1023.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="997" width="0.0829%" height="15" fill="rgb(238,133,51)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="1007.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="981" width="0.0829%" height="15" fill="rgb(218,203,53)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="991.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="965" width="0.0829%" height="15" fill="rgb(226,184,25)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="975.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="949" width="0.0829%" height="15" fill="rgb(231,121,21)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="959.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="933" width="0.0829%" height="15" fill="rgb(251,14,34)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="943.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="917" width="0.0829%" height="15" fill="rgb(249,193,11)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="927.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="901" width="0.0829%" height="15" fill="rgb(220,172,37)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="911.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="885" width="0.0829%" height="15" fill="rgb(231,229,43)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="895.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="869" width="0.0829%" height="15" fill="rgb(250,161,5)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="879.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="853" width="0.0829%" height="15" fill="rgb(218,225,18)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="863.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="837" width="0.0829%" height="15" fill="rgb(245,45,42)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="847.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="821" width="0.0829%" height="15" fill="rgb(211,115,1)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="831.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="805" width="0.0829%" height="15" fill="rgb(248,133,52)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="815.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="789" width="0.0829%" height="15" fill="rgb(238,100,21)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="799.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.7590%" y="773" width="0.0829%" height="15" fill="rgb(247,144,11)" fg:x="2278" fg:w="5"/><text x="38.0090%" y="783.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="37.7921%" y="757" width="0.0497%" height="15" fill="rgb(206,164,16)" fg:x="2280" fg:w="3"/><text x="38.0421%" y="767.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (3 samples, 0.05%)</title><rect x="37.7921%" y="741" width="0.0497%" height="15" fill="rgb(222,34,3)" fg:x="2280" fg:w="3"/><text x="38.0421%" y="751.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (3 samples, 0.05%)</title><rect x="37.7921%" y="725" width="0.0497%" height="15" fill="rgb(248,82,4)" fg:x="2280" fg:w="3"/><text x="38.0421%" y="735.50"></text></g><g><title>CompressScript (2 samples, 0.03%)</title><rect x="37.8087%" y="709" width="0.0332%" height="15" fill="rgb(228,81,46)" fg:x="2281" fg:w="2"/><text x="38.0587%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="693" width="0.0166%" height="15" fill="rgb(227,67,47)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="703.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="677" width="0.0166%" height="15" fill="rgb(215,93,53)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="687.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="661" width="0.0166%" height="15" fill="rgb(248,194,39)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="671.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="645" width="0.0166%" height="15" fill="rgb(215,5,19)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="655.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="629" width="0.0166%" height="15" fill="rgb(226,215,51)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="639.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="613" width="0.0166%" height="15" fill="rgb(225,56,26)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="597" width="0.0166%" height="15" fill="rgb(222,75,29)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="607.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="581" width="0.0166%" height="15" fill="rgb(236,139,6)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="591.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="565" width="0.0166%" height="15" fill="rgb(223,137,36)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="549" width="0.0166%" height="15" fill="rgb(226,99,2)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="559.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="533" width="0.0166%" height="15" fill="rgb(206,133,23)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="543.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="517" width="0.0166%" height="15" fill="rgb(243,173,15)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="527.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="501" width="0.0166%" height="15" fill="rgb(228,69,28)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="511.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="485" width="0.0166%" height="15" fill="rgb(212,51,22)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="495.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="469" width="0.0166%" height="15" fill="rgb(227,113,0)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="479.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="453" width="0.0166%" height="15" fill="rgb(252,84,27)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="463.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="437" width="0.0166%" height="15" fill="rgb(223,145,39)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="447.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="421" width="0.0166%" height="15" fill="rgb(239,219,30)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="431.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="405" width="0.0166%" height="15" fill="rgb(224,196,39)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="415.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="389" width="0.0166%" height="15" fill="rgb(205,35,43)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="399.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8253%" y="373" width="0.0166%" height="15" fill="rgb(228,201,21)" fg:x="2282" fg:w="1"/><text x="38.0753%" y="383.50"></text></g><g><title>CompressAmount (2 samples, 0.03%)</title><rect x="37.8419%" y="1061" width="0.0332%" height="15" fill="rgb(237,118,16)" fg:x="2283" fg:w="2"/><text x="38.0919%" y="1071.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.8750%" y="773" width="0.0166%" height="15" fill="rgb(241,17,19)" fg:x="2285" fg:w="1"/><text x="38.1250%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.8750%" y="757" width="0.0166%" height="15" fill="rgb(214,10,25)" fg:x="2285" fg:w="1"/><text x="38.1250%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (1 samples, 0.02%)</title><rect x="37.8750%" y="741" width="0.0166%" height="15" fill="rgb(238,37,29)" fg:x="2285" fg:w="1"/><text x="38.1250%" y="751.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="37.8750%" y="725" width="0.0166%" height="15" fill="rgb(253,83,25)" fg:x="2285" fg:w="1"/><text x="38.1250%" y="735.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="37.9082%" y="709" width="0.0166%" height="15" fill="rgb(234,192,12)" fg:x="2287" fg:w="1"/><text x="38.1582%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.9247%" y="421" width="0.0166%" height="15" fill="rgb(241,216,45)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="431.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.9247%" y="405" width="0.0166%" height="15" fill="rgb(242,22,33)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="415.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (1 samples, 0.02%)</title><rect x="37.9247%" y="389" width="0.0166%" height="15" fill="rgb(231,105,49)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="399.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="37.9247%" y="373" width="0.0166%" height="15" fill="rgb(218,204,15)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="383.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.9247%" y="357" width="0.0166%" height="15" fill="rgb(235,138,41)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="367.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.9247%" y="341" width="0.0166%" height="15" fill="rgb(246,0,9)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="351.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.9247%" y="325" width="0.0166%" height="15" fill="rgb(210,74,4)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="335.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.9247%" y="309" width="0.0166%" height="15" fill="rgb(250,60,41)" fg:x="2288" fg:w="1"/><text x="38.1747%" y="319.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (63 samples, 1.04%)</title><rect x="36.9136%" y="1253" width="1.0443%" height="15" fill="rgb(220,115,12)" fg:x="2227" fg:w="63"/><text x="37.1636%" y="1263.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1237" width="0.1160%" height="15" fill="rgb(237,100,13)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (7 samples, 0.12%)</title><rect x="37.8419%" y="1221" width="0.1160%" height="15" fill="rgb(213,55,26)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1205" width="0.1160%" height="15" fill="rgb(216,17,4)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1189" width="0.1160%" height="15" fill="rgb(220,153,47)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1173" width="0.1160%" height="15" fill="rgb(215,131,9)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1157" width="0.1160%" height="15" fill="rgb(233,46,42)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1141" width="0.1160%" height="15" fill="rgb(226,86,7)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1151.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1125" width="0.1160%" height="15" fill="rgb(239,226,21)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1109" width="0.1160%" height="15" fill="rgb(244,137,22)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1093" width="0.1160%" height="15" fill="rgb(211,139,35)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.12%)</title><rect x="37.8419%" y="1077" width="0.1160%" height="15" fill="rgb(214,62,50)" fg:x="2283" fg:w="7"/><text x="38.0919%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="1061" width="0.0829%" height="15" fill="rgb(212,113,44)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="1045" width="0.0829%" height="15" fill="rgb(226,150,43)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="1029" width="0.0829%" height="15" fill="rgb(250,71,37)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="1013" width="0.0829%" height="15" fill="rgb(219,76,19)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="997" width="0.0829%" height="15" fill="rgb(250,39,11)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="981" width="0.0829%" height="15" fill="rgb(230,64,31)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="965" width="0.0829%" height="15" fill="rgb(208,222,23)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="975.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="949" width="0.0829%" height="15" fill="rgb(227,125,18)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="959.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="933" width="0.0829%" height="15" fill="rgb(234,210,9)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="917" width="0.0829%" height="15" fill="rgb(217,127,24)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="901" width="0.0829%" height="15" fill="rgb(239,141,48)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="885" width="0.0829%" height="15" fill="rgb(227,109,8)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="895.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="869" width="0.0829%" height="15" fill="rgb(235,184,23)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="853" width="0.0829%" height="15" fill="rgb(227,226,48)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="837" width="0.0829%" height="15" fill="rgb(206,150,11)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="821" width="0.0829%" height="15" fill="rgb(254,2,33)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="805" width="0.0829%" height="15" fill="rgb(243,160,20)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="815.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="37.8750%" y="789" width="0.0829%" height="15" fill="rgb(218,208,30)" fg:x="2285" fg:w="5"/><text x="38.1250%" y="799.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="37.8916%" y="773" width="0.0663%" height="15" fill="rgb(224,120,49)" fg:x="2286" fg:w="4"/><text x="38.1416%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="37.8916%" y="757" width="0.0663%" height="15" fill="rgb(246,12,2)" fg:x="2286" fg:w="4"/><text x="38.1416%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (4 samples, 0.07%)</title><rect x="37.8916%" y="741" width="0.0663%" height="15" fill="rgb(236,117,3)" fg:x="2286" fg:w="4"/><text x="38.1416%" y="751.50"></text></g><g><title>CompressScript (4 samples, 0.07%)</title><rect x="37.8916%" y="725" width="0.0663%" height="15" fill="rgb(216,128,52)" fg:x="2286" fg:w="4"/><text x="38.1416%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="709" width="0.0332%" height="15" fill="rgb(246,145,19)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="693" width="0.0332%" height="15" fill="rgb(222,11,46)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="677" width="0.0332%" height="15" fill="rgb(245,82,36)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="687.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="661" width="0.0332%" height="15" fill="rgb(250,73,51)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="671.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="645" width="0.0332%" height="15" fill="rgb(221,189,23)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="655.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="629" width="0.0332%" height="15" fill="rgb(210,33,7)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="613" width="0.0332%" height="15" fill="rgb(210,107,22)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="623.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="597" width="0.0332%" height="15" fill="rgb(222,116,37)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="581" width="0.0332%" height="15" fill="rgb(254,17,48)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="565" width="0.0332%" height="15" fill="rgb(224,36,32)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="575.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="549" width="0.0332%" height="15" fill="rgb(232,90,46)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="559.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="533" width="0.0332%" height="15" fill="rgb(241,66,40)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="517" width="0.0332%" height="15" fill="rgb(249,184,29)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="527.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="501" width="0.0332%" height="15" fill="rgb(231,181,1)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="511.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="485" width="0.0332%" height="15" fill="rgb(224,94,2)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="495.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="469" width="0.0332%" height="15" fill="rgb(229,170,15)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="479.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="453" width="0.0332%" height="15" fill="rgb(240,127,35)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="463.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="37.9247%" y="437" width="0.0332%" height="15" fill="rgb(248,196,34)" fg:x="2288" fg:w="2"/><text x="38.1747%" y="447.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="37.9413%" y="421" width="0.0166%" height="15" fill="rgb(236,137,7)" fg:x="2289" fg:w="1"/><text x="38.1913%" y="431.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.9413%" y="405" width="0.0166%" height="15" fill="rgb(235,127,16)" fg:x="2289" fg:w="1"/><text x="38.1913%" y="415.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="37.9413%" y="389" width="0.0166%" height="15" fill="rgb(250,192,54)" fg:x="2289" fg:w="1"/><text x="38.1913%" y="399.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (1 samples, 0.02%)</title><rect x="37.9413%" y="373" width="0.0166%" height="15" fill="rgb(218,98,20)" fg:x="2289" fg:w="1"/><text x="38.1913%" y="383.50"></text></g><g><title>void Serialize&lt;SizeComputer, unsigned char&gt; (1 samples, 0.02%)</title><rect x="37.9413%" y="357" width="0.0166%" height="15" fill="rgb(230,176,47)" fg:x="2289" fg:w="1"/><text x="38.1913%" y="367.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="37.9413%" y="341" width="0.0166%" height="15" fill="rgb(244,2,33)" fg:x="2289" fg:w="1"/><text x="38.1913%" y="351.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="37.9579%" y="1253" width="0.0166%" height="15" fill="rgb(231,100,17)" fg:x="2290" fg:w="1"/><text x="38.2079%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="37.9579%" y="1237" width="0.0166%" height="15" fill="rgb(245,23,12)" fg:x="2290" fg:w="1"/><text x="38.2079%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.02%)</title><rect x="37.9579%" y="1221" width="0.0166%" height="15" fill="rgb(249,55,22)" fg:x="2290" fg:w="1"/><text x="38.2079%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="37.9579%" y="1205" width="0.0166%" height="15" fill="rgb(207,134,9)" fg:x="2290" fg:w="1"/><text x="38.2079%" y="1215.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (1 samples, 0.02%)</title><rect x="37.9579%" y="1189" width="0.0166%" height="15" fill="rgb(218,134,0)" fg:x="2290" fg:w="1"/><text x="38.2079%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="37.9745%" y="1253" width="0.0166%" height="15" fill="rgb(213,212,33)" fg:x="2291" fg:w="1"/><text x="38.2245%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="37.9745%" y="1237" width="0.0166%" height="15" fill="rgb(252,106,18)" fg:x="2291" fg:w="1"/><text x="38.2245%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="37.9910%" y="1237" width="0.0166%" height="15" fill="rgb(208,126,42)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="37.9910%" y="1221" width="0.0166%" height="15" fill="rgb(246,175,29)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="37.9910%" y="1205" width="0.0166%" height="15" fill="rgb(215,13,50)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="37.9910%" y="1189" width="0.0166%" height="15" fill="rgb(216,172,15)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;PrecomputedTransactionData&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="37.9910%" y="1173" width="0.0166%" height="15" fill="rgb(212,103,13)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1183.50"></text></g><g><title>std::allocator&lt;PrecomputedTransactionData&gt;::allocate (1 samples, 0.02%)</title><rect x="37.9910%" y="1157" width="0.0166%" height="15" fill="rgb(231,171,36)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1167.50"></text></g><g><title>std::__new_allocator&lt;PrecomputedTransactionData&gt;::allocate (1 samples, 0.02%)</title><rect x="37.9910%" y="1141" width="0.0166%" height="15" fill="rgb(250,123,20)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1151.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="37.9910%" y="1125" width="0.0166%" height="15" fill="rgb(212,53,50)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1135.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="37.9910%" y="1109" width="0.0166%" height="15" fill="rgb(243,54,12)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1119.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="37.9910%" y="1093" width="0.0166%" height="15" fill="rgb(234,101,34)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1103.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="37.9910%" y="1077" width="0.0166%" height="15" fill="rgb(254,67,22)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1087.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="37.9910%" y="1061" width="0.0166%" height="15" fill="rgb(250,35,47)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="1045" width="0.0166%" height="15" fill="rgb(226,126,38)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="1029" width="0.0166%" height="15" fill="rgb(216,138,53)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="1013" width="0.0166%" height="15" fill="rgb(246,199,43)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="997" width="0.0166%" height="15" fill="rgb(232,125,11)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="981" width="0.0166%" height="15" fill="rgb(218,219,45)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="965" width="0.0166%" height="15" fill="rgb(216,102,54)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="949" width="0.0166%" height="15" fill="rgb(250,228,7)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="37.9910%" y="933" width="0.0166%" height="15" fill="rgb(226,125,25)" fg:x="2292" fg:w="1"/><text x="38.2410%" y="943.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (11 samples, 0.18%)</title><rect x="37.9910%" y="1253" width="0.1823%" height="15" fill="rgb(224,165,27)" fg:x="2292" fg:w="11"/><text x="38.2410%" y="1263.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (10 samples, 0.17%)</title><rect x="38.0076%" y="1237" width="0.1658%" height="15" fill="rgb(233,86,3)" fg:x="2293" fg:w="10"/><text x="38.2576%" y="1247.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (10 samples, 0.17%)</title><rect x="38.0076%" y="1221" width="0.1658%" height="15" fill="rgb(228,116,20)" fg:x="2293" fg:w="10"/><text x="38.2576%" y="1231.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (10 samples, 0.17%)</title><rect x="38.0076%" y="1205" width="0.1658%" height="15" fill="rgb(209,192,17)" fg:x="2293" fg:w="10"/><text x="38.2576%" y="1215.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (10 samples, 0.17%)</title><rect x="38.0076%" y="1189" width="0.1658%" height="15" fill="rgb(224,88,34)" fg:x="2293" fg:w="10"/><text x="38.2576%" y="1199.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (10 samples, 0.17%)</title><rect x="38.0076%" y="1173" width="0.1658%" height="15" fill="rgb(233,38,6)" fg:x="2293" fg:w="10"/><text x="38.2576%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="38.0408%" y="1157" width="0.1326%" height="15" fill="rgb(212,59,30)" fg:x="2295" fg:w="8"/><text x="38.2908%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="38.0408%" y="1141" width="0.1326%" height="15" fill="rgb(213,80,3)" fg:x="2295" fg:w="8"/><text x="38.2908%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="38.0408%" y="1125" width="0.1326%" height="15" fill="rgb(251,178,7)" fg:x="2295" fg:w="8"/><text x="38.2908%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="38.0408%" y="1109" width="0.1326%" height="15" fill="rgb(213,154,26)" fg:x="2295" fg:w="8"/><text x="38.2908%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0574%" y="1093" width="0.1160%" height="15" fill="rgb(238,165,49)" fg:x="2296" fg:w="7"/><text x="38.3074%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="38.0739%" y="1077" width="0.0995%" height="15" fill="rgb(248,91,46)" fg:x="2297" fg:w="6"/><text x="38.3239%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="38.0739%" y="1061" width="0.0995%" height="15" fill="rgb(244,21,52)" fg:x="2297" fg:w="6"/><text x="38.3239%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="38.1237%" y="1045" width="0.0497%" height="15" fill="rgb(247,122,20)" fg:x="2300" fg:w="3"/><text x="38.3737%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="38.1402%" y="1029" width="0.0332%" height="15" fill="rgb(218,27,9)" fg:x="2301" fg:w="2"/><text x="38.3902%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1568%" y="1013" width="0.0166%" height="15" fill="rgb(246,7,6)" fg:x="2302" fg:w="1"/><text x="38.4068%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1568%" y="997" width="0.0166%" height="15" fill="rgb(227,135,54)" fg:x="2302" fg:w="1"/><text x="38.4068%" y="1007.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="38.1734%" y="1253" width="0.0166%" height="15" fill="rgb(247,14,11)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (1 samples, 0.02%)</title><rect x="38.1734%" y="1237" width="0.0166%" height="15" fill="rgb(206,149,34)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (1 samples, 0.02%)</title><rect x="38.1734%" y="1221" width="0.0166%" height="15" fill="rgb(227,228,4)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1231.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (1 samples, 0.02%)</title><rect x="38.1734%" y="1205" width="0.0166%" height="15" fill="rgb(238,218,28)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (1 samples, 0.02%)</title><rect x="38.1734%" y="1189" width="0.0166%" height="15" fill="rgb(252,86,40)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (1 samples, 0.02%)</title><rect x="38.1734%" y="1173" width="0.0166%" height="15" fill="rgb(251,225,11)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1183.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (1 samples, 0.02%)</title><rect x="38.1734%" y="1157" width="0.0166%" height="15" fill="rgb(206,46,49)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1167.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="38.1734%" y="1141" width="0.0166%" height="15" fill="rgb(245,128,24)" fg:x="2303" fg:w="1"/><text x="38.4234%" y="1151.50"></text></g><g><title>Chainstate::ConnectBlock (1,003 samples, 16.63%)</title><rect x="21.5813%" y="1269" width="16.6252%" height="15" fill="rgb(219,177,34)" fg:x="1302" fg:w="1003"/><text x="21.8313%" y="1279.50">Chainstate::ConnectBlock</text></g><g><title>void LogPrintFormatInternal&lt;int, double, double, double, double&gt; (1 samples, 0.02%)</title><rect x="38.1900%" y="1253" width="0.0166%" height="15" fill="rgb(218,60,48)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1263.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="38.1900%" y="1237" width="0.0166%" height="15" fill="rgb(221,11,5)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.1900%" y="1221" width="0.0166%" height="15" fill="rgb(220,148,13)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1231.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.1900%" y="1205" width="0.0166%" height="15" fill="rgb(210,16,3)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1215.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="38.1900%" y="1189" width="0.0166%" height="15" fill="rgb(236,80,2)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1199.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.1900%" y="1173" width="0.0166%" height="15" fill="rgb(239,129,19)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1183.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="38.1900%" y="1157" width="0.0166%" height="15" fill="rgb(220,106,35)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1167.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.1900%" y="1141" width="0.0166%" height="15" fill="rgb(252,139,45)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1151.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="38.1900%" y="1125" width="0.0166%" height="15" fill="rgb(229,8,36)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1900%" y="1109" width="0.0166%" height="15" fill="rgb(230,126,33)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1900%" y="1093" width="0.0166%" height="15" fill="rgb(239,140,21)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1900%" y="1077" width="0.0166%" height="15" fill="rgb(254,104,9)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1900%" y="1061" width="0.0166%" height="15" fill="rgb(239,52,14)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="38.1900%" y="1045" width="0.0166%" height="15" fill="rgb(208,227,44)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1900%" y="1029" width="0.0166%" height="15" fill="rgb(246,18,19)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1900%" y="1013" width="0.0166%" height="15" fill="rgb(235,228,25)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.1900%" y="997" width="0.0166%" height="15" fill="rgb(240,156,20)" fg:x="2304" fg:w="1"/><text x="38.4400%" y="1007.50"></text></g><g><title>Chainstate::FlushStateToDisk (1 samples, 0.02%)</title><rect x="38.2065%" y="1269" width="0.0166%" height="15" fill="rgb(224,8,20)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1279.50"></text></g><g><title>Chainstate::GetCoinsCacheSizeState (1 samples, 0.02%)</title><rect x="38.2065%" y="1253" width="0.0166%" height="15" fill="rgb(214,12,52)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1263.50"></text></g><g><title>CTxMemPool::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="38.2065%" y="1237" width="0.0166%" height="15" fill="rgb(211,220,47)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1247.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (1 samples, 0.02%)</title><rect x="38.2065%" y="1221" width="0.0166%" height="15" fill="rgb(250,173,5)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1231.50"></text></g><g><title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (1 samples, 0.02%)</title><rect x="38.2065%" y="1205" width="0.0166%" height="15" fill="rgb(250,125,52)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1215.50"></text></g><g><title>CCoinsViewCache::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="38.2065%" y="1189" width="0.0166%" height="15" fill="rgb(209,133,18)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1199.50"></text></g><g><title>DynamicUsage&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, 144, 8&gt; (1 samples, 0.02%)</title><rect x="38.2065%" y="1173" width="0.0166%" height="15" fill="rgb(216,173,22)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ChunkSizeBytes (1 samples, 0.02%)</title><rect x="38.2065%" y="1157" width="0.0166%" height="15" fill="rgb(205,3,22)" fg:x="2305" fg:w="1"/><text x="38.4565%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="38.2231%" y="1269" width="0.0166%" height="15" fill="rgb(248,22,20)" fg:x="2306" fg:w="1"/><text x="38.4731%" y="1279.50"></text></g><g><title>ValidationSignals::BlockChecked (1 samples, 0.02%)</title><rect x="38.2397%" y="1269" width="0.0166%" height="15" fill="rgb(233,6,29)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1279.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [13], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="38.2397%" y="1253" width="0.0166%" height="15" fill="rgb(240,22,54)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1263.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="38.2397%" y="1237" width="0.0166%" height="15" fill="rgb(231,133,32)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.2397%" y="1221" width="0.0166%" height="15" fill="rgb(248,193,4)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1231.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="38.2397%" y="1205" width="0.0166%" height="15" fill="rgb(211,178,46)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1215.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="38.2397%" y="1189" width="0.0166%" height="15" fill="rgb(224,5,42)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1199.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.2397%" y="1173" width="0.0166%" height="15" fill="rgb(239,176,25)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1183.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="38.2397%" y="1157" width="0.0166%" height="15" fill="rgb(245,187,50)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1167.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="38.2397%" y="1141" width="0.0166%" height="15" fill="rgb(248,24,15)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1151.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="38.2397%" y="1125" width="0.0166%" height="15" fill="rgb(205,166,13)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2397%" y="1109" width="0.0166%" height="15" fill="rgb(208,114,23)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2397%" y="1093" width="0.0166%" height="15" fill="rgb(239,127,18)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2397%" y="1077" width="0.0166%" height="15" fill="rgb(219,154,28)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2397%" y="1061" width="0.0166%" height="15" fill="rgb(225,157,23)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="38.2397%" y="1045" width="0.0166%" height="15" fill="rgb(219,8,6)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2397%" y="1029" width="0.0166%" height="15" fill="rgb(212,47,6)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.2397%" y="1013" width="0.0166%" height="15" fill="rgb(224,190,4)" fg:x="2307" fg:w="1"/><text x="38.4897%" y="1023.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="38.2563%" y="1269" width="0.0166%" height="15" fill="rgb(239,183,29)" fg:x="2308" fg:w="1"/><text x="38.5063%" y="1279.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1,545 samples, 25.61%)</title><rect x="12.6803%" y="1301" width="25.6091%" height="15" fill="rgb(213,57,7)" fg:x="765" fg:w="1545"/><text x="12.9303%" y="1311.50">Chainstate::ActivateBestChainStep</text></g><g><title>Chainstate::ConnectTip (1,545 samples, 25.61%)</title><rect x="12.6803%" y="1285" width="25.6091%" height="15" fill="rgb(216,148,1)" fg:x="765" fg:w="1545"/><text x="12.9303%" y="1295.50">Chainstate::ConnectTip</text></g><g><title>boost::multi_index::detail::bucket_array_base&lt;true&gt;::position (1 samples, 0.02%)</title><rect x="38.2728%" y="1269" width="0.0166%" height="15" fill="rgb(236,182,29)" fg:x="2309" fg:w="1"/><text x="38.5228%" y="1279.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (8 samples, 0.13%)</title><rect x="38.2894%" y="1269" width="0.1326%" height="15" fill="rgb(244,120,48)" fg:x="2310" fg:w="8"/><text x="38.5394%" y="1279.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (8 samples, 0.13%)</title><rect x="38.2894%" y="1253" width="0.1326%" height="15" fill="rgb(206,71,34)" fg:x="2310" fg:w="8"/><text x="38.5394%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="38.2894%" y="1237" width="0.1326%" height="15" fill="rgb(242,32,6)" fg:x="2310" fg:w="8"/><text x="38.5394%" y="1247.50"></text></g><g><title>_int_free (8 samples, 0.13%)</title><rect x="38.2894%" y="1221" width="0.1326%" height="15" fill="rgb(241,35,3)" fg:x="2310" fg:w="8"/><text x="38.5394%" y="1231.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (8 samples, 0.13%)</title><rect x="38.2894%" y="1205" width="0.1326%" height="15" fill="rgb(222,62,19)" fg:x="2310" fg:w="8"/><text x="38.5394%" y="1215.50"></text></g><g><title>malloc_consolidate (8 samples, 0.13%)</title><rect x="38.2894%" y="1189" width="0.1326%" height="15" fill="rgb(223,110,41)" fg:x="2310" fg:w="8"/><text x="38.5394%" y="1199.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="38.4054%" y="1173" width="0.0166%" height="15" fill="rgb(208,224,4)" fg:x="2317" fg:w="1"/><text x="38.6554%" y="1183.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="38.4220%" y="1205" width="0.0166%" height="15" fill="rgb(241,137,19)" fg:x="2318" fg:w="1"/><text x="38.6720%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="38.4220%" y="1189" width="0.0166%" height="15" fill="rgb(244,24,17)" fg:x="2318" fg:w="1"/><text x="38.6720%" y="1199.50"></text></g><g><title>CDBBatch::EraseImpl (3 samples, 0.05%)</title><rect x="38.4220%" y="1237" width="0.0497%" height="15" fill="rgb(245,178,49)" fg:x="2318" fg:w="3"/><text x="38.6720%" y="1247.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (3 samples, 0.05%)</title><rect x="38.4220%" y="1221" width="0.0497%" height="15" fill="rgb(219,160,38)" fg:x="2318" fg:w="3"/><text x="38.6720%" y="1231.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="38.4386%" y="1205" width="0.0332%" height="15" fill="rgb(228,137,14)" fg:x="2319" fg:w="2"/><text x="38.6886%" y="1215.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="38.4386%" y="1189" width="0.0332%" height="15" fill="rgb(237,134,11)" fg:x="2319" fg:w="2"/><text x="38.6886%" y="1199.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="38.4552%" y="1173" width="0.0166%" height="15" fill="rgb(211,126,44)" fg:x="2320" fg:w="1"/><text x="38.7052%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="38.4552%" y="1157" width="0.0166%" height="15" fill="rgb(226,171,33)" fg:x="2320" fg:w="1"/><text x="38.7052%" y="1167.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="38.4552%" y="1141" width="0.0166%" height="15" fill="rgb(253,99,13)" fg:x="2320" fg:w="1"/><text x="38.7052%" y="1151.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="38.4717%" y="1221" width="0.0166%" height="15" fill="rgb(244,48,7)" fg:x="2321" fg:w="1"/><text x="38.7217%" y="1231.50"></text></g><g><title>CDBBatch::WriteImpl (3 samples, 0.05%)</title><rect x="38.4883%" y="1205" width="0.0497%" height="15" fill="rgb(244,217,54)" fg:x="2322" fg:w="3"/><text x="38.7383%" y="1215.50"></text></g><g><title>DataStream::Xor (3 samples, 0.05%)</title><rect x="38.4883%" y="1189" width="0.0497%" height="15" fill="rgb(224,15,18)" fg:x="2322" fg:w="3"/><text x="38.7383%" y="1199.50"></text></g><g><title>util::Xor (3 samples, 0.05%)</title><rect x="38.4883%" y="1173" width="0.0497%" height="15" fill="rgb(244,99,12)" fg:x="2322" fg:w="3"/><text x="38.7383%" y="1183.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (4 samples, 0.07%)</title><rect x="38.4883%" y="1221" width="0.0663%" height="15" fill="rgb(233,226,8)" fg:x="2322" fg:w="4"/><text x="38.7383%" y="1231.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="38.5380%" y="1205" width="0.0166%" height="15" fill="rgb(229,211,3)" fg:x="2325" fg:w="1"/><text x="38.7880%" y="1215.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="38.5380%" y="1189" width="0.0166%" height="15" fill="rgb(216,140,21)" fg:x="2325" fg:w="1"/><text x="38.7880%" y="1199.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="38.5380%" y="1173" width="0.0166%" height="15" fill="rgb(234,122,30)" fg:x="2325" fg:w="1"/><text x="38.7880%" y="1183.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="38.5380%" y="1157" width="0.0166%" height="15" fill="rgb(236,25,46)" fg:x="2325" fg:w="1"/><text x="38.7880%" y="1167.50"></text></g><g><title>CDBBatch::WriteImpl (2 samples, 0.03%)</title><rect x="38.5546%" y="1205" width="0.0332%" height="15" fill="rgb(217,52,54)" fg:x="2326" fg:w="2"/><text x="38.8046%" y="1215.50"></text></g><g><title>DataStream::Xor (2 samples, 0.03%)</title><rect x="38.5546%" y="1189" width="0.0332%" height="15" fill="rgb(222,29,26)" fg:x="2326" fg:w="2"/><text x="38.8046%" y="1199.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="38.5546%" y="1173" width="0.0332%" height="15" fill="rgb(216,177,29)" fg:x="2326" fg:w="2"/><text x="38.8046%" y="1183.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="38.5878%" y="1205" width="0.0166%" height="15" fill="rgb(247,136,51)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1215.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="38.5878%" y="1189" width="0.0166%" height="15" fill="rgb(231,47,47)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1199.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1173" width="0.0166%" height="15" fill="rgb(211,192,36)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1183.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="38.5878%" y="1157" width="0.0166%" height="15" fill="rgb(229,156,32)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1141" width="0.0166%" height="15" fill="rgb(248,213,20)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1151.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1125" width="0.0166%" height="15" fill="rgb(217,64,7)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1109" width="0.0166%" height="15" fill="rgb(232,142,8)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1119.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1093" width="0.0166%" height="15" fill="rgb(224,92,44)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1103.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1077" width="0.0166%" height="15" fill="rgb(214,169,17)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1087.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1061" width="0.0166%" height="15" fill="rgb(210,59,37)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1045" width="0.0166%" height="15" fill="rgb(214,116,48)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1055.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1029" width="0.0166%" height="15" fill="rgb(244,191,6)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1039.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="1013" width="0.0166%" height="15" fill="rgb(241,50,52)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1023.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="997" width="0.0166%" height="15" fill="rgb(236,75,39)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="1007.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="38.5878%" y="981" width="0.0166%" height="15" fill="rgb(236,99,0)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="991.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="38.5878%" y="965" width="0.0166%" height="15" fill="rgb(207,202,15)" fg:x="2328" fg:w="1"/><text x="38.8378%" y="975.50"></text></g><g><title>leveldb::WriteBatch::Put (5 samples, 0.08%)</title><rect x="38.5546%" y="1221" width="0.0829%" height="15" fill="rgb(233,207,14)" fg:x="2326" fg:w="5"/><text x="38.8046%" y="1231.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="38.6043%" y="1205" width="0.0332%" height="15" fill="rgb(226,27,51)" fg:x="2329" fg:w="2"/><text x="38.8543%" y="1215.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.03%)</title><rect x="38.6043%" y="1189" width="0.0332%" height="15" fill="rgb(206,104,42)" fg:x="2329" fg:w="2"/><text x="38.8543%" y="1199.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="38.6209%" y="1173" width="0.0166%" height="15" fill="rgb(212,225,4)" fg:x="2330" fg:w="1"/><text x="38.8709%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="38.6209%" y="1157" width="0.0166%" height="15" fill="rgb(233,96,42)" fg:x="2330" fg:w="1"/><text x="38.8709%" y="1167.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="38.6209%" y="1141" width="0.0166%" height="15" fill="rgb(229,21,32)" fg:x="2330" fg:w="1"/><text x="38.8709%" y="1151.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (4 samples, 0.07%)</title><rect x="38.6375%" y="1205" width="0.0663%" height="15" fill="rgb(226,216,24)" fg:x="2331" fg:w="4"/><text x="38.8875%" y="1215.50"></text></g><g><title>decltype  (4 samples, 0.07%)</title><rect x="38.6375%" y="1189" width="0.0663%" height="15" fill="rgb(221,163,17)" fg:x="2331" fg:w="4"/><text x="38.8875%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (4 samples, 0.07%)</title><rect x="38.6375%" y="1173" width="0.0663%" height="15" fill="rgb(216,216,42)" fg:x="2331" fg:w="4"/><text x="38.8875%" y="1183.50"></text></g><g><title>decltype (4 samples, 0.07%)</title><rect x="38.6375%" y="1157" width="0.0663%" height="15" fill="rgb(240,118,7)" fg:x="2331" fg:w="4"/><text x="38.8875%" y="1167.50"></text></g><g><title>CDBBatch::WriteImpl (15 samples, 0.25%)</title><rect x="38.4717%" y="1237" width="0.2486%" height="15" fill="rgb(221,67,37)" fg:x="2321" fg:w="15"/><text x="38.7217%" y="1247.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (5 samples, 0.08%)</title><rect x="38.6375%" y="1221" width="0.0829%" height="15" fill="rgb(241,32,44)" fg:x="2331" fg:w="5"/><text x="38.8875%" y="1231.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="38.7038%" y="1205" width="0.0166%" height="15" fill="rgb(235,204,43)" fg:x="2335" fg:w="1"/><text x="38.9538%" y="1215.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::__distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="38.7038%" y="1189" width="0.0166%" height="15" fill="rgb(213,116,10)" fg:x="2335" fg:w="1"/><text x="38.9538%" y="1199.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="38.7204%" y="1237" width="0.0166%" height="15" fill="rgb(239,15,48)" fg:x="2336" fg:w="1"/><text x="38.9704%" y="1247.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="38.7204%" y="1221" width="0.0166%" height="15" fill="rgb(207,123,36)" fg:x="2336" fg:w="1"/><text x="38.9704%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="38.7369%" y="1221" width="0.0166%" height="15" fill="rgb(209,103,30)" fg:x="2337" fg:w="1"/><text x="38.9869%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="38.7369%" y="1205" width="0.0166%" height="15" fill="rgb(238,100,19)" fg:x="2337" fg:w="1"/><text x="38.9869%" y="1215.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="38.7369%" y="1189" width="0.0166%" height="15" fill="rgb(244,30,14)" fg:x="2337" fg:w="1"/><text x="38.9869%" y="1199.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="38.7369%" y="1173" width="0.0166%" height="15" fill="rgb(249,174,6)" fg:x="2337" fg:w="1"/><text x="38.9869%" y="1183.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="38.7369%" y="1157" width="0.0166%" height="15" fill="rgb(235,213,41)" fg:x="2337" fg:w="1"/><text x="38.9869%" y="1167.50"></text></g><g><title>CCoinsViewDB::BatchWrite (36 samples, 0.60%)</title><rect x="38.4220%" y="1253" width="0.5967%" height="15" fill="rgb(213,118,6)" fg:x="2318" fg:w="36"/><text x="38.6720%" y="1263.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (17 samples, 0.28%)</title><rect x="38.7369%" y="1237" width="0.2818%" height="15" fill="rgb(235,44,51)" fg:x="2337" fg:w="17"/><text x="38.9869%" y="1247.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (16 samples, 0.27%)</title><rect x="38.7535%" y="1221" width="0.2652%" height="15" fill="rgb(217,9,53)" fg:x="2338" fg:w="16"/><text x="39.0035%" y="1231.50"></text></g><g><title>leveldb::DBImpl::MakeRoomForWrite (1 samples, 0.02%)</title><rect x="39.0187%" y="1221" width="0.0166%" height="15" fill="rgb(237,172,34)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1231.50"></text></g><g><title>NewWritableFile (1 samples, 0.02%)</title><rect x="39.0187%" y="1205" width="0.0166%" height="15" fill="rgb(206,206,11)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (1 samples, 0.02%)</title><rect x="39.0187%" y="1189" width="0.0166%" height="15" fill="rgb(214,149,29)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1199.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="39.0187%" y="1173" width="0.0166%" height="15" fill="rgb(208,123,3)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0187%" y="1157" width="0.0166%" height="15" fill="rgb(229,126,4)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0187%" y="1141" width="0.0166%" height="15" fill="rgb(222,92,36)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0187%" y="1125" width="0.0166%" height="15" fill="rgb(216,39,41)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0187%" y="1109" width="0.0166%" height="15" fill="rgb(253,127,28)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0187%" y="1093" width="0.0166%" height="15" fill="rgb(249,152,51)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0187%" y="1077" width="0.0166%" height="15" fill="rgb(209,123,42)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="39.0187%" y="1061" width="0.0166%" height="15" fill="rgb(241,118,22)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="39.0187%" y="1045" width="0.0166%" height="15" fill="rgb(208,25,7)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="39.0187%" y="1029" width="0.0166%" height="15" fill="rgb(243,144,39)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="39.0187%" y="1013" width="0.0166%" height="15" fill="rgb(250,50,5)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="39.0187%" y="997" width="0.0166%" height="15" fill="rgb(207,67,11)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="1007.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="39.0187%" y="981" width="0.0166%" height="15" fill="rgb(245,204,40)" fg:x="2354" fg:w="1"/><text x="39.2687%" y="991.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="39.0353%" y="1205" width="0.0166%" height="15" fill="rgb(238,228,24)" fg:x="2355" fg:w="1"/><text x="39.2853%" y="1215.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="39.0519%" y="1189" width="0.0166%" height="15" fill="rgb(217,116,22)" fg:x="2356" fg:w="1"/><text x="39.3019%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0685%" y="1173" width="0.0166%" height="15" fill="rgb(234,98,12)" fg:x="2357" fg:w="1"/><text x="39.3185%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.0685%" y="1157" width="0.0166%" height="15" fill="rgb(242,170,50)" fg:x="2357" fg:w="1"/><text x="39.3185%" y="1167.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="39.0850%" y="1173" width="0.0166%" height="15" fill="rgb(235,7,5)" fg:x="2358" fg:w="1"/><text x="39.3350%" y="1183.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="39.0850%" y="1157" width="0.0166%" height="15" fill="rgb(241,114,28)" fg:x="2358" fg:w="1"/><text x="39.3350%" y="1167.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (3 samples, 0.05%)</title><rect x="39.0685%" y="1189" width="0.0497%" height="15" fill="rgb(246,112,42)" fg:x="2357" fg:w="3"/><text x="39.3185%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="39.1016%" y="1173" width="0.0166%" height="15" fill="rgb(248,228,14)" fg:x="2359" fg:w="1"/><text x="39.3516%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="39.1182%" y="1189" width="0.0497%" height="15" fill="rgb(208,133,18)" fg:x="2360" fg:w="3"/><text x="39.3682%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="39.1679%" y="1189" width="0.0166%" height="15" fill="rgb(207,35,49)" fg:x="2363" fg:w="1"/><text x="39.4179%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="39.1845%" y="1189" width="0.0166%" height="15" fill="rgb(205,68,36)" fg:x="2364" fg:w="1"/><text x="39.4345%" y="1199.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="39.2011%" y="1173" width="0.0166%" height="15" fill="rgb(245,62,40)" fg:x="2365" fg:w="1"/><text x="39.4511%" y="1183.50"></text></g><g><title>leveldb::GetVarint32 (2 samples, 0.03%)</title><rect x="39.2176%" y="1173" width="0.0332%" height="15" fill="rgb(228,27,24)" fg:x="2366" fg:w="2"/><text x="39.4676%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="39.2508%" y="1157" width="0.0166%" height="15" fill="rgb(253,19,12)" fg:x="2368" fg:w="1"/><text x="39.5008%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.05%)</title><rect x="39.2674%" y="1157" width="0.0497%" height="15" fill="rgb(232,28,20)" fg:x="2369" fg:w="3"/><text x="39.5174%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="39.3171%" y="1157" width="0.0166%" height="15" fill="rgb(218,35,51)" fg:x="2372" fg:w="1"/><text x="39.5671%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="39.3171%" y="1141" width="0.0166%" height="15" fill="rgb(212,90,40)" fg:x="2372" fg:w="1"/><text x="39.5671%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.12%)</title><rect x="39.3337%" y="1141" width="0.1160%" height="15" fill="rgb(220,172,12)" fg:x="2373" fg:w="7"/><text x="39.5837%" y="1151.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.05%)</title><rect x="39.4000%" y="1125" width="0.0497%" height="15" fill="rgb(226,159,20)" fg:x="2377" fg:w="3"/><text x="39.6500%" y="1135.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="39.4497%" y="1141" width="0.0166%" height="15" fill="rgb(234,205,16)" fg:x="2380" fg:w="1"/><text x="39.6997%" y="1151.50"></text></g><g><title>leveldb::GetVarint32 (2 samples, 0.03%)</title><rect x="39.4663%" y="1141" width="0.0332%" height="15" fill="rgb(207,9,39)" fg:x="2381" fg:w="2"/><text x="39.7163%" y="1151.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (7 samples, 0.12%)</title><rect x="39.4994%" y="1141" width="0.1160%" height="15" fill="rgb(249,143,15)" fg:x="2383" fg:w="7"/><text x="39.7494%" y="1151.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.03%)</title><rect x="39.5823%" y="1125" width="0.0332%" height="15" fill="rgb(253,133,29)" fg:x="2388" fg:w="2"/><text x="39.8323%" y="1135.50"></text></g><g><title>leveldb::MemTable::Add (2 samples, 0.03%)</title><rect x="39.6154%" y="1141" width="0.0332%" height="15" fill="rgb(221,187,0)" fg:x="2390" fg:w="2"/><text x="39.8654%" y="1151.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="39.6320%" y="1125" width="0.0166%" height="15" fill="rgb(205,204,26)" fg:x="2391" fg:w="1"/><text x="39.8820%" y="1135.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (8 samples, 0.13%)</title><rect x="39.6486%" y="1141" width="0.1326%" height="15" fill="rgb(224,68,54)" fg:x="2392" fg:w="8"/><text x="39.8986%" y="1151.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="39.7481%" y="1125" width="0.0332%" height="15" fill="rgb(209,67,4)" fg:x="2398" fg:w="2"/><text x="39.9981%" y="1135.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="39.7646%" y="1109" width="0.0166%" height="15" fill="rgb(228,229,18)" fg:x="2399" fg:w="1"/><text x="40.0146%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="39.7812%" y="1125" width="0.0166%" height="15" fill="rgb(231,89,13)" fg:x="2400" fg:w="1"/><text x="40.0312%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="39.8475%" y="1109" width="0.0166%" height="15" fill="rgb(210,182,18)" fg:x="2404" fg:w="1"/><text x="40.0975%" y="1119.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (8 samples, 0.13%)</title><rect x="39.7978%" y="1125" width="0.1326%" height="15" fill="rgb(240,105,2)" fg:x="2401" fg:w="8"/><text x="40.0478%" y="1135.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.07%)</title><rect x="39.8641%" y="1109" width="0.0663%" height="15" fill="rgb(207,170,50)" fg:x="2405" fg:w="4"/><text x="40.1141%" y="1119.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="39.8972%" y="1093" width="0.0332%" height="15" fill="rgb(232,133,24)" fg:x="2407" fg:w="2"/><text x="40.1472%" y="1103.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.03%)</title><rect x="39.8972%" y="1077" width="0.0332%" height="15" fill="rgb(235,166,27)" fg:x="2407" fg:w="2"/><text x="40.1472%" y="1087.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (10 samples, 0.17%)</title><rect x="39.7812%" y="1141" width="0.1658%" height="15" fill="rgb(209,19,13)" fg:x="2400" fg:w="10"/><text x="40.0312%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="39.9304%" y="1125" width="0.0166%" height="15" fill="rgb(226,79,39)" fg:x="2409" fg:w="1"/><text x="40.1804%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.13%)</title><rect x="40.0961%" y="1109" width="0.1326%" height="15" fill="rgb(222,163,10)" fg:x="2419" fg:w="8"/><text x="40.3461%" y="1119.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="40.2122%" y="1093" width="0.0166%" height="15" fill="rgb(214,44,19)" fg:x="2426" fg:w="1"/><text x="40.4622%" y="1103.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (6 samples, 0.10%)</title><rect x="40.2287%" y="1109" width="0.0995%" height="15" fill="rgb(210,217,13)" fg:x="2427" fg:w="6"/><text x="40.4787%" y="1119.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="40.3282%" y="1109" width="0.0166%" height="15" fill="rgb(237,61,54)" fg:x="2433" fg:w="1"/><text x="40.5782%" y="1119.50"></text></g><g><title>GetLengthPrefixedSlice (4 samples, 0.07%)</title><rect x="40.4442%" y="1093" width="0.0663%" height="15" fill="rgb(226,184,24)" fg:x="2440" fg:w="4"/><text x="40.6942%" y="1103.50"></text></g><g><title>leveldb::GetVarint32Ptr (3 samples, 0.05%)</title><rect x="40.4608%" y="1077" width="0.0497%" height="15" fill="rgb(223,226,4)" fg:x="2441" fg:w="3"/><text x="40.7108%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="40.5105%" y="1093" width="0.0166%" height="15" fill="rgb(210,26,41)" fg:x="2444" fg:w="1"/><text x="40.7605%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="40.5271%" y="1093" width="0.0166%" height="15" fill="rgb(220,221,6)" fg:x="2445" fg:w="1"/><text x="40.7771%" y="1103.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="40.5271%" y="1077" width="0.0166%" height="15" fill="rgb(225,89,49)" fg:x="2445" fg:w="1"/><text x="40.7771%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="40.7094%" y="1045" width="0.0166%" height="15" fill="rgb(218,70,45)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="1029" width="0.0166%" height="15" fill="rgb(238,166,21)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="1013" width="0.0166%" height="15" fill="rgb(224,141,44)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="997" width="0.0166%" height="15" fill="rgb(230,12,49)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="981" width="0.0166%" height="15" fill="rgb(212,174,12)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="965" width="0.0166%" height="15" fill="rgb(246,67,9)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="949" width="0.0166%" height="15" fill="rgb(239,35,23)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="933" width="0.0166%" height="15" fill="rgb(211,167,0)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="917" width="0.0166%" height="15" fill="rgb(225,119,45)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.7094%" y="901" width="0.0166%" height="15" fill="rgb(210,162,6)" fg:x="2456" fg:w="1"/><text x="40.9594%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6 samples, 0.10%)</title><rect x="40.6431%" y="1077" width="0.0995%" height="15" fill="rgb(208,118,35)" fg:x="2452" fg:w="6"/><text x="40.8931%" y="1087.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.05%)</title><rect x="40.6929%" y="1061" width="0.0497%" height="15" fill="rgb(239,4,53)" fg:x="2455" fg:w="3"/><text x="40.9429%" y="1071.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="40.7260%" y="1045" width="0.0166%" height="15" fill="rgb(213,130,21)" fg:x="2457" fg:w="1"/><text x="40.9760%" y="1055.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.18%)</title><rect x="40.7426%" y="1077" width="0.1823%" height="15" fill="rgb(235,148,0)" fg:x="2458" fg:w="11"/><text x="40.9926%" y="1087.50"></text></g><g><title>leveldb::ExtractUserKey (3 samples, 0.05%)</title><rect x="40.8752%" y="1061" width="0.0497%" height="15" fill="rgb(244,224,18)" fg:x="2466" fg:w="3"/><text x="41.1252%" y="1071.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="41.0409%" y="1061" width="0.0332%" height="15" fill="rgb(211,214,4)" fg:x="2476" fg:w="2"/><text x="41.2909%" y="1071.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.03%)</title><rect x="41.0409%" y="1045" width="0.0332%" height="15" fill="rgb(206,119,25)" fg:x="2476" fg:w="2"/><text x="41.2909%" y="1055.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (10 samples, 0.17%)</title><rect x="40.9249%" y="1077" width="0.1658%" height="15" fill="rgb(243,93,47)" fg:x="2469" fg:w="10"/><text x="41.1749%" y="1087.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="41.0741%" y="1061" width="0.0166%" height="15" fill="rgb(224,194,6)" fg:x="2478" fg:w="1"/><text x="41.3241%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (35 samples, 0.58%)</title><rect x="40.5437%" y="1093" width="0.5801%" height="15" fill="rgb(243,229,6)" fg:x="2446" fg:w="35"/><text x="40.7937%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.03%)</title><rect x="41.0907%" y="1077" width="0.0332%" height="15" fill="rgb(207,23,50)" fg:x="2479" fg:w="2"/><text x="41.3407%" y="1087.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="41.1072%" y="1061" width="0.0166%" height="15" fill="rgb(253,192,32)" fg:x="2480" fg:w="1"/><text x="41.3572%" y="1071.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="41.1072%" y="1045" width="0.0166%" height="15" fill="rgb(213,21,6)" fg:x="2480" fg:w="1"/><text x="41.3572%" y="1055.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="41.1072%" y="1029" width="0.0166%" height="15" fill="rgb(243,151,13)" fg:x="2480" fg:w="1"/><text x="41.3572%" y="1039.50"></text></g><g><title>GetLengthPrefixedSlice (16 samples, 0.27%)</title><rect x="41.3061%" y="1077" width="0.2652%" height="15" fill="rgb(233,165,41)" fg:x="2492" fg:w="16"/><text x="41.5561%" y="1087.50"></text></g><g><title>leveldb::GetVarint32Ptr (14 samples, 0.23%)</title><rect x="41.3393%" y="1061" width="0.2321%" height="15" fill="rgb(246,176,45)" fg:x="2494" fg:w="14"/><text x="41.5893%" y="1071.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (29 samples, 0.48%)</title><rect x="41.1238%" y="1093" width="0.4807%" height="15" fill="rgb(217,170,52)" fg:x="2481" fg:w="29"/><text x="41.3738%" y="1103.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.03%)</title><rect x="41.5714%" y="1077" width="0.0332%" height="15" fill="rgb(214,203,54)" fg:x="2508" fg:w="2"/><text x="41.8214%" y="1087.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (77 samples, 1.28%)</title><rect x="40.3448%" y="1109" width="1.2763%" height="15" fill="rgb(248,215,49)" fg:x="2434" fg:w="77"/><text x="40.5948%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="41.6045%" y="1093" width="0.0166%" height="15" fill="rgb(208,46,10)" fg:x="2510" fg:w="1"/><text x="41.8545%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="41.6045%" y="1077" width="0.0166%" height="15" fill="rgb(254,5,31)" fg:x="2510" fg:w="1"/><text x="41.8545%" y="1087.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="41.6045%" y="1061" width="0.0166%" height="15" fill="rgb(222,104,33)" fg:x="2510" fg:w="1"/><text x="41.8545%" y="1071.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="41.6045%" y="1045" width="0.0166%" height="15" fill="rgb(248,49,16)" fg:x="2510" fg:w="1"/><text x="41.8545%" y="1055.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (3 samples, 0.05%)</title><rect x="41.6874%" y="1093" width="0.0497%" height="15" fill="rgb(232,198,41)" fg:x="2515" fg:w="3"/><text x="41.9374%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (109 samples, 1.81%)</title><rect x="40.0298%" y="1125" width="1.8067%" height="15" fill="rgb(214,125,3)" fg:x="2415" fg:w="109"/><text x="40.2798%" y="1135.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (13 samples, 0.22%)</title><rect x="41.6211%" y="1109" width="0.2155%" height="15" fill="rgb(229,220,28)" fg:x="2511" fg:w="13"/><text x="41.8711%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (6 samples, 0.10%)</title><rect x="41.7371%" y="1093" width="0.0995%" height="15" fill="rgb(222,64,37)" fg:x="2518" fg:w="6"/><text x="41.9871%" y="1103.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (4 samples, 0.07%)</title><rect x="41.7703%" y="1077" width="0.0663%" height="15" fill="rgb(249,184,13)" fg:x="2520" fg:w="4"/><text x="42.0203%" y="1087.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (4 samples, 0.07%)</title><rect x="41.7703%" y="1061" width="0.0663%" height="15" fill="rgb(252,176,6)" fg:x="2520" fg:w="4"/><text x="42.0203%" y="1071.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (115 samples, 1.91%)</title><rect x="39.9470%" y="1141" width="1.9062%" height="15" fill="rgb(228,153,7)" fg:x="2410" fg:w="115"/><text x="40.1970%" y="1151.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="41.8366%" y="1125" width="0.0166%" height="15" fill="rgb(242,193,5)" fg:x="2524" fg:w="1"/><text x="42.0866%" y="1135.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="41.8366%" y="1109" width="0.0166%" height="15" fill="rgb(232,140,9)" fg:x="2524" fg:w="1"/><text x="42.0866%" y="1119.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="41.8366%" y="1093" width="0.0166%" height="15" fill="rgb(213,222,16)" fg:x="2524" fg:w="1"/><text x="42.0866%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1 samples, 0.02%)</title><rect x="41.8531%" y="1141" width="0.0166%" height="15" fill="rgb(222,75,50)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1151.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="41.8531%" y="1125" width="0.0166%" height="15" fill="rgb(205,180,2)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1135.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="41.8531%" y="1109" width="0.0166%" height="15" fill="rgb(216,34,7)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1119.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="41.8531%" y="1093" width="0.0166%" height="15" fill="rgb(253,16,32)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1103.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (1 samples, 0.02%)</title><rect x="41.8531%" y="1077" width="0.0166%" height="15" fill="rgb(208,97,28)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1087.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="41.8531%" y="1061" width="0.0166%" height="15" fill="rgb(225,92,11)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1071.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="41.8531%" y="1045" width="0.0166%" height="15" fill="rgb(243,38,12)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1055.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="41.8531%" y="1029" width="0.0166%" height="15" fill="rgb(208,139,16)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1039.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="41.8531%" y="1013" width="0.0166%" height="15" fill="rgb(227,24,9)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1023.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="41.8531%" y="997" width="0.0166%" height="15" fill="rgb(206,62,11)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="981" width="0.0166%" height="15" fill="rgb(228,134,27)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="965" width="0.0166%" height="15" fill="rgb(205,55,33)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="949" width="0.0166%" height="15" fill="rgb(243,75,43)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="933" width="0.0166%" height="15" fill="rgb(223,27,42)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="917" width="0.0166%" height="15" fill="rgb(232,189,33)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="901" width="0.0166%" height="15" fill="rgb(210,9,39)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="885" width="0.0166%" height="15" fill="rgb(242,85,26)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="869" width="0.0166%" height="15" fill="rgb(248,44,4)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="853" width="0.0166%" height="15" fill="rgb(250,96,46)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="837" width="0.0166%" height="15" fill="rgb(229,116,26)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.8531%" y="821" width="0.0166%" height="15" fill="rgb(246,94,34)" fg:x="2525" fg:w="1"/><text x="42.1031%" y="831.50"></text></g><g><title>leveldb::MemTable::Add (161 samples, 2.67%)</title><rect x="39.2508%" y="1173" width="2.6687%" height="15" fill="rgb(251,73,21)" fg:x="2368" fg:w="161"/><text x="39.5008%" y="1183.50">le..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (156 samples, 2.59%)</title><rect x="39.3337%" y="1157" width="2.5858%" height="15" fill="rgb(254,121,25)" fg:x="2373" fg:w="156"/><text x="39.5837%" y="1167.50">le..</text></g><g><title>leveldb::WriteBatch::Iterate (3 samples, 0.05%)</title><rect x="41.8697%" y="1141" width="0.0497%" height="15" fill="rgb(215,161,49)" fg:x="2526" fg:w="3"/><text x="42.1197%" y="1151.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (176 samples, 2.92%)</title><rect x="39.0353%" y="1221" width="2.9173%" height="15" fill="rgb(221,43,13)" fg:x="2355" fg:w="176"/><text x="39.2853%" y="1231.50">le..</text></g><g><title>leveldb::WriteBatch::Iterate (175 samples, 2.90%)</title><rect x="39.0519%" y="1205" width="2.9007%" height="15" fill="rgb(249,5,37)" fg:x="2356" fg:w="175"/><text x="39.3019%" y="1215.50">le..</text></g><g><title>leveldb::WriteBatch::Iterate (166 samples, 2.75%)</title><rect x="39.2011%" y="1189" width="2.7515%" height="15" fill="rgb(226,25,44)" fg:x="2365" fg:w="166"/><text x="39.4511%" y="1199.50">le..</text></g><g><title>leveldb::WriteBatch::Iterate (2 samples, 0.03%)</title><rect x="41.9194%" y="1173" width="0.0332%" height="15" fill="rgb(238,189,16)" fg:x="2529" fg:w="2"/><text x="42.1694%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="41.9526%" y="1013" width="0.0166%" height="15" fill="rgb(251,186,8)" fg:x="2531" fg:w="1"/><text x="42.2026%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="41.9526%" y="997" width="0.0166%" height="15" fill="rgb(254,34,31)" fg:x="2531" fg:w="1"/><text x="42.2026%" y="1007.50"></text></g><g><title>[[ext4]] (7 samples, 0.12%)</title><rect x="41.9526%" y="1029" width="0.1160%" height="15" fill="rgb(225,215,27)" fg:x="2531" fg:w="7"/><text x="42.2026%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="41.9692%" y="1013" width="0.0995%" height="15" fill="rgb(221,192,48)" fg:x="2532" fg:w="6"/><text x="42.2192%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="42.0023%" y="997" width="0.0663%" height="15" fill="rgb(219,137,20)" fg:x="2534" fg:w="4"/><text x="42.2523%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="42.0189%" y="981" width="0.0497%" height="15" fill="rgb(219,84,11)" fg:x="2535" fg:w="3"/><text x="42.2689%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="42.0189%" y="965" width="0.0497%" height="15" fill="rgb(224,10,23)" fg:x="2535" fg:w="3"/><text x="42.2689%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="42.0189%" y="949" width="0.0497%" height="15" fill="rgb(248,22,39)" fg:x="2535" fg:w="3"/><text x="42.2689%" y="959.50"></text></g><g><title>Flush (9 samples, 0.15%)</title><rect x="41.9526%" y="1189" width="0.1492%" height="15" fill="rgb(212,154,20)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1199.50"></text></g><g><title>FlushBuffer (9 samples, 0.15%)</title><rect x="41.9526%" y="1173" width="0.1492%" height="15" fill="rgb(236,199,50)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (9 samples, 0.15%)</title><rect x="41.9526%" y="1157" width="0.1492%" height="15" fill="rgb(211,9,17)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1167.50"></text></g><g><title>__GI___libc_write (9 samples, 0.15%)</title><rect x="41.9526%" y="1141" width="0.1492%" height="15" fill="rgb(243,216,36)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="41.9526%" y="1125" width="0.1492%" height="15" fill="rgb(250,2,10)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1135.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="41.9526%" y="1109" width="0.1492%" height="15" fill="rgb(226,50,48)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="41.9526%" y="1093" width="0.1492%" height="15" fill="rgb(243,81,16)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1103.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="41.9526%" y="1077" width="0.1492%" height="15" fill="rgb(250,14,2)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1087.50"></text></g><g><title>[[ext4]] (9 samples, 0.15%)</title><rect x="41.9526%" y="1061" width="0.1492%" height="15" fill="rgb(233,135,29)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1071.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="41.9526%" y="1045" width="0.1492%" height="15" fill="rgb(224,64,43)" fg:x="2531" fg:w="9"/><text x="42.2026%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="42.0686%" y="1029" width="0.0332%" height="15" fill="rgb(238,84,13)" fg:x="2538" fg:w="2"/><text x="42.3186%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0852%" y="1013" width="0.0166%" height="15" fill="rgb(253,48,26)" fg:x="2539" fg:w="1"/><text x="42.3352%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0852%" y="997" width="0.0166%" height="15" fill="rgb(205,223,31)" fg:x="2539" fg:w="1"/><text x="42.3352%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0852%" y="981" width="0.0166%" height="15" fill="rgb(221,41,32)" fg:x="2539" fg:w="1"/><text x="42.3352%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0852%" y="965" width="0.0166%" height="15" fill="rgb(213,158,31)" fg:x="2539" fg:w="1"/><text x="42.3352%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0852%" y="949" width="0.0166%" height="15" fill="rgb(245,126,43)" fg:x="2539" fg:w="1"/><text x="42.3352%" y="959.50"></text></g><g><title>CDBWrapper::WriteBatch (187 samples, 3.10%)</title><rect x="39.0187%" y="1253" width="3.0996%" height="15" fill="rgb(227,7,22)" fg:x="2354" fg:w="187"/><text x="39.2687%" y="1263.50">CDB..</text></g><g><title>leveldb::DBImpl::Write (187 samples, 3.10%)</title><rect x="39.0187%" y="1237" width="3.0996%" height="15" fill="rgb(252,90,44)" fg:x="2354" fg:w="187"/><text x="39.2687%" y="1247.50">lev..</text></g><g><title>leveldb::log::Writer::AddRecord (10 samples, 0.17%)</title><rect x="41.9526%" y="1221" width="0.1658%" height="15" fill="rgb(253,91,0)" fg:x="2531" fg:w="10"/><text x="42.2026%" y="1231.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (10 samples, 0.17%)</title><rect x="41.9526%" y="1205" width="0.1658%" height="15" fill="rgb(252,175,49)" fg:x="2531" fg:w="10"/><text x="42.2026%" y="1215.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="42.1018%" y="1189" width="0.0166%" height="15" fill="rgb(246,150,1)" fg:x="2540" fg:w="1"/><text x="42.3518%" y="1199.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="42.1018%" y="1173" width="0.0166%" height="15" fill="rgb(241,192,25)" fg:x="2540" fg:w="1"/><text x="42.3518%" y="1183.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="42.1183%" y="1013" width="0.0166%" height="15" fill="rgb(239,187,11)" fg:x="2541" fg:w="1"/><text x="42.3683%" y="1023.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="42.1183%" y="997" width="0.0166%" height="15" fill="rgb(218,202,51)" fg:x="2541" fg:w="1"/><text x="42.3683%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="42.1183%" y="981" width="0.0166%" height="15" fill="rgb(225,176,8)" fg:x="2541" fg:w="1"/><text x="42.3683%" y="991.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (2 samples, 0.03%)</title><rect x="42.1183%" y="1125" width="0.0332%" height="15" fill="rgb(219,122,41)" fg:x="2541" fg:w="2"/><text x="42.3683%" y="1135.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="42.1183%" y="1109" width="0.0332%" height="15" fill="rgb(248,140,20)" fg:x="2541" fg:w="2"/><text x="42.3683%" y="1119.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="42.1183%" y="1093" width="0.0332%" height="15" fill="rgb(245,41,37)" fg:x="2541" fg:w="2"/><text x="42.3683%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.03%)</title><rect x="42.1183%" y="1077" width="0.0332%" height="15" fill="rgb(235,82,39)" fg:x="2541" fg:w="2"/><text x="42.3683%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (2 samples, 0.03%)</title><rect x="42.1183%" y="1061" width="0.0332%" height="15" fill="rgb(230,108,42)" fg:x="2541" fg:w="2"/><text x="42.3683%" y="1071.50"></text></g><g><title>DataStream::write (2 samples, 0.03%)</title><rect x="42.1183%" y="1045" width="0.0332%" height="15" fill="rgb(215,150,50)" fg:x="2541" fg:w="2"/><text x="42.3683%" y="1055.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="42.1183%" y="1029" width="0.0332%" height="15" fill="rgb(233,212,5)" fg:x="2541" fg:w="2"/><text x="42.3683%" y="1039.50"></text></g><g><title>leveldb::WriteBatch::Delete (1 samples, 0.02%)</title><rect x="42.1349%" y="1013" width="0.0166%" height="15" fill="rgb(245,80,22)" fg:x="2542" fg:w="1"/><text x="42.3849%" y="1023.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="42.1349%" y="997" width="0.0166%" height="15" fill="rgb(238,129,16)" fg:x="2542" fg:w="1"/><text x="42.3849%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="42.1349%" y="981" width="0.0166%" height="15" fill="rgb(240,19,0)" fg:x="2542" fg:w="1"/><text x="42.3849%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="42.1349%" y="965" width="0.0166%" height="15" fill="rgb(232,42,35)" fg:x="2542" fg:w="1"/><text x="42.3849%" y="975.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="42.1349%" y="949" width="0.0166%" height="15" fill="rgb(223,130,24)" fg:x="2542" fg:w="1"/><text x="42.3849%" y="959.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1253" width="0.0497%" height="15" fill="rgb(237,16,22)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1263.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1237" width="0.0497%" height="15" fill="rgb(248,192,20)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1247.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1221" width="0.0497%" height="15" fill="rgb(233,167,2)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1231.50"></text></g><g><title>Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1205" width="0.0497%" height="15" fill="rgb(252,71,44)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1215.50"></text></g><g><title>Ser&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1189" width="0.0497%" height="15" fill="rgb(238,37,47)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1199.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1173" width="0.0497%" height="15" fill="rgb(214,202,54)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1157" width="0.0497%" height="15" fill="rgb(254,165,40)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1167.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="42.1183%" y="1141" width="0.0497%" height="15" fill="rgb(246,173,38)" fg:x="2541" fg:w="3"/><text x="42.3683%" y="1151.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.1515%" y="1125" width="0.0166%" height="15" fill="rgb(215,3,27)" fg:x="2543" fg:w="1"/><text x="42.4015%" y="1135.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.1515%" y="1109" width="0.0166%" height="15" fill="rgb(239,169,51)" fg:x="2543" fg:w="1"/><text x="42.4015%" y="1119.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="42.1515%" y="1093" width="0.0166%" height="15" fill="rgb(212,5,25)" fg:x="2543" fg:w="1"/><text x="42.4015%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="42.1515%" y="1077" width="0.0166%" height="15" fill="rgb(243,45,17)" fg:x="2543" fg:w="1"/><text x="42.4015%" y="1087.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="42.1515%" y="1061" width="0.0166%" height="15" fill="rgb(242,97,9)" fg:x="2543" fg:w="1"/><text x="42.4015%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="1093" width="0.0332%" height="15" fill="rgb(228,71,31)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="1103.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="1077" width="0.0332%" height="15" fill="rgb(252,184,16)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="1087.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="1061" width="0.0332%" height="15" fill="rgb(236,169,46)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="1071.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (2 samples, 0.03%)</title><rect x="42.1681%" y="1045" width="0.0332%" height="15" fill="rgb(207,17,47)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="1029" width="0.0332%" height="15" fill="rgb(206,201,28)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="1039.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="1013" width="0.0332%" height="15" fill="rgb(224,184,23)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="1023.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="997" width="0.0332%" height="15" fill="rgb(208,139,48)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="1007.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="981" width="0.0332%" height="15" fill="rgb(208,130,10)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="991.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="965" width="0.0332%" height="15" fill="rgb(211,213,45)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="975.50"></text></g><g><title>DataStream::write (2 samples, 0.03%)</title><rect x="42.1681%" y="949" width="0.0332%" height="15" fill="rgb(235,100,30)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="959.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="933" width="0.0332%" height="15" fill="rgb(206,144,31)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="943.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="42.1681%" y="917" width="0.0332%" height="15" fill="rgb(224,200,26)" fg:x="2544" fg:w="2"/><text x="42.4181%" y="927.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="42.1847%" y="901" width="0.0166%" height="15" fill="rgb(247,104,53)" fg:x="2545" fg:w="1"/><text x="42.4347%" y="911.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="42.1847%" y="885" width="0.0166%" height="15" fill="rgb(220,14,17)" fg:x="2545" fg:w="1"/><text x="42.4347%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="42.1847%" y="869" width="0.0166%" height="15" fill="rgb(230,140,40)" fg:x="2545" fg:w="1"/><text x="42.4347%" y="879.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="42.1847%" y="853" width="0.0166%" height="15" fill="rgb(229,2,41)" fg:x="2545" fg:w="1"/><text x="42.4347%" y="863.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="42.2012%" y="1045" width="0.0166%" height="15" fill="rgb(232,89,16)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="1055.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="1029" width="0.0166%" height="15" fill="rgb(247,59,52)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="1039.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="42.2012%" y="1013" width="0.0166%" height="15" fill="rgb(226,110,21)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="1023.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="997" width="0.0166%" height="15" fill="rgb(224,176,43)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="1007.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="981" width="0.0166%" height="15" fill="rgb(221,73,6)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="991.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="965" width="0.0166%" height="15" fill="rgb(232,78,19)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="975.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="949" width="0.0166%" height="15" fill="rgb(233,112,48)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="959.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="933" width="0.0166%" height="15" fill="rgb(243,131,47)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="943.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="917" width="0.0166%" height="15" fill="rgb(226,51,1)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="927.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="901" width="0.0166%" height="15" fill="rgb(247,58,7)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="911.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="885" width="0.0166%" height="15" fill="rgb(209,7,32)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="895.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="869" width="0.0166%" height="15" fill="rgb(209,39,41)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="879.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="853" width="0.0166%" height="15" fill="rgb(226,182,46)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="863.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="837" width="0.0166%" height="15" fill="rgb(230,219,10)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="847.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.2012%" y="821" width="0.0166%" height="15" fill="rgb(227,175,30)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="805" width="0.0166%" height="15" fill="rgb(217,2,50)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="815.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="789" width="0.0166%" height="15" fill="rgb(229,160,0)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="799.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="773" width="0.0166%" height="15" fill="rgb(207,78,37)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="783.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="42.2012%" y="757" width="0.0166%" height="15" fill="rgb(225,57,0)" fg:x="2546" fg:w="1"/><text x="42.4512%" y="767.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="42.2178%" y="1045" width="0.0166%" height="15" fill="rgb(232,154,2)" fg:x="2547" fg:w="1"/><text x="42.4678%" y="1055.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="42.2344%" y="1029" width="0.0166%" height="15" fill="rgb(241,212,25)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="1039.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="1013" width="0.0166%" height="15" fill="rgb(226,69,20)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="1023.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="42.2344%" y="997" width="0.0166%" height="15" fill="rgb(247,184,54)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="1007.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="981" width="0.0166%" height="15" fill="rgb(210,145,0)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="991.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="965" width="0.0166%" height="15" fill="rgb(253,82,12)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="949" width="0.0166%" height="15" fill="rgb(245,42,11)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="959.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="933" width="0.0166%" height="15" fill="rgb(219,147,32)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="943.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="917" width="0.0166%" height="15" fill="rgb(246,12,7)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="927.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="901" width="0.0166%" height="15" fill="rgb(243,50,9)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="885" width="0.0166%" height="15" fill="rgb(219,149,6)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="895.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="869" width="0.0166%" height="15" fill="rgb(241,51,42)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="879.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="853" width="0.0166%" height="15" fill="rgb(226,128,27)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="863.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="837" width="0.0166%" height="15" fill="rgb(244,144,4)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="847.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2344%" y="821" width="0.0166%" height="15" fill="rgb(221,4,13)" fg:x="2548" fg:w="1"/><text x="42.4844%" y="831.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="42.2510%" y="1029" width="0.0166%" height="15" fill="rgb(208,170,28)" fg:x="2549" fg:w="1"/><text x="42.5010%" y="1039.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="42.2510%" y="1013" width="0.0166%" height="15" fill="rgb(226,131,13)" fg:x="2549" fg:w="1"/><text x="42.5010%" y="1023.50"></text></g><g><title>CompressScript (3 samples, 0.05%)</title><rect x="42.2344%" y="1045" width="0.0497%" height="15" fill="rgb(215,72,41)" fg:x="2548" fg:w="3"/><text x="42.4844%" y="1055.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="42.2675%" y="1029" width="0.0166%" height="15" fill="rgb(243,108,20)" fg:x="2550" fg:w="1"/><text x="42.5175%" y="1039.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="42.2841%" y="981" width="0.0166%" height="15" fill="rgb(230,189,17)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="991.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="965" width="0.0166%" height="15" fill="rgb(220,50,17)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="975.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="42.2841%" y="949" width="0.0166%" height="15" fill="rgb(248,152,48)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="959.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="933" width="0.0166%" height="15" fill="rgb(244,91,11)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="943.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="917" width="0.0166%" height="15" fill="rgb(220,157,5)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="927.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="901" width="0.0166%" height="15" fill="rgb(253,137,8)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="911.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="885" width="0.0166%" height="15" fill="rgb(217,137,51)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="895.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="869" width="0.0166%" height="15" fill="rgb(218,209,53)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="879.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="853" width="0.0166%" height="15" fill="rgb(249,137,25)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="837" width="0.0166%" height="15" fill="rgb(239,155,26)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="847.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="821" width="0.0166%" height="15" fill="rgb(227,85,46)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="805" width="0.0166%" height="15" fill="rgb(251,107,43)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="815.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="789" width="0.0166%" height="15" fill="rgb(234,170,33)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="799.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="773" width="0.0166%" height="15" fill="rgb(206,29,35)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="783.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.2841%" y="757" width="0.0166%" height="15" fill="rgb(227,138,25)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="767.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="741" width="0.0166%" height="15" fill="rgb(249,131,35)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="751.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="725" width="0.0166%" height="15" fill="rgb(239,6,40)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="735.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="42.2841%" y="709" width="0.0166%" height="15" fill="rgb(246,136,47)" fg:x="2551" fg:w="1"/><text x="42.5341%" y="719.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (3 samples, 0.05%)</title><rect x="42.2841%" y="1045" width="0.0497%" height="15" fill="rgb(253,58,26)" fg:x="2551" fg:w="3"/><text x="42.5341%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (3 samples, 0.05%)</title><rect x="42.2841%" y="1029" width="0.0497%" height="15" fill="rgb(237,141,10)" fg:x="2551" fg:w="3"/><text x="42.5341%" y="1039.50"></text></g><g><title>DataStream::write (3 samples, 0.05%)</title><rect x="42.2841%" y="1013" width="0.0497%" height="15" fill="rgb(234,156,12)" fg:x="2551" fg:w="3"/><text x="42.5341%" y="1023.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (3 samples, 0.05%)</title><rect x="42.2841%" y="997" width="0.0497%" height="15" fill="rgb(243,224,36)" fg:x="2551" fg:w="3"/><text x="42.5341%" y="1007.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="42.3007%" y="981" width="0.0332%" height="15" fill="rgb(205,229,51)" fg:x="2552" fg:w="2"/><text x="42.5507%" y="991.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="42.3338%" y="981" width="0.0166%" height="15" fill="rgb(223,189,4)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="991.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="965" width="0.0166%" height="15" fill="rgb(249,167,54)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="975.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="42.3338%" y="949" width="0.0166%" height="15" fill="rgb(218,34,28)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="959.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="933" width="0.0166%" height="15" fill="rgb(232,109,42)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="943.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="917" width="0.0166%" height="15" fill="rgb(248,214,46)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="927.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="901" width="0.0166%" height="15" fill="rgb(244,216,40)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="911.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="885" width="0.0166%" height="15" fill="rgb(231,226,31)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="895.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="869" width="0.0166%" height="15" fill="rgb(238,38,43)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="879.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="853" width="0.0166%" height="15" fill="rgb(208,88,43)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="837" width="0.0166%" height="15" fill="rgb(205,136,37)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="847.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="821" width="0.0166%" height="15" fill="rgb(237,34,14)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="831.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="805" width="0.0166%" height="15" fill="rgb(236,193,44)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="815.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="789" width="0.0166%" height="15" fill="rgb(231,48,10)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="799.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="773" width="0.0166%" height="15" fill="rgb(213,141,34)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="783.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.3338%" y="757" width="0.0166%" height="15" fill="rgb(249,130,34)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="767.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="741" width="0.0166%" height="15" fill="rgb(219,42,41)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="751.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="725" width="0.0166%" height="15" fill="rgb(224,100,54)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="735.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="709" width="0.0166%" height="15" fill="rgb(229,200,27)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="719.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="42.3338%" y="693" width="0.0166%" height="15" fill="rgb(217,118,10)" fg:x="2554" fg:w="1"/><text x="42.5838%" y="703.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (2 samples, 0.03%)</title><rect x="42.3504%" y="981" width="0.0332%" height="15" fill="rgb(206,22,3)" fg:x="2555" fg:w="2"/><text x="42.6004%" y="991.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="42.3504%" y="965" width="0.0332%" height="15" fill="rgb(232,163,46)" fg:x="2555" fg:w="2"/><text x="42.6004%" y="975.50"></text></g><g><title>DataStream::write (2 samples, 0.03%)</title><rect x="42.3504%" y="949" width="0.0332%" height="15" fill="rgb(206,95,13)" fg:x="2555" fg:w="2"/><text x="42.6004%" y="959.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="42.3504%" y="933" width="0.0332%" height="15" fill="rgb(253,154,18)" fg:x="2555" fg:w="2"/><text x="42.6004%" y="943.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="42.3504%" y="917" width="0.0332%" height="15" fill="rgb(219,32,23)" fg:x="2555" fg:w="2"/><text x="42.6004%" y="927.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (5 samples, 0.08%)</title><rect x="42.3338%" y="1045" width="0.0829%" height="15" fill="rgb(230,191,45)" fg:x="2554" fg:w="5"/><text x="42.5838%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="42.3338%" y="1029" width="0.0829%" height="15" fill="rgb(229,64,36)" fg:x="2554" fg:w="5"/><text x="42.5838%" y="1039.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (5 samples, 0.08%)</title><rect x="42.3338%" y="1013" width="0.0829%" height="15" fill="rgb(205,129,25)" fg:x="2554" fg:w="5"/><text x="42.5838%" y="1023.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (5 samples, 0.08%)</title><rect x="42.3338%" y="997" width="0.0829%" height="15" fill="rgb(254,112,7)" fg:x="2554" fg:w="5"/><text x="42.5838%" y="1007.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.03%)</title><rect x="42.3836%" y="981" width="0.0332%" height="15" fill="rgb(226,53,48)" fg:x="2557" fg:w="2"/><text x="42.6336%" y="991.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="42.4001%" y="965" width="0.0166%" height="15" fill="rgb(214,153,38)" fg:x="2558" fg:w="1"/><text x="42.6501%" y="975.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::__distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="42.4001%" y="949" width="0.0166%" height="15" fill="rgb(243,101,7)" fg:x="2558" fg:w="1"/><text x="42.6501%" y="959.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (16 samples, 0.27%)</title><rect x="42.1681%" y="1189" width="0.2652%" height="15" fill="rgb(240,140,22)" fg:x="2544" fg:w="16"/><text x="42.4181%" y="1199.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (16 samples, 0.27%)</title><rect x="42.1681%" y="1173" width="0.2652%" height="15" fill="rgb(235,114,2)" fg:x="2544" fg:w="16"/><text x="42.4181%" y="1183.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (16 samples, 0.27%)</title><rect x="42.1681%" y="1157" width="0.2652%" height="15" fill="rgb(242,59,12)" fg:x="2544" fg:w="16"/><text x="42.4181%" y="1167.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (16 samples, 0.27%)</title><rect x="42.1681%" y="1141" width="0.2652%" height="15" fill="rgb(252,134,9)" fg:x="2544" fg:w="16"/><text x="42.4181%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (16 samples, 0.27%)</title><rect x="42.1681%" y="1125" width="0.2652%" height="15" fill="rgb(236,4,44)" fg:x="2544" fg:w="16"/><text x="42.4181%" y="1135.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (16 samples, 0.27%)</title><rect x="42.1681%" y="1109" width="0.2652%" height="15" fill="rgb(254,172,41)" fg:x="2544" fg:w="16"/><text x="42.4181%" y="1119.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (14 samples, 0.23%)</title><rect x="42.2012%" y="1093" width="0.2321%" height="15" fill="rgb(244,63,20)" fg:x="2546" fg:w="14"/><text x="42.4512%" y="1103.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (14 samples, 0.23%)</title><rect x="42.2012%" y="1077" width="0.2321%" height="15" fill="rgb(250,73,31)" fg:x="2546" fg:w="14"/><text x="42.4512%" y="1087.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (14 samples, 0.23%)</title><rect x="42.2012%" y="1061" width="0.2321%" height="15" fill="rgb(241,38,36)" fg:x="2546" fg:w="14"/><text x="42.4512%" y="1071.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="42.4167%" y="1045" width="0.0166%" height="15" fill="rgb(245,211,2)" fg:x="2559" fg:w="1"/><text x="42.6667%" y="1055.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (18 samples, 0.30%)</title><rect x="42.4996%" y="1061" width="0.2984%" height="15" fill="rgb(206,120,28)" fg:x="2564" fg:w="18"/><text x="42.7496%" y="1071.50"></text></g><g><title>decltype  (17 samples, 0.28%)</title><rect x="42.5162%" y="1045" width="0.2818%" height="15" fill="rgb(211,59,34)" fg:x="2565" fg:w="17"/><text x="42.7662%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (17 samples, 0.28%)</title><rect x="42.5162%" y="1029" width="0.2818%" height="15" fill="rgb(233,168,5)" fg:x="2565" fg:w="17"/><text x="42.7662%" y="1039.50"></text></g><g><title>decltype (17 samples, 0.28%)</title><rect x="42.5162%" y="1013" width="0.2818%" height="15" fill="rgb(234,33,13)" fg:x="2565" fg:w="17"/><text x="42.7662%" y="1023.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="42.7979%" y="1061" width="0.0166%" height="15" fill="rgb(231,150,26)" fg:x="2582" fg:w="1"/><text x="43.0479%" y="1071.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::__distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="42.7979%" y="1045" width="0.0166%" height="15" fill="rgb(217,191,4)" fg:x="2582" fg:w="1"/><text x="43.0479%" y="1055.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (24 samples, 0.40%)</title><rect x="42.4333%" y="1141" width="0.3978%" height="15" fill="rgb(246,198,38)" fg:x="2560" fg:w="24"/><text x="42.6833%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (23 samples, 0.38%)</title><rect x="42.4499%" y="1125" width="0.3812%" height="15" fill="rgb(245,64,37)" fg:x="2561" fg:w="23"/><text x="42.6999%" y="1135.50"></text></g><g><title>DataStream::write (23 samples, 0.38%)</title><rect x="42.4499%" y="1109" width="0.3812%" height="15" fill="rgb(250,30,36)" fg:x="2561" fg:w="23"/><text x="42.6999%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (23 samples, 0.38%)</title><rect x="42.4499%" y="1093" width="0.3812%" height="15" fill="rgb(217,86,53)" fg:x="2561" fg:w="23"/><text x="42.6999%" y="1103.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (23 samples, 0.38%)</title><rect x="42.4499%" y="1077" width="0.3812%" height="15" fill="rgb(228,157,16)" fg:x="2561" fg:w="23"/><text x="42.6999%" y="1087.50"></text></g><g><title>void std::advance&lt;std::byte const*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="42.8145%" y="1061" width="0.0166%" height="15" fill="rgb(217,59,31)" fg:x="2583" fg:w="1"/><text x="43.0645%" y="1071.50"></text></g><g><title>void std::__advance&lt;std::byte const*, long&gt; (1 samples, 0.02%)</title><rect x="42.8145%" y="1045" width="0.0166%" height="15" fill="rgb(237,138,41)" fg:x="2583" fg:w="1"/><text x="43.0645%" y="1055.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (43 samples, 0.71%)</title><rect x="42.1681%" y="1237" width="0.7127%" height="15" fill="rgb(227,91,49)" fg:x="2544" fg:w="43"/><text x="42.4181%" y="1247.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (43 samples, 0.71%)</title><rect x="42.1681%" y="1221" width="0.7127%" height="15" fill="rgb(247,21,44)" fg:x="2544" fg:w="43"/><text x="42.4181%" y="1231.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (43 samples, 0.71%)</title><rect x="42.1681%" y="1205" width="0.7127%" height="15" fill="rgb(219,210,51)" fg:x="2544" fg:w="43"/><text x="42.4181%" y="1215.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (27 samples, 0.45%)</title><rect x="42.4333%" y="1189" width="0.4475%" height="15" fill="rgb(209,140,6)" fg:x="2560" fg:w="27"/><text x="42.6833%" y="1199.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (27 samples, 0.45%)</title><rect x="42.4333%" y="1173" width="0.4475%" height="15" fill="rgb(221,188,24)" fg:x="2560" fg:w="27"/><text x="42.6833%" y="1183.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (27 samples, 0.45%)</title><rect x="42.4333%" y="1157" width="0.4475%" height="15" fill="rgb(232,154,20)" fg:x="2560" fg:w="27"/><text x="42.6833%" y="1167.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.05%)</title><rect x="42.8311%" y="1141" width="0.0497%" height="15" fill="rgb(244,137,50)" fg:x="2584" fg:w="3"/><text x="43.0811%" y="1151.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (3 samples, 0.05%)</title><rect x="42.8311%" y="1125" width="0.0497%" height="15" fill="rgb(225,185,43)" fg:x="2584" fg:w="3"/><text x="43.0811%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="42.8642%" y="1109" width="0.0166%" height="15" fill="rgb(213,205,38)" fg:x="2586" fg:w="1"/><text x="43.1142%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="42.8642%" y="1093" width="0.0166%" height="15" fill="rgb(236,73,12)" fg:x="2586" fg:w="1"/><text x="43.1142%" y="1103.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="42.8642%" y="1077" width="0.0166%" height="15" fill="rgb(235,219,13)" fg:x="2586" fg:w="1"/><text x="43.1142%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.8808%" y="1125" width="0.0166%" height="15" fill="rgb(218,59,36)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1135.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.8808%" y="1109" width="0.0166%" height="15" fill="rgb(205,110,39)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1119.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="42.8808%" y="1093" width="0.0166%" height="15" fill="rgb(218,206,42)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1103.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="42.8808%" y="1077" width="0.0166%" height="15" fill="rgb(248,125,24)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1087.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.8808%" y="1061" width="0.0166%" height="15" fill="rgb(242,28,27)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1071.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="42.8808%" y="1045" width="0.0166%" height="15" fill="rgb(216,228,15)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1055.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="42.8808%" y="1029" width="0.0166%" height="15" fill="rgb(235,116,46)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1039.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="42.8808%" y="1013" width="0.0166%" height="15" fill="rgb(224,18,32)" fg:x="2587" fg:w="1"/><text x="43.1308%" y="1023.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="42.8974%" y="1125" width="0.0166%" height="15" fill="rgb(252,5,12)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1135.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.8974%" y="1109" width="0.0166%" height="15" fill="rgb(251,36,5)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1119.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.8974%" y="1093" width="0.0166%" height="15" fill="rgb(217,53,14)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.8974%" y="1077" width="0.0166%" height="15" fill="rgb(215,86,45)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="42.8974%" y="1061" width="0.0166%" height="15" fill="rgb(242,169,11)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1071.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="42.8974%" y="1045" width="0.0166%" height="15" fill="rgb(211,213,45)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1055.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="42.8974%" y="1029" width="0.0166%" height="15" fill="rgb(205,88,11)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1039.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="42.8974%" y="1013" width="0.0166%" height="15" fill="rgb(252,69,26)" fg:x="2588" fg:w="1"/><text x="43.1474%" y="1023.50"></text></g><g><title>CCoinsViewDB::BatchWrite (272 samples, 4.51%)</title><rect x="38.4220%" y="1269" width="4.5085%" height="15" fill="rgb(246,123,37)" fg:x="2318" fg:w="272"/><text x="38.6720%" y="1279.50">CCoin..</text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (46 samples, 0.76%)</title><rect x="42.1681%" y="1253" width="0.7625%" height="15" fill="rgb(212,205,5)" fg:x="2544" fg:w="46"/><text x="42.4181%" y="1263.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="42.8808%" y="1237" width="0.0497%" height="15" fill="rgb(253,148,0)" fg:x="2587" fg:w="3"/><text x="43.1308%" y="1247.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="42.8808%" y="1221" width="0.0497%" height="15" fill="rgb(239,22,4)" fg:x="2587" fg:w="3"/><text x="43.1308%" y="1231.50"></text></g><g><title>Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="42.8808%" y="1205" width="0.0497%" height="15" fill="rgb(226,26,53)" fg:x="2587" fg:w="3"/><text x="43.1308%" y="1215.50"></text></g><g><title>Ser&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="42.8808%" y="1189" width="0.0497%" height="15" fill="rgb(225,229,45)" fg:x="2587" fg:w="3"/><text x="43.1308%" y="1199.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="42.8808%" y="1173" width="0.0497%" height="15" fill="rgb(220,60,37)" fg:x="2587" fg:w="3"/><text x="43.1308%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="42.8808%" y="1157" width="0.0497%" height="15" fill="rgb(217,180,35)" fg:x="2587" fg:w="3"/><text x="43.1308%" y="1167.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="42.8808%" y="1141" width="0.0497%" height="15" fill="rgb(229,7,53)" fg:x="2587" fg:w="3"/><text x="43.1308%" y="1151.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.9140%" y="1125" width="0.0166%" height="15" fill="rgb(254,137,3)" fg:x="2589" fg:w="1"/><text x="43.1640%" y="1135.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="42.9140%" y="1109" width="0.0166%" height="15" fill="rgb(215,140,41)" fg:x="2589" fg:w="1"/><text x="43.1640%" y="1119.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="42.9140%" y="1093" width="0.0166%" height="15" fill="rgb(250,80,15)" fg:x="2589" fg:w="1"/><text x="43.1640%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="42.9140%" y="1077" width="0.0166%" height="15" fill="rgb(252,191,6)" fg:x="2589" fg:w="1"/><text x="43.1640%" y="1087.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="42.9140%" y="1061" width="0.0166%" height="15" fill="rgb(246,217,18)" fg:x="2589" fg:w="1"/><text x="43.1640%" y="1071.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="42.9305%" y="1269" width="0.0166%" height="15" fill="rgb(223,93,7)" fg:x="2590" fg:w="1"/><text x="43.1805%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="42.9305%" y="1253" width="0.0166%" height="15" fill="rgb(225,55,52)" fg:x="2590" fg:w="1"/><text x="43.1805%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="42.9305%" y="1237" width="0.0166%" height="15" fill="rgb(240,31,24)" fg:x="2590" fg:w="1"/><text x="43.1805%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="42.9305%" y="1221" width="0.0166%" height="15" fill="rgb(205,56,52)" fg:x="2590" fg:w="1"/><text x="43.1805%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="42.9305%" y="1205" width="0.0166%" height="15" fill="rgb(246,146,12)" fg:x="2590" fg:w="1"/><text x="43.1805%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="42.9305%" y="1189" width="0.0166%" height="15" fill="rgb(239,84,36)" fg:x="2590" fg:w="1"/><text x="43.1805%" y="1199.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="42.9471%" y="1269" width="0.0166%" height="15" fill="rgb(207,41,40)" fg:x="2591" fg:w="1"/><text x="43.1971%" y="1279.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (3 samples, 0.05%)</title><rect x="43.0134%" y="1221" width="0.0497%" height="15" fill="rgb(241,179,25)" fg:x="2595" fg:w="3"/><text x="43.2634%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (11 samples, 0.18%)</title><rect x="43.0632%" y="1205" width="0.1823%" height="15" fill="rgb(210,0,34)" fg:x="2598" fg:w="11"/><text x="43.3132%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (11 samples, 0.18%)</title><rect x="43.0632%" y="1189" width="0.1823%" height="15" fill="rgb(225,217,29)" fg:x="2598" fg:w="11"/><text x="43.3132%" y="1199.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (11 samples, 0.18%)</title><rect x="43.0632%" y="1173" width="0.1823%" height="15" fill="rgb(216,191,38)" fg:x="2598" fg:w="11"/><text x="43.3132%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (4 samples, 0.07%)</title><rect x="43.1792%" y="1157" width="0.0663%" height="15" fill="rgb(232,140,52)" fg:x="2605" fg:w="4"/><text x="43.4292%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (4 samples, 0.07%)</title><rect x="43.1792%" y="1141" width="0.0663%" height="15" fill="rgb(223,158,51)" fg:x="2605" fg:w="4"/><text x="43.4292%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (4 samples, 0.07%)</title><rect x="43.1792%" y="1125" width="0.0663%" height="15" fill="rgb(235,29,51)" fg:x="2605" fg:w="4"/><text x="43.4292%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (2 samples, 0.03%)</title><rect x="43.2123%" y="1109" width="0.0332%" height="15" fill="rgb(215,181,18)" fg:x="2607" fg:w="2"/><text x="43.4623%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (6 samples, 0.10%)</title><rect x="43.2455%" y="1109" width="0.0995%" height="15" fill="rgb(227,125,34)" fg:x="2609" fg:w="6"/><text x="43.4955%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (3 samples, 0.05%)</title><rect x="43.2952%" y="1093" width="0.0497%" height="15" fill="rgb(230,197,49)" fg:x="2612" fg:w="3"/><text x="43.5452%" y="1103.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (33 samples, 0.55%)</title><rect x="42.9637%" y="1269" width="0.5470%" height="15" fill="rgb(239,141,16)" fg:x="2592" fg:w="33"/><text x="43.2137%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (33 samples, 0.55%)</title><rect x="42.9637%" y="1253" width="0.5470%" height="15" fill="rgb(225,105,43)" fg:x="2592" fg:w="33"/><text x="43.2137%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (33 samples, 0.55%)</title><rect x="42.9637%" y="1237" width="0.5470%" height="15" fill="rgb(214,131,14)" fg:x="2592" fg:w="33"/><text x="43.2137%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (27 samples, 0.45%)</title><rect x="43.0632%" y="1221" width="0.4475%" height="15" fill="rgb(229,177,11)" fg:x="2598" fg:w="27"/><text x="43.3132%" y="1231.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (16 samples, 0.27%)</title><rect x="43.2455%" y="1205" width="0.2652%" height="15" fill="rgb(231,180,14)" fg:x="2609" fg:w="16"/><text x="43.4955%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (16 samples, 0.27%)</title><rect x="43.2455%" y="1189" width="0.2652%" height="15" fill="rgb(232,88,2)" fg:x="2609" fg:w="16"/><text x="43.4955%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (16 samples, 0.27%)</title><rect x="43.2455%" y="1173" width="0.2652%" height="15" fill="rgb(205,220,8)" fg:x="2609" fg:w="16"/><text x="43.4955%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (16 samples, 0.27%)</title><rect x="43.2455%" y="1157" width="0.2652%" height="15" fill="rgb(225,23,53)" fg:x="2609" fg:w="16"/><text x="43.4955%" y="1167.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (16 samples, 0.27%)</title><rect x="43.2455%" y="1141" width="0.2652%" height="15" fill="rgb(213,62,29)" fg:x="2609" fg:w="16"/><text x="43.4955%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (16 samples, 0.27%)</title><rect x="43.2455%" y="1125" width="0.2652%" height="15" fill="rgb(227,75,7)" fg:x="2609" fg:w="16"/><text x="43.4955%" y="1135.50"></text></g><g><title>Coin::~Coin (10 samples, 0.17%)</title><rect x="43.3449%" y="1109" width="0.1658%" height="15" fill="rgb(207,105,14)" fg:x="2615" fg:w="10"/><text x="43.5949%" y="1119.50"></text></g><g><title>CTxOut::~CTxOut (10 samples, 0.17%)</title><rect x="43.3449%" y="1093" width="0.1658%" height="15" fill="rgb(245,62,29)" fg:x="2615" fg:w="10"/><text x="43.5949%" y="1103.50"></text></g><g><title>CScript::~CScript (10 samples, 0.17%)</title><rect x="43.3449%" y="1077" width="0.1658%" height="15" fill="rgb(236,202,4)" fg:x="2615" fg:w="10"/><text x="43.5949%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (10 samples, 0.17%)</title><rect x="43.3449%" y="1061" width="0.1658%" height="15" fill="rgb(250,67,1)" fg:x="2615" fg:w="10"/><text x="43.5949%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.4941%" y="1045" width="0.0166%" height="15" fill="rgb(253,115,44)" fg:x="2624" fg:w="1"/><text x="43.7441%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.4941%" y="1029" width="0.0166%" height="15" fill="rgb(251,139,18)" fg:x="2624" fg:w="1"/><text x="43.7441%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.4941%" y="1013" width="0.0166%" height="15" fill="rgb(218,22,32)" fg:x="2624" fg:w="1"/><text x="43.7441%" y="1023.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="43.5107%" y="1269" width="0.0166%" height="15" fill="rgb(243,53,5)" fg:x="2625" fg:w="1"/><text x="43.7607%" y="1279.50"></text></g><g><title>CCoinsViewCache::Flush (319 samples, 5.29%)</title><rect x="38.2894%" y="1285" width="5.2876%" height="15" fill="rgb(227,56,16)" fg:x="2310" fg:w="319"/><text x="38.5394%" y="1295.50">CCoins..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.05%)</title><rect x="43.5273%" y="1269" width="0.0497%" height="15" fill="rgb(245,53,0)" fg:x="2626" fg:w="3"/><text x="43.7773%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5604%" y="1253" width="0.0166%" height="15" fill="rgb(216,170,35)" fg:x="2628" fg:w="1"/><text x="43.8104%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5604%" y="1237" width="0.0166%" height="15" fill="rgb(211,200,8)" fg:x="2628" fg:w="1"/><text x="43.8104%" y="1247.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="43.5604%" y="1221" width="0.0166%" height="15" fill="rgb(228,204,44)" fg:x="2628" fg:w="1"/><text x="43.8104%" y="1231.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="43.5604%" y="1205" width="0.0166%" height="15" fill="rgb(214,121,17)" fg:x="2628" fg:w="1"/><text x="43.8104%" y="1215.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="43.5604%" y="1189" width="0.0166%" height="15" fill="rgb(233,64,38)" fg:x="2628" fg:w="1"/><text x="43.8104%" y="1199.50"></text></g><g><title>FlatFileSeq::Flush (1 samples, 0.02%)</title><rect x="43.5770%" y="1253" width="0.0166%" height="15" fill="rgb(253,54,19)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1263.50"></text></g><g><title>FileCommit (1 samples, 0.02%)</title><rect x="43.5770%" y="1237" width="0.0166%" height="15" fill="rgb(253,94,18)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1247.50"></text></g><g><title>fdatasync (1 samples, 0.02%)</title><rect x="43.5770%" y="1221" width="0.0166%" height="15" fill="rgb(227,57,52)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1205" width="0.0166%" height="15" fill="rgb(230,228,50)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1189" width="0.0166%" height="15" fill="rgb(217,205,27)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1173" width="0.0166%" height="15" fill="rgb(252,71,50)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5770%" y="1157" width="0.0166%" height="15" fill="rgb(209,86,4)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1141" width="0.0166%" height="15" fill="rgb(229,94,0)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1125" width="0.0166%" height="15" fill="rgb(252,223,21)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1109" width="0.0166%" height="15" fill="rgb(230,210,4)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1093" width="0.0166%" height="15" fill="rgb(240,149,38)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5770%" y="1077" width="0.0166%" height="15" fill="rgb(254,105,20)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5770%" y="1061" width="0.0166%" height="15" fill="rgb(253,87,46)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5770%" y="1045" width="0.0166%" height="15" fill="rgb(253,116,33)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1029" width="0.0166%" height="15" fill="rgb(229,198,5)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5770%" y="1013" width="0.0166%" height="15" fill="rgb(242,38,37)" fg:x="2629" fg:w="1"/><text x="43.8270%" y="1023.50"></text></g><g><title>Chainstate::ActivateBestChain (1,866 samples, 30.93%)</title><rect x="12.6803%" y="1317" width="30.9299%" height="15" fill="rgb(242,69,53)" fg:x="765" fg:w="1866"/><text x="12.9303%" y="1327.50">Chainstate::ActivateBestChain</text></g><g><title>Chainstate::FlushStateToDisk (321 samples, 5.32%)</title><rect x="38.2894%" y="1301" width="5.3207%" height="15" fill="rgb(249,80,16)" fg:x="2310" fg:w="321"/><text x="38.5394%" y="1311.50">Chainst..</text></g><g><title>node::BlockManager::FlushChainstateBlockFile (2 samples, 0.03%)</title><rect x="43.5770%" y="1285" width="0.0332%" height="15" fill="rgb(206,128,11)" fg:x="2629" fg:w="2"/><text x="43.8270%" y="1295.50"></text></g><g><title>node::BlockManager::FlushBlockFile (2 samples, 0.03%)</title><rect x="43.5770%" y="1269" width="0.0332%" height="15" fill="rgb(212,35,20)" fg:x="2629" fg:w="2"/><text x="43.8270%" y="1279.50"></text></g><g><title>node::BlockManager::FlushUndoFile (1 samples, 0.02%)</title><rect x="43.5936%" y="1253" width="0.0166%" height="15" fill="rgb(236,79,13)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1263.50"></text></g><g><title>FlatFileSeq::Flush (1 samples, 0.02%)</title><rect x="43.5936%" y="1237" width="0.0166%" height="15" fill="rgb(233,123,3)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1247.50"></text></g><g><title>FileCommit (1 samples, 0.02%)</title><rect x="43.5936%" y="1221" width="0.0166%" height="15" fill="rgb(214,93,52)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1231.50"></text></g><g><title>fdatasync (1 samples, 0.02%)</title><rect x="43.5936%" y="1205" width="0.0166%" height="15" fill="rgb(251,37,40)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="1189" width="0.0166%" height="15" fill="rgb(227,80,54)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="1173" width="0.0166%" height="15" fill="rgb(254,48,11)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="1157" width="0.0166%" height="15" fill="rgb(235,193,26)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5936%" y="1141" width="0.0166%" height="15" fill="rgb(229,99,21)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="1125" width="0.0166%" height="15" fill="rgb(211,140,41)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="1109" width="0.0166%" height="15" fill="rgb(240,227,30)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="1093" width="0.0166%" height="15" fill="rgb(215,224,45)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="1077" width="0.0166%" height="15" fill="rgb(206,123,31)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5936%" y="1061" width="0.0166%" height="15" fill="rgb(210,138,16)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5936%" y="1045" width="0.0166%" height="15" fill="rgb(228,57,28)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5936%" y="1029" width="0.0166%" height="15" fill="rgb(242,170,10)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.5936%" y="1013" width="0.0166%" height="15" fill="rgb(228,214,39)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5936%" y="997" width="0.0166%" height="15" fill="rgb(218,179,33)" fg:x="2630" fg:w="1"/><text x="43.8436%" y="1007.50"></text></g><g><title>Chainstate::TryAddBlockIndexCandidate (1 samples, 0.02%)</title><rect x="43.6101%" y="1285" width="0.0166%" height="15" fill="rgb(235,193,39)" fg:x="2631" fg:w="1"/><text x="43.8601%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="43.6101%" y="1269" width="0.0166%" height="15" fill="rgb(219,221,36)" fg:x="2631" fg:w="1"/><text x="43.8601%" y="1279.50"></text></g><g><title>ChainstateManager::ReceivedBlockTransactions (2 samples, 0.03%)</title><rect x="43.6101%" y="1301" width="0.0332%" height="15" fill="rgb(248,218,19)" fg:x="2631" fg:w="2"/><text x="43.8601%" y="1311.50"></text></g><g><title>ChainstateManager::GetAll (1 samples, 0.02%)</title><rect x="43.6267%" y="1285" width="0.0166%" height="15" fill="rgb(205,50,9)" fg:x="2632" fg:w="1"/><text x="43.8767%" y="1295.50"></text></g><g><title>std::vector&lt;Chainstate*, std::allocator&lt;Chainstate*&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="43.6267%" y="1269" width="0.0166%" height="15" fill="rgb(238,81,28)" fg:x="2632" fg:w="1"/><text x="43.8767%" y="1279.50"></text></g><g><title>void std::vector&lt;Chainstate*, std::allocator&lt;Chainstate*&gt; &gt;::_M_realloc_insert&lt;Chainstate* const&amp;&gt; (1 samples, 0.02%)</title><rect x="43.6267%" y="1253" width="0.0166%" height="15" fill="rgb(235,110,19)" fg:x="2632" fg:w="1"/><text x="43.8767%" y="1263.50"></text></g><g><title>std::vector&lt;Chainstate*, std::allocator&lt;Chainstate*&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="43.6267%" y="1237" width="0.0166%" height="15" fill="rgb(214,7,14)" fg:x="2632" fg:w="1"/><text x="43.8767%" y="1247.50"></text></g><g><title>ContextualCheckBlock (1 samples, 0.02%)</title><rect x="43.6433%" y="1285" width="0.0166%" height="15" fill="rgb(211,77,3)" fg:x="2633" fg:w="1"/><text x="43.8933%" y="1295.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="43.7593%" y="869" width="0.0166%" height="15" fill="rgb(229,5,9)" fg:x="2640" fg:w="1"/><text x="44.0093%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="43.7593%" y="853" width="0.0166%" height="15" fill="rgb(225,90,11)" fg:x="2640" fg:w="1"/><text x="44.0093%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="43.7593%" y="837" width="0.0166%" height="15" fill="rgb(242,56,8)" fg:x="2640" fg:w="1"/><text x="44.0093%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.7593%" y="821" width="0.0166%" height="15" fill="rgb(249,212,39)" fg:x="2640" fg:w="1"/><text x="44.0093%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.7593%" y="805" width="0.0166%" height="15" fill="rgb(236,90,9)" fg:x="2640" fg:w="1"/><text x="44.0093%" y="815.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="43.7593%" y="789" width="0.0166%" height="15" fill="rgb(206,88,35)" fg:x="2640" fg:w="1"/><text x="44.0093%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="43.7262%" y="965" width="0.0663%" height="15" fill="rgb(205,126,30)" fg:x="2638" fg:w="4"/><text x="43.9762%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (4 samples, 0.07%)</title><rect x="43.7262%" y="949" width="0.0663%" height="15" fill="rgb(230,176,12)" fg:x="2638" fg:w="4"/><text x="43.9762%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="43.7262%" y="933" width="0.0663%" height="15" fill="rgb(243,19,9)" fg:x="2638" fg:w="4"/><text x="43.9762%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.7262%" y="917" width="0.0663%" height="15" fill="rgb(245,171,17)" fg:x="2638" fg:w="4"/><text x="43.9762%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="43.7427%" y="901" width="0.0497%" height="15" fill="rgb(227,52,21)" fg:x="2639" fg:w="3"/><text x="43.9927%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.05%)</title><rect x="43.7427%" y="885" width="0.0497%" height="15" fill="rgb(238,69,14)" fg:x="2639" fg:w="3"/><text x="43.9927%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="43.7759%" y="869" width="0.0166%" height="15" fill="rgb(241,156,39)" fg:x="2641" fg:w="1"/><text x="44.0259%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.7759%" y="853" width="0.0166%" height="15" fill="rgb(212,227,28)" fg:x="2641" fg:w="1"/><text x="44.0259%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="43.7759%" y="837" width="0.0166%" height="15" fill="rgb(209,118,27)" fg:x="2641" fg:w="1"/><text x="44.0259%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.7759%" y="821" width="0.0166%" height="15" fill="rgb(226,102,5)" fg:x="2641" fg:w="1"/><text x="44.0259%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.7759%" y="805" width="0.0166%" height="15" fill="rgb(223,34,3)" fg:x="2641" fg:w="1"/><text x="44.0259%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.7759%" y="789" width="0.0166%" height="15" fill="rgb(221,81,38)" fg:x="2641" fg:w="1"/><text x="44.0259%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="885" width="0.0166%" height="15" fill="rgb(236,219,28)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="869" width="0.0166%" height="15" fill="rgb(213,200,14)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="853" width="0.0166%" height="15" fill="rgb(240,33,19)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="837" width="0.0166%" height="15" fill="rgb(233,113,27)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="821" width="0.0166%" height="15" fill="rgb(220,221,18)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="805" width="0.0166%" height="15" fill="rgb(238,92,8)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="789" width="0.0166%" height="15" fill="rgb(222,164,16)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="773" width="0.0166%" height="15" fill="rgb(241,119,3)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="757" width="0.0166%" height="15" fill="rgb(241,44,8)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="741" width="0.0166%" height="15" fill="rgb(230,36,40)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="725" width="0.0166%" height="15" fill="rgb(243,16,36)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="709" width="0.0166%" height="15" fill="rgb(231,4,26)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="693" width="0.0166%" height="15" fill="rgb(240,9,31)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="43.8422%" y="677" width="0.0166%" height="15" fill="rgb(207,173,15)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="43.8422%" y="661" width="0.0166%" height="15" fill="rgb(224,192,53)" fg:x="2645" fg:w="1"/><text x="44.0922%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (5 samples, 0.08%)</title><rect x="43.7925%" y="965" width="0.0829%" height="15" fill="rgb(223,67,28)" fg:x="2642" fg:w="5"/><text x="44.0425%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (5 samples, 0.08%)</title><rect x="43.7925%" y="949" width="0.0829%" height="15" fill="rgb(211,20,47)" fg:x="2642" fg:w="5"/><text x="44.0425%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="43.7925%" y="933" width="0.0829%" height="15" fill="rgb(240,228,2)" fg:x="2642" fg:w="5"/><text x="44.0425%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="43.7925%" y="917" width="0.0829%" height="15" fill="rgb(248,151,12)" fg:x="2642" fg:w="5"/><text x="44.0425%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="43.8091%" y="901" width="0.0663%" height="15" fill="rgb(244,8,39)" fg:x="2643" fg:w="4"/><text x="44.0591%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="885" width="0.0166%" height="15" fill="rgb(222,26,8)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="43.8588%" y="869" width="0.0166%" height="15" fill="rgb(213,106,44)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="853" width="0.0166%" height="15" fill="rgb(214,129,20)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="837" width="0.0166%" height="15" fill="rgb(212,32,13)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="821" width="0.0166%" height="15" fill="rgb(208,168,33)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="805" width="0.0166%" height="15" fill="rgb(231,207,8)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="789" width="0.0166%" height="15" fill="rgb(235,219,23)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="773" width="0.0166%" height="15" fill="rgb(226,216,26)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="783.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="757" width="0.0166%" height="15" fill="rgb(239,137,16)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="767.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="741" width="0.0166%" height="15" fill="rgb(207,12,36)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="751.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="725" width="0.0166%" height="15" fill="rgb(210,214,24)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="709" width="0.0166%" height="15" fill="rgb(206,56,30)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="693" width="0.0166%" height="15" fill="rgb(228,143,26)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="677" width="0.0166%" height="15" fill="rgb(216,218,46)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="687.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="661" width="0.0166%" height="15" fill="rgb(206,6,19)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="671.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="645" width="0.0166%" height="15" fill="rgb(239,177,51)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="655.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="629" width="0.0166%" height="15" fill="rgb(216,55,25)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="613" width="0.0166%" height="15" fill="rgb(231,163,29)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="597" width="0.0166%" height="15" fill="rgb(232,149,50)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="43.8588%" y="581" width="0.0166%" height="15" fill="rgb(223,142,48)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="591.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="43.8588%" y="565" width="0.0166%" height="15" fill="rgb(245,83,23)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="575.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="43.8588%" y="549" width="0.0166%" height="15" fill="rgb(224,63,2)" fg:x="2646" fg:w="1"/><text x="44.1088%" y="559.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="43.8754%" y="965" width="0.0332%" height="15" fill="rgb(218,65,53)" fg:x="2647" fg:w="2"/><text x="44.1254%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="43.8754%" y="949" width="0.0332%" height="15" fill="rgb(221,84,29)" fg:x="2647" fg:w="2"/><text x="44.1254%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="43.8754%" y="933" width="0.0332%" height="15" fill="rgb(234,0,32)" fg:x="2647" fg:w="2"/><text x="44.1254%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="43.8754%" y="917" width="0.0332%" height="15" fill="rgb(206,20,16)" fg:x="2647" fg:w="2"/><text x="44.1254%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="43.8754%" y="901" width="0.0332%" height="15" fill="rgb(244,172,18)" fg:x="2647" fg:w="2"/><text x="44.1254%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8919%" y="885" width="0.0166%" height="15" fill="rgb(254,133,1)" fg:x="2648" fg:w="1"/><text x="44.1419%" y="895.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.27%)</title><rect x="43.6599%" y="981" width="0.2652%" height="15" fill="rgb(222,206,41)" fg:x="2634" fg:w="16"/><text x="43.9099%" y="991.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="43.9085%" y="965" width="0.0166%" height="15" fill="rgb(212,3,42)" fg:x="2649" fg:w="1"/><text x="44.1585%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9085%" y="949" width="0.0166%" height="15" fill="rgb(241,11,4)" fg:x="2649" fg:w="1"/><text x="44.1585%" y="959.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9085%" y="933" width="0.0166%" height="15" fill="rgb(205,19,26)" fg:x="2649" fg:w="1"/><text x="44.1585%" y="943.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="43.9085%" y="917" width="0.0166%" height="15" fill="rgb(210,179,32)" fg:x="2649" fg:w="1"/><text x="44.1585%" y="927.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="43.9085%" y="901" width="0.0166%" height="15" fill="rgb(227,116,49)" fg:x="2649" fg:w="1"/><text x="44.1585%" y="911.50"></text></g><g><title>ContextualCheckBlock (25 samples, 0.41%)</title><rect x="43.6433%" y="1301" width="0.4144%" height="15" fill="rgb(211,146,6)" fg:x="2633" fg:w="25"/><text x="43.8933%" y="1311.50"></text></g><g><title>GetBlockWeight (24 samples, 0.40%)</title><rect x="43.6599%" y="1285" width="0.3978%" height="15" fill="rgb(219,44,39)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1295.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1269" width="0.3978%" height="15" fill="rgb(234,128,11)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (24 samples, 0.40%)</title><rect x="43.6599%" y="1253" width="0.3978%" height="15" fill="rgb(220,183,53)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1237" width="0.3978%" height="15" fill="rgb(213,219,32)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1221" width="0.3978%" height="15" fill="rgb(232,156,16)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1205" width="0.3978%" height="15" fill="rgb(246,135,34)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1189" width="0.3978%" height="15" fill="rgb(241,99,0)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1173" width="0.3978%" height="15" fill="rgb(222,103,45)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1157" width="0.3978%" height="15" fill="rgb(212,57,4)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1141" width="0.3978%" height="15" fill="rgb(215,68,47)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1151.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1125" width="0.3978%" height="15" fill="rgb(230,84,2)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1109" width="0.3978%" height="15" fill="rgb(220,102,14)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1093" width="0.3978%" height="15" fill="rgb(240,10,32)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1077" width="0.3978%" height="15" fill="rgb(215,47,27)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1061" width="0.3978%" height="15" fill="rgb(233,188,43)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1045" width="0.3978%" height="15" fill="rgb(253,190,1)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1029" width="0.3978%" height="15" fill="rgb(206,114,52)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="1013" width="0.3978%" height="15" fill="rgb(233,120,37)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.40%)</title><rect x="43.6599%" y="997" width="0.3978%" height="15" fill="rgb(214,52,39)" fg:x="2634" fg:w="24"/><text x="43.9099%" y="1007.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="43.9251%" y="981" width="0.1326%" height="15" fill="rgb(223,80,29)" fg:x="2650" fg:w="8"/><text x="44.1751%" y="991.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.9914%" y="965" width="0.0663%" height="15" fill="rgb(230,101,40)" fg:x="2654" fg:w="4"/><text x="44.2414%" y="975.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="43.9914%" y="949" width="0.0663%" height="15" fill="rgb(219,211,8)" fg:x="2654" fg:w="4"/><text x="44.2414%" y="959.50"></text></g><g><title>SizeComputer::write (4 samples, 0.07%)</title><rect x="43.9914%" y="933" width="0.0663%" height="15" fill="rgb(252,126,28)" fg:x="2654" fg:w="4"/><text x="44.2414%" y="943.50"></text></g><g><title>AllocateFileRange (1 samples, 0.02%)</title><rect x="44.0577%" y="1253" width="0.0166%" height="15" fill="rgb(215,56,38)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1263.50"></text></g><g><title>posix_fallocate (1 samples, 0.02%)</title><rect x="44.0577%" y="1237" width="0.0166%" height="15" fill="rgb(249,55,44)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0577%" y="1221" width="0.0166%" height="15" fill="rgb(220,221,32)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0577%" y="1205" width="0.0166%" height="15" fill="rgb(212,216,41)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0577%" y="1189" width="0.0166%" height="15" fill="rgb(228,213,43)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.0577%" y="1173" width="0.0166%" height="15" fill="rgb(211,31,26)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.0577%" y="1157" width="0.0166%" height="15" fill="rgb(229,202,19)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.0577%" y="1141" width="0.0166%" height="15" fill="rgb(229,105,46)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1151.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.0577%" y="1125" width="0.0166%" height="15" fill="rgb(235,108,1)" fg:x="2658" fg:w="1"/><text x="44.3077%" y="1135.50"></text></g><g><title>FlatFileSeq::Allocate (2 samples, 0.03%)</title><rect x="44.0577%" y="1269" width="0.0332%" height="15" fill="rgb(245,111,35)" fg:x="2658" fg:w="2"/><text x="44.3077%" y="1279.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.02%)</title><rect x="44.0743%" y="1253" width="0.0166%" height="15" fill="rgb(219,185,31)" fg:x="2659" fg:w="1"/><text x="44.3243%" y="1263.50"></text></g><g><title>fseek (1 samples, 0.02%)</title><rect x="44.0743%" y="1237" width="0.0166%" height="15" fill="rgb(214,4,43)" fg:x="2659" fg:w="1"/><text x="44.3243%" y="1247.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="44.0743%" y="1221" width="0.0166%" height="15" fill="rgb(235,227,40)" fg:x="2659" fg:w="1"/><text x="44.3243%" y="1231.50"></text></g><g><title>_IO_doallocbuf (1 samples, 0.02%)</title><rect x="44.0743%" y="1205" width="0.0166%" height="15" fill="rgb(230,88,30)" fg:x="2659" fg:w="1"/><text x="44.3243%" y="1215.50"></text></g><g><title>_IO_file_doallocate (1 samples, 0.02%)</title><rect x="44.0743%" y="1189" width="0.0166%" height="15" fill="rgb(216,217,1)" fg:x="2659" fg:w="1"/><text x="44.3243%" y="1199.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="44.0743%" y="1173" width="0.0166%" height="15" fill="rgb(248,139,50)" fg:x="2659" fg:w="1"/><text x="44.3243%" y="1183.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="44.0743%" y="1157" width="0.0166%" height="15" fill="rgb(233,1,21)" fg:x="2659" fg:w="1"/><text x="44.3243%" y="1167.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="44.1240%" y="1013" width="0.1326%" height="15" fill="rgb(215,183,12)" fg:x="2662" fg:w="8"/><text x="44.3740%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="44.1406%" y="997" width="0.1160%" height="15" fill="rgb(229,104,42)" fg:x="2663" fg:w="7"/><text x="44.3906%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.1903%" y="981" width="0.0663%" height="15" fill="rgb(243,34,48)" fg:x="2666" fg:w="4"/><text x="44.4403%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.2400%" y="965" width="0.0166%" height="15" fill="rgb(239,11,44)" fg:x="2669" fg:w="1"/><text x="44.4900%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.2400%" y="949" width="0.0166%" height="15" fill="rgb(231,98,35)" fg:x="2669" fg:w="1"/><text x="44.4900%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.2400%" y="933" width="0.0166%" height="15" fill="rgb(233,28,25)" fg:x="2669" fg:w="1"/><text x="44.4900%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.2400%" y="917" width="0.0166%" height="15" fill="rgb(234,123,11)" fg:x="2669" fg:w="1"/><text x="44.4900%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.2400%" y="901" width="0.0166%" height="15" fill="rgb(220,69,3)" fg:x="2669" fg:w="1"/><text x="44.4900%" y="911.50"></text></g><g><title>[[ext4]] (9 samples, 0.15%)</title><rect x="44.1240%" y="1029" width="0.1492%" height="15" fill="rgb(214,64,36)" fg:x="2662" fg:w="9"/><text x="44.3740%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.2566%" y="1013" width="0.0166%" height="15" fill="rgb(211,138,32)" fg:x="2670" fg:w="1"/><text x="44.5066%" y="1023.50"></text></g><g><title>[[ext4]] (12 samples, 0.20%)</title><rect x="44.1240%" y="1077" width="0.1989%" height="15" fill="rgb(213,118,47)" fg:x="2662" fg:w="12"/><text x="44.3740%" y="1087.50"></text></g><g><title>[[ext4]] (12 samples, 0.20%)</title><rect x="44.1240%" y="1061" width="0.1989%" height="15" fill="rgb(243,124,49)" fg:x="2662" fg:w="12"/><text x="44.3740%" y="1071.50"></text></g><g><title>[[ext4]] (12 samples, 0.20%)</title><rect x="44.1240%" y="1045" width="0.1989%" height="15" fill="rgb(221,30,28)" fg:x="2662" fg:w="12"/><text x="44.3740%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.2732%" y="1029" width="0.0497%" height="15" fill="rgb(246,37,13)" fg:x="2671" fg:w="3"/><text x="44.5232%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.2897%" y="1013" width="0.0332%" height="15" fill="rgb(249,66,14)" fg:x="2672" fg:w="2"/><text x="44.5397%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.2897%" y="997" width="0.0332%" height="15" fill="rgb(213,166,5)" fg:x="2672" fg:w="2"/><text x="44.5397%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.2897%" y="981" width="0.0332%" height="15" fill="rgb(221,66,24)" fg:x="2672" fg:w="2"/><text x="44.5397%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.2897%" y="965" width="0.0332%" height="15" fill="rgb(210,132,17)" fg:x="2672" fg:w="2"/><text x="44.5397%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="949" width="0.0166%" height="15" fill="rgb(243,202,5)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="933" width="0.0166%" height="15" fill="rgb(233,70,48)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="917" width="0.0166%" height="15" fill="rgb(238,41,26)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="901" width="0.0166%" height="15" fill="rgb(241,19,31)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="885" width="0.0166%" height="15" fill="rgb(214,76,10)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="869" width="0.0166%" height="15" fill="rgb(254,202,22)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="853" width="0.0166%" height="15" fill="rgb(214,72,24)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="837" width="0.0166%" height="15" fill="rgb(221,92,46)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.3063%" y="821" width="0.0166%" height="15" fill="rgb(246,13,50)" fg:x="2673" fg:w="1"/><text x="44.5563%" y="831.50"></text></g><g><title>FlatFileSeq::Flush (18 samples, 0.30%)</title><rect x="44.0908%" y="1253" width="0.2984%" height="15" fill="rgb(240,165,38)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1263.50"></text></g><g><title>FileCommit (18 samples, 0.30%)</title><rect x="44.0908%" y="1237" width="0.2984%" height="15" fill="rgb(241,24,51)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1247.50"></text></g><g><title>fdatasync (18 samples, 0.30%)</title><rect x="44.0908%" y="1221" width="0.2984%" height="15" fill="rgb(227,51,44)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1231.50"></text></g><g><title>[unknown] (18 samples, 0.30%)</title><rect x="44.0908%" y="1205" width="0.2984%" height="15" fill="rgb(231,121,3)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1215.50"></text></g><g><title>[unknown] (18 samples, 0.30%)</title><rect x="44.0908%" y="1189" width="0.2984%" height="15" fill="rgb(245,3,41)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1199.50"></text></g><g><title>[unknown] (18 samples, 0.30%)</title><rect x="44.0908%" y="1173" width="0.2984%" height="15" fill="rgb(214,13,26)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1183.50"></text></g><g><title>[[ext4]] (18 samples, 0.30%)</title><rect x="44.0908%" y="1157" width="0.2984%" height="15" fill="rgb(252,75,11)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1167.50"></text></g><g><title>[unknown] (18 samples, 0.30%)</title><rect x="44.0908%" y="1141" width="0.2984%" height="15" fill="rgb(218,226,17)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1151.50"></text></g><g><title>[unknown] (18 samples, 0.30%)</title><rect x="44.0908%" y="1125" width="0.2984%" height="15" fill="rgb(248,89,38)" fg:x="2660" fg:w="18"/><text x="44.3408%" y="1135.50"></text></g><g><title>[unknown] (17 samples, 0.28%)</title><rect x="44.1074%" y="1109" width="0.2818%" height="15" fill="rgb(237,73,46)" fg:x="2661" fg:w="17"/><text x="44.3574%" y="1119.50"></text></g><g><title>[unknown] (17 samples, 0.28%)</title><rect x="44.1074%" y="1093" width="0.2818%" height="15" fill="rgb(242,78,33)" fg:x="2661" fg:w="17"/><text x="44.3574%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.3229%" y="1077" width="0.0663%" height="15" fill="rgb(235,60,3)" fg:x="2674" fg:w="4"/><text x="44.5729%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.3229%" y="1061" width="0.0663%" height="15" fill="rgb(216,172,19)" fg:x="2674" fg:w="4"/><text x="44.5729%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.3229%" y="1045" width="0.0663%" height="15" fill="rgb(227,6,42)" fg:x="2674" fg:w="4"/><text x="44.5729%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.3229%" y="1029" width="0.0663%" height="15" fill="rgb(223,207,42)" fg:x="2674" fg:w="4"/><text x="44.5729%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.3229%" y="1013" width="0.0663%" height="15" fill="rgb(246,138,30)" fg:x="2674" fg:w="4"/><text x="44.5729%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.3229%" y="997" width="0.0663%" height="15" fill="rgb(251,199,47)" fg:x="2674" fg:w="4"/><text x="44.5729%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="44.3229%" y="981" width="0.0663%" height="15" fill="rgb(228,218,44)" fg:x="2674" fg:w="4"/><text x="44.5729%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.3395%" y="965" width="0.0497%" height="15" fill="rgb(220,68,6)" fg:x="2675" fg:w="3"/><text x="44.5895%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.3395%" y="949" width="0.0497%" height="15" fill="rgb(240,60,26)" fg:x="2675" fg:w="3"/><text x="44.5895%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.3395%" y="933" width="0.0497%" height="15" fill="rgb(211,200,19)" fg:x="2675" fg:w="3"/><text x="44.5895%" y="943.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (22 samples, 0.36%)</title><rect x="44.0577%" y="1285" width="0.3647%" height="15" fill="rgb(242,145,30)" fg:x="2658" fg:w="22"/><text x="44.3077%" y="1295.50"></text></g><g><title>node::BlockManager::FlushBlockFile (20 samples, 0.33%)</title><rect x="44.0908%" y="1269" width="0.3315%" height="15" fill="rgb(225,64,13)" fg:x="2660" fg:w="20"/><text x="44.3408%" y="1279.50"></text></g><g><title>node::BlockManager::FlushUndoFile (2 samples, 0.03%)</title><rect x="44.3892%" y="1253" width="0.0332%" height="15" fill="rgb(218,103,35)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1263.50"></text></g><g><title>FlatFileSeq::Flush (2 samples, 0.03%)</title><rect x="44.3892%" y="1237" width="0.0332%" height="15" fill="rgb(216,93,46)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1247.50"></text></g><g><title>FileCommit (2 samples, 0.03%)</title><rect x="44.3892%" y="1221" width="0.0332%" height="15" fill="rgb(225,159,27)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1231.50"></text></g><g><title>fdatasync (2 samples, 0.03%)</title><rect x="44.3892%" y="1205" width="0.0332%" height="15" fill="rgb(225,204,11)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.3892%" y="1189" width="0.0332%" height="15" fill="rgb(205,56,4)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.3892%" y="1173" width="0.0332%" height="15" fill="rgb(206,6,35)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.3892%" y="1157" width="0.0332%" height="15" fill="rgb(247,73,52)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1167.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="44.3892%" y="1141" width="0.0332%" height="15" fill="rgb(246,97,4)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.3892%" y="1125" width="0.0332%" height="15" fill="rgb(212,37,15)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.3892%" y="1109" width="0.0332%" height="15" fill="rgb(208,130,40)" fg:x="2678" fg:w="2"/><text x="44.6392%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.4058%" y="1093" width="0.0166%" height="15" fill="rgb(236,55,29)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.4058%" y="1077" width="0.0166%" height="15" fill="rgb(209,156,45)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.4058%" y="1061" width="0.0166%" height="15" fill="rgb(249,107,4)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.4058%" y="1045" width="0.0166%" height="15" fill="rgb(227,7,13)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.4058%" y="1029" width="0.0166%" height="15" fill="rgb(250,129,14)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.4058%" y="1013" width="0.0166%" height="15" fill="rgb(229,92,13)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.4058%" y="997" width="0.0166%" height="15" fill="rgb(245,98,39)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.4058%" y="981" width="0.0166%" height="15" fill="rgb(234,135,48)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.4058%" y="965" width="0.0166%" height="15" fill="rgb(230,98,28)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.4058%" y="949" width="0.0166%" height="15" fill="rgb(223,121,0)" fg:x="2679" fg:w="1"/><text x="44.6558%" y="959.50"></text></g><g><title>AutoFile::write (6 samples, 0.10%)</title><rect x="44.4223%" y="1141" width="0.0995%" height="15" fill="rgb(234,173,33)" fg:x="2680" fg:w="6"/><text x="44.6723%" y="1151.50"></text></g><g><title>util::Xor (6 samples, 0.10%)</title><rect x="44.4223%" y="1125" width="0.0995%" height="15" fill="rgb(245,47,8)" fg:x="2680" fg:w="6"/><text x="44.6723%" y="1135.50"></text></g><g><title>std::operator^= (2 samples, 0.03%)</title><rect x="44.4886%" y="1109" width="0.0332%" height="15" fill="rgb(205,17,20)" fg:x="2684" fg:w="2"/><text x="44.7386%" y="1119.50"></text></g><g><title>std::operator^ (2 samples, 0.03%)</title><rect x="44.4886%" y="1093" width="0.0332%" height="15" fill="rgb(232,151,16)" fg:x="2684" fg:w="2"/><text x="44.7386%" y="1103.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="44.5218%" y="789" width="0.0663%" height="15" fill="rgb(208,30,32)" fg:x="2686" fg:w="4"/><text x="44.7718%" y="799.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="44.5218%" y="773" width="0.0663%" height="15" fill="rgb(254,26,3)" fg:x="2686" fg:w="4"/><text x="44.7718%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="44.5218%" y="757" width="0.0663%" height="15" fill="rgb(240,177,30)" fg:x="2686" fg:w="4"/><text x="44.7718%" y="767.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="44.5218%" y="741" width="0.0663%" height="15" fill="rgb(248,76,44)" fg:x="2686" fg:w="4"/><text x="44.7718%" y="751.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="44.5218%" y="725" width="0.0663%" height="15" fill="rgb(241,186,54)" fg:x="2686" fg:w="4"/><text x="44.7718%" y="735.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="44.5384%" y="709" width="0.0497%" height="15" fill="rgb(249,171,29)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="719.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="44.5384%" y="693" width="0.0497%" height="15" fill="rgb(237,151,44)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="703.50"></text></g><g><title>new_do_write (3 samples, 0.05%)</title><rect x="44.5384%" y="677" width="0.0497%" height="15" fill="rgb(228,174,30)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="44.5384%" y="661" width="0.0497%" height="15" fill="rgb(252,14,37)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="671.50"></text></g><g><title>__GI___libc_write (3 samples, 0.05%)</title><rect x="44.5384%" y="645" width="0.0497%" height="15" fill="rgb(207,111,40)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.5384%" y="629" width="0.0497%" height="15" fill="rgb(248,171,54)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.5384%" y="613" width="0.0497%" height="15" fill="rgb(211,127,2)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.5384%" y="597" width="0.0497%" height="15" fill="rgb(236,87,47)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.5384%" y="581" width="0.0497%" height="15" fill="rgb(223,190,45)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="591.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="44.5384%" y="565" width="0.0497%" height="15" fill="rgb(215,5,16)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.5384%" y="549" width="0.0497%" height="15" fill="rgb(252,82,33)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="559.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="44.5384%" y="533" width="0.0497%" height="15" fill="rgb(247,213,44)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="44.5384%" y="517" width="0.0497%" height="15" fill="rgb(205,196,44)" fg:x="2687" fg:w="3"/><text x="44.7884%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.5549%" y="501" width="0.0332%" height="15" fill="rgb(237,96,54)" fg:x="2688" fg:w="2"/><text x="44.8049%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.5549%" y="485" width="0.0332%" height="15" fill="rgb(230,113,34)" fg:x="2688" fg:w="2"/><text x="44.8049%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5715%" y="469" width="0.0166%" height="15" fill="rgb(221,224,12)" fg:x="2689" fg:w="1"/><text x="44.8215%" y="479.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.6047%" y="437" width="0.0166%" height="15" fill="rgb(219,112,44)" fg:x="2691" fg:w="1"/><text x="44.8547%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.6047%" y="421" width="0.0166%" height="15" fill="rgb(210,31,13)" fg:x="2691" fg:w="1"/><text x="44.8547%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.6047%" y="405" width="0.0166%" height="15" fill="rgb(230,25,16)" fg:x="2691" fg:w="1"/><text x="44.8547%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.6047%" y="389" width="0.0166%" height="15" fill="rgb(246,108,53)" fg:x="2691" fg:w="1"/><text x="44.8547%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.6047%" y="373" width="0.0166%" height="15" fill="rgb(241,172,50)" fg:x="2691" fg:w="1"/><text x="44.8547%" y="383.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="44.6047%" y="597" width="0.0332%" height="15" fill="rgb(235,141,10)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="607.50"></text></g><g><title>new_do_write (2 samples, 0.03%)</title><rect x="44.6047%" y="581" width="0.0332%" height="15" fill="rgb(220,174,43)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="44.6047%" y="565" width="0.0332%" height="15" fill="rgb(215,181,40)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="575.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="44.6047%" y="549" width="0.0332%" height="15" fill="rgb(230,97,2)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.6047%" y="533" width="0.0332%" height="15" fill="rgb(211,25,27)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.6047%" y="517" width="0.0332%" height="15" fill="rgb(230,87,26)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.6047%" y="501" width="0.0332%" height="15" fill="rgb(227,160,17)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.6047%" y="485" width="0.0332%" height="15" fill="rgb(244,85,34)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="495.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="44.6047%" y="469" width="0.0332%" height="15" fill="rgb(207,70,0)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.6047%" y="453" width="0.0332%" height="15" fill="rgb(223,129,7)" fg:x="2691" fg:w="2"/><text x="44.8547%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.6212%" y="437" width="0.0166%" height="15" fill="rgb(246,105,7)" fg:x="2692" fg:w="1"/><text x="44.8712%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.6212%" y="421" width="0.0166%" height="15" fill="rgb(215,154,42)" fg:x="2692" fg:w="1"/><text x="44.8712%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="44.5881%" y="693" width="0.0663%" height="15" fill="rgb(220,215,30)" fg:x="2690" fg:w="4"/><text x="44.8381%" y="703.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="44.5881%" y="677" width="0.0663%" height="15" fill="rgb(228,81,51)" fg:x="2690" fg:w="4"/><text x="44.8381%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="44.5881%" y="661" width="0.0663%" height="15" fill="rgb(247,71,54)" fg:x="2690" fg:w="4"/><text x="44.8381%" y="671.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="44.5881%" y="645" width="0.0663%" height="15" fill="rgb(234,176,34)" fg:x="2690" fg:w="4"/><text x="44.8381%" y="655.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="44.5881%" y="629" width="0.0663%" height="15" fill="rgb(241,103,54)" fg:x="2690" fg:w="4"/><text x="44.8381%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="44.6047%" y="613" width="0.0497%" height="15" fill="rgb(228,22,34)" fg:x="2691" fg:w="3"/><text x="44.8547%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="44.6378%" y="597" width="0.0166%" height="15" fill="rgb(241,179,48)" fg:x="2693" fg:w="1"/><text x="44.8878%" y="607.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="44.7041%" y="373" width="0.0497%" height="15" fill="rgb(235,167,37)" fg:x="2697" fg:w="3"/><text x="44.9541%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7207%" y="357" width="0.0332%" height="15" fill="rgb(213,109,30)" fg:x="2698" fg:w="2"/><text x="44.9707%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7207%" y="341" width="0.0332%" height="15" fill="rgb(222,172,16)" fg:x="2698" fg:w="2"/><text x="44.9707%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7207%" y="325" width="0.0332%" height="15" fill="rgb(233,192,5)" fg:x="2698" fg:w="2"/><text x="44.9707%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7207%" y="309" width="0.0332%" height="15" fill="rgb(247,189,41)" fg:x="2698" fg:w="2"/><text x="44.9707%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7207%" y="293" width="0.0332%" height="15" fill="rgb(218,134,47)" fg:x="2698" fg:w="2"/><text x="44.9707%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7207%" y="277" width="0.0332%" height="15" fill="rgb(216,29,3)" fg:x="2698" fg:w="2"/><text x="44.9707%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7373%" y="261" width="0.0166%" height="15" fill="rgb(246,140,12)" fg:x="2699" fg:w="1"/><text x="44.9873%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7373%" y="245" width="0.0166%" height="15" fill="rgb(230,136,11)" fg:x="2699" fg:w="1"/><text x="44.9873%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7373%" y="229" width="0.0166%" height="15" fill="rgb(247,22,47)" fg:x="2699" fg:w="1"/><text x="44.9873%" y="239.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="44.6544%" y="421" width="0.1326%" height="15" fill="rgb(218,84,22)" fg:x="2694" fg:w="8"/><text x="44.9044%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="44.6710%" y="405" width="0.1160%" height="15" fill="rgb(216,87,39)" fg:x="2695" fg:w="7"/><text x="44.9210%" y="415.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="44.6876%" y="389" width="0.0995%" height="15" fill="rgb(221,178,8)" fg:x="2696" fg:w="6"/><text x="44.9376%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7539%" y="373" width="0.0332%" height="15" fill="rgb(230,42,11)" fg:x="2700" fg:w="2"/><text x="45.0039%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7539%" y="357" width="0.0332%" height="15" fill="rgb(237,229,4)" fg:x="2700" fg:w="2"/><text x="45.0039%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.7539%" y="341" width="0.0332%" height="15" fill="rgb(222,31,33)" fg:x="2700" fg:w="2"/><text x="45.0039%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7704%" y="325" width="0.0166%" height="15" fill="rgb(210,17,39)" fg:x="2701" fg:w="1"/><text x="45.0204%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7704%" y="309" width="0.0166%" height="15" fill="rgb(244,93,20)" fg:x="2701" fg:w="1"/><text x="45.0204%" y="319.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="44.6544%" y="485" width="0.1492%" height="15" fill="rgb(210,40,47)" fg:x="2694" fg:w="9"/><text x="44.9044%" y="495.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="44.6544%" y="469" width="0.1492%" height="15" fill="rgb(239,211,47)" fg:x="2694" fg:w="9"/><text x="44.9044%" y="479.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="44.6544%" y="453" width="0.1492%" height="15" fill="rgb(251,223,49)" fg:x="2694" fg:w="9"/><text x="44.9044%" y="463.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="44.6544%" y="437" width="0.1492%" height="15" fill="rgb(221,149,5)" fg:x="2694" fg:w="9"/><text x="44.9044%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.7870%" y="421" width="0.0166%" height="15" fill="rgb(219,224,51)" fg:x="2702" fg:w="1"/><text x="45.0370%" y="431.50"></text></g><g><title>_IO_fwrite (10 samples, 0.17%)</title><rect x="44.6544%" y="581" width="0.1658%" height="15" fill="rgb(223,7,8)" fg:x="2694" fg:w="10"/><text x="44.9044%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (10 samples, 0.17%)</title><rect x="44.6544%" y="565" width="0.1658%" height="15" fill="rgb(241,217,22)" fg:x="2694" fg:w="10"/><text x="44.9044%" y="575.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (10 samples, 0.17%)</title><rect x="44.6544%" y="549" width="0.1658%" height="15" fill="rgb(248,209,0)" fg:x="2694" fg:w="10"/><text x="44.9044%" y="559.50"></text></g><g><title>new_do_write (10 samples, 0.17%)</title><rect x="44.6544%" y="533" width="0.1658%" height="15" fill="rgb(217,205,4)" fg:x="2694" fg:w="10"/><text x="44.9044%" y="543.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (10 samples, 0.17%)</title><rect x="44.6544%" y="517" width="0.1658%" height="15" fill="rgb(228,124,39)" fg:x="2694" fg:w="10"/><text x="44.9044%" y="527.50"></text></g><g><title>__GI___libc_write (10 samples, 0.17%)</title><rect x="44.6544%" y="501" width="0.1658%" height="15" fill="rgb(250,116,42)" fg:x="2694" fg:w="10"/><text x="44.9044%" y="511.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="44.8036%" y="485" width="0.0166%" height="15" fill="rgb(223,202,9)" fg:x="2703" fg:w="1"/><text x="45.0536%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (20 samples, 0.33%)</title><rect x="44.5881%" y="789" width="0.3315%" height="15" fill="rgb(242,222,40)" fg:x="2690" fg:w="20"/><text x="44.8381%" y="799.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.33%)</title><rect x="44.5881%" y="773" width="0.3315%" height="15" fill="rgb(229,99,46)" fg:x="2690" fg:w="20"/><text x="44.8381%" y="783.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.33%)</title><rect x="44.5881%" y="757" width="0.3315%" height="15" fill="rgb(225,56,46)" fg:x="2690" fg:w="20"/><text x="44.8381%" y="767.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (20 samples, 0.33%)</title><rect x="44.5881%" y="741" width="0.3315%" height="15" fill="rgb(227,94,5)" fg:x="2690" fg:w="20"/><text x="44.8381%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (20 samples, 0.33%)</title><rect x="44.5881%" y="725" width="0.3315%" height="15" fill="rgb(205,112,38)" fg:x="2690" fg:w="20"/><text x="44.8381%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (20 samples, 0.33%)</title><rect x="44.5881%" y="709" width="0.3315%" height="15" fill="rgb(231,133,46)" fg:x="2690" fg:w="20"/><text x="44.8381%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (16 samples, 0.27%)</title><rect x="44.6544%" y="693" width="0.2652%" height="15" fill="rgb(217,16,9)" fg:x="2694" fg:w="16"/><text x="44.9044%" y="703.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.27%)</title><rect x="44.6544%" y="677" width="0.2652%" height="15" fill="rgb(249,173,9)" fg:x="2694" fg:w="16"/><text x="44.9044%" y="687.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.27%)</title><rect x="44.6544%" y="661" width="0.2652%" height="15" fill="rgb(205,163,53)" fg:x="2694" fg:w="16"/><text x="44.9044%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (16 samples, 0.27%)</title><rect x="44.6544%" y="645" width="0.2652%" height="15" fill="rgb(217,54,41)" fg:x="2694" fg:w="16"/><text x="44.9044%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (16 samples, 0.27%)</title><rect x="44.6544%" y="629" width="0.2652%" height="15" fill="rgb(228,216,12)" fg:x="2694" fg:w="16"/><text x="44.9044%" y="639.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (16 samples, 0.27%)</title><rect x="44.6544%" y="613" width="0.2652%" height="15" fill="rgb(244,228,15)" fg:x="2694" fg:w="16"/><text x="44.9044%" y="623.50"></text></g><g><title>AutoFile::write (16 samples, 0.27%)</title><rect x="44.6544%" y="597" width="0.2652%" height="15" fill="rgb(221,176,53)" fg:x="2694" fg:w="16"/><text x="44.9044%" y="607.50"></text></g><g><title>util::Xor (6 samples, 0.10%)</title><rect x="44.8202%" y="581" width="0.0995%" height="15" fill="rgb(205,94,34)" fg:x="2704" fg:w="6"/><text x="45.0702%" y="591.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="44.9030%" y="565" width="0.0166%" height="15" fill="rgb(213,110,48)" fg:x="2709" fg:w="1"/><text x="45.1530%" y="575.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="44.9030%" y="549" width="0.0166%" height="15" fill="rgb(236,142,28)" fg:x="2709" fg:w="1"/><text x="45.1530%" y="559.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="44.9196%" y="437" width="0.0166%" height="15" fill="rgb(225,135,29)" fg:x="2710" fg:w="1"/><text x="45.1696%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.9196%" y="421" width="0.0166%" height="15" fill="rgb(252,45,31)" fg:x="2710" fg:w="1"/><text x="45.1696%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.9196%" y="405" width="0.0166%" height="15" fill="rgb(211,187,50)" fg:x="2710" fg:w="1"/><text x="45.1696%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.9196%" y="389" width="0.0166%" height="15" fill="rgb(229,109,7)" fg:x="2710" fg:w="1"/><text x="45.1696%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.9196%" y="373" width="0.0166%" height="15" fill="rgb(251,131,51)" fg:x="2710" fg:w="1"/><text x="45.1696%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.9196%" y="357" width="0.0166%" height="15" fill="rgb(251,180,35)" fg:x="2710" fg:w="1"/><text x="45.1696%" y="367.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="44.9196%" y="645" width="0.0332%" height="15" fill="rgb(211,46,32)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="44.9196%" y="629" width="0.0332%" height="15" fill="rgb(248,123,17)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="44.9196%" y="613" width="0.0332%" height="15" fill="rgb(227,141,18)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="623.50"></text></g><g><title>new_do_write (2 samples, 0.03%)</title><rect x="44.9196%" y="597" width="0.0332%" height="15" fill="rgb(216,102,9)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="44.9196%" y="581" width="0.0332%" height="15" fill="rgb(253,47,13)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="591.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="44.9196%" y="565" width="0.0332%" height="15" fill="rgb(226,93,23)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.9196%" y="549" width="0.0332%" height="15" fill="rgb(247,104,17)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.9196%" y="533" width="0.0332%" height="15" fill="rgb(233,203,26)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.9196%" y="517" width="0.0332%" height="15" fill="rgb(244,98,49)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.9196%" y="501" width="0.0332%" height="15" fill="rgb(235,134,22)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="511.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="44.9196%" y="485" width="0.0332%" height="15" fill="rgb(221,70,32)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="44.9196%" y="469" width="0.0332%" height="15" fill="rgb(238,15,50)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="479.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="44.9196%" y="453" width="0.0332%" height="15" fill="rgb(215,221,48)" fg:x="2710" fg:w="2"/><text x="45.1696%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.9362%" y="437" width="0.0166%" height="15" fill="rgb(236,73,3)" fg:x="2711" fg:w="1"/><text x="45.1862%" y="447.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (5 samples, 0.08%)</title><rect x="44.9196%" y="677" width="0.0829%" height="15" fill="rgb(250,107,11)" fg:x="2710" fg:w="5"/><text x="45.1696%" y="687.50"></text></g><g><title>AutoFile::write (5 samples, 0.08%)</title><rect x="44.9196%" y="661" width="0.0829%" height="15" fill="rgb(242,39,14)" fg:x="2710" fg:w="5"/><text x="45.1696%" y="671.50"></text></g><g><title>util::Xor (3 samples, 0.05%)</title><rect x="44.9528%" y="645" width="0.0497%" height="15" fill="rgb(248,164,37)" fg:x="2712" fg:w="3"/><text x="45.2028%" y="655.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="44.9859%" y="629" width="0.0166%" height="15" fill="rgb(217,60,12)" fg:x="2714" fg:w="1"/><text x="45.2359%" y="639.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="44.9859%" y="613" width="0.0166%" height="15" fill="rgb(240,125,29)" fg:x="2714" fg:w="1"/><text x="45.2359%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (35 samples, 0.58%)</title><rect x="44.5218%" y="901" width="0.5801%" height="15" fill="rgb(208,207,28)" fg:x="2686" fg:w="35"/><text x="44.7718%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (35 samples, 0.58%)</title><rect x="44.5218%" y="885" width="0.5801%" height="15" fill="rgb(209,159,27)" fg:x="2686" fg:w="35"/><text x="44.7718%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.58%)</title><rect x="44.5218%" y="869" width="0.5801%" height="15" fill="rgb(251,176,53)" fg:x="2686" fg:w="35"/><text x="44.7718%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (35 samples, 0.58%)</title><rect x="44.5218%" y="853" width="0.5801%" height="15" fill="rgb(211,85,7)" fg:x="2686" fg:w="35"/><text x="44.7718%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (35 samples, 0.58%)</title><rect x="44.5218%" y="837" width="0.5801%" height="15" fill="rgb(216,64,54)" fg:x="2686" fg:w="35"/><text x="44.7718%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (35 samples, 0.58%)</title><rect x="44.5218%" y="821" width="0.5801%" height="15" fill="rgb(217,54,24)" fg:x="2686" fg:w="35"/><text x="44.7718%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (35 samples, 0.58%)</title><rect x="44.5218%" y="805" width="0.5801%" height="15" fill="rgb(208,206,53)" fg:x="2686" fg:w="35"/><text x="44.7718%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (11 samples, 0.18%)</title><rect x="44.9196%" y="789" width="0.1823%" height="15" fill="rgb(251,74,39)" fg:x="2710" fg:w="11"/><text x="45.1696%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="44.9196%" y="773" width="0.1823%" height="15" fill="rgb(226,47,5)" fg:x="2710" fg:w="11"/><text x="45.1696%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="44.9196%" y="757" width="0.1823%" height="15" fill="rgb(234,111,33)" fg:x="2710" fg:w="11"/><text x="45.1696%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (11 samples, 0.18%)</title><rect x="44.9196%" y="741" width="0.1823%" height="15" fill="rgb(251,14,10)" fg:x="2710" fg:w="11"/><text x="45.1696%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.18%)</title><rect x="44.9196%" y="725" width="0.1823%" height="15" fill="rgb(232,43,0)" fg:x="2710" fg:w="11"/><text x="45.1696%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.18%)</title><rect x="44.9196%" y="709" width="0.1823%" height="15" fill="rgb(222,68,43)" fg:x="2710" fg:w="11"/><text x="45.1696%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (11 samples, 0.18%)</title><rect x="44.9196%" y="693" width="0.1823%" height="15" fill="rgb(217,24,23)" fg:x="2710" fg:w="11"/><text x="45.1696%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="45.0025%" y="677" width="0.0995%" height="15" fill="rgb(229,209,14)" fg:x="2715" fg:w="6"/><text x="45.2525%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="45.0025%" y="661" width="0.0995%" height="15" fill="rgb(250,149,48)" fg:x="2715" fg:w="6"/><text x="45.2525%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (6 samples, 0.10%)</title><rect x="45.0025%" y="645" width="0.0995%" height="15" fill="rgb(210,120,37)" fg:x="2715" fg:w="6"/><text x="45.2525%" y="655.50"></text></g><g><title>AutoFile::write (6 samples, 0.10%)</title><rect x="45.0025%" y="629" width="0.0995%" height="15" fill="rgb(210,21,8)" fg:x="2715" fg:w="6"/><text x="45.2525%" y="639.50"></text></g><g><title>_IO_fwrite (6 samples, 0.10%)</title><rect x="45.0025%" y="613" width="0.0995%" height="15" fill="rgb(243,145,7)" fg:x="2715" fg:w="6"/><text x="45.2525%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (38 samples, 0.63%)</title><rect x="44.5218%" y="981" width="0.6299%" height="15" fill="rgb(238,178,32)" fg:x="2686" fg:w="38"/><text x="44.7718%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (38 samples, 0.63%)</title><rect x="44.5218%" y="965" width="0.6299%" height="15" fill="rgb(222,4,10)" fg:x="2686" fg:w="38"/><text x="44.7718%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (38 samples, 0.63%)</title><rect x="44.5218%" y="949" width="0.6299%" height="15" fill="rgb(239,7,37)" fg:x="2686" fg:w="38"/><text x="44.7718%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.63%)</title><rect x="44.5218%" y="933" width="0.6299%" height="15" fill="rgb(215,31,37)" fg:x="2686" fg:w="38"/><text x="44.7718%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (38 samples, 0.63%)</title><rect x="44.5218%" y="917" width="0.6299%" height="15" fill="rgb(224,83,33)" fg:x="2686" fg:w="38"/><text x="44.7718%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="45.1019%" y="901" width="0.0497%" height="15" fill="rgb(239,55,3)" fg:x="2721" fg:w="3"/><text x="45.3519%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="45.1019%" y="885" width="0.0497%" height="15" fill="rgb(247,92,11)" fg:x="2721" fg:w="3"/><text x="45.3519%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="45.1019%" y="869" width="0.0497%" height="15" fill="rgb(239,200,7)" fg:x="2721" fg:w="3"/><text x="45.3519%" y="879.50"></text></g><g><title>AutoFile::write (3 samples, 0.05%)</title><rect x="45.1019%" y="853" width="0.0497%" height="15" fill="rgb(227,115,8)" fg:x="2721" fg:w="3"/><text x="45.3519%" y="863.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="45.1185%" y="837" width="0.0332%" height="15" fill="rgb(215,189,27)" fg:x="2722" fg:w="2"/><text x="45.3685%" y="847.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="45.2345%" y="533" width="0.0497%" height="15" fill="rgb(251,216,39)" fg:x="2729" fg:w="3"/><text x="45.4845%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.2345%" y="517" width="0.0497%" height="15" fill="rgb(207,29,47)" fg:x="2729" fg:w="3"/><text x="45.4845%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.2345%" y="501" width="0.0497%" height="15" fill="rgb(210,71,34)" fg:x="2729" fg:w="3"/><text x="45.4845%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.2677%" y="485" width="0.0166%" height="15" fill="rgb(253,217,51)" fg:x="2731" fg:w="1"/><text x="45.5177%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.2677%" y="469" width="0.0166%" height="15" fill="rgb(222,117,46)" fg:x="2731" fg:w="1"/><text x="45.5177%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.2677%" y="453" width="0.0166%" height="15" fill="rgb(226,132,6)" fg:x="2731" fg:w="1"/><text x="45.5177%" y="463.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="45.1848%" y="709" width="0.1326%" height="15" fill="rgb(254,145,51)" fg:x="2726" fg:w="8"/><text x="45.4348%" y="719.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="45.1848%" y="693" width="0.1326%" height="15" fill="rgb(231,199,27)" fg:x="2726" fg:w="8"/><text x="45.4348%" y="703.50"></text></g><g><title>new_do_write (8 samples, 0.13%)</title><rect x="45.1848%" y="677" width="0.1326%" height="15" fill="rgb(245,158,14)" fg:x="2726" fg:w="8"/><text x="45.4348%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="45.1848%" y="661" width="0.1326%" height="15" fill="rgb(240,113,14)" fg:x="2726" fg:w="8"/><text x="45.4348%" y="671.50"></text></g><g><title>__GI___libc_write (8 samples, 0.13%)</title><rect x="45.1848%" y="645" width="0.1326%" height="15" fill="rgb(210,20,13)" fg:x="2726" fg:w="8"/><text x="45.4348%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="45.1848%" y="629" width="0.1326%" height="15" fill="rgb(241,144,13)" fg:x="2726" fg:w="8"/><text x="45.4348%" y="639.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="45.2014%" y="613" width="0.1160%" height="15" fill="rgb(235,43,34)" fg:x="2727" fg:w="7"/><text x="45.4514%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="45.2014%" y="597" width="0.1160%" height="15" fill="rgb(208,36,20)" fg:x="2727" fg:w="7"/><text x="45.4514%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="45.2345%" y="581" width="0.0829%" height="15" fill="rgb(239,204,10)" fg:x="2729" fg:w="5"/><text x="45.4845%" y="591.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="45.2345%" y="565" width="0.0829%" height="15" fill="rgb(217,84,43)" fg:x="2729" fg:w="5"/><text x="45.4845%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="45.2345%" y="549" width="0.0829%" height="15" fill="rgb(241,170,50)" fg:x="2729" fg:w="5"/><text x="45.4845%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.2843%" y="533" width="0.0332%" height="15" fill="rgb(226,205,29)" fg:x="2732" fg:w="2"/><text x="45.5343%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.2843%" y="517" width="0.0332%" height="15" fill="rgb(233,113,1)" fg:x="2732" fg:w="2"/><text x="45.5343%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="45.1517%" y="789" width="0.1823%" height="15" fill="rgb(253,98,13)" fg:x="2724" fg:w="11"/><text x="45.4017%" y="799.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.18%)</title><rect x="45.1517%" y="773" width="0.1823%" height="15" fill="rgb(211,115,12)" fg:x="2724" fg:w="11"/><text x="45.4017%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (11 samples, 0.18%)</title><rect x="45.1517%" y="757" width="0.1823%" height="15" fill="rgb(208,12,16)" fg:x="2724" fg:w="11"/><text x="45.4017%" y="767.50"></text></g><g><title>AutoFile::write (11 samples, 0.18%)</title><rect x="45.1517%" y="741" width="0.1823%" height="15" fill="rgb(237,193,54)" fg:x="2724" fg:w="11"/><text x="45.4017%" y="751.50"></text></g><g><title>_IO_fwrite (9 samples, 0.15%)</title><rect x="45.1848%" y="725" width="0.1492%" height="15" fill="rgb(243,22,42)" fg:x="2726" fg:w="9"/><text x="45.4348%" y="735.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="45.3174%" y="709" width="0.0166%" height="15" fill="rgb(233,151,36)" fg:x="2734" fg:w="1"/><text x="45.5674%" y="719.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.4334%" y="421" width="0.0166%" height="15" fill="rgb(237,57,45)" fg:x="2741" fg:w="1"/><text x="45.6834%" y="431.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.4334%" y="405" width="0.0166%" height="15" fill="rgb(221,88,17)" fg:x="2741" fg:w="1"/><text x="45.6834%" y="415.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="45.4334%" y="437" width="0.0497%" height="15" fill="rgb(230,79,15)" fg:x="2741" fg:w="3"/><text x="45.6834%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.4500%" y="421" width="0.0332%" height="15" fill="rgb(213,57,13)" fg:x="2742" fg:w="2"/><text x="45.7000%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.4500%" y="405" width="0.0332%" height="15" fill="rgb(222,116,39)" fg:x="2742" fg:w="2"/><text x="45.7000%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.4500%" y="389" width="0.0332%" height="15" fill="rgb(245,107,2)" fg:x="2742" fg:w="2"/><text x="45.7000%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.4500%" y="373" width="0.0332%" height="15" fill="rgb(238,1,10)" fg:x="2742" fg:w="2"/><text x="45.7000%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.4500%" y="357" width="0.0332%" height="15" fill="rgb(249,4,48)" fg:x="2742" fg:w="2"/><text x="45.7000%" y="367.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="45.4334%" y="453" width="0.0995%" height="15" fill="rgb(223,151,18)" fg:x="2741" fg:w="6"/><text x="45.6834%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.4832%" y="437" width="0.0497%" height="15" fill="rgb(227,65,43)" fg:x="2744" fg:w="3"/><text x="45.7332%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.4832%" y="421" width="0.0497%" height="15" fill="rgb(218,40,45)" fg:x="2744" fg:w="3"/><text x="45.7332%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.4832%" y="405" width="0.0497%" height="15" fill="rgb(252,121,31)" fg:x="2744" fg:w="3"/><text x="45.7332%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.4832%" y="389" width="0.0497%" height="15" fill="rgb(219,158,43)" fg:x="2744" fg:w="3"/><text x="45.7332%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="45.4998%" y="373" width="0.0332%" height="15" fill="rgb(231,162,42)" fg:x="2745" fg:w="2"/><text x="45.7498%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.5163%" y="357" width="0.0166%" height="15" fill="rgb(217,179,25)" fg:x="2746" fg:w="1"/><text x="45.7663%" y="367.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (10 samples, 0.17%)</title><rect x="45.3837%" y="613" width="0.1658%" height="15" fill="rgb(206,212,31)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="623.50"></text></g><g><title>new_do_write (10 samples, 0.17%)</title><rect x="45.3837%" y="597" width="0.1658%" height="15" fill="rgb(235,144,12)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (10 samples, 0.17%)</title><rect x="45.3837%" y="581" width="0.1658%" height="15" fill="rgb(213,51,10)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="591.50"></text></g><g><title>__GI___libc_write (10 samples, 0.17%)</title><rect x="45.3837%" y="565" width="0.1658%" height="15" fill="rgb(231,145,14)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="575.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="45.3837%" y="549" width="0.1658%" height="15" fill="rgb(235,15,28)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="559.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="45.3837%" y="533" width="0.1658%" height="15" fill="rgb(237,206,10)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="543.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="45.3837%" y="517" width="0.1658%" height="15" fill="rgb(236,227,27)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="527.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="45.3837%" y="501" width="0.1658%" height="15" fill="rgb(246,83,35)" fg:x="2738" fg:w="10"/><text x="45.6337%" y="511.50"></text></g><g><title>[[ext4]] (9 samples, 0.15%)</title><rect x="45.4003%" y="485" width="0.1492%" height="15" fill="rgb(220,136,24)" fg:x="2739" fg:w="9"/><text x="45.6503%" y="495.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="45.4003%" y="469" width="0.1492%" height="15" fill="rgb(217,3,25)" fg:x="2739" fg:w="9"/><text x="45.6503%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.5329%" y="453" width="0.0166%" height="15" fill="rgb(239,24,14)" fg:x="2747" fg:w="1"/><text x="45.7829%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.5329%" y="437" width="0.0166%" height="15" fill="rgb(244,16,53)" fg:x="2747" fg:w="1"/><text x="45.7829%" y="447.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.5329%" y="421" width="0.0166%" height="15" fill="rgb(208,175,44)" fg:x="2747" fg:w="1"/><text x="45.7829%" y="431.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.5329%" y="405" width="0.0166%" height="15" fill="rgb(252,18,48)" fg:x="2747" fg:w="1"/><text x="45.7829%" y="415.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.5329%" y="389" width="0.0166%" height="15" fill="rgb(234,199,32)" fg:x="2747" fg:w="1"/><text x="45.7829%" y="399.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.5329%" y="373" width="0.0166%" height="15" fill="rgb(225,77,54)" fg:x="2747" fg:w="1"/><text x="45.7829%" y="383.50"></text></g><g><title>_IO_fwrite (11 samples, 0.18%)</title><rect x="45.3837%" y="645" width="0.1823%" height="15" fill="rgb(225,42,25)" fg:x="2738" fg:w="11"/><text x="45.6337%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (11 samples, 0.18%)</title><rect x="45.3837%" y="629" width="0.1823%" height="15" fill="rgb(242,227,46)" fg:x="2738" fg:w="11"/><text x="45.6337%" y="639.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="45.5495%" y="613" width="0.0166%" height="15" fill="rgb(246,197,35)" fg:x="2748" fg:w="1"/><text x="45.7995%" y="623.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (2 samples, 0.03%)</title><rect x="45.5661%" y="645" width="0.0332%" height="15" fill="rgb(215,159,26)" fg:x="2749" fg:w="2"/><text x="45.8161%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (2 samples, 0.03%)</title><rect x="45.5661%" y="629" width="0.0332%" height="15" fill="rgb(212,194,50)" fg:x="2749" fg:w="2"/><text x="45.8161%" y="639.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (2 samples, 0.03%)</title><rect x="45.5661%" y="613" width="0.0332%" height="15" fill="rgb(246,132,1)" fg:x="2749" fg:w="2"/><text x="45.8161%" y="623.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (2 samples, 0.03%)</title><rect x="45.5661%" y="597" width="0.0332%" height="15" fill="rgb(217,71,7)" fg:x="2749" fg:w="2"/><text x="45.8161%" y="607.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (2 samples, 0.03%)</title><rect x="45.5661%" y="581" width="0.0332%" height="15" fill="rgb(252,59,32)" fg:x="2749" fg:w="2"/><text x="45.8161%" y="591.50"></text></g><g><title>AutoFile::write (19 samples, 0.31%)</title><rect x="45.3340%" y="661" width="0.3149%" height="15" fill="rgb(253,204,25)" fg:x="2735" fg:w="19"/><text x="45.5840%" y="671.50"></text></g><g><title>util::Xor (3 samples, 0.05%)</title><rect x="45.5992%" y="645" width="0.0497%" height="15" fill="rgb(232,21,16)" fg:x="2751" fg:w="3"/><text x="45.8492%" y="655.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="45.6324%" y="629" width="0.0166%" height="15" fill="rgb(248,90,29)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="639.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="45.6324%" y="613" width="0.0166%" height="15" fill="rgb(249,223,7)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="597" width="0.0166%" height="15" fill="rgb(231,119,42)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="581" width="0.0166%" height="15" fill="rgb(215,41,35)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="565" width="0.0166%" height="15" fill="rgb(220,44,45)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="549" width="0.0166%" height="15" fill="rgb(253,197,36)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="533" width="0.0166%" height="15" fill="rgb(245,225,54)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="517" width="0.0166%" height="15" fill="rgb(239,94,37)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="501" width="0.0166%" height="15" fill="rgb(242,217,10)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="485" width="0.0166%" height="15" fill="rgb(250,193,7)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="469" width="0.0166%" height="15" fill="rgb(230,104,19)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="453" width="0.0166%" height="15" fill="rgb(230,181,4)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="437" width="0.0166%" height="15" fill="rgb(216,219,49)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.6324%" y="421" width="0.0166%" height="15" fill="rgb(254,144,0)" fg:x="2753" fg:w="1"/><text x="45.8824%" y="431.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (20 samples, 0.33%)</title><rect x="45.3340%" y="677" width="0.3315%" height="15" fill="rgb(205,209,38)" fg:x="2735" fg:w="20"/><text x="45.5840%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="661" width="0.0166%" height="15" fill="rgb(240,21,42)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="645" width="0.0166%" height="15" fill="rgb(241,132,3)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="629" width="0.0166%" height="15" fill="rgb(225,14,2)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="613" width="0.0166%" height="15" fill="rgb(210,141,35)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="597" width="0.0166%" height="15" fill="rgb(251,14,44)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="581" width="0.0166%" height="15" fill="rgb(247,48,18)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="565" width="0.0166%" height="15" fill="rgb(225,0,40)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="549" width="0.0166%" height="15" fill="rgb(221,31,33)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="559.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="533" width="0.0166%" height="15" fill="rgb(237,42,40)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="517" width="0.0166%" height="15" fill="rgb(233,51,29)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="527.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="45.6489%" y="501" width="0.0166%" height="15" fill="rgb(226,58,20)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="485" width="0.0166%" height="15" fill="rgb(208,98,7)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="469" width="0.0166%" height="15" fill="rgb(228,143,44)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="453" width="0.0166%" height="15" fill="rgb(246,55,38)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="437" width="0.0166%" height="15" fill="rgb(247,87,16)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="421" width="0.0166%" height="15" fill="rgb(234,129,42)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="405" width="0.0166%" height="15" fill="rgb(220,82,16)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="415.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="389" width="0.0166%" height="15" fill="rgb(211,88,4)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="399.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="373" width="0.0166%" height="15" fill="rgb(248,151,21)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="383.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="357" width="0.0166%" height="15" fill="rgb(238,163,6)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="341" width="0.0166%" height="15" fill="rgb(209,183,11)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="325" width="0.0166%" height="15" fill="rgb(219,37,20)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="309" width="0.0166%" height="15" fill="rgb(210,158,4)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="319.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="293" width="0.0166%" height="15" fill="rgb(221,167,53)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="303.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="277" width="0.0166%" height="15" fill="rgb(237,151,45)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="287.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="261" width="0.0166%" height="15" fill="rgb(231,39,3)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="245" width="0.0166%" height="15" fill="rgb(212,167,28)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="255.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="229" width="0.0166%" height="15" fill="rgb(232,178,8)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="239.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="45.6489%" y="213" width="0.0166%" height="15" fill="rgb(225,151,20)" fg:x="2754" fg:w="1"/><text x="45.8989%" y="223.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (41 samples, 0.68%)</title><rect x="45.1517%" y="901" width="0.6796%" height="15" fill="rgb(238,3,37)" fg:x="2724" fg:w="41"/><text x="45.4017%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (41 samples, 0.68%)</title><rect x="45.1517%" y="885" width="0.6796%" height="15" fill="rgb(251,147,42)" fg:x="2724" fg:w="41"/><text x="45.4017%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.68%)</title><rect x="45.1517%" y="869" width="0.6796%" height="15" fill="rgb(208,173,10)" fg:x="2724" fg:w="41"/><text x="45.4017%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.68%)</title><rect x="45.1517%" y="853" width="0.6796%" height="15" fill="rgb(246,225,4)" fg:x="2724" fg:w="41"/><text x="45.4017%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (41 samples, 0.68%)</title><rect x="45.1517%" y="837" width="0.6796%" height="15" fill="rgb(248,102,6)" fg:x="2724" fg:w="41"/><text x="45.4017%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (41 samples, 0.68%)</title><rect x="45.1517%" y="821" width="0.6796%" height="15" fill="rgb(232,6,21)" fg:x="2724" fg:w="41"/><text x="45.4017%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (41 samples, 0.68%)</title><rect x="45.1517%" y="805" width="0.6796%" height="15" fill="rgb(221,179,22)" fg:x="2724" fg:w="41"/><text x="45.4017%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (30 samples, 0.50%)</title><rect x="45.3340%" y="789" width="0.4973%" height="15" fill="rgb(252,50,20)" fg:x="2735" fg:w="30"/><text x="45.5840%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.50%)</title><rect x="45.3340%" y="773" width="0.4973%" height="15" fill="rgb(222,56,38)" fg:x="2735" fg:w="30"/><text x="45.5840%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.50%)</title><rect x="45.3340%" y="757" width="0.4973%" height="15" fill="rgb(206,193,29)" fg:x="2735" fg:w="30"/><text x="45.5840%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (30 samples, 0.50%)</title><rect x="45.3340%" y="741" width="0.4973%" height="15" fill="rgb(239,192,45)" fg:x="2735" fg:w="30"/><text x="45.5840%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (30 samples, 0.50%)</title><rect x="45.3340%" y="725" width="0.4973%" height="15" fill="rgb(254,18,36)" fg:x="2735" fg:w="30"/><text x="45.5840%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (30 samples, 0.50%)</title><rect x="45.3340%" y="709" width="0.4973%" height="15" fill="rgb(221,127,11)" fg:x="2735" fg:w="30"/><text x="45.5840%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (30 samples, 0.50%)</title><rect x="45.3340%" y="693" width="0.4973%" height="15" fill="rgb(234,146,35)" fg:x="2735" fg:w="30"/><text x="45.5840%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.17%)</title><rect x="45.6655%" y="677" width="0.1658%" height="15" fill="rgb(254,201,37)" fg:x="2755" fg:w="10"/><text x="45.9155%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.17%)</title><rect x="45.6655%" y="661" width="0.1658%" height="15" fill="rgb(211,202,23)" fg:x="2755" fg:w="10"/><text x="45.9155%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (10 samples, 0.17%)</title><rect x="45.6655%" y="645" width="0.1658%" height="15" fill="rgb(237,91,2)" fg:x="2755" fg:w="10"/><text x="45.9155%" y="655.50"></text></g><g><title>AutoFile::write (10 samples, 0.17%)</title><rect x="45.6655%" y="629" width="0.1658%" height="15" fill="rgb(226,228,36)" fg:x="2755" fg:w="10"/><text x="45.9155%" y="639.50"></text></g><g><title>_IO_fwrite (10 samples, 0.17%)</title><rect x="45.6655%" y="613" width="0.1658%" height="15" fill="rgb(213,63,50)" fg:x="2755" fg:w="10"/><text x="45.9155%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="45.8147%" y="597" width="0.0166%" height="15" fill="rgb(235,194,19)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="607.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="45.8147%" y="581" width="0.0166%" height="15" fill="rgb(207,204,18)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="591.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="45.8147%" y="565" width="0.0166%" height="15" fill="rgb(248,8,7)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="575.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="45.8147%" y="549" width="0.0166%" height="15" fill="rgb(223,145,47)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="559.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="45.8147%" y="533" width="0.0166%" height="15" fill="rgb(228,84,11)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="517" width="0.0166%" height="15" fill="rgb(218,76,45)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="501" width="0.0166%" height="15" fill="rgb(223,80,15)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="485" width="0.0166%" height="15" fill="rgb(219,218,33)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="469" width="0.0166%" height="15" fill="rgb(208,51,11)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="479.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.8147%" y="453" width="0.0166%" height="15" fill="rgb(229,165,39)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="437" width="0.0166%" height="15" fill="rgb(241,100,24)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="447.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.8147%" y="421" width="0.0166%" height="15" fill="rgb(228,14,23)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="405" width="0.0166%" height="15" fill="rgb(247,116,52)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="389" width="0.0166%" height="15" fill="rgb(216,149,33)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.8147%" y="373" width="0.0166%" height="15" fill="rgb(238,142,29)" fg:x="2764" fg:w="1"/><text x="46.0647%" y="383.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (43 samples, 0.71%)</title><rect x="45.1517%" y="981" width="0.7127%" height="15" fill="rgb(224,83,40)" fg:x="2724" fg:w="43"/><text x="45.4017%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (43 samples, 0.71%)</title><rect x="45.1517%" y="965" width="0.7127%" height="15" fill="rgb(234,165,11)" fg:x="2724" fg:w="43"/><text x="45.4017%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.71%)</title><rect x="45.1517%" y="949" width="0.7127%" height="15" fill="rgb(215,96,23)" fg:x="2724" fg:w="43"/><text x="45.4017%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (43 samples, 0.71%)</title><rect x="45.1517%" y="933" width="0.7127%" height="15" fill="rgb(233,179,26)" fg:x="2724" fg:w="43"/><text x="45.4017%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (43 samples, 0.71%)</title><rect x="45.1517%" y="917" width="0.7127%" height="15" fill="rgb(225,129,33)" fg:x="2724" fg:w="43"/><text x="45.4017%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="45.8313%" y="901" width="0.0332%" height="15" fill="rgb(237,49,13)" fg:x="2765" fg:w="2"/><text x="46.0813%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="45.8313%" y="885" width="0.0332%" height="15" fill="rgb(211,3,31)" fg:x="2765" fg:w="2"/><text x="46.0813%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="45.8313%" y="869" width="0.0332%" height="15" fill="rgb(216,152,19)" fg:x="2765" fg:w="2"/><text x="46.0813%" y="879.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="45.8313%" y="853" width="0.0332%" height="15" fill="rgb(251,121,35)" fg:x="2765" fg:w="2"/><text x="46.0813%" y="863.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="45.8313%" y="837" width="0.0332%" height="15" fill="rgb(210,217,47)" fg:x="2765" fg:w="2"/><text x="46.0813%" y="847.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="45.9473%" y="613" width="0.0332%" height="15" fill="rgb(244,116,22)" fg:x="2772" fg:w="2"/><text x="46.1973%" y="623.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="45.9639%" y="597" width="0.0166%" height="15" fill="rgb(228,17,21)" fg:x="2773" fg:w="1"/><text x="46.2139%" y="607.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="45.9473%" y="629" width="0.0995%" height="15" fill="rgb(240,149,34)" fg:x="2772" fg:w="6"/><text x="46.1973%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.9804%" y="613" width="0.0663%" height="15" fill="rgb(208,125,47)" fg:x="2774" fg:w="4"/><text x="46.2304%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.9804%" y="597" width="0.0663%" height="15" fill="rgb(249,186,39)" fg:x="2774" fg:w="4"/><text x="46.2304%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.9970%" y="581" width="0.0497%" height="15" fill="rgb(240,220,33)" fg:x="2775" fg:w="3"/><text x="46.2470%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.9970%" y="565" width="0.0497%" height="15" fill="rgb(243,110,23)" fg:x="2775" fg:w="3"/><text x="46.2470%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.0136%" y="549" width="0.0332%" height="15" fill="rgb(219,163,46)" fg:x="2776" fg:w="2"/><text x="46.2636%" y="559.50"></text></g><g><title>[[ext4]] (18 samples, 0.30%)</title><rect x="45.9473%" y="645" width="0.2984%" height="15" fill="rgb(216,126,30)" fg:x="2772" fg:w="18"/><text x="46.1973%" y="655.50"></text></g><g><title>[unknown] (12 samples, 0.20%)</title><rect x="46.0467%" y="629" width="0.1989%" height="15" fill="rgb(208,139,11)" fg:x="2778" fg:w="12"/><text x="46.2967%" y="639.50"></text></g><g><title>[unknown] (12 samples, 0.20%)</title><rect x="46.0467%" y="613" width="0.1989%" height="15" fill="rgb(213,118,36)" fg:x="2778" fg:w="12"/><text x="46.2967%" y="623.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="46.0799%" y="597" width="0.1658%" height="15" fill="rgb(226,43,17)" fg:x="2780" fg:w="10"/><text x="46.3299%" y="607.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="46.0965%" y="581" width="0.1492%" height="15" fill="rgb(254,217,4)" fg:x="2781" fg:w="9"/><text x="46.3465%" y="591.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="46.1130%" y="565" width="0.1326%" height="15" fill="rgb(210,134,47)" fg:x="2782" fg:w="8"/><text x="46.3630%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.2125%" y="549" width="0.0332%" height="15" fill="rgb(237,24,49)" fg:x="2788" fg:w="2"/><text x="46.4625%" y="559.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="46.2456%" y="613" width="0.0166%" height="15" fill="rgb(251,39,46)" fg:x="2790" fg:w="1"/><text x="46.4956%" y="623.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="46.2456%" y="597" width="0.0166%" height="15" fill="rgb(251,220,3)" fg:x="2790" fg:w="1"/><text x="46.4956%" y="607.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="46.2456%" y="581" width="0.0166%" height="15" fill="rgb(228,105,12)" fg:x="2790" fg:w="1"/><text x="46.4956%" y="591.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (25 samples, 0.41%)</title><rect x="45.8810%" y="805" width="0.4144%" height="15" fill="rgb(215,196,1)" fg:x="2768" fg:w="25"/><text x="46.1310%" y="815.50"></text></g><g><title>new_do_write (25 samples, 0.41%)</title><rect x="45.8810%" y="789" width="0.4144%" height="15" fill="rgb(214,33,39)" fg:x="2768" fg:w="25"/><text x="46.1310%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (25 samples, 0.41%)</title><rect x="45.8810%" y="773" width="0.4144%" height="15" fill="rgb(220,19,52)" fg:x="2768" fg:w="25"/><text x="46.1310%" y="783.50"></text></g><g><title>__GI___libc_write (24 samples, 0.40%)</title><rect x="45.8976%" y="757" width="0.3978%" height="15" fill="rgb(221,78,38)" fg:x="2769" fg:w="24"/><text x="46.1476%" y="767.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="45.8976%" y="741" width="0.3978%" height="15" fill="rgb(253,30,16)" fg:x="2769" fg:w="24"/><text x="46.1476%" y="751.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="45.8976%" y="725" width="0.3978%" height="15" fill="rgb(242,65,0)" fg:x="2769" fg:w="24"/><text x="46.1476%" y="735.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="45.8976%" y="709" width="0.3978%" height="15" fill="rgb(235,201,12)" fg:x="2769" fg:w="24"/><text x="46.1476%" y="719.50"></text></g><g><title>[unknown] (23 samples, 0.38%)</title><rect x="45.9141%" y="693" width="0.3812%" height="15" fill="rgb(233,161,9)" fg:x="2770" fg:w="23"/><text x="46.1641%" y="703.50"></text></g><g><title>[[ext4]] (23 samples, 0.38%)</title><rect x="45.9141%" y="677" width="0.3812%" height="15" fill="rgb(241,207,41)" fg:x="2770" fg:w="23"/><text x="46.1641%" y="687.50"></text></g><g><title>[unknown] (22 samples, 0.36%)</title><rect x="45.9307%" y="661" width="0.3647%" height="15" fill="rgb(212,69,46)" fg:x="2771" fg:w="22"/><text x="46.1807%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.2456%" y="645" width="0.0497%" height="15" fill="rgb(239,69,45)" fg:x="2790" fg:w="3"/><text x="46.4956%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.2456%" y="629" width="0.0497%" height="15" fill="rgb(242,117,48)" fg:x="2790" fg:w="3"/><text x="46.4956%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.2622%" y="613" width="0.0332%" height="15" fill="rgb(228,41,36)" fg:x="2791" fg:w="2"/><text x="46.5122%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.2622%" y="597" width="0.0332%" height="15" fill="rgb(212,3,32)" fg:x="2791" fg:w="2"/><text x="46.5122%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.2622%" y="581" width="0.0332%" height="15" fill="rgb(233,41,49)" fg:x="2791" fg:w="2"/><text x="46.5122%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.2622%" y="565" width="0.0332%" height="15" fill="rgb(252,170,49)" fg:x="2791" fg:w="2"/><text x="46.5122%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="46.2622%" y="549" width="0.0332%" height="15" fill="rgb(229,53,26)" fg:x="2791" fg:w="2"/><text x="46.5122%" y="559.50"></text></g><g><title>_IO_fwrite (26 samples, 0.43%)</title><rect x="45.8810%" y="837" width="0.4310%" height="15" fill="rgb(217,157,12)" fg:x="2768" fg:w="26"/><text x="46.1310%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (26 samples, 0.43%)</title><rect x="45.8810%" y="821" width="0.4310%" height="15" fill="rgb(227,17,9)" fg:x="2768" fg:w="26"/><text x="46.1310%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="46.2954%" y="805" width="0.0166%" height="15" fill="rgb(218,84,12)" fg:x="2793" fg:w="1"/><text x="46.5454%" y="815.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="46.3120%" y="837" width="0.0829%" height="15" fill="rgb(212,79,24)" fg:x="2794" fg:w="5"/><text x="46.5620%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="46.3120%" y="821" width="0.0829%" height="15" fill="rgb(217,222,37)" fg:x="2794" fg:w="5"/><text x="46.5620%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="46.3120%" y="805" width="0.0829%" height="15" fill="rgb(246,208,8)" fg:x="2794" fg:w="5"/><text x="46.5620%" y="815.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (5 samples, 0.08%)</title><rect x="46.3120%" y="789" width="0.0829%" height="15" fill="rgb(244,133,10)" fg:x="2794" fg:w="5"/><text x="46.5620%" y="799.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (5 samples, 0.08%)</title><rect x="46.3120%" y="773" width="0.0829%" height="15" fill="rgb(209,219,41)" fg:x="2794" fg:w="5"/><text x="46.5620%" y="783.50"></text></g><g><title>AutoFile::write (44 samples, 0.73%)</title><rect x="45.8644%" y="853" width="0.7293%" height="15" fill="rgb(253,175,45)" fg:x="2767" fg:w="44"/><text x="46.1144%" y="863.50"></text></g><g><title>util::Xor (12 samples, 0.20%)</title><rect x="46.3948%" y="837" width="0.1989%" height="15" fill="rgb(235,100,37)" fg:x="2799" fg:w="12"/><text x="46.6448%" y="847.50"></text></g><g><title>std::operator^= (2 samples, 0.03%)</title><rect x="46.5606%" y="821" width="0.0332%" height="15" fill="rgb(225,87,19)" fg:x="2809" fg:w="2"/><text x="46.8106%" y="831.50"></text></g><g><title>std::operator^ (2 samples, 0.03%)</title><rect x="46.5606%" y="805" width="0.0332%" height="15" fill="rgb(217,152,17)" fg:x="2809" fg:w="2"/><text x="46.8106%" y="815.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (46 samples, 0.76%)</title><rect x="45.8644%" y="869" width="0.7625%" height="15" fill="rgb(235,72,13)" fg:x="2767" fg:w="46"/><text x="46.1144%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="853" width="0.0332%" height="15" fill="rgb(233,140,18)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="837" width="0.0332%" height="15" fill="rgb(207,212,28)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="821" width="0.0332%" height="15" fill="rgb(220,130,25)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="805" width="0.0332%" height="15" fill="rgb(205,55,34)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="789" width="0.0332%" height="15" fill="rgb(237,54,35)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="773" width="0.0332%" height="15" fill="rgb(208,67,23)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="757" width="0.0332%" height="15" fill="rgb(206,207,50)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="741" width="0.0332%" height="15" fill="rgb(213,211,42)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="725" width="0.0332%" height="15" fill="rgb(252,197,50)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="709" width="0.0332%" height="15" fill="rgb(251,211,41)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="719.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="46.5937%" y="693" width="0.0332%" height="15" fill="rgb(229,211,5)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="677" width="0.0332%" height="15" fill="rgb(239,36,31)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="661" width="0.0332%" height="15" fill="rgb(248,67,31)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="645" width="0.0332%" height="15" fill="rgb(249,55,44)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="629" width="0.0332%" height="15" fill="rgb(216,82,12)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="613" width="0.0332%" height="15" fill="rgb(242,174,1)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.03%)</title><rect x="46.5937%" y="597" width="0.0332%" height="15" fill="rgb(208,120,29)" fg:x="2811" fg:w="2"/><text x="46.8437%" y="607.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::empty (1 samples, 0.02%)</title><rect x="46.6103%" y="581" width="0.0166%" height="15" fill="rgb(221,105,43)" fg:x="2812" fg:w="1"/><text x="46.8603%" y="591.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::end (1 samples, 0.02%)</title><rect x="46.6103%" y="565" width="0.0166%" height="15" fill="rgb(234,124,22)" fg:x="2812" fg:w="1"/><text x="46.8603%" y="575.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="46.6103%" y="549" width="0.0166%" height="15" fill="rgb(212,23,30)" fg:x="2812" fg:w="1"/><text x="46.8603%" y="559.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (49 samples, 0.81%)</title><rect x="45.8644%" y="901" width="0.8122%" height="15" fill="rgb(219,122,53)" fg:x="2767" fg:w="49"/><text x="46.1144%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (49 samples, 0.81%)</title><rect x="45.8644%" y="885" width="0.8122%" height="15" fill="rgb(248,84,24)" fg:x="2767" fg:w="49"/><text x="46.1144%" y="895.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="46.6269%" y="869" width="0.0497%" height="15" fill="rgb(245,115,18)" fg:x="2813" fg:w="3"/><text x="46.8769%" y="879.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="46.6269%" y="853" width="0.0497%" height="15" fill="rgb(227,176,51)" fg:x="2813" fg:w="3"/><text x="46.8769%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="46.6269%" y="837" width="0.0497%" height="15" fill="rgb(229,63,42)" fg:x="2813" fg:w="3"/><text x="46.8769%" y="847.50"></text></g><g><title>AutoFile::write (3 samples, 0.05%)</title><rect x="46.6269%" y="821" width="0.0497%" height="15" fill="rgb(247,202,24)" fg:x="2813" fg:w="3"/><text x="46.8769%" y="831.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="46.6269%" y="805" width="0.0497%" height="15" fill="rgb(244,173,20)" fg:x="2813" fg:w="3"/><text x="46.8769%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="837" width="0.0166%" height="15" fill="rgb(242,81,47)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="821" width="0.0166%" height="15" fill="rgb(231,185,54)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="805" width="0.0166%" height="15" fill="rgb(243,55,32)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="789" width="0.0166%" height="15" fill="rgb(208,167,19)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="773" width="0.0166%" height="15" fill="rgb(231,72,35)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="757" width="0.0166%" height="15" fill="rgb(250,173,51)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="741" width="0.0166%" height="15" fill="rgb(209,5,22)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="725" width="0.0166%" height="15" fill="rgb(250,174,19)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="709" width="0.0166%" height="15" fill="rgb(217,3,49)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="693" width="0.0166%" height="15" fill="rgb(218,225,5)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="677" width="0.0166%" height="15" fill="rgb(236,89,11)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="661" width="0.0166%" height="15" fill="rgb(206,33,28)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6766%" y="645" width="0.0166%" height="15" fill="rgb(241,56,42)" fg:x="2816" fg:w="1"/><text x="46.9266%" y="655.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (53 samples, 0.88%)</title><rect x="45.8644%" y="981" width="0.8785%" height="15" fill="rgb(222,44,11)" fg:x="2767" fg:w="53"/><text x="46.1144%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (53 samples, 0.88%)</title><rect x="45.8644%" y="965" width="0.8785%" height="15" fill="rgb(234,111,20)" fg:x="2767" fg:w="53"/><text x="46.1144%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (53 samples, 0.88%)</title><rect x="45.8644%" y="949" width="0.8785%" height="15" fill="rgb(237,77,6)" fg:x="2767" fg:w="53"/><text x="46.1144%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (53 samples, 0.88%)</title><rect x="45.8644%" y="933" width="0.8785%" height="15" fill="rgb(235,111,23)" fg:x="2767" fg:w="53"/><text x="46.1144%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (53 samples, 0.88%)</title><rect x="45.8644%" y="917" width="0.8785%" height="15" fill="rgb(251,135,29)" fg:x="2767" fg:w="53"/><text x="46.1144%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="46.6766%" y="901" width="0.0663%" height="15" fill="rgb(217,57,1)" fg:x="2816" fg:w="4"/><text x="46.9266%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="46.6766%" y="885" width="0.0663%" height="15" fill="rgb(249,119,31)" fg:x="2816" fg:w="4"/><text x="46.9266%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="46.6766%" y="869" width="0.0663%" height="15" fill="rgb(233,164,33)" fg:x="2816" fg:w="4"/><text x="46.9266%" y="879.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="46.6766%" y="853" width="0.0663%" height="15" fill="rgb(250,217,43)" fg:x="2816" fg:w="4"/><text x="46.9266%" y="863.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="46.6932%" y="837" width="0.0497%" height="15" fill="rgb(232,154,50)" fg:x="2817" fg:w="3"/><text x="46.9432%" y="847.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (2 samples, 0.03%)</title><rect x="46.7429%" y="981" width="0.0332%" height="15" fill="rgb(227,190,8)" fg:x="2820" fg:w="2"/><text x="46.9929%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.7429%" y="965" width="0.0332%" height="15" fill="rgb(209,217,32)" fg:x="2820" fg:w="2"/><text x="46.9929%" y="975.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.7429%" y="949" width="0.0332%" height="15" fill="rgb(243,203,50)" fg:x="2820" fg:w="2"/><text x="46.9929%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="46.7429%" y="933" width="0.0332%" height="15" fill="rgb(232,152,27)" fg:x="2820" fg:w="2"/><text x="46.9929%" y="943.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="46.7429%" y="917" width="0.0332%" height="15" fill="rgb(240,34,29)" fg:x="2820" fg:w="2"/><text x="46.9929%" y="927.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="46.7429%" y="901" width="0.0332%" height="15" fill="rgb(215,185,52)" fg:x="2820" fg:w="2"/><text x="46.9929%" y="911.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (144 samples, 2.39%)</title><rect x="44.4223%" y="1269" width="2.3869%" height="15" fill="rgb(240,89,49)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1279.50">Au..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (144 samples, 2.39%)</title><rect x="44.4223%" y="1253" width="2.3869%" height="15" fill="rgb(225,12,52)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1263.50">vo..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (144 samples, 2.39%)</title><rect x="44.4223%" y="1237" width="2.3869%" height="15" fill="rgb(239,128,45)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1247.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (144 samples, 2.39%)</title><rect x="44.4223%" y="1221" width="2.3869%" height="15" fill="rgb(211,78,47)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1231.50">vo..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (144 samples, 2.39%)</title><rect x="44.4223%" y="1205" width="2.3869%" height="15" fill="rgb(232,31,21)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1215.50">vo..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (144 samples, 2.39%)</title><rect x="44.4223%" y="1189" width="2.3869%" height="15" fill="rgb(222,168,14)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1199.50">vo..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (144 samples, 2.39%)</title><rect x="44.4223%" y="1173" width="2.3869%" height="15" fill="rgb(209,128,24)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1183.50">vo..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (144 samples, 2.39%)</title><rect x="44.4223%" y="1157" width="2.3869%" height="15" fill="rgb(249,35,13)" fg:x="2680" fg:w="144"/><text x="44.6723%" y="1167.50">vo..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1141" width="2.2874%" height="15" fill="rgb(218,7,2)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1151.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1125" width="2.2874%" height="15" fill="rgb(238,107,27)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1135.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1109" width="2.2874%" height="15" fill="rgb(217,88,38)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1119.50">v..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1093" width="2.2874%" height="15" fill="rgb(230,207,0)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1103.50">v..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1077" width="2.2874%" height="15" fill="rgb(249,64,54)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1087.50">v..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1061" width="2.2874%" height="15" fill="rgb(231,7,11)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1071.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1045" width="2.2874%" height="15" fill="rgb(205,149,21)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1055.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1029" width="2.2874%" height="15" fill="rgb(215,126,34)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1039.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="1013" width="2.2874%" height="15" fill="rgb(241,132,45)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1023.50">v..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (138 samples, 2.29%)</title><rect x="44.5218%" y="997" width="2.2874%" height="15" fill="rgb(252,69,32)" fg:x="2686" fg:w="138"/><text x="44.7718%" y="1007.50">v..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (2 samples, 0.03%)</title><rect x="46.7761%" y="981" width="0.0332%" height="15" fill="rgb(232,204,19)" fg:x="2822" fg:w="2"/><text x="47.0261%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.7761%" y="965" width="0.0332%" height="15" fill="rgb(249,15,47)" fg:x="2822" fg:w="2"/><text x="47.0261%" y="975.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.7761%" y="949" width="0.0332%" height="15" fill="rgb(209,227,23)" fg:x="2822" fg:w="2"/><text x="47.0261%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="46.7761%" y="933" width="0.0332%" height="15" fill="rgb(248,92,24)" fg:x="2822" fg:w="2"/><text x="47.0261%" y="943.50"></text></g><g><title>AutoFile::write (2 samples, 0.03%)</title><rect x="46.7761%" y="917" width="0.0332%" height="15" fill="rgb(247,59,2)" fg:x="2822" fg:w="2"/><text x="47.0261%" y="927.50"></text></g><g><title>_IO_fwrite (2 samples, 0.03%)</title><rect x="46.7761%" y="901" width="0.0332%" height="15" fill="rgb(221,30,5)" fg:x="2822" fg:w="2"/><text x="47.0261%" y="911.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="46.7926%" y="885" width="0.0166%" height="15" fill="rgb(208,108,53)" fg:x="2823" fg:w="1"/><text x="47.0426%" y="895.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="46.7926%" y="869" width="0.0166%" height="15" fill="rgb(211,183,26)" fg:x="2823" fg:w="1"/><text x="47.0426%" y="879.50"></text></g><g><title>__fopen_internal (1 samples, 0.02%)</title><rect x="46.8092%" y="1237" width="0.0166%" height="15" fill="rgb(232,132,4)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1247.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="46.8092%" y="1221" width="0.0166%" height="15" fill="rgb(253,128,37)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1231.50"></text></g><g><title>_IO_file_open (1 samples, 0.02%)</title><rect x="46.8092%" y="1205" width="0.0166%" height="15" fill="rgb(221,58,24)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1215.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="46.8092%" y="1189" width="0.0166%" height="15" fill="rgb(230,54,45)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8092%" y="1173" width="0.0166%" height="15" fill="rgb(254,21,18)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8092%" y="1157" width="0.0166%" height="15" fill="rgb(221,108,0)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8092%" y="1141" width="0.0166%" height="15" fill="rgb(206,95,1)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8092%" y="1125" width="0.0166%" height="15" fill="rgb(237,52,5)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8092%" y="1109" width="0.0166%" height="15" fill="rgb(218,150,34)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8092%" y="1093" width="0.0166%" height="15" fill="rgb(235,194,28)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8092%" y="1077" width="0.0166%" height="15" fill="rgb(245,92,18)" fg:x="2824" fg:w="1"/><text x="47.0592%" y="1087.50"></text></g><g><title>_IO_doallocbuf (1 samples, 0.02%)</title><rect x="46.8258%" y="1205" width="0.0166%" height="15" fill="rgb(253,203,53)" fg:x="2825" fg:w="1"/><text x="47.0758%" y="1215.50"></text></g><g><title>_IO_file_doallocate (1 samples, 0.02%)</title><rect x="46.8258%" y="1189" width="0.0166%" height="15" fill="rgb(249,185,47)" fg:x="2825" fg:w="1"/><text x="47.0758%" y="1199.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="46.8258%" y="1173" width="0.0166%" height="15" fill="rgb(252,194,52)" fg:x="2825" fg:w="1"/><text x="47.0758%" y="1183.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="46.8258%" y="1157" width="0.0166%" height="15" fill="rgb(210,53,36)" fg:x="2825" fg:w="1"/><text x="47.0758%" y="1167.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="46.8258%" y="1141" width="0.0166%" height="15" fill="rgb(237,37,25)" fg:x="2825" fg:w="1"/><text x="47.0758%" y="1151.50"></text></g><g><title>node::BlockManager::OpenBlockFile (3 samples, 0.05%)</title><rect x="46.8092%" y="1269" width="0.0497%" height="15" fill="rgb(242,116,27)" fg:x="2824" fg:w="3"/><text x="47.0592%" y="1279.50"></text></g><g><title>FlatFileSeq::Open (3 samples, 0.05%)</title><rect x="46.8092%" y="1253" width="0.0497%" height="15" fill="rgb(213,185,26)" fg:x="2824" fg:w="3"/><text x="47.0592%" y="1263.50"></text></g><g><title>fseek (2 samples, 0.03%)</title><rect x="46.8258%" y="1237" width="0.0332%" height="15" fill="rgb(225,204,8)" fg:x="2825" fg:w="2"/><text x="47.0758%" y="1247.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="46.8258%" y="1221" width="0.0332%" height="15" fill="rgb(254,111,37)" fg:x="2825" fg:w="2"/><text x="47.0758%" y="1231.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="46.8424%" y="1205" width="0.0166%" height="15" fill="rgb(242,35,9)" fg:x="2826" fg:w="1"/><text x="47.0924%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.8424%" y="1189" width="0.0166%" height="15" fill="rgb(232,138,49)" fg:x="2826" fg:w="1"/><text x="47.0924%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9252%" y="773" width="0.0166%" height="15" fill="rgb(247,56,4)" fg:x="2831" fg:w="1"/><text x="47.1752%" y="783.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9252%" y="757" width="0.0166%" height="15" fill="rgb(226,179,17)" fg:x="2831" fg:w="1"/><text x="47.1752%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.9252%" y="741" width="0.0166%" height="15" fill="rgb(216,163,45)" fg:x="2831" fg:w="1"/><text x="47.1752%" y="751.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.9252%" y="725" width="0.0166%" height="15" fill="rgb(211,157,3)" fg:x="2831" fg:w="1"/><text x="47.1752%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="46.9252%" y="885" width="0.0332%" height="15" fill="rgb(234,44,20)" fg:x="2831" fg:w="2"/><text x="47.1752%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="46.9252%" y="869" width="0.0332%" height="15" fill="rgb(254,138,23)" fg:x="2831" fg:w="2"/><text x="47.1752%" y="879.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.9252%" y="853" width="0.0332%" height="15" fill="rgb(206,119,39)" fg:x="2831" fg:w="2"/><text x="47.1752%" y="863.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="46.9252%" y="837" width="0.0332%" height="15" fill="rgb(231,105,52)" fg:x="2831" fg:w="2"/><text x="47.1752%" y="847.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="46.9252%" y="821" width="0.0332%" height="15" fill="rgb(250,20,5)" fg:x="2831" fg:w="2"/><text x="47.1752%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="46.9252%" y="805" width="0.0332%" height="15" fill="rgb(215,198,30)" fg:x="2831" fg:w="2"/><text x="47.1752%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="46.9252%" y="789" width="0.0332%" height="15" fill="rgb(246,142,8)" fg:x="2831" fg:w="2"/><text x="47.1752%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="46.9418%" y="773" width="0.0166%" height="15" fill="rgb(243,26,38)" fg:x="2832" fg:w="1"/><text x="47.1918%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9418%" y="757" width="0.0166%" height="15" fill="rgb(205,133,28)" fg:x="2832" fg:w="1"/><text x="47.1918%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9418%" y="741" width="0.0166%" height="15" fill="rgb(212,34,0)" fg:x="2832" fg:w="1"/><text x="47.1918%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.9418%" y="725" width="0.0166%" height="15" fill="rgb(251,226,22)" fg:x="2832" fg:w="1"/><text x="47.1918%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9418%" y="709" width="0.0166%" height="15" fill="rgb(252,119,9)" fg:x="2832" fg:w="1"/><text x="47.1918%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9418%" y="693" width="0.0166%" height="15" fill="rgb(213,150,50)" fg:x="2832" fg:w="1"/><text x="47.1918%" y="703.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (6 samples, 0.10%)</title><rect x="46.8755%" y="965" width="0.0995%" height="15" fill="rgb(212,24,39)" fg:x="2828" fg:w="6"/><text x="47.1255%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (6 samples, 0.10%)</title><rect x="46.8755%" y="949" width="0.0995%" height="15" fill="rgb(213,46,39)" fg:x="2828" fg:w="6"/><text x="47.1255%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="46.8755%" y="933" width="0.0995%" height="15" fill="rgb(239,106,12)" fg:x="2828" fg:w="6"/><text x="47.1255%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="46.8755%" y="917" width="0.0995%" height="15" fill="rgb(249,229,21)" fg:x="2828" fg:w="6"/><text x="47.1255%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="46.8921%" y="901" width="0.0829%" height="15" fill="rgb(212,158,3)" fg:x="2829" fg:w="5"/><text x="47.1421%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="885" width="0.0166%" height="15" fill="rgb(253,26,48)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="869" width="0.0166%" height="15" fill="rgb(238,178,20)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="853" width="0.0166%" height="15" fill="rgb(208,86,15)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="837" width="0.0166%" height="15" fill="rgb(239,42,53)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="821" width="0.0166%" height="15" fill="rgb(245,226,8)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="805" width="0.0166%" height="15" fill="rgb(216,176,32)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="789" width="0.0166%" height="15" fill="rgb(231,186,21)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="773" width="0.0166%" height="15" fill="rgb(205,95,49)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="757" width="0.0166%" height="15" fill="rgb(217,145,8)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="741" width="0.0166%" height="15" fill="rgb(239,144,48)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.9584%" y="725" width="0.0166%" height="15" fill="rgb(214,189,23)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="709" width="0.0166%" height="15" fill="rgb(229,157,17)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="693" width="0.0166%" height="15" fill="rgb(230,5,48)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="677" width="0.0166%" height="15" fill="rgb(224,156,48)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="661" width="0.0166%" height="15" fill="rgb(223,14,29)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="645" width="0.0166%" height="15" fill="rgb(229,96,36)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9584%" y="629" width="0.0166%" height="15" fill="rgb(231,102,53)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="639.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.9584%" y="613" width="0.0166%" height="15" fill="rgb(210,77,38)" fg:x="2833" fg:w="1"/><text x="47.2084%" y="623.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="46.9750%" y="965" width="0.0166%" height="15" fill="rgb(235,131,6)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="949" width="0.0166%" height="15" fill="rgb(252,55,38)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="933" width="0.0166%" height="15" fill="rgb(246,38,14)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="917" width="0.0166%" height="15" fill="rgb(242,27,5)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="901" width="0.0166%" height="15" fill="rgb(228,65,35)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="911.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="885" width="0.0166%" height="15" fill="rgb(245,93,11)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="869" width="0.0166%" height="15" fill="rgb(213,1,31)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="853" width="0.0166%" height="15" fill="rgb(237,205,14)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="837" width="0.0166%" height="15" fill="rgb(232,118,45)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="821" width="0.0166%" height="15" fill="rgb(218,5,6)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="805" width="0.0166%" height="15" fill="rgb(251,87,51)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="789" width="0.0166%" height="15" fill="rgb(207,225,20)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="773" width="0.0166%" height="15" fill="rgb(222,78,54)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="783.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.9750%" y="757" width="0.0166%" height="15" fill="rgb(232,85,16)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="46.9750%" y="741" width="0.0166%" height="15" fill="rgb(244,25,33)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="751.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="46.9750%" y="725" width="0.0166%" height="15" fill="rgb(233,24,36)" fg:x="2834" fg:w="1"/><text x="47.2250%" y="735.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.9915%" y="853" width="0.0166%" height="15" fill="rgb(253,49,54)" fg:x="2835" fg:w="1"/><text x="47.2415%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.0081%" y="693" width="0.0166%" height="15" fill="rgb(245,12,22)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="677" width="0.0166%" height="15" fill="rgb(253,141,28)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="661" width="0.0166%" height="15" fill="rgb(225,207,27)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="645" width="0.0166%" height="15" fill="rgb(220,84,2)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="629" width="0.0166%" height="15" fill="rgb(224,37,37)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="613" width="0.0166%" height="15" fill="rgb(220,143,18)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="597" width="0.0166%" height="15" fill="rgb(210,88,33)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="607.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="581" width="0.0166%" height="15" fill="rgb(219,87,51)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="591.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="565" width="0.0166%" height="15" fill="rgb(211,7,35)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="575.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="549" width="0.0166%" height="15" fill="rgb(232,77,2)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="559.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="533" width="0.0166%" height="15" fill="rgb(249,94,25)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="543.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="517" width="0.0166%" height="15" fill="rgb(215,112,2)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="501" width="0.0166%" height="15" fill="rgb(226,115,48)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="511.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="485" width="0.0166%" height="15" fill="rgb(249,196,10)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="495.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="469" width="0.0166%" height="15" fill="rgb(237,109,14)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="479.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="453" width="0.0166%" height="15" fill="rgb(217,103,53)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="463.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="437" width="0.0166%" height="15" fill="rgb(244,137,9)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="447.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="421" width="0.0166%" height="15" fill="rgb(227,201,3)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="47.0081%" y="405" width="0.0166%" height="15" fill="rgb(243,94,6)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="415.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="47.0081%" y="389" width="0.0166%" height="15" fill="rgb(235,118,5)" fg:x="2836" fg:w="1"/><text x="47.2581%" y="399.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="853" width="0.0332%" height="15" fill="rgb(247,10,30)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="837" width="0.0332%" height="15" fill="rgb(205,26,28)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="821" width="0.0332%" height="15" fill="rgb(206,99,35)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="805" width="0.0332%" height="15" fill="rgb(238,130,40)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="789" width="0.0332%" height="15" fill="rgb(224,126,31)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="773" width="0.0332%" height="15" fill="rgb(254,105,17)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="757" width="0.0332%" height="15" fill="rgb(216,87,36)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="741" width="0.0332%" height="15" fill="rgb(240,21,12)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="725" width="0.0332%" height="15" fill="rgb(245,192,34)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="47.0081%" y="709" width="0.0332%" height="15" fill="rgb(226,100,49)" fg:x="2836" fg:w="2"/><text x="47.2581%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.0247%" y="693" width="0.0166%" height="15" fill="rgb(245,188,27)" fg:x="2837" fg:w="1"/><text x="47.2747%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.0247%" y="677" width="0.0166%" height="15" fill="rgb(212,170,8)" fg:x="2837" fg:w="1"/><text x="47.2747%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0247%" y="661" width="0.0166%" height="15" fill="rgb(217,113,29)" fg:x="2837" fg:w="1"/><text x="47.2747%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0247%" y="645" width="0.0166%" height="15" fill="rgb(237,30,3)" fg:x="2837" fg:w="1"/><text x="47.2747%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.0247%" y="629" width="0.0166%" height="15" fill="rgb(227,19,28)" fg:x="2837" fg:w="1"/><text x="47.2747%" y="639.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.0247%" y="613" width="0.0166%" height="15" fill="rgb(239,172,45)" fg:x="2837" fg:w="1"/><text x="47.2747%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="46.9915%" y="885" width="0.0663%" height="15" fill="rgb(254,55,39)" fg:x="2835" fg:w="4"/><text x="47.2415%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (4 samples, 0.07%)</title><rect x="46.9915%" y="869" width="0.0663%" height="15" fill="rgb(249,208,12)" fg:x="2835" fg:w="4"/><text x="47.2415%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0413%" y="853" width="0.0166%" height="15" fill="rgb(240,52,13)" fg:x="2838" fg:w="1"/><text x="47.2913%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (5 samples, 0.08%)</title><rect x="46.9915%" y="965" width="0.0829%" height="15" fill="rgb(252,149,13)" fg:x="2835" fg:w="5"/><text x="47.2415%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="46.9915%" y="949" width="0.0829%" height="15" fill="rgb(232,81,48)" fg:x="2835" fg:w="5"/><text x="47.2415%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="46.9915%" y="933" width="0.0829%" height="15" fill="rgb(222,144,2)" fg:x="2835" fg:w="5"/><text x="47.2415%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="46.9915%" y="917" width="0.0829%" height="15" fill="rgb(216,81,32)" fg:x="2835" fg:w="5"/><text x="47.2415%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="46.9915%" y="901" width="0.0829%" height="15" fill="rgb(244,78,51)" fg:x="2835" fg:w="5"/><text x="47.2415%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="885" width="0.0166%" height="15" fill="rgb(217,66,21)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="869" width="0.0166%" height="15" fill="rgb(247,101,42)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="853" width="0.0166%" height="15" fill="rgb(227,81,39)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="837" width="0.0166%" height="15" fill="rgb(220,223,44)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="821" width="0.0166%" height="15" fill="rgb(205,218,2)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="805" width="0.0166%" height="15" fill="rgb(212,207,28)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="789" width="0.0166%" height="15" fill="rgb(224,12,41)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="773" width="0.0166%" height="15" fill="rgb(216,118,12)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="757" width="0.0166%" height="15" fill="rgb(252,97,46)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="741" width="0.0166%" height="15" fill="rgb(244,206,19)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.0578%" y="725" width="0.0166%" height="15" fill="rgb(231,84,31)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="709" width="0.0166%" height="15" fill="rgb(244,133,0)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="693" width="0.0166%" height="15" fill="rgb(223,15,50)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="677" width="0.0166%" height="15" fill="rgb(250,118,49)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.0578%" y="661" width="0.0166%" height="15" fill="rgb(248,25,38)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="671.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="47.0578%" y="645" width="0.0166%" height="15" fill="rgb(215,70,14)" fg:x="2839" fg:w="1"/><text x="47.3078%" y="655.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="47.0744%" y="965" width="0.0166%" height="15" fill="rgb(215,28,15)" fg:x="2840" fg:w="1"/><text x="47.3244%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0744%" y="949" width="0.0166%" height="15" fill="rgb(243,6,28)" fg:x="2840" fg:w="1"/><text x="47.3244%" y="959.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.0744%" y="933" width="0.0166%" height="15" fill="rgb(222,130,1)" fg:x="2840" fg:w="1"/><text x="47.3244%" y="943.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="47.0744%" y="917" width="0.0166%" height="15" fill="rgb(236,166,44)" fg:x="2840" fg:w="1"/><text x="47.3244%" y="927.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="47.0744%" y="901" width="0.0166%" height="15" fill="rgb(221,108,14)" fg:x="2840" fg:w="1"/><text x="47.3244%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1125" width="0.2486%" height="15" fill="rgb(252,3,45)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1109" width="0.2486%" height="15" fill="rgb(237,68,30)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1093" width="0.2486%" height="15" fill="rgb(211,79,22)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1077" width="0.2486%" height="15" fill="rgb(252,185,21)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1061" width="0.2486%" height="15" fill="rgb(225,189,26)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1045" width="0.2486%" height="15" fill="rgb(241,30,40)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1029" width="0.2486%" height="15" fill="rgb(235,215,44)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="1013" width="0.2486%" height="15" fill="rgb(205,8,29)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="997" width="0.2486%" height="15" fill="rgb(241,137,42)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="1007.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.25%)</title><rect x="46.8589%" y="981" width="0.2486%" height="15" fill="rgb(237,155,2)" fg:x="2827" fg:w="15"/><text x="47.1089%" y="991.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="47.0910%" y="965" width="0.0166%" height="15" fill="rgb(245,29,42)" fg:x="2841" fg:w="1"/><text x="47.3410%" y="975.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (167 samples, 2.77%)</title><rect x="44.4223%" y="1285" width="2.7681%" height="15" fill="rgb(234,101,35)" fg:x="2680" fg:w="167"/><text x="44.6723%" y="1295.50">no..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1269" width="0.3315%" height="15" fill="rgb(228,64,37)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (20 samples, 0.33%)</title><rect x="46.8589%" y="1253" width="0.3315%" height="15" fill="rgb(217,214,36)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1237" width="0.3315%" height="15" fill="rgb(243,70,3)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1221" width="0.3315%" height="15" fill="rgb(253,158,52)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1205" width="0.3315%" height="15" fill="rgb(234,111,54)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1189" width="0.3315%" height="15" fill="rgb(217,70,32)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1173" width="0.3315%" height="15" fill="rgb(234,18,33)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1157" width="0.3315%" height="15" fill="rgb(234,12,49)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (20 samples, 0.33%)</title><rect x="46.8589%" y="1141" width="0.3315%" height="15" fill="rgb(236,10,21)" fg:x="2827" fg:w="20"/><text x="47.1089%" y="1151.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="47.1076%" y="1125" width="0.0829%" height="15" fill="rgb(248,182,45)" fg:x="2842" fg:w="5"/><text x="47.3576%" y="1135.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="47.1407%" y="1109" width="0.0497%" height="15" fill="rgb(217,95,36)" fg:x="2844" fg:w="3"/><text x="47.3907%" y="1119.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="47.1407%" y="1093" width="0.0497%" height="15" fill="rgb(212,110,31)" fg:x="2844" fg:w="3"/><text x="47.3907%" y="1103.50"></text></g><g><title>SizeComputer::write (3 samples, 0.05%)</title><rect x="47.1407%" y="1077" width="0.0497%" height="15" fill="rgb(206,32,53)" fg:x="2844" fg:w="3"/><text x="47.3907%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3231%" y="789" width="0.0166%" height="15" fill="rgb(246,141,37)" fg:x="2855" fg:w="1"/><text x="47.5731%" y="799.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3231%" y="773" width="0.0166%" height="15" fill="rgb(219,16,7)" fg:x="2855" fg:w="1"/><text x="47.5731%" y="783.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="47.3231%" y="757" width="0.0166%" height="15" fill="rgb(230,205,45)" fg:x="2855" fg:w="1"/><text x="47.5731%" y="767.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="47.3231%" y="741" width="0.0166%" height="15" fill="rgb(231,43,49)" fg:x="2855" fg:w="1"/><text x="47.5731%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (7 samples, 0.12%)</title><rect x="47.2402%" y="981" width="0.1160%" height="15" fill="rgb(212,106,34)" fg:x="2850" fg:w="7"/><text x="47.4902%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (7 samples, 0.12%)</title><rect x="47.2402%" y="965" width="0.1160%" height="15" fill="rgb(206,83,17)" fg:x="2850" fg:w="7"/><text x="47.4902%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="47.2402%" y="949" width="0.1160%" height="15" fill="rgb(244,154,49)" fg:x="2850" fg:w="7"/><text x="47.4902%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="47.2402%" y="933" width="0.1160%" height="15" fill="rgb(244,149,49)" fg:x="2850" fg:w="7"/><text x="47.4902%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="47.2733%" y="917" width="0.0829%" height="15" fill="rgb(227,134,18)" fg:x="2852" fg:w="5"/><text x="47.5233%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="47.3231%" y="901" width="0.0332%" height="15" fill="rgb(237,116,36)" fg:x="2855" fg:w="2"/><text x="47.5731%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="47.3231%" y="885" width="0.0332%" height="15" fill="rgb(205,129,40)" fg:x="2855" fg:w="2"/><text x="47.5731%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="47.3231%" y="869" width="0.0332%" height="15" fill="rgb(236,178,4)" fg:x="2855" fg:w="2"/><text x="47.5731%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="47.3231%" y="853" width="0.0332%" height="15" fill="rgb(251,76,53)" fg:x="2855" fg:w="2"/><text x="47.5731%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="47.3231%" y="837" width="0.0332%" height="15" fill="rgb(242,92,40)" fg:x="2855" fg:w="2"/><text x="47.5731%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="47.3231%" y="821" width="0.0332%" height="15" fill="rgb(209,45,30)" fg:x="2855" fg:w="2"/><text x="47.5731%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.03%)</title><rect x="47.3231%" y="805" width="0.0332%" height="15" fill="rgb(218,157,36)" fg:x="2855" fg:w="2"/><text x="47.5731%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="47.3396%" y="789" width="0.0166%" height="15" fill="rgb(222,186,16)" fg:x="2856" fg:w="1"/><text x="47.5896%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3396%" y="773" width="0.0166%" height="15" fill="rgb(254,72,35)" fg:x="2856" fg:w="1"/><text x="47.5896%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3396%" y="757" width="0.0166%" height="15" fill="rgb(224,25,35)" fg:x="2856" fg:w="1"/><text x="47.5896%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.3396%" y="741" width="0.0166%" height="15" fill="rgb(206,135,52)" fg:x="2856" fg:w="1"/><text x="47.5896%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3396%" y="725" width="0.0166%" height="15" fill="rgb(229,174,47)" fg:x="2856" fg:w="1"/><text x="47.5896%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3396%" y="709" width="0.0166%" height="15" fill="rgb(242,184,21)" fg:x="2856" fg:w="1"/><text x="47.5896%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="47.3396%" y="693" width="0.0166%" height="15" fill="rgb(213,22,45)" fg:x="2856" fg:w="1"/><text x="47.5896%" y="703.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.3562%" y="981" width="0.0166%" height="15" fill="rgb(237,81,54)" fg:x="2857" fg:w="1"/><text x="47.6062%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3562%" y="965" width="0.0166%" height="15" fill="rgb(248,177,18)" fg:x="2857" fg:w="1"/><text x="47.6062%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3562%" y="949" width="0.0166%" height="15" fill="rgb(254,31,16)" fg:x="2857" fg:w="1"/><text x="47.6062%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3562%" y="933" width="0.0166%" height="15" fill="rgb(235,20,31)" fg:x="2857" fg:w="1"/><text x="47.6062%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.3562%" y="917" width="0.0166%" height="15" fill="rgb(240,56,43)" fg:x="2857" fg:w="1"/><text x="47.6062%" y="927.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.3562%" y="901" width="0.0166%" height="15" fill="rgb(237,197,51)" fg:x="2857" fg:w="1"/><text x="47.6062%" y="911.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.3728%" y="901" width="0.0166%" height="15" fill="rgb(241,162,44)" fg:x="2858" fg:w="1"/><text x="47.6228%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3728%" y="885" width="0.0166%" height="15" fill="rgb(224,23,20)" fg:x="2858" fg:w="1"/><text x="47.6228%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.3894%" y="741" width="0.0166%" height="15" fill="rgb(250,109,34)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="725" width="0.0166%" height="15" fill="rgb(214,175,50)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="709" width="0.0166%" height="15" fill="rgb(213,182,5)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="693" width="0.0166%" height="15" fill="rgb(209,199,19)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="677" width="0.0166%" height="15" fill="rgb(236,224,42)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="661" width="0.0166%" height="15" fill="rgb(246,226,29)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="645" width="0.0166%" height="15" fill="rgb(227,223,11)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="655.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="629" width="0.0166%" height="15" fill="rgb(219,7,51)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="639.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="613" width="0.0166%" height="15" fill="rgb(245,167,10)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="623.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="597" width="0.0166%" height="15" fill="rgb(237,224,16)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="581" width="0.0166%" height="15" fill="rgb(226,132,13)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="565" width="0.0166%" height="15" fill="rgb(214,140,3)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="549" width="0.0166%" height="15" fill="rgb(221,177,4)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="533" width="0.0166%" height="15" fill="rgb(238,139,3)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="517" width="0.0166%" height="15" fill="rgb(216,17,39)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="501" width="0.0166%" height="15" fill="rgb(238,120,9)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="485" width="0.0166%" height="15" fill="rgb(244,92,53)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="469" width="0.0166%" height="15" fill="rgb(224,148,33)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="47.3894%" y="453" width="0.0166%" height="15" fill="rgb(243,6,36)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="463.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="47.3894%" y="437" width="0.0166%" height="15" fill="rgb(230,102,11)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="447.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="47.3894%" y="421" width="0.0166%" height="15" fill="rgb(234,148,36)" fg:x="2859" fg:w="1"/><text x="47.6394%" y="431.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="47.3728%" y="981" width="0.0497%" height="15" fill="rgb(251,153,25)" fg:x="2858" fg:w="3"/><text x="47.6228%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="47.3728%" y="965" width="0.0497%" height="15" fill="rgb(215,129,8)" fg:x="2858" fg:w="3"/><text x="47.6228%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="47.3728%" y="949" width="0.0497%" height="15" fill="rgb(224,128,35)" fg:x="2858" fg:w="3"/><text x="47.6228%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="47.3728%" y="933" width="0.0497%" height="15" fill="rgb(237,56,52)" fg:x="2858" fg:w="3"/><text x="47.6228%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="47.3728%" y="917" width="0.0497%" height="15" fill="rgb(234,213,19)" fg:x="2858" fg:w="3"/><text x="47.6228%" y="927.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="901" width="0.0332%" height="15" fill="rgb(252,82,23)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="885" width="0.0332%" height="15" fill="rgb(254,201,21)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="869" width="0.0332%" height="15" fill="rgb(250,186,11)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="853" width="0.0332%" height="15" fill="rgb(211,174,5)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="837" width="0.0332%" height="15" fill="rgb(214,121,10)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="821" width="0.0332%" height="15" fill="rgb(241,66,2)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="805" width="0.0332%" height="15" fill="rgb(220,167,19)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="789" width="0.0332%" height="15" fill="rgb(231,54,50)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="773" width="0.0332%" height="15" fill="rgb(239,217,53)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="47.3894%" y="757" width="0.0332%" height="15" fill="rgb(248,8,0)" fg:x="2859" fg:w="2"/><text x="47.6394%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="47.4059%" y="741" width="0.0166%" height="15" fill="rgb(229,118,37)" fg:x="2860" fg:w="1"/><text x="47.6559%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.4059%" y="725" width="0.0166%" height="15" fill="rgb(253,223,43)" fg:x="2860" fg:w="1"/><text x="47.6559%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="47.4059%" y="709" width="0.0166%" height="15" fill="rgb(211,77,36)" fg:x="2860" fg:w="1"/><text x="47.6559%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.4059%" y="693" width="0.0166%" height="15" fill="rgb(219,3,53)" fg:x="2860" fg:w="1"/><text x="47.6559%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.4059%" y="677" width="0.0166%" height="15" fill="rgb(244,45,42)" fg:x="2860" fg:w="1"/><text x="47.6559%" y="687.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.4059%" y="661" width="0.0166%" height="15" fill="rgb(225,95,27)" fg:x="2860" fg:w="1"/><text x="47.6559%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (15 samples, 0.25%)</title><rect x="47.1905%" y="1141" width="0.2486%" height="15" fill="rgb(207,74,8)" fg:x="2847" fg:w="15"/><text x="47.4405%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (15 samples, 0.25%)</title><rect x="47.1905%" y="1125" width="0.2486%" height="15" fill="rgb(243,63,36)" fg:x="2847" fg:w="15"/><text x="47.4405%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (15 samples, 0.25%)</title><rect x="47.1905%" y="1109" width="0.2486%" height="15" fill="rgb(211,180,12)" fg:x="2847" fg:w="15"/><text x="47.4405%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.25%)</title><rect x="47.1905%" y="1093" width="0.2486%" height="15" fill="rgb(254,166,49)" fg:x="2847" fg:w="15"/><text x="47.4405%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (15 samples, 0.25%)</title><rect x="47.1905%" y="1077" width="0.2486%" height="15" fill="rgb(205,19,0)" fg:x="2847" fg:w="15"/><text x="47.4405%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (14 samples, 0.23%)</title><rect x="47.2070%" y="1061" width="0.2321%" height="15" fill="rgb(224,172,32)" fg:x="2848" fg:w="14"/><text x="47.4570%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.23%)</title><rect x="47.2070%" y="1045" width="0.2321%" height="15" fill="rgb(254,136,30)" fg:x="2848" fg:w="14"/><text x="47.4570%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.23%)</title><rect x="47.2070%" y="1029" width="0.2321%" height="15" fill="rgb(246,19,35)" fg:x="2848" fg:w="14"/><text x="47.4570%" y="1039.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.23%)</title><rect x="47.2070%" y="1013" width="0.2321%" height="15" fill="rgb(219,24,36)" fg:x="2848" fg:w="14"/><text x="47.4570%" y="1023.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.23%)</title><rect x="47.2070%" y="997" width="0.2321%" height="15" fill="rgb(251,55,1)" fg:x="2848" fg:w="14"/><text x="47.4570%" y="1007.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="47.4225%" y="981" width="0.0166%" height="15" fill="rgb(218,117,39)" fg:x="2861" fg:w="1"/><text x="47.6725%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.4225%" y="965" width="0.0166%" height="15" fill="rgb(248,169,11)" fg:x="2861" fg:w="1"/><text x="47.6725%" y="975.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.4225%" y="949" width="0.0166%" height="15" fill="rgb(244,40,44)" fg:x="2861" fg:w="1"/><text x="47.6725%" y="959.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="47.4225%" y="933" width="0.0166%" height="15" fill="rgb(234,62,37)" fg:x="2861" fg:w="1"/><text x="47.6725%" y="943.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="47.4225%" y="917" width="0.0166%" height="15" fill="rgb(207,117,42)" fg:x="2861" fg:w="1"/><text x="47.6725%" y="927.50"></text></g><g><title>ChainstateManager::AcceptBlock (238 samples, 3.94%)</title><rect x="43.6101%" y="1317" width="3.9450%" height="15" fill="rgb(213,43,2)" fg:x="2631" fg:w="238"/><text x="43.8601%" y="1327.50">Chai..</text></g><g><title>node::BlockManager::SaveBlockToDisk (211 samples, 3.50%)</title><rect x="44.0577%" y="1301" width="3.4974%" height="15" fill="rgb(244,202,51)" fg:x="2658" fg:w="211"/><text x="44.3077%" y="1311.50">nod..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1285" width="0.3647%" height="15" fill="rgb(253,174,46)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1295.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (22 samples, 0.36%)</title><rect x="47.1905%" y="1269" width="0.3647%" height="15" fill="rgb(251,23,1)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1279.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1253" width="0.3647%" height="15" fill="rgb(253,26,1)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1263.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1237" width="0.3647%" height="15" fill="rgb(216,89,31)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1221" width="0.3647%" height="15" fill="rgb(209,109,5)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1231.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1205" width="0.3647%" height="15" fill="rgb(229,63,13)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1215.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1189" width="0.3647%" height="15" fill="rgb(238,137,54)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1199.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1173" width="0.3647%" height="15" fill="rgb(228,1,9)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (22 samples, 0.36%)</title><rect x="47.1905%" y="1157" width="0.3647%" height="15" fill="rgb(249,120,48)" fg:x="2847" fg:w="22"/><text x="47.4405%" y="1167.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="47.4391%" y="1141" width="0.1160%" height="15" fill="rgb(209,72,36)" fg:x="2862" fg:w="7"/><text x="47.6891%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="47.5054%" y="1125" width="0.0497%" height="15" fill="rgb(247,98,49)" fg:x="2866" fg:w="3"/><text x="47.7554%" y="1135.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="47.5054%" y="1109" width="0.0497%" height="15" fill="rgb(233,75,36)" fg:x="2866" fg:w="3"/><text x="47.7554%" y="1119.50"></text></g><g><title>SizeComputer::write (3 samples, 0.05%)</title><rect x="47.5054%" y="1093" width="0.0497%" height="15" fill="rgb(225,14,24)" fg:x="2866" fg:w="3"/><text x="47.7554%" y="1103.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="47.5551%" y="1301" width="0.0166%" height="15" fill="rgb(237,193,20)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1311.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="47.5551%" y="1285" width="0.0166%" height="15" fill="rgb(239,122,19)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1295.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="47.5551%" y="1269" width="0.0166%" height="15" fill="rgb(231,220,10)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1279.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="47.5551%" y="1253" width="0.0166%" height="15" fill="rgb(220,66,15)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1263.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="47.5551%" y="1237" width="0.0166%" height="15" fill="rgb(215,171,52)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1247.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="47.5551%" y="1221" width="0.0166%" height="15" fill="rgb(241,169,50)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1231.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="47.5551%" y="1205" width="0.0166%" height="15" fill="rgb(236,189,0)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1215.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="47.5551%" y="1189" width="0.0166%" height="15" fill="rgb(217,147,20)" fg:x="2869" fg:w="1"/><text x="47.8051%" y="1199.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="47.5717%" y="1285" width="0.0166%" height="15" fill="rgb(206,188,39)" fg:x="2870" fg:w="1"/><text x="47.8217%" y="1295.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.5717%" y="1269" width="0.0166%" height="15" fill="rgb(227,118,25)" fg:x="2870" fg:w="1"/><text x="47.8217%" y="1279.50"></text></g><g><title>CheckTransaction (2 samples, 0.03%)</title><rect x="47.5883%" y="1269" width="0.0332%" height="15" fill="rgb(248,171,40)" fg:x="2871" fg:w="2"/><text x="47.8383%" y="1279.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (1 samples, 0.02%)</title><rect x="47.6048%" y="1253" width="0.0166%" height="15" fill="rgb(251,90,54)" fg:x="2872" fg:w="1"/><text x="47.8548%" y="1263.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_const_iterator&lt;COutPoint&gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;&amp;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="47.6048%" y="1237" width="0.0166%" height="15" fill="rgb(234,11,46)" fg:x="2872" fg:w="1"/><text x="47.8548%" y="1247.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="47.6214%" y="1109" width="0.0166%" height="15" fill="rgb(229,134,13)" fg:x="2873" fg:w="1"/><text x="47.8714%" y="1119.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (4 samples, 0.07%)</title><rect x="47.5883%" y="1285" width="0.0663%" height="15" fill="rgb(223,129,3)" fg:x="2871" fg:w="4"/><text x="47.8383%" y="1295.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (2 samples, 0.03%)</title><rect x="47.6214%" y="1269" width="0.0332%" height="15" fill="rgb(221,124,13)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (2 samples, 0.03%)</title><rect x="47.6214%" y="1253" width="0.0332%" height="15" fill="rgb(234,3,18)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1263.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (2 samples, 0.03%)</title><rect x="47.6214%" y="1237" width="0.0332%" height="15" fill="rgb(249,199,20)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1247.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (2 samples, 0.03%)</title><rect x="47.6214%" y="1221" width="0.0332%" height="15" fill="rgb(224,134,6)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1231.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (2 samples, 0.03%)</title><rect x="47.6214%" y="1205" width="0.0332%" height="15" fill="rgb(254,83,26)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1215.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (2 samples, 0.03%)</title><rect x="47.6214%" y="1189" width="0.0332%" height="15" fill="rgb(217,88,9)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1199.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (2 samples, 0.03%)</title><rect x="47.6214%" y="1173" width="0.0332%" height="15" fill="rgb(225,73,2)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (2 samples, 0.03%)</title><rect x="47.6214%" y="1157" width="0.0332%" height="15" fill="rgb(226,44,39)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.03%)</title><rect x="47.6214%" y="1141" width="0.0332%" height="15" fill="rgb(228,53,17)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.03%)</title><rect x="47.6214%" y="1125" width="0.0332%" height="15" fill="rgb(212,27,27)" fg:x="2873" fg:w="2"/><text x="47.8714%" y="1135.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="47.6380%" y="1109" width="0.0166%" height="15" fill="rgb(241,50,6)" fg:x="2874" fg:w="1"/><text x="47.8880%" y="1119.50"></text></g><g><title>CheckTransaction (7 samples, 0.12%)</title><rect x="47.5717%" y="1301" width="0.1160%" height="15" fill="rgb(225,28,51)" fg:x="2870" fg:w="7"/><text x="47.8217%" y="1311.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (2 samples, 0.03%)</title><rect x="47.6546%" y="1285" width="0.0332%" height="15" fill="rgb(215,33,16)" fg:x="2875" fg:w="2"/><text x="47.9046%" y="1295.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (2 samples, 0.03%)</title><rect x="47.6546%" y="1269" width="0.0332%" height="15" fill="rgb(243,40,39)" fg:x="2875" fg:w="2"/><text x="47.9046%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="47.6711%" y="1253" width="0.0166%" height="15" fill="rgb(225,11,42)" fg:x="2876" fg:w="1"/><text x="47.9211%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="47.6711%" y="1237" width="0.0166%" height="15" fill="rgb(241,220,38)" fg:x="2876" fg:w="1"/><text x="47.9211%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_put_node (1 samples, 0.02%)</title><rect x="47.6711%" y="1221" width="0.0166%" height="15" fill="rgb(244,52,35)" fg:x="2876" fg:w="1"/><text x="47.9211%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="47.6711%" y="1205" width="0.0166%" height="15" fill="rgb(246,42,46)" fg:x="2876" fg:w="1"/><text x="47.9211%" y="1215.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="47.6711%" y="1189" width="0.0166%" height="15" fill="rgb(205,184,13)" fg:x="2876" fg:w="1"/><text x="47.9211%" y="1199.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="47.6711%" y="1173" width="0.0166%" height="15" fill="rgb(209,48,36)" fg:x="2876" fg:w="1"/><text x="47.9211%" y="1183.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="47.6711%" y="1157" width="0.0166%" height="15" fill="rgb(244,34,51)" fg:x="2876" fg:w="1"/><text x="47.9211%" y="1167.50"></text></g><g><title>CScript::GetSigOpCount (3 samples, 0.05%)</title><rect x="47.7706%" y="1253" width="0.0497%" height="15" fill="rgb(221,107,33)" fg:x="2882" fg:w="3"/><text x="48.0206%" y="1263.50"></text></g><g><title>CheckBlock (1 samples, 0.02%)</title><rect x="47.8203%" y="1253" width="0.0166%" height="15" fill="rgb(224,203,12)" fg:x="2885" fg:w="1"/><text x="48.0703%" y="1263.50"></text></g><g><title>CScript::GetOp (10 samples, 0.17%)</title><rect x="47.7540%" y="1269" width="0.1658%" height="15" fill="rgb(230,215,18)" fg:x="2881" fg:w="10"/><text x="48.0040%" y="1279.50"></text></g><g><title>GetScriptOp (5 samples, 0.08%)</title><rect x="47.8369%" y="1253" width="0.0829%" height="15" fill="rgb(206,185,35)" fg:x="2886" fg:w="5"/><text x="48.0869%" y="1263.50"></text></g><g><title>CScript::GetSigOpCount (14 samples, 0.23%)</title><rect x="47.7043%" y="1285" width="0.2321%" height="15" fill="rgb(228,140,34)" fg:x="2878" fg:w="14"/><text x="47.9543%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="47.9198%" y="1269" width="0.0166%" height="15" fill="rgb(208,93,13)" fg:x="2891" fg:w="1"/><text x="48.1698%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="47.9198%" y="1253" width="0.0166%" height="15" fill="rgb(221,193,39)" fg:x="2891" fg:w="1"/><text x="48.1698%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="47.9198%" y="1237" width="0.0166%" height="15" fill="rgb(241,132,34)" fg:x="2891" fg:w="1"/><text x="48.1698%" y="1247.50"></text></g><g><title>GetLegacySigOpCount (26 samples, 0.43%)</title><rect x="47.6877%" y="1301" width="0.4310%" height="15" fill="rgb(221,141,10)" fg:x="2877" fg:w="26"/><text x="47.9377%" y="1311.50"></text></g><g><title>GetScriptOp (11 samples, 0.18%)</title><rect x="47.9364%" y="1285" width="0.1823%" height="15" fill="rgb(226,90,31)" fg:x="2892" fg:w="11"/><text x="48.1864%" y="1295.50"></text></g><g><title>GetScriptOp (3 samples, 0.05%)</title><rect x="48.1187%" y="1301" width="0.0497%" height="15" fill="rgb(243,75,5)" fg:x="2903" fg:w="3"/><text x="48.3687%" y="1311.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="48.1518%" y="1285" width="0.0166%" height="15" fill="rgb(227,156,21)" fg:x="2905" fg:w="1"/><text x="48.4018%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="48.1518%" y="1269" width="0.0166%" height="15" fill="rgb(250,195,8)" fg:x="2905" fg:w="1"/><text x="48.4018%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="48.1684%" y="1301" width="0.0166%" height="15" fill="rgb(220,134,5)" fg:x="2906" fg:w="1"/><text x="48.4184%" y="1311.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2181%" y="805" width="0.0166%" height="15" fill="rgb(246,106,34)" fg:x="2909" fg:w="1"/><text x="48.4681%" y="815.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2181%" y="789" width="0.0166%" height="15" fill="rgb(205,1,4)" fg:x="2909" fg:w="1"/><text x="48.4681%" y="799.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="48.2181%" y="773" width="0.0166%" height="15" fill="rgb(224,151,29)" fg:x="2909" fg:w="1"/><text x="48.4681%" y="783.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="48.2181%" y="757" width="0.0166%" height="15" fill="rgb(251,196,0)" fg:x="2909" fg:w="1"/><text x="48.4681%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="48.2513%" y="693" width="0.0166%" height="15" fill="rgb(212,127,0)" fg:x="2911" fg:w="1"/><text x="48.5013%" y="703.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="48.2513%" y="677" width="0.0166%" height="15" fill="rgb(236,71,53)" fg:x="2911" fg:w="1"/><text x="48.5013%" y="687.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (2,148 samples, 35.60%)</title><rect x="12.6803%" y="1333" width="35.6042%" height="15" fill="rgb(227,99,0)" fg:x="765" fg:w="2148"/><text x="12.9303%" y="1343.50">ChainstateManager::ProcessNewBlock</text></g><g><title>CheckBlock (44 samples, 0.73%)</title><rect x="47.5551%" y="1317" width="0.7293%" height="15" fill="rgb(239,89,21)" fg:x="2869" fg:w="44"/><text x="47.8051%" y="1327.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1301" width="0.0995%" height="15" fill="rgb(243,122,19)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1311.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (6 samples, 0.10%)</title><rect x="48.1850%" y="1285" width="0.0995%" height="15" fill="rgb(229,192,45)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1295.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1269" width="0.0995%" height="15" fill="rgb(235,165,35)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1279.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1253" width="0.0995%" height="15" fill="rgb(253,202,0)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1237" width="0.0995%" height="15" fill="rgb(235,51,20)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1247.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1221" width="0.0995%" height="15" fill="rgb(218,95,46)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1231.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1205" width="0.0995%" height="15" fill="rgb(212,81,10)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1215.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1189" width="0.0995%" height="15" fill="rgb(240,59,0)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1173" width="0.0995%" height="15" fill="rgb(212,191,42)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1183.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1157" width="0.0995%" height="15" fill="rgb(233,140,3)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1141" width="0.0995%" height="15" fill="rgb(215,69,23)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1125" width="0.0995%" height="15" fill="rgb(240,202,20)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1109" width="0.0995%" height="15" fill="rgb(209,146,50)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1093" width="0.0995%" height="15" fill="rgb(253,102,54)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1103.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1077" width="0.0995%" height="15" fill="rgb(250,173,47)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1061" width="0.0995%" height="15" fill="rgb(232,142,7)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1045" width="0.0995%" height="15" fill="rgb(230,157,47)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1055.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1029" width="0.0995%" height="15" fill="rgb(214,177,35)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1039.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.10%)</title><rect x="48.1850%" y="1013" width="0.0995%" height="15" fill="rgb(234,119,46)" fg:x="2907" fg:w="6"/><text x="48.4350%" y="1023.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (5 samples, 0.08%)</title><rect x="48.2016%" y="997" width="0.0829%" height="15" fill="rgb(241,180,50)" fg:x="2908" fg:w="5"/><text x="48.4516%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (5 samples, 0.08%)</title><rect x="48.2016%" y="981" width="0.0829%" height="15" fill="rgb(221,54,25)" fg:x="2908" fg:w="5"/><text x="48.4516%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="48.2016%" y="965" width="0.0829%" height="15" fill="rgb(209,157,44)" fg:x="2908" fg:w="5"/><text x="48.4516%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="48.2016%" y="949" width="0.0829%" height="15" fill="rgb(246,115,41)" fg:x="2908" fg:w="5"/><text x="48.4516%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="48.2016%" y="933" width="0.0829%" height="15" fill="rgb(229,86,1)" fg:x="2908" fg:w="5"/><text x="48.4516%" y="943.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (4 samples, 0.07%)</title><rect x="48.2181%" y="917" width="0.0663%" height="15" fill="rgb(240,108,53)" fg:x="2909" fg:w="4"/><text x="48.4681%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (4 samples, 0.07%)</title><rect x="48.2181%" y="901" width="0.0663%" height="15" fill="rgb(227,134,2)" fg:x="2909" fg:w="4"/><text x="48.4681%" y="911.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.2181%" y="885" width="0.0663%" height="15" fill="rgb(213,129,25)" fg:x="2909" fg:w="4"/><text x="48.4681%" y="895.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.2181%" y="869" width="0.0663%" height="15" fill="rgb(226,35,21)" fg:x="2909" fg:w="4"/><text x="48.4681%" y="879.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="48.2181%" y="853" width="0.0663%" height="15" fill="rgb(208,129,26)" fg:x="2909" fg:w="4"/><text x="48.4681%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (4 samples, 0.07%)</title><rect x="48.2181%" y="837" width="0.0663%" height="15" fill="rgb(224,83,6)" fg:x="2909" fg:w="4"/><text x="48.4681%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (4 samples, 0.07%)</title><rect x="48.2181%" y="821" width="0.0663%" height="15" fill="rgb(227,52,39)" fg:x="2909" fg:w="4"/><text x="48.4681%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="48.2347%" y="805" width="0.0497%" height="15" fill="rgb(241,30,17)" fg:x="2910" fg:w="3"/><text x="48.4847%" y="815.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.2347%" y="789" width="0.0497%" height="15" fill="rgb(246,186,42)" fg:x="2910" fg:w="3"/><text x="48.4847%" y="799.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.2347%" y="773" width="0.0497%" height="15" fill="rgb(221,169,15)" fg:x="2910" fg:w="3"/><text x="48.4847%" y="783.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="48.2347%" y="757" width="0.0497%" height="15" fill="rgb(235,108,21)" fg:x="2910" fg:w="3"/><text x="48.4847%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="48.2347%" y="741" width="0.0497%" height="15" fill="rgb(219,148,30)" fg:x="2910" fg:w="3"/><text x="48.4847%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="48.2347%" y="725" width="0.0497%" height="15" fill="rgb(220,109,5)" fg:x="2910" fg:w="3"/><text x="48.4847%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="48.2347%" y="709" width="0.0497%" height="15" fill="rgb(213,203,48)" fg:x="2910" fg:w="3"/><text x="48.4847%" y="719.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2679%" y="693" width="0.0166%" height="15" fill="rgb(244,71,33)" fg:x="2912" fg:w="1"/><text x="48.5179%" y="703.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.2679%" y="677" width="0.0166%" height="15" fill="rgb(209,23,2)" fg:x="2912" fg:w="1"/><text x="48.5179%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="48.2679%" y="661" width="0.0166%" height="15" fill="rgb(219,97,7)" fg:x="2912" fg:w="1"/><text x="48.5179%" y="671.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="48.2679%" y="645" width="0.0166%" height="15" fill="rgb(216,161,23)" fg:x="2912" fg:w="1"/><text x="48.5179%" y="655.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.02%)</title><rect x="48.2844%" y="1301" width="0.0166%" height="15" fill="rgb(207,45,42)" fg:x="2913" fg:w="1"/><text x="48.5344%" y="1311.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.02%)</title><rect x="48.2844%" y="1285" width="0.0166%" height="15" fill="rgb(241,61,4)" fg:x="2913" fg:w="1"/><text x="48.5344%" y="1295.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="48.2844%" y="1269" width="0.0166%" height="15" fill="rgb(236,170,1)" fg:x="2913" fg:w="1"/><text x="48.5344%" y="1279.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="48.2844%" y="1253" width="0.0166%" height="15" fill="rgb(239,72,5)" fg:x="2913" fg:w="1"/><text x="48.5344%" y="1263.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="48.2844%" y="1237" width="0.0166%" height="15" fill="rgb(214,13,50)" fg:x="2913" fg:w="1"/><text x="48.5344%" y="1247.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="48.2844%" y="1221" width="0.0166%" height="15" fill="rgb(224,88,9)" fg:x="2913" fg:w="1"/><text x="48.5344%" y="1231.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (4 samples, 0.07%)</title><rect x="48.3010%" y="1301" width="0.0663%" height="15" fill="rgb(238,192,34)" fg:x="2914" fg:w="4"/><text x="48.5510%" y="1311.50"></text></g><g><title>GetBlockProof (4 samples, 0.07%)</title><rect x="48.3010%" y="1285" width="0.0663%" height="15" fill="rgb(217,203,50)" fg:x="2914" fg:w="4"/><text x="48.5510%" y="1295.50"></text></g><g><title>operator/ (4 samples, 0.07%)</title><rect x="48.3010%" y="1269" width="0.0663%" height="15" fill="rgb(241,123,32)" fg:x="2914" fg:w="4"/><text x="48.5510%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (4 samples, 0.07%)</title><rect x="48.3010%" y="1253" width="0.0663%" height="15" fill="rgb(248,151,39)" fg:x="2914" fg:w="4"/><text x="48.5510%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (4 samples, 0.07%)</title><rect x="48.3010%" y="1237" width="0.0663%" height="15" fill="rgb(208,89,6)" fg:x="2914" fg:w="4"/><text x="48.5510%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="48.3010%" y="1221" width="0.0663%" height="15" fill="rgb(254,43,26)" fg:x="2914" fg:w="4"/><text x="48.5510%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="48.3010%" y="1205" width="0.0663%" height="15" fill="rgb(216,158,13)" fg:x="2914" fg:w="4"/><text x="48.5510%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1189" width="0.0497%" height="15" fill="rgb(212,47,37)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1173" width="0.0497%" height="15" fill="rgb(254,16,10)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1157" width="0.0497%" height="15" fill="rgb(223,228,16)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1141" width="0.0497%" height="15" fill="rgb(249,108,50)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1125" width="0.0497%" height="15" fill="rgb(208,220,5)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1109" width="0.0497%" height="15" fill="rgb(217,89,48)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1093" width="0.0497%" height="15" fill="rgb(212,113,41)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1077" width="0.0497%" height="15" fill="rgb(231,127,5)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1061" width="0.0497%" height="15" fill="rgb(217,141,17)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1045" width="0.0497%" height="15" fill="rgb(245,125,54)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.3176%" y="1029" width="0.0497%" height="15" fill="rgb(248,125,3)" fg:x="2915" fg:w="3"/><text x="48.5676%" y="1039.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (1 samples, 0.02%)</title><rect x="48.3673%" y="1253" width="0.0166%" height="15" fill="rgb(236,119,51)" fg:x="2918" fg:w="1"/><text x="48.6173%" y="1263.50"></text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (7 samples, 0.12%)</title><rect x="48.2844%" y="1333" width="0.1160%" height="15" fill="rgb(239,99,8)" fg:x="2913" fg:w="7"/><text x="48.5344%" y="1343.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (7 samples, 0.12%)</title><rect x="48.2844%" y="1317" width="0.1160%" height="15" fill="rgb(224,228,4)" fg:x="2913" fg:w="7"/><text x="48.5344%" y="1327.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="48.3673%" y="1301" width="0.0332%" height="15" fill="rgb(220,131,45)" fg:x="2918" fg:w="2"/><text x="48.6173%" y="1311.50"></text></g><g><title>BCLog::Logger::LogPrintStr (2 samples, 0.03%)</title><rect x="48.3673%" y="1285" width="0.0332%" height="15" fill="rgb(215,62,5)" fg:x="2918" fg:w="2"/><text x="48.6173%" y="1295.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (2 samples, 0.03%)</title><rect x="48.3673%" y="1269" width="0.0332%" height="15" fill="rgb(253,12,24)" fg:x="2918" fg:w="2"/><text x="48.6173%" y="1279.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="48.3839%" y="1253" width="0.0166%" height="15" fill="rgb(248,120,50)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1263.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="48.3839%" y="1237" width="0.0166%" height="15" fill="rgb(245,194,10)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1247.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="48.3839%" y="1221" width="0.0166%" height="15" fill="rgb(241,149,38)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1231.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="48.3839%" y="1205" width="0.0166%" height="15" fill="rgb(219,215,7)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1215.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="48.3839%" y="1189" width="0.0166%" height="15" fill="rgb(208,120,31)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1199.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="48.3839%" y="1173" width="0.0166%" height="15" fill="rgb(244,30,8)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3839%" y="1157" width="0.0166%" height="15" fill="rgb(238,35,44)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3839%" y="1141" width="0.0166%" height="15" fill="rgb(243,218,37)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3839%" y="1125" width="0.0166%" height="15" fill="rgb(218,169,10)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.3839%" y="1109" width="0.0166%" height="15" fill="rgb(221,144,10)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="48.3839%" y="1093" width="0.0166%" height="15" fill="rgb(226,41,38)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="48.3839%" y="1077" width="0.0166%" height="15" fill="rgb(228,3,1)" fg:x="2919" fg:w="1"/><text x="48.6339%" y="1087.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="48.4005%" y="1125" width="0.0166%" height="15" fill="rgb(209,129,12)" fg:x="2920" fg:w="1"/><text x="48.6505%" y="1135.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="48.4005%" y="1109" width="0.0166%" height="15" fill="rgb(213,136,33)" fg:x="2920" fg:w="1"/><text x="48.6505%" y="1119.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::reserve (2 samples, 0.03%)</title><rect x="48.4170%" y="1125" width="0.0332%" height="15" fill="rgb(209,181,29)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (2 samples, 0.03%)</title><rect x="48.4170%" y="1109" width="0.0332%" height="15" fill="rgb(234,173,18)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (2 samples, 0.03%)</title><rect x="48.4170%" y="1093" width="0.0332%" height="15" fill="rgb(227,73,47)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="48.4170%" y="1077" width="0.0332%" height="15" fill="rgb(234,9,34)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1087.50"></text></g><g><title>std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="48.4170%" y="1061" width="0.0332%" height="15" fill="rgb(235,172,15)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="48.4170%" y="1045" width="0.0332%" height="15" fill="rgb(245,61,2)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1055.50"></text></g><g><title>operator new (2 samples, 0.03%)</title><rect x="48.4170%" y="1029" width="0.0332%" height="15" fill="rgb(238,39,47)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1039.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="48.4170%" y="1013" width="0.0332%" height="15" fill="rgb(234,37,24)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1023.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="48.4170%" y="997" width="0.0332%" height="15" fill="rgb(248,223,24)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="1007.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="48.4170%" y="981" width="0.0332%" height="15" fill="rgb(223,12,15)" fg:x="2921" fg:w="2"/><text x="48.6670%" y="991.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="48.4336%" y="965" width="0.0166%" height="15" fill="rgb(249,6,3)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="949" width="0.0166%" height="15" fill="rgb(237,105,33)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="933" width="0.0166%" height="15" fill="rgb(252,208,35)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="917" width="0.0166%" height="15" fill="rgb(215,181,35)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="901" width="0.0166%" height="15" fill="rgb(246,212,3)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="885" width="0.0166%" height="15" fill="rgb(247,156,24)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="869" width="0.0166%" height="15" fill="rgb(248,9,31)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="879.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="48.4336%" y="853" width="0.0166%" height="15" fill="rgb(234,26,45)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="837" width="0.0166%" height="15" fill="rgb(249,11,32)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="821" width="0.0166%" height="15" fill="rgb(249,162,33)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="805" width="0.0166%" height="15" fill="rgb(232,4,32)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.4336%" y="789" width="0.0166%" height="15" fill="rgb(212,5,45)" fg:x="2922" fg:w="1"/><text x="48.6836%" y="799.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="48.4502%" y="1093" width="0.0166%" height="15" fill="rgb(227,95,13)" fg:x="2923" fg:w="1"/><text x="48.7002%" y="1103.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="48.4502%" y="1077" width="0.0166%" height="15" fill="rgb(223,205,10)" fg:x="2923" fg:w="1"/><text x="48.7002%" y="1087.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="48.4502%" y="1061" width="0.0166%" height="15" fill="rgb(222,178,8)" fg:x="2923" fg:w="1"/><text x="48.7002%" y="1071.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="48.4502%" y="1109" width="0.0332%" height="15" fill="rgb(216,13,22)" fg:x="2923" fg:w="2"/><text x="48.7002%" y="1119.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="48.4668%" y="1093" width="0.0166%" height="15" fill="rgb(240,167,12)" fg:x="2924" fg:w="1"/><text x="48.7168%" y="1103.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="48.4668%" y="1077" width="0.0166%" height="15" fill="rgb(235,68,35)" fg:x="2924" fg:w="1"/><text x="48.7168%" y="1087.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (2 samples, 0.03%)</title><rect x="48.4833%" y="1109" width="0.0332%" height="15" fill="rgb(253,40,27)" fg:x="2925" fg:w="2"/><text x="48.7333%" y="1119.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.5165%" y="1109" width="0.0166%" height="15" fill="rgb(214,19,28)" fg:x="2927" fg:w="1"/><text x="48.7665%" y="1119.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.03%)</title><rect x="48.5331%" y="1109" width="0.0332%" height="15" fill="rgb(210,167,45)" fg:x="2928" fg:w="2"/><text x="48.7831%" y="1119.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="48.5496%" y="1093" width="0.0166%" height="15" fill="rgb(232,97,40)" fg:x="2929" fg:w="1"/><text x="48.7996%" y="1103.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="48.5496%" y="1077" width="0.0166%" height="15" fill="rgb(250,35,23)" fg:x="2929" fg:w="1"/><text x="48.7996%" y="1087.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="48.5496%" y="1061" width="0.0166%" height="15" fill="rgb(248,47,53)" fg:x="2929" fg:w="1"/><text x="48.7996%" y="1071.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.6159%" y="853" width="0.0166%" height="15" fill="rgb(226,58,50)" fg:x="2933" fg:w="1"/><text x="48.8659%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::operator= (1 samples, 0.02%)</title><rect x="48.6159%" y="837" width="0.0166%" height="15" fill="rgb(217,105,26)" fg:x="2933" fg:w="1"/><text x="48.8659%" y="847.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.02%)</title><rect x="48.6159%" y="821" width="0.0166%" height="15" fill="rgb(208,64,1)" fg:x="2933" fg:w="1"/><text x="48.8659%" y="831.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::swap (1 samples, 0.02%)</title><rect x="48.6159%" y="805" width="0.0166%" height="15" fill="rgb(214,80,1)" fg:x="2933" fg:w="1"/><text x="48.8659%" y="815.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (1 samples, 0.02%)</title><rect x="48.6159%" y="789" width="0.0166%" height="15" fill="rgb(206,175,26)" fg:x="2933" fg:w="1"/><text x="48.8659%" y="799.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="48.6325%" y="741" width="0.0166%" height="15" fill="rgb(235,156,37)" fg:x="2934" fg:w="1"/><text x="48.8825%" y="751.50"></text></g><g><title>__lll_lock_wake_private (5 samples, 0.08%)</title><rect x="48.6657%" y="709" width="0.0829%" height="15" fill="rgb(213,100,9)" fg:x="2936" fg:w="5"/><text x="48.9157%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="48.6657%" y="693" width="0.0829%" height="15" fill="rgb(241,15,13)" fg:x="2936" fg:w="5"/><text x="48.9157%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="48.6657%" y="677" width="0.0829%" height="15" fill="rgb(205,97,43)" fg:x="2936" fg:w="5"/><text x="48.9157%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="48.6657%" y="661" width="0.0829%" height="15" fill="rgb(216,106,32)" fg:x="2936" fg:w="5"/><text x="48.9157%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="48.6657%" y="645" width="0.0829%" height="15" fill="rgb(226,200,8)" fg:x="2936" fg:w="5"/><text x="48.9157%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="48.6657%" y="629" width="0.0829%" height="15" fill="rgb(244,54,29)" fg:x="2936" fg:w="5"/><text x="48.9157%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.6988%" y="613" width="0.0497%" height="15" fill="rgb(252,169,12)" fg:x="2938" fg:w="3"/><text x="48.9488%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="48.6988%" y="597" width="0.0497%" height="15" fill="rgb(231,199,11)" fg:x="2938" fg:w="3"/><text x="48.9488%" y="607.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (38 samples, 0.63%)</title><rect x="48.6325%" y="837" width="0.6299%" height="15" fill="rgb(233,191,18)" fg:x="2934" fg:w="38"/><text x="48.8825%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (38 samples, 0.63%)</title><rect x="48.6325%" y="821" width="0.6299%" height="15" fill="rgb(215,83,47)" fg:x="2934" fg:w="38"/><text x="48.8825%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (38 samples, 0.63%)</title><rect x="48.6325%" y="805" width="0.6299%" height="15" fill="rgb(251,67,19)" fg:x="2934" fg:w="38"/><text x="48.8825%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (38 samples, 0.63%)</title><rect x="48.6325%" y="789" width="0.6299%" height="15" fill="rgb(240,7,20)" fg:x="2934" fg:w="38"/><text x="48.8825%" y="799.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (38 samples, 0.63%)</title><rect x="48.6325%" y="773" width="0.6299%" height="15" fill="rgb(210,150,26)" fg:x="2934" fg:w="38"/><text x="48.8825%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (38 samples, 0.63%)</title><rect x="48.6325%" y="757" width="0.6299%" height="15" fill="rgb(228,75,42)" fg:x="2934" fg:w="38"/><text x="48.8825%" y="767.50"></text></g><g><title>operator new (37 samples, 0.61%)</title><rect x="48.6491%" y="741" width="0.6133%" height="15" fill="rgb(237,134,48)" fg:x="2935" fg:w="37"/><text x="48.8991%" y="751.50"></text></g><g><title>malloc (37 samples, 0.61%)</title><rect x="48.6491%" y="725" width="0.6133%" height="15" fill="rgb(205,80,50)" fg:x="2935" fg:w="37"/><text x="48.8991%" y="735.50"></text></g><g><title>_int_malloc (31 samples, 0.51%)</title><rect x="48.7485%" y="709" width="0.5138%" height="15" fill="rgb(217,74,48)" fg:x="2941" fg:w="31"/><text x="48.9985%" y="719.50"></text></g><g><title>malloc_consolidate (19 samples, 0.31%)</title><rect x="48.9475%" y="693" width="0.3149%" height="15" fill="rgb(205,82,50)" fg:x="2953" fg:w="19"/><text x="49.1975%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2624%" y="725" width="0.0166%" height="15" fill="rgb(228,1,33)" fg:x="2972" fg:w="1"/><text x="49.5124%" y="735.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2624%" y="709" width="0.0166%" height="15" fill="rgb(214,50,23)" fg:x="2972" fg:w="1"/><text x="49.5124%" y="719.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="49.2624%" y="693" width="0.0166%" height="15" fill="rgb(210,62,9)" fg:x="2972" fg:w="1"/><text x="49.5124%" y="703.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="49.2624%" y="677" width="0.0166%" height="15" fill="rgb(210,104,37)" fg:x="2972" fg:w="1"/><text x="49.5124%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.2624%" y="661" width="0.0166%" height="15" fill="rgb(232,104,43)" fg:x="2972" fg:w="1"/><text x="49.5124%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.2624%" y="645" width="0.0166%" height="15" fill="rgb(244,52,6)" fg:x="2972" fg:w="1"/><text x="49.5124%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="725" width="0.0166%" height="15" fill="rgb(211,174,52)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="735.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="709" width="0.0166%" height="15" fill="rgb(229,48,4)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="719.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="693" width="0.0166%" height="15" fill="rgb(205,155,16)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="703.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="677" width="0.0166%" height="15" fill="rgb(211,141,53)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="661" width="0.0166%" height="15" fill="rgb(240,148,11)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="645" width="0.0166%" height="15" fill="rgb(214,45,23)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="629" width="0.0166%" height="15" fill="rgb(248,74,26)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="639.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="613" width="0.0166%" height="15" fill="rgb(218,121,16)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="623.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2790%" y="597" width="0.0166%" height="15" fill="rgb(218,10,47)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="49.2790%" y="581" width="0.0166%" height="15" fill="rgb(227,99,14)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="591.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="49.2790%" y="565" width="0.0166%" height="15" fill="rgb(229,83,46)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="575.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.2790%" y="549" width="0.0166%" height="15" fill="rgb(228,25,1)" fg:x="2973" fg:w="1"/><text x="49.5290%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="49.2955%" y="629" width="0.0166%" height="15" fill="rgb(252,190,15)" fg:x="2974" fg:w="1"/><text x="49.5455%" y="639.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2955%" y="613" width="0.0166%" height="15" fill="rgb(213,103,51)" fg:x="2974" fg:w="1"/><text x="49.5455%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (44 samples, 0.73%)</title><rect x="48.6159%" y="917" width="0.7293%" height="15" fill="rgb(220,38,44)" fg:x="2933" fg:w="44"/><text x="48.8659%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (44 samples, 0.73%)</title><rect x="48.6159%" y="901" width="0.7293%" height="15" fill="rgb(210,45,26)" fg:x="2933" fg:w="44"/><text x="48.8659%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (44 samples, 0.73%)</title><rect x="48.6159%" y="885" width="0.7293%" height="15" fill="rgb(205,95,48)" fg:x="2933" fg:w="44"/><text x="48.8659%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.73%)</title><rect x="48.6159%" y="869" width="0.7293%" height="15" fill="rgb(225,179,37)" fg:x="2933" fg:w="44"/><text x="48.8659%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (43 samples, 0.71%)</title><rect x="48.6325%" y="853" width="0.7127%" height="15" fill="rgb(230,209,3)" fg:x="2934" fg:w="43"/><text x="48.8825%" y="863.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (5 samples, 0.08%)</title><rect x="49.2624%" y="837" width="0.0829%" height="15" fill="rgb(248,12,46)" fg:x="2972" fg:w="5"/><text x="49.5124%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (5 samples, 0.08%)</title><rect x="49.2624%" y="821" width="0.0829%" height="15" fill="rgb(234,18,0)" fg:x="2972" fg:w="5"/><text x="49.5124%" y="831.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="49.2624%" y="805" width="0.0829%" height="15" fill="rgb(238,197,14)" fg:x="2972" fg:w="5"/><text x="49.5124%" y="815.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="49.2624%" y="789" width="0.0829%" height="15" fill="rgb(251,162,48)" fg:x="2972" fg:w="5"/><text x="49.5124%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (5 samples, 0.08%)</title><rect x="49.2624%" y="773" width="0.0829%" height="15" fill="rgb(237,73,42)" fg:x="2972" fg:w="5"/><text x="49.5124%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (5 samples, 0.08%)</title><rect x="49.2624%" y="757" width="0.0829%" height="15" fill="rgb(211,108,8)" fg:x="2972" fg:w="5"/><text x="49.5124%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (5 samples, 0.08%)</title><rect x="49.2624%" y="741" width="0.0829%" height="15" fill="rgb(213,45,22)" fg:x="2972" fg:w="5"/><text x="49.5124%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (3 samples, 0.05%)</title><rect x="49.2955%" y="725" width="0.0497%" height="15" fill="rgb(252,154,5)" fg:x="2974" fg:w="3"/><text x="49.5455%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="49.2955%" y="709" width="0.0497%" height="15" fill="rgb(221,79,52)" fg:x="2974" fg:w="3"/><text x="49.5455%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="49.2955%" y="693" width="0.0497%" height="15" fill="rgb(229,220,36)" fg:x="2974" fg:w="3"/><text x="49.5455%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (3 samples, 0.05%)</title><rect x="49.2955%" y="677" width="0.0497%" height="15" fill="rgb(211,17,16)" fg:x="2974" fg:w="3"/><text x="49.5455%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="49.2955%" y="661" width="0.0497%" height="15" fill="rgb(222,55,31)" fg:x="2974" fg:w="3"/><text x="49.5455%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="49.2955%" y="645" width="0.0497%" height="15" fill="rgb(221,221,31)" fg:x="2974" fg:w="3"/><text x="49.5455%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="49.3121%" y="629" width="0.0332%" height="15" fill="rgb(227,168,26)" fg:x="2975" fg:w="2"/><text x="49.5621%" y="639.50"></text></g><g><title>CTxIn&amp; std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="49.3287%" y="613" width="0.0166%" height="15" fill="rgb(224,139,9)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="623.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::construct&lt;CTxIn&gt; (1 samples, 0.02%)</title><rect x="49.3287%" y="597" width="0.0166%" height="15" fill="rgb(254,172,0)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="607.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="49.3287%" y="581" width="0.0166%" height="15" fill="rgb(235,203,1)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="591.50"></text></g><g><title>CTxIn::CTxIn (1 samples, 0.02%)</title><rect x="49.3287%" y="565" width="0.0166%" height="15" fill="rgb(216,205,24)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="575.50"></text></g><g><title>CScriptWitness::CScriptWitness (1 samples, 0.02%)</title><rect x="49.3287%" y="549" width="0.0166%" height="15" fill="rgb(233,24,6)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="559.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="49.3287%" y="533" width="0.0166%" height="15" fill="rgb(244,110,9)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="543.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="49.3287%" y="517" width="0.0166%" height="15" fill="rgb(239,222,42)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="527.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="49.3287%" y="501" width="0.0166%" height="15" fill="rgb(218,145,13)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="511.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="49.3287%" y="485" width="0.0166%" height="15" fill="rgb(207,69,11)" fg:x="2976" fg:w="1"/><text x="49.5787%" y="495.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.3453%" y="853" width="0.0166%" height="15" fill="rgb(220,223,22)" fg:x="2977" fg:w="1"/><text x="49.5953%" y="863.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (1 samples, 0.02%)</title><rect x="49.3950%" y="837" width="0.0166%" height="15" fill="rgb(245,102,5)" fg:x="2980" fg:w="1"/><text x="49.6450%" y="847.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="49.3950%" y="821" width="0.0166%" height="15" fill="rgb(211,148,2)" fg:x="2980" fg:w="1"/><text x="49.6450%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="49.3950%" y="805" width="0.0166%" height="15" fill="rgb(241,13,44)" fg:x="2980" fg:w="1"/><text x="49.6450%" y="815.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="49.3950%" y="789" width="0.0166%" height="15" fill="rgb(219,137,21)" fg:x="2980" fg:w="1"/><text x="49.6450%" y="799.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (4 samples, 0.07%)</title><rect x="49.3618%" y="853" width="0.0663%" height="15" fill="rgb(242,206,5)" fg:x="2978" fg:w="4"/><text x="49.6118%" y="863.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (1 samples, 0.02%)</title><rect x="49.4116%" y="837" width="0.0166%" height="15" fill="rgb(217,114,22)" fg:x="2981" fg:w="1"/><text x="49.6616%" y="847.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (1 samples, 0.02%)</title><rect x="49.4116%" y="821" width="0.0166%" height="15" fill="rgb(253,206,42)" fg:x="2981" fg:w="1"/><text x="49.6616%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="49.4116%" y="805" width="0.0166%" height="15" fill="rgb(236,102,18)" fg:x="2981" fg:w="1"/><text x="49.6616%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="49.4116%" y="789" width="0.0166%" height="15" fill="rgb(208,59,49)" fg:x="2981" fg:w="1"/><text x="49.6616%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="853" width="0.0166%" height="15" fill="rgb(215,194,28)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="863.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="837" width="0.0166%" height="15" fill="rgb(243,207,11)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="821" width="0.0166%" height="15" fill="rgb(254,179,35)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="831.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="805" width="0.0166%" height="15" fill="rgb(235,97,3)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="815.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="789" width="0.0166%" height="15" fill="rgb(215,155,33)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="773" width="0.0166%" height="15" fill="rgb(223,128,12)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="757" width="0.0166%" height="15" fill="rgb(208,157,18)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="741" width="0.0166%" height="15" fill="rgb(249,70,54)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="725" width="0.0166%" height="15" fill="rgb(244,118,24)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="735.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="709" width="0.0166%" height="15" fill="rgb(211,54,0)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="719.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="693" width="0.0166%" height="15" fill="rgb(245,137,45)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="703.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="677" width="0.0166%" height="15" fill="rgb(232,154,31)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="661" width="0.0166%" height="15" fill="rgb(253,6,39)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="645" width="0.0166%" height="15" fill="rgb(234,183,24)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="629" width="0.0166%" height="15" fill="rgb(252,84,40)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="639.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4281%" y="613" width="0.0166%" height="15" fill="rgb(224,65,2)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="49.4281%" y="597" width="0.0166%" height="15" fill="rgb(229,38,24)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="607.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="49.4281%" y="581" width="0.0166%" height="15" fill="rgb(218,131,50)" fg:x="2982" fg:w="1"/><text x="49.6781%" y="591.50"></text></g><g><title>__lll_lock_wake_private (6 samples, 0.10%)</title><rect x="49.4613%" y="709" width="0.0995%" height="15" fill="rgb(233,106,18)" fg:x="2984" fg:w="6"/><text x="49.7113%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="49.4613%" y="693" width="0.0995%" height="15" fill="rgb(220,216,11)" fg:x="2984" fg:w="6"/><text x="49.7113%" y="703.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="49.4613%" y="677" width="0.0995%" height="15" fill="rgb(251,100,45)" fg:x="2984" fg:w="6"/><text x="49.7113%" y="687.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="49.4613%" y="661" width="0.0995%" height="15" fill="rgb(235,143,32)" fg:x="2984" fg:w="6"/><text x="49.7113%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="49.4779%" y="645" width="0.0829%" height="15" fill="rgb(248,124,34)" fg:x="2985" fg:w="5"/><text x="49.7279%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="49.4779%" y="629" width="0.0829%" height="15" fill="rgb(225,221,4)" fg:x="2985" fg:w="5"/><text x="49.7279%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="49.4944%" y="613" width="0.0663%" height="15" fill="rgb(242,27,43)" fg:x="2986" fg:w="4"/><text x="49.7444%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="49.4944%" y="597" width="0.0663%" height="15" fill="rgb(227,54,8)" fg:x="2986" fg:w="4"/><text x="49.7444%" y="607.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (31 samples, 0.51%)</title><rect x="49.4447%" y="837" width="0.5138%" height="15" fill="rgb(253,139,49)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (31 samples, 0.51%)</title><rect x="49.4447%" y="821" width="0.5138%" height="15" fill="rgb(231,26,43)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (31 samples, 0.51%)</title><rect x="49.4447%" y="805" width="0.5138%" height="15" fill="rgb(207,121,39)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (31 samples, 0.51%)</title><rect x="49.4447%" y="789" width="0.5138%" height="15" fill="rgb(223,101,35)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="799.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (31 samples, 0.51%)</title><rect x="49.4447%" y="773" width="0.5138%" height="15" fill="rgb(232,87,23)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (31 samples, 0.51%)</title><rect x="49.4447%" y="757" width="0.5138%" height="15" fill="rgb(225,180,29)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="767.50"></text></g><g><title>operator new (31 samples, 0.51%)</title><rect x="49.4447%" y="741" width="0.5138%" height="15" fill="rgb(225,25,17)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="751.50"></text></g><g><title>malloc (31 samples, 0.51%)</title><rect x="49.4447%" y="725" width="0.5138%" height="15" fill="rgb(223,8,52)" fg:x="2983" fg:w="31"/><text x="49.6947%" y="735.50"></text></g><g><title>_int_malloc (24 samples, 0.40%)</title><rect x="49.5607%" y="709" width="0.3978%" height="15" fill="rgb(246,42,21)" fg:x="2990" fg:w="24"/><text x="49.8107%" y="719.50"></text></g><g><title>malloc_consolidate (10 samples, 0.17%)</title><rect x="49.7928%" y="693" width="0.1658%" height="15" fill="rgb(205,64,43)" fg:x="3004" fg:w="10"/><text x="50.0428%" y="703.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.9586%" y="837" width="0.0166%" height="15" fill="rgb(221,160,13)" fg:x="3014" fg:w="1"/><text x="50.2086%" y="847.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="49.9751%" y="837" width="0.0166%" height="15" fill="rgb(239,58,35)" fg:x="3015" fg:w="1"/><text x="50.2251%" y="847.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp; AsBase&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="49.9917%" y="661" width="0.0166%" height="15" fill="rgb(251,26,40)" fg:x="3016" fg:w="1"/><text x="50.2417%" y="671.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="50.0083%" y="629" width="0.0332%" height="15" fill="rgb(247,0,4)" fg:x="3017" fg:w="2"/><text x="50.2583%" y="639.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0249%" y="613" width="0.0166%" height="15" fill="rgb(218,130,10)" fg:x="3018" fg:w="1"/><text x="50.2749%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="50.0249%" y="597" width="0.0166%" height="15" fill="rgb(239,32,7)" fg:x="3018" fg:w="1"/><text x="50.2749%" y="607.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="50.0249%" y="581" width="0.0166%" height="15" fill="rgb(210,192,24)" fg:x="3018" fg:w="1"/><text x="50.2749%" y="591.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.0249%" y="565" width="0.0166%" height="15" fill="rgb(226,212,17)" fg:x="3018" fg:w="1"/><text x="50.2749%" y="575.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="50.0912%" y="613" width="0.0166%" height="15" fill="rgb(219,201,28)" fg:x="3022" fg:w="1"/><text x="50.3412%" y="623.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="50.0912%" y="597" width="0.0166%" height="15" fill="rgb(235,207,41)" fg:x="3022" fg:w="1"/><text x="50.3412%" y="607.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="50.0912%" y="581" width="0.0166%" height="15" fill="rgb(241,95,54)" fg:x="3022" fg:w="1"/><text x="50.3412%" y="591.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="50.1409%" y="549" width="0.0166%" height="15" fill="rgb(248,12,23)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.1409%" y="533" width="0.0166%" height="15" fill="rgb(228,173,4)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.1409%" y="517" width="0.0166%" height="15" fill="rgb(254,99,5)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.1409%" y="501" width="0.0166%" height="15" fill="rgb(212,184,17)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.1409%" y="485" width="0.0166%" height="15" fill="rgb(252,174,1)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.1409%" y="469" width="0.0166%" height="15" fill="rgb(241,118,51)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.1409%" y="453" width="0.0166%" height="15" fill="rgb(227,94,47)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.1409%" y="437" width="0.0166%" height="15" fill="rgb(229,104,2)" fg:x="3025" fg:w="1"/><text x="50.3909%" y="447.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.12%)</title><rect x="50.1575%" y="549" width="0.1160%" height="15" fill="rgb(219,28,31)" fg:x="3026" fg:w="7"/><text x="50.4075%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.1575%" y="533" width="0.1160%" height="15" fill="rgb(233,109,36)" fg:x="3026" fg:w="7"/><text x="50.4075%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.1575%" y="517" width="0.1160%" height="15" fill="rgb(246,88,11)" fg:x="3026" fg:w="7"/><text x="50.4075%" y="527.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.1575%" y="501" width="0.1160%" height="15" fill="rgb(209,212,17)" fg:x="3026" fg:w="7"/><text x="50.4075%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.1575%" y="485" width="0.1160%" height="15" fill="rgb(243,59,29)" fg:x="3026" fg:w="7"/><text x="50.4075%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.1575%" y="469" width="0.1160%" height="15" fill="rgb(244,205,48)" fg:x="3026" fg:w="7"/><text x="50.4075%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="50.1740%" y="453" width="0.0995%" height="15" fill="rgb(227,30,6)" fg:x="3027" fg:w="6"/><text x="50.4240%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="50.1740%" y="437" width="0.0995%" height="15" fill="rgb(220,205,48)" fg:x="3027" fg:w="6"/><text x="50.4240%" y="447.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (19 samples, 0.31%)</title><rect x="50.0414%" y="629" width="0.3149%" height="15" fill="rgb(250,94,14)" fg:x="3019" fg:w="19"/><text x="50.2914%" y="639.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (15 samples, 0.25%)</title><rect x="50.1077%" y="613" width="0.2486%" height="15" fill="rgb(216,119,42)" fg:x="3023" fg:w="15"/><text x="50.3577%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (14 samples, 0.23%)</title><rect x="50.1243%" y="597" width="0.2321%" height="15" fill="rgb(232,155,0)" fg:x="3024" fg:w="14"/><text x="50.3743%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (14 samples, 0.23%)</title><rect x="50.1243%" y="581" width="0.2321%" height="15" fill="rgb(212,24,32)" fg:x="3024" fg:w="14"/><text x="50.3743%" y="591.50"></text></g><g><title>malloc (13 samples, 0.22%)</title><rect x="50.1409%" y="565" width="0.2155%" height="15" fill="rgb(216,69,20)" fg:x="3025" fg:w="13"/><text x="50.3909%" y="575.50"></text></g><g><title>_int_malloc (5 samples, 0.08%)</title><rect x="50.2735%" y="549" width="0.0829%" height="15" fill="rgb(229,73,31)" fg:x="3033" fg:w="5"/><text x="50.5235%" y="559.50"></text></g><g><title>CTxOut&amp; std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="50.3729%" y="613" width="0.0166%" height="15" fill="rgb(224,219,20)" fg:x="3039" fg:w="1"/><text x="50.6229%" y="623.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="50.3895%" y="613" width="0.0166%" height="15" fill="rgb(215,146,41)" fg:x="3040" fg:w="1"/><text x="50.6395%" y="623.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.4061%" y="613" width="0.0166%" height="15" fill="rgb(244,71,31)" fg:x="3041" fg:w="1"/><text x="50.6561%" y="623.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="837" width="0.4475%" height="15" fill="rgb(224,24,11)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="821" width="0.4475%" height="15" fill="rgb(229,76,15)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="831.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="805" width="0.4475%" height="15" fill="rgb(209,93,2)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="815.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="789" width="0.4475%" height="15" fill="rgb(216,200,50)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="799.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="773" width="0.4475%" height="15" fill="rgb(211,67,34)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="757" width="0.4475%" height="15" fill="rgb(225,87,47)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="741" width="0.4475%" height="15" fill="rgb(217,185,16)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="725" width="0.4475%" height="15" fill="rgb(205,0,0)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="709" width="0.4475%" height="15" fill="rgb(207,116,45)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="693" width="0.4475%" height="15" fill="rgb(221,156,26)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (27 samples, 0.45%)</title><rect x="49.9917%" y="677" width="0.4475%" height="15" fill="rgb(213,140,4)" fg:x="3016" fg:w="27"/><text x="50.2417%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (26 samples, 0.43%)</title><rect x="50.0083%" y="661" width="0.4310%" height="15" fill="rgb(231,224,15)" fg:x="3017" fg:w="26"/><text x="50.2583%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (26 samples, 0.43%)</title><rect x="50.0083%" y="645" width="0.4310%" height="15" fill="rgb(244,76,20)" fg:x="3017" fg:w="26"/><text x="50.2583%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="50.3564%" y="629" width="0.0829%" height="15" fill="rgb(238,117,7)" fg:x="3038" fg:w="5"/><text x="50.6064%" y="639.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="613" width="0.0166%" height="15" fill="rgb(235,1,10)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="597" width="0.0166%" height="15" fill="rgb(216,165,6)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="607.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="581" width="0.0166%" height="15" fill="rgb(246,91,35)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="591.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="565" width="0.0166%" height="15" fill="rgb(228,96,24)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="575.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="549" width="0.0166%" height="15" fill="rgb(254,217,53)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="559.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="533" width="0.0166%" height="15" fill="rgb(209,60,0)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="543.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="517" width="0.0166%" height="15" fill="rgb(250,93,26)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="501" width="0.0166%" height="15" fill="rgb(211,9,40)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="511.50"></text></g><g><title>unsigned long ser_readdata64&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4227%" y="485" width="0.0166%" height="15" fill="rgb(242,57,20)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="495.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="50.4227%" y="469" width="0.0166%" height="15" fill="rgb(248,85,48)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="479.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="50.4227%" y="453" width="0.0166%" height="15" fill="rgb(212,117,2)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="463.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.4227%" y="437" width="0.0166%" height="15" fill="rgb(243,19,3)" fg:x="3042" fg:w="1"/><text x="50.6727%" y="447.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4558%" y="709" width="0.0166%" height="15" fill="rgb(232,217,24)" fg:x="3044" fg:w="1"/><text x="50.7058%" y="719.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4558%" y="693" width="0.0166%" height="15" fill="rgb(224,175,40)" fg:x="3044" fg:w="1"/><text x="50.7058%" y="703.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="50.4558%" y="677" width="0.0166%" height="15" fill="rgb(212,162,32)" fg:x="3044" fg:w="1"/><text x="50.7058%" y="687.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="50.4558%" y="661" width="0.0166%" height="15" fill="rgb(215,9,4)" fg:x="3044" fg:w="1"/><text x="50.7058%" y="671.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (69 samples, 1.14%)</title><rect x="49.3453%" y="917" width="1.1437%" height="15" fill="rgb(242,42,7)" fg:x="2977" fg:w="69"/><text x="49.5953%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (69 samples, 1.14%)</title><rect x="49.3453%" y="901" width="1.1437%" height="15" fill="rgb(242,184,45)" fg:x="2977" fg:w="69"/><text x="49.5953%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (69 samples, 1.14%)</title><rect x="49.3453%" y="885" width="1.1437%" height="15" fill="rgb(228,111,51)" fg:x="2977" fg:w="69"/><text x="49.5953%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (69 samples, 1.14%)</title><rect x="49.3453%" y="869" width="1.1437%" height="15" fill="rgb(236,147,17)" fg:x="2977" fg:w="69"/><text x="49.5953%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (63 samples, 1.04%)</title><rect x="49.4447%" y="853" width="1.0443%" height="15" fill="rgb(210,75,22)" fg:x="2983" fg:w="63"/><text x="49.6947%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="50.4393%" y="837" width="0.0497%" height="15" fill="rgb(217,159,45)" fg:x="3043" fg:w="3"/><text x="50.6893%" y="847.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.03%)</title><rect x="50.4558%" y="821" width="0.0332%" height="15" fill="rgb(245,165,53)" fg:x="3044" fg:w="2"/><text x="50.7058%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (2 samples, 0.03%)</title><rect x="50.4558%" y="805" width="0.0332%" height="15" fill="rgb(251,190,50)" fg:x="3044" fg:w="2"/><text x="50.7058%" y="815.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="50.4558%" y="789" width="0.0332%" height="15" fill="rgb(208,203,29)" fg:x="3044" fg:w="2"/><text x="50.7058%" y="799.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="50.4558%" y="773" width="0.0332%" height="15" fill="rgb(207,209,35)" fg:x="3044" fg:w="2"/><text x="50.7058%" y="783.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (2 samples, 0.03%)</title><rect x="50.4558%" y="757" width="0.0332%" height="15" fill="rgb(230,144,49)" fg:x="3044" fg:w="2"/><text x="50.7058%" y="767.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.03%)</title><rect x="50.4558%" y="741" width="0.0332%" height="15" fill="rgb(229,31,6)" fg:x="3044" fg:w="2"/><text x="50.7058%" y="751.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.03%)</title><rect x="50.4558%" y="725" width="0.0332%" height="15" fill="rgb(251,129,24)" fg:x="3044" fg:w="2"/><text x="50.7058%" y="735.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="709" width="0.0166%" height="15" fill="rgb(235,105,15)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="719.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="693" width="0.0166%" height="15" fill="rgb(216,52,43)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="703.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="677" width="0.0166%" height="15" fill="rgb(238,144,41)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="687.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="661" width="0.0166%" height="15" fill="rgb(243,63,9)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="671.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="645" width="0.0166%" height="15" fill="rgb(246,208,1)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="655.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="629" width="0.0166%" height="15" fill="rgb(233,182,18)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="639.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="613" width="0.0166%" height="15" fill="rgb(242,224,8)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="623.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="597" width="0.0166%" height="15" fill="rgb(243,54,37)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="607.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="581" width="0.0166%" height="15" fill="rgb(233,192,12)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="591.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="50.4724%" y="565" width="0.0166%" height="15" fill="rgb(251,192,53)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="575.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="50.4724%" y="549" width="0.0166%" height="15" fill="rgb(246,141,26)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.4724%" y="533" width="0.0166%" height="15" fill="rgb(239,195,19)" fg:x="3045" fg:w="1"/><text x="50.7224%" y="543.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="50.4890%" y="837" width="0.0166%" height="15" fill="rgb(241,16,39)" fg:x="3046" fg:w="1"/><text x="50.7390%" y="847.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="50.5056%" y="837" width="0.0166%" height="15" fill="rgb(223,13,53)" fg:x="3047" fg:w="1"/><text x="50.7556%" y="847.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="50.5056%" y="821" width="0.0166%" height="15" fill="rgb(214,227,0)" fg:x="3047" fg:w="1"/><text x="50.7556%" y="831.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.13%)</title><rect x="50.5553%" y="709" width="0.1326%" height="15" fill="rgb(228,103,26)" fg:x="3050" fg:w="8"/><text x="50.8053%" y="719.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="50.5553%" y="693" width="0.1326%" height="15" fill="rgb(254,177,53)" fg:x="3050" fg:w="8"/><text x="50.8053%" y="703.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="50.5553%" y="677" width="0.1326%" height="15" fill="rgb(208,201,34)" fg:x="3050" fg:w="8"/><text x="50.8053%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="50.5553%" y="661" width="0.1326%" height="15" fill="rgb(212,39,5)" fg:x="3050" fg:w="8"/><text x="50.8053%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="50.5884%" y="645" width="0.0995%" height="15" fill="rgb(246,117,3)" fg:x="3052" fg:w="6"/><text x="50.8384%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="50.5884%" y="629" width="0.0995%" height="15" fill="rgb(244,118,39)" fg:x="3052" fg:w="6"/><text x="50.8384%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="50.6050%" y="613" width="0.0829%" height="15" fill="rgb(241,64,10)" fg:x="3053" fg:w="5"/><text x="50.8550%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="50.6050%" y="597" width="0.0829%" height="15" fill="rgb(229,39,44)" fg:x="3053" fg:w="5"/><text x="50.8550%" y="607.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (16 samples, 0.27%)</title><rect x="50.5553%" y="821" width="0.2652%" height="15" fill="rgb(230,226,3)" fg:x="3050" fg:w="16"/><text x="50.8053%" y="831.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (16 samples, 0.27%)</title><rect x="50.5553%" y="805" width="0.2652%" height="15" fill="rgb(222,13,42)" fg:x="3050" fg:w="16"/><text x="50.8053%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (16 samples, 0.27%)</title><rect x="50.5553%" y="789" width="0.2652%" height="15" fill="rgb(247,180,54)" fg:x="3050" fg:w="16"/><text x="50.8053%" y="799.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (16 samples, 0.27%)</title><rect x="50.5553%" y="773" width="0.2652%" height="15" fill="rgb(205,96,16)" fg:x="3050" fg:w="16"/><text x="50.8053%" y="783.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (16 samples, 0.27%)</title><rect x="50.5553%" y="757" width="0.2652%" height="15" fill="rgb(205,100,21)" fg:x="3050" fg:w="16"/><text x="50.8053%" y="767.50"></text></g><g><title>operator new (16 samples, 0.27%)</title><rect x="50.5553%" y="741" width="0.2652%" height="15" fill="rgb(248,51,4)" fg:x="3050" fg:w="16"/><text x="50.8053%" y="751.50"></text></g><g><title>malloc (16 samples, 0.27%)</title><rect x="50.5553%" y="725" width="0.2652%" height="15" fill="rgb(217,197,30)" fg:x="3050" fg:w="16"/><text x="50.8053%" y="735.50"></text></g><g><title>_int_malloc (8 samples, 0.13%)</title><rect x="50.6879%" y="709" width="0.1326%" height="15" fill="rgb(240,179,40)" fg:x="3058" fg:w="8"/><text x="50.9379%" y="719.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (20 samples, 0.33%)</title><rect x="50.5221%" y="837" width="0.3315%" height="15" fill="rgb(212,185,35)" fg:x="3048" fg:w="20"/><text x="50.7721%" y="847.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_S_relocate (2 samples, 0.03%)</title><rect x="50.8205%" y="821" width="0.0332%" height="15" fill="rgb(251,222,31)" fg:x="3066" fg:w="2"/><text x="51.0705%" y="831.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;* std::__relocate_a&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="50.8205%" y="805" width="0.0332%" height="15" fill="rgb(208,140,36)" fg:x="3066" fg:w="2"/><text x="51.0705%" y="815.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;* std::__relocate_a_1&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="50.8205%" y="789" width="0.0332%" height="15" fill="rgb(220,148,1)" fg:x="3066" fg:w="2"/><text x="51.0705%" y="799.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="50.8536%" y="837" width="0.0166%" height="15" fill="rgb(254,4,28)" fg:x="3068" fg:w="1"/><text x="51.1036%" y="847.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8702%" y="837" width="0.0166%" height="15" fill="rgb(222,185,44)" fg:x="3069" fg:w="1"/><text x="51.1202%" y="847.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8702%" y="821" width="0.0166%" height="15" fill="rgb(215,74,39)" fg:x="3069" fg:w="1"/><text x="51.1202%" y="831.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="50.8702%" y="805" width="0.0166%" height="15" fill="rgb(247,86,4)" fg:x="3069" fg:w="1"/><text x="51.1202%" y="815.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="50.8702%" y="789" width="0.0166%" height="15" fill="rgb(231,105,32)" fg:x="3069" fg:w="1"/><text x="51.1202%" y="799.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="50.8702%" y="773" width="0.0166%" height="15" fill="rgb(222,65,35)" fg:x="3069" fg:w="1"/><text x="51.1202%" y="783.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="50.9365%" y="661" width="0.0166%" height="15" fill="rgb(218,145,35)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="645" width="0.0166%" height="15" fill="rgb(208,7,15)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="629" width="0.0166%" height="15" fill="rgb(209,83,13)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="613" width="0.0166%" height="15" fill="rgb(218,3,10)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="597" width="0.0166%" height="15" fill="rgb(211,219,4)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="581" width="0.0166%" height="15" fill="rgb(228,194,12)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="565" width="0.0166%" height="15" fill="rgb(210,175,7)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="549" width="0.0166%" height="15" fill="rgb(243,132,6)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="533" width="0.0166%" height="15" fill="rgb(207,72,18)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.9365%" y="517" width="0.0166%" height="15" fill="rgb(236,1,18)" fg:x="3073" fg:w="1"/><text x="51.1865%" y="527.50"></text></g><g><title>__lll_lock_wake_private (9 samples, 0.15%)</title><rect x="50.9531%" y="661" width="0.1492%" height="15" fill="rgb(227,0,18)" fg:x="3074" fg:w="9"/><text x="51.2031%" y="671.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="50.9531%" y="645" width="0.1492%" height="15" fill="rgb(247,37,5)" fg:x="3074" fg:w="9"/><text x="51.2031%" y="655.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="50.9531%" y="629" width="0.1492%" height="15" fill="rgb(237,179,24)" fg:x="3074" fg:w="9"/><text x="51.2031%" y="639.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="50.9531%" y="613" width="0.1492%" height="15" fill="rgb(226,53,20)" fg:x="3074" fg:w="9"/><text x="51.2031%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.9862%" y="597" width="0.1160%" height="15" fill="rgb(247,75,7)" fg:x="3076" fg:w="7"/><text x="51.2362%" y="607.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.9862%" y="581" width="0.1160%" height="15" fill="rgb(233,96,12)" fg:x="3076" fg:w="7"/><text x="51.2362%" y="591.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="50.9862%" y="565" width="0.1160%" height="15" fill="rgb(224,125,0)" fg:x="3076" fg:w="7"/><text x="51.2362%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="51.0028%" y="549" width="0.0995%" height="15" fill="rgb(224,92,25)" fg:x="3077" fg:w="6"/><text x="51.2528%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="51.0857%" y="533" width="0.0166%" height="15" fill="rgb(224,42,24)" fg:x="3082" fg:w="1"/><text x="51.3357%" y="543.50"></text></g><g><title>malloc (16 samples, 0.27%)</title><rect x="50.9199%" y="677" width="0.2652%" height="15" fill="rgb(234,132,49)" fg:x="3072" fg:w="16"/><text x="51.1699%" y="687.50"></text></g><g><title>_int_malloc (5 samples, 0.08%)</title><rect x="51.1023%" y="661" width="0.0829%" height="15" fill="rgb(248,100,35)" fg:x="3083" fg:w="5"/><text x="51.3523%" y="671.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="51.1686%" y="645" width="0.0166%" height="15" fill="rgb(239,94,40)" fg:x="3087" fg:w="1"/><text x="51.4186%" y="655.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (17 samples, 0.28%)</title><rect x="50.9199%" y="773" width="0.2818%" height="15" fill="rgb(235,139,28)" fg:x="3072" fg:w="17"/><text x="51.1699%" y="783.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (17 samples, 0.28%)</title><rect x="50.9199%" y="757" width="0.2818%" height="15" fill="rgb(217,144,7)" fg:x="3072" fg:w="17"/><text x="51.1699%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (17 samples, 0.28%)</title><rect x="50.9199%" y="741" width="0.2818%" height="15" fill="rgb(227,55,4)" fg:x="3072" fg:w="17"/><text x="51.1699%" y="751.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (17 samples, 0.28%)</title><rect x="50.9199%" y="725" width="0.2818%" height="15" fill="rgb(252,82,54)" fg:x="3072" fg:w="17"/><text x="51.1699%" y="735.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (17 samples, 0.28%)</title><rect x="50.9199%" y="709" width="0.2818%" height="15" fill="rgb(245,172,4)" fg:x="3072" fg:w="17"/><text x="51.1699%" y="719.50"></text></g><g><title>operator new (17 samples, 0.28%)</title><rect x="50.9199%" y="693" width="0.2818%" height="15" fill="rgb(207,26,27)" fg:x="3072" fg:w="17"/><text x="51.1699%" y="703.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.1851%" y="677" width="0.0166%" height="15" fill="rgb(252,98,18)" fg:x="3088" fg:w="1"/><text x="51.4351%" y="687.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (21 samples, 0.35%)</title><rect x="50.8868%" y="789" width="0.3481%" height="15" fill="rgb(244,8,26)" fg:x="3070" fg:w="21"/><text x="51.1368%" y="799.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (2 samples, 0.03%)</title><rect x="51.2017%" y="773" width="0.0332%" height="15" fill="rgb(237,173,45)" fg:x="3089" fg:w="2"/><text x="51.4517%" y="783.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (2 samples, 0.03%)</title><rect x="51.2017%" y="757" width="0.0332%" height="15" fill="rgb(208,213,49)" fg:x="3089" fg:w="2"/><text x="51.4517%" y="767.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (2 samples, 0.03%)</title><rect x="51.2017%" y="741" width="0.0332%" height="15" fill="rgb(212,122,37)" fg:x="3089" fg:w="2"/><text x="51.4517%" y="751.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (2 samples, 0.03%)</title><rect x="51.2017%" y="725" width="0.0332%" height="15" fill="rgb(213,80,17)" fg:x="3089" fg:w="2"/><text x="51.4517%" y="735.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="51.2183%" y="709" width="0.0166%" height="15" fill="rgb(206,210,43)" fg:x="3090" fg:w="1"/><text x="51.4683%" y="719.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="51.2183%" y="693" width="0.0166%" height="15" fill="rgb(229,214,3)" fg:x="3090" fg:w="1"/><text x="51.4683%" y="703.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="51.2183%" y="677" width="0.0166%" height="15" fill="rgb(235,213,29)" fg:x="3090" fg:w="1"/><text x="51.4683%" y="687.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="51.2183%" y="661" width="0.0166%" height="15" fill="rgb(248,135,26)" fg:x="3090" fg:w="1"/><text x="51.4683%" y="671.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="51.2183%" y="645" width="0.0166%" height="15" fill="rgb(242,188,12)" fg:x="3090" fg:w="1"/><text x="51.4683%" y="655.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="51.2349%" y="789" width="0.0829%" height="15" fill="rgb(245,38,12)" fg:x="3091" fg:w="5"/><text x="51.4849%" y="799.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.3012%" y="773" width="0.0166%" height="15" fill="rgb(218,42,13)" fg:x="3095" fg:w="1"/><text x="51.5512%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="51.3012%" y="757" width="0.0166%" height="15" fill="rgb(238,132,49)" fg:x="3095" fg:w="1"/><text x="51.5512%" y="767.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="51.3012%" y="741" width="0.0166%" height="15" fill="rgb(209,196,19)" fg:x="3095" fg:w="1"/><text x="51.5512%" y="751.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.3012%" y="725" width="0.0166%" height="15" fill="rgb(244,131,22)" fg:x="3095" fg:w="1"/><text x="51.5512%" y="735.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.03%)</title><rect x="51.3178%" y="517" width="0.0332%" height="15" fill="rgb(223,18,34)" fg:x="3096" fg:w="2"/><text x="51.5678%" y="527.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="51.3343%" y="501" width="0.0166%" height="15" fill="rgb(252,124,54)" fg:x="3097" fg:w="1"/><text x="51.5843%" y="511.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="51.3509%" y="517" width="0.0166%" height="15" fill="rgb(229,106,42)" fg:x="3098" fg:w="1"/><text x="51.6009%" y="527.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="51.3675%" y="517" width="0.0166%" height="15" fill="rgb(221,129,1)" fg:x="3099" fg:w="1"/><text x="51.6175%" y="527.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (32 samples, 0.53%)</title><rect x="50.8868%" y="805" width="0.5304%" height="15" fill="rgb(229,74,15)" fg:x="3070" fg:w="32"/><text x="51.1368%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="789" width="0.0995%" height="15" fill="rgb(210,206,50)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="799.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="773" width="0.0995%" height="15" fill="rgb(251,114,31)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="783.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="757" width="0.0995%" height="15" fill="rgb(215,225,28)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="767.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="741" width="0.0995%" height="15" fill="rgb(237,109,14)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="751.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="725" width="0.0995%" height="15" fill="rgb(230,13,37)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="735.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="709" width="0.0995%" height="15" fill="rgb(231,40,28)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="719.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="693" width="0.0995%" height="15" fill="rgb(231,202,18)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="703.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="677" width="0.0995%" height="15" fill="rgb(225,33,18)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="687.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="661" width="0.0995%" height="15" fill="rgb(223,64,47)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="671.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="645" width="0.0995%" height="15" fill="rgb(234,114,13)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="655.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="629" width="0.0995%" height="15" fill="rgb(248,56,40)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="639.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="613" width="0.0995%" height="15" fill="rgb(221,194,21)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (6 samples, 0.10%)</title><rect x="51.3178%" y="597" width="0.0995%" height="15" fill="rgb(242,108,46)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="581" width="0.0995%" height="15" fill="rgb(220,106,10)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="591.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="565" width="0.0995%" height="15" fill="rgb(211,88,4)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="549" width="0.0995%" height="15" fill="rgb(214,95,34)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="51.3178%" y="533" width="0.0995%" height="15" fill="rgb(250,160,33)" fg:x="3096" fg:w="6"/><text x="51.5678%" y="543.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="51.3841%" y="517" width="0.0332%" height="15" fill="rgb(225,29,10)" fg:x="3100" fg:w="2"/><text x="51.6341%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.03%)</title><rect x="51.3841%" y="501" width="0.0332%" height="15" fill="rgb(224,28,30)" fg:x="3100" fg:w="2"/><text x="51.6341%" y="511.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="51.4006%" y="485" width="0.0166%" height="15" fill="rgb(231,77,4)" fg:x="3101" fg:w="1"/><text x="51.6506%" y="495.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="51.4006%" y="469" width="0.0166%" height="15" fill="rgb(209,63,21)" fg:x="3101" fg:w="1"/><text x="51.6506%" y="479.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4172%" y="805" width="0.0166%" height="15" fill="rgb(226,22,11)" fg:x="3102" fg:w="1"/><text x="51.6672%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="805" width="0.0166%" height="15" fill="rgb(216,82,30)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="815.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="789" width="0.0166%" height="15" fill="rgb(246,227,38)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="799.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="773" width="0.0166%" height="15" fill="rgb(251,203,53)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="783.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="757" width="0.0166%" height="15" fill="rgb(254,101,1)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="767.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="741" width="0.0166%" height="15" fill="rgb(241,180,5)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="751.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="725" width="0.0166%" height="15" fill="rgb(218,168,4)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="735.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="709" width="0.0166%" height="15" fill="rgb(224,223,32)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="719.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="693" width="0.0166%" height="15" fill="rgb(236,106,22)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="703.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="677" width="0.0166%" height="15" fill="rgb(206,121,5)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="687.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="661" width="0.0166%" height="15" fill="rgb(233,87,28)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="671.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="645" width="0.0166%" height="15" fill="rgb(236,137,17)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="655.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="629" width="0.0166%" height="15" fill="rgb(209,183,38)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="639.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1 samples, 0.02%)</title><rect x="51.4338%" y="613" width="0.0166%" height="15" fill="rgb(206,162,44)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="597" width="0.0166%" height="15" fill="rgb(237,70,39)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="581" width="0.0166%" height="15" fill="rgb(212,176,5)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="565" width="0.0166%" height="15" fill="rgb(232,95,16)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="549" width="0.0166%" height="15" fill="rgb(219,115,35)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="559.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="51.4338%" y="533" width="0.0166%" height="15" fill="rgb(251,67,27)" fg:x="3103" fg:w="1"/><text x="51.6838%" y="543.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (35 samples, 0.58%)</title><rect x="50.8868%" y="837" width="0.5801%" height="15" fill="rgb(222,95,40)" fg:x="3070" fg:w="35"/><text x="51.1368%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (35 samples, 0.58%)</title><rect x="50.8868%" y="821" width="0.5801%" height="15" fill="rgb(250,35,16)" fg:x="3070" fg:w="35"/><text x="51.1368%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.4504%" y="805" width="0.0166%" height="15" fill="rgb(224,86,44)" fg:x="3104" fg:w="1"/><text x="51.7004%" y="815.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (60 samples, 0.99%)</title><rect x="50.4890%" y="917" width="0.9945%" height="15" fill="rgb(237,53,53)" fg:x="3046" fg:w="60"/><text x="50.7390%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (60 samples, 0.99%)</title><rect x="50.4890%" y="901" width="0.9945%" height="15" fill="rgb(208,171,33)" fg:x="3046" fg:w="60"/><text x="50.7390%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (60 samples, 0.99%)</title><rect x="50.4890%" y="885" width="0.9945%" height="15" fill="rgb(222,64,27)" fg:x="3046" fg:w="60"/><text x="50.7390%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (60 samples, 0.99%)</title><rect x="50.4890%" y="869" width="0.9945%" height="15" fill="rgb(221,121,35)" fg:x="3046" fg:w="60"/><text x="50.7390%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (60 samples, 0.99%)</title><rect x="50.4890%" y="853" width="0.9945%" height="15" fill="rgb(228,137,42)" fg:x="3046" fg:w="60"/><text x="50.7390%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="51.4669%" y="837" width="0.0166%" height="15" fill="rgb(227,54,21)" fg:x="3105" fg:w="1"/><text x="51.7169%" y="847.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="51.4835%" y="853" width="0.0166%" height="15" fill="rgb(240,168,33)" fg:x="3106" fg:w="1"/><text x="51.7335%" y="863.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned char&amp;&gt;(unsigned char&amp;) (2 samples, 0.03%)</title><rect x="51.4835%" y="917" width="0.0332%" height="15" fill="rgb(243,159,6)" fg:x="3106" fg:w="2"/><text x="51.7335%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.4835%" y="901" width="0.0332%" height="15" fill="rgb(205,211,41)" fg:x="3106" fg:w="2"/><text x="51.7335%" y="911.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.4835%" y="885" width="0.0332%" height="15" fill="rgb(253,30,1)" fg:x="3106" fg:w="2"/><text x="51.7335%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.03%)</title><rect x="51.4835%" y="869" width="0.0332%" height="15" fill="rgb(226,80,18)" fg:x="3106" fg:w="2"/><text x="51.7335%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.5001%" y="853" width="0.0166%" height="15" fill="rgb(253,156,46)" fg:x="3107" fg:w="1"/><text x="51.7501%" y="863.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="51.5001%" y="837" width="0.0166%" height="15" fill="rgb(248,87,27)" fg:x="3107" fg:w="1"/><text x="51.7501%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (2 samples, 0.03%)</title><rect x="51.5167%" y="917" width="0.0332%" height="15" fill="rgb(227,122,2)" fg:x="3108" fg:w="2"/><text x="51.7667%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.5167%" y="901" width="0.0332%" height="15" fill="rgb(229,94,39)" fg:x="3108" fg:w="2"/><text x="51.7667%" y="911.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.5167%" y="885" width="0.0332%" height="15" fill="rgb(225,173,31)" fg:x="3108" fg:w="2"/><text x="51.7667%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.03%)</title><rect x="51.5167%" y="869" width="0.0332%" height="15" fill="rgb(239,176,30)" fg:x="3108" fg:w="2"/><text x="51.7667%" y="879.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="51.5167%" y="853" width="0.0332%" height="15" fill="rgb(212,104,21)" fg:x="3108" fg:w="2"/><text x="51.7667%" y="863.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="51.5332%" y="837" width="0.0166%" height="15" fill="rgb(240,209,40)" fg:x="3109" fg:w="1"/><text x="51.7832%" y="847.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="51.5332%" y="821" width="0.0166%" height="15" fill="rgb(234,195,5)" fg:x="3109" fg:w="1"/><text x="51.7832%" y="831.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="51.5332%" y="805" width="0.0166%" height="15" fill="rgb(238,213,1)" fg:x="3109" fg:w="1"/><text x="51.7832%" y="815.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (179 samples, 2.97%)</title><rect x="48.5994%" y="965" width="2.9670%" height="15" fill="rgb(235,182,54)" fg:x="2932" fg:w="179"/><text x="48.8494%" y="975.50">CMu..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (179 samples, 2.97%)</title><rect x="48.5994%" y="949" width="2.9670%" height="15" fill="rgb(229,50,46)" fg:x="2932" fg:w="179"/><text x="48.8494%" y="959.50">voi..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (179 samples, 2.97%)</title><rect x="48.5994%" y="933" width="2.9670%" height="15" fill="rgb(219,145,13)" fg:x="2932" fg:w="179"/><text x="48.8494%" y="943.50">voi..</text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="51.5498%" y="917" width="0.0166%" height="15" fill="rgb(220,226,10)" fg:x="3110" fg:w="1"/><text x="51.7998%" y="927.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.5664%" y="949" width="0.0166%" height="15" fill="rgb(248,47,30)" fg:x="3111" fg:w="1"/><text x="51.8164%" y="959.50"></text></g><g><title>CSHA256::Write (6 samples, 0.10%)</title><rect x="51.5830%" y="853" width="0.0995%" height="15" fill="rgb(231,209,44)" fg:x="3112" fg:w="6"/><text x="51.8330%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="51.6824%" y="853" width="0.0166%" height="15" fill="rgb(209,80,30)" fg:x="3118" fg:w="1"/><text x="51.9324%" y="863.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="51.6824%" y="837" width="0.0166%" height="15" fill="rgb(232,9,14)" fg:x="3118" fg:w="1"/><text x="51.9324%" y="847.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.6824%" y="821" width="0.0166%" height="15" fill="rgb(243,91,43)" fg:x="3118" fg:w="1"/><text x="51.9324%" y="831.50"></text></g><g><title>CTransaction::ComputeHasWitness (1 samples, 0.02%)</title><rect x="51.6990%" y="757" width="0.0166%" height="15" fill="rgb(231,90,52)" fg:x="3119" fg:w="1"/><text x="51.9490%" y="767.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.02%)</title><rect x="51.6990%" y="741" width="0.0166%" height="15" fill="rgb(253,192,44)" fg:x="3119" fg:w="1"/><text x="51.9490%" y="751.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.02%)</title><rect x="51.6990%" y="725" width="0.0166%" height="15" fill="rgb(241,66,31)" fg:x="3119" fg:w="1"/><text x="51.9490%" y="735.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.02%)</title><rect x="51.6990%" y="709" width="0.0166%" height="15" fill="rgb(235,81,37)" fg:x="3119" fg:w="1"/><text x="51.9490%" y="719.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.6990%" y="693" width="0.0166%" height="15" fill="rgb(223,221,9)" fg:x="3119" fg:w="1"/><text x="51.9490%" y="703.50"></text></g><g><title>CTransaction::ComputeHasWitness (1 samples, 0.02%)</title><rect x="51.6990%" y="677" width="0.0166%" height="15" fill="rgb(242,180,7)" fg:x="3119" fg:w="1"/><text x="51.9490%" y="687.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.7156%" y="565" width="0.0166%" height="15" fill="rgb(243,78,19)" fg:x="3120" fg:w="1"/><text x="51.9656%" y="575.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="51.7156%" y="581" width="0.0332%" height="15" fill="rgb(233,23,17)" fg:x="3120" fg:w="2"/><text x="51.9656%" y="591.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.7321%" y="565" width="0.0166%" height="15" fill="rgb(252,122,45)" fg:x="3121" fg:w="1"/><text x="51.9821%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="51.7156%" y="645" width="0.0497%" height="15" fill="rgb(247,108,20)" fg:x="3120" fg:w="3"/><text x="51.9656%" y="655.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="51.7156%" y="629" width="0.0497%" height="15" fill="rgb(235,84,21)" fg:x="3120" fg:w="3"/><text x="51.9656%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="51.7156%" y="613" width="0.0497%" height="15" fill="rgb(247,129,10)" fg:x="3120" fg:w="3"/><text x="51.9656%" y="623.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="51.7156%" y="597" width="0.0497%" height="15" fill="rgb(208,173,14)" fg:x="3120" fg:w="3"/><text x="51.9656%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="51.7487%" y="581" width="0.0166%" height="15" fill="rgb(236,31,38)" fg:x="3122" fg:w="1"/><text x="51.9987%" y="591.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="51.7487%" y="565" width="0.0166%" height="15" fill="rgb(232,65,17)" fg:x="3122" fg:w="1"/><text x="51.9987%" y="575.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="51.7487%" y="549" width="0.0166%" height="15" fill="rgb(224,45,49)" fg:x="3122" fg:w="1"/><text x="51.9987%" y="559.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="51.7487%" y="533" width="0.0166%" height="15" fill="rgb(225,2,53)" fg:x="3122" fg:w="1"/><text x="51.9987%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7653%" y="549" width="0.0166%" height="15" fill="rgb(248,210,53)" fg:x="3123" fg:w="1"/><text x="52.0153%" y="559.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7653%" y="533" width="0.0166%" height="15" fill="rgb(211,1,30)" fg:x="3123" fg:w="1"/><text x="52.0153%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.7653%" y="517" width="0.0166%" height="15" fill="rgb(224,96,15)" fg:x="3123" fg:w="1"/><text x="52.0153%" y="527.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.7653%" y="501" width="0.0166%" height="15" fill="rgb(252,45,11)" fg:x="3123" fg:w="1"/><text x="52.0153%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="51.7653%" y="485" width="0.0166%" height="15" fill="rgb(220,125,38)" fg:x="3123" fg:w="1"/><text x="52.0153%" y="495.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="51.7653%" y="469" width="0.0166%" height="15" fill="rgb(243,161,33)" fg:x="3123" fg:w="1"/><text x="52.0153%" y="479.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.7653%" y="453" width="0.0166%" height="15" fill="rgb(248,197,34)" fg:x="3123" fg:w="1"/><text x="52.0153%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (2 samples, 0.03%)</title><rect x="51.7653%" y="645" width="0.0332%" height="15" fill="rgb(228,165,23)" fg:x="3123" fg:w="2"/><text x="52.0153%" y="655.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.7653%" y="629" width="0.0332%" height="15" fill="rgb(236,94,38)" fg:x="3123" fg:w="2"/><text x="52.0153%" y="639.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.7653%" y="613" width="0.0332%" height="15" fill="rgb(220,13,23)" fg:x="3123" fg:w="2"/><text x="52.0153%" y="623.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="51.7653%" y="597" width="0.0332%" height="15" fill="rgb(234,26,39)" fg:x="3123" fg:w="2"/><text x="52.0153%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (2 samples, 0.03%)</title><rect x="51.7653%" y="581" width="0.0332%" height="15" fill="rgb(205,117,44)" fg:x="3123" fg:w="2"/><text x="52.0153%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (2 samples, 0.03%)</title><rect x="51.7653%" y="565" width="0.0332%" height="15" fill="rgb(250,42,2)" fg:x="3123" fg:w="2"/><text x="52.0153%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7819%" y="549" width="0.0166%" height="15" fill="rgb(223,83,14)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="559.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7819%" y="533" width="0.0166%" height="15" fill="rgb(241,147,50)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="543.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.7819%" y="517" width="0.0166%" height="15" fill="rgb(218,90,6)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="51.7819%" y="501" width="0.0166%" height="15" fill="rgb(210,191,5)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="51.7819%" y="485" width="0.0166%" height="15" fill="rgb(225,139,19)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.7819%" y="469" width="0.0166%" height="15" fill="rgb(210,1,33)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="479.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.7819%" y="453" width="0.0166%" height="15" fill="rgb(213,50,3)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="463.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.7819%" y="437" width="0.0166%" height="15" fill="rgb(234,227,4)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="447.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.7819%" y="421" width="0.0166%" height="15" fill="rgb(246,63,5)" fg:x="3124" fg:w="1"/><text x="52.0319%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.7984%" y="533" width="0.0166%" height="15" fill="rgb(245,136,27)" fg:x="3125" fg:w="1"/><text x="52.0484%" y="543.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.7984%" y="517" width="0.0166%" height="15" fill="rgb(247,199,27)" fg:x="3125" fg:w="1"/><text x="52.0484%" y="527.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.7984%" y="501" width="0.0166%" height="15" fill="rgb(252,158,49)" fg:x="3125" fg:w="1"/><text x="52.0484%" y="511.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.7984%" y="485" width="0.0166%" height="15" fill="rgb(254,73,1)" fg:x="3125" fg:w="1"/><text x="52.0484%" y="495.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="51.7984%" y="469" width="0.0166%" height="15" fill="rgb(248,93,19)" fg:x="3125" fg:w="1"/><text x="52.0484%" y="479.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.8150%" y="469" width="0.0166%" height="15" fill="rgb(206,67,5)" fg:x="3126" fg:w="1"/><text x="52.0650%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (9 samples, 0.15%)</title><rect x="51.6990%" y="837" width="0.1492%" height="15" fill="rgb(209,210,4)" fg:x="3119" fg:w="9"/><text x="51.9490%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (9 samples, 0.15%)</title><rect x="51.6990%" y="821" width="0.1492%" height="15" fill="rgb(214,185,36)" fg:x="3119" fg:w="9"/><text x="51.9490%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.15%)</title><rect x="51.6990%" y="805" width="0.1492%" height="15" fill="rgb(233,191,26)" fg:x="3119" fg:w="9"/><text x="51.9490%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.15%)</title><rect x="51.6990%" y="789" width="0.1492%" height="15" fill="rgb(248,94,17)" fg:x="3119" fg:w="9"/><text x="51.9490%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (9 samples, 0.15%)</title><rect x="51.6990%" y="773" width="0.1492%" height="15" fill="rgb(250,64,4)" fg:x="3119" fg:w="9"/><text x="51.9490%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (8 samples, 0.13%)</title><rect x="51.7156%" y="757" width="0.1326%" height="15" fill="rgb(218,41,53)" fg:x="3120" fg:w="8"/><text x="51.9656%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (8 samples, 0.13%)</title><rect x="51.7156%" y="741" width="0.1326%" height="15" fill="rgb(251,176,28)" fg:x="3120" fg:w="8"/><text x="51.9656%" y="751.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="51.7156%" y="725" width="0.1326%" height="15" fill="rgb(247,22,9)" fg:x="3120" fg:w="8"/><text x="51.9656%" y="735.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="51.7156%" y="709" width="0.1326%" height="15" fill="rgb(218,201,14)" fg:x="3120" fg:w="8"/><text x="51.9656%" y="719.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (8 samples, 0.13%)</title><rect x="51.7156%" y="693" width="0.1326%" height="15" fill="rgb(218,94,10)" fg:x="3120" fg:w="8"/><text x="51.9656%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (8 samples, 0.13%)</title><rect x="51.7156%" y="677" width="0.1326%" height="15" fill="rgb(222,183,52)" fg:x="3120" fg:w="8"/><text x="51.9656%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (8 samples, 0.13%)</title><rect x="51.7156%" y="661" width="0.1326%" height="15" fill="rgb(242,140,25)" fg:x="3120" fg:w="8"/><text x="51.9656%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="51.7984%" y="645" width="0.0497%" height="15" fill="rgb(235,197,38)" fg:x="3125" fg:w="3"/><text x="52.0484%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="51.7984%" y="629" width="0.0497%" height="15" fill="rgb(237,136,15)" fg:x="3125" fg:w="3"/><text x="52.0484%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="51.7984%" y="613" width="0.0497%" height="15" fill="rgb(223,44,49)" fg:x="3125" fg:w="3"/><text x="52.0484%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="51.7984%" y="597" width="0.0497%" height="15" fill="rgb(227,71,15)" fg:x="3125" fg:w="3"/><text x="52.0484%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="51.7984%" y="581" width="0.0497%" height="15" fill="rgb(225,153,20)" fg:x="3125" fg:w="3"/><text x="52.0484%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="51.7984%" y="565" width="0.0497%" height="15" fill="rgb(210,190,26)" fg:x="3125" fg:w="3"/><text x="52.0484%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="51.7984%" y="549" width="0.0497%" height="15" fill="rgb(223,147,5)" fg:x="3125" fg:w="3"/><text x="52.0484%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.8150%" y="533" width="0.0332%" height="15" fill="rgb(207,14,23)" fg:x="3126" fg:w="2"/><text x="52.0650%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.8150%" y="517" width="0.0332%" height="15" fill="rgb(211,195,53)" fg:x="3126" fg:w="2"/><text x="52.0650%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="51.8150%" y="501" width="0.0332%" height="15" fill="rgb(237,75,46)" fg:x="3126" fg:w="2"/><text x="52.0650%" y="511.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="51.8150%" y="485" width="0.0332%" height="15" fill="rgb(254,55,14)" fg:x="3126" fg:w="2"/><text x="52.0650%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8316%" y="469" width="0.0166%" height="15" fill="rgb(230,185,30)" fg:x="3127" fg:w="1"/><text x="52.0816%" y="479.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8316%" y="453" width="0.0166%" height="15" fill="rgb(220,14,11)" fg:x="3127" fg:w="1"/><text x="52.0816%" y="463.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.8482%" y="581" width="0.0166%" height="15" fill="rgb(215,169,44)" fg:x="3128" fg:w="1"/><text x="52.0982%" y="591.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.8482%" y="565" width="0.0166%" height="15" fill="rgb(253,203,20)" fg:x="3128" fg:w="1"/><text x="52.0982%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.8482%" y="645" width="0.0332%" height="15" fill="rgb(229,225,17)" fg:x="3128" fg:w="2"/><text x="52.0982%" y="655.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.8482%" y="629" width="0.0332%" height="15" fill="rgb(236,76,26)" fg:x="3128" fg:w="2"/><text x="52.0982%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="51.8482%" y="613" width="0.0332%" height="15" fill="rgb(234,15,30)" fg:x="3128" fg:w="2"/><text x="52.0982%" y="623.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="51.8482%" y="597" width="0.0332%" height="15" fill="rgb(211,113,48)" fg:x="3128" fg:w="2"/><text x="52.0982%" y="607.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8647%" y="581" width="0.0166%" height="15" fill="rgb(221,31,36)" fg:x="3129" fg:w="1"/><text x="52.1147%" y="591.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8647%" y="565" width="0.0166%" height="15" fill="rgb(215,118,52)" fg:x="3129" fg:w="1"/><text x="52.1147%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.8647%" y="549" width="0.0166%" height="15" fill="rgb(241,151,27)" fg:x="3129" fg:w="1"/><text x="52.1147%" y="559.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.8647%" y="533" width="0.0166%" height="15" fill="rgb(253,51,3)" fg:x="3129" fg:w="1"/><text x="52.1147%" y="543.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.8813%" y="533" width="0.0166%" height="15" fill="rgb(216,201,24)" fg:x="3130" fg:w="1"/><text x="52.1313%" y="543.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.8813%" y="517" width="0.0166%" height="15" fill="rgb(231,107,4)" fg:x="3130" fg:w="1"/><text x="52.1313%" y="527.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="51.9310%" y="485" width="0.0497%" height="15" fill="rgb(243,97,54)" fg:x="3133" fg:w="3"/><text x="52.1810%" y="495.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.9642%" y="469" width="0.0166%" height="15" fill="rgb(221,32,51)" fg:x="3135" fg:w="1"/><text x="52.2142%" y="479.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.9808%" y="485" width="0.0166%" height="15" fill="rgb(218,171,35)" fg:x="3136" fg:w="1"/><text x="52.2308%" y="495.50"></text></g><g><title>CSHA256::Write (8 samples, 0.13%)</title><rect x="51.8979%" y="501" width="0.1326%" height="15" fill="rgb(214,20,53)" fg:x="3131" fg:w="8"/><text x="52.1479%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="51.9973%" y="485" width="0.0332%" height="15" fill="rgb(239,9,52)" fg:x="3137" fg:w="2"/><text x="52.2473%" y="495.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.0139%" y="469" width="0.0166%" height="15" fill="rgb(215,114,45)" fg:x="3138" fg:w="1"/><text x="52.2639%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.0139%" y="453" width="0.0166%" height="15" fill="rgb(208,118,9)" fg:x="3138" fg:w="1"/><text x="52.2639%" y="463.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.0139%" y="437" width="0.0166%" height="15" fill="rgb(235,7,39)" fg:x="3138" fg:w="1"/><text x="52.2639%" y="447.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="52.0636%" y="469" width="0.0166%" height="15" fill="rgb(243,225,15)" fg:x="3141" fg:w="1"/><text x="52.3136%" y="479.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="52.0636%" y="485" width="0.0332%" height="15" fill="rgb(225,216,18)" fg:x="3141" fg:w="2"/><text x="52.3136%" y="495.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="52.0802%" y="469" width="0.0166%" height="15" fill="rgb(233,36,38)" fg:x="3142" fg:w="1"/><text x="52.3302%" y="479.50"></text></g><g><title>ShiftMessageA (2 samples, 0.03%)</title><rect x="52.0968%" y="469" width="0.0332%" height="15" fill="rgb(239,88,23)" fg:x="3143" fg:w="2"/><text x="52.3468%" y="479.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.03%)</title><rect x="52.0968%" y="453" width="0.0332%" height="15" fill="rgb(219,181,35)" fg:x="3143" fg:w="2"/><text x="52.3468%" y="463.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="52.1300%" y="453" width="0.0166%" height="15" fill="rgb(215,18,46)" fg:x="3145" fg:w="1"/><text x="52.3800%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (10 samples, 0.17%)</title><rect x="52.0305%" y="501" width="0.1658%" height="15" fill="rgb(241,38,11)" fg:x="3139" fg:w="10"/><text x="52.2805%" y="511.50"></text></g><g><title>ShiftMessageB (6 samples, 0.10%)</title><rect x="52.0968%" y="485" width="0.0995%" height="15" fill="rgb(248,169,45)" fg:x="3143" fg:w="6"/><text x="52.3468%" y="495.50"></text></g><g><title>ShiftMessageC (4 samples, 0.07%)</title><rect x="52.1300%" y="469" width="0.0663%" height="15" fill="rgb(239,50,49)" fg:x="3145" fg:w="4"/><text x="52.3800%" y="479.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.05%)</title><rect x="52.1465%" y="453" width="0.0497%" height="15" fill="rgb(231,96,31)" fg:x="3146" fg:w="3"/><text x="52.3965%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (19 samples, 0.31%)</title><rect x="51.8979%" y="533" width="0.3149%" height="15" fill="rgb(224,193,37)" fg:x="3131" fg:w="19"/><text x="52.1479%" y="543.50"></text></g><g><title>HashWriter::write (19 samples, 0.31%)</title><rect x="51.8979%" y="517" width="0.3149%" height="15" fill="rgb(227,153,50)" fg:x="3131" fg:w="19"/><text x="52.1479%" y="527.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.1963%" y="501" width="0.0166%" height="15" fill="rgb(249,228,3)" fg:x="3149" fg:w="1"/><text x="52.4463%" y="511.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.1963%" y="485" width="0.0166%" height="15" fill="rgb(219,164,43)" fg:x="3149" fg:w="1"/><text x="52.4463%" y="495.50"></text></g><g><title>Span&lt;std::byte const&gt; MakeByteSpan&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="52.2128%" y="533" width="0.0166%" height="15" fill="rgb(216,45,41)" fg:x="3150" fg:w="1"/><text x="52.4628%" y="543.50"></text></g><g><title>Span&lt;unsigned char const&gt;::Span&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2128%" y="517" width="0.0166%" height="15" fill="rgb(210,226,51)" fg:x="3150" fg:w="1"/><text x="52.4628%" y="527.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (1 samples, 0.02%)</title><rect x="52.2128%" y="501" width="0.0166%" height="15" fill="rgb(209,117,49)" fg:x="3150" fg:w="1"/><text x="52.4628%" y="511.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="52.2128%" y="485" width="0.0166%" height="15" fill="rgb(206,196,24)" fg:x="3150" fg:w="1"/><text x="52.4628%" y="495.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="52.2128%" y="469" width="0.0166%" height="15" fill="rgb(253,218,3)" fg:x="3150" fg:w="1"/><text x="52.4628%" y="479.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="52.2294%" y="469" width="0.0166%" height="15" fill="rgb(252,166,2)" fg:x="3151" fg:w="1"/><text x="52.4794%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (25 samples, 0.41%)</title><rect x="51.8482%" y="837" width="0.4144%" height="15" fill="rgb(236,218,26)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="821" width="0.4144%" height="15" fill="rgb(254,84,19)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="805" width="0.4144%" height="15" fill="rgb(219,137,29)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="789" width="0.4144%" height="15" fill="rgb(227,47,52)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="773" width="0.4144%" height="15" fill="rgb(229,167,24)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="757" width="0.4144%" height="15" fill="rgb(233,164,1)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="741" width="0.4144%" height="15" fill="rgb(218,88,48)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="751.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="725" width="0.4144%" height="15" fill="rgb(226,214,24)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="735.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="709" width="0.4144%" height="15" fill="rgb(233,29,12)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="693" width="0.4144%" height="15" fill="rgb(219,120,34)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="677" width="0.4144%" height="15" fill="rgb(226,78,44)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (25 samples, 0.41%)</title><rect x="51.8482%" y="661" width="0.4144%" height="15" fill="rgb(240,15,48)" fg:x="3128" fg:w="25"/><text x="52.0982%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (23 samples, 0.38%)</title><rect x="51.8813%" y="645" width="0.3812%" height="15" fill="rgb(253,176,7)" fg:x="3130" fg:w="23"/><text x="52.1313%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.38%)</title><rect x="51.8813%" y="629" width="0.3812%" height="15" fill="rgb(206,166,28)" fg:x="3130" fg:w="23"/><text x="52.1313%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.38%)</title><rect x="51.8813%" y="613" width="0.3812%" height="15" fill="rgb(241,53,51)" fg:x="3130" fg:w="23"/><text x="52.1313%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (23 samples, 0.38%)</title><rect x="51.8813%" y="597" width="0.3812%" height="15" fill="rgb(249,112,30)" fg:x="3130" fg:w="23"/><text x="52.1313%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (23 samples, 0.38%)</title><rect x="51.8813%" y="581" width="0.3812%" height="15" fill="rgb(217,85,30)" fg:x="3130" fg:w="23"/><text x="52.1313%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (23 samples, 0.38%)</title><rect x="51.8813%" y="565" width="0.3812%" height="15" fill="rgb(233,49,7)" fg:x="3130" fg:w="23"/><text x="52.1313%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (23 samples, 0.38%)</title><rect x="51.8813%" y="549" width="0.3812%" height="15" fill="rgb(234,109,9)" fg:x="3130" fg:w="23"/><text x="52.1313%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="52.2294%" y="533" width="0.0332%" height="15" fill="rgb(253,95,22)" fg:x="3151" fg:w="2"/><text x="52.4794%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="52.2294%" y="517" width="0.0332%" height="15" fill="rgb(233,176,25)" fg:x="3151" fg:w="2"/><text x="52.4794%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="52.2294%" y="501" width="0.0332%" height="15" fill="rgb(236,33,39)" fg:x="3151" fg:w="2"/><text x="52.4794%" y="511.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="52.2294%" y="485" width="0.0332%" height="15" fill="rgb(223,226,42)" fg:x="3151" fg:w="2"/><text x="52.4794%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="469" width="0.0166%" height="15" fill="rgb(216,99,33)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.2460%" y="453" width="0.0166%" height="15" fill="rgb(235,84,23)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="437" width="0.0166%" height="15" fill="rgb(232,2,27)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="421" width="0.0166%" height="15" fill="rgb(241,23,22)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="405" width="0.0166%" height="15" fill="rgb(211,73,27)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="389" width="0.0166%" height="15" fill="rgb(235,109,49)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="373" width="0.0166%" height="15" fill="rgb(230,99,29)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="357" width="0.0166%" height="15" fill="rgb(245,199,7)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="367.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="341" width="0.0166%" height="15" fill="rgb(217,179,10)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="351.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="325" width="0.0166%" height="15" fill="rgb(254,99,47)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="335.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="309" width="0.0166%" height="15" fill="rgb(251,121,7)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="293" width="0.0166%" height="15" fill="rgb(250,177,26)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="277" width="0.0166%" height="15" fill="rgb(232,88,15)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="261" width="0.0166%" height="15" fill="rgb(251,54,54)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="271.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2460%" y="245" width="0.0166%" height="15" fill="rgb(208,177,15)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="255.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.2460%" y="229" width="0.0166%" height="15" fill="rgb(205,97,32)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="239.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.2460%" y="213" width="0.0166%" height="15" fill="rgb(217,192,13)" fg:x="3152" fg:w="1"/><text x="52.4960%" y="223.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (42 samples, 0.70%)</title><rect x="51.5830%" y="933" width="0.6962%" height="15" fill="rgb(215,163,41)" fg:x="3112" fg:w="42"/><text x="51.8330%" y="943.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (42 samples, 0.70%)</title><rect x="51.5830%" y="917" width="0.6962%" height="15" fill="rgb(246,83,29)" fg:x="3112" fg:w="42"/><text x="51.8330%" y="927.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (42 samples, 0.70%)</title><rect x="51.5830%" y="901" width="0.6962%" height="15" fill="rgb(219,2,45)" fg:x="3112" fg:w="42"/><text x="51.8330%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (42 samples, 0.70%)</title><rect x="51.5830%" y="885" width="0.6962%" height="15" fill="rgb(242,215,33)" fg:x="3112" fg:w="42"/><text x="51.8330%" y="895.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (42 samples, 0.70%)</title><rect x="51.5830%" y="869" width="0.6962%" height="15" fill="rgb(217,1,6)" fg:x="3112" fg:w="42"/><text x="51.8330%" y="879.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (35 samples, 0.58%)</title><rect x="51.6990%" y="853" width="0.5801%" height="15" fill="rgb(207,85,52)" fg:x="3119" fg:w="35"/><text x="51.9490%" y="863.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="52.2626%" y="837" width="0.0166%" height="15" fill="rgb(231,171,19)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2626%" y="821" width="0.0166%" height="15" fill="rgb(207,128,4)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="831.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2626%" y="805" width="0.0166%" height="15" fill="rgb(219,208,4)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="815.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.2626%" y="789" width="0.0166%" height="15" fill="rgb(235,161,42)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="799.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.2626%" y="773" width="0.0166%" height="15" fill="rgb(247,218,18)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="783.50"></text></g><g><title>CTransaction::CTransaction (1 samples, 0.02%)</title><rect x="52.2626%" y="757" width="0.0166%" height="15" fill="rgb(232,114,51)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="767.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="52.2626%" y="741" width="0.0166%" height="15" fill="rgb(222,95,3)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="751.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="52.2626%" y="725" width="0.0166%" height="15" fill="rgb(240,65,29)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="735.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="52.2626%" y="709" width="0.0166%" height="15" fill="rgb(249,209,20)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="719.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="52.2626%" y="693" width="0.0166%" height="15" fill="rgb(241,48,37)" fg:x="3153" fg:w="1"/><text x="52.5126%" y="703.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="52.3289%" y="885" width="0.0166%" height="15" fill="rgb(230,140,42)" fg:x="3157" fg:w="1"/><text x="52.5789%" y="895.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.4449%" y="869" width="0.0166%" height="15" fill="rgb(230,176,45)" fg:x="3164" fg:w="1"/><text x="52.6949%" y="879.50"></text></g><g><title>CSHA256::Write (8 samples, 0.13%)</title><rect x="52.3454%" y="885" width="0.1326%" height="15" fill="rgb(245,112,21)" fg:x="3158" fg:w="8"/><text x="52.5954%" y="895.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="52.4615%" y="869" width="0.0166%" height="15" fill="rgb(207,183,35)" fg:x="3165" fg:w="1"/><text x="52.7115%" y="879.50"></text></g><g><title>CTransaction::ComputeHash (2 samples, 0.03%)</title><rect x="52.4780%" y="885" width="0.0332%" height="15" fill="rgb(227,44,33)" fg:x="3166" fg:w="2"/><text x="52.7280%" y="895.50"></text></g><g><title>HashWriter::GetHash (2 samples, 0.03%)</title><rect x="52.4780%" y="869" width="0.0332%" height="15" fill="rgb(246,120,21)" fg:x="3166" fg:w="2"/><text x="52.7280%" y="879.50"></text></g><g><title>Load (1 samples, 0.02%)</title><rect x="52.5112%" y="869" width="0.0166%" height="15" fill="rgb(235,57,52)" fg:x="3168" fg:w="1"/><text x="52.7612%" y="879.50"></text></g><g><title>_mm_shuffle_epi8 (1 samples, 0.02%)</title><rect x="52.5112%" y="853" width="0.0166%" height="15" fill="rgb(238,84,10)" fg:x="3168" fg:w="1"/><text x="52.7612%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="52.5112%" y="885" width="0.0332%" height="15" fill="rgb(251,200,32)" fg:x="3168" fg:w="2"/><text x="52.7612%" y="895.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.5278%" y="869" width="0.0166%" height="15" fill="rgb(247,159,13)" fg:x="3169" fg:w="1"/><text x="52.7778%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="52.5278%" y="853" width="0.0166%" height="15" fill="rgb(238,64,4)" fg:x="3169" fg:w="1"/><text x="52.7778%" y="863.50"></text></g><g><title>CSHA256::Write (18 samples, 0.30%)</title><rect x="52.2791%" y="901" width="0.2984%" height="15" fill="rgb(221,131,51)" fg:x="3154" fg:w="18"/><text x="52.5291%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="52.5443%" y="885" width="0.0332%" height="15" fill="rgb(242,5,29)" fg:x="3170" fg:w="2"/><text x="52.7943%" y="895.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="52.5609%" y="869" width="0.0166%" height="15" fill="rgb(214,130,32)" fg:x="3171" fg:w="1"/><text x="52.8109%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.5609%" y="853" width="0.0166%" height="15" fill="rgb(244,210,16)" fg:x="3171" fg:w="1"/><text x="52.8109%" y="863.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.5609%" y="837" width="0.0166%" height="15" fill="rgb(234,48,26)" fg:x="3171" fg:w="1"/><text x="52.8109%" y="847.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.5609%" y="821" width="0.0166%" height="15" fill="rgb(231,82,38)" fg:x="3171" fg:w="1"/><text x="52.8109%" y="831.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.5609%" y="805" width="0.0166%" height="15" fill="rgb(254,128,41)" fg:x="3171" fg:w="1"/><text x="52.8109%" y="815.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="52.5941%" y="885" width="0.0332%" height="15" fill="rgb(212,73,49)" fg:x="3173" fg:w="2"/><text x="52.8441%" y="895.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="52.5941%" y="869" width="0.0332%" height="15" fill="rgb(205,62,54)" fg:x="3173" fg:w="2"/><text x="52.8441%" y="879.50"></text></g><g><title>ShiftMessageA (3 samples, 0.05%)</title><rect x="52.6272%" y="869" width="0.0497%" height="15" fill="rgb(228,0,8)" fg:x="3175" fg:w="3"/><text x="52.8772%" y="879.50"></text></g><g><title>_mm_sha256msg1_epu32 (3 samples, 0.05%)</title><rect x="52.6272%" y="853" width="0.0497%" height="15" fill="rgb(251,28,17)" fg:x="3175" fg:w="3"/><text x="52.8772%" y="863.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="52.6769%" y="853" width="0.0166%" height="15" fill="rgb(238,105,27)" fg:x="3178" fg:w="1"/><text x="52.9269%" y="863.50"></text></g><g><title>ShiftMessageB (5 samples, 0.08%)</title><rect x="52.6272%" y="885" width="0.0829%" height="15" fill="rgb(237,216,33)" fg:x="3175" fg:w="5"/><text x="52.8772%" y="895.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="52.6769%" y="869" width="0.0332%" height="15" fill="rgb(229,228,25)" fg:x="3178" fg:w="2"/><text x="52.9269%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="52.6935%" y="853" width="0.0166%" height="15" fill="rgb(233,75,23)" fg:x="3179" fg:w="1"/><text x="52.9435%" y="863.50"></text></g><g><title>CTransaction::ComputeHash (69 samples, 1.14%)</title><rect x="51.5830%" y="949" width="1.1437%" height="15" fill="rgb(231,207,16)" fg:x="3112" fg:w="69"/><text x="51.8330%" y="959.50"></text></g><g><title>HashWriter::GetHash (27 samples, 0.45%)</title><rect x="52.2791%" y="933" width="0.4475%" height="15" fill="rgb(231,191,45)" fg:x="3154" fg:w="27"/><text x="52.5291%" y="943.50"></text></g><g><title>CSHA256::Finalize (27 samples, 0.45%)</title><rect x="52.2791%" y="917" width="0.4475%" height="15" fill="rgb(224,133,17)" fg:x="3154" fg:w="27"/><text x="52.5291%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.15%)</title><rect x="52.5775%" y="901" width="0.1492%" height="15" fill="rgb(209,178,27)" fg:x="3172" fg:w="9"/><text x="52.8275%" y="911.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.7101%" y="885" width="0.0166%" height="15" fill="rgb(218,37,11)" fg:x="3180" fg:w="1"/><text x="52.9601%" y="895.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="52.7101%" y="869" width="0.0166%" height="15" fill="rgb(251,226,25)" fg:x="3180" fg:w="1"/><text x="52.9601%" y="879.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="52.7267%" y="837" width="0.0332%" height="15" fill="rgb(209,222,27)" fg:x="3181" fg:w="2"/><text x="52.9767%" y="847.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="52.7598%" y="821" width="0.0332%" height="15" fill="rgb(238,22,21)" fg:x="3183" fg:w="2"/><text x="53.0098%" y="831.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="52.7598%" y="805" width="0.0332%" height="15" fill="rgb(233,161,25)" fg:x="3183" fg:w="2"/><text x="53.0098%" y="815.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="52.7930%" y="805" width="0.0166%" height="15" fill="rgb(226,122,53)" fg:x="3185" fg:w="1"/><text x="53.0430%" y="815.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="52.7930%" y="789" width="0.0166%" height="15" fill="rgb(220,123,17)" fg:x="3185" fg:w="1"/><text x="53.0430%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (6 samples, 0.10%)</title><rect x="52.7598%" y="837" width="0.0995%" height="15" fill="rgb(230,224,35)" fg:x="3183" fg:w="6"/><text x="53.0098%" y="847.50"></text></g><g><title>ShiftMessageB (4 samples, 0.07%)</title><rect x="52.7930%" y="821" width="0.0663%" height="15" fill="rgb(246,83,8)" fg:x="3185" fg:w="4"/><text x="53.0430%" y="831.50"></text></g><g><title>ShiftMessageC (3 samples, 0.05%)</title><rect x="52.8095%" y="805" width="0.0497%" height="15" fill="rgb(230,214,17)" fg:x="3186" fg:w="3"/><text x="53.0595%" y="815.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.05%)</title><rect x="52.8095%" y="789" width="0.0497%" height="15" fill="rgb(222,97,18)" fg:x="3186" fg:w="3"/><text x="53.0595%" y="799.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.8593%" y="565" width="0.0166%" height="15" fill="rgb(206,79,1)" fg:x="3189" fg:w="1"/><text x="53.1093%" y="575.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="52.8758%" y="565" width="0.0166%" height="15" fill="rgb(214,121,34)" fg:x="3190" fg:w="1"/><text x="53.1258%" y="575.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.8758%" y="549" width="0.0166%" height="15" fill="rgb(249,199,46)" fg:x="3190" fg:w="1"/><text x="53.1258%" y="559.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="52.8758%" y="533" width="0.0166%" height="15" fill="rgb(214,222,46)" fg:x="3190" fg:w="1"/><text x="53.1258%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="52.8593%" y="629" width="0.0497%" height="15" fill="rgb(248,168,30)" fg:x="3189" fg:w="3"/><text x="53.1093%" y="639.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="52.8593%" y="613" width="0.0497%" height="15" fill="rgb(226,14,28)" fg:x="3189" fg:w="3"/><text x="53.1093%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="52.8593%" y="597" width="0.0497%" height="15" fill="rgb(253,123,1)" fg:x="3189" fg:w="3"/><text x="53.1093%" y="607.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="52.8593%" y="581" width="0.0497%" height="15" fill="rgb(225,24,42)" fg:x="3189" fg:w="3"/><text x="53.1093%" y="591.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="565" width="0.0166%" height="15" fill="rgb(216,161,37)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.8924%" y="549" width="0.0166%" height="15" fill="rgb(251,164,26)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="533" width="0.0166%" height="15" fill="rgb(219,177,3)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="517" width="0.0166%" height="15" fill="rgb(222,65,0)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="501" width="0.0166%" height="15" fill="rgb(223,69,54)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="485" width="0.0166%" height="15" fill="rgb(235,30,27)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="469" width="0.0166%" height="15" fill="rgb(220,183,50)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="453" width="0.0166%" height="15" fill="rgb(248,198,15)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="463.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="437" width="0.0166%" height="15" fill="rgb(222,211,4)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="447.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="421" width="0.0166%" height="15" fill="rgb(214,102,34)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="431.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="405" width="0.0166%" height="15" fill="rgb(245,92,5)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="389" width="0.0166%" height="15" fill="rgb(252,72,51)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="399.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="373" width="0.0166%" height="15" fill="rgb(252,208,19)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="357" width="0.0166%" height="15" fill="rgb(211,69,7)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="367.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="341" width="0.0166%" height="15" fill="rgb(211,27,16)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="351.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="325" width="0.0166%" height="15" fill="rgb(219,216,14)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="335.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="309" width="0.0166%" height="15" fill="rgb(219,71,8)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="293" width="0.0166%" height="15" fill="rgb(223,170,53)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="277" width="0.0166%" height="15" fill="rgb(246,21,26)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="261" width="0.0166%" height="15" fill="rgb(248,20,46)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="271.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="245" width="0.0166%" height="15" fill="rgb(252,94,11)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="255.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="229" width="0.0166%" height="15" fill="rgb(236,163,8)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="239.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.8924%" y="213" width="0.0166%" height="15" fill="rgb(217,221,45)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="223.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="52.8924%" y="197" width="0.0166%" height="15" fill="rgb(238,38,17)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="207.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.8924%" y="181" width="0.0166%" height="15" fill="rgb(242,210,23)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="191.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.8924%" y="165" width="0.0166%" height="15" fill="rgb(250,86,53)" fg:x="3191" fg:w="1"/><text x="53.1424%" y="175.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9090%" y="533" width="0.0166%" height="15" fill="rgb(223,168,25)" fg:x="3192" fg:w="1"/><text x="53.1590%" y="543.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9090%" y="517" width="0.0166%" height="15" fill="rgb(251,189,4)" fg:x="3192" fg:w="1"/><text x="53.1590%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.9090%" y="501" width="0.0166%" height="15" fill="rgb(245,19,28)" fg:x="3192" fg:w="1"/><text x="53.1590%" y="511.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.9090%" y="485" width="0.0166%" height="15" fill="rgb(207,10,34)" fg:x="3192" fg:w="1"/><text x="53.1590%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.9090%" y="469" width="0.0166%" height="15" fill="rgb(235,153,31)" fg:x="3192" fg:w="1"/><text x="53.1590%" y="479.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.9256%" y="421" width="0.0166%" height="15" fill="rgb(228,72,37)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="431.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="405" width="0.0166%" height="15" fill="rgb(215,15,16)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="52.9256%" y="389" width="0.0166%" height="15" fill="rgb(250,119,29)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="373" width="0.0166%" height="15" fill="rgb(214,59,1)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="357" width="0.0166%" height="15" fill="rgb(223,109,25)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="341" width="0.0166%" height="15" fill="rgb(230,198,22)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="351.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="325" width="0.0166%" height="15" fill="rgb(245,184,46)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="335.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="309" width="0.0166%" height="15" fill="rgb(253,73,16)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="319.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="293" width="0.0166%" height="15" fill="rgb(206,94,45)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="303.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="277" width="0.0166%" height="15" fill="rgb(236,83,27)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="287.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="261" width="0.0166%" height="15" fill="rgb(220,196,8)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="271.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="245" width="0.0166%" height="15" fill="rgb(254,185,14)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="229" width="0.0166%" height="15" fill="rgb(226,50,22)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="239.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="213" width="0.0166%" height="15" fill="rgb(253,147,0)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="223.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="197" width="0.0166%" height="15" fill="rgb(252,46,33)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="207.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9256%" y="181" width="0.0166%" height="15" fill="rgb(242,22,54)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="191.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.9256%" y="165" width="0.0166%" height="15" fill="rgb(223,178,32)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="175.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.9256%" y="149" width="0.0166%" height="15" fill="rgb(214,106,53)" fg:x="3193" fg:w="1"/><text x="53.1756%" y="159.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (4 samples, 0.07%)</title><rect x="52.9090%" y="629" width="0.0663%" height="15" fill="rgb(232,65,50)" fg:x="3192" fg:w="4"/><text x="53.1590%" y="639.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="52.9090%" y="613" width="0.0663%" height="15" fill="rgb(231,110,28)" fg:x="3192" fg:w="4"/><text x="53.1590%" y="623.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="52.9090%" y="597" width="0.0663%" height="15" fill="rgb(216,71,40)" fg:x="3192" fg:w="4"/><text x="53.1590%" y="607.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="52.9090%" y="581" width="0.0663%" height="15" fill="rgb(229,89,53)" fg:x="3192" fg:w="4"/><text x="53.1590%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (4 samples, 0.07%)</title><rect x="52.9090%" y="565" width="0.0663%" height="15" fill="rgb(210,124,14)" fg:x="3192" fg:w="4"/><text x="53.1590%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (4 samples, 0.07%)</title><rect x="52.9090%" y="549" width="0.0663%" height="15" fill="rgb(236,213,6)" fg:x="3192" fg:w="4"/><text x="53.1590%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (3 samples, 0.05%)</title><rect x="52.9256%" y="533" width="0.0497%" height="15" fill="rgb(228,41,5)" fg:x="3193" fg:w="3"/><text x="53.1756%" y="543.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="52.9256%" y="517" width="0.0497%" height="15" fill="rgb(221,167,25)" fg:x="3193" fg:w="3"/><text x="53.1756%" y="527.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="52.9256%" y="501" width="0.0497%" height="15" fill="rgb(228,144,37)" fg:x="3193" fg:w="3"/><text x="53.1756%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (3 samples, 0.05%)</title><rect x="52.9256%" y="485" width="0.0497%" height="15" fill="rgb(227,189,38)" fg:x="3193" fg:w="3"/><text x="53.1756%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (3 samples, 0.05%)</title><rect x="52.9256%" y="469" width="0.0497%" height="15" fill="rgb(218,8,2)" fg:x="3193" fg:w="3"/><text x="53.1756%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="52.9256%" y="453" width="0.0497%" height="15" fill="rgb(209,61,28)" fg:x="3193" fg:w="3"/><text x="53.1756%" y="463.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="52.9256%" y="437" width="0.0497%" height="15" fill="rgb(233,140,39)" fg:x="3193" fg:w="3"/><text x="53.1756%" y="447.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="52.9422%" y="421" width="0.0332%" height="15" fill="rgb(251,66,48)" fg:x="3194" fg:w="2"/><text x="53.1922%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (1 samples, 0.02%)</title><rect x="52.9587%" y="405" width="0.0166%" height="15" fill="rgb(210,44,45)" fg:x="3195" fg:w="1"/><text x="53.2087%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9587%" y="389" width="0.0166%" height="15" fill="rgb(214,136,46)" fg:x="3195" fg:w="1"/><text x="53.2087%" y="399.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.9587%" y="373" width="0.0166%" height="15" fill="rgb(207,130,50)" fg:x="3195" fg:w="1"/><text x="53.2087%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="52.9587%" y="357" width="0.0166%" height="15" fill="rgb(228,102,49)" fg:x="3195" fg:w="1"/><text x="53.2087%" y="367.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="52.9587%" y="341" width="0.0166%" height="15" fill="rgb(253,55,1)" fg:x="3195" fg:w="1"/><text x="53.2087%" y="351.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.9753%" y="517" width="0.0166%" height="15" fill="rgb(238,222,9)" fg:x="3196" fg:w="1"/><text x="53.2253%" y="527.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="52.9919%" y="485" width="0.0332%" height="15" fill="rgb(246,99,6)" fg:x="3197" fg:w="2"/><text x="53.2419%" y="495.50"></text></g><g><title>CSHA256::Write (2 samples, 0.03%)</title><rect x="52.9919%" y="469" width="0.0332%" height="15" fill="rgb(219,110,26)" fg:x="3197" fg:w="2"/><text x="53.2419%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="52.9919%" y="517" width="0.0497%" height="15" fill="rgb(239,160,33)" fg:x="3197" fg:w="3"/><text x="53.2419%" y="527.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="52.9919%" y="501" width="0.0497%" height="15" fill="rgb(220,202,23)" fg:x="3197" fg:w="3"/><text x="53.2419%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="53.0250%" y="485" width="0.0166%" height="15" fill="rgb(208,80,26)" fg:x="3199" fg:w="1"/><text x="53.2750%" y="495.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="53.0250%" y="469" width="0.0166%" height="15" fill="rgb(243,85,7)" fg:x="3199" fg:w="1"/><text x="53.2750%" y="479.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="53.0250%" y="453" width="0.0166%" height="15" fill="rgb(228,77,47)" fg:x="3199" fg:w="1"/><text x="53.2750%" y="463.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.0416%" y="453" width="0.0166%" height="15" fill="rgb(212,226,8)" fg:x="3200" fg:w="1"/><text x="53.2916%" y="463.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.22%)</title><rect x="52.8593%" y="741" width="0.2155%" height="15" fill="rgb(241,120,54)" fg:x="3189" fg:w="13"/><text x="53.1093%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.22%)</title><rect x="52.8593%" y="725" width="0.2155%" height="15" fill="rgb(226,80,16)" fg:x="3189" fg:w="13"/><text x="53.1093%" y="735.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.22%)</title><rect x="52.8593%" y="709" width="0.2155%" height="15" fill="rgb(240,76,13)" fg:x="3189" fg:w="13"/><text x="53.1093%" y="719.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.22%)</title><rect x="52.8593%" y="693" width="0.2155%" height="15" fill="rgb(252,74,8)" fg:x="3189" fg:w="13"/><text x="53.1093%" y="703.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (13 samples, 0.22%)</title><rect x="52.8593%" y="677" width="0.2155%" height="15" fill="rgb(244,155,2)" fg:x="3189" fg:w="13"/><text x="53.1093%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.22%)</title><rect x="52.8593%" y="661" width="0.2155%" height="15" fill="rgb(215,81,35)" fg:x="3189" fg:w="13"/><text x="53.1093%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.22%)</title><rect x="52.8593%" y="645" width="0.2155%" height="15" fill="rgb(206,55,2)" fg:x="3189" fg:w="13"/><text x="53.1093%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (6 samples, 0.10%)</title><rect x="52.9753%" y="629" width="0.0995%" height="15" fill="rgb(231,2,34)" fg:x="3196" fg:w="6"/><text x="53.2253%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="52.9753%" y="613" width="0.0995%" height="15" fill="rgb(242,176,48)" fg:x="3196" fg:w="6"/><text x="53.2253%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="52.9753%" y="597" width="0.0995%" height="15" fill="rgb(249,31,36)" fg:x="3196" fg:w="6"/><text x="53.2253%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (6 samples, 0.10%)</title><rect x="52.9753%" y="581" width="0.0995%" height="15" fill="rgb(205,18,17)" fg:x="3196" fg:w="6"/><text x="53.2253%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.10%)</title><rect x="52.9753%" y="565" width="0.0995%" height="15" fill="rgb(254,130,5)" fg:x="3196" fg:w="6"/><text x="53.2253%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.10%)</title><rect x="52.9753%" y="549" width="0.0995%" height="15" fill="rgb(229,42,45)" fg:x="3196" fg:w="6"/><text x="53.2253%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (6 samples, 0.10%)</title><rect x="52.9753%" y="533" width="0.0995%" height="15" fill="rgb(245,95,25)" fg:x="3196" fg:w="6"/><text x="53.2253%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="53.0416%" y="517" width="0.0332%" height="15" fill="rgb(249,193,38)" fg:x="3200" fg:w="2"/><text x="53.2916%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="53.0416%" y="501" width="0.0332%" height="15" fill="rgb(241,140,43)" fg:x="3200" fg:w="2"/><text x="53.2916%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="53.0416%" y="485" width="0.0332%" height="15" fill="rgb(245,78,48)" fg:x="3200" fg:w="2"/><text x="53.2916%" y="495.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="53.0416%" y="469" width="0.0332%" height="15" fill="rgb(214,92,39)" fg:x="3200" fg:w="2"/><text x="53.2916%" y="479.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="53.0582%" y="453" width="0.0166%" height="15" fill="rgb(211,189,14)" fg:x="3201" fg:w="1"/><text x="53.3082%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (15 samples, 0.25%)</title><rect x="52.8593%" y="821" width="0.2486%" height="15" fill="rgb(218,7,24)" fg:x="3189" fg:w="15"/><text x="53.1093%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (15 samples, 0.25%)</title><rect x="52.8593%" y="805" width="0.2486%" height="15" fill="rgb(224,200,49)" fg:x="3189" fg:w="15"/><text x="53.1093%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.25%)</title><rect x="52.8593%" y="789" width="0.2486%" height="15" fill="rgb(218,210,14)" fg:x="3189" fg:w="15"/><text x="53.1093%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.25%)</title><rect x="52.8593%" y="773" width="0.2486%" height="15" fill="rgb(234,142,31)" fg:x="3189" fg:w="15"/><text x="53.1093%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (15 samples, 0.25%)</title><rect x="52.8593%" y="757" width="0.2486%" height="15" fill="rgb(227,165,2)" fg:x="3189" fg:w="15"/><text x="53.1093%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="53.0748%" y="741" width="0.0332%" height="15" fill="rgb(232,44,46)" fg:x="3202" fg:w="2"/><text x="53.3248%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="53.0748%" y="725" width="0.0332%" height="15" fill="rgb(236,149,47)" fg:x="3202" fg:w="2"/><text x="53.3248%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.03%)</title><rect x="53.0748%" y="709" width="0.0332%" height="15" fill="rgb(227,45,31)" fg:x="3202" fg:w="2"/><text x="53.3248%" y="719.50"></text></g><g><title>HashWriter::write (2 samples, 0.03%)</title><rect x="53.0748%" y="693" width="0.0332%" height="15" fill="rgb(240,176,51)" fg:x="3202" fg:w="2"/><text x="53.3248%" y="703.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.03%)</title><rect x="53.0748%" y="677" width="0.0332%" height="15" fill="rgb(249,146,41)" fg:x="3202" fg:w="2"/><text x="53.3248%" y="687.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.03%)</title><rect x="53.0748%" y="661" width="0.0332%" height="15" fill="rgb(213,208,4)" fg:x="3202" fg:w="2"/><text x="53.3248%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="53.1079%" y="629" width="0.0497%" height="15" fill="rgb(245,84,36)" fg:x="3204" fg:w="3"/><text x="53.3579%" y="639.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="53.1079%" y="613" width="0.0497%" height="15" fill="rgb(254,84,18)" fg:x="3204" fg:w="3"/><text x="53.3579%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="53.1079%" y="597" width="0.0497%" height="15" fill="rgb(225,38,54)" fg:x="3204" fg:w="3"/><text x="53.3579%" y="607.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="53.1079%" y="581" width="0.0497%" height="15" fill="rgb(246,50,30)" fg:x="3204" fg:w="3"/><text x="53.3579%" y="591.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="53.1079%" y="565" width="0.0497%" height="15" fill="rgb(246,148,9)" fg:x="3204" fg:w="3"/><text x="53.3579%" y="575.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.1411%" y="549" width="0.0166%" height="15" fill="rgb(223,75,4)" fg:x="3206" fg:w="1"/><text x="53.3911%" y="559.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.1576%" y="517" width="0.0166%" height="15" fill="rgb(239,148,41)" fg:x="3207" fg:w="1"/><text x="53.4076%" y="527.50"></text></g><g><title>CSHA256::Write (6 samples, 0.10%)</title><rect x="53.2074%" y="469" width="0.0995%" height="15" fill="rgb(205,195,3)" fg:x="3210" fg:w="6"/><text x="53.4574%" y="479.50"></text></g><g><title>memcpy (2 samples, 0.03%)</title><rect x="53.2737%" y="453" width="0.0332%" height="15" fill="rgb(254,161,1)" fg:x="3214" fg:w="2"/><text x="53.5237%" y="463.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="53.3068%" y="469" width="0.0166%" height="15" fill="rgb(211,229,8)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="453" width="0.0166%" height="15" fill="rgb(220,97,9)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="437" width="0.0166%" height="15" fill="rgb(240,218,8)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="421" width="0.0166%" height="15" fill="rgb(250,44,0)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="405" width="0.0166%" height="15" fill="rgb(236,41,53)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="389" width="0.0166%" height="15" fill="rgb(218,227,13)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="373" width="0.0166%" height="15" fill="rgb(217,94,32)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="383.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="53.3068%" y="357" width="0.0166%" height="15" fill="rgb(213,217,12)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="341" width="0.0166%" height="15" fill="rgb(229,13,46)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="325" width="0.0166%" height="15" fill="rgb(243,139,5)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="309" width="0.0166%" height="15" fill="rgb(249,38,45)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="293" width="0.0166%" height="15" fill="rgb(216,70,11)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3068%" y="277" width="0.0166%" height="15" fill="rgb(253,101,25)" fg:x="3216" fg:w="1"/><text x="53.5568%" y="287.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="53.3234%" y="469" width="0.0663%" height="15" fill="rgb(207,197,30)" fg:x="3217" fg:w="4"/><text x="53.5734%" y="479.50"></text></g><g><title>QuadRound (4 samples, 0.07%)</title><rect x="53.3234%" y="453" width="0.0663%" height="15" fill="rgb(238,87,13)" fg:x="3217" fg:w="4"/><text x="53.5734%" y="463.50"></text></g><g><title>_mm_shuffle_epi32 (4 samples, 0.07%)</title><rect x="53.3234%" y="437" width="0.0663%" height="15" fill="rgb(215,155,8)" fg:x="3217" fg:w="4"/><text x="53.5734%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3234%" y="421" width="0.0663%" height="15" fill="rgb(239,166,38)" fg:x="3217" fg:w="4"/><text x="53.5734%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3234%" y="405" width="0.0663%" height="15" fill="rgb(240,194,35)" fg:x="3217" fg:w="4"/><text x="53.5734%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3234%" y="389" width="0.0663%" height="15" fill="rgb(219,10,44)" fg:x="3217" fg:w="4"/><text x="53.5734%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3234%" y="373" width="0.0663%" height="15" fill="rgb(251,220,35)" fg:x="3217" fg:w="4"/><text x="53.5734%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3400%" y="357" width="0.0497%" height="15" fill="rgb(218,117,13)" fg:x="3218" fg:w="3"/><text x="53.5900%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3400%" y="341" width="0.0497%" height="15" fill="rgb(221,213,40)" fg:x="3218" fg:w="3"/><text x="53.5900%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3400%" y="325" width="0.0497%" height="15" fill="rgb(251,224,35)" fg:x="3218" fg:w="3"/><text x="53.5900%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3400%" y="309" width="0.0497%" height="15" fill="rgb(241,33,39)" fg:x="3218" fg:w="3"/><text x="53.5900%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3400%" y="293" width="0.0497%" height="15" fill="rgb(222,74,17)" fg:x="3218" fg:w="3"/><text x="53.5900%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3400%" y="277" width="0.0497%" height="15" fill="rgb(225,103,0)" fg:x="3218" fg:w="3"/><text x="53.5900%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3400%" y="261" width="0.0497%" height="15" fill="rgb(240,0,12)" fg:x="3218" fg:w="3"/><text x="53.5900%" y="271.50"></text></g><g><title>CSHA256::Write (14 samples, 0.23%)</title><rect x="53.1742%" y="485" width="0.2321%" height="15" fill="rgb(233,213,37)" fg:x="3208" fg:w="14"/><text x="53.4242%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="469" width="0.0166%" height="15" fill="rgb(225,84,52)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="53.3897%" y="453" width="0.0166%" height="15" fill="rgb(247,160,51)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="437" width="0.0166%" height="15" fill="rgb(244,60,51)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="421" width="0.0166%" height="15" fill="rgb(233,114,7)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="405" width="0.0166%" height="15" fill="rgb(246,136,16)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="389" width="0.0166%" height="15" fill="rgb(243,114,45)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="373" width="0.0166%" height="15" fill="rgb(247,183,43)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="357" width="0.0166%" height="15" fill="rgb(251,210,42)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="367.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="341" width="0.0166%" height="15" fill="rgb(221,88,35)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="351.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="325" width="0.0166%" height="15" fill="rgb(242,21,20)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="335.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="309" width="0.0166%" height="15" fill="rgb(233,226,36)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="293" width="0.0166%" height="15" fill="rgb(243,189,34)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="277" width="0.0166%" height="15" fill="rgb(207,145,50)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="261" width="0.0166%" height="15" fill="rgb(242,1,50)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="271.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="245" width="0.0166%" height="15" fill="rgb(231,65,32)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="255.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="229" width="0.0166%" height="15" fill="rgb(208,68,49)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="239.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="213" width="0.0166%" height="15" fill="rgb(253,54,49)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="223.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="197" width="0.0166%" height="15" fill="rgb(245,186,24)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="207.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="181" width="0.0166%" height="15" fill="rgb(209,2,41)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="165" width="0.0166%" height="15" fill="rgb(242,208,54)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="175.50"></text></g><g><title>Span&lt;std::byte const&gt; MakeByteSpan&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="149" width="0.0166%" height="15" fill="rgb(225,9,51)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="159.50"></text></g><g><title>Span&lt;unsigned char const&gt;::Span&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3897%" y="133" width="0.0166%" height="15" fill="rgb(207,207,25)" fg:x="3221" fg:w="1"/><text x="53.6397%" y="143.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="53.4228%" y="453" width="0.0166%" height="15" fill="rgb(253,96,18)" fg:x="3223" fg:w="1"/><text x="53.6728%" y="463.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="53.4228%" y="469" width="0.0332%" height="15" fill="rgb(252,215,20)" fg:x="3223" fg:w="2"/><text x="53.6728%" y="479.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="53.4394%" y="453" width="0.0166%" height="15" fill="rgb(245,227,26)" fg:x="3224" fg:w="1"/><text x="53.6894%" y="463.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="53.4560%" y="453" width="0.0166%" height="15" fill="rgb(241,208,0)" fg:x="3225" fg:w="1"/><text x="53.7060%" y="463.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="53.4560%" y="437" width="0.0166%" height="15" fill="rgb(224,130,10)" fg:x="3225" fg:w="1"/><text x="53.7060%" y="447.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.05%)</title><rect x="53.4726%" y="437" width="0.0497%" height="15" fill="rgb(237,29,0)" fg:x="3226" fg:w="3"/><text x="53.7226%" y="447.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="53.5223%" y="437" width="0.0166%" height="15" fill="rgb(219,27,41)" fg:x="3229" fg:w="1"/><text x="53.7723%" y="447.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.15%)</title><rect x="53.4063%" y="485" width="0.1492%" height="15" fill="rgb(245,101,19)" fg:x="3222" fg:w="9"/><text x="53.6563%" y="495.50"></text></g><g><title>ShiftMessageB (6 samples, 0.10%)</title><rect x="53.4560%" y="469" width="0.0995%" height="15" fill="rgb(243,44,37)" fg:x="3225" fg:w="6"/><text x="53.7060%" y="479.50"></text></g><g><title>ShiftMessageC (5 samples, 0.08%)</title><rect x="53.4726%" y="453" width="0.0829%" height="15" fill="rgb(228,213,43)" fg:x="3226" fg:w="5"/><text x="53.7226%" y="463.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="53.5389%" y="437" width="0.0166%" height="15" fill="rgb(219,163,21)" fg:x="3230" fg:w="1"/><text x="53.7889%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (24 samples, 0.40%)</title><rect x="53.1742%" y="517" width="0.3978%" height="15" fill="rgb(234,86,24)" fg:x="3208" fg:w="24"/><text x="53.4242%" y="527.50"></text></g><g><title>HashWriter::write (24 samples, 0.40%)</title><rect x="53.1742%" y="501" width="0.3978%" height="15" fill="rgb(225,10,24)" fg:x="3208" fg:w="24"/><text x="53.4242%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.5554%" y="485" width="0.0166%" height="15" fill="rgb(218,109,7)" fg:x="3231" fg:w="1"/><text x="53.8054%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.5720%" y="453" width="0.0166%" height="15" fill="rgb(210,20,26)" fg:x="3232" fg:w="1"/><text x="53.8220%" y="463.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="53.5886%" y="453" width="0.0166%" height="15" fill="rgb(216,18,1)" fg:x="3233" fg:w="1"/><text x="53.8386%" y="463.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="53.6052%" y="437" width="0.0166%" height="15" fill="rgb(206,163,23)" fg:x="3234" fg:w="1"/><text x="53.8552%" y="447.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="53.6052%" y="421" width="0.0166%" height="15" fill="rgb(229,150,31)" fg:x="3234" fg:w="1"/><text x="53.8552%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (32 samples, 0.53%)</title><rect x="53.1079%" y="821" width="0.5304%" height="15" fill="rgb(231,10,5)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="805" width="0.5304%" height="15" fill="rgb(250,40,50)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="789" width="0.5304%" height="15" fill="rgb(217,119,7)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="773" width="0.5304%" height="15" fill="rgb(245,214,40)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="757" width="0.5304%" height="15" fill="rgb(216,187,1)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="767.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="741" width="0.5304%" height="15" fill="rgb(237,146,21)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="725" width="0.5304%" height="15" fill="rgb(210,174,47)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="735.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="709" width="0.5304%" height="15" fill="rgb(218,111,39)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="719.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="693" width="0.5304%" height="15" fill="rgb(224,95,19)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="703.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="677" width="0.5304%" height="15" fill="rgb(234,15,38)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="661" width="0.5304%" height="15" fill="rgb(246,56,12)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (32 samples, 0.53%)</title><rect x="53.1079%" y="645" width="0.5304%" height="15" fill="rgb(247,16,17)" fg:x="3204" fg:w="32"/><text x="53.3579%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (29 samples, 0.48%)</title><rect x="53.1576%" y="629" width="0.4807%" height="15" fill="rgb(215,151,11)" fg:x="3207" fg:w="29"/><text x="53.4076%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.48%)</title><rect x="53.1576%" y="613" width="0.4807%" height="15" fill="rgb(225,16,24)" fg:x="3207" fg:w="29"/><text x="53.4076%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.48%)</title><rect x="53.1576%" y="597" width="0.4807%" height="15" fill="rgb(217,117,5)" fg:x="3207" fg:w="29"/><text x="53.4076%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (29 samples, 0.48%)</title><rect x="53.1576%" y="581" width="0.4807%" height="15" fill="rgb(246,187,53)" fg:x="3207" fg:w="29"/><text x="53.4076%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (29 samples, 0.48%)</title><rect x="53.1576%" y="565" width="0.4807%" height="15" fill="rgb(241,71,40)" fg:x="3207" fg:w="29"/><text x="53.4076%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (29 samples, 0.48%)</title><rect x="53.1576%" y="549" width="0.4807%" height="15" fill="rgb(231,67,39)" fg:x="3207" fg:w="29"/><text x="53.4076%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (29 samples, 0.48%)</title><rect x="53.1576%" y="533" width="0.4807%" height="15" fill="rgb(222,120,24)" fg:x="3207" fg:w="29"/><text x="53.4076%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="53.5720%" y="517" width="0.0663%" height="15" fill="rgb(248,3,3)" fg:x="3232" fg:w="4"/><text x="53.8220%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="53.5720%" y="501" width="0.0663%" height="15" fill="rgb(228,218,5)" fg:x="3232" fg:w="4"/><text x="53.8220%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="53.5720%" y="485" width="0.0663%" height="15" fill="rgb(212,202,43)" fg:x="3232" fg:w="4"/><text x="53.8220%" y="495.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="53.5720%" y="469" width="0.0663%" height="15" fill="rgb(235,183,2)" fg:x="3232" fg:w="4"/><text x="53.8220%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="53.6052%" y="453" width="0.0332%" height="15" fill="rgb(230,165,10)" fg:x="3234" fg:w="2"/><text x="53.8552%" y="463.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="53.6217%" y="437" width="0.0166%" height="15" fill="rgb(219,54,40)" fg:x="3235" fg:w="1"/><text x="53.8717%" y="447.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="53.6217%" y="421" width="0.0166%" height="15" fill="rgb(244,73,9)" fg:x="3235" fg:w="1"/><text x="53.8717%" y="431.50"></text></g><g><title>CSHA256::Write (9 samples, 0.15%)</title><rect x="53.6880%" y="661" width="0.1492%" height="15" fill="rgb(212,32,45)" fg:x="3239" fg:w="9"/><text x="53.9380%" y="671.50"></text></g><g><title>Load (1 samples, 0.02%)</title><rect x="53.8372%" y="645" width="0.0166%" height="15" fill="rgb(205,58,31)" fg:x="3248" fg:w="1"/><text x="54.0872%" y="655.50"></text></g><g><title>_mm_shuffle_epi8 (1 samples, 0.02%)</title><rect x="53.8372%" y="629" width="0.0166%" height="15" fill="rgb(250,120,43)" fg:x="3248" fg:w="1"/><text x="54.0872%" y="639.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="53.8538%" y="629" width="0.0166%" height="15" fill="rgb(235,13,10)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="613" width="0.0166%" height="15" fill="rgb(232,219,31)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="597" width="0.0166%" height="15" fill="rgb(218,157,51)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="581" width="0.0166%" height="15" fill="rgb(211,91,52)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="565" width="0.0166%" height="15" fill="rgb(240,173,1)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="549" width="0.0166%" height="15" fill="rgb(248,20,47)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="533" width="0.0166%" height="15" fill="rgb(217,221,40)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="517" width="0.0166%" height="15" fill="rgb(226,149,51)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="501" width="0.0166%" height="15" fill="rgb(252,193,7)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="485" width="0.0166%" height="15" fill="rgb(205,123,0)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="469" width="0.0166%" height="15" fill="rgb(233,173,25)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.8538%" y="453" width="0.0166%" height="15" fill="rgb(216,63,32)" fg:x="3249" fg:w="1"/><text x="54.1038%" y="463.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="53.8538%" y="645" width="0.0332%" height="15" fill="rgb(209,56,45)" fg:x="3249" fg:w="2"/><text x="54.1038%" y="655.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="53.8704%" y="629" width="0.0166%" height="15" fill="rgb(226,111,49)" fg:x="3250" fg:w="1"/><text x="54.1204%" y="639.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="53.8870%" y="613" width="0.0166%" height="15" fill="rgb(244,181,21)" fg:x="3251" fg:w="1"/><text x="54.1370%" y="623.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="53.8870%" y="645" width="0.0332%" height="15" fill="rgb(222,126,15)" fg:x="3251" fg:w="2"/><text x="54.1370%" y="655.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="53.8870%" y="629" width="0.0332%" height="15" fill="rgb(222,95,17)" fg:x="3251" fg:w="2"/><text x="54.1370%" y="639.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="53.9035%" y="613" width="0.0166%" height="15" fill="rgb(254,46,5)" fg:x="3252" fg:w="1"/><text x="54.1535%" y="623.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="53.9201%" y="629" width="0.0166%" height="15" fill="rgb(236,216,35)" fg:x="3253" fg:w="1"/><text x="54.1701%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.12%)</title><rect x="53.8372%" y="661" width="0.1160%" height="15" fill="rgb(217,187,26)" fg:x="3248" fg:w="7"/><text x="54.0872%" y="671.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="53.9201%" y="645" width="0.0332%" height="15" fill="rgb(207,192,25)" fg:x="3253" fg:w="2"/><text x="54.1701%" y="655.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="53.9367%" y="629" width="0.0166%" height="15" fill="rgb(253,135,27)" fg:x="3254" fg:w="1"/><text x="54.1867%" y="639.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="53.9533%" y="661" width="0.0332%" height="15" fill="rgb(211,122,29)" fg:x="3255" fg:w="2"/><text x="54.2033%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="53.9698%" y="645" width="0.0166%" height="15" fill="rgb(233,162,40)" fg:x="3256" fg:w="1"/><text x="54.2198%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.9698%" y="629" width="0.0166%" height="15" fill="rgb(222,184,47)" fg:x="3256" fg:w="1"/><text x="54.2198%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="53.9698%" y="613" width="0.0166%" height="15" fill="rgb(249,99,23)" fg:x="3256" fg:w="1"/><text x="54.2198%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="53.9698%" y="597" width="0.0166%" height="15" fill="rgb(214,60,12)" fg:x="3256" fg:w="1"/><text x="54.2198%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.9698%" y="581" width="0.0166%" height="15" fill="rgb(250,229,36)" fg:x="3256" fg:w="1"/><text x="54.2198%" y="591.50"></text></g><g><title>CSHA256::Write (23 samples, 0.38%)</title><rect x="53.6383%" y="677" width="0.3812%" height="15" fill="rgb(232,195,10)" fg:x="3236" fg:w="23"/><text x="53.8883%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="53.9864%" y="661" width="0.0332%" height="15" fill="rgb(205,213,31)" fg:x="3257" fg:w="2"/><text x="54.2364%" y="671.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0030%" y="645" width="0.0166%" height="15" fill="rgb(237,43,8)" fg:x="3258" fg:w="1"/><text x="54.2530%" y="655.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.0196%" y="661" width="0.0166%" height="15" fill="rgb(216,208,3)" fg:x="3259" fg:w="1"/><text x="54.2696%" y="671.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.0196%" y="645" width="0.0166%" height="15" fill="rgb(228,179,44)" fg:x="3259" fg:w="1"/><text x="54.2696%" y="655.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="54.0361%" y="645" width="0.0166%" height="15" fill="rgb(230,192,27)" fg:x="3260" fg:w="1"/><text x="54.2861%" y="655.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="54.0361%" y="629" width="0.0166%" height="15" fill="rgb(251,30,38)" fg:x="3260" fg:w="1"/><text x="54.2861%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.05%)</title><rect x="54.0196%" y="677" width="0.0497%" height="15" fill="rgb(246,55,52)" fg:x="3259" fg:w="3"/><text x="54.2696%" y="687.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="54.0361%" y="661" width="0.0332%" height="15" fill="rgb(249,79,26)" fg:x="3260" fg:w="2"/><text x="54.2861%" y="671.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="54.0527%" y="645" width="0.0166%" height="15" fill="rgb(220,202,16)" fg:x="3261" fg:w="1"/><text x="54.3027%" y="655.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="54.0527%" y="629" width="0.0166%" height="15" fill="rgb(250,170,23)" fg:x="3261" fg:w="1"/><text x="54.3027%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (27 samples, 0.45%)</title><rect x="53.6383%" y="709" width="0.4475%" height="15" fill="rgb(230,7,37)" fg:x="3236" fg:w="27"/><text x="53.8883%" y="719.50"></text></g><g><title>HashWriter::write (27 samples, 0.45%)</title><rect x="53.6383%" y="693" width="0.4475%" height="15" fill="rgb(213,71,1)" fg:x="3236" fg:w="27"/><text x="53.8883%" y="703.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="677" width="0.0166%" height="15" fill="rgb(227,87,39)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="687.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="54.0693%" y="661" width="0.0166%" height="15" fill="rgb(210,41,29)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="645" width="0.0166%" height="15" fill="rgb(206,191,31)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="629" width="0.0166%" height="15" fill="rgb(247,75,54)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="613" width="0.0166%" height="15" fill="rgb(208,54,50)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="597" width="0.0166%" height="15" fill="rgb(214,90,37)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="581" width="0.0166%" height="15" fill="rgb(220,132,6)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="565" width="0.0166%" height="15" fill="rgb(213,167,7)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="575.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="549" width="0.0166%" height="15" fill="rgb(243,36,27)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="559.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="533" width="0.0166%" height="15" fill="rgb(235,147,12)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="543.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="517" width="0.0166%" height="15" fill="rgb(212,198,44)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="501" width="0.0166%" height="15" fill="rgb(218,68,50)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="511.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="485" width="0.0166%" height="15" fill="rgb(224,79,48)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="469" width="0.0166%" height="15" fill="rgb(213,191,50)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="479.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="453" width="0.0166%" height="15" fill="rgb(254,146,10)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="463.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="437" width="0.0166%" height="15" fill="rgb(215,175,11)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="447.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="421" width="0.0166%" height="15" fill="rgb(207,49,7)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="405" width="0.0166%" height="15" fill="rgb(234,144,29)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="415.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="389" width="0.0166%" height="15" fill="rgb(213,222,48)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="373" width="0.0166%" height="15" fill="rgb(222,8,6)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="383.50"></text></g><g><title>Span&lt;std::byte const&gt; MakeByteSpan&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="357" width="0.0166%" height="15" fill="rgb(221,114,49)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="367.50"></text></g><g><title>Span&lt;unsigned char const&gt;::Span&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="54.0693%" y="341" width="0.0166%" height="15" fill="rgb(250,140,42)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="351.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (1 samples, 0.02%)</title><rect x="54.0693%" y="325" width="0.0166%" height="15" fill="rgb(250,150,27)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="335.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="54.0693%" y="309" width="0.0166%" height="15" fill="rgb(252,159,3)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="319.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="54.0693%" y="293" width="0.0166%" height="15" fill="rgb(241,182,3)" fg:x="3262" fg:w="1"/><text x="54.3193%" y="303.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.0859%" y="645" width="0.0166%" height="15" fill="rgb(236,3,9)" fg:x="3263" fg:w="1"/><text x="54.3359%" y="655.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="54.0859%" y="629" width="0.0166%" height="15" fill="rgb(223,227,51)" fg:x="3263" fg:w="1"/><text x="54.3359%" y="639.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="54.0859%" y="613" width="0.0166%" height="15" fill="rgb(232,133,30)" fg:x="3263" fg:w="1"/><text x="54.3359%" y="623.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="54.1024%" y="645" width="0.0166%" height="15" fill="rgb(209,93,27)" fg:x="3264" fg:w="1"/><text x="54.3524%" y="655.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.1024%" y="629" width="0.0166%" height="15" fill="rgb(208,108,34)" fg:x="3264" fg:w="1"/><text x="54.3524%" y="639.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.1024%" y="613" width="0.0166%" height="15" fill="rgb(215,189,13)" fg:x="3264" fg:w="1"/><text x="54.3524%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (30 samples, 0.50%)</title><rect x="53.6383%" y="741" width="0.4973%" height="15" fill="rgb(206,88,23)" fg:x="3236" fg:w="30"/><text x="53.8883%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (30 samples, 0.50%)</title><rect x="53.6383%" y="725" width="0.4973%" height="15" fill="rgb(240,173,0)" fg:x="3236" fg:w="30"/><text x="53.8883%" y="735.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="54.0859%" y="709" width="0.0497%" height="15" fill="rgb(223,106,52)" fg:x="3263" fg:w="3"/><text x="54.3359%" y="719.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="54.0859%" y="693" width="0.0497%" height="15" fill="rgb(206,130,16)" fg:x="3263" fg:w="3"/><text x="54.3359%" y="703.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="54.0859%" y="677" width="0.0497%" height="15" fill="rgb(220,54,25)" fg:x="3263" fg:w="3"/><text x="54.3359%" y="687.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="54.0859%" y="661" width="0.0497%" height="15" fill="rgb(210,4,38)" fg:x="3263" fg:w="3"/><text x="54.3359%" y="671.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.1190%" y="645" width="0.0166%" height="15" fill="rgb(238,94,39)" fg:x="3265" fg:w="1"/><text x="54.3690%" y="655.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.1522%" y="645" width="0.0166%" height="15" fill="rgb(234,124,34)" fg:x="3267" fg:w="1"/><text x="54.4022%" y="655.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="54.1522%" y="661" width="0.0332%" height="15" fill="rgb(221,91,40)" fg:x="3267" fg:w="2"/><text x="54.4022%" y="671.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.1687%" y="645" width="0.0166%" height="15" fill="rgb(246,53,28)" fg:x="3268" fg:w="1"/><text x="54.4187%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (34 samples, 0.56%)</title><rect x="53.6383%" y="821" width="0.5636%" height="15" fill="rgb(229,109,7)" fg:x="3236" fg:w="34"/><text x="53.8883%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (34 samples, 0.56%)</title><rect x="53.6383%" y="805" width="0.5636%" height="15" fill="rgb(249,117,8)" fg:x="3236" fg:w="34"/><text x="53.8883%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (34 samples, 0.56%)</title><rect x="53.6383%" y="789" width="0.5636%" height="15" fill="rgb(210,181,1)" fg:x="3236" fg:w="34"/><text x="53.8883%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.56%)</title><rect x="53.6383%" y="773" width="0.5636%" height="15" fill="rgb(211,66,1)" fg:x="3236" fg:w="34"/><text x="53.8883%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (34 samples, 0.56%)</title><rect x="53.6383%" y="757" width="0.5636%" height="15" fill="rgb(221,90,14)" fg:x="3236" fg:w="34"/><text x="53.8883%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="54.1356%" y="741" width="0.0663%" height="15" fill="rgb(219,222,44)" fg:x="3266" fg:w="4"/><text x="54.3856%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="54.1356%" y="725" width="0.0663%" height="15" fill="rgb(246,34,33)" fg:x="3266" fg:w="4"/><text x="54.3856%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="54.1356%" y="709" width="0.0663%" height="15" fill="rgb(227,135,41)" fg:x="3266" fg:w="4"/><text x="54.3856%" y="719.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="54.1356%" y="693" width="0.0663%" height="15" fill="rgb(226,15,14)" fg:x="3266" fg:w="4"/><text x="54.3856%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="54.1356%" y="677" width="0.0663%" height="15" fill="rgb(236,148,47)" fg:x="3266" fg:w="4"/><text x="54.3856%" y="687.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="54.1853%" y="661" width="0.0166%" height="15" fill="rgb(233,162,52)" fg:x="3269" fg:w="1"/><text x="54.4353%" y="671.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="54.1853%" y="645" width="0.0166%" height="15" fill="rgb(244,35,28)" fg:x="3269" fg:w="1"/><text x="54.4353%" y="655.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="54.1853%" y="629" width="0.0166%" height="15" fill="rgb(205,121,10)" fg:x="3269" fg:w="1"/><text x="54.4353%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (5 samples, 0.08%)</title><rect x="54.2019%" y="821" width="0.0829%" height="15" fill="rgb(250,58,18)" fg:x="3270" fg:w="5"/><text x="54.4519%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="54.2019%" y="805" width="0.0829%" height="15" fill="rgb(216,37,13)" fg:x="3270" fg:w="5"/><text x="54.4519%" y="815.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="54.2019%" y="789" width="0.0829%" height="15" fill="rgb(221,215,42)" fg:x="3270" fg:w="5"/><text x="54.4519%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (5 samples, 0.08%)</title><rect x="54.2019%" y="773" width="0.0829%" height="15" fill="rgb(217,214,19)" fg:x="3270" fg:w="5"/><text x="54.4519%" y="783.50"></text></g><g><title>HashWriter::write (5 samples, 0.08%)</title><rect x="54.2019%" y="757" width="0.0829%" height="15" fill="rgb(233,139,13)" fg:x="3270" fg:w="5"/><text x="54.4519%" y="767.50"></text></g><g><title>CTransaction::ComputeWitnessHash (5 samples, 0.08%)</title><rect x="54.2019%" y="741" width="0.0829%" height="15" fill="rgb(247,168,23)" fg:x="3270" fg:w="5"/><text x="54.4519%" y="751.50"></text></g><g><title>CTransaction::ComputeWitnessHash (5 samples, 0.08%)</title><rect x="54.2019%" y="725" width="0.0829%" height="15" fill="rgb(207,202,1)" fg:x="3270" fg:w="5"/><text x="54.4519%" y="735.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="54.2848%" y="741" width="0.0166%" height="15" fill="rgb(220,155,48)" fg:x="3275" fg:w="1"/><text x="54.5348%" y="751.50"></text></g><g><title>WriteBE32 (1 samples, 0.02%)</title><rect x="54.2848%" y="725" width="0.0166%" height="15" fill="rgb(250,43,26)" fg:x="3275" fg:w="1"/><text x="54.5348%" y="735.50"></text></g><g><title>htobe32_internal (1 samples, 0.02%)</title><rect x="54.2848%" y="709" width="0.0166%" height="15" fill="rgb(212,190,23)" fg:x="3275" fg:w="1"/><text x="54.5348%" y="719.50"></text></g><g><title>internal_bswap_32 (1 samples, 0.02%)</title><rect x="54.2848%" y="693" width="0.0166%" height="15" fill="rgb(216,39,24)" fg:x="3275" fg:w="1"/><text x="54.5348%" y="703.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.3179%" y="709" width="0.0166%" height="15" fill="rgb(252,113,16)" fg:x="3277" fg:w="1"/><text x="54.5679%" y="719.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.3179%" y="693" width="0.0166%" height="15" fill="rgb(208,113,19)" fg:x="3277" fg:w="1"/><text x="54.5679%" y="703.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="54.3013%" y="741" width="0.0497%" height="15" fill="rgb(234,107,25)" fg:x="3276" fg:w="3"/><text x="54.5513%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="54.3179%" y="725" width="0.0332%" height="15" fill="rgb(234,217,51)" fg:x="3277" fg:w="2"/><text x="54.5679%" y="735.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="54.3345%" y="709" width="0.0166%" height="15" fill="rgb(251,29,42)" fg:x="3278" fg:w="1"/><text x="54.5845%" y="719.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="54.3345%" y="693" width="0.0166%" height="15" fill="rgb(221,62,51)" fg:x="3278" fg:w="1"/><text x="54.5845%" y="703.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.3345%" y="677" width="0.0166%" height="15" fill="rgb(240,192,43)" fg:x="3278" fg:w="1"/><text x="54.5845%" y="687.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="54.3511%" y="709" width="0.0166%" height="15" fill="rgb(224,157,47)" fg:x="3279" fg:w="1"/><text x="54.6011%" y="719.50"></text></g><g><title>QuadRound (3 samples, 0.05%)</title><rect x="54.3511%" y="725" width="0.0497%" height="15" fill="rgb(226,84,45)" fg:x="3279" fg:w="3"/><text x="54.6011%" y="735.50"></text></g><g><title>_mm_shuffle_epi32 (2 samples, 0.03%)</title><rect x="54.3676%" y="709" width="0.0332%" height="15" fill="rgb(208,207,23)" fg:x="3280" fg:w="2"/><text x="54.6176%" y="719.50"></text></g><g><title>ShiftMessageA (2 samples, 0.03%)</title><rect x="54.4008%" y="709" width="0.0332%" height="15" fill="rgb(253,34,51)" fg:x="3282" fg:w="2"/><text x="54.6508%" y="719.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.03%)</title><rect x="54.4008%" y="693" width="0.0332%" height="15" fill="rgb(227,26,34)" fg:x="3282" fg:w="2"/><text x="54.6508%" y="703.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="54.4339%" y="693" width="0.0332%" height="15" fill="rgb(245,75,19)" fg:x="3284" fg:w="2"/><text x="54.6839%" y="703.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="54.4671%" y="693" width="0.0166%" height="15" fill="rgb(250,191,31)" fg:x="3286" fg:w="1"/><text x="54.7171%" y="703.50"></text></g><g><title>ShiftMessageB (6 samples, 0.10%)</title><rect x="54.4008%" y="725" width="0.0995%" height="15" fill="rgb(224,11,50)" fg:x="3282" fg:w="6"/><text x="54.6508%" y="735.50"></text></g><g><title>ShiftMessageC (4 samples, 0.07%)</title><rect x="54.4339%" y="709" width="0.0663%" height="15" fill="rgb(231,171,7)" fg:x="3284" fg:w="4"/><text x="54.6839%" y="719.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="54.4837%" y="693" width="0.0166%" height="15" fill="rgb(252,214,10)" fg:x="3287" fg:w="1"/><text x="54.7337%" y="703.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.5002%" y="709" width="0.0166%" height="15" fill="rgb(249,45,46)" fg:x="3288" fg:w="1"/><text x="54.7502%" y="719.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="54.5168%" y="709" width="0.0166%" height="15" fill="rgb(240,173,7)" fg:x="3289" fg:w="1"/><text x="54.7668%" y="719.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (102 samples, 1.69%)</title><rect x="52.8593%" y="837" width="1.6907%" height="15" fill="rgb(235,214,13)" fg:x="3189" fg:w="102"/><text x="53.1093%" y="847.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (16 samples, 0.27%)</title><rect x="54.2848%" y="821" width="0.2652%" height="15" fill="rgb(245,156,8)" fg:x="3275" fg:w="16"/><text x="54.5348%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.27%)</title><rect x="54.2848%" y="805" width="0.2652%" height="15" fill="rgb(235,46,12)" fg:x="3275" fg:w="16"/><text x="54.5348%" y="815.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.27%)</title><rect x="54.2848%" y="789" width="0.2652%" height="15" fill="rgb(221,81,14)" fg:x="3275" fg:w="16"/><text x="54.5348%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (16 samples, 0.27%)</title><rect x="54.2848%" y="773" width="0.2652%" height="15" fill="rgb(238,207,9)" fg:x="3275" fg:w="16"/><text x="54.5348%" y="783.50"></text></g><g><title>HashWriter::write (16 samples, 0.27%)</title><rect x="54.2848%" y="757" width="0.2652%" height="15" fill="rgb(224,129,35)" fg:x="3275" fg:w="16"/><text x="54.5348%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (12 samples, 0.20%)</title><rect x="54.3511%" y="741" width="0.1989%" height="15" fill="rgb(243,218,34)" fg:x="3279" fg:w="12"/><text x="54.6011%" y="751.50"></text></g><g><title>ShiftMessageC (3 samples, 0.05%)</title><rect x="54.5002%" y="725" width="0.0497%" height="15" fill="rgb(220,166,13)" fg:x="3288" fg:w="3"/><text x="54.7502%" y="735.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="54.5334%" y="709" width="0.0166%" height="15" fill="rgb(227,167,49)" fg:x="3290" fg:w="1"/><text x="54.7834%" y="719.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (112 samples, 1.86%)</title><rect x="52.7267%" y="917" width="1.8565%" height="15" fill="rgb(234,142,12)" fg:x="3181" fg:w="112"/><text x="52.9767%" y="927.50">H..</text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (112 samples, 1.86%)</title><rect x="52.7267%" y="901" width="1.8565%" height="15" fill="rgb(207,100,48)" fg:x="3181" fg:w="112"/><text x="52.9767%" y="911.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (112 samples, 1.86%)</title><rect x="52.7267%" y="885" width="1.8565%" height="15" fill="rgb(210,25,14)" fg:x="3181" fg:w="112"/><text x="52.9767%" y="895.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (112 samples, 1.86%)</title><rect x="52.7267%" y="869" width="1.8565%" height="15" fill="rgb(246,116,27)" fg:x="3181" fg:w="112"/><text x="52.9767%" y="879.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (112 samples, 1.86%)</title><rect x="52.7267%" y="853" width="1.8565%" height="15" fill="rgb(214,193,42)" fg:x="3181" fg:w="112"/><text x="52.9767%" y="863.50">v..</text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="54.5500%" y="837" width="0.0332%" height="15" fill="rgb(214,122,8)" fg:x="3291" fg:w="2"/><text x="54.8000%" y="847.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5666%" y="821" width="0.0166%" height="15" fill="rgb(244,173,18)" fg:x="3292" fg:w="1"/><text x="54.8166%" y="831.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="54.5831%" y="869" width="0.0166%" height="15" fill="rgb(232,68,19)" fg:x="3293" fg:w="1"/><text x="54.8331%" y="879.50"></text></g><g><title>CSHA256::Write (8 samples, 0.13%)</title><rect x="54.5997%" y="869" width="0.1326%" height="15" fill="rgb(236,224,1)" fg:x="3294" fg:w="8"/><text x="54.8497%" y="879.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="54.7157%" y="853" width="0.0166%" height="15" fill="rgb(240,11,8)" fg:x="3301" fg:w="1"/><text x="54.9657%" y="863.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="54.7323%" y="837" width="0.0166%" height="15" fill="rgb(244,159,20)" fg:x="3302" fg:w="1"/><text x="54.9823%" y="847.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="54.7323%" y="821" width="0.0166%" height="15" fill="rgb(240,223,54)" fg:x="3302" fg:w="1"/><text x="54.9823%" y="831.50"></text></g><g><title>ShiftMessageB (3 samples, 0.05%)</title><rect x="54.7323%" y="853" width="0.0497%" height="15" fill="rgb(237,146,5)" fg:x="3302" fg:w="3"/><text x="54.9823%" y="863.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="54.7489%" y="837" width="0.0332%" height="15" fill="rgb(218,221,32)" fg:x="3303" fg:w="2"/><text x="54.9989%" y="847.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.03%)</title><rect x="54.7489%" y="821" width="0.0332%" height="15" fill="rgb(244,96,26)" fg:x="3303" fg:w="2"/><text x="54.9989%" y="831.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="54.7323%" y="869" width="0.0663%" height="15" fill="rgb(245,184,37)" fg:x="3302" fg:w="4"/><text x="54.9823%" y="879.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="54.7820%" y="853" width="0.0166%" height="15" fill="rgb(248,91,47)" fg:x="3305" fg:w="1"/><text x="55.0320%" y="863.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="54.7820%" y="837" width="0.0166%" height="15" fill="rgb(243,199,8)" fg:x="3305" fg:w="1"/><text x="55.0320%" y="847.50"></text></g><g><title>CSHA256::Write (14 samples, 0.23%)</title><rect x="54.5831%" y="885" width="0.2321%" height="15" fill="rgb(249,12,15)" fg:x="3293" fg:w="14"/><text x="54.8331%" y="895.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.7986%" y="869" width="0.0166%" height="15" fill="rgb(245,97,12)" fg:x="3306" fg:w="1"/><text x="55.0486%" y="879.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.8152%" y="853" width="0.0166%" height="15" fill="rgb(244,61,1)" fg:x="3307" fg:w="1"/><text x="55.0652%" y="863.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.03%)</title><rect x="54.8318%" y="853" width="0.0332%" height="15" fill="rgb(222,194,10)" fg:x="3308" fg:w="2"/><text x="55.0818%" y="863.50"></text></g><g><title>QuadRound (4 samples, 0.07%)</title><rect x="54.8152%" y="869" width="0.0663%" height="15" fill="rgb(226,178,8)" fg:x="3307" fg:w="4"/><text x="55.0652%" y="879.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="54.8649%" y="853" width="0.0166%" height="15" fill="rgb(241,32,34)" fg:x="3310" fg:w="1"/><text x="55.1149%" y="863.50"></text></g><g><title>ShiftMessageA (5 samples, 0.08%)</title><rect x="54.8815%" y="853" width="0.0829%" height="15" fill="rgb(254,26,6)" fg:x="3311" fg:w="5"/><text x="55.1315%" y="863.50"></text></g><g><title>_mm_sha256msg1_epu32 (5 samples, 0.08%)</title><rect x="54.8815%" y="837" width="0.0829%" height="15" fill="rgb(249,71,11)" fg:x="3311" fg:w="5"/><text x="55.1315%" y="847.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.9644%" y="837" width="0.0166%" height="15" fill="rgb(232,170,27)" fg:x="3316" fg:w="1"/><text x="55.2144%" y="847.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.03%)</title><rect x="54.9809%" y="837" width="0.0332%" height="15" fill="rgb(214,223,17)" fg:x="3317" fg:w="2"/><text x="55.2309%" y="847.50"></text></g><g><title>ShiftMessageB (10 samples, 0.17%)</title><rect x="54.8815%" y="869" width="0.1658%" height="15" fill="rgb(250,18,15)" fg:x="3311" fg:w="10"/><text x="55.1315%" y="879.50"></text></g><g><title>ShiftMessageC (5 samples, 0.08%)</title><rect x="54.9644%" y="853" width="0.0829%" height="15" fill="rgb(212,153,51)" fg:x="3316" fg:w="5"/><text x="55.2144%" y="863.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.03%)</title><rect x="55.0141%" y="837" width="0.0332%" height="15" fill="rgb(219,194,12)" fg:x="3319" fg:w="2"/><text x="55.2641%" y="847.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.0472%" y="853" width="0.0166%" height="15" fill="rgb(212,58,17)" fg:x="3321" fg:w="1"/><text x="55.2972%" y="863.50"></text></g><g><title>CSHA256::Finalize (30 samples, 0.50%)</title><rect x="54.5831%" y="901" width="0.4973%" height="15" fill="rgb(254,5,10)" fg:x="3293" fg:w="30"/><text x="54.8331%" y="911.50"></text></g><g><title>sha256_x86_shani::Transform (16 samples, 0.27%)</title><rect x="54.8152%" y="885" width="0.2652%" height="15" fill="rgb(246,91,7)" fg:x="3307" fg:w="16"/><text x="55.0652%" y="895.50"></text></g><g><title>ShiftMessageC (2 samples, 0.03%)</title><rect x="55.0472%" y="869" width="0.0332%" height="15" fill="rgb(218,108,49)" fg:x="3321" fg:w="2"/><text x="55.2972%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="55.0638%" y="853" width="0.0166%" height="15" fill="rgb(238,123,20)" fg:x="3322" fg:w="1"/><text x="55.3138%" y="863.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="55.0804%" y="901" width="0.0497%" height="15" fill="rgb(231,69,23)" fg:x="3323" fg:w="3"/><text x="55.3304%" y="911.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="55.1135%" y="885" width="0.0166%" height="15" fill="rgb(230,209,3)" fg:x="3325" fg:w="1"/><text x="55.3635%" y="895.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.1301%" y="869" width="0.0166%" height="15" fill="rgb(231,19,0)" fg:x="3326" fg:w="1"/><text x="55.3801%" y="879.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="55.1301%" y="885" width="0.0332%" height="15" fill="rgb(226,192,25)" fg:x="3326" fg:w="2"/><text x="55.3801%" y="895.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="55.1467%" y="869" width="0.0166%" height="15" fill="rgb(223,175,53)" fg:x="3327" fg:w="1"/><text x="55.3967%" y="879.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="55.1633%" y="869" width="0.0166%" height="15" fill="rgb(248,35,51)" fg:x="3328" fg:w="1"/><text x="55.4133%" y="879.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="55.1633%" y="853" width="0.0166%" height="15" fill="rgb(230,37,26)" fg:x="3328" fg:w="1"/><text x="55.4133%" y="863.50"></text></g><g><title>ShiftMessageB (2 samples, 0.03%)</title><rect x="55.1633%" y="885" width="0.0332%" height="15" fill="rgb(206,120,22)" fg:x="3328" fg:w="2"/><text x="55.4133%" y="895.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="55.1798%" y="869" width="0.0166%" height="15" fill="rgb(207,165,28)" fg:x="3329" fg:w="1"/><text x="55.4298%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="55.1798%" y="853" width="0.0166%" height="15" fill="rgb(226,23,46)" fg:x="3329" fg:w="1"/><text x="55.4298%" y="863.50"></text></g><g><title>HashWriter::GetHash (38 samples, 0.63%)</title><rect x="54.5831%" y="917" width="0.6299%" height="15" fill="rgb(208,130,44)" fg:x="3293" fg:w="38"/><text x="54.8331%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (5 samples, 0.08%)</title><rect x="55.1301%" y="901" width="0.0829%" height="15" fill="rgb(231,67,8)" fg:x="3326" fg:w="5"/><text x="55.3801%" y="911.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="55.1964%" y="885" width="0.0166%" height="15" fill="rgb(205,183,22)" fg:x="3330" fg:w="1"/><text x="55.4464%" y="895.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.1964%" y="869" width="0.0166%" height="15" fill="rgb(224,47,9)" fg:x="3330" fg:w="1"/><text x="55.4464%" y="879.50"></text></g><g><title>CTransaction::ComputeWitnessHash (151 samples, 2.50%)</title><rect x="52.7267%" y="949" width="2.5029%" height="15" fill="rgb(250,183,49)" fg:x="3181" fg:w="151"/><text x="52.9767%" y="959.50">CT..</text></g><g><title>CTransaction::ComputeWitnessHash (151 samples, 2.50%)</title><rect x="52.7267%" y="933" width="2.5029%" height="15" fill="rgb(220,151,39)" fg:x="3181" fg:w="151"/><text x="52.9767%" y="943.50">CT..</text></g><g><title>HashWriter::HashWriter (1 samples, 0.02%)</title><rect x="55.2130%" y="917" width="0.0166%" height="15" fill="rgb(220,118,20)" fg:x="3331" fg:w="1"/><text x="55.4630%" y="927.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="55.2130%" y="901" width="0.0166%" height="15" fill="rgb(231,65,51)" fg:x="3331" fg:w="1"/><text x="55.4630%" y="911.50"></text></g><g><title>WriteBE32 (1 samples, 0.02%)</title><rect x="55.2130%" y="885" width="0.0166%" height="15" fill="rgb(253,125,37)" fg:x="3331" fg:w="1"/><text x="55.4630%" y="895.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="55.2130%" y="869" width="0.0166%" height="15" fill="rgb(232,102,6)" fg:x="3331" fg:w="1"/><text x="55.4630%" y="879.50"></text></g><g><title>Load (1 samples, 0.02%)</title><rect x="55.2296%" y="933" width="0.0166%" height="15" fill="rgb(251,105,13)" fg:x="3332" fg:w="1"/><text x="55.4796%" y="943.50"></text></g><g><title>_mm_shuffle_epi8 (1 samples, 0.02%)</title><rect x="55.2296%" y="917" width="0.0166%" height="15" fill="rgb(222,179,29)" fg:x="3332" fg:w="1"/><text x="55.4796%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="55.2296%" y="949" width="0.0332%" height="15" fill="rgb(229,180,53)" fg:x="3332" fg:w="2"/><text x="55.4796%" y="959.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="55.2461%" y="933" width="0.0166%" height="15" fill="rgb(238,104,13)" fg:x="3333" fg:w="1"/><text x="55.4961%" y="943.50"></text></g><g><title>_mm_blend_epi16 (1 samples, 0.02%)</title><rect x="55.2461%" y="917" width="0.0166%" height="15" fill="rgb(210,130,5)" fg:x="3333" fg:w="1"/><text x="55.4961%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="949" width="0.0166%" height="15" fill="rgb(233,87,49)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="933" width="0.0166%" height="15" fill="rgb(243,34,9)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="943.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="917" width="0.0166%" height="15" fill="rgb(235,225,10)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="927.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="901" width="0.0166%" height="15" fill="rgb(212,0,30)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="911.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="885" width="0.0166%" height="15" fill="rgb(211,177,0)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="895.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="869" width="0.0166%" height="15" fill="rgb(225,220,11)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="853" width="0.0166%" height="15" fill="rgb(215,10,13)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="863.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="837" width="0.0166%" height="15" fill="rgb(240,177,14)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="847.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="821" width="0.0166%" height="15" fill="rgb(243,7,39)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="831.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="805" width="0.0166%" height="15" fill="rgb(212,99,0)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="815.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="789" width="0.0166%" height="15" fill="rgb(225,162,48)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="799.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="55.2627%" y="773" width="0.0166%" height="15" fill="rgb(246,16,25)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="783.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.2627%" y="757" width="0.0166%" height="15" fill="rgb(220,150,2)" fg:x="3334" fg:w="1"/><text x="55.5127%" y="767.50"></text></g><g><title>CTransaction::CTransaction (225 samples, 3.73%)</title><rect x="51.5664%" y="965" width="3.7295%" height="15" fill="rgb(237,113,11)" fg:x="3111" fg:w="225"/><text x="51.8164%" y="975.50">CTra..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.2793%" y="949" width="0.0166%" height="15" fill="rgb(236,70,20)" fg:x="3335" fg:w="1"/><text x="55.5293%" y="959.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1 samples, 0.02%)</title><rect x="55.2959%" y="773" width="0.0166%" height="15" fill="rgb(234,94,7)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.2959%" y="757" width="0.0166%" height="15" fill="rgb(250,221,0)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.2959%" y="741" width="0.0166%" height="15" fill="rgb(245,149,46)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.2959%" y="725" width="0.0166%" height="15" fill="rgb(215,37,27)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.2959%" y="709" width="0.0166%" height="15" fill="rgb(232,65,3)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="719.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.2959%" y="693" width="0.0166%" height="15" fill="rgb(214,2,16)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="55.2959%" y="677" width="0.0166%" height="15" fill="rgb(227,131,50)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="687.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="55.2959%" y="661" width="0.0166%" height="15" fill="rgb(247,131,45)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="671.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::GetStream (1 samples, 0.02%)</title><rect x="55.2959%" y="645" width="0.0166%" height="15" fill="rgb(215,97,47)" fg:x="3336" fg:w="1"/><text x="55.5459%" y="655.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (406 samples, 6.73%)</title><rect x="48.5994%" y="1029" width="6.7297%" height="15" fill="rgb(233,143,12)" fg:x="2932" fg:w="406"/><text x="48.8494%" y="1039.50">std::_Sp_..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (406 samples, 6.73%)</title><rect x="48.5994%" y="1013" width="6.7297%" height="15" fill="rgb(222,57,17)" fg:x="2932" fg:w="406"/><text x="48.8494%" y="1023.50">void std:..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (406 samples, 6.73%)</title><rect x="48.5994%" y="997" width="6.7297%" height="15" fill="rgb(214,119,38)" fg:x="2932" fg:w="406"/><text x="48.8494%" y="1007.50">void std:..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (406 samples, 6.73%)</title><rect x="48.5994%" y="981" width="6.7297%" height="15" fill="rgb(217,28,47)" fg:x="2932" fg:w="406"/><text x="48.8494%" y="991.50">CTransact..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="965" width="0.0332%" height="15" fill="rgb(231,14,52)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="975.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="949" width="0.0332%" height="15" fill="rgb(220,158,18)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="933" width="0.0332%" height="15" fill="rgb(222,143,46)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="943.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="917" width="0.0332%" height="15" fill="rgb(227,165,5)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="927.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="901" width="0.0332%" height="15" fill="rgb(216,222,49)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="911.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="885" width="0.0332%" height="15" fill="rgb(238,73,39)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="895.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="869" width="0.0332%" height="15" fill="rgb(252,115,9)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="879.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="853" width="0.0332%" height="15" fill="rgb(238,202,4)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="863.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="837" width="0.0332%" height="15" fill="rgb(252,153,44)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="847.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="821" width="0.0332%" height="15" fill="rgb(235,128,27)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="831.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="805" width="0.0332%" height="15" fill="rgb(221,121,47)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="815.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (2 samples, 0.03%)</title><rect x="55.2959%" y="789" width="0.0332%" height="15" fill="rgb(247,211,47)" fg:x="3336" fg:w="2"/><text x="55.5459%" y="799.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (1 samples, 0.02%)</title><rect x="55.3124%" y="773" width="0.0166%" height="15" fill="rgb(252,47,49)" fg:x="3337" fg:w="1"/><text x="55.5624%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.3124%" y="757" width="0.0166%" height="15" fill="rgb(219,119,53)" fg:x="3337" fg:w="1"/><text x="55.5624%" y="767.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="55.3124%" y="741" width="0.0166%" height="15" fill="rgb(243,165,53)" fg:x="3337" fg:w="1"/><text x="55.5624%" y="751.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="55.3124%" y="725" width="0.0166%" height="15" fill="rgb(230,12,35)" fg:x="3337" fg:w="1"/><text x="55.5624%" y="735.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.02%)</title><rect x="55.3290%" y="933" width="0.0166%" height="15" fill="rgb(239,57,49)" fg:x="3338" fg:w="1"/><text x="55.5790%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3290%" y="917" width="0.0166%" height="15" fill="rgb(231,154,7)" fg:x="3338" fg:w="1"/><text x="55.5790%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3290%" y="901" width="0.0166%" height="15" fill="rgb(248,81,34)" fg:x="3338" fg:w="1"/><text x="55.5790%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3290%" y="885" width="0.0166%" height="15" fill="rgb(247,9,5)" fg:x="3338" fg:w="1"/><text x="55.5790%" y="895.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (411 samples, 6.81%)</title><rect x="48.5662%" y="1109" width="6.8125%" height="15" fill="rgb(228,172,27)" fg:x="2930" fg:w="411"/><text x="48.8162%" y="1119.50">void Unse..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (409 samples, 6.78%)</title><rect x="48.5994%" y="1093" width="6.7794%" height="15" fill="rgb(230,57,44)" fg:x="2932" fg:w="409"/><text x="48.8494%" y="1103.50">std::shar..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (409 samples, 6.78%)</title><rect x="48.5994%" y="1077" width="6.7794%" height="15" fill="rgb(249,35,22)" fg:x="2932" fg:w="409"/><text x="48.8494%" y="1087.50">std::shar..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (409 samples, 6.78%)</title><rect x="48.5994%" y="1061" width="6.7794%" height="15" fill="rgb(250,137,27)" fg:x="2932" fg:w="409"/><text x="48.8494%" y="1071.50">std::__sh..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (409 samples, 6.78%)</title><rect x="48.5994%" y="1045" width="6.7794%" height="15" fill="rgb(251,57,31)" fg:x="2932" fg:w="409"/><text x="48.8494%" y="1055.50">std::__sh..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="55.3290%" y="1029" width="0.0497%" height="15" fill="rgb(238,60,0)" fg:x="3338" fg:w="3"/><text x="55.5790%" y="1039.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (3 samples, 0.05%)</title><rect x="55.3290%" y="1013" width="0.0497%" height="15" fill="rgb(242,185,39)" fg:x="3338" fg:w="3"/><text x="55.5790%" y="1023.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (3 samples, 0.05%)</title><rect x="55.3290%" y="997" width="0.0497%" height="15" fill="rgb(240,63,43)" fg:x="3338" fg:w="3"/><text x="55.5790%" y="1007.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (3 samples, 0.05%)</title><rect x="55.3290%" y="981" width="0.0497%" height="15" fill="rgb(236,155,6)" fg:x="3338" fg:w="3"/><text x="55.5790%" y="991.50"></text></g><g><title>operator new (3 samples, 0.05%)</title><rect x="55.3290%" y="965" width="0.0497%" height="15" fill="rgb(215,11,29)" fg:x="3338" fg:w="3"/><text x="55.5790%" y="975.50"></text></g><g><title>malloc (3 samples, 0.05%)</title><rect x="55.3290%" y="949" width="0.0497%" height="15" fill="rgb(228,180,48)" fg:x="3338" fg:w="3"/><text x="55.5790%" y="959.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="55.3456%" y="933" width="0.0332%" height="15" fill="rgb(241,102,12)" fg:x="3339" fg:w="2"/><text x="55.5956%" y="943.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="55.3622%" y="917" width="0.0166%" height="15" fill="rgb(246,213,4)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="927.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="55.3622%" y="901" width="0.0166%" height="15" fill="rgb(218,134,35)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3622%" y="885" width="0.0166%" height="15" fill="rgb(251,117,35)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3622%" y="869" width="0.0166%" height="15" fill="rgb(206,156,45)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3622%" y="853" width="0.0166%" height="15" fill="rgb(218,52,27)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3622%" y="837" width="0.0166%" height="15" fill="rgb(238,83,36)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3622%" y="821" width="0.0166%" height="15" fill="rgb(218,53,43)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="55.3622%" y="805" width="0.0166%" height="15" fill="rgb(239,54,39)" fg:x="3340" fg:w="1"/><text x="55.6122%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.3788%" y="1109" width="0.0166%" height="15" fill="rgb(212,198,13)" fg:x="3341" fg:w="1"/><text x="55.6288%" y="1119.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="55.3788%" y="1093" width="0.0166%" height="15" fill="rgb(234,54,46)" fg:x="3341" fg:w="1"/><text x="55.6288%" y="1103.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="55.3788%" y="1077" width="0.0166%" height="15" fill="rgb(217,120,7)" fg:x="3341" fg:w="1"/><text x="55.6288%" y="1087.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (423 samples, 7.01%)</title><rect x="48.4005%" y="1333" width="7.0114%" height="15" fill="rgb(246,39,15)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1343.50">DataStrea..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1317" width="7.0114%" height="15" fill="rgb(242,143,31)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1327.50">void Unse..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1301" width="7.0114%" height="15" fill="rgb(252,60,24)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1311.50">void Para..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1285" width="7.0114%" height="15" fill="rgb(249,220,7)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1295.50">void Unse..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1269" width="7.0114%" height="15" fill="rgb(236,67,13)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1279.50">void CBlo..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1253" width="7.0114%" height="15" fill="rgb(210,62,39)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1263.50">void CBlo..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1237" width="7.0114%" height="15" fill="rgb(219,122,53)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1247.50">void CBlo..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1221" width="7.0114%" height="15" fill="rgb(218,87,25)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1231.50">void Acti..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1205" width="7.0114%" height="15" fill="rgb(234,179,48)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1215.50">void Unse..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1189" width="7.0114%" height="15" fill="rgb(248,90,0)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1199.50">void Unse..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1173" width="7.0114%" height="15" fill="rgb(207,228,37)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1183.50">void Unse..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1157" width="7.0114%" height="15" fill="rgb(235,214,15)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1167.50">void Wrap..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (423 samples, 7.01%)</title><rect x="48.4005%" y="1141" width="7.0114%" height="15" fill="rgb(210,144,39)" fg:x="2920" fg:w="423"/><text x="48.6505%" y="1151.50">void Vect..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (420 samples, 6.96%)</title><rect x="48.4502%" y="1125" width="6.9617%" height="15" fill="rgb(222,67,41)" fg:x="2923" fg:w="420"/><text x="48.7002%" y="1135.50">void Defa..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.3953%" y="1109" width="0.0166%" height="15" fill="rgb(205,35,37)" fg:x="3342" fg:w="1"/><text x="55.6453%" y="1119.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.3953%" y="1093" width="0.0166%" height="15" fill="rgb(216,125,40)" fg:x="3342" fg:w="1"/><text x="55.6453%" y="1103.50"></text></g><g><title>GetBlockProof (1 samples, 0.02%)</title><rect x="55.4119%" y="1333" width="0.0166%" height="15" fill="rgb(228,227,20)" fg:x="3343" fg:w="1"/><text x="55.6619%" y="1343.50"></text></g><g><title>QuadRound (6 samples, 0.10%)</title><rect x="55.4285%" y="1237" width="0.0995%" height="15" fill="rgb(242,173,45)" fg:x="3344" fg:w="6"/><text x="55.6785%" y="1247.50"></text></g><g><title>_mm_sha256rnds2_epu32 (6 samples, 0.10%)</title><rect x="55.4285%" y="1221" width="0.0995%" height="15" fill="rgb(215,79,24)" fg:x="3344" fg:w="6"/><text x="55.6785%" y="1231.50"></text></g><g><title>ShiftMessageA (2 samples, 0.03%)</title><rect x="55.5279%" y="1221" width="0.0332%" height="15" fill="rgb(238,164,38)" fg:x="3350" fg:w="2"/><text x="55.7779%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.03%)</title><rect x="55.5279%" y="1205" width="0.0332%" height="15" fill="rgb(245,196,38)" fg:x="3350" fg:w="2"/><text x="55.7779%" y="1215.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="55.5611%" y="1205" width="0.0166%" height="15" fill="rgb(231,217,29)" fg:x="3352" fg:w="1"/><text x="55.8111%" y="1215.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.03%)</title><rect x="55.5777%" y="1205" width="0.0332%" height="15" fill="rgb(245,6,4)" fg:x="3353" fg:w="2"/><text x="55.8277%" y="1215.50"></text></g><g><title>ShiftMessageB (7 samples, 0.12%)</title><rect x="55.5279%" y="1237" width="0.1160%" height="15" fill="rgb(214,76,49)" fg:x="3350" fg:w="7"/><text x="55.7779%" y="1247.50"></text></g><g><title>ShiftMessageC (5 samples, 0.08%)</title><rect x="55.5611%" y="1221" width="0.0829%" height="15" fill="rgb(205,96,12)" fg:x="3352" fg:w="5"/><text x="55.8111%" y="1231.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.03%)</title><rect x="55.6108%" y="1205" width="0.0332%" height="15" fill="rgb(243,131,4)" fg:x="3355" fg:w="2"/><text x="55.8608%" y="1215.50"></text></g><g><title>ComputeMerkleRoot (14 samples, 0.23%)</title><rect x="55.4285%" y="1285" width="0.2321%" height="15" fill="rgb(214,114,4)" fg:x="3344" fg:w="14"/><text x="55.6785%" y="1295.50"></text></g><g><title>SHA256D64 (14 samples, 0.23%)</title><rect x="55.4285%" y="1269" width="0.2321%" height="15" fill="rgb(234,215,15)" fg:x="3344" fg:w="14"/><text x="55.6785%" y="1279.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (14 samples, 0.23%)</title><rect x="55.4285%" y="1253" width="0.2321%" height="15" fill="rgb(250,216,45)" fg:x="3344" fg:w="14"/><text x="55.6785%" y="1263.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="55.6440%" y="1237" width="0.0166%" height="15" fill="rgb(236,128,4)" fg:x="3357" fg:w="1"/><text x="55.8940%" y="1247.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="55.6440%" y="1221" width="0.0166%" height="15" fill="rgb(234,50,33)" fg:x="3357" fg:w="1"/><text x="55.8940%" y="1231.50"></text></g><g><title>CheckMerkleRoot (15 samples, 0.25%)</title><rect x="55.4285%" y="1317" width="0.2486%" height="15" fill="rgb(253,131,37)" fg:x="3344" fg:w="15"/><text x="55.6785%" y="1327.50"></text></g><g><title>BlockMerkleRoot (15 samples, 0.25%)</title><rect x="55.4285%" y="1301" width="0.2486%" height="15" fill="rgb(218,55,27)" fg:x="3344" fg:w="15"/><text x="55.6785%" y="1311.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="55.6605%" y="1285" width="0.0166%" height="15" fill="rgb(241,220,28)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1295.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="55.6605%" y="1269" width="0.0166%" height="15" fill="rgb(241,90,48)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="55.6605%" y="1253" width="0.0166%" height="15" fill="rgb(216,43,37)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="55.6605%" y="1237" width="0.0166%" height="15" fill="rgb(207,173,9)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1247.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;uint256&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="55.6605%" y="1221" width="0.0166%" height="15" fill="rgb(240,126,30)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1231.50"></text></g><g><title>std::allocator&lt;uint256&gt;::allocate (1 samples, 0.02%)</title><rect x="55.6605%" y="1205" width="0.0166%" height="15" fill="rgb(228,178,53)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1215.50"></text></g><g><title>std::__new_allocator&lt;uint256&gt;::allocate (1 samples, 0.02%)</title><rect x="55.6605%" y="1189" width="0.0166%" height="15" fill="rgb(217,33,4)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1199.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="55.6605%" y="1173" width="0.0166%" height="15" fill="rgb(206,124,34)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1183.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="55.6605%" y="1157" width="0.0166%" height="15" fill="rgb(208,122,53)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1167.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="55.6605%" y="1141" width="0.0166%" height="15" fill="rgb(215,202,26)" fg:x="3358" fg:w="1"/><text x="55.9105%" y="1151.50"></text></g><g><title>SHA256D64 (1 samples, 0.02%)</title><rect x="55.6771%" y="1253" width="0.0166%" height="15" fill="rgb(232,198,31)" fg:x="3359" fg:w="1"/><text x="55.9271%" y="1263.50"></text></g><g><title>Load (1 samples, 0.02%)</title><rect x="55.6937%" y="1237" width="0.0166%" height="15" fill="rgb(222,23,35)" fg:x="3360" fg:w="1"/><text x="55.9437%" y="1247.50"></text></g><g><title>_mm_shuffle_epi8 (1 samples, 0.02%)</title><rect x="55.6937%" y="1221" width="0.0166%" height="15" fill="rgb(242,27,53)" fg:x="3360" fg:w="1"/><text x="55.9437%" y="1231.50"></text></g><g><title>_mm_add_epi32 (5 samples, 0.08%)</title><rect x="55.7103%" y="1221" width="0.0829%" height="15" fill="rgb(210,216,42)" fg:x="3361" fg:w="5"/><text x="55.9603%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (5 samples, 0.08%)</title><rect x="55.7931%" y="1221" width="0.0829%" height="15" fill="rgb(234,39,38)" fg:x="3366" fg:w="5"/><text x="56.0431%" y="1231.50"></text></g><g><title>QuadRound (11 samples, 0.18%)</title><rect x="55.7103%" y="1237" width="0.1823%" height="15" fill="rgb(235,126,54)" fg:x="3361" fg:w="11"/><text x="55.9603%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="55.8760%" y="1221" width="0.0166%" height="15" fill="rgb(235,150,33)" fg:x="3371" fg:w="1"/><text x="56.1260%" y="1231.50"></text></g><g><title>ShiftMessageA (3 samples, 0.05%)</title><rect x="55.8926%" y="1221" width="0.0497%" height="15" fill="rgb(249,49,53)" fg:x="3372" fg:w="3"/><text x="56.1426%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (3 samples, 0.05%)</title><rect x="55.8926%" y="1205" width="0.0497%" height="15" fill="rgb(238,60,50)" fg:x="3372" fg:w="3"/><text x="56.1426%" y="1215.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.03%)</title><rect x="55.9423%" y="1205" width="0.0332%" height="15" fill="rgb(210,5,2)" fg:x="3375" fg:w="2"/><text x="56.1923%" y="1215.50"></text></g><g><title>_mm_alignr_epi8 (3 samples, 0.05%)</title><rect x="55.9755%" y="1205" width="0.0497%" height="15" fill="rgb(214,207,24)" fg:x="3377" fg:w="3"/><text x="56.2255%" y="1215.50"></text></g><g><title>ShiftMessageB (13 samples, 0.22%)</title><rect x="55.8926%" y="1237" width="0.2155%" height="15" fill="rgb(228,173,2)" fg:x="3372" fg:w="13"/><text x="56.1426%" y="1247.50"></text></g><g><title>ShiftMessageC (10 samples, 0.17%)</title><rect x="55.9423%" y="1221" width="0.1658%" height="15" fill="rgb(244,26,8)" fg:x="3375" fg:w="10"/><text x="56.1923%" y="1231.50"></text></g><g><title>_mm_sha256msg2_epu32 (5 samples, 0.08%)</title><rect x="56.0252%" y="1205" width="0.0829%" height="15" fill="rgb(249,153,35)" fg:x="3380" fg:w="5"/><text x="56.2752%" y="1215.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="56.1081%" y="1237" width="0.0166%" height="15" fill="rgb(221,215,40)" fg:x="3385" fg:w="1"/><text x="56.3581%" y="1247.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="56.1081%" y="1221" width="0.0166%" height="15" fill="rgb(238,106,35)" fg:x="3385" fg:w="1"/><text x="56.3581%" y="1231.50"></text></g><g><title>IsBlockMutated (43 samples, 0.71%)</title><rect x="55.4285%" y="1333" width="0.7127%" height="15" fill="rgb(207,195,21)" fg:x="3344" fg:w="43"/><text x="55.6785%" y="1343.50"></text></g><g><title>CheckWitnessMalleation (28 samples, 0.46%)</title><rect x="55.6771%" y="1317" width="0.4641%" height="15" fill="rgb(205,43,29)" fg:x="3359" fg:w="28"/><text x="55.9271%" y="1327.50"></text></g><g><title>BlockWitnessMerkleRoot (28 samples, 0.46%)</title><rect x="55.6771%" y="1301" width="0.4641%" height="15" fill="rgb(236,35,21)" fg:x="3359" fg:w="28"/><text x="55.9271%" y="1311.50"></text></g><g><title>ComputeMerkleRoot (28 samples, 0.46%)</title><rect x="55.6771%" y="1285" width="0.4641%" height="15" fill="rgb(244,74,8)" fg:x="3359" fg:w="28"/><text x="55.9271%" y="1295.50"></text></g><g><title>SHA256D64 (28 samples, 0.46%)</title><rect x="55.6771%" y="1269" width="0.4641%" height="15" fill="rgb(241,229,7)" fg:x="3359" fg:w="28"/><text x="55.9271%" y="1279.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (27 samples, 0.45%)</title><rect x="55.6937%" y="1253" width="0.4475%" height="15" fill="rgb(212,223,25)" fg:x="3360" fg:w="27"/><text x="55.9437%" y="1263.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="56.1246%" y="1237" width="0.0166%" height="15" fill="rgb(234,58,53)" fg:x="3386" fg:w="1"/><text x="56.3746%" y="1247.50"></text></g><g><title>_mm_blend_epi16 (1 samples, 0.02%)</title><rect x="56.1246%" y="1221" width="0.0166%" height="15" fill="rgb(244,36,1)" fg:x="3386" fg:w="1"/><text x="56.3746%" y="1231.50"></text></g><g><title>ProcessOrphanTx (1 samples, 0.02%)</title><rect x="56.1412%" y="1333" width="0.0166%" height="15" fill="rgb(222,40,54)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1343.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (1 samples, 0.02%)</title><rect x="56.1412%" y="1317" width="0.0166%" height="15" fill="rgb(210,207,39)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1327.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (1 samples, 0.02%)</title><rect x="56.1412%" y="1301" width="0.0166%" height="15" fill="rgb(234,52,14)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1311.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.02%)</title><rect x="56.1412%" y="1285" width="0.0166%" height="15" fill="rgb(239,108,46)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1295.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="56.1412%" y="1269" width="0.0166%" height="15" fill="rgb(252,223,5)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1279.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.02%)</title><rect x="56.1412%" y="1253" width="0.0166%" height="15" fill="rgb(227,181,11)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1263.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="56.1412%" y="1237" width="0.0166%" height="15" fill="rgb(248,126,40)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1247.50"></text></g><g><title>__GI___lll_lock_wake (1 samples, 0.02%)</title><rect x="56.1412%" y="1221" width="0.0166%" height="15" fill="rgb(243,1,18)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1412%" y="1205" width="0.0166%" height="15" fill="rgb(214,145,23)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1412%" y="1189" width="0.0166%" height="15" fill="rgb(241,218,11)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1412%" y="1173" width="0.0166%" height="15" fill="rgb(214,219,24)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1412%" y="1157" width="0.0166%" height="15" fill="rgb(235,32,7)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1412%" y="1141" width="0.0166%" height="15" fill="rgb(227,121,28)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1412%" y="1125" width="0.0166%" height="15" fill="rgb(216,129,49)" fg:x="3387" fg:w="1"/><text x="56.3912%" y="1135.50"></text></g><g><title>SetTxRelay (1 samples, 0.02%)</title><rect x="56.1578%" y="1333" width="0.0166%" height="15" fill="rgb(207,194,50)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1343.50"></text></g><g><title>make_unique&lt;(anonymous namespace)::Peer::TxRelay&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1317" width="0.0166%" height="15" fill="rgb(207,4,18)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1327.50"></text></g><g><title>CRollingBloomFilter::CRollingBloomFilter (1 samples, 0.02%)</title><rect x="56.1578%" y="1301" width="0.0166%" height="15" fill="rgb(213,50,30)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1311.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="56.1578%" y="1285" width="0.0166%" height="15" fill="rgb(208,77,22)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1295.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="56.1578%" y="1269" width="0.0166%" height="15" fill="rgb(244,204,34)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1279.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1253" width="0.0166%" height="15" fill="rgb(230,20,17)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1263.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1237" width="0.0166%" height="15" fill="rgb(237,83,15)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1247.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1221" width="0.0166%" height="15" fill="rgb(221,109,25)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1231.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1205" width="0.0166%" height="15" fill="rgb(205,194,52)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1215.50"></text></g><g><title>unsigned long* std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1189" width="0.0166%" height="15" fill="rgb(244,173,54)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1199.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1173" width="0.0166%" height="15" fill="rgb(227,181,18)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1183.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1157" width="0.0166%" height="15" fill="rgb(238,36,30)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1167.50"></text></g><g><title>void std::__fill_a&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1141" width="0.0166%" height="15" fill="rgb(254,85,0)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1151.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;unsigned long&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="56.1578%" y="1125" width="0.0166%" height="15" fill="rgb(247,63,33)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1135.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="56.1578%" y="1109" width="0.0166%" height="15" fill="rgb(220,7,54)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="1093" width="0.0166%" height="15" fill="rgb(238,227,21)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="1077" width="0.0166%" height="15" fill="rgb(237,29,31)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="1061" width="0.0166%" height="15" fill="rgb(211,21,50)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="1045" width="0.0166%" height="15" fill="rgb(239,119,2)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="1029" width="0.0166%" height="15" fill="rgb(250,2,39)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="1013" width="0.0166%" height="15" fill="rgb(244,46,53)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="997" width="0.0166%" height="15" fill="rgb(209,21,19)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="981" width="0.0166%" height="15" fill="rgb(236,145,4)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.1578%" y="965" width="0.0166%" height="15" fill="rgb(220,133,36)" fg:x="3388" fg:w="1"/><text x="56.4078%" y="975.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (3 samples, 0.05%)</title><rect x="56.1744%" y="1333" width="0.0497%" height="15" fill="rgb(244,18,3)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1343.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (3 samples, 0.05%)</title><rect x="56.1744%" y="1317" width="0.0497%" height="15" fill="rgb(232,171,48)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1327.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (3 samples, 0.05%)</title><rect x="56.1744%" y="1301" width="0.0497%" height="15" fill="rgb(223,223,53)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1311.50"></text></g><g><title>std::mutex::lock (3 samples, 0.05%)</title><rect x="56.1744%" y="1285" width="0.0497%" height="15" fill="rgb(246,92,13)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1295.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (3 samples, 0.05%)</title><rect x="56.1744%" y="1269" width="0.0497%" height="15" fill="rgb(229,171,10)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1279.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="56.1744%" y="1253" width="0.0497%" height="15" fill="rgb(213,131,26)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1263.50"></text></g><g><title>__GI___lll_lock_wait (3 samples, 0.05%)</title><rect x="56.1744%" y="1237" width="0.0497%" height="15" fill="rgb(242,87,54)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1221" width="0.0497%" height="15" fill="rgb(237,21,35)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1205" width="0.0497%" height="15" fill="rgb(253,13,47)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1189" width="0.0497%" height="15" fill="rgb(215,122,49)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1173" width="0.0497%" height="15" fill="rgb(209,179,30)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1157" width="0.0497%" height="15" fill="rgb(235,100,24)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1141" width="0.0497%" height="15" fill="rgb(209,67,24)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1125" width="0.0497%" height="15" fill="rgb(206,74,32)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1109" width="0.0497%" height="15" fill="rgb(212,45,25)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1093" width="0.0497%" height="15" fill="rgb(239,26,3)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1077" width="0.0497%" height="15" fill="rgb(218,36,15)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1061" width="0.0497%" height="15" fill="rgb(206,108,24)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1045" width="0.0497%" height="15" fill="rgb(234,204,42)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1029" width="0.0497%" height="15" fill="rgb(229,2,11)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="56.1744%" y="1013" width="0.0497%" height="15" fill="rgb(221,20,48)" fg:x="3389" fg:w="3"/><text x="56.4244%" y="1023.50"></text></g><g><title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="56.2241%" y="1333" width="0.0166%" height="15" fill="rgb(244,164,10)" fg:x="3392" fg:w="1"/><text x="56.4741%" y="1343.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (5 samples, 0.08%)</title><rect x="56.2407%" y="1333" width="0.0829%" height="15" fill="rgb(243,229,2)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1343.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (5 samples, 0.08%)</title><rect x="56.2407%" y="1317" width="0.0829%" height="15" fill="rgb(232,131,37)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1327.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (5 samples, 0.08%)</title><rect x="56.2407%" y="1301" width="0.0829%" height="15" fill="rgb(217,156,11)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1311.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (5 samples, 0.08%)</title><rect x="56.2407%" y="1285" width="0.0829%" height="15" fill="rgb(239,99,48)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1295.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (5 samples, 0.08%)</title><rect x="56.2407%" y="1269" width="0.0829%" height="15" fill="rgb(231,209,9)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1279.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (5 samples, 0.08%)</title><rect x="56.2407%" y="1253" width="0.0829%" height="15" fill="rgb(254,97,27)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1263.50"></text></g><g><title>CNetMessage::~CNetMessage (5 samples, 0.08%)</title><rect x="56.2407%" y="1237" width="0.0829%" height="15" fill="rgb(223,151,38)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1247.50"></text></g><g><title>DataStream::~DataStream (5 samples, 0.08%)</title><rect x="56.2407%" y="1221" width="0.0829%" height="15" fill="rgb(219,206,35)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (5 samples, 0.08%)</title><rect x="56.2407%" y="1205" width="0.0829%" height="15" fill="rgb(216,130,31)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (5 samples, 0.08%)</title><rect x="56.2407%" y="1189" width="0.0829%" height="15" fill="rgb(251,97,34)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (5 samples, 0.08%)</title><rect x="56.2407%" y="1173" width="0.0829%" height="15" fill="rgb(246,159,47)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (5 samples, 0.08%)</title><rect x="56.2407%" y="1157" width="0.0829%" height="15" fill="rgb(232,87,10)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1167.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (5 samples, 0.08%)</title><rect x="56.2407%" y="1141" width="0.0829%" height="15" fill="rgb(249,1,37)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1151.50"></text></g><g><title>memory_cleanse (5 samples, 0.08%)</title><rect x="56.2407%" y="1125" width="0.0829%" height="15" fill="rgb(239,135,14)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1135.50"></text></g><g><title>memory_cleanse (5 samples, 0.08%)</title><rect x="56.2407%" y="1109" width="0.0829%" height="15" fill="rgb(253,116,46)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1119.50"></text></g><g><title>__memset_avx512_unaligned_erms (5 samples, 0.08%)</title><rect x="56.2407%" y="1093" width="0.0829%" height="15" fill="rgb(222,217,37)" fg:x="3393" fg:w="5"/><text x="56.4907%" y="1103.50"></text></g><g><title>V2Transport::SetMessageToSend (1 samples, 0.02%)</title><rect x="56.3236%" y="1285" width="0.0166%" height="15" fill="rgb(252,96,8)" fg:x="3398" fg:w="1"/><text x="56.5736%" y="1295.50"></text></g><g><title>BIP324Cipher::Encrypt (1 samples, 0.02%)</title><rect x="56.3236%" y="1269" width="0.0166%" height="15" fill="rgb(254,103,41)" fg:x="3398" fg:w="1"/><text x="56.5736%" y="1279.50"></text></g><g><title>FSChaCha20Poly1305::Encrypt (1 samples, 0.02%)</title><rect x="56.3236%" y="1253" width="0.0166%" height="15" fill="rgb(218,213,19)" fg:x="3398" fg:w="1"/><text x="56.5736%" y="1263.50"></text></g><g><title>ComputeTag (1 samples, 0.02%)</title><rect x="56.3236%" y="1237" width="0.0166%" height="15" fill="rgb(253,95,21)" fg:x="3398" fg:w="1"/><text x="56.5736%" y="1247.50"></text></g><g><title>Poly1305::Update (1 samples, 0.02%)</title><rect x="56.3236%" y="1221" width="0.0166%" height="15" fill="rgb(229,26,28)" fg:x="3398" fg:w="1"/><text x="56.5736%" y="1231.50"></text></g><g><title>poly1305_donna::poly1305_blocks (1 samples, 0.02%)</title><rect x="56.3236%" y="1205" width="0.0166%" height="15" fill="rgb(230,129,16)" fg:x="3398" fg:w="1"/><text x="56.5736%" y="1215.50"></text></g><g><title>__clone (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1509" width="43.8256%" height="15" fill="rgb(236,126,17)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1519.50">__clone</text></g><g><title>start_thread (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1493" width="43.8256%" height="15" fill="rgb(209,33,33)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1503.50">start_thread</text></g><g><title>execute_native_thread_routine (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1477" width="43.8256%" height="15" fill="rgb(227,85,29)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1487.50">execute_native_thread_routine</text></g><g><title>_M_run (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1461" width="43.8256%" height="15" fill="rgb(241,53,46)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1471.50">_M_run</text></g><g><title>operator (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1445" width="43.8256%" height="15" fill="rgb(228,167,53)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1429" width="43.8256%" height="15" fill="rgb(238,195,45)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1439.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1413" width="43.8256%" height="15" fill="rgb(252,124,45)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1423.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), ..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1397" width="43.8256%" height="15" fill="rgb(251,38,35)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1407.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::..</text></g><g><title>util::TraceThread (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1381" width="43.8256%" height="15" fill="rgb(227,33,2)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1391.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1365" width="43.8256%" height="15" fill="rgb(223,157,46)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1375.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (2,644 samples, 43.83%)</title><rect x="12.5311%" y="1349" width="43.8256%" height="15" fill="rgb(222,78,41)" fg:x="756" fg:w="2644"/><text x="12.7811%" y="1359.50">CConnman::ThreadMessageHandler</text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="56.3236%" y="1333" width="0.0332%" height="15" fill="rgb(248,176,11)" fg:x="3398" fg:w="2"/><text x="56.5736%" y="1343.50"></text></g><g><title>CConnman::PushMessage (2 samples, 0.03%)</title><rect x="56.3236%" y="1317" width="0.0332%" height="15" fill="rgb(241,221,18)" fg:x="3398" fg:w="2"/><text x="56.5736%" y="1327.50"></text></g><g><title>CConnman::SocketSendData (2 samples, 0.03%)</title><rect x="56.3236%" y="1301" width="0.0332%" height="15" fill="rgb(218,85,22)" fg:x="3398" fg:w="2"/><text x="56.5736%" y="1311.50"></text></g><g><title>__send (1 samples, 0.02%)</title><rect x="56.3401%" y="1285" width="0.0166%" height="15" fill="rgb(222,223,7)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1269" width="0.0166%" height="15" fill="rgb(254,59,39)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1253" width="0.0166%" height="15" fill="rgb(247,100,27)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1237" width="0.0166%" height="15" fill="rgb(237,207,10)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1221" width="0.0166%" height="15" fill="rgb(220,121,28)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1205" width="0.0166%" height="15" fill="rgb(213,223,20)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1189" width="0.0166%" height="15" fill="rgb(205,121,27)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1173" width="0.0166%" height="15" fill="rgb(253,24,53)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1157" width="0.0166%" height="15" fill="rgb(224,224,47)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1141" width="0.0166%" height="15" fill="rgb(250,125,36)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3401%" y="1125" width="0.0166%" height="15" fill="rgb(240,144,38)" fg:x="3399" fg:w="1"/><text x="56.5901%" y="1135.50"></text></g><g><title>__io_vtables (1 samples, 0.02%)</title><rect x="56.3567%" y="1509" width="0.0166%" height="15" fill="rgb(250,15,50)" fg:x="3400" fg:w="1"/><text x="56.6067%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="56.3567%" y="1493" width="0.0166%" height="15" fill="rgb(210,24,26)" fg:x="3400" fg:w="1"/><text x="56.6067%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.3567%" y="1477" width="0.0166%" height="15" fill="rgb(234,53,53)" fg:x="3400" fg:w="1"/><text x="56.6067%" y="1487.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="56.3733%" y="1509" width="0.0497%" height="15" fill="rgb(208,108,28)" fg:x="3401" fg:w="3"/><text x="56.6233%" y="1519.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="56.4230%" y="1509" width="0.0663%" height="15" fill="rgb(227,143,7)" fg:x="3404" fg:w="4"/><text x="56.6730%" y="1519.50"></text></g><g><title>_int_malloc (8 samples, 0.13%)</title><rect x="56.4893%" y="1509" width="0.1326%" height="15" fill="rgb(238,189,38)" fg:x="3408" fg:w="8"/><text x="56.7393%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="56.6053%" y="1493" width="0.0166%" height="15" fill="rgb(222,69,15)" fg:x="3415" fg:w="1"/><text x="56.8553%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="56.6219%" y="1509" width="0.0166%" height="15" fill="rgb(213,169,7)" fg:x="3416" fg:w="1"/><text x="56.8719%" y="1519.50"></text></g><g><title>crc32c::ExtendSse42 (15 samples, 0.25%)</title><rect x="56.6385%" y="1509" width="0.2486%" height="15" fill="rgb(251,219,4)" fg:x="3417" fg:w="15"/><text x="56.8885%" y="1519.50"></text></g><g><title>_mm_crc32_u64 (6 samples, 0.10%)</title><rect x="56.7877%" y="1493" width="0.0995%" height="15" fill="rgb(241,55,40)" fg:x="3426" fg:w="6"/><text x="57.0377%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (7 samples, 0.12%)</title><rect x="56.8871%" y="1509" width="0.1160%" height="15" fill="rgb(243,57,30)" fg:x="3432" fg:w="7"/><text x="57.1371%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="57.0031%" y="1477" width="0.0332%" height="15" fill="rgb(234,50,30)" fg:x="3439" fg:w="2"/><text x="57.2531%" y="1487.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="57.0363%" y="1477" width="0.0166%" height="15" fill="rgb(239,23,42)" fg:x="3441" fg:w="1"/><text x="57.2863%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="57.0031%" y="1509" width="0.0663%" height="15" fill="rgb(217,38,19)" fg:x="3439" fg:w="4"/><text x="57.2531%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (4 samples, 0.07%)</title><rect x="57.0031%" y="1493" width="0.0663%" height="15" fill="rgb(215,179,16)" fg:x="3439" fg:w="4"/><text x="57.2531%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="57.0529%" y="1477" width="0.0166%" height="15" fill="rgb(254,21,37)" fg:x="3442" fg:w="1"/><text x="57.3029%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="57.0695%" y="1509" width="0.0166%" height="15" fill="rgb(219,207,48)" fg:x="3443" fg:w="1"/><text x="57.3195%" y="1519.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="57.0695%" y="1493" width="0.0166%" height="15" fill="rgb(227,225,41)" fg:x="3443" fg:w="1"/><text x="57.3195%" y="1503.50"></text></g><g><title>leveldb::MutexLock::~MutexLock (1 samples, 0.02%)</title><rect x="57.0695%" y="1477" width="0.0166%" height="15" fill="rgb(223,130,1)" fg:x="3443" fg:w="1"/><text x="57.3195%" y="1487.50"></text></g><g><title>leveldb::port::Mutex::Unlock (1 samples, 0.02%)</title><rect x="57.0695%" y="1461" width="0.0166%" height="15" fill="rgb(249,54,42)" fg:x="3443" fg:w="1"/><text x="57.3195%" y="1471.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="57.0695%" y="1445" width="0.0166%" height="15" fill="rgb(248,69,25)" fg:x="3443" fg:w="1"/><text x="57.3195%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="57.0695%" y="1429" width="0.0166%" height="15" fill="rgb(234,21,32)" fg:x="3443" fg:w="1"/><text x="57.3195%" y="1439.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="57.0695%" y="1413" width="0.0166%" height="15" fill="rgb(252,136,6)" fg:x="3443" fg:w="1"/><text x="57.3195%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::status (1 samples, 0.02%)</title><rect x="57.0860%" y="1509" width="0.0166%" height="15" fill="rgb(245,87,12)" fg:x="3444" fg:w="1"/><text x="57.3360%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="57.1026%" y="1509" width="0.0166%" height="15" fill="rgb(208,12,15)" fg:x="3445" fg:w="1"/><text x="57.3526%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="57.1192%" y="1509" width="0.0332%" height="15" fill="rgb(250,98,2)" fg:x="3446" fg:w="2"/><text x="57.3692%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="57.1358%" y="1493" width="0.0166%" height="15" fill="rgb(205,213,15)" fg:x="3447" fg:w="1"/><text x="57.3858%" y="1503.50"></text></g><g><title>leveldb::DecodeFixed64 (1 samples, 0.02%)</title><rect x="57.1358%" y="1477" width="0.0166%" height="15" fill="rgb(248,192,44)" fg:x="3447" fg:w="1"/><text x="57.3858%" y="1487.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="57.1358%" y="1461" width="0.0166%" height="15" fill="rgb(221,89,17)" fg:x="3447" fg:w="1"/><text x="57.3858%" y="1471.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="57.1523%" y="1509" width="0.0166%" height="15" fill="rgb(209,55,3)" fg:x="3448" fg:w="1"/><text x="57.4023%" y="1519.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="57.1523%" y="1493" width="0.0166%" height="15" fill="rgb(247,23,45)" fg:x="3448" fg:w="1"/><text x="57.4023%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="57.1689%" y="1493" width="0.0332%" height="15" fill="rgb(235,152,23)" fg:x="3449" fg:w="2"/><text x="57.4189%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="57.2021%" y="1493" width="0.0497%" height="15" fill="rgb(244,63,13)" fg:x="3451" fg:w="3"/><text x="57.4521%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.2352%" y="1477" width="0.0166%" height="15" fill="rgb(227,30,37)" fg:x="3453" fg:w="1"/><text x="57.4852%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.2352%" y="1461" width="0.0166%" height="15" fill="rgb(224,49,42)" fg:x="3453" fg:w="1"/><text x="57.4852%" y="1471.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.10%)</title><rect x="57.1689%" y="1509" width="0.0995%" height="15" fill="rgb(218,129,5)" fg:x="3449" fg:w="6"/><text x="57.4189%" y="1519.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="57.2518%" y="1493" width="0.0166%" height="15" fill="rgb(240,199,54)" fg:x="3454" fg:w="1"/><text x="57.5018%" y="1503.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="57.2684%" y="1509" width="0.0166%" height="15" fill="rgb(234,31,13)" fg:x="3455" fg:w="1"/><text x="57.5184%" y="1519.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1 samples, 0.02%)</title><rect x="57.2684%" y="1493" width="0.0166%" height="15" fill="rgb(219,73,54)" fg:x="3455" fg:w="1"/><text x="57.5184%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="57.2684%" y="1477" width="0.0166%" height="15" fill="rgb(251,162,10)" fg:x="3455" fg:w="1"/><text x="57.5184%" y="1487.50"></text></g><g><title>malloc (5 samples, 0.08%)</title><rect x="57.2849%" y="1509" width="0.0829%" height="15" fill="rgb(240,138,47)" fg:x="3456" fg:w="5"/><text x="57.5349%" y="1519.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="57.3678%" y="1509" width="0.0166%" height="15" fill="rgb(216,138,26)" fg:x="3461" fg:w="1"/><text x="57.6178%" y="1519.50"></text></g><g><title>memory_cleanse (1 samples, 0.02%)</title><rect x="57.3844%" y="1509" width="0.0166%" height="15" fill="rgb(243,17,35)" fg:x="3462" fg:w="1"/><text x="57.6344%" y="1519.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="57.4010%" y="1141" width="0.0829%" height="15" fill="rgb(241,60,18)" fg:x="3463" fg:w="5"/><text x="57.6510%" y="1151.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (5 samples, 0.08%)</title><rect x="57.4010%" y="1125" width="0.0829%" height="15" fill="rgb(234,2,44)" fg:x="3463" fg:w="5"/><text x="57.6510%" y="1135.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (5 samples, 0.08%)</title><rect x="57.4010%" y="1109" width="0.0829%" height="15" fill="rgb(225,225,33)" fg:x="3463" fg:w="5"/><text x="57.6510%" y="1119.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (5 samples, 0.08%)</title><rect x="57.4010%" y="1093" width="0.0829%" height="15" fill="rgb(234,50,31)" fg:x="3463" fg:w="5"/><text x="57.6510%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="57.4175%" y="1077" width="0.0663%" height="15" fill="rgb(249,6,25)" fg:x="3464" fg:w="4"/><text x="57.6675%" y="1087.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="57.4175%" y="1061" width="0.0663%" height="15" fill="rgb(241,5,17)" fg:x="3464" fg:w="4"/><text x="57.6675%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="57.4175%" y="1045" width="0.0663%" height="15" fill="rgb(207,116,10)" fg:x="3464" fg:w="4"/><text x="57.6675%" y="1055.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="57.4175%" y="1029" width="0.0663%" height="15" fill="rgb(222,128,18)" fg:x="3464" fg:w="4"/><text x="57.6675%" y="1039.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (4 samples, 0.07%)</title><rect x="57.4175%" y="1013" width="0.0663%" height="15" fill="rgb(229,109,25)" fg:x="3464" fg:w="4"/><text x="57.6675%" y="1023.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (3 samples, 0.05%)</title><rect x="57.4341%" y="997" width="0.0497%" height="15" fill="rgb(222,102,25)" fg:x="3465" fg:w="3"/><text x="57.6841%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="57.4341%" y="981" width="0.0497%" height="15" fill="rgb(239,211,5)" fg:x="3465" fg:w="3"/><text x="57.6841%" y="991.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="57.4341%" y="965" width="0.0497%" height="15" fill="rgb(223,136,26)" fg:x="3465" fg:w="3"/><text x="57.6841%" y="975.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (3 samples, 0.05%)</title><rect x="57.4341%" y="949" width="0.0497%" height="15" fill="rgb(227,30,15)" fg:x="3465" fg:w="3"/><text x="57.6841%" y="959.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (3 samples, 0.05%)</title><rect x="57.4341%" y="933" width="0.0497%" height="15" fill="rgb(247,76,4)" fg:x="3465" fg:w="3"/><text x="57.6841%" y="943.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="57.4673%" y="917" width="0.0166%" height="15" fill="rgb(245,38,48)" fg:x="3467" fg:w="1"/><text x="57.7173%" y="927.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (6 samples, 0.10%)</title><rect x="57.4010%" y="1509" width="0.0995%" height="15" fill="rgb(210,220,14)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1519.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (6 samples, 0.10%)</title><rect x="57.4010%" y="1493" width="0.0995%" height="15" fill="rgb(224,60,51)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1503.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1477" width="0.0995%" height="15" fill="rgb(212,133,49)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1487.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1461" width="0.0995%" height="15" fill="rgb(231,39,22)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1471.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1445" width="0.0995%" height="15" fill="rgb(236,173,22)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1455.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1429" width="0.0995%" height="15" fill="rgb(210,70,0)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1439.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1413" width="0.0995%" height="15" fill="rgb(215,170,11)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1423.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1397" width="0.0995%" height="15" fill="rgb(220,154,28)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1381" width="0.0995%" height="15" fill="rgb(240,160,41)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1391.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1365" width="0.0995%" height="15" fill="rgb(243,215,41)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1375.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1349" width="0.0995%" height="15" fill="rgb(214,208,31)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1359.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1333" width="0.0995%" height="15" fill="rgb(247,57,22)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1343.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1317" width="0.0995%" height="15" fill="rgb(228,73,52)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1301" width="0.0995%" height="15" fill="rgb(252,60,9)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1311.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1285" width="0.0995%" height="15" fill="rgb(233,9,51)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1295.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1269" width="0.0995%" height="15" fill="rgb(223,67,14)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1279.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1253" width="0.0995%" height="15" fill="rgb(222,86,2)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1237" width="0.0995%" height="15" fill="rgb(243,58,54)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1247.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1221" width="0.0995%" height="15" fill="rgb(210,200,39)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1205" width="0.0995%" height="15" fill="rgb(238,135,9)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1215.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1189" width="0.0995%" height="15" fill="rgb(232,179,7)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1199.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1173" width="0.0995%" height="15" fill="rgb(245,65,41)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1183.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (6 samples, 0.10%)</title><rect x="57.4010%" y="1157" width="0.0995%" height="15" fill="rgb(227,43,8)" fg:x="3463" fg:w="6"/><text x="57.6510%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4838%" y="1141" width="0.0166%" height="15" fill="rgb(235,91,14)" fg:x="3468" fg:w="1"/><text x="57.7338%" y="1151.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="57.4838%" y="1125" width="0.0166%" height="15" fill="rgb(235,219,31)" fg:x="3468" fg:w="1"/><text x="57.7338%" y="1135.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (1 samples, 0.02%)</title><rect x="57.4838%" y="1109" width="0.0166%" height="15" fill="rgb(227,121,25)" fg:x="3468" fg:w="1"/><text x="57.7338%" y="1119.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="57.5004%" y="1509" width="0.0166%" height="15" fill="rgb(254,129,24)" fg:x="3469" fg:w="1"/><text x="57.7504%" y="1519.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="57.5170%" y="1509" width="0.0166%" height="15" fill="rgb(226,144,49)" fg:x="3470" fg:w="1"/><text x="57.7670%" y="1519.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="57.5170%" y="1493" width="0.0166%" height="15" fill="rgb(214,187,32)" fg:x="3470" fg:w="1"/><text x="57.7670%" y="1503.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="57.5170%" y="1477" width="0.0166%" height="15" fill="rgb(243,129,46)" fg:x="3470" fg:w="1"/><text x="57.7670%" y="1487.50"></text></g><g><title>start_thread (1 samples, 0.02%)</title><rect x="57.5336%" y="1509" width="0.0166%" height="15" fill="rgb(221,185,35)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1519.50"></text></g><g><title>execute_native_thread_routine (1 samples, 0.02%)</title><rect x="57.5336%" y="1493" width="0.0166%" height="15" fill="rgb(205,0,32)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1503.50"></text></g><g><title>_M_run (1 samples, 0.02%)</title><rect x="57.5336%" y="1477" width="0.0166%" height="15" fill="rgb(229,179,12)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1487.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="57.5336%" y="1461" width="0.0166%" height="15" fill="rgb(252,107,19)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1471.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (1 samples, 0.02%)</title><rect x="57.5336%" y="1445" width="0.0166%" height="15" fill="rgb(220,95,27)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1455.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="57.5336%" y="1429" width="0.0166%" height="15" fill="rgb(240,113,40)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1439.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (1 samples, 0.02%)</title><rect x="57.5336%" y="1413" width="0.0166%" height="15" fill="rgb(208,4,43)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1423.50"></text></g><g><title>util::TraceThread (1 samples, 0.02%)</title><rect x="57.5336%" y="1397" width="0.0166%" height="15" fill="rgb(247,189,30)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1407.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.02%)</title><rect x="57.5336%" y="1381" width="0.0166%" height="15" fill="rgb(231,157,17)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1391.50"></text></g><g><title>CConnman::ThreadMessageHandler (1 samples, 0.02%)</title><rect x="57.5336%" y="1365" width="0.0166%" height="15" fill="rgb(224,139,6)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1375.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1 samples, 0.02%)</title><rect x="57.5336%" y="1349" width="0.0166%" height="15" fill="rgb(223,83,16)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1359.50"></text></g><g><title>Chainstate::ActivateBestChain (1 samples, 0.02%)</title><rect x="57.5336%" y="1333" width="0.0166%" height="15" fill="rgb(232,211,20)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1343.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1 samples, 0.02%)</title><rect x="57.5336%" y="1317" width="0.0166%" height="15" fill="rgb(225,203,35)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1327.50"></text></g><g><title>Chainstate::ConnectTip (1 samples, 0.02%)</title><rect x="57.5336%" y="1301" width="0.0166%" height="15" fill="rgb(215,211,44)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1311.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="57.5336%" y="1285" width="0.0166%" height="15" fill="rgb(248,213,26)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1295.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="57.5336%" y="1269" width="0.0166%" height="15" fill="rgb(214,23,52)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1279.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="57.5336%" y="1253" width="0.0166%" height="15" fill="rgb(225,173,50)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1263.50"></text></g><g><title>CCoinsViewCache::HaveCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1237" width="0.0166%" height="15" fill="rgb(206,150,22)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1221" width="0.0166%" height="15" fill="rgb(239,64,23)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1231.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1205" width="0.0166%" height="15" fill="rgb(242,50,38)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1189" width="0.0166%" height="15" fill="rgb(217,91,15)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1199.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1173" width="0.0166%" height="15" fill="rgb(230,172,6)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1183.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="57.5336%" y="1157" width="0.0166%" height="15" fill="rgb(221,98,26)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1167.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1141" width="0.0166%" height="15" fill="rgb(227,210,45)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1151.50"></text></g><g><title>CCoinsViewBacked::GetCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1125" width="0.0166%" height="15" fill="rgb(206,8,30)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1135.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1109" width="0.0166%" height="15" fill="rgb(241,219,17)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1119.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="57.5336%" y="1093" width="0.0166%" height="15" fill="rgb(247,121,29)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1103.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (1 samples, 0.02%)</title><rect x="57.5336%" y="1077" width="0.0166%" height="15" fill="rgb(219,169,49)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1087.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="57.5336%" y="1061" width="0.0166%" height="15" fill="rgb(253,49,49)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1071.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.02%)</title><rect x="57.5336%" y="1045" width="0.0166%" height="15" fill="rgb(217,178,3)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1055.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.02%)</title><rect x="57.5336%" y="1029" width="0.0166%" height="15" fill="rgb(234,73,37)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1039.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.02%)</title><rect x="57.5336%" y="1013" width="0.0166%" height="15" fill="rgb(250,98,22)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1023.50"></text></g><g><title>leveldb::TableCache::Get (1 samples, 0.02%)</title><rect x="57.5336%" y="997" width="0.0166%" height="15" fill="rgb(220,108,37)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="1007.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="57.5336%" y="981" width="0.0166%" height="15" fill="rgb(225,168,10)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="991.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="57.5336%" y="965" width="0.0166%" height="15" fill="rgb(247,215,21)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="975.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="57.5336%" y="949" width="0.0166%" height="15" fill="rgb(253,189,31)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="959.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="57.5336%" y="933" width="0.0166%" height="15" fill="rgb(241,54,22)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="943.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="57.5336%" y="917" width="0.0166%" height="15" fill="rgb(211,87,4)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="927.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="57.5336%" y="901" width="0.0166%" height="15" fill="rgb(245,112,24)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="911.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="57.5336%" y="885" width="0.0166%" height="15" fill="rgb(235,190,41)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="895.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="57.5336%" y="869" width="0.0166%" height="15" fill="rgb(214,89,8)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5336%" y="853" width="0.0166%" height="15" fill="rgb(249,155,35)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5336%" y="837" width="0.0166%" height="15" fill="rgb(249,88,26)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5336%" y="821" width="0.0166%" height="15" fill="rgb(232,56,8)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5336%" y="805" width="0.0166%" height="15" fill="rgb(240,95,3)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5336%" y="789" width="0.0166%" height="15" fill="rgb(222,44,28)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5336%" y="773" width="0.0166%" height="15" fill="rgb(234,16,30)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.5336%" y="757" width="0.0166%" height="15" fill="rgb(223,26,17)" fg:x="3471" fg:w="1"/><text x="57.7836%" y="767.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.03%)</title><rect x="57.5501%" y="1509" width="0.0332%" height="15" fill="rgb(239,187,47)" fg:x="3472" fg:w="2"/><text x="57.8001%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="57.5667%" y="1493" width="0.0166%" height="15" fill="rgb(247,102,50)" fg:x="3473" fg:w="1"/><text x="57.8167%" y="1503.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="57.5667%" y="1477" width="0.0166%" height="15" fill="rgb(231,216,22)" fg:x="3473" fg:w="1"/><text x="57.8167%" y="1487.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="57.5667%" y="1461" width="0.0166%" height="15" fill="rgb(216,201,26)" fg:x="3473" fg:w="1"/><text x="57.8167%" y="1471.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="57.5667%" y="1445" width="0.0166%" height="15" fill="rgb(214,186,23)" fg:x="3473" fg:w="1"/><text x="57.8167%" y="1455.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="57.5667%" y="1429" width="0.0166%" height="15" fill="rgb(235,184,4)" fg:x="3473" fg:w="1"/><text x="57.8167%" y="1439.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="57.5667%" y="1413" width="0.0166%" height="15" fill="rgb(244,46,17)" fg:x="3473" fg:w="1"/><text x="57.8167%" y="1423.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="57.5667%" y="1397" width="0.0166%" height="15" fill="rgb(248,74,46)" fg:x="3473" fg:w="1"/><text x="57.8167%" y="1407.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (4 samples, 0.07%)</title><rect x="57.5833%" y="1509" width="0.0663%" height="15" fill="rgb(243,79,5)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (4 samples, 0.07%)</title><rect x="57.5833%" y="1493" width="0.0663%" height="15" fill="rgb(213,148,1)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1503.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (4 samples, 0.07%)</title><rect x="57.5833%" y="1477" width="0.0663%" height="15" fill="rgb(221,30,0)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1487.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="57.5833%" y="1461" width="0.0663%" height="15" fill="rgb(207,85,29)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1471.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="57.5833%" y="1445" width="0.0663%" height="15" fill="rgb(239,31,46)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="57.5833%" y="1429" width="0.0663%" height="15" fill="rgb(219,6,1)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1439.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (4 samples, 0.07%)</title><rect x="57.5833%" y="1413" width="0.0663%" height="15" fill="rgb(229,90,29)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1423.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (4 samples, 0.07%)</title><rect x="57.5833%" y="1397" width="0.0663%" height="15" fill="rgb(242,201,42)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1407.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (4 samples, 0.07%)</title><rect x="57.5833%" y="1381" width="0.0663%" height="15" fill="rgb(243,80,54)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1391.50"></text></g><g><title>Coin::~Coin (4 samples, 0.07%)</title><rect x="57.5833%" y="1365" width="0.0663%" height="15" fill="rgb(223,166,15)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1375.50"></text></g><g><title>CTxOut::~CTxOut (4 samples, 0.07%)</title><rect x="57.5833%" y="1349" width="0.0663%" height="15" fill="rgb(238,78,27)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1359.50"></text></g><g><title>CScript::~CScript (4 samples, 0.07%)</title><rect x="57.5833%" y="1333" width="0.0663%" height="15" fill="rgb(235,28,43)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1343.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (4 samples, 0.07%)</title><rect x="57.5833%" y="1317" width="0.0663%" height="15" fill="rgb(240,210,28)" fg:x="3474" fg:w="4"/><text x="57.8333%" y="1327.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="57.6496%" y="1509" width="0.0166%" height="15" fill="rgb(253,6,46)" fg:x="3478" fg:w="1"/><text x="57.8996%" y="1519.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%)</title><rect x="57.6662%" y="1509" width="0.0166%" height="15" fill="rgb(250,159,47)" fg:x="3479" fg:w="1"/><text x="57.9162%" y="1519.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6827%" y="1509" width="0.0166%" height="15" fill="rgb(216,139,2)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1519.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.02%)</title><rect x="57.6827%" y="1493" width="0.0166%" height="15" fill="rgb(221,124,44)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1503.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="57.6827%" y="1477" width="0.0166%" height="15" fill="rgb(205,37,22)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1487.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (1 samples, 0.02%)</title><rect x="57.6827%" y="1461" width="0.0166%" height="15" fill="rgb(250,55,8)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1471.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6827%" y="1445" width="0.0166%" height="15" fill="rgb(215,83,48)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1455.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (1 samples, 0.02%)</title><rect x="57.6827%" y="1429" width="0.0166%" height="15" fill="rgb(253,2,32)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1439.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (1 samples, 0.02%)</title><rect x="57.6827%" y="1413" width="0.0166%" height="15" fill="rgb(236,67,28)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1423.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (1 samples, 0.02%)</title><rect x="57.6827%" y="1397" width="0.0166%" height="15" fill="rgb(252,55,15)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1407.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="57.6827%" y="1381" width="0.0166%" height="15" fill="rgb(243,173,17)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1391.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="57.6827%" y="1365" width="0.0166%" height="15" fill="rgb(215,212,13)" fg:x="3480" fg:w="1"/><text x="57.9327%" y="1375.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="57.6993%" y="1509" width="0.0166%" height="15" fill="rgb(253,176,6)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1519.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="57.6993%" y="1493" width="0.0166%" height="15" fill="rgb(236,105,26)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1503.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="57.6993%" y="1477" width="0.0166%" height="15" fill="rgb(239,226,32)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1487.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="57.6993%" y="1461" width="0.0166%" height="15" fill="rgb(236,104,51)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1471.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="57.6993%" y="1445" width="0.0166%" height="15" fill="rgb(220,172,33)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1455.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="57.6993%" y="1429" width="0.0166%" height="15" fill="rgb(224,182,25)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1439.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="57.6993%" y="1413" width="0.0166%" height="15" fill="rgb(236,184,24)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1423.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="57.6993%" y="1397" width="0.0166%" height="15" fill="rgb(241,221,14)" fg:x="3481" fg:w="1"/><text x="57.9493%" y="1407.50"></text></g><g><title>unlink_chunk.isra.0 (2 samples, 0.03%)</title><rect x="57.7159%" y="1509" width="0.0332%" height="15" fill="rgb(227,146,5)" fg:x="3482" fg:w="2"/><text x="57.9659%" y="1519.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="57.7490%" y="1509" width="0.0332%" height="15" fill="rgb(214,15,23)" fg:x="3484" fg:w="2"/><text x="57.9990%" y="1519.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="57.7822%" y="1509" width="0.0166%" height="15" fill="rgb(233,157,31)" fg:x="3486" fg:w="1"/><text x="58.0322%" y="1519.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="57.8319%" y="1349" width="0.0332%" height="15" fill="rgb(211,27,52)" fg:x="3489" fg:w="2"/><text x="58.0819%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (2 samples, 0.03%)</title><rect x="57.8319%" y="1333" width="0.0332%" height="15" fill="rgb(212,223,15)" fg:x="3489" fg:w="2"/><text x="58.0819%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="57.8319%" y="1317" width="0.0332%" height="15" fill="rgb(254,211,0)" fg:x="3489" fg:w="2"/><text x="58.0819%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="57.8319%" y="1301" width="0.0332%" height="15" fill="rgb(205,43,38)" fg:x="3489" fg:w="2"/><text x="58.0819%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="57.8319%" y="1285" width="0.0332%" height="15" fill="rgb(242,206,46)" fg:x="3489" fg:w="2"/><text x="58.0819%" y="1295.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1269" width="0.0166%" height="15" fill="rgb(220,221,12)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1253" width="0.0166%" height="15" fill="rgb(217,156,35)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1263.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1237" width="0.0166%" height="15" fill="rgb(207,181,49)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1247.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1221" width="0.0166%" height="15" fill="rgb(235,103,47)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1231.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1205" width="0.0166%" height="15" fill="rgb(222,63,28)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1189" width="0.0166%" height="15" fill="rgb(244,137,21)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1173" width="0.0166%" height="15" fill="rgb(228,35,27)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1157" width="0.0166%" height="15" fill="rgb(226,191,41)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1167.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1141" width="0.0166%" height="15" fill="rgb(210,154,3)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1151.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1125" width="0.0166%" height="15" fill="rgb(216,60,49)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1135.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1109" width="0.0166%" height="15" fill="rgb(226,17,20)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1093" width="0.0166%" height="15" fill="rgb(206,115,35)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1077" width="0.0166%" height="15" fill="rgb(227,88,1)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1061" width="0.0166%" height="15" fill="rgb(230,222,24)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1071.50"></text></g><g><title>Span&lt;std::byte const&gt; MakeByteSpan&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1045" width="0.0166%" height="15" fill="rgb(214,124,32)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1055.50"></text></g><g><title>Span&lt;unsigned char const&gt;::Span&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8485%" y="1029" width="0.0166%" height="15" fill="rgb(240,41,36)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::data (1 samples, 0.02%)</title><rect x="57.8485%" y="1013" width="0.0166%" height="15" fill="rgb(221,17,52)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="57.8485%" y="997" width="0.0166%" height="15" fill="rgb(252,70,16)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="57.8485%" y="981" width="0.0166%" height="15" fill="rgb(250,177,4)" fg:x="3490" fg:w="1"/><text x="58.0985%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8817%" y="1157" width="0.0166%" height="15" fill="rgb(240,188,47)" fg:x="3492" fg:w="1"/><text x="58.1317%" y="1167.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.8817%" y="1141" width="0.0166%" height="15" fill="rgb(215,92,12)" fg:x="3492" fg:w="1"/><text x="58.1317%" y="1151.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="57.8817%" y="1125" width="0.0166%" height="15" fill="rgb(242,110,29)" fg:x="3492" fg:w="1"/><text x="58.1317%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (2 samples, 0.03%)</title><rect x="57.9148%" y="1045" width="0.0332%" height="15" fill="rgb(208,211,26)" fg:x="3494" fg:w="2"/><text x="58.1648%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (2 samples, 0.03%)</title><rect x="57.9148%" y="1029" width="0.0332%" height="15" fill="rgb(244,147,6)" fg:x="3494" fg:w="2"/><text x="58.1648%" y="1039.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (8 samples, 0.13%)</title><rect x="57.8651%" y="1349" width="0.1326%" height="15" fill="rgb(211,130,42)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1333" width="0.1326%" height="15" fill="rgb(220,63,1)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1317" width="0.1326%" height="15" fill="rgb(241,212,30)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1301" width="0.1326%" height="15" fill="rgb(233,153,17)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1285" width="0.1326%" height="15" fill="rgb(236,3,10)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1295.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1269" width="0.1326%" height="15" fill="rgb(232,41,21)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1253" width="0.1326%" height="15" fill="rgb(206,63,51)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1263.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1237" width="0.1326%" height="15" fill="rgb(250,214,3)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1247.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1221" width="0.1326%" height="15" fill="rgb(254,89,27)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1231.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1205" width="0.1326%" height="15" fill="rgb(249,41,14)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1189" width="0.1326%" height="15" fill="rgb(221,196,51)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (8 samples, 0.13%)</title><rect x="57.8651%" y="1173" width="0.1326%" height="15" fill="rgb(214,116,26)" fg:x="3491" fg:w="8"/><text x="58.1151%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (6 samples, 0.10%)</title><rect x="57.8982%" y="1157" width="0.0995%" height="15" fill="rgb(236,67,7)" fg:x="3493" fg:w="6"/><text x="58.1482%" y="1167.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="57.8982%" y="1141" width="0.0995%" height="15" fill="rgb(253,179,32)" fg:x="3493" fg:w="6"/><text x="58.1482%" y="1151.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="57.8982%" y="1125" width="0.0995%" height="15" fill="rgb(218,33,15)" fg:x="3493" fg:w="6"/><text x="58.1482%" y="1135.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (6 samples, 0.10%)</title><rect x="57.8982%" y="1109" width="0.0995%" height="15" fill="rgb(217,202,41)" fg:x="3493" fg:w="6"/><text x="58.1482%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.10%)</title><rect x="57.8982%" y="1093" width="0.0995%" height="15" fill="rgb(234,133,5)" fg:x="3493" fg:w="6"/><text x="58.1482%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.10%)</title><rect x="57.8982%" y="1077" width="0.0995%" height="15" fill="rgb(240,47,40)" fg:x="3493" fg:w="6"/><text x="58.1482%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (6 samples, 0.10%)</title><rect x="57.8982%" y="1061" width="0.0995%" height="15" fill="rgb(234,166,26)" fg:x="3493" fg:w="6"/><text x="58.1482%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (3 samples, 0.05%)</title><rect x="57.9480%" y="1045" width="0.0497%" height="15" fill="rgb(244,125,51)" fg:x="3496" fg:w="3"/><text x="58.1980%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="57.9811%" y="1029" width="0.0166%" height="15" fill="rgb(229,171,11)" fg:x="3498" fg:w="1"/><text x="58.2311%" y="1039.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1509" width="0.2155%" height="15" fill="rgb(224,38,45)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1519.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1493" width="0.2155%" height="15" fill="rgb(237,27,7)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1503.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1477" width="0.2155%" height="15" fill="rgb(216,52,7)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1487.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1461" width="0.2155%" height="15" fill="rgb(243,11,11)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1471.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1445" width="0.2155%" height="15" fill="rgb(253,167,20)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1455.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1429" width="0.2155%" height="15" fill="rgb(215,207,5)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1413" width="0.2155%" height="15" fill="rgb(252,127,31)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1397" width="0.2155%" height="15" fill="rgb(209,106,27)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1407.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1381" width="0.2155%" height="15" fill="rgb(214,220,18)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1391.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.22%)</title><rect x="57.7988%" y="1365" width="0.2155%" height="15" fill="rgb(237,89,12)" fg:x="3487" fg:w="13"/><text x="58.0488%" y="1375.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="57.9977%" y="1349" width="0.0166%" height="15" fill="rgb(209,167,36)" fg:x="3499" fg:w="1"/><text x="58.2477%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.9977%" y="1333" width="0.0166%" height="15" fill="rgb(243,45,22)" fg:x="3499" fg:w="1"/><text x="58.2477%" y="1343.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="57.9977%" y="1317" width="0.0166%" height="15" fill="rgb(239,2,46)" fg:x="3499" fg:w="1"/><text x="58.2477%" y="1327.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="57.9977%" y="1301" width="0.0166%" height="15" fill="rgb(241,101,0)" fg:x="3499" fg:w="1"/><text x="58.2477%" y="1311.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="58.0143%" y="1189" width="0.0497%" height="15" fill="rgb(244,34,31)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1199.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="58.0143%" y="1173" width="0.0497%" height="15" fill="rgb(248,23,22)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1183.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="58.0143%" y="1157" width="0.0497%" height="15" fill="rgb(218,27,48)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1141" width="0.0497%" height="15" fill="rgb(232,78,1)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1125" width="0.0497%" height="15" fill="rgb(233,169,12)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1109" width="0.0497%" height="15" fill="rgb(225,222,54)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1093" width="0.0497%" height="15" fill="rgb(245,126,29)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1077" width="0.0497%" height="15" fill="rgb(241,63,48)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1061" width="0.0497%" height="15" fill="rgb(235,126,38)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1045" width="0.0497%" height="15" fill="rgb(232,96,49)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1029" width="0.0497%" height="15" fill="rgb(211,146,40)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="1013" width="0.0497%" height="15" fill="rgb(247,93,44)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="997" width="0.0497%" height="15" fill="rgb(251,41,49)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.0143%" y="981" width="0.0497%" height="15" fill="rgb(218,155,12)" fg:x="3500" fg:w="3"/><text x="58.2643%" y="991.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1509" width="0.0663%" height="15" fill="rgb(221,161,30)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1519.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="58.0143%" y="1493" width="0.0663%" height="15" fill="rgb(221,179,11)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1503.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1477" width="0.0663%" height="15" fill="rgb(224,170,48)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1487.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1461" width="0.0663%" height="15" fill="rgb(223,117,5)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1471.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1445" width="0.0663%" height="15" fill="rgb(209,52,20)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1455.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1429" width="0.0663%" height="15" fill="rgb(209,19,41)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1439.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1413" width="0.0663%" height="15" fill="rgb(210,177,12)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1397" width="0.0663%" height="15" fill="rgb(211,159,37)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1407.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1381" width="0.0663%" height="15" fill="rgb(209,20,2)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1391.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1365" width="0.0663%" height="15" fill="rgb(244,3,46)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1375.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1349" width="0.0663%" height="15" fill="rgb(220,94,38)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1359.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1333" width="0.0663%" height="15" fill="rgb(253,14,31)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1343.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1317" width="0.0663%" height="15" fill="rgb(234,176,13)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1327.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1301" width="0.0663%" height="15" fill="rgb(218,62,25)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1311.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1285" width="0.0663%" height="15" fill="rgb(216,124,40)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1295.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1269" width="0.0663%" height="15" fill="rgb(228,170,12)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1279.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1253" width="0.0663%" height="15" fill="rgb(231,226,5)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1237" width="0.0663%" height="15" fill="rgb(237,122,22)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1247.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1221" width="0.0663%" height="15" fill="rgb(209,185,25)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (4 samples, 0.07%)</title><rect x="58.0143%" y="1205" width="0.0663%" height="15" fill="rgb(228,200,32)" fg:x="3500" fg:w="4"/><text x="58.2643%" y="1215.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.0640%" y="1189" width="0.0166%" height="15" fill="rgb(217,140,10)" fg:x="3503" fg:w="1"/><text x="58.3140%" y="1199.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="58.0806%" y="1509" width="0.0166%" height="15" fill="rgb(253,17,24)" fg:x="3504" fg:w="1"/><text x="58.3306%" y="1519.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (1 samples, 0.02%)</title><rect x="58.0971%" y="1317" width="0.0166%" height="15" fill="rgb(212,61,6)" fg:x="3505" fg:w="1"/><text x="58.3471%" y="1327.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="58.0971%" y="1301" width="0.0166%" height="15" fill="rgb(205,14,25)" fg:x="3505" fg:w="1"/><text x="58.3471%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="58.0971%" y="1285" width="0.0166%" height="15" fill="rgb(232,69,41)" fg:x="3505" fg:w="1"/><text x="58.3471%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.0971%" y="1269" width="0.0166%" height="15" fill="rgb(241,106,47)" fg:x="3505" fg:w="1"/><text x="58.3471%" y="1279.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="58.0971%" y="1253" width="0.0166%" height="15" fill="rgb(210,213,53)" fg:x="3505" fg:w="1"/><text x="58.3471%" y="1263.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.03%)</title><rect x="58.1137%" y="1237" width="0.0332%" height="15" fill="rgb(253,175,27)" fg:x="3506" fg:w="2"/><text x="58.3637%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (2 samples, 0.03%)</title><rect x="58.1137%" y="1221" width="0.0332%" height="15" fill="rgb(211,171,24)" fg:x="3506" fg:w="2"/><text x="58.3637%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (2 samples, 0.03%)</title><rect x="58.1137%" y="1205" width="0.0332%" height="15" fill="rgb(229,80,7)" fg:x="3506" fg:w="2"/><text x="58.3637%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="58.1137%" y="1189" width="0.0332%" height="15" fill="rgb(212,46,39)" fg:x="3506" fg:w="2"/><text x="58.3637%" y="1199.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="58.1137%" y="1173" width="0.0332%" height="15" fill="rgb(240,80,45)" fg:x="3506" fg:w="2"/><text x="58.3637%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (2 samples, 0.03%)</title><rect x="58.1137%" y="1157" width="0.0332%" height="15" fill="rgb(253,177,40)" fg:x="3506" fg:w="2"/><text x="58.3637%" y="1167.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="58.1303%" y="1141" width="0.0166%" height="15" fill="rgb(249,200,15)" fg:x="3507" fg:w="1"/><text x="58.3803%" y="1151.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="58.1634%" y="1205" width="0.0166%" height="15" fill="rgb(217,78,26)" fg:x="3509" fg:w="1"/><text x="58.4134%" y="1215.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="58.1634%" y="1189" width="0.0166%" height="15" fill="rgb(254,151,32)" fg:x="3509" fg:w="1"/><text x="58.4134%" y="1199.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="58.1634%" y="1173" width="0.0166%" height="15" fill="rgb(226,165,27)" fg:x="3509" fg:w="1"/><text x="58.4134%" y="1183.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="58.0971%" y="1365" width="0.0995%" height="15" fill="rgb(250,206,4)" fg:x="3505" fg:w="6"/><text x="58.3471%" y="1375.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.10%)</title><rect x="58.0971%" y="1349" width="0.0995%" height="15" fill="rgb(231,229,27)" fg:x="3505" fg:w="6"/><text x="58.3471%" y="1359.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (6 samples, 0.10%)</title><rect x="58.0971%" y="1333" width="0.0995%" height="15" fill="rgb(239,217,8)" fg:x="3505" fg:w="6"/><text x="58.3471%" y="1343.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (5 samples, 0.08%)</title><rect x="58.1137%" y="1317" width="0.0829%" height="15" fill="rgb(225,204,27)" fg:x="3506" fg:w="5"/><text x="58.3637%" y="1327.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="58.1137%" y="1301" width="0.0829%" height="15" fill="rgb(230,56,32)" fg:x="3506" fg:w="5"/><text x="58.3637%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (5 samples, 0.08%)</title><rect x="58.1137%" y="1285" width="0.0829%" height="15" fill="rgb(222,56,27)" fg:x="3506" fg:w="5"/><text x="58.3637%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="58.1137%" y="1269" width="0.0829%" height="15" fill="rgb(253,108,27)" fg:x="3506" fg:w="5"/><text x="58.3637%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="58.1137%" y="1253" width="0.0829%" height="15" fill="rgb(212,87,36)" fg:x="3506" fg:w="5"/><text x="58.3637%" y="1263.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="58.1469%" y="1237" width="0.0497%" height="15" fill="rgb(247,82,36)" fg:x="3508" fg:w="3"/><text x="58.3969%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (3 samples, 0.05%)</title><rect x="58.1469%" y="1221" width="0.0497%" height="15" fill="rgb(222,143,9)" fg:x="3508" fg:w="3"/><text x="58.3969%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="58.1800%" y="1205" width="0.0166%" height="15" fill="rgb(238,162,48)" fg:x="3510" fg:w="1"/><text x="58.4300%" y="1215.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="58.1800%" y="1189" width="0.0166%" height="15" fill="rgb(221,59,43)" fg:x="3510" fg:w="1"/><text x="58.4300%" y="1199.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1509" width="0.1492%" height="15" fill="rgb(205,166,41)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1519.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1493" width="0.1492%" height="15" fill="rgb(241,186,40)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1503.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1477" width="0.1492%" height="15" fill="rgb(216,119,35)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1487.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1461" width="0.1492%" height="15" fill="rgb(208,68,38)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1471.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1445" width="0.1492%" height="15" fill="rgb(217,113,1)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1455.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1429" width="0.1492%" height="15" fill="rgb(242,153,3)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1439.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1413" width="0.1492%" height="15" fill="rgb(229,76,35)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1423.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1397" width="0.1492%" height="15" fill="rgb(229,125,34)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1407.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.15%)</title><rect x="58.0971%" y="1381" width="0.1492%" height="15" fill="rgb(238,179,36)" fg:x="3505" fg:w="9"/><text x="58.3471%" y="1391.50"></text></g><g><title>malloc (3 samples, 0.05%)</title><rect x="58.1966%" y="1365" width="0.0497%" height="15" fill="rgb(244,183,19)" fg:x="3511" fg:w="3"/><text x="58.4466%" y="1375.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1509" width="0.0166%" height="15" fill="rgb(216,85,49)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1519.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1493" width="0.0166%" height="15" fill="rgb(208,161,47)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1477" width="0.0166%" height="15" fill="rgb(233,210,18)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1487.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1461" width="0.0166%" height="15" fill="rgb(205,104,42)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1471.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1445" width="0.0166%" height="15" fill="rgb(248,90,43)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1455.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1429" width="0.0166%" height="15" fill="rgb(206,198,11)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1439.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1413" width="0.0166%" height="15" fill="rgb(239,165,27)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1423.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1397" width="0.0166%" height="15" fill="rgb(246,44,32)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1407.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1381" width="0.0166%" height="15" fill="rgb(252,65,42)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1391.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1365" width="0.0166%" height="15" fill="rgb(246,197,18)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1375.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1349" width="0.0166%" height="15" fill="rgb(216,192,4)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1359.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1333" width="0.0166%" height="15" fill="rgb(208,117,10)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1343.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1317" width="0.0166%" height="15" fill="rgb(240,61,47)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1327.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1301" width="0.0166%" height="15" fill="rgb(228,178,21)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1285" width="0.0166%" height="15" fill="rgb(219,96,54)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1295.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1269" width="0.0166%" height="15" fill="rgb(250,177,24)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1279.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1253" width="0.0166%" height="15" fill="rgb(242,154,46)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1263.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="58.2463%" y="1237" width="0.0166%" height="15" fill="rgb(226,176,29)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1247.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="58.2463%" y="1221" width="0.0166%" height="15" fill="rgb(226,29,2)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1231.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="58.2463%" y="1205" width="0.0166%" height="15" fill="rgb(237,104,14)" fg:x="3514" fg:w="1"/><text x="58.4963%" y="1215.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="58.2629%" y="1509" width="0.0166%" height="15" fill="rgb(245,207,31)" fg:x="3515" fg:w="1"/><text x="58.5129%" y="1519.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.08%)</title><rect x="58.2795%" y="1509" width="0.0829%" height="15" fill="rgb(229,211,45)" fg:x="3516" fg:w="5"/><text x="58.5295%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="58.3292%" y="1493" width="0.0332%" height="15" fill="rgb(229,113,15)" fg:x="3519" fg:w="2"/><text x="58.5792%" y="1503.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="58.3458%" y="1477" width="0.0166%" height="15" fill="rgb(237,147,15)" fg:x="3520" fg:w="1"/><text x="58.5958%" y="1487.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::GetStream (1 samples, 0.02%)</title><rect x="58.3458%" y="1461" width="0.0166%" height="15" fill="rgb(244,120,12)" fg:x="3520" fg:w="1"/><text x="58.5958%" y="1471.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.3623%" y="1509" width="0.0166%" height="15" fill="rgb(205,120,12)" fg:x="3521" fg:w="1"/><text x="58.6123%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.3623%" y="1493" width="0.0166%" height="15" fill="rgb(231,26,45)" fg:x="3521" fg:w="1"/><text x="58.6123%" y="1503.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="58.3623%" y="1477" width="0.0166%" height="15" fill="rgb(246,98,1)" fg:x="3521" fg:w="1"/><text x="58.6123%" y="1487.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="58.3623%" y="1461" width="0.0166%" height="15" fill="rgb(207,68,45)" fg:x="3521" fg:w="1"/><text x="58.6123%" y="1471.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="58.3623%" y="1445" width="0.0166%" height="15" fill="rgb(231,27,38)" fg:x="3521" fg:w="1"/><text x="58.6123%" y="1455.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.03%)</title><rect x="58.3789%" y="1509" width="0.0332%" height="15" fill="rgb(214,223,3)" fg:x="3522" fg:w="2"/><text x="58.6289%" y="1519.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (3 samples, 0.05%)</title><rect x="58.4121%" y="1509" width="0.0497%" height="15" fill="rgb(228,195,46)" fg:x="3524" fg:w="3"/><text x="58.6621%" y="1519.50"></text></g><g><title>vtable for std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="58.4618%" y="1509" width="0.0166%" height="15" fill="rgb(231,100,42)" fg:x="3527" fg:w="1"/><text x="58.7118%" y="1519.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="58.4618%" y="1493" width="0.0166%" height="15" fill="rgb(236,53,4)" fg:x="3527" fg:w="1"/><text x="58.7118%" y="1503.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="58.4784%" y="1493" width="0.0166%" height="15" fill="rgb(230,152,12)" fg:x="3528" fg:w="1"/><text x="58.7284%" y="1503.50"></text></g><g><title>b-msghand (3,522 samples, 58.38%)</title><rect x="0.1326%" y="1525" width="58.3789%" height="15" fill="rgb(226,101,19)" fg:x="8" fg:w="3522"/><text x="0.3826%" y="1535.50">b-msghand</text></g><g><title>vtable for std::ios_base (2 samples, 0.03%)</title><rect x="58.4784%" y="1509" width="0.0332%" height="15" fill="rgb(250,149,32)" fg:x="3528" fg:w="2"/><text x="58.7284%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="58.4949%" y="1493" width="0.0166%" height="15" fill="rgb(232,178,12)" fg:x="3529" fg:w="1"/><text x="58.7449%" y="1503.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="58.6441%" y="1205" width="0.0166%" height="15" fill="rgb(246,151,17)" fg:x="3538" fg:w="1"/><text x="58.8941%" y="1215.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="58.6441%" y="1189" width="0.0166%" height="15" fill="rgb(252,17,51)" fg:x="3538" fg:w="1"/><text x="58.8941%" y="1199.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="58.6441%" y="1173" width="0.0166%" height="15" fill="rgb(250,207,23)" fg:x="3538" fg:w="1"/><text x="58.8941%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="58.6441%" y="1157" width="0.0166%" height="15" fill="rgb(205,27,5)" fg:x="3538" fg:w="1"/><text x="58.8941%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="58.6275%" y="1397" width="0.0829%" height="15" fill="rgb(224,32,19)" fg:x="3537" fg:w="5"/><text x="58.8775%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1381" width="0.0663%" height="15" fill="rgb(247,214,40)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1365" width="0.0663%" height="15" fill="rgb(239,199,17)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1349" width="0.0663%" height="15" fill="rgb(251,159,9)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1333" width="0.0663%" height="15" fill="rgb(225,78,32)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1317" width="0.0663%" height="15" fill="rgb(206,97,47)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1301" width="0.0663%" height="15" fill="rgb(227,107,4)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1285" width="0.0663%" height="15" fill="rgb(241,146,50)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1269" width="0.0663%" height="15" fill="rgb(232,92,30)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1253" width="0.0663%" height="15" fill="rgb(222,0,40)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1237" width="0.0663%" height="15" fill="rgb(219,54,33)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="58.6441%" y="1221" width="0.0663%" height="15" fill="rgb(226,209,28)" fg:x="3538" fg:w="4"/><text x="58.8941%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="58.6607%" y="1205" width="0.0497%" height="15" fill="rgb(254,205,35)" fg:x="3539" fg:w="3"/><text x="58.9107%" y="1215.50"></text></g><g><title>V2Transport::GetReceivedMessage (21 samples, 0.35%)</title><rect x="58.5115%" y="1477" width="0.3481%" height="15" fill="rgb(230,159,3)" fg:x="3530" fg:w="21"/><text x="58.7615%" y="1487.50"></text></g><g><title>DataStream::resize (21 samples, 0.35%)</title><rect x="58.5115%" y="1461" width="0.3481%" height="15" fill="rgb(232,190,24)" fg:x="3530" fg:w="21"/><text x="58.7615%" y="1471.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (21 samples, 0.35%)</title><rect x="58.5115%" y="1445" width="0.3481%" height="15" fill="rgb(217,227,44)" fg:x="3530" fg:w="21"/><text x="58.7615%" y="1455.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (21 samples, 0.35%)</title><rect x="58.5115%" y="1429" width="0.3481%" height="15" fill="rgb(236,211,1)" fg:x="3530" fg:w="21"/><text x="58.7615%" y="1439.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (21 samples, 0.35%)</title><rect x="58.5115%" y="1413" width="0.3481%" height="15" fill="rgb(250,127,46)" fg:x="3530" fg:w="21"/><text x="58.7615%" y="1423.50"></text></g><g><title>decltype  (9 samples, 0.15%)</title><rect x="58.7104%" y="1397" width="0.1492%" height="15" fill="rgb(229,213,6)" fg:x="3542" fg:w="9"/><text x="58.9604%" y="1407.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (9 samples, 0.15%)</title><rect x="58.7104%" y="1381" width="0.1492%" height="15" fill="rgb(237,15,36)" fg:x="3542" fg:w="9"/><text x="58.9604%" y="1391.50"></text></g><g><title>decltype (9 samples, 0.15%)</title><rect x="58.7104%" y="1365" width="0.1492%" height="15" fill="rgb(213,131,41)" fg:x="3542" fg:w="9"/><text x="58.9604%" y="1375.50"></text></g><g><title>WriteLE32 (2 samples, 0.03%)</title><rect x="60.7161%" y="1365" width="0.0332%" height="15" fill="rgb(225,82,44)" fg:x="3663" fg:w="2"/><text x="60.9661%" y="1375.50"></text></g><g><title>ChaCha20Aligned::Crypt (2 samples, 0.03%)</title><rect x="60.7161%" y="1349" width="0.0332%" height="15" fill="rgb(249,42,11)" fg:x="3663" fg:w="2"/><text x="60.9661%" y="1359.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="60.7492%" y="1365" width="0.1658%" height="15" fill="rgb(253,11,29)" fg:x="3665" fg:w="10"/><text x="60.9992%" y="1375.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="60.7658%" y="1349" width="0.1492%" height="15" fill="rgb(206,8,54)" fg:x="3666" fg:w="9"/><text x="61.0158%" y="1359.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="60.7658%" y="1333" width="0.1492%" height="15" fill="rgb(222,186,2)" fg:x="3666" fg:w="9"/><text x="61.0158%" y="1343.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="60.7658%" y="1317" width="0.1492%" height="15" fill="rgb(221,206,53)" fg:x="3666" fg:w="9"/><text x="61.0158%" y="1327.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="60.7658%" y="1301" width="0.1492%" height="15" fill="rgb(230,150,21)" fg:x="3666" fg:w="9"/><text x="61.0158%" y="1311.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="60.7658%" y="1285" width="0.1492%" height="15" fill="rgb(253,202,10)" fg:x="3666" fg:w="9"/><text x="61.0158%" y="1295.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="60.7824%" y="1269" width="0.1326%" height="15" fill="rgb(238,109,40)" fg:x="3667" fg:w="8"/><text x="61.0324%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="60.7989%" y="1253" width="0.1160%" height="15" fill="rgb(247,120,22)" fg:x="3668" fg:w="7"/><text x="61.0489%" y="1263.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="60.7989%" y="1237" width="0.1160%" height="15" fill="rgb(207,43,30)" fg:x="3668" fg:w="7"/><text x="61.0489%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="60.8155%" y="1221" width="0.0995%" height="15" fill="rgb(213,211,24)" fg:x="3669" fg:w="6"/><text x="61.0655%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="60.8155%" y="1205" width="0.0995%" height="15" fill="rgb(239,73,39)" fg:x="3669" fg:w="6"/><text x="61.0655%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.8652%" y="1189" width="0.0497%" height="15" fill="rgb(245,182,19)" fg:x="3672" fg:w="3"/><text x="61.1152%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.8652%" y="1173" width="0.0497%" height="15" fill="rgb(247,143,26)" fg:x="3672" fg:w="3"/><text x="61.1152%" y="1183.50"></text></g><g><title>ChaCha20::Crypt (172 samples, 2.85%)</title><rect x="58.8596%" y="1397" width="2.8510%" height="15" fill="rgb(228,191,23)" fg:x="3551" fg:w="172"/><text x="59.1096%" y="1407.50">Ch..</text></g><g><title>ChaCha20Aligned::Crypt (172 samples, 2.85%)</title><rect x="58.8596%" y="1381" width="2.8510%" height="15" fill="rgb(253,165,31)" fg:x="3551" fg:w="172"/><text x="59.1096%" y="1391.50">Ch..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (48 samples, 0.80%)</title><rect x="60.9150%" y="1365" width="0.7956%" height="15" fill="rgb(234,138,20)" fg:x="3675" fg:w="48"/><text x="61.1650%" y="1375.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (48 samples, 0.80%)</title><rect x="60.9150%" y="1349" width="0.7956%" height="15" fill="rgb(218,191,29)" fg:x="3675" fg:w="48"/><text x="61.1650%" y="1359.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="63.0201%" y="1237" width="0.0166%" height="15" fill="rgb(221,157,19)" fg:x="3802" fg:w="1"/><text x="63.2701%" y="1247.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.02%)</title><rect x="63.0201%" y="1221" width="0.0166%" height="15" fill="rgb(237,26,42)" fg:x="3802" fg:w="1"/><text x="63.2701%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.0201%" y="1205" width="0.0166%" height="15" fill="rgb(220,163,24)" fg:x="3802" fg:w="1"/><text x="63.2701%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.0201%" y="1189" width="0.0166%" height="15" fill="rgb(242,115,20)" fg:x="3802" fg:w="1"/><text x="63.2701%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.0201%" y="1173" width="0.0166%" height="15" fill="rgb(210,206,9)" fg:x="3802" fg:w="1"/><text x="63.2701%" y="1183.50"></text></g><g><title>BIP324Cipher::Decrypt (263 samples, 4.36%)</title><rect x="58.8596%" y="1445" width="4.3594%" height="15" fill="rgb(208,71,17)" fg:x="3551" fg:w="263"/><text x="59.1096%" y="1455.50">BIP32..</text></g><g><title>FSChaCha20Poly1305::Decrypt (263 samples, 4.36%)</title><rect x="58.8596%" y="1429" width="4.3594%" height="15" fill="rgb(233,7,5)" fg:x="3551" fg:w="263"/><text x="59.1096%" y="1439.50">FSCha..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (263 samples, 4.36%)</title><rect x="58.8596%" y="1413" width="4.3594%" height="15" fill="rgb(207,92,33)" fg:x="3551" fg:w="263"/><text x="59.1096%" y="1423.50">AEADC..</text></g><g><title>ComputeTag (91 samples, 1.51%)</title><rect x="61.7106%" y="1397" width="1.5084%" height="15" fill="rgb(218,87,9)" fg:x="3723" fg:w="91"/><text x="61.9606%" y="1407.50"></text></g><g><title>Poly1305::Update (91 samples, 1.51%)</title><rect x="61.7106%" y="1381" width="1.5084%" height="15" fill="rgb(219,47,37)" fg:x="3723" fg:w="91"/><text x="61.9606%" y="1391.50"></text></g><g><title>poly1305_donna::poly1305_update (91 samples, 1.51%)</title><rect x="61.7106%" y="1365" width="1.5084%" height="15" fill="rgb(221,152,34)" fg:x="3723" fg:w="91"/><text x="61.9606%" y="1375.50"></text></g><g><title>poly1305_donna::poly1305_blocks (91 samples, 1.51%)</title><rect x="61.7106%" y="1349" width="1.5084%" height="15" fill="rgb(235,176,21)" fg:x="3723" fg:w="91"/><text x="61.9606%" y="1359.50"></text></g><g><title>[unknown] (15 samples, 0.25%)</title><rect x="62.9703%" y="1333" width="0.2486%" height="15" fill="rgb(232,212,21)" fg:x="3799" fg:w="15"/><text x="63.2203%" y="1343.50"></text></g><g><title>[unknown] (15 samples, 0.25%)</title><rect x="62.9703%" y="1317" width="0.2486%" height="15" fill="rgb(245,82,39)" fg:x="3799" fg:w="15"/><text x="63.2203%" y="1327.50"></text></g><g><title>[unknown] (15 samples, 0.25%)</title><rect x="62.9703%" y="1301" width="0.2486%" height="15" fill="rgb(241,52,51)" fg:x="3799" fg:w="15"/><text x="63.2203%" y="1311.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="62.9869%" y="1285" width="0.2321%" height="15" fill="rgb(219,91,24)" fg:x="3800" fg:w="14"/><text x="63.2369%" y="1295.50"></text></g><g><title>[unknown] (13 samples, 0.22%)</title><rect x="63.0035%" y="1269" width="0.2155%" height="15" fill="rgb(241,142,12)" fg:x="3801" fg:w="13"/><text x="63.2535%" y="1279.50"></text></g><g><title>[unknown] (13 samples, 0.22%)</title><rect x="63.0035%" y="1253" width="0.2155%" height="15" fill="rgb(230,27,9)" fg:x="3801" fg:w="13"/><text x="63.2535%" y="1263.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="63.0366%" y="1237" width="0.1823%" height="15" fill="rgb(249,181,32)" fg:x="3803" fg:w="11"/><text x="63.2866%" y="1247.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="63.0366%" y="1221" width="0.1823%" height="15" fill="rgb(230,107,3)" fg:x="3803" fg:w="11"/><text x="63.2866%" y="1231.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="63.0532%" y="1205" width="0.1658%" height="15" fill="rgb(246,204,14)" fg:x="3804" fg:w="10"/><text x="63.3032%" y="1215.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="63.0532%" y="1189" width="0.1658%" height="15" fill="rgb(213,192,47)" fg:x="3804" fg:w="10"/><text x="63.3032%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="63.1195%" y="1173" width="0.0995%" height="15" fill="rgb(240,44,36)" fg:x="3808" fg:w="6"/><text x="63.3695%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.1692%" y="1157" width="0.0497%" height="15" fill="rgb(244,209,38)" fg:x="3811" fg:w="3"/><text x="63.4192%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.1692%" y="1141" width="0.0497%" height="15" fill="rgb(219,34,37)" fg:x="3811" fg:w="3"/><text x="63.4192%" y="1151.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (266 samples, 4.41%)</title><rect x="58.8596%" y="1461" width="4.4091%" height="15" fill="rgb(210,28,6)" fg:x="3551" fg:w="266"/><text x="59.1096%" y="1471.50">V2Tra..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (3 samples, 0.05%)</title><rect x="63.2190%" y="1445" width="0.0497%" height="15" fill="rgb(244,110,52)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1455.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (3 samples, 0.05%)</title><rect x="63.2190%" y="1429" width="0.0497%" height="15" fill="rgb(254,124,47)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1439.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1413" width="0.0497%" height="15" fill="rgb(254,110,13)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1397" width="0.0497%" height="15" fill="rgb(252,57,21)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1407.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1381" width="0.0497%" height="15" fill="rgb(242,60,45)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1391.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1365" width="0.0497%" height="15" fill="rgb(234,49,30)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1375.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1349" width="0.0497%" height="15" fill="rgb(218,98,6)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1359.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1333" width="0.0497%" height="15" fill="rgb(220,174,29)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1343.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1317" width="0.0497%" height="15" fill="rgb(236,163,23)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1327.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (3 samples, 0.05%)</title><rect x="63.2190%" y="1301" width="0.0497%" height="15" fill="rgb(242,114,45)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1311.50"></text></g><g><title>__memset_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="63.2190%" y="1285" width="0.0497%" height="15" fill="rgb(232,10,53)" fg:x="3814" fg:w="3"/><text x="63.4690%" y="1295.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1461" width="0.0166%" height="15" fill="rgb(245,108,29)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1471.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1445" width="0.0166%" height="15" fill="rgb(240,89,53)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1429" width="0.0166%" height="15" fill="rgb(226,60,45)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1439.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1413" width="0.0166%" height="15" fill="rgb(230,41,44)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1397" width="0.0166%" height="15" fill="rgb(230,26,20)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1407.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1381" width="0.0166%" height="15" fill="rgb(237,170,32)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1365" width="0.0166%" height="15" fill="rgb(212,35,42)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1349" width="0.0166%" height="15" fill="rgb(227,31,34)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1333" width="0.0166%" height="15" fill="rgb(216,19,18)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (1 samples, 0.02%)</title><rect x="63.2687%" y="1317" width="0.0166%" height="15" fill="rgb(211,133,42)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="63.2687%" y="1301" width="0.0166%" height="15" fill="rgb(244,66,13)" fg:x="3817" fg:w="1"/><text x="63.5187%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="63.2853%" y="1445" width="0.0166%" height="15" fill="rgb(218,185,50)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1455.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="63.2853%" y="1429" width="0.0166%" height="15" fill="rgb(219,149,13)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1439.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="63.2853%" y="1413" width="0.0166%" height="15" fill="rgb(221,125,0)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1423.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="63.2853%" y="1397" width="0.0166%" height="15" fill="rgb(247,126,27)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1407.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="63.2853%" y="1381" width="0.0166%" height="15" fill="rgb(250,138,30)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1391.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="63.2853%" y="1365" width="0.0166%" height="15" fill="rgb(230,151,9)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1375.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="63.2853%" y="1349" width="0.0166%" height="15" fill="rgb(233,80,38)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1359.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="63.2853%" y="1333" width="0.0166%" height="15" fill="rgb(232,68,43)" fg:x="3818" fg:w="1"/><text x="63.5353%" y="1343.50"></text></g><g><title>CNode::ReceiveMsgBytes (298 samples, 4.94%)</title><rect x="58.5115%" y="1493" width="4.9395%" height="15" fill="rgb(254,5,50)" fg:x="3530" fg:w="298"/><text x="58.7615%" y="1503.50">CNode:..</text></g><g><title>V2Transport::ReceivedBytes (277 samples, 4.59%)</title><rect x="58.8596%" y="1477" width="4.5914%" height="15" fill="rgb(225,45,5)" fg:x="3551" fg:w="277"/><text x="59.1096%" y="1487.50">V2Tra..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (10 samples, 0.17%)</title><rect x="63.2853%" y="1461" width="0.1658%" height="15" fill="rgb(239,22,3)" fg:x="3818" fg:w="10"/><text x="63.5353%" y="1471.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (9 samples, 0.15%)</title><rect x="63.3018%" y="1445" width="0.1492%" height="15" fill="rgb(243,129,0)" fg:x="3819" fg:w="9"/><text x="63.5518%" y="1455.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (9 samples, 0.15%)</title><rect x="63.3018%" y="1429" width="0.1492%" height="15" fill="rgb(223,164,0)" fg:x="3819" fg:w="9"/><text x="63.5518%" y="1439.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (9 samples, 0.15%)</title><rect x="63.3018%" y="1413" width="0.1492%" height="15" fill="rgb(221,46,29)" fg:x="3819" fg:w="9"/><text x="63.5518%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.15%)</title><rect x="63.3018%" y="1397" width="0.1492%" height="15" fill="rgb(205,97,47)" fg:x="3819" fg:w="9"/><text x="63.5518%" y="1407.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="63.8986%" y="1269" width="0.0166%" height="15" fill="rgb(249,14,8)" fg:x="3855" fg:w="1"/><text x="64.1486%" y="1279.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="63.8986%" y="1253" width="0.0166%" height="15" fill="rgb(216,77,3)" fg:x="3855" fg:w="1"/><text x="64.1486%" y="1263.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="63.8986%" y="1237" width="0.0166%" height="15" fill="rgb(206,168,54)" fg:x="3855" fg:w="1"/><text x="64.1486%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="63.8986%" y="1221" width="0.0166%" height="15" fill="rgb(236,3,41)" fg:x="3855" fg:w="1"/><text x="64.1486%" y="1231.50"></text></g><g><title>CConnman::SocketHandlerConnected (333 samples, 5.52%)</title><rect x="58.5115%" y="1509" width="5.5196%" height="15" fill="rgb(231,132,24)" fg:x="3530" fg:w="333"/><text x="58.7615%" y="1519.50">CConnma..</text></g><g><title>__libc_recv (35 samples, 0.58%)</title><rect x="63.4510%" y="1493" width="0.5801%" height="15" fill="rgb(227,221,40)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1503.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1477" width="0.5801%" height="15" fill="rgb(233,151,11)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1487.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1461" width="0.5801%" height="15" fill="rgb(247,81,35)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1471.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1445" width="0.5801%" height="15" fill="rgb(243,128,48)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1455.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1429" width="0.5801%" height="15" fill="rgb(253,16,10)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1439.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1413" width="0.5801%" height="15" fill="rgb(228,67,27)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1423.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1397" width="0.5801%" height="15" fill="rgb(231,105,25)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1407.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1381" width="0.5801%" height="15" fill="rgb(213,166,47)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1391.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="63.4510%" y="1365" width="0.5801%" height="15" fill="rgb(209,27,10)" fg:x="3828" fg:w="35"/><text x="63.7010%" y="1375.50"></text></g><g><title>[unknown] (34 samples, 0.56%)</title><rect x="63.4676%" y="1349" width="0.5636%" height="15" fill="rgb(241,44,30)" fg:x="3829" fg:w="34"/><text x="63.7176%" y="1359.50"></text></g><g><title>[unknown] (33 samples, 0.55%)</title><rect x="63.4842%" y="1333" width="0.5470%" height="15" fill="rgb(223,216,15)" fg:x="3830" fg:w="33"/><text x="63.7342%" y="1343.50"></text></g><g><title>[unknown] (31 samples, 0.51%)</title><rect x="63.5173%" y="1317" width="0.5138%" height="15" fill="rgb(227,14,7)" fg:x="3832" fg:w="31"/><text x="63.7673%" y="1327.50"></text></g><g><title>[unknown] (28 samples, 0.46%)</title><rect x="63.5670%" y="1301" width="0.4641%" height="15" fill="rgb(237,14,5)" fg:x="3835" fg:w="28"/><text x="63.8170%" y="1311.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="63.7991%" y="1285" width="0.2321%" height="15" fill="rgb(232,14,36)" fg:x="3849" fg:w="14"/><text x="64.0491%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="63.9151%" y="1269" width="0.1160%" height="15" fill="rgb(234,0,38)" fg:x="3856" fg:w="7"/><text x="64.1651%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.9814%" y="1253" width="0.0497%" height="15" fill="rgb(207,170,14)" fg:x="3860" fg:w="3"/><text x="64.2314%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="63.9814%" y="1237" width="0.0497%" height="15" fill="rgb(252,45,13)" fg:x="3860" fg:w="3"/><text x="64.2314%" y="1247.50"></text></g><g><title>CThreadInterrupt::sleep_for (4 samples, 0.07%)</title><rect x="64.0312%" y="1317" width="0.0663%" height="15" fill="rgb(213,142,7)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1327.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="64.0312%" y="1301" width="0.0663%" height="15" fill="rgb(216,157,23)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1311.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="64.0312%" y="1285" width="0.0663%" height="15" fill="rgb(212,145,33)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="64.0312%" y="1269" width="0.0663%" height="15" fill="rgb(233,26,13)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1279.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="64.0312%" y="1253" width="0.0663%" height="15" fill="rgb(219,196,19)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1263.50"></text></g><g><title>std::__condvar::wait_until (4 samples, 0.07%)</title><rect x="64.0312%" y="1237" width="0.0663%" height="15" fill="rgb(246,56,21)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1247.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (4 samples, 0.07%)</title><rect x="64.0312%" y="1221" width="0.0663%" height="15" fill="rgb(222,28,53)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1231.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="64.0312%" y="1205" width="0.0663%" height="15" fill="rgb(224,5,27)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="64.0312%" y="1189" width="0.0663%" height="15" fill="rgb(220,153,33)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="64.0312%" y="1173" width="0.0663%" height="15" fill="rgb(226,58,19)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="64.0312%" y="1157" width="0.0663%" height="15" fill="rgb(239,112,23)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="64.0312%" y="1141" width="0.0663%" height="15" fill="rgb(251,213,20)" fg:x="3863" fg:w="4"/><text x="64.2812%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1125" width="0.0497%" height="15" fill="rgb(215,181,21)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1109" width="0.0497%" height="15" fill="rgb(240,8,35)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1093" width="0.0497%" height="15" fill="rgb(232,203,3)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1077" width="0.0497%" height="15" fill="rgb(214,202,43)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1061" width="0.0497%" height="15" fill="rgb(254,35,11)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1045" width="0.0497%" height="15" fill="rgb(239,173,13)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1029" width="0.0497%" height="15" fill="rgb(220,141,0)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="1013" width="0.0497%" height="15" fill="rgb(210,98,12)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="997" width="0.0497%" height="15" fill="rgb(254,153,22)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="981" width="0.0497%" height="15" fill="rgb(247,223,17)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="965" width="0.0497%" height="15" fill="rgb(246,56,7)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0477%" y="949" width="0.0497%" height="15" fill="rgb(240,226,12)" fg:x="3864" fg:w="3"/><text x="64.2977%" y="959.50"></text></g><g><title>CConnman::SocketHandler (7 samples, 0.12%)</title><rect x="64.0312%" y="1333" width="0.1160%" height="15" fill="rgb(205,87,46)" fg:x="3863" fg:w="7"/><text x="64.2812%" y="1343.50"></text></g><g><title>Sock::WaitMany (3 samples, 0.05%)</title><rect x="64.0975%" y="1317" width="0.0497%" height="15" fill="rgb(245,214,51)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1327.50"></text></g><g><title>Sock::WaitMany (3 samples, 0.05%)</title><rect x="64.0975%" y="1301" width="0.0497%" height="15" fill="rgb(223,172,33)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1311.50"></text></g><g><title>__poll (3 samples, 0.05%)</title><rect x="64.0975%" y="1285" width="0.0497%" height="15" fill="rgb(227,203,34)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0975%" y="1269" width="0.0497%" height="15" fill="rgb(248,143,44)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0975%" y="1253" width="0.0497%" height="15" fill="rgb(226,162,5)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0975%" y="1237" width="0.0497%" height="15" fill="rgb(211,143,1)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0975%" y="1221" width="0.0497%" height="15" fill="rgb(224,96,15)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0975%" y="1205" width="0.0497%" height="15" fill="rgb(222,4,38)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0975%" y="1189" width="0.0497%" height="15" fill="rgb(253,228,15)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0975%" y="1173" width="0.0497%" height="15" fill="rgb(242,194,12)" fg:x="3867" fg:w="3"/><text x="64.3475%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="64.1140%" y="1157" width="0.0332%" height="15" fill="rgb(214,177,31)" fg:x="3868" fg:w="2"/><text x="64.3640%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.1306%" y="1141" width="0.0166%" height="15" fill="rgb(226,58,51)" fg:x="3869" fg:w="1"/><text x="64.3806%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.1306%" y="1125" width="0.0166%" height="15" fill="rgb(250,119,16)" fg:x="3869" fg:w="1"/><text x="64.3806%" y="1135.50"></text></g><g><title>b-net (341 samples, 5.65%)</title><rect x="58.5115%" y="1525" width="5.6522%" height="15" fill="rgb(223,128,53)" fg:x="3530" fg:w="341"/><text x="58.7615%" y="1535.50">b-net</text></g><g><title>__clone (8 samples, 0.13%)</title><rect x="64.0312%" y="1509" width="0.1326%" height="15" fill="rgb(251,199,15)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1519.50"></text></g><g><title>start_thread (8 samples, 0.13%)</title><rect x="64.0312%" y="1493" width="0.1326%" height="15" fill="rgb(235,168,42)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1503.50"></text></g><g><title>execute_native_thread_routine (8 samples, 0.13%)</title><rect x="64.0312%" y="1477" width="0.1326%" height="15" fill="rgb(250,210,17)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1487.50"></text></g><g><title>_M_run (8 samples, 0.13%)</title><rect x="64.0312%" y="1461" width="0.1326%" height="15" fill="rgb(226,36,41)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1471.50"></text></g><g><title>operator (8 samples, 0.13%)</title><rect x="64.0312%" y="1445" width="0.1326%" height="15" fill="rgb(225,87,10)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (8 samples, 0.13%)</title><rect x="64.0312%" y="1429" width="0.1326%" height="15" fill="rgb(228,83,9)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (8 samples, 0.13%)</title><rect x="64.0312%" y="1413" width="0.1326%" height="15" fill="rgb(225,16,36)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (8 samples, 0.13%)</title><rect x="64.0312%" y="1397" width="0.1326%" height="15" fill="rgb(242,198,13)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1407.50"></text></g><g><title>util::TraceThread (8 samples, 0.13%)</title><rect x="64.0312%" y="1381" width="0.1326%" height="15" fill="rgb(239,25,51)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (8 samples, 0.13%)</title><rect x="64.0312%" y="1365" width="0.1326%" height="15" fill="rgb(239,28,37)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1375.50"></text></g><g><title>CConnman::ThreadSocketHandler (8 samples, 0.13%)</title><rect x="64.0312%" y="1349" width="0.1326%" height="15" fill="rgb(234,70,17)" fg:x="3863" fg:w="8"/><text x="64.2812%" y="1359.50"></text></g><g><title>std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="64.1472%" y="1333" width="0.0166%" height="15" fill="rgb(231,215,53)" fg:x="3870" fg:w="1"/><text x="64.3972%" y="1343.50"></text></g><g><title>b-opencon (1 samples, 0.02%)</title><rect x="64.1638%" y="1525" width="0.0166%" height="15" fill="rgb(218,140,42)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1535.50"></text></g><g><title>__clone (1 samples, 0.02%)</title><rect x="64.1638%" y="1509" width="0.0166%" height="15" fill="rgb(233,227,45)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1519.50"></text></g><g><title>start_thread (1 samples, 0.02%)</title><rect x="64.1638%" y="1493" width="0.0166%" height="15" fill="rgb(225,189,21)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1503.50"></text></g><g><title>execute_native_thread_routine (1 samples, 0.02%)</title><rect x="64.1638%" y="1477" width="0.0166%" height="15" fill="rgb(237,176,54)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1487.50"></text></g><g><title>_M_run (1 samples, 0.02%)</title><rect x="64.1638%" y="1461" width="0.0166%" height="15" fill="rgb(215,131,46)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1471.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="64.1638%" y="1445" width="0.0166%" height="15" fill="rgb(218,95,20)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1429" width="0.0166%" height="15" fill="rgb(208,198,12)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1413" width="0.0166%" height="15" fill="rgb(239,107,50)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt; &gt; &gt;::_M_run (1 samples, 0.02%)</title><rect x="64.1638%" y="1397" width="0.0166%" height="15" fill="rgb(240,217,37)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1407.50"></text></g><g><title>util::TraceThread (1 samples, 0.02%)</title><rect x="64.1638%" y="1381" width="0.0166%" height="15" fill="rgb(242,197,49)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.02%)</title><rect x="64.1638%" y="1365" width="0.0166%" height="15" fill="rgb(219,171,17)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1375.50"></text></g><g><title>_M_invoke (1 samples, 0.02%)</title><rect x="64.1638%" y="1349" width="0.0166%" height="15" fill="rgb(209,81,40)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1359.50"></text></g><g><title>__invoke_r&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1333" width="0.0166%" height="15" fill="rgb(237,156,30)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1343.50"></text></g><g><title>__invoke_impl&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1317" width="0.0166%" height="15" fill="rgb(212,127,16)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1327.50"></text></g><g><title>std::_Function_handler&lt;void (), CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt;::_M_invoke (1 samples, 0.02%)</title><rect x="64.1638%" y="1301" width="0.0166%" height="15" fill="rgb(226,66,32)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1311.50"></text></g><g><title>CConnman::ThreadOpenConnections (1 samples, 0.02%)</title><rect x="64.1638%" y="1285" width="0.0166%" height="15" fill="rgb(245,22,46)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1295.50"></text></g><g><title>CThreadInterrupt::sleep_for (1 samples, 0.02%)</title><rect x="64.1638%" y="1269" width="0.0166%" height="15" fill="rgb(210,112,21)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1279.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1253" width="0.0166%" height="15" fill="rgb(207,118,39)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1263.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1237" width="0.0166%" height="15" fill="rgb(205,206,35)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1247.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1221" width="0.0166%" height="15" fill="rgb(222,120,2)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1231.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="64.1638%" y="1205" width="0.0166%" height="15" fill="rgb(205,38,18)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1215.50"></text></g><g><title>std::__condvar::wait_until (1 samples, 0.02%)</title><rect x="64.1638%" y="1189" width="0.0166%" height="15" fill="rgb(226,61,2)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1199.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="64.1638%" y="1173" width="0.0166%" height="15" fill="rgb(242,161,23)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1183.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.02%)</title><rect x="64.1638%" y="1157" width="0.0166%" height="15" fill="rgb(213,13,52)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.1638%" y="1141" width="0.0166%" height="15" fill="rgb(246,209,47)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.1638%" y="1125" width="0.0166%" height="15" fill="rgb(214,41,3)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.1638%" y="1109" width="0.0166%" height="15" fill="rgb(236,119,38)" fg:x="3871" fg:w="1"/><text x="64.4138%" y="1119.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="64.1803%" y="1509" width="0.0166%" height="15" fill="rgb(218,50,11)" fg:x="3872" fg:w="1"/><text x="64.4303%" y="1519.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="64.1803%" y="1493" width="0.0166%" height="15" fill="rgb(228,38,11)" fg:x="3872" fg:w="1"/><text x="64.4303%" y="1503.50"></text></g><g><title>MurmurHash3 (1 samples, 0.02%)</title><rect x="64.1803%" y="1477" width="0.0166%" height="15" fill="rgb(212,13,9)" fg:x="3872" fg:w="1"/><text x="64.4303%" y="1487.50"></text></g><g><title>MurmurHash3 (3 samples, 0.05%)</title><rect x="64.1969%" y="1509" width="0.0497%" height="15" fill="rgb(208,211,9)" fg:x="3873" fg:w="3"/><text x="64.4469%" y="1519.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="64.2466%" y="1493" width="0.0166%" height="15" fill="rgb(239,39,32)" fg:x="3876" fg:w="1"/><text x="64.4966%" y="1503.50"></text></g><g><title>[[heap]] (5 samples, 0.08%)</title><rect x="64.2466%" y="1509" width="0.0829%" height="15" fill="rgb(254,179,26)" fg:x="3876" fg:w="5"/><text x="64.4966%" y="1519.50"></text></g><g><title>MurmurHash3 (4 samples, 0.07%)</title><rect x="64.2632%" y="1493" width="0.0663%" height="15" fill="rgb(249,165,28)" fg:x="3877" fg:w="4"/><text x="64.5132%" y="1503.50"></text></g><g><title>MurmurHash3 (1 samples, 0.02%)</title><rect x="64.3295%" y="1493" width="0.0166%" height="15" fill="rgb(225,59,50)" fg:x="3881" fg:w="1"/><text x="64.5795%" y="1503.50"></text></g><g><title>_int_free (20 samples, 0.33%)</title><rect x="64.3461%" y="1493" width="0.3315%" height="15" fill="rgb(209,122,5)" fg:x="3882" fg:w="20"/><text x="64.5961%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.6610%" y="1477" width="0.0166%" height="15" fill="rgb(214,65,34)" fg:x="3901" fg:w="1"/><text x="64.9110%" y="1487.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.03%)</title><rect x="64.6776%" y="1493" width="0.0332%" height="15" fill="rgb(249,183,32)" fg:x="3902" fg:w="2"/><text x="64.9276%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (17 samples, 0.28%)</title><rect x="64.7108%" y="1493" width="0.2818%" height="15" fill="rgb(218,122,24)" fg:x="3904" fg:w="17"/><text x="64.9608%" y="1503.50"></text></g><g><title>[anon] (41 samples, 0.68%)</title><rect x="64.3295%" y="1509" width="0.6796%" height="15" fill="rgb(224,109,18)" fg:x="3881" fg:w="41"/><text x="64.5795%" y="1519.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="64.9925%" y="1493" width="0.0166%" height="15" fill="rgb(210,68,50)" fg:x="3921" fg:w="1"/><text x="65.2425%" y="1503.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="65.0091%" y="1493" width="0.0166%" height="15" fill="rgb(212,184,34)" fg:x="3922" fg:w="1"/><text x="65.2591%" y="1503.50"></text></g><g><title>MurmurHash3 (3 samples, 0.05%)</title><rect x="65.0257%" y="1493" width="0.0497%" height="15" fill="rgb(238,105,48)" fg:x="3923" fg:w="3"/><text x="65.2757%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0754%" y="1493" width="0.0166%" height="15" fill="rgb(222,134,54)" fg:x="3926" fg:w="1"/><text x="65.3254%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0754%" y="1477" width="0.0166%" height="15" fill="rgb(246,24,43)" fg:x="3926" fg:w="1"/><text x="65.3254%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="65.0754%" y="1461" width="0.0166%" height="15" fill="rgb(227,169,22)" fg:x="3926" fg:w="1"/><text x="65.3254%" y="1471.50"></text></g><g><title>_int_free (5 samples, 0.08%)</title><rect x="65.0920%" y="1493" width="0.0829%" height="15" fill="rgb(253,152,4)" fg:x="3927" fg:w="5"/><text x="65.3420%" y="1503.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="65.0091%" y="1509" width="0.1823%" height="15" fill="rgb(219,158,36)" fg:x="3922" fg:w="11"/><text x="65.2591%" y="1519.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="65.1749%" y="1493" width="0.0166%" height="15" fill="rgb(251,128,40)" fg:x="3932" fg:w="1"/><text x="65.4249%" y="1503.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="65.1914%" y="1333" width="0.0829%" height="15" fill="rgb(254,101,39)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1343.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (5 samples, 0.08%)</title><rect x="65.1914%" y="1317" width="0.0829%" height="15" fill="rgb(221,168,40)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1327.50"></text></g><g><title>std::__condvar::wait_until (5 samples, 0.08%)</title><rect x="65.1914%" y="1301" width="0.0829%" height="15" fill="rgb(221,14,27)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1311.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (5 samples, 0.08%)</title><rect x="65.1914%" y="1285" width="0.0829%" height="15" fill="rgb(207,36,43)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1295.50"></text></g><g><title>__futex_abstimed_wait_common (5 samples, 0.08%)</title><rect x="65.1914%" y="1269" width="0.0829%" height="15" fill="rgb(240,172,53)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1253" width="0.0829%" height="15" fill="rgb(241,138,43)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1237" width="0.0829%" height="15" fill="rgb(227,78,19)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1221" width="0.0829%" height="15" fill="rgb(215,127,44)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1205" width="0.0829%" height="15" fill="rgb(227,13,10)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1189" width="0.0829%" height="15" fill="rgb(249,177,6)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1173" width="0.0829%" height="15" fill="rgb(215,154,26)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1157" width="0.0829%" height="15" fill="rgb(250,168,20)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1141" width="0.0829%" height="15" fill="rgb(222,53,38)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1125" width="0.0829%" height="15" fill="rgb(245,154,5)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="65.1914%" y="1109" width="0.0829%" height="15" fill="rgb(214,89,50)" fg:x="3933" fg:w="5"/><text x="65.4414%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="65.2080%" y="1093" width="0.0663%" height="15" fill="rgb(232,73,14)" fg:x="3934" fg:w="4"/><text x="65.4580%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="65.2246%" y="1077" width="0.0497%" height="15" fill="rgb(230,101,20)" fg:x="3935" fg:w="3"/><text x="65.4746%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="65.2246%" y="1061" width="0.0497%" height="15" fill="rgb(208,56,28)" fg:x="3935" fg:w="3"/><text x="65.4746%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="65.2246%" y="1045" width="0.0497%" height="15" fill="rgb(247,205,22)" fg:x="3935" fg:w="3"/><text x="65.4746%" y="1055.50"></text></g><g><title>MurmurHash3 (1 samples, 0.02%)</title><rect x="65.2743%" y="1173" width="0.0166%" height="15" fill="rgb(252,109,51)" fg:x="3938" fg:w="1"/><text x="65.5243%" y="1183.50"></text></g><g><title>CRollingBloomFilter::insert (5 samples, 0.08%)</title><rect x="66.1197%" y="1109" width="0.0829%" height="15" fill="rgb(220,40,24)" fg:x="3989" fg:w="5"/><text x="66.3697%" y="1119.50"></text></g><g><title>FastRange32 (4 samples, 0.07%)</title><rect x="66.2026%" y="1109" width="0.0663%" height="15" fill="rgb(251,108,7)" fg:x="3994" fg:w="4"/><text x="66.4526%" y="1119.50"></text></g><g><title>RollingBloomHash (5 samples, 0.08%)</title><rect x="66.2689%" y="1109" width="0.0829%" height="15" fill="rgb(238,102,51)" fg:x="3998" fg:w="5"/><text x="66.5189%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="66.3517%" y="1109" width="0.0166%" height="15" fill="rgb(219,149,34)" fg:x="4003" fg:w="1"/><text x="66.6017%" y="1119.50"></text></g><g><title>CRollingBloomFilter::insert (38 samples, 0.63%)</title><rect x="65.7550%" y="1125" width="0.6299%" height="15" fill="rgb(239,70,0)" fg:x="3967" fg:w="38"/><text x="66.0050%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (1 samples, 0.02%)</title><rect x="66.3683%" y="1109" width="0.0166%" height="15" fill="rgb(246,214,23)" fg:x="4004" fg:w="1"/><text x="66.6183%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.2800%" y="1109" width="0.0663%" height="15" fill="rgb(239,221,51)" fg:x="4059" fg:w="4"/><text x="67.5300%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.2800%" y="1093" width="0.0663%" height="15" fill="rgb(254,62,14)" fg:x="4059" fg:w="4"/><text x="67.5300%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.2800%" y="1077" width="0.0663%" height="15" fill="rgb(253,57,33)" fg:x="4059" fg:w="4"/><text x="67.5300%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.2800%" y="1061" width="0.0663%" height="15" fill="rgb(229,34,6)" fg:x="4059" fg:w="4"/><text x="67.5300%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.2800%" y="1045" width="0.0663%" height="15" fill="rgb(235,191,23)" fg:x="4059" fg:w="4"/><text x="67.5300%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.2800%" y="1029" width="0.0663%" height="15" fill="rgb(217,207,27)" fg:x="4059" fg:w="4"/><text x="67.5300%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.2965%" y="1013" width="0.0497%" height="15" fill="rgb(232,41,44)" fg:x="4060" fg:w="3"/><text x="67.5465%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.2965%" y="997" width="0.0497%" height="15" fill="rgb(221,188,19)" fg:x="4060" fg:w="3"/><text x="67.5465%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.2965%" y="981" width="0.0497%" height="15" fill="rgb(245,180,45)" fg:x="4060" fg:w="3"/><text x="67.5465%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.2965%" y="965" width="0.0497%" height="15" fill="rgb(250,220,42)" fg:x="4060" fg:w="3"/><text x="67.5465%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.2965%" y="949" width="0.0497%" height="15" fill="rgb(234,16,34)" fg:x="4060" fg:w="3"/><text x="67.5465%" y="959.50"></text></g><g><title>MurmurHash3 (64 samples, 1.06%)</title><rect x="66.3849%" y="1125" width="1.0608%" height="15" fill="rgb(233,217,23)" fg:x="4005" fg:w="64"/><text x="66.6349%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (6 samples, 0.10%)</title><rect x="67.3463%" y="1109" width="0.0995%" height="15" fill="rgb(209,22,46)" fg:x="4063" fg:w="6"/><text x="67.5963%" y="1119.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (6 samples, 0.10%)</title><rect x="67.3463%" y="1093" width="0.0995%" height="15" fill="rgb(213,101,18)" fg:x="4063" fg:w="6"/><text x="67.5963%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="1077" width="0.0166%" height="15" fill="rgb(215,179,52)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="1061" width="0.0166%" height="15" fill="rgb(223,50,25)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="1045" width="0.0166%" height="15" fill="rgb(224,51,44)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="1029" width="0.0166%" height="15" fill="rgb(224,13,54)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="1013" width="0.0166%" height="15" fill="rgb(219,58,47)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="997" width="0.0166%" height="15" fill="rgb(246,124,34)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="1007.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="67.4291%" y="981" width="0.0166%" height="15" fill="rgb(245,109,25)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="965" width="0.0166%" height="15" fill="rgb(235,48,23)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="949" width="0.0166%" height="15" fill="rgb(229,203,36)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="933" width="0.0166%" height="15" fill="rgb(234,180,9)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="917" width="0.0166%" height="15" fill="rgb(228,98,45)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="901" width="0.0166%" height="15" fill="rgb(240,24,36)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="885" width="0.0166%" height="15" fill="rgb(227,154,19)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="869" width="0.0166%" height="15" fill="rgb(231,2,48)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="853" width="0.0166%" height="15" fill="rgb(219,216,0)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="837" width="0.0166%" height="15" fill="rgb(251,88,0)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="821" width="0.0166%" height="15" fill="rgb(242,45,45)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="805" width="0.0166%" height="15" fill="rgb(218,149,45)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="789" width="0.0166%" height="15" fill="rgb(247,194,10)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="773" width="0.0166%" height="15" fill="rgb(234,33,37)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.4291%" y="757" width="0.0166%" height="15" fill="rgb(218,61,13)" fg:x="4068" fg:w="1"/><text x="67.6791%" y="767.50"></text></g><g><title>CRollingBloomFilter::insert (110 samples, 1.82%)</title><rect x="65.6390%" y="1141" width="1.8233%" height="15" fill="rgb(210,80,52)" fg:x="3960" fg:w="110"/><text x="65.8890%" y="1151.50">C..</text></g><g><title>TxRequestTracker::ForgetTxHash (1 samples, 0.02%)</title><rect x="67.4457%" y="1125" width="0.0166%" height="15" fill="rgb(218,203,27)" fg:x="4069" fg:w="1"/><text x="67.6957%" y="1135.50"></text></g><g><title>FastRange32 (8 samples, 0.13%)</title><rect x="67.4623%" y="1141" width="0.1326%" height="15" fill="rgb(209,126,33)" fg:x="4070" fg:w="8"/><text x="67.7123%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1141" width="0.0166%" height="15" fill="rgb(234,173,41)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1125" width="0.0166%" height="15" fill="rgb(228,166,9)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1109" width="0.0166%" height="15" fill="rgb(208,124,43)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1093" width="0.0166%" height="15" fill="rgb(212,154,38)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1077" width="0.0166%" height="15" fill="rgb(246,179,35)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1061" width="0.0166%" height="15" fill="rgb(251,3,50)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1045" width="0.0166%" height="15" fill="rgb(219,96,8)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1029" width="0.0166%" height="15" fill="rgb(251,216,33)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="1013" width="0.0166%" height="15" fill="rgb(243,145,29)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5949%" y="997" width="0.0166%" height="15" fill="rgb(210,75,20)" fg:x="4078" fg:w="1"/><text x="67.8449%" y="1007.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (6 samples, 0.10%)</title><rect x="67.6115%" y="1141" width="0.0995%" height="15" fill="rgb(235,56,8)" fg:x="4079" fg:w="6"/><text x="67.8615%" y="1151.50"></text></g><g><title>CRollingBloomFilter::insert (149 samples, 2.47%)</title><rect x="65.2909%" y="1157" width="2.4697%" height="15" fill="rgb(226,175,49)" fg:x="3939" fg:w="149"/><text x="65.5409%" y="1167.50">CR..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (3 samples, 0.05%)</title><rect x="67.7109%" y="1141" width="0.0497%" height="15" fill="rgb(242,204,23)" fg:x="4085" fg:w="3"/><text x="67.9609%" y="1151.50"></text></g><g><title>MurmurHash3 (60 samples, 0.99%)</title><rect x="67.7606%" y="1157" width="0.9945%" height="15" fill="rgb(225,104,24)" fg:x="4088" fg:w="60"/><text x="68.0106%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (12 samples, 0.20%)</title><rect x="68.5563%" y="1141" width="0.1989%" height="15" fill="rgb(253,34,1)" fg:x="4136" fg:w="12"/><text x="68.8063%" y="1151.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (12 samples, 0.20%)</title><rect x="68.5563%" y="1125" width="0.1989%" height="15" fill="rgb(233,199,23)" fg:x="4136" fg:w="12"/><text x="68.8063%" y="1135.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.03%)</title><rect x="68.7718%" y="1141" width="0.0332%" height="15" fill="rgb(247,7,51)" fg:x="4149" fg:w="2"/><text x="69.0218%" y="1151.50"></text></g><g><title>TxOrphanage::EraseForBlock (1 samples, 0.02%)</title><rect x="68.7883%" y="1125" width="0.0166%" height="15" fill="rgb(214,146,12)" fg:x="4150" fg:w="1"/><text x="69.0383%" y="1135.50"></text></g><g><title>TxOrphanage::EraseForBlock (7 samples, 0.12%)</title><rect x="68.7552%" y="1157" width="0.1160%" height="15" fill="rgb(234,181,43)" fg:x="4148" fg:w="7"/><text x="69.0052%" y="1167.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::end (4 samples, 0.07%)</title><rect x="68.8049%" y="1141" width="0.0663%" height="15" fill="rgb(239,148,6)" fg:x="4151" fg:w="4"/><text x="69.0549%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::__normal_iterator (4 samples, 0.07%)</title><rect x="68.8049%" y="1125" width="0.0663%" height="15" fill="rgb(206,151,17)" fg:x="4151" fg:w="4"/><text x="69.0549%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8049%" y="1109" width="0.0663%" height="15" fill="rgb(213,215,10)" fg:x="4151" fg:w="4"/><text x="69.0549%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8049%" y="1093" width="0.0663%" height="15" fill="rgb(215,220,44)" fg:x="4151" fg:w="4"/><text x="69.0549%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8049%" y="1077" width="0.0663%" height="15" fill="rgb(245,205,37)" fg:x="4151" fg:w="4"/><text x="69.0549%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8049%" y="1061" width="0.0663%" height="15" fill="rgb(245,130,43)" fg:x="4151" fg:w="4"/><text x="69.0549%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8049%" y="1045" width="0.0663%" height="15" fill="rgb(231,227,38)" fg:x="4151" fg:w="4"/><text x="69.0549%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8215%" y="1029" width="0.0497%" height="15" fill="rgb(233,185,4)" fg:x="4152" fg:w="3"/><text x="69.0715%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8215%" y="1013" width="0.0497%" height="15" fill="rgb(224,154,43)" fg:x="4152" fg:w="3"/><text x="69.0715%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8215%" y="997" width="0.0497%" height="15" fill="rgb(235,156,15)" fg:x="4152" fg:w="3"/><text x="69.0715%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8215%" y="981" width="0.0497%" height="15" fill="rgb(211,55,43)" fg:x="4152" fg:w="3"/><text x="69.0715%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8215%" y="965" width="0.0497%" height="15" fill="rgb(247,149,40)" fg:x="4152" fg:w="3"/><text x="69.0715%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8215%" y="949" width="0.0497%" height="15" fill="rgb(232,171,16)" fg:x="4152" fg:w="3"/><text x="69.0715%" y="959.50"></text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (1 samples, 0.02%)</title><rect x="68.8712%" y="1157" width="0.0166%" height="15" fill="rgb(215,117,49)" fg:x="4155" fg:w="1"/><text x="69.1212%" y="1167.50"></text></g><g><title>node::TxDownloadManagerImpl::RecentConfirmedTransactionsFilter (1 samples, 0.02%)</title><rect x="68.8878%" y="1157" width="0.0166%" height="15" fill="rgb(246,194,11)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1167.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CRollingBloomFilter&gt;::__single_object std::make_unique&lt;CRollingBloomFilter, int, double&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="1141" width="0.0166%" height="15" fill="rgb(242,101,44)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1151.50"></text></g><g><title>CRollingBloomFilter::CRollingBloomFilter (1 samples, 0.02%)</title><rect x="68.8878%" y="1125" width="0.0166%" height="15" fill="rgb(226,174,6)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="68.8878%" y="1109" width="0.0166%" height="15" fill="rgb(213,150,20)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="68.8878%" y="1093" width="0.0166%" height="15" fill="rgb(222,124,42)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1103.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="1077" width="0.0166%" height="15" fill="rgb(250,19,47)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1087.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="1061" width="0.0166%" height="15" fill="rgb(241,217,19)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1071.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="1045" width="0.0166%" height="15" fill="rgb(207,210,34)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1055.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="1029" width="0.0166%" height="15" fill="rgb(244,45,4)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1039.50"></text></g><g><title>unsigned long* std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="1013" width="0.0166%" height="15" fill="rgb(252,134,50)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1023.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="997" width="0.0166%" height="15" fill="rgb(238,74,2)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="1007.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="981" width="0.0166%" height="15" fill="rgb(226,58,46)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="991.50"></text></g><g><title>void std::__fill_a&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="965" width="0.0166%" height="15" fill="rgb(232,83,35)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="975.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;unsigned long&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="68.8878%" y="949" width="0.0166%" height="15" fill="rgb(212,148,47)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="959.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="68.8878%" y="933" width="0.0166%" height="15" fill="rgb(235,29,1)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="68.8878%" y="917" width="0.0166%" height="15" fill="rgb(247,55,37)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="68.8878%" y="901" width="0.0166%" height="15" fill="rgb(222,48,3)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="68.8878%" y="885" width="0.0166%" height="15" fill="rgb(234,21,33)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="68.8878%" y="869" width="0.0166%" height="15" fill="rgb(247,178,53)" fg:x="4156" fg:w="1"/><text x="69.1378%" y="879.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (221 samples, 3.66%)</title><rect x="65.2743%" y="1269" width="3.6632%" height="15" fill="rgb(225,75,7)" fg:x="3938" fg:w="221"/><text x="65.5243%" y="1279.50">__in..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (221 samples, 3.66%)</title><rect x="65.2743%" y="1253" width="3.6632%" height="15" fill="rgb(219,199,7)" fg:x="3938" fg:w="221"/><text x="65.5243%" y="1263.50">__in..</text></g><g><title>operator (221 samples, 3.66%)</title><rect x="65.2743%" y="1237" width="3.6632%" height="15" fill="rgb(209,93,42)" fg:x="3938" fg:w="221"/><text x="65.5243%" y="1247.50">oper..</text></g><g><title>operator (221 samples, 3.66%)</title><rect x="65.2743%" y="1221" width="3.6632%" height="15" fill="rgb(240,175,17)" fg:x="3938" fg:w="221"/><text x="65.5243%" y="1231.50">oper..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (221 samples, 3.66%)</title><rect x="65.2743%" y="1205" width="3.6632%" height="15" fill="rgb(232,106,7)" fg:x="3938" fg:w="221"/><text x="65.5243%" y="1215.50">Iter..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (221 samples, 3.66%)</title><rect x="65.2743%" y="1189" width="3.6632%" height="15" fill="rgb(242,106,43)" fg:x="3938" fg:w="221"/><text x="65.5243%" y="1199.50">std:..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (220 samples, 3.65%)</title><rect x="65.2909%" y="1173" width="3.6466%" height="15" fill="rgb(242,61,37)" fg:x="3939" fg:w="220"/><text x="65.5409%" y="1183.50">node..</text></g><g><title>std::_Rb_tree&lt;COutPoint, std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.03%)</title><rect x="68.9044%" y="1157" width="0.0332%" height="15" fill="rgb(205,72,10)" fg:x="4157" fg:w="2"/><text x="69.1544%" y="1167.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (227 samples, 3.76%)</title><rect x="65.2743%" y="1301" width="3.7626%" height="15" fill="rgb(214,184,36)" fg:x="3938" fg:w="227"/><text x="65.5243%" y="1311.50">std:..</text></g><g><title>_M_invoke (227 samples, 3.76%)</title><rect x="65.2743%" y="1285" width="3.7626%" height="15" fill="rgb(206,107,18)" fg:x="3938" fg:w="227"/><text x="65.5243%" y="1295.50">_M_i..</text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="68.9375%" y="1269" width="0.0995%" height="15" fill="rgb(210,75,5)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1279.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (6 samples, 0.10%)</title><rect x="68.9375%" y="1253" width="0.0995%" height="15" fill="rgb(205,3,19)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1263.50"></text></g><g><title>operator (6 samples, 0.10%)</title><rect x="68.9375%" y="1237" width="0.0995%" height="15" fill="rgb(207,181,42)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1247.50"></text></g><g><title>operator (6 samples, 0.10%)</title><rect x="68.9375%" y="1221" width="0.0995%" height="15" fill="rgb(229,179,43)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1231.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (6 samples, 0.10%)</title><rect x="68.9375%" y="1205" width="0.0995%" height="15" fill="rgb(246,95,30)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1215.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (6 samples, 0.10%)</title><rect x="68.9375%" y="1189" width="0.0995%" height="15" fill="rgb(234,144,45)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1199.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (6 samples, 0.10%)</title><rect x="68.9375%" y="1173" width="0.0995%" height="15" fill="rgb(250,54,25)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1183.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (6 samples, 0.10%)</title><rect x="68.9375%" y="1157" width="0.0995%" height="15" fill="rgb(215,195,40)" fg:x="4159" fg:w="6"/><text x="69.1875%" y="1167.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="69.0204%" y="1141" width="0.0166%" height="15" fill="rgb(233,188,42)" fg:x="4164" fg:w="1"/><text x="69.2704%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="69.0370%" y="1125" width="0.0497%" height="15" fill="rgb(247,227,35)" fg:x="4165" fg:w="3"/><text x="69.2870%" y="1135.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="69.0370%" y="1109" width="0.0497%" height="15" fill="rgb(249,124,27)" fg:x="4165" fg:w="3"/><text x="69.2870%" y="1119.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3 samples, 0.05%)</title><rect x="69.0370%" y="1093" width="0.0497%" height="15" fill="rgb(219,207,25)" fg:x="4165" fg:w="3"/><text x="69.2870%" y="1103.50"></text></g><g><title>malloc_consolidate (3 samples, 0.05%)</title><rect x="69.0370%" y="1077" width="0.0497%" height="15" fill="rgb(241,216,47)" fg:x="4165" fg:w="3"/><text x="69.2870%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0867%" y="853" width="0.0663%" height="15" fill="rgb(233,82,50)" fg:x="4168" fg:w="4"/><text x="69.3367%" y="863.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0867%" y="837" width="0.0663%" height="15" fill="rgb(232,63,2)" fg:x="4168" fg:w="4"/><text x="69.3367%" y="847.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0867%" y="821" width="0.0663%" height="15" fill="rgb(236,184,28)" fg:x="4168" fg:w="4"/><text x="69.3367%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0867%" y="805" width="0.0663%" height="15" fill="rgb(254,63,27)" fg:x="4168" fg:w="4"/><text x="69.3367%" y="815.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0867%" y="789" width="0.0663%" height="15" fill="rgb(253,106,28)" fg:x="4168" fg:w="4"/><text x="69.3367%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.1033%" y="773" width="0.0497%" height="15" fill="rgb(225,141,39)" fg:x="4169" fg:w="3"/><text x="69.3533%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.1033%" y="757" width="0.0497%" height="15" fill="rgb(222,157,20)" fg:x="4169" fg:w="3"/><text x="69.3533%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.1033%" y="741" width="0.0497%" height="15" fill="rgb(210,190,9)" fg:x="4169" fg:w="3"/><text x="69.3533%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.1033%" y="725" width="0.0497%" height="15" fill="rgb(242,167,7)" fg:x="4169" fg:w="3"/><text x="69.3533%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.1033%" y="709" width="0.0497%" height="15" fill="rgb(227,82,41)" fg:x="4169" fg:w="3"/><text x="69.3533%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.1033%" y="693" width="0.0497%" height="15" fill="rgb(222,131,13)" fg:x="4169" fg:w="3"/><text x="69.3533%" y="703.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.13%)</title><rect x="69.1530%" y="853" width="0.1326%" height="15" fill="rgb(221,98,26)" fg:x="4172" fg:w="8"/><text x="69.4030%" y="863.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="69.1530%" y="837" width="0.1326%" height="15" fill="rgb(251,63,52)" fg:x="4172" fg:w="8"/><text x="69.4030%" y="847.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="69.1530%" y="821" width="0.1326%" height="15" fill="rgb(246,25,43)" fg:x="4172" fg:w="8"/><text x="69.4030%" y="831.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="69.1530%" y="805" width="0.1326%" height="15" fill="rgb(247,167,15)" fg:x="4172" fg:w="8"/><text x="69.4030%" y="815.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.1861%" y="789" width="0.0995%" height="15" fill="rgb(240,104,42)" fg:x="4174" fg:w="6"/><text x="69.4361%" y="799.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="69.1861%" y="773" width="0.0995%" height="15" fill="rgb(224,54,6)" fg:x="4174" fg:w="6"/><text x="69.4361%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="69.2524%" y="757" width="0.0332%" height="15" fill="rgb(244,108,35)" fg:x="4178" fg:w="2"/><text x="69.5024%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="69.5342%" y="837" width="0.0829%" height="15" fill="rgb(216,154,2)" fg:x="4195" fg:w="5"/><text x="69.7842%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="69.5342%" y="821" width="0.0829%" height="15" fill="rgb(222,8,47)" fg:x="4195" fg:w="5"/><text x="69.7842%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="69.5342%" y="805" width="0.0829%" height="15" fill="rgb(252,93,1)" fg:x="4195" fg:w="5"/><text x="69.7842%" y="815.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.5508%" y="789" width="0.0663%" height="15" fill="rgb(223,226,51)" fg:x="4196" fg:w="4"/><text x="69.8008%" y="799.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.5508%" y="773" width="0.0663%" height="15" fill="rgb(206,147,9)" fg:x="4196" fg:w="4"/><text x="69.8008%" y="783.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.5508%" y="757" width="0.0663%" height="15" fill="rgb(248,180,41)" fg:x="4196" fg:w="4"/><text x="69.8008%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.5508%" y="741" width="0.0663%" height="15" fill="rgb(209,47,50)" fg:x="4196" fg:w="4"/><text x="69.8008%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.5508%" y="725" width="0.0663%" height="15" fill="rgb(243,65,31)" fg:x="4196" fg:w="4"/><text x="69.8008%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.5674%" y="709" width="0.0497%" height="15" fill="rgb(228,128,1)" fg:x="4197" fg:w="3"/><text x="69.8174%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.5674%" y="693" width="0.0497%" height="15" fill="rgb(231,192,16)" fg:x="4197" fg:w="3"/><text x="69.8174%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.5674%" y="677" width="0.0497%" height="15" fill="rgb(224,26,40)" fg:x="4197" fg:w="3"/><text x="69.8174%" y="687.50"></text></g><g><title>__lll_lock_wait_private (56 samples, 0.93%)</title><rect x="69.6171%" y="837" width="0.9282%" height="15" fill="rgb(214,192,17)" fg:x="4200" fg:w="56"/><text x="69.8671%" y="847.50"></text></g><g><title>[unknown] (55 samples, 0.91%)</title><rect x="69.6337%" y="821" width="0.9117%" height="15" fill="rgb(225,147,18)" fg:x="4201" fg:w="55"/><text x="69.8837%" y="831.50"></text></g><g><title>[unknown] (53 samples, 0.88%)</title><rect x="69.6668%" y="805" width="0.8785%" height="15" fill="rgb(205,35,11)" fg:x="4203" fg:w="53"/><text x="69.9168%" y="815.50"></text></g><g><title>[unknown] (53 samples, 0.88%)</title><rect x="69.6668%" y="789" width="0.8785%" height="15" fill="rgb(242,40,42)" fg:x="4203" fg:w="53"/><text x="69.9168%" y="799.50"></text></g><g><title>[unknown] (51 samples, 0.85%)</title><rect x="69.7000%" y="773" width="0.8454%" height="15" fill="rgb(250,170,13)" fg:x="4205" fg:w="51"/><text x="69.9500%" y="783.50"></text></g><g><title>[unknown] (49 samples, 0.81%)</title><rect x="69.7331%" y="757" width="0.8122%" height="15" fill="rgb(240,161,28)" fg:x="4207" fg:w="49"/><text x="69.9831%" y="767.50"></text></g><g><title>[unknown] (42 samples, 0.70%)</title><rect x="69.8492%" y="741" width="0.6962%" height="15" fill="rgb(245,179,12)" fg:x="4214" fg:w="42"/><text x="70.0992%" y="751.50"></text></g><g><title>[unknown] (40 samples, 0.66%)</title><rect x="69.8823%" y="725" width="0.6630%" height="15" fill="rgb(250,92,32)" fg:x="4216" fg:w="40"/><text x="70.1323%" y="735.50"></text></g><g><title>[unknown] (36 samples, 0.60%)</title><rect x="69.9486%" y="709" width="0.5967%" height="15" fill="rgb(233,10,40)" fg:x="4220" fg:w="36"/><text x="70.1986%" y="719.50"></text></g><g><title>[unknown] (33 samples, 0.55%)</title><rect x="69.9983%" y="693" width="0.5470%" height="15" fill="rgb(217,98,1)" fg:x="4223" fg:w="33"/><text x="70.2483%" y="703.50"></text></g><g><title>[unknown] (25 samples, 0.41%)</title><rect x="70.1309%" y="677" width="0.4144%" height="15" fill="rgb(238,202,7)" fg:x="4231" fg:w="25"/><text x="70.3809%" y="687.50"></text></g><g><title>[unknown] (12 samples, 0.20%)</title><rect x="70.3464%" y="661" width="0.1989%" height="15" fill="rgb(222,91,3)" fg:x="4244" fg:w="12"/><text x="70.5964%" y="671.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="70.3962%" y="645" width="0.1492%" height="15" fill="rgb(211,170,49)" fg:x="4247" fg:w="9"/><text x="70.6462%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="70.5122%" y="629" width="0.0332%" height="15" fill="rgb(253,139,18)" fg:x="4254" fg:w="2"/><text x="70.7622%" y="639.50"></text></g><g><title>cfree@GLIBC_2.2.5 (89 samples, 1.48%)</title><rect x="69.0867%" y="869" width="1.4752%" height="15" fill="rgb(222,4,43)" fg:x="4168" fg:w="89"/><text x="69.3367%" y="879.50"></text></g><g><title>_int_free (77 samples, 1.28%)</title><rect x="69.2856%" y="853" width="1.2763%" height="15" fill="rgb(207,205,12)" fg:x="4180" fg:w="77"/><text x="69.5356%" y="863.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="70.5453%" y="837" width="0.0166%" height="15" fill="rgb(216,159,46)" fg:x="4256" fg:w="1"/><text x="70.7953%" y="847.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="70.5453%" y="821" width="0.0166%" height="15" fill="rgb(236,115,1)" fg:x="4256" fg:w="1"/><text x="70.7953%" y="831.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.08%)</title><rect x="70.5785%" y="565" width="0.0829%" height="15" fill="rgb(251,35,33)" fg:x="4258" fg:w="5"/><text x="70.8285%" y="575.50"></text></g><g><title>_int_free (5 samples, 0.08%)</title><rect x="70.5785%" y="549" width="0.0829%" height="15" fill="rgb(248,62,51)" fg:x="4258" fg:w="5"/><text x="70.8285%" y="559.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (7 samples, 0.12%)</title><rect x="70.5619%" y="645" width="0.1160%" height="15" fill="rgb(254,180,19)" fg:x="4257" fg:w="7"/><text x="70.8119%" y="655.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (6 samples, 0.10%)</title><rect x="70.5785%" y="629" width="0.0995%" height="15" fill="rgb(217,100,32)" fg:x="4258" fg:w="6"/><text x="70.8285%" y="639.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (6 samples, 0.10%)</title><rect x="70.5785%" y="613" width="0.0995%" height="15" fill="rgb(224,71,22)" fg:x="4258" fg:w="6"/><text x="70.8285%" y="623.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (6 samples, 0.10%)</title><rect x="70.5785%" y="597" width="0.0995%" height="15" fill="rgb(251,185,33)" fg:x="4258" fg:w="6"/><text x="70.8285%" y="607.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (6 samples, 0.10%)</title><rect x="70.5785%" y="581" width="0.0995%" height="15" fill="rgb(209,75,48)" fg:x="4258" fg:w="6"/><text x="70.8285%" y="591.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="70.6614%" y="565" width="0.0166%" height="15" fill="rgb(253,190,16)" fg:x="4263" fg:w="1"/><text x="70.9114%" y="575.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.02%)</title><rect x="70.6945%" y="453" width="0.0166%" height="15" fill="rgb(226,140,1)" fg:x="4265" fg:w="1"/><text x="70.9445%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.6945%" y="437" width="0.0166%" height="15" fill="rgb(206,75,30)" fg:x="4265" fg:w="1"/><text x="70.9445%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.6945%" y="421" width="0.0166%" height="15" fill="rgb(231,208,37)" fg:x="4265" fg:w="1"/><text x="70.9445%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.6945%" y="405" width="0.0166%" height="15" fill="rgb(238,136,40)" fg:x="4265" fg:w="1"/><text x="70.9445%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.6945%" y="389" width="0.0166%" height="15" fill="rgb(247,137,17)" fg:x="4265" fg:w="1"/><text x="70.9445%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.6945%" y="373" width="0.0166%" height="15" fill="rgb(240,60,40)" fg:x="4265" fg:w="1"/><text x="70.9445%" y="383.50"></text></g><g><title>__lll_lock_wait_private (2 samples, 0.03%)</title><rect x="70.7608%" y="437" width="0.0332%" height="15" fill="rgb(236,68,50)" fg:x="4269" fg:w="2"/><text x="71.0108%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="70.7608%" y="421" width="0.0332%" height="15" fill="rgb(230,42,12)" fg:x="4269" fg:w="2"/><text x="71.0108%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="70.7608%" y="405" width="0.0332%" height="15" fill="rgb(219,16,16)" fg:x="4269" fg:w="2"/><text x="71.0108%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="70.7608%" y="389" width="0.0332%" height="15" fill="rgb(220,38,35)" fg:x="4269" fg:w="2"/><text x="71.0108%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="70.7608%" y="373" width="0.0332%" height="15" fill="rgb(228,33,1)" fg:x="4269" fg:w="2"/><text x="71.0108%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7774%" y="357" width="0.0166%" height="15" fill="rgb(241,46,31)" fg:x="4270" fg:w="1"/><text x="71.0274%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7774%" y="341" width="0.0166%" height="15" fill="rgb(232,58,20)" fg:x="4270" fg:w="1"/><text x="71.0274%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7774%" y="325" width="0.0166%" height="15" fill="rgb(206,228,53)" fg:x="4270" fg:w="1"/><text x="71.0274%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7774%" y="309" width="0.0166%" height="15" fill="rgb(206,88,33)" fg:x="4270" fg:w="1"/><text x="71.0274%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7774%" y="293" width="0.0166%" height="15" fill="rgb(238,69,7)" fg:x="4270" fg:w="1"/><text x="71.0274%" y="303.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (15 samples, 0.25%)</title><rect x="70.5619%" y="789" width="0.2486%" height="15" fill="rgb(250,21,46)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (15 samples, 0.25%)</title><rect x="70.5619%" y="773" width="0.2486%" height="15" fill="rgb(215,212,21)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (15 samples, 0.25%)</title><rect x="70.5619%" y="757" width="0.2486%" height="15" fill="rgb(211,35,12)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (15 samples, 0.25%)</title><rect x="70.5619%" y="741" width="0.2486%" height="15" fill="rgb(231,184,16)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (15 samples, 0.25%)</title><rect x="70.5619%" y="725" width="0.2486%" height="15" fill="rgb(242,140,15)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (15 samples, 0.25%)</title><rect x="70.5619%" y="709" width="0.2486%" height="15" fill="rgb(220,37,14)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="719.50"></text></g><g><title>CTxIn::~CTxIn (15 samples, 0.25%)</title><rect x="70.5619%" y="693" width="0.2486%" height="15" fill="rgb(223,146,22)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="703.50"></text></g><g><title>CScriptWitness::~CScriptWitness (15 samples, 0.25%)</title><rect x="70.5619%" y="677" width="0.2486%" height="15" fill="rgb(216,132,15)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="687.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (15 samples, 0.25%)</title><rect x="70.5619%" y="661" width="0.2486%" height="15" fill="rgb(248,83,5)" fg:x="4257" fg:w="15"/><text x="70.8119%" y="671.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="70.6779%" y="645" width="0.1326%" height="15" fill="rgb(231,206,48)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="655.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (8 samples, 0.13%)</title><rect x="70.6779%" y="629" width="0.1326%" height="15" fill="rgb(253,185,37)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="639.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (8 samples, 0.13%)</title><rect x="70.6779%" y="613" width="0.1326%" height="15" fill="rgb(208,21,44)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="623.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="70.6779%" y="597" width="0.1326%" height="15" fill="rgb(236,125,4)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="607.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="70.6779%" y="581" width="0.1326%" height="15" fill="rgb(226,134,25)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="591.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (8 samples, 0.13%)</title><rect x="70.6779%" y="565" width="0.1326%" height="15" fill="rgb(250,201,12)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="575.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (8 samples, 0.13%)</title><rect x="70.6779%" y="549" width="0.1326%" height="15" fill="rgb(225,92,18)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="559.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (8 samples, 0.13%)</title><rect x="70.6779%" y="533" width="0.1326%" height="15" fill="rgb(227,35,22)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (8 samples, 0.13%)</title><rect x="70.6779%" y="517" width="0.1326%" height="15" fill="rgb(214,180,52)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="527.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (8 samples, 0.13%)</title><rect x="70.6779%" y="501" width="0.1326%" height="15" fill="rgb(233,55,38)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="511.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (8 samples, 0.13%)</title><rect x="70.6779%" y="485" width="0.1326%" height="15" fill="rgb(249,171,43)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="495.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.13%)</title><rect x="70.6779%" y="469" width="0.1326%" height="15" fill="rgb(239,87,2)" fg:x="4264" fg:w="8"/><text x="70.9279%" y="479.50"></text></g><g><title>_int_free (6 samples, 0.10%)</title><rect x="70.7111%" y="453" width="0.0995%" height="15" fill="rgb(248,141,5)" fg:x="4266" fg:w="6"/><text x="70.9611%" y="463.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="70.7940%" y="437" width="0.0166%" height="15" fill="rgb(238,33,42)" fg:x="4271" fg:w="1"/><text x="71.0440%" y="447.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.02%)</title><rect x="70.8603%" y="677" width="0.0166%" height="15" fill="rgb(231,57,19)" fg:x="4275" fg:w="1"/><text x="71.1103%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.8603%" y="661" width="0.0166%" height="15" fill="rgb(214,78,53)" fg:x="4275" fg:w="1"/><text x="71.1103%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.8603%" y="645" width="0.0166%" height="15" fill="rgb(206,132,29)" fg:x="4275" fg:w="1"/><text x="71.1103%" y="655.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="70.8768%" y="661" width="0.0166%" height="15" fill="rgb(248,174,31)" fg:x="4276" fg:w="1"/><text x="71.1268%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.8768%" y="645" width="0.0166%" height="15" fill="rgb(221,87,13)" fg:x="4276" fg:w="1"/><text x="71.1268%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.8768%" y="629" width="0.0166%" height="15" fill="rgb(223,197,17)" fg:x="4276" fg:w="1"/><text x="71.1268%" y="639.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (6 samples, 0.10%)</title><rect x="70.8105%" y="773" width="0.0995%" height="15" fill="rgb(220,144,50)" fg:x="4272" fg:w="6"/><text x="71.0605%" y="783.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (5 samples, 0.08%)</title><rect x="70.8271%" y="757" width="0.0829%" height="15" fill="rgb(244,201,11)" fg:x="4273" fg:w="5"/><text x="71.0771%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (5 samples, 0.08%)</title><rect x="70.8271%" y="741" width="0.0829%" height="15" fill="rgb(249,81,34)" fg:x="4273" fg:w="5"/><text x="71.0771%" y="751.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (5 samples, 0.08%)</title><rect x="70.8271%" y="725" width="0.0829%" height="15" fill="rgb(205,161,12)" fg:x="4273" fg:w="5"/><text x="71.0771%" y="735.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (5 samples, 0.08%)</title><rect x="70.8271%" y="709" width="0.0829%" height="15" fill="rgb(252,139,50)" fg:x="4273" fg:w="5"/><text x="71.0771%" y="719.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="70.8437%" y="693" width="0.0663%" height="15" fill="rgb(205,169,14)" fg:x="4274" fg:w="4"/><text x="71.0937%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="70.8768%" y="677" width="0.0332%" height="15" fill="rgb(248,198,33)" fg:x="4276" fg:w="2"/><text x="71.1268%" y="687.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.02%)</title><rect x="70.8934%" y="661" width="0.0166%" height="15" fill="rgb(236,23,21)" fg:x="4277" fg:w="1"/><text x="71.1434%" y="671.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="70.8934%" y="645" width="0.0166%" height="15" fill="rgb(231,13,38)" fg:x="4277" fg:w="1"/><text x="71.1434%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="70.9431%" y="629" width="0.0166%" height="15" fill="rgb(239,139,21)" fg:x="4280" fg:w="1"/><text x="71.1931%" y="639.50"></text></g><g><title>__clone (349 samples, 5.78%)</title><rect x="65.1914%" y="1509" width="5.7848%" height="15" fill="rgb(222,164,45)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1519.50">__clone</text></g><g><title>start_thread (349 samples, 5.78%)</title><rect x="65.1914%" y="1493" width="5.7848%" height="15" fill="rgb(230,52,27)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1503.50">start_t..</text></g><g><title>execute_native_thread_routine (349 samples, 5.78%)</title><rect x="65.1914%" y="1477" width="5.7848%" height="15" fill="rgb(227,143,42)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1487.50">execute..</text></g><g><title>_M_run (349 samples, 5.78%)</title><rect x="65.1914%" y="1461" width="5.7848%" height="15" fill="rgb(249,127,1)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1471.50">_M_run</text></g><g><title>operator (349 samples, 5.78%)</title><rect x="65.1914%" y="1445" width="5.7848%" height="15" fill="rgb(243,107,26)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (349 samples, 5.78%)</title><rect x="65.1914%" y="1429" width="5.7848%" height="15" fill="rgb(225,7,45)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1439.50">_M_invo..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (349 samples, 5.78%)</title><rect x="65.1914%" y="1413" width="5.7848%" height="15" fill="rgb(241,88,38)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1423.50">__invok..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (349 samples, 5.78%)</title><rect x="65.1914%" y="1397" width="5.7848%" height="15" fill="rgb(226,121,9)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1407.50">std::th..</text></g><g><title>util::TraceThread (349 samples, 5.78%)</title><rect x="65.1914%" y="1381" width="5.7848%" height="15" fill="rgb(253,60,29)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1391.50">util::T..</text></g><g><title>std::function&lt;void ()&gt;::operator (349 samples, 5.78%)</title><rect x="65.1914%" y="1365" width="5.7848%" height="15" fill="rgb(244,181,39)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1375.50">std::fu..</text></g><g><title>CScheduler::serviceQueue (349 samples, 5.78%)</title><rect x="65.1914%" y="1349" width="5.7848%" height="15" fill="rgb(252,203,31)" fg:x="3933" fg:w="349"/><text x="65.4414%" y="1359.50">CSchedu..</text></g><g><title>std::function&lt;void ()&gt;::operator (344 samples, 5.70%)</title><rect x="65.2743%" y="1333" width="5.7020%" height="15" fill="rgb(224,120,8)" fg:x="3938" fg:w="344"/><text x="65.5243%" y="1343.50">std::fu..</text></g><g><title>SerialTaskRunner::ProcessQueue (344 samples, 5.70%)</title><rect x="65.2743%" y="1317" width="5.7020%" height="15" fill="rgb(205,171,54)" fg:x="3938" fg:w="344"/><text x="65.5243%" y="1327.50">SerialT..</text></g><g><title>std::function&lt;void ()&gt;::~function (117 samples, 1.94%)</title><rect x="69.0370%" y="1301" width="1.9393%" height="15" fill="rgb(235,89,11)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1311.50">s..</text></g><g><title>std::_Function_base::~_Function_base (117 samples, 1.94%)</title><rect x="69.0370%" y="1285" width="1.9393%" height="15" fill="rgb(212,180,28)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1295.50">s..</text></g><g><title>_M_manager (117 samples, 1.94%)</title><rect x="69.0370%" y="1269" width="1.9393%" height="15" fill="rgb(247,84,49)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1279.50">_..</text></g><g><title>_M_manager (117 samples, 1.94%)</title><rect x="69.0370%" y="1253" width="1.9393%" height="15" fill="rgb(236,187,52)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1263.50">_..</text></g><g><title>_M_destroy (117 samples, 1.94%)</title><rect x="69.0370%" y="1237" width="1.9393%" height="15" fill="rgb(227,24,15)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1247.50">_..</text></g><g><title>~&lt;lambda&gt; (117 samples, 1.94%)</title><rect x="69.0370%" y="1221" width="1.9393%" height="15" fill="rgb(227,211,13)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1231.50">~..</text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (117 samples, 1.94%)</title><rect x="69.0370%" y="1205" width="1.9393%" height="15" fill="rgb(245,52,14)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1215.50">s..</text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (117 samples, 1.94%)</title><rect x="69.0370%" y="1189" width="1.9393%" height="15" fill="rgb(225,185,13)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1199.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (117 samples, 1.94%)</title><rect x="69.0370%" y="1173" width="1.9393%" height="15" fill="rgb(217,160,29)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1183.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (117 samples, 1.94%)</title><rect x="69.0370%" y="1157" width="1.9393%" height="15" fill="rgb(216,115,53)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1167.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (117 samples, 1.94%)</title><rect x="69.0370%" y="1141" width="1.9393%" height="15" fill="rgb(236,99,5)" fg:x="4165" fg:w="117"/><text x="69.2870%" y="1151.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (114 samples, 1.89%)</title><rect x="69.0867%" y="1125" width="1.8896%" height="15" fill="rgb(222,60,38)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1135.50">s..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="1109" width="1.8896%" height="15" fill="rgb(212,82,22)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1119.50">v..</text></g><g><title>void std::_Destroy&lt;CBlock&gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="1093" width="1.8896%" height="15" fill="rgb(214,48,28)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1103.50">v..</text></g><g><title>void std::destroy_at&lt;CBlock&gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="1077" width="1.8896%" height="15" fill="rgb(245,196,50)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1087.50">v..</text></g><g><title>CBlock::~CBlock (114 samples, 1.89%)</title><rect x="69.0867%" y="1061" width="1.8896%" height="15" fill="rgb(225,159,46)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1071.50">C..</text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (114 samples, 1.89%)</title><rect x="69.0867%" y="1045" width="1.8896%" height="15" fill="rgb(207,195,48)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1055.50">s..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="1029" width="1.8896%" height="15" fill="rgb(240,73,3)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1039.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="1013" width="1.8896%" height="15" fill="rgb(245,57,23)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1023.50">v..</text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="997" width="1.8896%" height="15" fill="rgb(240,75,18)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="1007.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="981" width="1.8896%" height="15" fill="rgb(238,168,12)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="991.50">v..</text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (114 samples, 1.89%)</title><rect x="69.0867%" y="965" width="1.8896%" height="15" fill="rgb(226,20,40)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="975.50">v..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (114 samples, 1.89%)</title><rect x="69.0867%" y="949" width="1.8896%" height="15" fill="rgb(224,130,35)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="959.50">s..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (114 samples, 1.89%)</title><rect x="69.0867%" y="933" width="1.8896%" height="15" fill="rgb(225,63,41)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="943.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (114 samples, 1.89%)</title><rect x="69.0867%" y="917" width="1.8896%" height="15" fill="rgb(219,3,3)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="927.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (114 samples, 1.89%)</title><rect x="69.0867%" y="901" width="1.8896%" height="15" fill="rgb(218,157,4)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="911.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (114 samples, 1.89%)</title><rect x="69.0867%" y="885" width="1.8896%" height="15" fill="rgb(232,76,36)" fg:x="4168" fg:w="114"/><text x="69.3367%" y="895.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (25 samples, 0.41%)</title><rect x="70.5619%" y="869" width="0.4144%" height="15" fill="rgb(247,36,0)" fg:x="4257" fg:w="25"/><text x="70.8119%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (25 samples, 0.41%)</title><rect x="70.5619%" y="853" width="0.4144%" height="15" fill="rgb(205,2,34)" fg:x="4257" fg:w="25"/><text x="70.8119%" y="863.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (25 samples, 0.41%)</title><rect x="70.5619%" y="837" width="0.4144%" height="15" fill="rgb(239,136,13)" fg:x="4257" fg:w="25"/><text x="70.8119%" y="847.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (25 samples, 0.41%)</title><rect x="70.5619%" y="821" width="0.4144%" height="15" fill="rgb(253,122,12)" fg:x="4257" fg:w="25"/><text x="70.8119%" y="831.50"></text></g><g><title>CTransaction::~CTransaction (25 samples, 0.41%)</title><rect x="70.5619%" y="805" width="0.4144%" height="15" fill="rgb(222,174,7)" fg:x="4257" fg:w="25"/><text x="70.8119%" y="815.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (10 samples, 0.17%)</title><rect x="70.8105%" y="789" width="0.1658%" height="15" fill="rgb(208,191,42)" fg:x="4272" fg:w="10"/><text x="71.0605%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (4 samples, 0.07%)</title><rect x="70.9100%" y="773" width="0.0663%" height="15" fill="rgb(237,212,15)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (4 samples, 0.07%)</title><rect x="70.9100%" y="757" width="0.0663%" height="15" fill="rgb(215,65,20)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (4 samples, 0.07%)</title><rect x="70.9100%" y="741" width="0.0663%" height="15" fill="rgb(232,103,11)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (4 samples, 0.07%)</title><rect x="70.9100%" y="725" width="0.0663%" height="15" fill="rgb(235,148,18)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (4 samples, 0.07%)</title><rect x="70.9100%" y="709" width="0.0663%" height="15" fill="rgb(240,173,7)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="719.50"></text></g><g><title>CTxOut::~CTxOut (4 samples, 0.07%)</title><rect x="70.9100%" y="693" width="0.0663%" height="15" fill="rgb(228,182,25)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="703.50"></text></g><g><title>CScript::~CScript (4 samples, 0.07%)</title><rect x="70.9100%" y="677" width="0.0663%" height="15" fill="rgb(247,3,52)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (4 samples, 0.07%)</title><rect x="70.9100%" y="661" width="0.0663%" height="15" fill="rgb(226,155,8)" fg:x="4278" fg:w="4"/><text x="71.1600%" y="671.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="70.9266%" y="645" width="0.0497%" height="15" fill="rgb(243,195,38)" fg:x="4279" fg:w="3"/><text x="71.1766%" y="655.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="70.9597%" y="629" width="0.0166%" height="15" fill="rgb(254,181,33)" fg:x="4281" fg:w="1"/><text x="71.2097%" y="639.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="70.9763%" y="1509" width="0.0332%" height="15" fill="rgb(232,98,23)" fg:x="4282" fg:w="2"/><text x="71.2263%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.9929%" y="1493" width="0.0166%" height="15" fill="rgb(205,23,10)" fg:x="4283" fg:w="1"/><text x="71.2429%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.22%)</title><rect x="71.0094%" y="1509" width="0.2155%" height="15" fill="rgb(212,124,38)" fg:x="4284" fg:w="13"/><text x="71.2594%" y="1519.50"></text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (1 samples, 0.02%)</title><rect x="71.2249%" y="1509" width="0.0166%" height="15" fill="rgb(228,207,2)" fg:x="4297" fg:w="1"/><text x="71.4749%" y="1519.50"></text></g><g><title>MurmurHash3 (1 samples, 0.02%)</title><rect x="71.2249%" y="1493" width="0.0166%" height="15" fill="rgb(215,120,22)" fg:x="4297" fg:w="1"/><text x="71.4749%" y="1503.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.02%)</title><rect x="71.2415%" y="1509" width="0.0166%" height="15" fill="rgb(251,172,33)" fg:x="4298" fg:w="1"/><text x="71.4915%" y="1519.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.02%)</title><rect x="71.2415%" y="1493" width="0.0166%" height="15" fill="rgb(250,83,2)" fg:x="4298" fg:w="1"/><text x="71.4915%" y="1503.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="71.2415%" y="1477" width="0.0166%" height="15" fill="rgb(210,132,53)" fg:x="4298" fg:w="1"/><text x="71.4915%" y="1487.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (7 samples, 0.12%)</title><rect x="71.2581%" y="1509" width="0.1160%" height="15" fill="rgb(221,208,36)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (7 samples, 0.12%)</title><rect x="71.2581%" y="1493" width="0.1160%" height="15" fill="rgb(205,192,46)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (7 samples, 0.12%)</title><rect x="71.2581%" y="1477" width="0.1160%" height="15" fill="rgb(223,163,14)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (7 samples, 0.12%)</title><rect x="71.2581%" y="1461" width="0.1160%" height="15" fill="rgb(218,41,28)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1471.50"></text></g><g><title>CBlock::~CBlock (7 samples, 0.12%)</title><rect x="71.2581%" y="1445" width="0.1160%" height="15" fill="rgb(235,104,10)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1455.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (7 samples, 0.12%)</title><rect x="71.2581%" y="1429" width="0.1160%" height="15" fill="rgb(246,17,4)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.12%)</title><rect x="71.2581%" y="1413" width="0.1160%" height="15" fill="rgb(240,7,16)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (7 samples, 0.12%)</title><rect x="71.2581%" y="1397" width="0.1160%" height="15" fill="rgb(213,160,23)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (7 samples, 0.12%)</title><rect x="71.2581%" y="1381" width="0.1160%" height="15" fill="rgb(251,179,49)" fg:x="4299" fg:w="7"/><text x="71.5081%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (6 samples, 0.10%)</title><rect x="71.2747%" y="1365" width="0.0995%" height="15" fill="rgb(247,198,10)" fg:x="4300" fg:w="6"/><text x="71.5247%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (6 samples, 0.10%)</title><rect x="71.2747%" y="1349" width="0.0995%" height="15" fill="rgb(220,65,29)" fg:x="4300" fg:w="6"/><text x="71.5247%" y="1359.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (6 samples, 0.10%)</title><rect x="71.2747%" y="1333" width="0.0995%" height="15" fill="rgb(237,171,28)" fg:x="4300" fg:w="6"/><text x="71.5247%" y="1343.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (6 samples, 0.10%)</title><rect x="71.2747%" y="1317" width="0.0995%" height="15" fill="rgb(228,44,26)" fg:x="4300" fg:w="6"/><text x="71.5247%" y="1327.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (6 samples, 0.10%)</title><rect x="71.2747%" y="1301" width="0.0995%" height="15" fill="rgb(216,210,27)" fg:x="4300" fg:w="6"/><text x="71.5247%" y="1311.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (6 samples, 0.10%)</title><rect x="71.2747%" y="1285" width="0.0995%" height="15" fill="rgb(252,10,17)" fg:x="4300" fg:w="6"/><text x="71.5247%" y="1295.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (5 samples, 0.08%)</title><rect x="71.2912%" y="1269" width="0.0829%" height="15" fill="rgb(214,172,30)" fg:x="4301" fg:w="5"/><text x="71.5412%" y="1279.50"></text></g><g><title>_int_free (5 samples, 0.08%)</title><rect x="71.2912%" y="1253" width="0.0829%" height="15" fill="rgb(253,130,48)" fg:x="4301" fg:w="5"/><text x="71.5412%" y="1263.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="71.3741%" y="1317" width="0.0166%" height="15" fill="rgb(226,99,43)" fg:x="4306" fg:w="1"/><text x="71.6241%" y="1327.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="71.3741%" y="1301" width="0.0166%" height="15" fill="rgb(239,111,26)" fg:x="4306" fg:w="1"/><text x="71.6241%" y="1311.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="71.3741%" y="1285" width="0.0166%" height="15" fill="rgb(240,27,53)" fg:x="4306" fg:w="1"/><text x="71.6241%" y="1295.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (4 samples, 0.07%)</title><rect x="71.3741%" y="1429" width="0.0663%" height="15" fill="rgb(254,163,12)" fg:x="4306" fg:w="4"/><text x="71.6241%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (4 samples, 0.07%)</title><rect x="71.3741%" y="1413" width="0.0663%" height="15" fill="rgb(225,51,48)" fg:x="4306" fg:w="4"/><text x="71.6241%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (4 samples, 0.07%)</title><rect x="71.3741%" y="1397" width="0.0663%" height="15" fill="rgb(205,19,32)" fg:x="4306" fg:w="4"/><text x="71.6241%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (4 samples, 0.07%)</title><rect x="71.3741%" y="1381" width="0.0663%" height="15" fill="rgb(218,119,26)" fg:x="4306" fg:w="4"/><text x="71.6241%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (4 samples, 0.07%)</title><rect x="71.3741%" y="1365" width="0.0663%" height="15" fill="rgb(231,173,33)" fg:x="4306" fg:w="4"/><text x="71.6241%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (4 samples, 0.07%)</title><rect x="71.3741%" y="1349" width="0.0663%" height="15" fill="rgb(241,100,29)" fg:x="4306" fg:w="4"/><text x="71.6241%" y="1359.50"></text></g><g><title>CTxIn::~CTxIn (4 samples, 0.07%)</title><rect x="71.3741%" y="1333" width="0.0663%" height="15" fill="rgb(250,194,34)" fg:x="4306" fg:w="4"/><text x="71.6241%" y="1343.50"></text></g><g><title>CScriptWitness::~CScriptWitness (3 samples, 0.05%)</title><rect x="71.3907%" y="1317" width="0.0497%" height="15" fill="rgb(215,23,50)" fg:x="4307" fg:w="3"/><text x="71.6407%" y="1327.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (3 samples, 0.05%)</title><rect x="71.3907%" y="1301" width="0.0497%" height="15" fill="rgb(206,49,37)" fg:x="4307" fg:w="3"/><text x="71.6407%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="71.3907%" y="1285" width="0.0497%" height="15" fill="rgb(247,39,21)" fg:x="4307" fg:w="3"/><text x="71.6407%" y="1295.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (3 samples, 0.05%)</title><rect x="71.3907%" y="1269" width="0.0497%" height="15" fill="rgb(209,220,15)" fg:x="4307" fg:w="3"/><text x="71.6407%" y="1279.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (3 samples, 0.05%)</title><rect x="71.3907%" y="1253" width="0.0497%" height="15" fill="rgb(206,41,33)" fg:x="4307" fg:w="3"/><text x="71.6407%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="71.4073%" y="1237" width="0.0332%" height="15" fill="rgb(221,225,45)" fg:x="4308" fg:w="2"/><text x="71.6573%" y="1247.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="71.4073%" y="1221" width="0.0332%" height="15" fill="rgb(216,27,18)" fg:x="4308" fg:w="2"/><text x="71.6573%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="71.4073%" y="1205" width="0.0332%" height="15" fill="rgb(250,193,34)" fg:x="4308" fg:w="2"/><text x="71.6573%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (2 samples, 0.03%)</title><rect x="71.4073%" y="1189" width="0.0332%" height="15" fill="rgb(227,215,20)" fg:x="4308" fg:w="2"/><text x="71.6573%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="71.4238%" y="1173" width="0.0166%" height="15" fill="rgb(242,211,27)" fg:x="4309" fg:w="1"/><text x="71.6738%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="71.4238%" y="1157" width="0.0166%" height="15" fill="rgb(229,190,30)" fg:x="4309" fg:w="1"/><text x="71.6738%" y="1167.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.02%)</title><rect x="71.4238%" y="1141" width="0.0166%" height="15" fill="rgb(253,31,29)" fg:x="4309" fg:w="1"/><text x="71.6738%" y="1151.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.02%)</title><rect x="71.4238%" y="1125" width="0.0166%" height="15" fill="rgb(229,177,52)" fg:x="4309" fg:w="1"/><text x="71.6738%" y="1135.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="71.4238%" y="1109" width="0.0166%" height="15" fill="rgb(226,88,8)" fg:x="4309" fg:w="1"/><text x="71.6738%" y="1119.50"></text></g><g><title>b-scheduler (440 samples, 7.29%)</title><rect x="64.1803%" y="1525" width="7.2932%" height="15" fill="rgb(214,55,27)" fg:x="3872" fg:w="440"/><text x="64.4303%" y="1535.50">b-scheduler</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (6 samples, 0.10%)</title><rect x="71.3741%" y="1509" width="0.0995%" height="15" fill="rgb(233,202,5)" fg:x="4306" fg:w="6"/><text x="71.6241%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (6 samples, 0.10%)</title><rect x="71.3741%" y="1493" width="0.0995%" height="15" fill="rgb(251,49,30)" fg:x="4306" fg:w="6"/><text x="71.6241%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (6 samples, 0.10%)</title><rect x="71.3741%" y="1477" width="0.0995%" height="15" fill="rgb(235,18,52)" fg:x="4306" fg:w="6"/><text x="71.6241%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (6 samples, 0.10%)</title><rect x="71.3741%" y="1461" width="0.0995%" height="15" fill="rgb(250,111,51)" fg:x="4306" fg:w="6"/><text x="71.6241%" y="1471.50"></text></g><g><title>CTransaction::~CTransaction (6 samples, 0.10%)</title><rect x="71.3741%" y="1445" width="0.0995%" height="15" fill="rgb(218,13,25)" fg:x="4306" fg:w="6"/><text x="71.6241%" y="1455.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (2 samples, 0.03%)</title><rect x="71.4404%" y="1429" width="0.0332%" height="15" fill="rgb(248,96,7)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (2 samples, 0.03%)</title><rect x="71.4404%" y="1413" width="0.0332%" height="15" fill="rgb(217,31,15)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (2 samples, 0.03%)</title><rect x="71.4404%" y="1397" width="0.0332%" height="15" fill="rgb(228,59,49)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (2 samples, 0.03%)</title><rect x="71.4404%" y="1381" width="0.0332%" height="15" fill="rgb(210,152,38)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (2 samples, 0.03%)</title><rect x="71.4404%" y="1365" width="0.0332%" height="15" fill="rgb(206,71,11)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (2 samples, 0.03%)</title><rect x="71.4404%" y="1349" width="0.0332%" height="15" fill="rgb(244,199,5)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1359.50"></text></g><g><title>CTxOut::~CTxOut (2 samples, 0.03%)</title><rect x="71.4404%" y="1333" width="0.0332%" height="15" fill="rgb(253,49,1)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1343.50"></text></g><g><title>CScript::~CScript (2 samples, 0.03%)</title><rect x="71.4404%" y="1317" width="0.0332%" height="15" fill="rgb(225,206,40)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1327.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (2 samples, 0.03%)</title><rect x="71.4404%" y="1301" width="0.0332%" height="15" fill="rgb(243,116,47)" fg:x="4310" fg:w="2"/><text x="71.6904%" y="1311.50"></text></g><g><title>b-scriptch.0 (8 samples, 0.13%)</title><rect x="71.4736%" y="1525" width="0.1326%" height="15" fill="rgb(219,225,16)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1535.50"></text></g><g><title>__clone (8 samples, 0.13%)</title><rect x="71.4736%" y="1509" width="0.1326%" height="15" fill="rgb(233,29,47)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1519.50"></text></g><g><title>start_thread (8 samples, 0.13%)</title><rect x="71.4736%" y="1493" width="0.1326%" height="15" fill="rgb(250,179,18)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1503.50"></text></g><g><title>execute_native_thread_routine (8 samples, 0.13%)</title><rect x="71.4736%" y="1477" width="0.1326%" height="15" fill="rgb(215,176,6)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (8 samples, 0.13%)</title><rect x="71.4736%" y="1461" width="0.1326%" height="15" fill="rgb(214,117,39)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1471.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (8 samples, 0.13%)</title><rect x="71.4736%" y="1445" width="0.1326%" height="15" fill="rgb(247,183,36)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1455.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (8 samples, 0.13%)</title><rect x="71.4736%" y="1429" width="0.1326%" height="15" fill="rgb(237,200,3)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1439.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (8 samples, 0.13%)</title><rect x="71.4736%" y="1413" width="0.1326%" height="15" fill="rgb(212,220,24)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1423.50"></text></g><g><title>std::mutex::unlock (8 samples, 0.13%)</title><rect x="71.4736%" y="1397" width="0.1326%" height="15" fill="rgb(245,216,20)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1407.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (8 samples, 0.13%)</title><rect x="71.4736%" y="1381" width="0.1326%" height="15" fill="rgb(219,124,7)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1391.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (8 samples, 0.13%)</title><rect x="71.4736%" y="1365" width="0.1326%" height="15" fill="rgb(227,167,8)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1375.50"></text></g><g><title>__GI___lll_lock_wake (8 samples, 0.13%)</title><rect x="71.4736%" y="1349" width="0.1326%" height="15" fill="rgb(241,37,2)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="71.4736%" y="1333" width="0.1326%" height="15" fill="rgb(238,134,33)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="71.4736%" y="1317" width="0.1326%" height="15" fill="rgb(248,48,27)" fg:x="4312" fg:w="8"/><text x="71.7236%" y="1327.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="71.4901%" y="1301" width="0.1160%" height="15" fill="rgb(212,14,16)" fg:x="4313" fg:w="7"/><text x="71.7401%" y="1311.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="71.4901%" y="1285" width="0.1160%" height="15" fill="rgb(217,205,37)" fg:x="4313" fg:w="7"/><text x="71.7401%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="71.4901%" y="1269" width="0.1160%" height="15" fill="rgb(233,185,47)" fg:x="4313" fg:w="7"/><text x="71.7401%" y="1279.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="71.5067%" y="1253" width="0.0995%" height="15" fill="rgb(244,88,8)" fg:x="4314" fg:w="6"/><text x="71.7567%" y="1263.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="71.5067%" y="1237" width="0.0995%" height="15" fill="rgb(213,0,20)" fg:x="4314" fg:w="6"/><text x="71.7567%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="71.5067%" y="1221" width="0.0995%" height="15" fill="rgb(238,159,36)" fg:x="4314" fg:w="6"/><text x="71.7567%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="71.5067%" y="1205" width="0.0995%" height="15" fill="rgb(253,173,17)" fg:x="4314" fg:w="6"/><text x="71.7567%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="71.5067%" y="1189" width="0.0995%" height="15" fill="rgb(221,23,28)" fg:x="4314" fg:w="6"/><text x="71.7567%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="71.5067%" y="1173" width="0.0995%" height="15" fill="rgb(218,113,15)" fg:x="4314" fg:w="6"/><text x="71.7567%" y="1183.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="71.5067%" y="1157" width="0.0995%" height="15" fill="rgb(233,58,3)" fg:x="4314" fg:w="6"/><text x="71.7567%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.5564%" y="1141" width="0.0497%" height="15" fill="rgb(250,46,35)" fg:x="4317" fg:w="3"/><text x="71.8064%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.5564%" y="1125" width="0.0497%" height="15" fill="rgb(210,169,11)" fg:x="4317" fg:w="3"/><text x="71.8064%" y="1135.50"></text></g><g><title>b-scriptch.10 (4 samples, 0.07%)</title><rect x="71.6062%" y="1525" width="0.0663%" height="15" fill="rgb(246,88,19)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="71.6062%" y="1509" width="0.0663%" height="15" fill="rgb(206,81,49)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="71.6062%" y="1493" width="0.0663%" height="15" fill="rgb(232,144,18)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="71.6062%" y="1477" width="0.0663%" height="15" fill="rgb(235,2,27)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="71.6062%" y="1461" width="0.0663%" height="15" fill="rgb(239,157,39)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="71.6062%" y="1445" width="0.0663%" height="15" fill="rgb(220,11,17)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="71.6062%" y="1429" width="0.0663%" height="15" fill="rgb(243,94,50)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1413" width="0.0663%" height="15" fill="rgb(218,22,0)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1397" width="0.0663%" height="15" fill="rgb(249,70,21)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1381" width="0.0663%" height="15" fill="rgb(245,111,46)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1365" width="0.0663%" height="15" fill="rgb(244,183,12)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1349" width="0.0663%" height="15" fill="rgb(207,117,0)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1333" width="0.0663%" height="15" fill="rgb(206,20,43)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1317" width="0.0663%" height="15" fill="rgb(221,104,11)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1301" width="0.0663%" height="15" fill="rgb(254,36,50)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6062%" y="1285" width="0.0663%" height="15" fill="rgb(252,17,15)" fg:x="4320" fg:w="4"/><text x="71.8562%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6227%" y="1269" width="0.0497%" height="15" fill="rgb(219,129,43)" fg:x="4321" fg:w="3"/><text x="71.8727%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6227%" y="1253" width="0.0497%" height="15" fill="rgb(205,34,45)" fg:x="4321" fg:w="3"/><text x="71.8727%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6227%" y="1237" width="0.0497%" height="15" fill="rgb(251,201,32)" fg:x="4321" fg:w="3"/><text x="71.8727%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6227%" y="1221" width="0.0497%" height="15" fill="rgb(205,56,0)" fg:x="4321" fg:w="3"/><text x="71.8727%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6227%" y="1205" width="0.0497%" height="15" fill="rgb(211,193,27)" fg:x="4321" fg:w="3"/><text x="71.8727%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6227%" y="1189" width="0.0497%" height="15" fill="rgb(231,100,42)" fg:x="4321" fg:w="3"/><text x="71.8727%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6227%" y="1173" width="0.0497%" height="15" fill="rgb(245,85,27)" fg:x="4321" fg:w="3"/><text x="71.8727%" y="1183.50"></text></g><g><title>b-scriptch.11 (4 samples, 0.07%)</title><rect x="71.6725%" y="1525" width="0.0663%" height="15" fill="rgb(241,76,24)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="71.6725%" y="1509" width="0.0663%" height="15" fill="rgb(249,157,15)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="71.6725%" y="1493" width="0.0663%" height="15" fill="rgb(222,218,25)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="71.6725%" y="1477" width="0.0663%" height="15" fill="rgb(252,156,52)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="71.6725%" y="1461" width="0.0663%" height="15" fill="rgb(211,185,7)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="71.6725%" y="1445" width="0.0663%" height="15" fill="rgb(234,108,24)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="71.6725%" y="1429" width="0.0663%" height="15" fill="rgb(227,218,2)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1413" width="0.0663%" height="15" fill="rgb(224,0,36)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1397" width="0.0663%" height="15" fill="rgb(233,201,10)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1381" width="0.0663%" height="15" fill="rgb(252,209,14)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1365" width="0.0663%" height="15" fill="rgb(205,93,49)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1349" width="0.0663%" height="15" fill="rgb(234,116,45)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1333" width="0.0663%" height="15" fill="rgb(248,89,35)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1317" width="0.0663%" height="15" fill="rgb(233,167,45)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1301" width="0.0663%" height="15" fill="rgb(248,228,14)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.6725%" y="1285" width="0.0663%" height="15" fill="rgb(246,91,14)" fg:x="4324" fg:w="4"/><text x="71.9225%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6890%" y="1269" width="0.0497%" height="15" fill="rgb(227,142,5)" fg:x="4325" fg:w="3"/><text x="71.9390%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6890%" y="1253" width="0.0497%" height="15" fill="rgb(221,63,33)" fg:x="4325" fg:w="3"/><text x="71.9390%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6890%" y="1237" width="0.0497%" height="15" fill="rgb(233,49,0)" fg:x="4325" fg:w="3"/><text x="71.9390%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6890%" y="1221" width="0.0497%" height="15" fill="rgb(251,115,38)" fg:x="4325" fg:w="3"/><text x="71.9390%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6890%" y="1205" width="0.0497%" height="15" fill="rgb(231,214,32)" fg:x="4325" fg:w="3"/><text x="71.9390%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6890%" y="1189" width="0.0497%" height="15" fill="rgb(248,73,46)" fg:x="4325" fg:w="3"/><text x="71.9390%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.6890%" y="1173" width="0.0497%" height="15" fill="rgb(237,156,4)" fg:x="4325" fg:w="3"/><text x="71.9390%" y="1183.50"></text></g><g><title>b-scriptch.12 (4 samples, 0.07%)</title><rect x="71.7388%" y="1525" width="0.0663%" height="15" fill="rgb(227,132,2)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="71.7388%" y="1509" width="0.0663%" height="15" fill="rgb(248,161,9)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="71.7388%" y="1493" width="0.0663%" height="15" fill="rgb(238,77,38)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="71.7388%" y="1477" width="0.0663%" height="15" fill="rgb(222,166,40)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="71.7388%" y="1461" width="0.0663%" height="15" fill="rgb(214,168,45)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="71.7388%" y="1445" width="0.0663%" height="15" fill="rgb(226,64,37)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="71.7388%" y="1429" width="0.0663%" height="15" fill="rgb(232,210,43)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1413" width="0.0663%" height="15" fill="rgb(214,76,33)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1397" width="0.0663%" height="15" fill="rgb(210,78,5)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1381" width="0.0663%" height="15" fill="rgb(211,107,37)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1365" width="0.0663%" height="15" fill="rgb(249,67,16)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1349" width="0.0663%" height="15" fill="rgb(222,114,31)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1333" width="0.0663%" height="15" fill="rgb(242,118,19)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1317" width="0.0663%" height="15" fill="rgb(223,115,1)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1301" width="0.0663%" height="15" fill="rgb(241,182,54)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1285" width="0.0663%" height="15" fill="rgb(244,166,36)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.7388%" y="1269" width="0.0663%" height="15" fill="rgb(241,52,43)" fg:x="4328" fg:w="4"/><text x="71.9888%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.7553%" y="1253" width="0.0497%" height="15" fill="rgb(236,82,9)" fg:x="4329" fg:w="3"/><text x="72.0053%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.7553%" y="1237" width="0.0497%" height="15" fill="rgb(241,119,0)" fg:x="4329" fg:w="3"/><text x="72.0053%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.7553%" y="1221" width="0.0497%" height="15" fill="rgb(221,19,22)" fg:x="4329" fg:w="3"/><text x="72.0053%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.7553%" y="1205" width="0.0497%" height="15" fill="rgb(254,144,35)" fg:x="4329" fg:w="3"/><text x="72.0053%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.7553%" y="1189" width="0.0497%" height="15" fill="rgb(246,132,30)" fg:x="4329" fg:w="3"/><text x="72.0053%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.7553%" y="1173" width="0.0497%" height="15" fill="rgb(234,69,28)" fg:x="4329" fg:w="3"/><text x="72.0053%" y="1183.50"></text></g><g><title>b-scriptch.7 (4 samples, 0.07%)</title><rect x="71.8051%" y="1525" width="0.0663%" height="15" fill="rgb(219,106,47)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="71.8051%" y="1509" width="0.0663%" height="15" fill="rgb(218,79,24)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="71.8051%" y="1493" width="0.0663%" height="15" fill="rgb(225,26,21)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="71.8051%" y="1477" width="0.0663%" height="15" fill="rgb(217,68,49)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="71.8051%" y="1461" width="0.0663%" height="15" fill="rgb(220,204,28)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="71.8051%" y="1445" width="0.0663%" height="15" fill="rgb(237,208,43)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="71.8051%" y="1429" width="0.0663%" height="15" fill="rgb(213,97,42)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1413" width="0.0663%" height="15" fill="rgb(238,96,52)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1397" width="0.0663%" height="15" fill="rgb(228,14,13)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1381" width="0.0663%" height="15" fill="rgb(219,123,13)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1365" width="0.0663%" height="15" fill="rgb(216,144,17)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1349" width="0.0663%" height="15" fill="rgb(230,228,29)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1333" width="0.0663%" height="15" fill="rgb(233,18,5)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1317" width="0.0663%" height="15" fill="rgb(233,197,12)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1301" width="0.0663%" height="15" fill="rgb(234,140,29)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1285" width="0.0663%" height="15" fill="rgb(233,113,19)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1269" width="0.0663%" height="15" fill="rgb(246,209,13)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1253" width="0.0663%" height="15" fill="rgb(242,79,54)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1237" width="0.0663%" height="15" fill="rgb(219,73,16)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8051%" y="1221" width="0.0663%" height="15" fill="rgb(224,52,10)" fg:x="4332" fg:w="4"/><text x="72.0551%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8216%" y="1205" width="0.0497%" height="15" fill="rgb(237,179,5)" fg:x="4333" fg:w="3"/><text x="72.0716%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8216%" y="1189" width="0.0497%" height="15" fill="rgb(231,20,6)" fg:x="4333" fg:w="3"/><text x="72.0716%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8216%" y="1173" width="0.0497%" height="15" fill="rgb(253,171,45)" fg:x="4333" fg:w="3"/><text x="72.0716%" y="1183.50"></text></g><g><title>b-scriptch.8 (4 samples, 0.07%)</title><rect x="71.8714%" y="1525" width="0.0663%" height="15" fill="rgb(230,75,49)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="71.8714%" y="1509" width="0.0663%" height="15" fill="rgb(216,83,46)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="71.8714%" y="1493" width="0.0663%" height="15" fill="rgb(236,56,9)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="71.8714%" y="1477" width="0.0663%" height="15" fill="rgb(215,28,34)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="71.8714%" y="1461" width="0.0663%" height="15" fill="rgb(230,222,20)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="71.8714%" y="1445" width="0.0663%" height="15" fill="rgb(235,209,51)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="71.8714%" y="1429" width="0.0663%" height="15" fill="rgb(235,167,1)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1413" width="0.0663%" height="15" fill="rgb(248,220,0)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1397" width="0.0663%" height="15" fill="rgb(239,0,18)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1381" width="0.0663%" height="15" fill="rgb(229,179,11)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1365" width="0.0663%" height="15" fill="rgb(226,116,53)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1349" width="0.0663%" height="15" fill="rgb(218,1,49)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1333" width="0.0663%" height="15" fill="rgb(208,184,47)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1317" width="0.0663%" height="15" fill="rgb(238,174,3)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1301" width="0.0663%" height="15" fill="rgb(247,188,6)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1285" width="0.0663%" height="15" fill="rgb(211,165,46)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1269" width="0.0663%" height="15" fill="rgb(222,190,10)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1253" width="0.0663%" height="15" fill="rgb(206,185,3)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1237" width="0.0663%" height="15" fill="rgb(244,125,37)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1221" width="0.0663%" height="15" fill="rgb(211,43,7)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.8714%" y="1205" width="0.0663%" height="15" fill="rgb(250,41,42)" fg:x="4336" fg:w="4"/><text x="72.1214%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8879%" y="1189" width="0.0497%" height="15" fill="rgb(254,54,42)" fg:x="4337" fg:w="3"/><text x="72.1379%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8879%" y="1173" width="0.0497%" height="15" fill="rgb(213,71,43)" fg:x="4337" fg:w="3"/><text x="72.1379%" y="1183.50"></text></g><g><title>b-scriptch.9 (4 samples, 0.07%)</title><rect x="71.9377%" y="1525" width="0.0663%" height="15" fill="rgb(249,3,44)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="71.9377%" y="1509" width="0.0663%" height="15" fill="rgb(229,80,41)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="71.9377%" y="1493" width="0.0663%" height="15" fill="rgb(231,25,28)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="71.9377%" y="1477" width="0.0663%" height="15" fill="rgb(208,79,48)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="71.9377%" y="1461" width="0.0663%" height="15" fill="rgb(207,196,38)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="71.9377%" y="1445" width="0.0663%" height="15" fill="rgb(228,105,49)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="71.9377%" y="1429" width="0.0663%" height="15" fill="rgb(237,99,15)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1413" width="0.0663%" height="15" fill="rgb(224,207,46)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1397" width="0.0663%" height="15" fill="rgb(249,117,50)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1381" width="0.0663%" height="15" fill="rgb(248,17,13)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1365" width="0.0663%" height="15" fill="rgb(228,187,36)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1349" width="0.0663%" height="15" fill="rgb(234,132,20)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1333" width="0.0663%" height="15" fill="rgb(209,170,46)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1317" width="0.0663%" height="15" fill="rgb(237,23,19)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1301" width="0.0663%" height="15" fill="rgb(227,21,26)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1285" width="0.0663%" height="15" fill="rgb(222,220,48)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1269" width="0.0663%" height="15" fill="rgb(214,9,16)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1253" width="0.0663%" height="15" fill="rgb(209,73,30)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="71.9377%" y="1237" width="0.0663%" height="15" fill="rgb(207,20,33)" fg:x="4340" fg:w="4"/><text x="72.1877%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.9543%" y="1221" width="0.0497%" height="15" fill="rgb(219,153,12)" fg:x="4341" fg:w="3"/><text x="72.2043%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.9543%" y="1205" width="0.0497%" height="15" fill="rgb(235,97,25)" fg:x="4341" fg:w="3"/><text x="72.2043%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.9543%" y="1189" width="0.0497%" height="15" fill="rgb(244,30,34)" fg:x="4341" fg:w="3"/><text x="72.2043%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.9543%" y="1173" width="0.0497%" height="15" fill="rgb(214,106,45)" fg:x="4341" fg:w="3"/><text x="72.2043%" y="1183.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="72.0040%" y="1493" width="0.0166%" height="15" fill="rgb(226,41,9)" fg:x="4344" fg:w="1"/><text x="72.2540%" y="1503.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="72.0206%" y="1493" width="0.0166%" height="15" fill="rgb(253,139,29)" fg:x="4345" fg:w="1"/><text x="72.2706%" y="1503.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.03%)</title><rect x="72.0371%" y="1493" width="0.0332%" height="15" fill="rgb(213,205,39)" fg:x="4346" fg:w="2"/><text x="72.2871%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="72.0703%" y="1493" width="0.0166%" height="15" fill="rgb(209,27,10)" fg:x="4348" fg:w="1"/><text x="72.3203%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="72.0869%" y="1493" width="0.0166%" height="15" fill="rgb(249,142,16)" fg:x="4349" fg:w="1"/><text x="72.3369%" y="1503.50"></text></g><g><title>[[heap]] (7 samples, 0.12%)</title><rect x="72.0040%" y="1509" width="0.1160%" height="15" fill="rgb(242,65,12)" fg:x="4344" fg:w="7"/><text x="72.2540%" y="1519.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="72.1034%" y="1493" width="0.0166%" height="15" fill="rgb(232,48,10)" fg:x="4350" fg:w="1"/><text x="72.3534%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.05%)</title><rect x="72.1200%" y="1493" width="0.0497%" height="15" fill="rgb(253,67,19)" fg:x="4351" fg:w="3"/><text x="72.3700%" y="1503.50"></text></g><g><title>event_get_fd (1 samples, 0.02%)</title><rect x="72.1697%" y="1493" width="0.0166%" height="15" fill="rgb(227,93,29)" fg:x="4354" fg:w="1"/><text x="72.4197%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="72.1863%" y="1493" width="0.0332%" height="15" fill="rgb(226,189,53)" fg:x="4355" fg:w="2"/><text x="72.4363%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="72.2195%" y="1493" width="0.0166%" height="15" fill="rgb(223,224,1)" fg:x="4357" fg:w="1"/><text x="72.4695%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="72.2360%" y="1493" width="0.0166%" height="15" fill="rgb(221,84,32)" fg:x="4358" fg:w="1"/><text x="72.4860%" y="1503.50"></text></g><g><title>[[stack]] (9 samples, 0.15%)</title><rect x="72.1200%" y="1509" width="0.1492%" height="15" fill="rgb(214,189,28)" fg:x="4351" fg:w="9"/><text x="72.3700%" y="1519.50"></text></g><g><title>leveldb::WriteBatchInternal::Count (1 samples, 0.02%)</title><rect x="72.2526%" y="1493" width="0.0166%" height="15" fill="rgb(234,7,52)" fg:x="4359" fg:w="1"/><text x="72.5026%" y="1503.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1493" width="0.0829%" height="15" fill="rgb(249,73,31)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1503.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1477" width="0.0829%" height="15" fill="rgb(253,153,41)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1487.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1461" width="0.0829%" height="15" fill="rgb(249,52,34)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1471.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1445" width="0.0829%" height="15" fill="rgb(236,177,47)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1455.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1429" width="0.0829%" height="15" fill="rgb(252,185,45)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1439.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1413" width="0.0829%" height="15" fill="rgb(251,15,30)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1423.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1397" width="0.0829%" height="15" fill="rgb(233,31,4)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1407.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1381" width="0.0829%" height="15" fill="rgb(254,44,24)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1391.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1365" width="0.0829%" height="15" fill="rgb(218,54,1)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1375.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="72.2692%" y="1349" width="0.0829%" height="15" fill="rgb(243,209,39)" fg:x="4360" fg:w="5"/><text x="72.5192%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.2858%" y="1333" width="0.0663%" height="15" fill="rgb(206,75,33)" fg:x="4361" fg:w="4"/><text x="72.5358%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.3023%" y="1317" width="0.0497%" height="15" fill="rgb(223,108,18)" fg:x="4362" fg:w="3"/><text x="72.5523%" y="1327.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="72.3189%" y="1301" width="0.0332%" height="15" fill="rgb(244,89,31)" fg:x="4363" fg:w="2"/><text x="72.5689%" y="1311.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="72.3521%" y="1493" width="0.0166%" height="15" fill="rgb(222,167,27)" fg:x="4365" fg:w="1"/><text x="72.6021%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="72.3686%" y="1493" width="0.0166%" height="15" fill="rgb(247,41,16)" fg:x="4366" fg:w="1"/><text x="72.6186%" y="1503.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="72.2692%" y="1509" width="0.1326%" height="15" fill="rgb(233,168,40)" fg:x="4360" fg:w="8"/><text x="72.5192%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="72.3852%" y="1493" width="0.0166%" height="15" fill="rgb(205,211,8)" fg:x="4367" fg:w="1"/><text x="72.6352%" y="1503.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="72.4018%" y="1509" width="0.0332%" height="15" fill="rgb(238,105,11)" fg:x="4368" fg:w="2"/><text x="72.6518%" y="1519.50"></text></g><g><title>CConnman::Stop (1 samples, 0.02%)</title><rect x="72.4349%" y="1429" width="0.0166%" height="15" fill="rgb(223,142,52)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1439.50"></text></g><g><title>CConnman::StopNodes (1 samples, 0.02%)</title><rect x="72.4349%" y="1413" width="0.0166%" height="15" fill="rgb(238,51,33)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1423.50"></text></g><g><title>CConnman::DumpAddresses (1 samples, 0.02%)</title><rect x="72.4349%" y="1397" width="0.0166%" height="15" fill="rgb(231,188,43)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1407.50"></text></g><g><title>DumpPeerAddresses (1 samples, 0.02%)</title><rect x="72.4349%" y="1381" width="0.0166%" height="15" fill="rgb(216,92,17)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1391.50"></text></g><g><title>DumpPeerAddresses (1 samples, 0.02%)</title><rect x="72.4349%" y="1365" width="0.0166%" height="15" fill="rgb(228,2,40)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1375.50"></text></g><g><title>FileCommit (1 samples, 0.02%)</title><rect x="72.4349%" y="1349" width="0.0166%" height="15" fill="rgb(226,73,15)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1359.50"></text></g><g><title>fdatasync (1 samples, 0.02%)</title><rect x="72.4349%" y="1333" width="0.0166%" height="15" fill="rgb(227,66,46)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1317" width="0.0166%" height="15" fill="rgb(209,71,6)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1301" width="0.0166%" height="15" fill="rgb(246,100,25)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1285" width="0.0166%" height="15" fill="rgb(248,185,27)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1295.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="72.4349%" y="1269" width="0.0166%" height="15" fill="rgb(225,118,47)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1253" width="0.0166%" height="15" fill="rgb(220,185,44)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1237" width="0.0166%" height="15" fill="rgb(227,95,24)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1221" width="0.0166%" height="15" fill="rgb(252,84,24)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1205" width="0.0166%" height="15" fill="rgb(240,34,44)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="72.4349%" y="1189" width="0.0166%" height="15" fill="rgb(209,72,54)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="72.4349%" y="1173" width="0.0166%" height="15" fill="rgb(226,19,45)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="72.4349%" y="1157" width="0.0166%" height="15" fill="rgb(246,7,45)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1141" width="0.0166%" height="15" fill="rgb(225,45,2)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.4349%" y="1125" width="0.0166%" height="15" fill="rgb(221,80,29)" fg:x="4370" fg:w="1"/><text x="72.6849%" y="1135.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (2 samples, 0.03%)</title><rect x="72.4515%" y="1381" width="0.0332%" height="15" fill="rgb(228,11,19)" fg:x="4371" fg:w="2"/><text x="72.7015%" y="1391.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (2 samples, 0.03%)</title><rect x="72.4515%" y="1365" width="0.0332%" height="15" fill="rgb(243,17,21)" fg:x="4371" fg:w="2"/><text x="72.7015%" y="1375.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="72.4515%" y="1349" width="0.0332%" height="15" fill="rgb(243,88,8)" fg:x="4371" fg:w="2"/><text x="72.7015%" y="1359.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="72.4515%" y="1333" width="0.0332%" height="15" fill="rgb(214,17,9)" fg:x="4371" fg:w="2"/><text x="72.7015%" y="1343.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.03%)</title><rect x="72.4515%" y="1317" width="0.0332%" height="15" fill="rgb(232,169,15)" fg:x="4371" fg:w="2"/><text x="72.7015%" y="1327.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="72.4515%" y="1301" width="0.0332%" height="15" fill="rgb(232,86,53)" fg:x="4371" fg:w="2"/><text x="72.7015%" y="1311.50"></text></g><g><title>CDBBatch::EraseImpl (1 samples, 0.02%)</title><rect x="72.4847%" y="1349" width="0.0166%" height="15" fill="rgb(222,100,4)" fg:x="4373" fg:w="1"/><text x="72.7347%" y="1359.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="72.4847%" y="1333" width="0.0166%" height="15" fill="rgb(253,151,38)" fg:x="4373" fg:w="1"/><text x="72.7347%" y="1343.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="72.4847%" y="1317" width="0.0166%" height="15" fill="rgb(238,215,29)" fg:x="4373" fg:w="1"/><text x="72.7347%" y="1327.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="72.5012%" y="1317" width="0.0166%" height="15" fill="rgb(205,128,53)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="72.5012%" y="1301" width="0.0166%" height="15" fill="rgb(248,183,14)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="72.5012%" y="1285" width="0.0166%" height="15" fill="rgb(244,172,35)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="72.5012%" y="1269" width="0.0166%" height="15" fill="rgb(234,93,19)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="72.5012%" y="1253" width="0.0166%" height="15" fill="rgb(227,109,7)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="72.5012%" y="1237" width="0.0166%" height="15" fill="rgb(233,136,54)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="72.5012%" y="1221" width="0.0166%" height="15" fill="rgb(233,19,40)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1205" width="0.0166%" height="15" fill="rgb(247,41,18)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1189" width="0.0166%" height="15" fill="rgb(220,34,34)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1173" width="0.0166%" height="15" fill="rgb(222,135,32)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1157" width="0.0166%" height="15" fill="rgb(214,80,19)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1141" width="0.0166%" height="15" fill="rgb(234,54,46)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1125" width="0.0166%" height="15" fill="rgb(251,48,23)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1109" width="0.0166%" height="15" fill="rgb(254,109,52)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1093" width="0.0166%" height="15" fill="rgb(240,186,19)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1077" width="0.0166%" height="15" fill="rgb(246,187,17)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1061" width="0.0166%" height="15" fill="rgb(212,21,5)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.5012%" y="1045" width="0.0166%" height="15" fill="rgb(225,185,18)" fg:x="4374" fg:w="1"/><text x="72.7512%" y="1055.50"></text></g><g><title>CCoinsViewDB::BatchWrite (3 samples, 0.05%)</title><rect x="72.4847%" y="1365" width="0.0497%" height="15" fill="rgb(245,114,17)" fg:x="4373" fg:w="3"/><text x="72.7347%" y="1375.50"></text></g><g><title>CDBBatch::WriteImpl (2 samples, 0.03%)</title><rect x="72.5012%" y="1349" width="0.0332%" height="15" fill="rgb(223,164,24)" fg:x="4374" fg:w="2"/><text x="72.7512%" y="1359.50"></text></g><g><title>leveldb::WriteBatch::Put (2 samples, 0.03%)</title><rect x="72.5012%" y="1333" width="0.0332%" height="15" fill="rgb(211,228,3)" fg:x="4374" fg:w="2"/><text x="72.7512%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="72.5178%" y="1317" width="0.0166%" height="15" fill="rgb(223,16,38)" fg:x="4375" fg:w="1"/><text x="72.7678%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="72.5178%" y="1301" width="0.0166%" height="15" fill="rgb(207,31,54)" fg:x="4375" fg:w="1"/><text x="72.7678%" y="1311.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="72.5344%" y="1317" width="0.0166%" height="15" fill="rgb(220,39,11)" fg:x="4376" fg:w="1"/><text x="72.7844%" y="1327.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="72.5344%" y="1301" width="0.0166%" height="15" fill="rgb(235,185,0)" fg:x="4376" fg:w="1"/><text x="72.7844%" y="1311.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="72.5344%" y="1285" width="0.0166%" height="15" fill="rgb(249,39,18)" fg:x="4376" fg:w="1"/><text x="72.7844%" y="1295.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="72.5510%" y="1301" width="0.0166%" height="15" fill="rgb(240,110,33)" fg:x="4377" fg:w="1"/><text x="72.8010%" y="1311.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="72.5510%" y="1285" width="0.0166%" height="15" fill="rgb(210,92,42)" fg:x="4377" fg:w="1"/><text x="72.8010%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="72.5675%" y="1269" width="0.0166%" height="15" fill="rgb(218,215,28)" fg:x="4378" fg:w="1"/><text x="72.8175%" y="1279.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="72.5675%" y="1253" width="0.0166%" height="15" fill="rgb(238,215,36)" fg:x="4378" fg:w="1"/><text x="72.8175%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="72.5841%" y="1253" width="0.0332%" height="15" fill="rgb(220,31,10)" fg:x="4379" fg:w="2"/><text x="72.8341%" y="1263.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="72.6173%" y="1253" width="0.0166%" height="15" fill="rgb(212,93,14)" fg:x="4381" fg:w="1"/><text x="72.8673%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (1 samples, 0.02%)</title><rect x="72.6338%" y="1253" width="0.0166%" height="15" fill="rgb(254,207,2)" fg:x="4382" fg:w="1"/><text x="72.8838%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="72.6338%" y="1237" width="0.0166%" height="15" fill="rgb(205,57,44)" fg:x="4382" fg:w="1"/><text x="72.8838%" y="1247.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="72.6338%" y="1221" width="0.0166%" height="15" fill="rgb(226,151,19)" fg:x="4382" fg:w="1"/><text x="72.8838%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.6836%" y="1221" width="0.0663%" height="15" fill="rgb(230,72,30)" fg:x="4385" fg:w="4"/><text x="72.9336%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.6836%" y="1205" width="0.0663%" height="15" fill="rgb(244,0,8)" fg:x="4385" fg:w="4"/><text x="72.9336%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.6836%" y="1189" width="0.0663%" height="15" fill="rgb(230,192,6)" fg:x="4385" fg:w="4"/><text x="72.9336%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.6836%" y="1173" width="0.0663%" height="15" fill="rgb(233,207,13)" fg:x="4385" fg:w="4"/><text x="72.9336%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="72.6836%" y="1157" width="0.0663%" height="15" fill="rgb(206,227,7)" fg:x="4385" fg:w="4"/><text x="72.9336%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1141" width="0.0497%" height="15" fill="rgb(213,217,25)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1125" width="0.0497%" height="15" fill="rgb(249,75,4)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1109" width="0.0497%" height="15" fill="rgb(225,114,18)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1093" width="0.0497%" height="15" fill="rgb(211,162,40)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1077" width="0.0497%" height="15" fill="rgb(206,49,29)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1061" width="0.0497%" height="15" fill="rgb(244,8,6)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1045" width="0.0497%" height="15" fill="rgb(231,194,28)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="72.7001%" y="1029" width="0.0497%" height="15" fill="rgb(210,69,5)" fg:x="4386" fg:w="3"/><text x="72.9501%" y="1039.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="72.7499%" y="1221" width="0.0663%" height="15" fill="rgb(216,186,12)" fg:x="4389" fg:w="4"/><text x="72.9999%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="72.9156%" y="1189" width="0.0332%" height="15" fill="rgb(238,61,15)" fg:x="4399" fg:w="2"/><text x="73.1656%" y="1199.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="72.9322%" y="1173" width="0.0166%" height="15" fill="rgb(226,104,1)" fg:x="4400" fg:w="1"/><text x="73.1822%" y="1183.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="72.9322%" y="1157" width="0.0166%" height="15" fill="rgb(229,128,15)" fg:x="4400" fg:w="1"/><text x="73.1822%" y="1167.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="72.9488%" y="1189" width="0.0663%" height="15" fill="rgb(247,110,15)" fg:x="4401" fg:w="4"/><text x="73.1988%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.03%)</title><rect x="73.0151%" y="1189" width="0.0332%" height="15" fill="rgb(210,74,48)" fg:x="4405" fg:w="2"/><text x="73.2651%" y="1199.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.18%)</title><rect x="72.8825%" y="1205" width="0.1823%" height="15" fill="rgb(246,121,10)" fg:x="4397" fg:w="11"/><text x="73.1325%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="73.0482%" y="1189" width="0.0166%" height="15" fill="rgb(214,156,37)" fg:x="4407" fg:w="1"/><text x="73.2982%" y="1199.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="73.1145%" y="1189" width="0.0332%" height="15" fill="rgb(214,210,34)" fg:x="4411" fg:w="2"/><text x="73.3645%" y="1199.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="73.1311%" y="1173" width="0.0166%" height="15" fill="rgb(237,93,35)" fg:x="4412" fg:w="1"/><text x="73.3811%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.10%)</title><rect x="73.0648%" y="1205" width="0.0995%" height="15" fill="rgb(206,36,8)" fg:x="4408" fg:w="6"/><text x="73.3148%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="73.1477%" y="1189" width="0.0166%" height="15" fill="rgb(208,151,12)" fg:x="4413" fg:w="1"/><text x="73.3977%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (22 samples, 0.36%)</title><rect x="72.8162%" y="1221" width="0.3647%" height="15" fill="rgb(225,133,52)" fg:x="4393" fg:w="22"/><text x="73.0662%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="73.1643%" y="1205" width="0.0166%" height="15" fill="rgb(231,71,53)" fg:x="4414" fg:w="1"/><text x="73.4143%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="73.1808%" y="1221" width="0.0166%" height="15" fill="rgb(243,76,21)" fg:x="4415" fg:w="1"/><text x="73.4308%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="73.1808%" y="1205" width="0.0166%" height="15" fill="rgb(252,144,3)" fg:x="4415" fg:w="1"/><text x="73.4308%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (33 samples, 0.55%)</title><rect x="72.6670%" y="1237" width="0.5470%" height="15" fill="rgb(231,199,10)" fg:x="4384" fg:w="33"/><text x="72.9170%" y="1247.50"></text></g><g><title>leveldb::VarintLength (1 samples, 0.02%)</title><rect x="73.1974%" y="1221" width="0.0166%" height="15" fill="rgb(215,18,11)" fg:x="4416" fg:w="1"/><text x="73.4474%" y="1231.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="73.2140%" y="997" width="0.0166%" height="15" fill="rgb(241,65,24)" fg:x="4417" fg:w="1"/><text x="73.4640%" y="1007.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="73.2140%" y="981" width="0.0166%" height="15" fill="rgb(251,192,38)" fg:x="4417" fg:w="1"/><text x="73.4640%" y="991.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (45 samples, 0.75%)</title><rect x="72.5344%" y="1333" width="0.7459%" height="15" fill="rgb(205,9,35)" fg:x="4376" fg:w="45"/><text x="72.7844%" y="1343.50"></text></g><g><title>leveldb::WriteBatch::Iterate (44 samples, 0.73%)</title><rect x="72.5510%" y="1317" width="0.7293%" height="15" fill="rgb(229,225,49)" fg:x="4377" fg:w="44"/><text x="72.8010%" y="1327.50"></text></g><g><title>leveldb::WriteBatch::Iterate (43 samples, 0.71%)</title><rect x="72.5675%" y="1301" width="0.7127%" height="15" fill="rgb(207,125,39)" fg:x="4378" fg:w="43"/><text x="72.8175%" y="1311.50"></text></g><g><title>leveldb::MemTable::Add (43 samples, 0.71%)</title><rect x="72.5675%" y="1285" width="0.7127%" height="15" fill="rgb(222,78,19)" fg:x="4378" fg:w="43"/><text x="72.8175%" y="1295.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (42 samples, 0.70%)</title><rect x="72.5841%" y="1269" width="0.6962%" height="15" fill="rgb(248,207,20)" fg:x="4379" fg:w="42"/><text x="72.8341%" y="1279.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (38 samples, 0.63%)</title><rect x="72.6504%" y="1253" width="0.6299%" height="15" fill="rgb(205,103,49)" fg:x="4383" fg:w="38"/><text x="72.9004%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (4 samples, 0.07%)</title><rect x="73.2140%" y="1237" width="0.0663%" height="15" fill="rgb(216,42,28)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1247.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (4 samples, 0.07%)</title><rect x="73.2140%" y="1221" width="0.0663%" height="15" fill="rgb(213,205,53)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1231.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (4 samples, 0.07%)</title><rect x="73.2140%" y="1205" width="0.0663%" height="15" fill="rgb(239,140,53)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1189" width="0.0663%" height="15" fill="rgb(248,95,9)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1173" width="0.0663%" height="15" fill="rgb(254,58,47)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1157" width="0.0663%" height="15" fill="rgb(234,227,14)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1141" width="0.0663%" height="15" fill="rgb(205,192,45)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1125" width="0.0663%" height="15" fill="rgb(253,187,31)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1109" width="0.0663%" height="15" fill="rgb(222,6,32)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1093" width="0.0663%" height="15" fill="rgb(249,190,19)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1077" width="0.0663%" height="15" fill="rgb(251,28,20)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1061" width="0.0663%" height="15" fill="rgb(210,223,40)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1045" width="0.0663%" height="15" fill="rgb(216,137,22)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1029" width="0.0663%" height="15" fill="rgb(247,39,34)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.2140%" y="1013" width="0.0663%" height="15" fill="rgb(239,43,50)" fg:x="4417" fg:w="4"/><text x="73.4640%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2306%" y="997" width="0.0497%" height="15" fill="rgb(241,212,9)" fg:x="4418" fg:w="3"/><text x="73.4806%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2306%" y="981" width="0.0497%" height="15" fill="rgb(205,8,2)" fg:x="4418" fg:w="3"/><text x="73.4806%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2306%" y="965" width="0.0497%" height="15" fill="rgb(217,173,54)" fg:x="4418" fg:w="3"/><text x="73.4806%" y="975.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="73.2969%" y="1125" width="0.0166%" height="15" fill="rgb(208,149,52)" fg:x="4422" fg:w="1"/><text x="73.5469%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="73.2969%" y="1109" width="0.0166%" height="15" fill="rgb(239,99,40)" fg:x="4422" fg:w="1"/><text x="73.5469%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.2969%" y="1093" width="0.0166%" height="15" fill="rgb(233,214,26)" fg:x="4422" fg:w="1"/><text x="73.5469%" y="1103.50"></text></g><g><title>CDBWrapper::WriteBatch (48 samples, 0.80%)</title><rect x="72.5344%" y="1365" width="0.7956%" height="15" fill="rgb(231,225,37)" fg:x="4376" fg:w="48"/><text x="72.7844%" y="1375.50"></text></g><g><title>leveldb::DBImpl::Write (48 samples, 0.80%)</title><rect x="72.5344%" y="1349" width="0.7956%" height="15" fill="rgb(252,55,35)" fg:x="4376" fg:w="48"/><text x="72.7844%" y="1359.50"></text></g><g><title>leveldb::log::Writer::AddRecord (3 samples, 0.05%)</title><rect x="73.2803%" y="1333" width="0.0497%" height="15" fill="rgb(239,43,18)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1343.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (3 samples, 0.05%)</title><rect x="73.2803%" y="1317" width="0.0497%" height="15" fill="rgb(251,125,49)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1327.50"></text></g><g><title>Flush (3 samples, 0.05%)</title><rect x="73.2803%" y="1301" width="0.0497%" height="15" fill="rgb(212,83,54)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1311.50"></text></g><g><title>FlushBuffer (3 samples, 0.05%)</title><rect x="73.2803%" y="1285" width="0.0497%" height="15" fill="rgb(250,75,6)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (3 samples, 0.05%)</title><rect x="73.2803%" y="1269" width="0.0497%" height="15" fill="rgb(252,36,40)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1279.50"></text></g><g><title>__GI___libc_write (3 samples, 0.05%)</title><rect x="73.2803%" y="1253" width="0.0497%" height="15" fill="rgb(230,91,51)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2803%" y="1237" width="0.0497%" height="15" fill="rgb(212,92,28)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2803%" y="1221" width="0.0497%" height="15" fill="rgb(227,13,22)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2803%" y="1205" width="0.0497%" height="15" fill="rgb(239,204,32)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.2803%" y="1189" width="0.0497%" height="15" fill="rgb(228,49,41)" fg:x="4421" fg:w="3"/><text x="73.5303%" y="1199.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="73.2969%" y="1173" width="0.0332%" height="15" fill="rgb(206,95,6)" fg:x="4422" fg:w="2"/><text x="73.5469%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="73.2969%" y="1157" width="0.0332%" height="15" fill="rgb(251,20,14)" fg:x="4422" fg:w="2"/><text x="73.5469%" y="1167.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="73.2969%" y="1141" width="0.0332%" height="15" fill="rgb(214,99,28)" fg:x="4422" fg:w="2"/><text x="73.5469%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.3134%" y="1125" width="0.0166%" height="15" fill="rgb(239,122,54)" fg:x="4423" fg:w="1"/><text x="73.5634%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.3134%" y="1109" width="0.0166%" height="15" fill="rgb(218,217,46)" fg:x="4423" fg:w="1"/><text x="73.5634%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.3134%" y="1093" width="0.0166%" height="15" fill="rgb(249,106,28)" fg:x="4423" fg:w="1"/><text x="73.5634%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="73.3134%" y="1077" width="0.0166%" height="15" fill="rgb(250,158,18)" fg:x="4423" fg:w="1"/><text x="73.5634%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1205" width="0.0166%" height="15" fill="rgb(226,137,29)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1215.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1189" width="0.0166%" height="15" fill="rgb(210,188,1)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1199.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1173" width="0.0166%" height="15" fill="rgb(227,84,42)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1183.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="73.3300%" y="1157" width="0.0166%" height="15" fill="rgb(222,147,48)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1141" width="0.0166%" height="15" fill="rgb(241,150,43)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1151.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1125" width="0.0166%" height="15" fill="rgb(206,139,52)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1135.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1109" width="0.0166%" height="15" fill="rgb(230,63,14)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1119.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1093" width="0.0166%" height="15" fill="rgb(247,8,20)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1103.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1077" width="0.0166%" height="15" fill="rgb(213,115,4)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1087.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="73.3300%" y="1061" width="0.0166%" height="15" fill="rgb(241,79,49)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1071.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1045" width="0.0166%" height="15" fill="rgb(222,42,35)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1055.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="73.3300%" y="1029" width="0.0166%" height="15" fill="rgb(247,59,23)" fg:x="4424" fg:w="1"/><text x="73.5800%" y="1039.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="73.3466%" y="1157" width="0.0166%" height="15" fill="rgb(247,93,18)" fg:x="4425" fg:w="1"/><text x="73.5966%" y="1167.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="73.3466%" y="1141" width="0.0166%" height="15" fill="rgb(249,107,47)" fg:x="4425" fg:w="1"/><text x="73.5966%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="73.3466%" y="1125" width="0.0166%" height="15" fill="rgb(219,27,1)" fg:x="4425" fg:w="1"/><text x="73.5966%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="73.3466%" y="1109" width="0.0166%" height="15" fill="rgb(217,82,32)" fg:x="4425" fg:w="1"/><text x="73.5966%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="73.3466%" y="1093" width="0.0166%" height="15" fill="rgb(250,129,47)" fg:x="4425" fg:w="1"/><text x="73.5966%" y="1103.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="73.3466%" y="1077" width="0.0166%" height="15" fill="rgb(253,88,35)" fg:x="4425" fg:w="1"/><text x="73.5966%" y="1087.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="73.3466%" y="1061" width="0.0166%" height="15" fill="rgb(245,221,14)" fg:x="4425" fg:w="1"/><text x="73.5966%" y="1071.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="73.3632%" y="1157" width="0.0166%" height="15" fill="rgb(217,119,54)" fg:x="4426" fg:w="1"/><text x="73.6132%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="73.3632%" y="1141" width="0.0166%" height="15" fill="rgb(247,128,31)" fg:x="4426" fg:w="1"/><text x="73.6132%" y="1151.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="73.3632%" y="1125" width="0.0166%" height="15" fill="rgb(211,99,22)" fg:x="4426" fg:w="1"/><text x="73.6132%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="73.3632%" y="1109" width="0.0166%" height="15" fill="rgb(212,20,17)" fg:x="4426" fg:w="1"/><text x="73.6132%" y="1119.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="73.3632%" y="1093" width="0.0166%" height="15" fill="rgb(209,159,29)" fg:x="4426" fg:w="1"/><text x="73.6132%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="73.3300%" y="1301" width="0.0663%" height="15" fill="rgb(222,177,53)" fg:x="4424" fg:w="4"/><text x="73.5800%" y="1311.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="73.3300%" y="1285" width="0.0663%" height="15" fill="rgb(234,46,43)" fg:x="4424" fg:w="4"/><text x="73.5800%" y="1295.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="73.3300%" y="1269" width="0.0663%" height="15" fill="rgb(208,108,14)" fg:x="4424" fg:w="4"/><text x="73.5800%" y="1279.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="73.3300%" y="1253" width="0.0663%" height="15" fill="rgb(226,78,53)" fg:x="4424" fg:w="4"/><text x="73.5800%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="73.3300%" y="1237" width="0.0663%" height="15" fill="rgb(230,20,41)" fg:x="4424" fg:w="4"/><text x="73.5800%" y="1247.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="73.3300%" y="1221" width="0.0663%" height="15" fill="rgb(213,195,35)" fg:x="4424" fg:w="4"/><text x="73.5800%" y="1231.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="73.3466%" y="1205" width="0.0497%" height="15" fill="rgb(242,62,36)" fg:x="4425" fg:w="3"/><text x="73.5966%" y="1215.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="73.3466%" y="1189" width="0.0497%" height="15" fill="rgb(222,210,37)" fg:x="4425" fg:w="3"/><text x="73.5966%" y="1199.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="73.3466%" y="1173" width="0.0497%" height="15" fill="rgb(232,107,19)" fg:x="4425" fg:w="3"/><text x="73.5966%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="73.3797%" y="1157" width="0.0166%" height="15" fill="rgb(235,85,17)" fg:x="4427" fg:w="1"/><text x="73.6297%" y="1167.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="73.4129%" y="1189" width="0.0166%" height="15" fill="rgb(219,195,31)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1199.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1173" width="0.0166%" height="15" fill="rgb(231,183,30)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1183.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1157" width="0.0166%" height="15" fill="rgb(212,0,11)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1167.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1141" width="0.0166%" height="15" fill="rgb(249,53,54)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1151.50"></text></g><g><title>Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1125" width="0.0166%" height="15" fill="rgb(211,118,13)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1135.50"></text></g><g><title>Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1109" width="0.0166%" height="15" fill="rgb(237,42,9)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1119.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1093" width="0.0166%" height="15" fill="rgb(227,68,32)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1077" width="0.0166%" height="15" fill="rgb(238,10,7)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1087.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1061" width="0.0166%" height="15" fill="rgb(224,42,12)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1045" width="0.0166%" height="15" fill="rgb(252,190,5)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1055.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1029" width="0.0166%" height="15" fill="rgb(220,214,39)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1039.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="73.4129%" y="1013" width="0.0166%" height="15" fill="rgb(247,98,4)" fg:x="4429" fg:w="1"/><text x="73.6629%" y="1023.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (7 samples, 0.12%)</title><rect x="73.3300%" y="1349" width="0.1160%" height="15" fill="rgb(211,60,12)" fg:x="4424" fg:w="7"/><text x="73.5800%" y="1359.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (7 samples, 0.12%)</title><rect x="73.3300%" y="1333" width="0.1160%" height="15" fill="rgb(224,42,10)" fg:x="4424" fg:w="7"/><text x="73.5800%" y="1343.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (7 samples, 0.12%)</title><rect x="73.3300%" y="1317" width="0.1160%" height="15" fill="rgb(217,167,4)" fg:x="4424" fg:w="7"/><text x="73.5800%" y="1327.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="73.3963%" y="1301" width="0.0497%" height="15" fill="rgb(253,18,17)" fg:x="4428" fg:w="3"/><text x="73.6463%" y="1311.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="73.3963%" y="1285" width="0.0497%" height="15" fill="rgb(249,186,44)" fg:x="4428" fg:w="3"/><text x="73.6463%" y="1295.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (3 samples, 0.05%)</title><rect x="73.3963%" y="1269" width="0.0497%" height="15" fill="rgb(254,124,54)" fg:x="4428" fg:w="3"/><text x="73.6463%" y="1279.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (3 samples, 0.05%)</title><rect x="73.3963%" y="1253" width="0.0497%" height="15" fill="rgb(220,124,39)" fg:x="4428" fg:w="3"/><text x="73.6463%" y="1263.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="73.4129%" y="1237" width="0.0332%" height="15" fill="rgb(225,96,46)" fg:x="4429" fg:w="2"/><text x="73.6629%" y="1247.50"></text></g><g><title>DataStream::write (2 samples, 0.03%)</title><rect x="73.4129%" y="1221" width="0.0332%" height="15" fill="rgb(221,106,12)" fg:x="4429" fg:w="2"/><text x="73.6629%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.03%)</title><rect x="73.4129%" y="1205" width="0.0332%" height="15" fill="rgb(227,133,23)" fg:x="4429" fg:w="2"/><text x="73.6629%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="73.4295%" y="1189" width="0.0166%" height="15" fill="rgb(216,44,52)" fg:x="4430" fg:w="1"/><text x="73.6795%" y="1199.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="73.4295%" y="1173" width="0.0166%" height="15" fill="rgb(239,149,7)" fg:x="4430" fg:w="1"/><text x="73.6795%" y="1183.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="73.4295%" y="1157" width="0.0166%" height="15" fill="rgb(211,157,31)" fg:x="4430" fg:w="1"/><text x="73.6795%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="73.4295%" y="1141" width="0.0166%" height="15" fill="rgb(206,215,22)" fg:x="4430" fg:w="1"/><text x="73.6795%" y="1151.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="73.4295%" y="1125" width="0.0166%" height="15" fill="rgb(208,113,15)" fg:x="4430" fg:w="1"/><text x="73.6795%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="73.4460%" y="1237" width="0.0166%" height="15" fill="rgb(207,189,15)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1247.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.4460%" y="1221" width="0.0166%" height="15" fill="rgb(231,115,4)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1231.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.4460%" y="1205" width="0.0166%" height="15" fill="rgb(253,117,2)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1215.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="73.4460%" y="1189" width="0.0166%" height="15" fill="rgb(248,48,24)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1199.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (1 samples, 0.02%)</title><rect x="73.4460%" y="1173" width="0.0166%" height="15" fill="rgb(241,28,46)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1183.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="73.4460%" y="1157" width="0.0166%" height="15" fill="rgb(216,165,52)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="73.4460%" y="1141" width="0.0166%" height="15" fill="rgb(220,222,34)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1151.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="73.4460%" y="1125" width="0.0166%" height="15" fill="rgb(247,222,49)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1135.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="73.4460%" y="1109" width="0.0166%" height="15" fill="rgb(240,10,31)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1119.50"></text></g><g><title>DataStream::reserve (1 samples, 0.02%)</title><rect x="73.4460%" y="1093" width="0.0166%" height="15" fill="rgb(221,199,35)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1103.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="73.4460%" y="1077" width="0.0166%" height="15" fill="rgb(230,223,11)" fg:x="4431" fg:w="1"/><text x="73.6960%" y="1087.50"></text></g><g><title>CCoinsViewDB::BatchWrite (60 samples, 0.99%)</title><rect x="72.4847%" y="1381" width="0.9945%" height="15" fill="rgb(218,82,45)" fg:x="4373" fg:w="60"/><text x="72.7347%" y="1391.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (9 samples, 0.15%)</title><rect x="73.3300%" y="1365" width="0.1492%" height="15" fill="rgb(233,213,33)" fg:x="4424" fg:w="9"/><text x="73.5800%" y="1375.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (2 samples, 0.03%)</title><rect x="73.4460%" y="1349" width="0.0332%" height="15" fill="rgb(210,143,52)" fg:x="4431" fg:w="2"/><text x="73.6960%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (2 samples, 0.03%)</title><rect x="73.4460%" y="1333" width="0.0332%" height="15" fill="rgb(206,95,4)" fg:x="4431" fg:w="2"/><text x="73.6960%" y="1343.50"></text></g><g><title>Serialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="73.4460%" y="1317" width="0.0332%" height="15" fill="rgb(246,164,46)" fg:x="4431" fg:w="2"/><text x="73.6960%" y="1327.50"></text></g><g><title>Ser&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="73.4460%" y="1301" width="0.0332%" height="15" fill="rgb(213,210,47)" fg:x="4431" fg:w="2"/><text x="73.6960%" y="1311.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (2 samples, 0.03%)</title><rect x="73.4460%" y="1285" width="0.0332%" height="15" fill="rgb(210,12,38)" fg:x="4431" fg:w="2"/><text x="73.6960%" y="1295.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="73.4460%" y="1269" width="0.0332%" height="15" fill="rgb(252,192,54)" fg:x="4431" fg:w="2"/><text x="73.6960%" y="1279.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="73.4460%" y="1253" width="0.0332%" height="15" fill="rgb(242,92,6)" fg:x="4431" fg:w="2"/><text x="73.6960%" y="1263.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.4626%" y="1237" width="0.0166%" height="15" fill="rgb(253,154,15)" fg:x="4432" fg:w="1"/><text x="73.7126%" y="1247.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="73.4626%" y="1221" width="0.0166%" height="15" fill="rgb(209,20,43)" fg:x="4432" fg:w="1"/><text x="73.7126%" y="1231.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="73.4626%" y="1205" width="0.0166%" height="15" fill="rgb(232,28,49)" fg:x="4432" fg:w="1"/><text x="73.7126%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="73.4626%" y="1189" width="0.0166%" height="15" fill="rgb(248,131,53)" fg:x="4432" fg:w="1"/><text x="73.7126%" y="1199.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="73.4626%" y="1173" width="0.0166%" height="15" fill="rgb(214,16,30)" fg:x="4432" fg:w="1"/><text x="73.7126%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="73.4626%" y="1157" width="0.0166%" height="15" fill="rgb(245,16,0)" fg:x="4432" fg:w="1"/><text x="73.7126%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="73.4626%" y="1141" width="0.0166%" height="15" fill="rgb(245,17,35)" fg:x="4432" fg:w="1"/><text x="73.7126%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.02%)</title><rect x="73.4792%" y="1317" width="0.0166%" height="15" fill="rgb(249,27,53)" fg:x="4433" fg:w="1"/><text x="73.7292%" y="1327.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="73.4792%" y="1301" width="0.0166%" height="15" fill="rgb(214,73,24)" fg:x="4433" fg:w="1"/><text x="73.7292%" y="1311.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (1 samples, 0.02%)</title><rect x="73.4792%" y="1285" width="0.0166%" height="15" fill="rgb(223,84,37)" fg:x="4433" fg:w="1"/><text x="73.7292%" y="1295.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="73.4958%" y="1221" width="0.0166%" height="15" fill="rgb(210,109,28)" fg:x="4434" fg:w="1"/><text x="73.7458%" y="1231.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="73.4958%" y="1205" width="0.0166%" height="15" fill="rgb(208,186,6)" fg:x="4434" fg:w="1"/><text x="73.7458%" y="1215.50"></text></g><g><title>CCoinsViewCache::Flush (68 samples, 1.13%)</title><rect x="72.4515%" y="1397" width="1.1271%" height="15" fill="rgb(235,201,30)" fg:x="4371" fg:w="68"/><text x="72.7015%" y="1407.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (6 samples, 0.10%)</title><rect x="73.4792%" y="1381" width="0.0995%" height="15" fill="rgb(216,198,48)" fg:x="4433" fg:w="6"/><text x="73.7292%" y="1391.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (6 samples, 0.10%)</title><rect x="73.4792%" y="1365" width="0.0995%" height="15" fill="rgb(254,186,25)" fg:x="4433" fg:w="6"/><text x="73.7292%" y="1375.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (6 samples, 0.10%)</title><rect x="73.4792%" y="1349" width="0.0995%" height="15" fill="rgb(227,87,5)" fg:x="4433" fg:w="6"/><text x="73.7292%" y="1359.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (6 samples, 0.10%)</title><rect x="73.4792%" y="1333" width="0.0995%" height="15" fill="rgb(236,205,25)" fg:x="4433" fg:w="6"/><text x="73.7292%" y="1343.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="73.4958%" y="1317" width="0.0829%" height="15" fill="rgb(229,99,32)" fg:x="4434" fg:w="5"/><text x="73.7458%" y="1327.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="73.4958%" y="1301" width="0.0829%" height="15" fill="rgb(231,177,31)" fg:x="4434" fg:w="5"/><text x="73.7458%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="73.4958%" y="1285" width="0.0829%" height="15" fill="rgb(246,15,2)" fg:x="4434" fg:w="5"/><text x="73.7458%" y="1295.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (5 samples, 0.08%)</title><rect x="73.4958%" y="1269" width="0.0829%" height="15" fill="rgb(207,39,15)" fg:x="4434" fg:w="5"/><text x="73.7458%" y="1279.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (5 samples, 0.08%)</title><rect x="73.4958%" y="1253" width="0.0829%" height="15" fill="rgb(207,44,9)" fg:x="4434" fg:w="5"/><text x="73.7458%" y="1263.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (5 samples, 0.08%)</title><rect x="73.4958%" y="1237" width="0.0829%" height="15" fill="rgb(225,224,33)" fg:x="4434" fg:w="5"/><text x="73.7458%" y="1247.50"></text></g><g><title>Coin::~Coin (4 samples, 0.07%)</title><rect x="73.5123%" y="1221" width="0.0663%" height="15" fill="rgb(252,151,3)" fg:x="4435" fg:w="4"/><text x="73.7623%" y="1231.50"></text></g><g><title>CTxOut::~CTxOut (4 samples, 0.07%)</title><rect x="73.5123%" y="1205" width="0.0663%" height="15" fill="rgb(211,140,13)" fg:x="4435" fg:w="4"/><text x="73.7623%" y="1215.50"></text></g><g><title>CScript::~CScript (4 samples, 0.07%)</title><rect x="73.5123%" y="1189" width="0.0663%" height="15" fill="rgb(239,225,17)" fg:x="4435" fg:w="4"/><text x="73.7623%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (4 samples, 0.07%)</title><rect x="73.5123%" y="1173" width="0.0663%" height="15" fill="rgb(223,170,52)" fg:x="4435" fg:w="4"/><text x="73.7623%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="73.5621%" y="1157" width="0.0166%" height="15" fill="rgb(212,64,21)" fg:x="4438" fg:w="1"/><text x="73.8121%" y="1167.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (73 samples, 1.21%)</title><rect x="72.4515%" y="1429" width="1.2100%" height="15" fill="rgb(236,126,48)" fg:x="4371" fg:w="73"/><text x="72.7015%" y="1439.50"></text></g><g><title>Chainstate::FlushStateToDisk (73 samples, 1.21%)</title><rect x="72.4515%" y="1413" width="1.2100%" height="15" fill="rgb(209,135,11)" fg:x="4371" fg:w="73"/><text x="72.7015%" y="1423.50"></text></g><g><title>node::BlockManager::FlushChainstateBlockFile (5 samples, 0.08%)</title><rect x="73.5787%" y="1397" width="0.0829%" height="15" fill="rgb(228,126,40)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1407.50"></text></g><g><title>node::BlockManager::FlushBlockFile (5 samples, 0.08%)</title><rect x="73.5787%" y="1381" width="0.0829%" height="15" fill="rgb(205,196,36)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1391.50"></text></g><g><title>FlatFileSeq::Flush (5 samples, 0.08%)</title><rect x="73.5787%" y="1365" width="0.0829%" height="15" fill="rgb(243,160,33)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1375.50"></text></g><g><title>FileCommit (5 samples, 0.08%)</title><rect x="73.5787%" y="1349" width="0.0829%" height="15" fill="rgb(210,84,20)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1359.50"></text></g><g><title>fdatasync (5 samples, 0.08%)</title><rect x="73.5787%" y="1333" width="0.0829%" height="15" fill="rgb(228,213,30)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1343.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="73.5787%" y="1317" width="0.0829%" height="15" fill="rgb(252,33,45)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="73.5787%" y="1301" width="0.0829%" height="15" fill="rgb(254,227,20)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="73.5787%" y="1285" width="0.0829%" height="15" fill="rgb(228,192,2)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1295.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="73.5787%" y="1269" width="0.0829%" height="15" fill="rgb(233,32,8)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="73.5787%" y="1253" width="0.0829%" height="15" fill="rgb(220,146,47)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="73.5787%" y="1237" width="0.0829%" height="15" fill="rgb(246,194,1)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="73.5787%" y="1221" width="0.0829%" height="15" fill="rgb(218,203,9)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="73.5787%" y="1205" width="0.0829%" height="15" fill="rgb(237,97,14)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1215.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="73.5787%" y="1189" width="0.0829%" height="15" fill="rgb(239,76,15)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1199.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="73.5787%" y="1173" width="0.0829%" height="15" fill="rgb(222,53,45)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1183.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="73.5787%" y="1157" width="0.0829%" height="15" fill="rgb(237,88,5)" fg:x="4439" fg:w="5"/><text x="73.8287%" y="1167.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="73.5952%" y="1141" width="0.0663%" height="15" fill="rgb(218,223,35)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1151.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="73.5952%" y="1125" width="0.0663%" height="15" fill="rgb(243,229,38)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="1109" width="0.0663%" height="15" fill="rgb(240,75,41)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="1093" width="0.0663%" height="15" fill="rgb(209,110,37)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="1077" width="0.0663%" height="15" fill="rgb(221,130,46)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="1061" width="0.0663%" height="15" fill="rgb(237,160,20)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="1045" width="0.0663%" height="15" fill="rgb(234,126,24)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="1029" width="0.0663%" height="15" fill="rgb(207,177,9)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="1013" width="0.0663%" height="15" fill="rgb(231,191,33)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="997" width="0.0663%" height="15" fill="rgb(207,42,1)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="981" width="0.0663%" height="15" fill="rgb(218,34,50)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="965" width="0.0663%" height="15" fill="rgb(254,126,39)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="949" width="0.0663%" height="15" fill="rgb(251,17,26)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="73.5952%" y="933" width="0.0663%" height="15" fill="rgb(252,215,34)" fg:x="4440" fg:w="4"/><text x="73.8452%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="917" width="0.0497%" height="15" fill="rgb(217,120,44)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="901" width="0.0497%" height="15" fill="rgb(211,31,11)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="885" width="0.0497%" height="15" fill="rgb(222,69,51)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="869" width="0.0497%" height="15" fill="rgb(215,229,42)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="853" width="0.0497%" height="15" fill="rgb(212,102,15)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="837" width="0.0497%" height="15" fill="rgb(205,179,41)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="821" width="0.0497%" height="15" fill="rgb(219,148,46)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="805" width="0.0497%" height="15" fill="rgb(243,40,19)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="73.6118%" y="789" width="0.0497%" height="15" fill="rgb(208,206,34)" fg:x="4441" fg:w="3"/><text x="73.8618%" y="799.50"></text></g><g><title>Chainstate::ResetCoinsViews (24 samples, 0.40%)</title><rect x="73.6615%" y="1429" width="0.3978%" height="15" fill="rgb(244,184,38)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1439.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (24 samples, 0.40%)</title><rect x="73.6615%" y="1413" width="0.3978%" height="15" fill="rgb(244,151,47)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1423.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (24 samples, 0.40%)</title><rect x="73.6615%" y="1397" width="0.3978%" height="15" fill="rgb(236,134,42)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1407.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (24 samples, 0.40%)</title><rect x="73.6615%" y="1381" width="0.3978%" height="15" fill="rgb(233,93,22)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1391.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (24 samples, 0.40%)</title><rect x="73.6615%" y="1365" width="0.3978%" height="15" fill="rgb(211,202,10)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1375.50"></text></g><g><title>CoinsViews::~CoinsViews (24 samples, 0.40%)</title><rect x="73.6615%" y="1349" width="0.3978%" height="15" fill="rgb(240,63,8)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1359.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (24 samples, 0.40%)</title><rect x="73.6615%" y="1333" width="0.3978%" height="15" fill="rgb(214,9,4)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1343.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (24 samples, 0.40%)</title><rect x="73.6615%" y="1317" width="0.3978%" height="15" fill="rgb(243,66,45)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1327.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (24 samples, 0.40%)</title><rect x="73.6615%" y="1301" width="0.3978%" height="15" fill="rgb(220,50,42)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1311.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (24 samples, 0.40%)</title><rect x="73.6615%" y="1285" width="0.3978%" height="15" fill="rgb(220,134,27)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1295.50"></text></g><g><title>CDBWrapper::~CDBWrapper (24 samples, 0.40%)</title><rect x="73.6615%" y="1269" width="0.3978%" height="15" fill="rgb(246,151,50)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1279.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (24 samples, 0.40%)</title><rect x="73.6615%" y="1253" width="0.3978%" height="15" fill="rgb(238,216,27)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1263.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (24 samples, 0.40%)</title><rect x="73.6615%" y="1237" width="0.3978%" height="15" fill="rgb(250,92,11)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1247.50"></text></g><g><title>leveldb::TableCache::~TableCache (24 samples, 0.40%)</title><rect x="73.6615%" y="1221" width="0.3978%" height="15" fill="rgb(248,183,6)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1231.50"></text></g><g><title>~ShardedLRUCache (24 samples, 0.40%)</title><rect x="73.6615%" y="1205" width="0.3978%" height="15" fill="rgb(211,204,50)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (24 samples, 0.40%)</title><rect x="73.6615%" y="1189" width="0.3978%" height="15" fill="rgb(252,55,47)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1199.50"></text></g><g><title>~LRUCache (24 samples, 0.40%)</title><rect x="73.6615%" y="1173" width="0.3978%" height="15" fill="rgb(240,198,32)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (24 samples, 0.40%)</title><rect x="73.6615%" y="1157" width="0.3978%" height="15" fill="rgb(224,203,19)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1167.50"></text></g><g><title>leveldb::DeleteEntry (24 samples, 0.40%)</title><rect x="73.6615%" y="1141" width="0.3978%" height="15" fill="rgb(205,27,16)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1151.50"></text></g><g><title>~PosixMmapReadableFile (24 samples, 0.40%)</title><rect x="73.6615%" y="1125" width="0.3978%" height="15" fill="rgb(224,226,17)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (24 samples, 0.40%)</title><rect x="73.6615%" y="1109" width="0.3978%" height="15" fill="rgb(205,216,54)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1119.50"></text></g><g><title>__munmap (24 samples, 0.40%)</title><rect x="73.6615%" y="1093" width="0.3978%" height="15" fill="rgb(248,168,46)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1103.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="1077" width="0.3978%" height="15" fill="rgb(226,111,45)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1087.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="1061" width="0.3978%" height="15" fill="rgb(231,15,9)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1071.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="1045" width="0.3978%" height="15" fill="rgb(243,168,3)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1055.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="1029" width="0.3978%" height="15" fill="rgb(221,220,54)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1039.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="1013" width="0.3978%" height="15" fill="rgb(232,174,38)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1023.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="997" width="0.3978%" height="15" fill="rgb(205,14,38)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="1007.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="981" width="0.3978%" height="15" fill="rgb(234,89,19)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="991.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="965" width="0.3978%" height="15" fill="rgb(216,68,51)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="975.50"></text></g><g><title>[unknown] (24 samples, 0.40%)</title><rect x="73.6615%" y="949" width="0.3978%" height="15" fill="rgb(213,49,2)" fg:x="4444" fg:w="24"/><text x="73.9115%" y="959.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="73.8936%" y="933" width="0.1658%" height="15" fill="rgb(242,146,30)" fg:x="4458" fg:w="10"/><text x="74.1436%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="74.0262%" y="917" width="0.0332%" height="15" fill="rgb(224,188,11)" fg:x="4466" fg:w="2"/><text x="74.2762%" y="927.50"></text></g><g><title>StopHTTPServer (4 samples, 0.07%)</title><rect x="74.0593%" y="1429" width="0.0663%" height="15" fill="rgb(213,159,11)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1439.50"></text></g><g><title>event_base_free_ (4 samples, 0.07%)</title><rect x="74.0593%" y="1413" width="0.0663%" height="15" fill="rgb(229,13,31)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1423.50"></text></g><g><title>epoll_dealloc (4 samples, 0.07%)</title><rect x="74.0593%" y="1397" width="0.0663%" height="15" fill="rgb(209,103,11)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1407.50"></text></g><g><title>evsig_dealloc_ (4 samples, 0.07%)</title><rect x="74.0593%" y="1381" width="0.0663%" height="15" fill="rgb(206,3,4)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1391.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="74.0593%" y="1365" width="0.0663%" height="15" fill="rgb(252,10,49)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="74.0593%" y="1349" width="0.0663%" height="15" fill="rgb(217,160,32)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="74.0593%" y="1333" width="0.0663%" height="15" fill="rgb(249,196,0)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="74.0593%" y="1317" width="0.0663%" height="15" fill="rgb(213,17,48)" fg:x="4468" fg:w="4"/><text x="74.3093%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1301" width="0.0497%" height="15" fill="rgb(206,42,46)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1285" width="0.0497%" height="15" fill="rgb(212,105,24)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1269" width="0.0497%" height="15" fill="rgb(243,216,30)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1253" width="0.0497%" height="15" fill="rgb(207,121,3)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1237" width="0.0497%" height="15" fill="rgb(249,78,0)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1221" width="0.0497%" height="15" fill="rgb(244,151,32)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1205" width="0.0497%" height="15" fill="rgb(228,63,25)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1189" width="0.0497%" height="15" fill="rgb(231,158,23)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1173" width="0.0497%" height="15" fill="rgb(248,107,23)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1157" width="0.0497%" height="15" fill="rgb(215,168,21)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1141" width="0.0497%" height="15" fill="rgb(227,83,22)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="74.0759%" y="1125" width="0.0497%" height="15" fill="rgb(217,118,43)" fg:x="4469" fg:w="3"/><text x="74.3259%" y="1135.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="74.1256%" y="1173" width="0.0166%" height="15" fill="rgb(229,220,41)" fg:x="4472" fg:w="1"/><text x="74.3756%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="74.1422%" y="1173" width="0.0166%" height="15" fill="rgb(254,146,46)" fg:x="4473" fg:w="1"/><text x="74.3922%" y="1183.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="74.1422%" y="1157" width="0.0166%" height="15" fill="rgb(233,208,31)" fg:x="4473" fg:w="1"/><text x="74.3922%" y="1167.50"></text></g><g><title>_start (105 samples, 1.74%)</title><rect x="72.4349%" y="1509" width="1.7404%" height="15" fill="rgb(222,162,7)" fg:x="4370" fg:w="105"/><text x="72.6849%" y="1519.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (105 samples, 1.74%)</title><rect x="72.4349%" y="1493" width="1.7404%" height="15" fill="rgb(230,117,45)" fg:x="4370" fg:w="105"/><text x="72.6849%" y="1503.50"></text></g><g><title>__libc_start_call_main (105 samples, 1.74%)</title><rect x="72.4349%" y="1477" width="1.7404%" height="15" fill="rgb(239,163,6)" fg:x="4370" fg:w="105"/><text x="72.6849%" y="1487.50"></text></g><g><title>main (105 samples, 1.74%)</title><rect x="72.4349%" y="1461" width="1.7404%" height="15" fill="rgb(246,130,17)" fg:x="4370" fg:w="105"/><text x="72.6849%" y="1471.50"></text></g><g><title>Shutdown (105 samples, 1.74%)</title><rect x="72.4349%" y="1445" width="1.7404%" height="15" fill="rgb(216,84,5)" fg:x="4370" fg:w="105"/><text x="72.6849%" y="1455.50"></text></g><g><title>std::unique_ptr&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (3 samples, 0.05%)</title><rect x="74.1256%" y="1429" width="0.0497%" height="15" fill="rgb(230,200,21)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1439.50"></text></g><g><title>std::__uniq_ptr_impl&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (3 samples, 0.05%)</title><rect x="74.1256%" y="1413" width="0.0497%" height="15" fill="rgb(224,2,8)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1423.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (3 samples, 0.05%)</title><rect x="74.1256%" y="1397" width="0.0497%" height="15" fill="rgb(238,178,10)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1407.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (3 samples, 0.05%)</title><rect x="74.1256%" y="1381" width="0.0497%" height="15" fill="rgb(242,153,24)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1391.50"></text></g><g><title>ChainstateManager::~ChainstateManager (3 samples, 0.05%)</title><rect x="74.1256%" y="1365" width="0.0497%" height="15" fill="rgb(242,32,48)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1375.50"></text></g><g><title>node::BlockManager::~BlockManager (3 samples, 0.05%)</title><rect x="74.1256%" y="1349" width="0.0497%" height="15" fill="rgb(227,36,0)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1359.50"></text></g><g><title>std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::~unordered_map (3 samples, 0.05%)</title><rect x="74.1256%" y="1333" width="0.0497%" height="15" fill="rgb(251,33,35)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1343.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.05%)</title><rect x="74.1256%" y="1317" width="0.0497%" height="15" fill="rgb(232,168,51)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1327.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.05%)</title><rect x="74.1256%" y="1301" width="0.0497%" height="15" fill="rgb(228,56,10)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1311.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (3 samples, 0.05%)</title><rect x="74.1256%" y="1285" width="0.0497%" height="15" fill="rgb(231,10,26)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node (3 samples, 0.05%)</title><rect x="74.1256%" y="1269" width="0.0497%" height="15" fill="rgb(226,202,12)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (3 samples, 0.05%)</title><rect x="74.1256%" y="1253" width="0.0497%" height="15" fill="rgb(251,49,21)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1263.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::deallocate (3 samples, 0.05%)</title><rect x="74.1256%" y="1237" width="0.0497%" height="15" fill="rgb(206,228,28)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1247.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (3 samples, 0.05%)</title><rect x="74.1256%" y="1221" width="0.0497%" height="15" fill="rgb(205,198,31)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1231.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (3 samples, 0.05%)</title><rect x="74.1256%" y="1205" width="0.0497%" height="15" fill="rgb(213,69,1)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="74.1256%" y="1189" width="0.0497%" height="15" fill="rgb(209,177,9)" fg:x="4472" fg:w="3"/><text x="74.3756%" y="1199.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="74.1588%" y="1173" width="0.0166%" height="15" fill="rgb(227,119,30)" fg:x="4474" fg:w="1"/><text x="74.4088%" y="1183.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="74.1754%" y="1509" width="0.0166%" height="15" fill="rgb(234,106,41)" fg:x="4475" fg:w="1"/><text x="74.4254%" y="1519.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="74.1919%" y="1509" width="0.0166%" height="15" fill="rgb(244,103,47)" fg:x="4476" fg:w="1"/><text x="74.4419%" y="1519.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="74.1919%" y="1493" width="0.0166%" height="15" fill="rgb(212,211,25)" fg:x="4476" fg:w="1"/><text x="74.4419%" y="1503.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="74.1919%" y="1477" width="0.0166%" height="15" fill="rgb(208,63,53)" fg:x="4476" fg:w="1"/><text x="74.4419%" y="1487.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="74.2085%" y="1509" width="0.0166%" height="15" fill="rgb(213,176,21)" fg:x="4477" fg:w="1"/><text x="74.4585%" y="1519.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="74.2085%" y="1493" width="0.0166%" height="15" fill="rgb(243,124,12)" fg:x="4477" fg:w="1"/><text x="74.4585%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="74.2085%" y="1477" width="0.0166%" height="15" fill="rgb(239,2,35)" fg:x="4477" fg:w="1"/><text x="74.4585%" y="1487.50"></text></g><g><title>b-shutoff (135 samples, 2.24%)</title><rect x="72.0040%" y="1525" width="2.2377%" height="15" fill="rgb(253,169,22)" fg:x="4344" fg:w="135"/><text x="72.2540%" y="1535.50">b..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="74.2251%" y="1509" width="0.0166%" height="15" fill="rgb(254,51,12)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="74.2251%" y="1493" width="0.0166%" height="15" fill="rgb(244,17,47)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1503.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="74.2251%" y="1477" width="0.0166%" height="15" fill="rgb(251,45,46)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1487.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="74.2251%" y="1461" width="0.0166%" height="15" fill="rgb(223,87,43)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1471.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="74.2251%" y="1445" width="0.0166%" height="15" fill="rgb(230,132,31)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="74.2251%" y="1429" width="0.0166%" height="15" fill="rgb(206,99,1)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1439.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="74.2251%" y="1413" width="0.0166%" height="15" fill="rgb(227,110,25)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1423.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="74.2251%" y="1397" width="0.0166%" height="15" fill="rgb(217,182,7)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1407.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="74.2251%" y="1381" width="0.0166%" height="15" fill="rgb(250,176,4)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1391.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="74.2251%" y="1365" width="0.0166%" height="15" fill="rgb(244,98,30)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1375.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="74.2251%" y="1349" width="0.0166%" height="15" fill="rgb(228,150,42)" fg:x="4478" fg:w="1"/><text x="74.4751%" y="1359.50"></text></g><g><title>[000009.ldb] (1 samples, 0.02%)</title><rect x="74.2417%" y="1509" width="0.0166%" height="15" fill="rgb(231,91,46)" fg:x="4479" fg:w="1"/><text x="74.4917%" y="1519.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="74.2417%" y="1493" width="0.0166%" height="15" fill="rgb(252,161,32)" fg:x="4479" fg:w="1"/><text x="74.4917%" y="1503.50"></text></g><g><title>[000151.ldb] (1 samples, 0.02%)</title><rect x="74.2582%" y="1509" width="0.0166%" height="15" fill="rgb(236,69,41)" fg:x="4480" fg:w="1"/><text x="74.5082%" y="1519.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="74.2582%" y="1493" width="0.0166%" height="15" fill="rgb(212,160,3)" fg:x="4480" fg:w="1"/><text x="74.5082%" y="1503.50"></text></g><g><title>[000746.ldb] (1 samples, 0.02%)</title><rect x="74.2748%" y="1509" width="0.0166%" height="15" fill="rgb(216,5,50)" fg:x="4481" fg:w="1"/><text x="74.5248%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="74.2748%" y="1493" width="0.0166%" height="15" fill="rgb(241,138,25)" fg:x="4481" fg:w="1"/><text x="74.5248%" y="1503.50"></text></g><g><title>[000850.ldb] (1 samples, 0.02%)</title><rect x="74.2914%" y="1509" width="0.0166%" height="15" fill="rgb(239,42,18)" fg:x="4482" fg:w="1"/><text x="74.5414%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="74.2914%" y="1493" width="0.0166%" height="15" fill="rgb(239,40,7)" fg:x="4482" fg:w="1"/><text x="74.5414%" y="1503.50"></text></g><g><title>CSHA256::Reset (1 samples, 0.02%)</title><rect x="74.3080%" y="1493" width="0.0166%" height="15" fill="rgb(239,11,31)" fg:x="4483" fg:w="1"/><text x="74.5580%" y="1503.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="74.3245%" y="1493" width="0.0166%" height="15" fill="rgb(224,77,40)" fg:x="4484" fg:w="1"/><text x="74.5745%" y="1503.50"></text></g><g><title>ChainstateManager::GetSnapshotBaseBlock (1 samples, 0.02%)</title><rect x="74.3411%" y="1493" width="0.0166%" height="15" fill="rgb(226,15,5)" fg:x="4485" fg:w="1"/><text x="74.5911%" y="1503.50"></text></g><g><title>__clone (90 samples, 1.49%)</title><rect x="74.3577%" y="1493" width="1.4918%" height="15" fill="rgb(254,188,5)" fg:x="4486" fg:w="90"/><text x="74.6077%" y="1503.50"></text></g><g><title>[unknown] (90 samples, 1.49%)</title><rect x="74.3577%" y="1477" width="1.4918%" height="15" fill="rgb(241,148,52)" fg:x="4486" fg:w="90"/><text x="74.6077%" y="1487.50"></text></g><g><title>[unknown] (85 samples, 1.41%)</title><rect x="74.4406%" y="1461" width="1.4089%" height="15" fill="rgb(251,48,36)" fg:x="4491" fg:w="85"/><text x="74.6906%" y="1471.50"></text></g><g><title>[unknown] (83 samples, 1.38%)</title><rect x="74.4737%" y="1445" width="1.3758%" height="15" fill="rgb(243,83,13)" fg:x="4493" fg:w="83"/><text x="74.7237%" y="1455.50"></text></g><g><title>[unknown] (83 samples, 1.38%)</title><rect x="74.4737%" y="1429" width="1.3758%" height="15" fill="rgb(210,105,0)" fg:x="4493" fg:w="83"/><text x="74.7237%" y="1439.50"></text></g><g><title>[unknown] (81 samples, 1.34%)</title><rect x="74.5069%" y="1413" width="1.3426%" height="15" fill="rgb(239,60,36)" fg:x="4495" fg:w="81"/><text x="74.7569%" y="1423.50"></text></g><g><title>[unknown] (80 samples, 1.33%)</title><rect x="74.5235%" y="1397" width="1.3260%" height="15" fill="rgb(210,20,0)" fg:x="4496" fg:w="80"/><text x="74.7735%" y="1407.50"></text></g><g><title>[unknown] (80 samples, 1.33%)</title><rect x="74.5235%" y="1381" width="1.3260%" height="15" fill="rgb(244,26,53)" fg:x="4496" fg:w="80"/><text x="74.7735%" y="1391.50"></text></g><g><title>[unknown] (80 samples, 1.33%)</title><rect x="74.5235%" y="1365" width="1.3260%" height="15" fill="rgb(240,100,49)" fg:x="4496" fg:w="80"/><text x="74.7735%" y="1375.50"></text></g><g><title>[unknown] (77 samples, 1.28%)</title><rect x="74.5732%" y="1349" width="1.2763%" height="15" fill="rgb(250,46,45)" fg:x="4499" fg:w="77"/><text x="74.8232%" y="1359.50"></text></g><g><title>[unknown] (41 samples, 0.68%)</title><rect x="75.1699%" y="1333" width="0.6796%" height="15" fill="rgb(220,181,29)" fg:x="4535" fg:w="41"/><text x="75.4199%" y="1343.50"></text></g><g><title>[unknown] (35 samples, 0.58%)</title><rect x="75.2694%" y="1317" width="0.5801%" height="15" fill="rgb(213,137,33)" fg:x="4541" fg:w="35"/><text x="75.5194%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="75.7666%" y="1301" width="0.0829%" height="15" fill="rgb(213,27,48)" fg:x="4571" fg:w="5"/><text x="76.0166%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.8329%" y="1285" width="0.0166%" height="15" fill="rgb(245,180,39)" fg:x="4575" fg:w="1"/><text x="76.0829%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.8329%" y="1269" width="0.0166%" height="15" fill="rgb(212,158,42)" fg:x="4575" fg:w="1"/><text x="76.0829%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="75.8329%" y="1253" width="0.0166%" height="15" fill="rgb(228,193,18)" fg:x="4575" fg:w="1"/><text x="76.0829%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="75.8495%" y="1493" width="0.0166%" height="15" fill="rgb(245,172,29)" fg:x="4576" fg:w="1"/><text x="76.0995%" y="1503.50"></text></g><g><title>_int_malloc (3 samples, 0.05%)</title><rect x="75.8661%" y="1493" width="0.0497%" height="15" fill="rgb(207,98,24)" fg:x="4577" fg:w="3"/><text x="76.1161%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="75.9158%" y="1493" width="0.0166%" height="15" fill="rgb(249,92,26)" fg:x="4580" fg:w="1"/><text x="76.1658%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="75.9324%" y="1493" width="0.0166%" height="15" fill="rgb(217,176,26)" fg:x="4581" fg:w="1"/><text x="76.1824%" y="1503.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="75.9489%" y="1493" width="0.0166%" height="15" fill="rgb(221,8,39)" fg:x="4582" fg:w="1"/><text x="76.1989%" y="1503.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="75.9655%" y="1493" width="0.0166%" height="15" fill="rgb(208,90,18)" fg:x="4583" fg:w="1"/><text x="76.2155%" y="1503.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (1 samples, 0.02%)</title><rect x="75.9821%" y="1493" width="0.0166%" height="15" fill="rgb(207,202,30)" fg:x="4584" fg:w="1"/><text x="76.2321%" y="1503.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (4 samples, 0.07%)</title><rect x="75.9987%" y="1493" width="0.0663%" height="15" fill="rgb(231,124,22)" fg:x="4585" fg:w="4"/><text x="76.2487%" y="1503.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="76.0650%" y="1493" width="0.0166%" height="15" fill="rgb(206,15,5)" fg:x="4589" fg:w="1"/><text x="76.3150%" y="1503.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="76.0816%" y="1493" width="0.0166%" height="15" fill="rgb(239,16,52)" fg:x="4590" fg:w="1"/><text x="76.3316%" y="1503.50"></text></g><g><title>[[heap]] (109 samples, 1.81%)</title><rect x="74.3080%" y="1509" width="1.8067%" height="15" fill="rgb(245,213,29)" fg:x="4483" fg:w="109"/><text x="74.5580%" y="1519.50">[..</text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="76.0981%" y="1493" width="0.0166%" height="15" fill="rgb(213,203,36)" fg:x="4591" fg:w="1"/><text x="76.3481%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="76.1147%" y="1493" width="0.0166%" height="15" fill="rgb(209,55,18)" fg:x="4592" fg:w="1"/><text x="76.3647%" y="1503.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="76.1313%" y="1493" width="0.0332%" height="15" fill="rgb(207,133,49)" fg:x="4593" fg:w="2"/><text x="76.3813%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="76.1644%" y="1493" width="0.0166%" height="15" fill="rgb(240,33,46)" fg:x="4595" fg:w="1"/><text x="76.4144%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="76.1810%" y="1493" width="0.0166%" height="15" fill="rgb(212,35,2)" fg:x="4596" fg:w="1"/><text x="76.4310%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="76.1976%" y="1493" width="0.0663%" height="15" fill="rgb(231,119,28)" fg:x="4597" fg:w="4"/><text x="76.4476%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="76.2639%" y="1493" width="0.0166%" height="15" fill="rgb(252,178,7)" fg:x="4601" fg:w="1"/><text x="76.5139%" y="1503.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="76.2805%" y="1493" width="0.0166%" height="15" fill="rgb(251,91,4)" fg:x="4602" fg:w="1"/><text x="76.5305%" y="1503.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="76.2970%" y="1493" width="0.0166%" height="15" fill="rgb(233,122,19)" fg:x="4603" fg:w="1"/><text x="76.5470%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="76.3136%" y="1493" width="0.0166%" height="15" fill="rgb(231,208,46)" fg:x="4604" fg:w="1"/><text x="76.5636%" y="1503.50"></text></g><g><title>[[stack]] (14 samples, 0.23%)</title><rect x="76.1147%" y="1509" width="0.2321%" height="15" fill="rgb(243,15,41)" fg:x="4592" fg:w="14"/><text x="76.3647%" y="1519.50"></text></g><g><title>util::SignalInterrupt::operator bool (1 samples, 0.02%)</title><rect x="76.3302%" y="1493" width="0.0166%" height="15" fill="rgb(210,32,43)" fg:x="4605" fg:w="1"/><text x="76.5802%" y="1503.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="76.3468%" y="1493" width="0.0166%" height="15" fill="rgb(222,177,15)" fg:x="4606" fg:w="1"/><text x="76.5968%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (11 samples, 0.18%)</title><rect x="76.3633%" y="1493" width="0.1823%" height="15" fill="rgb(244,121,34)" fg:x="4607" fg:w="11"/><text x="76.6133%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (22 samples, 0.36%)</title><rect x="76.5457%" y="1493" width="0.3647%" height="15" fill="rgb(234,138,4)" fg:x="4618" fg:w="22"/><text x="76.7957%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="76.9103%" y="1493" width="0.0166%" height="15" fill="rgb(240,97,48)" fg:x="4640" fg:w="1"/><text x="77.1603%" y="1503.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="76.9269%" y="1493" width="0.0166%" height="15" fill="rgb(237,65,54)" fg:x="4641" fg:w="1"/><text x="77.1769%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (9 samples, 0.15%)</title><rect x="76.9435%" y="1493" width="0.1492%" height="15" fill="rgb(214,25,24)" fg:x="4642" fg:w="9"/><text x="77.1935%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="77.0927%" y="1493" width="0.0166%" height="15" fill="rgb(213,5,3)" fg:x="4651" fg:w="1"/><text x="77.3427%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="77.1092%" y="1493" width="0.0166%" height="15" fill="rgb(219,81,29)" fg:x="4652" fg:w="1"/><text x="77.3592%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="77.1258%" y="1493" width="0.0166%" height="15" fill="rgb(220,43,48)" fg:x="4653" fg:w="1"/><text x="77.3758%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="77.1258%" y="1477" width="0.0166%" height="15" fill="rgb(239,157,2)" fg:x="4653" fg:w="1"/><text x="77.3758%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="77.1424%" y="1493" width="0.0166%" height="15" fill="rgb(213,104,43)" fg:x="4654" fg:w="1"/><text x="77.3924%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1 samples, 0.02%)</title><rect x="77.1590%" y="1493" width="0.0166%" height="15" fill="rgb(237,84,9)" fg:x="4655" fg:w="1"/><text x="77.4090%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="77.1755%" y="1493" width="0.0332%" height="15" fill="rgb(252,6,33)" fg:x="4656" fg:w="2"/><text x="77.4255%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::Valid (2 samples, 0.03%)</title><rect x="77.2087%" y="1493" width="0.0332%" height="15" fill="rgb(251,172,22)" fg:x="4658" fg:w="2"/><text x="77.4587%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="77.2418%" y="1493" width="0.0166%" height="15" fill="rgb(244,91,53)" fg:x="4660" fg:w="1"/><text x="77.4918%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::value (4 samples, 0.07%)</title><rect x="77.2584%" y="1493" width="0.0663%" height="15" fill="rgb(219,29,30)" fg:x="4661" fg:w="4"/><text x="77.5084%" y="1503.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.03%)</title><rect x="77.3247%" y="1493" width="0.0332%" height="15" fill="rgb(213,3,15)" fg:x="4665" fg:w="2"/><text x="77.5747%" y="1503.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="77.3413%" y="1477" width="0.0166%" height="15" fill="rgb(208,25,28)" fg:x="4666" fg:w="1"/><text x="77.5913%" y="1487.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="77.3413%" y="1461" width="0.0166%" height="15" fill="rgb(252,144,25)" fg:x="4666" fg:w="1"/><text x="77.5913%" y="1471.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="77.3579%" y="1493" width="0.0166%" height="15" fill="rgb(226,220,25)" fg:x="4667" fg:w="1"/><text x="77.6079%" y="1503.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="77.3744%" y="1493" width="0.0166%" height="15" fill="rgb(212,131,28)" fg:x="4668" fg:w="1"/><text x="77.6244%" y="1503.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="77.3910%" y="1493" width="0.0166%" height="15" fill="rgb(219,143,52)" fg:x="4669" fg:w="1"/><text x="77.6410%" y="1503.50"></text></g><g><title>leveldb::Hash (6 samples, 0.10%)</title><rect x="77.4076%" y="1493" width="0.0995%" height="15" fill="rgb(215,56,7)" fg:x="4670" fg:w="6"/><text x="77.6576%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.25%)</title><rect x="77.5070%" y="1493" width="0.2486%" height="15" fill="rgb(239,59,51)" fg:x="4676" fg:w="15"/><text x="77.7570%" y="1503.50"></text></g><g><title>leveldb::MemTableIterator::Valid (1 samples, 0.02%)</title><rect x="77.7557%" y="1493" width="0.0166%" height="15" fill="rgb(209,215,4)" fg:x="4691" fg:w="1"/><text x="78.0057%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="77.7723%" y="1493" width="0.0166%" height="15" fill="rgb(221,118,39)" fg:x="4692" fg:w="1"/><text x="78.0223%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="77.7888%" y="1493" width="0.0166%" height="15" fill="rgb(236,6,44)" fg:x="4693" fg:w="1"/><text x="78.0388%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::FileSize (2 samples, 0.03%)</title><rect x="77.8054%" y="1493" width="0.0332%" height="15" fill="rgb(216,122,9)" fg:x="4694" fg:w="2"/><text x="78.0554%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (2 samples, 0.03%)</title><rect x="77.8386%" y="1493" width="0.0332%" height="15" fill="rgb(244,134,42)" fg:x="4696" fg:w="2"/><text x="78.0886%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.02%)</title><rect x="77.8717%" y="1493" width="0.0166%" height="15" fill="rgb(209,189,35)" fg:x="4698" fg:w="1"/><text x="78.1217%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="77.8717%" y="1477" width="0.0166%" height="15" fill="rgb(250,47,36)" fg:x="4698" fg:w="1"/><text x="78.1217%" y="1487.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="77.8883%" y="1493" width="0.0166%" height="15" fill="rgb(252,112,4)" fg:x="4699" fg:w="1"/><text x="78.1383%" y="1503.50"></text></g><g><title>memcmp@plt (5 samples, 0.08%)</title><rect x="77.9049%" y="1493" width="0.0829%" height="15" fill="rgb(221,79,51)" fg:x="4700" fg:w="5"/><text x="78.1549%" y="1503.50"></text></g><g><title>memcpy@plt (5 samples, 0.08%)</title><rect x="77.9877%" y="1493" width="0.0829%" height="15" fill="rgb(232,65,53)" fg:x="4705" fg:w="5"/><text x="78.2377%" y="1503.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="78.0706%" y="1493" width="0.0166%" height="15" fill="rgb(211,37,7)" fg:x="4710" fg:w="1"/><text x="78.3206%" y="1503.50"></text></g><g><title>operator new[] (1 samples, 0.02%)</title><rect x="78.0872%" y="1493" width="0.0166%" height="15" fill="rgb(234,221,18)" fg:x="4711" fg:w="1"/><text x="78.3372%" y="1503.50"></text></g><g><title>[anon] (107 samples, 1.77%)</title><rect x="76.3468%" y="1509" width="1.7736%" height="15" fill="rgb(220,158,26)" fg:x="4606" fg:w="107"/><text x="76.5968%" y="1519.50">[..</text></g><g><title>value (1 samples, 0.02%)</title><rect x="78.1038%" y="1493" width="0.0166%" height="15" fill="rgb(220,70,6)" fg:x="4712" fg:w="1"/><text x="78.3538%" y="1503.50"></text></g><g><title>leveldb::IteratorWrapper::value (1 samples, 0.02%)</title><rect x="78.1038%" y="1477" width="0.0166%" height="15" fill="rgb(250,39,48)" fg:x="4712" fg:w="1"/><text x="78.3538%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="78.1535%" y="1493" width="0.0663%" height="15" fill="rgb(206,40,27)" fg:x="4715" fg:w="4"/><text x="78.4035%" y="1503.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="78.1701%" y="1477" width="0.0497%" height="15" fill="rgb(247,80,36)" fg:x="4716" fg:w="3"/><text x="78.4201%" y="1487.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="78.1701%" y="1461" width="0.0497%" height="15" fill="rgb(222,9,20)" fg:x="4716" fg:w="3"/><text x="78.4201%" y="1471.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="78.1866%" y="1445" width="0.0332%" height="15" fill="rgb(217,26,45)" fg:x="4717" fg:w="2"/><text x="78.4366%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.2032%" y="1429" width="0.0166%" height="15" fill="rgb(221,67,14)" fg:x="4718" fg:w="1"/><text x="78.4532%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.2032%" y="1413" width="0.0166%" height="15" fill="rgb(248,100,24)" fg:x="4718" fg:w="1"/><text x="78.4532%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.2032%" y="1397" width="0.0166%" height="15" fill="rgb(230,187,16)" fg:x="4718" fg:w="1"/><text x="78.4532%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.2032%" y="1381" width="0.0166%" height="15" fill="rgb(205,108,13)" fg:x="4718" fg:w="1"/><text x="78.4532%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.2032%" y="1365" width="0.0166%" height="15" fill="rgb(235,71,51)" fg:x="4718" fg:w="1"/><text x="78.4532%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.2032%" y="1349" width="0.0166%" height="15" fill="rgb(251,172,48)" fg:x="4718" fg:w="1"/><text x="78.4532%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.2032%" y="1333" width="0.0166%" height="15" fill="rgb(240,96,49)" fg:x="4718" fg:w="1"/><text x="78.4532%" y="1343.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.07%)</title><rect x="78.2198%" y="1493" width="0.0663%" height="15" fill="rgb(235,46,36)" fg:x="4719" fg:w="4"/><text x="78.4698%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="78.2861%" y="1493" width="0.0497%" height="15" fill="rgb(244,3,49)" fg:x="4723" fg:w="3"/><text x="78.5361%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="78.3358%" y="1493" width="0.0166%" height="15" fill="rgb(206,78,54)" fg:x="4726" fg:w="1"/><text x="78.5858%" y="1503.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="78.3524%" y="1493" width="0.0166%" height="15" fill="rgb(208,85,42)" fg:x="4727" fg:w="1"/><text x="78.6024%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="78.3690%" y="1493" width="0.0166%" height="15" fill="rgb(219,196,21)" fg:x="4728" fg:w="1"/><text x="78.6190%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (3 samples, 0.05%)</title><rect x="78.3855%" y="1493" width="0.0497%" height="15" fill="rgb(238,19,9)" fg:x="4729" fg:w="3"/><text x="78.6355%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="78.4353%" y="1493" width="0.0332%" height="15" fill="rgb(206,86,13)" fg:x="4732" fg:w="2"/><text x="78.6853%" y="1503.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="78.4684%" y="1493" width="0.0166%" height="15" fill="rgb(214,123,40)" fg:x="4734" fg:w="1"/><text x="78.7184%" y="1503.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (1 samples, 0.02%)</title><rect x="78.4684%" y="1477" width="0.0166%" height="15" fill="rgb(243,53,5)" fg:x="4734" fg:w="1"/><text x="78.7184%" y="1487.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="78.4684%" y="1461" width="0.0166%" height="15" fill="rgb(254,186,31)" fg:x="4734" fg:w="1"/><text x="78.7184%" y="1471.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="78.4850%" y="1493" width="0.0497%" height="15" fill="rgb(221,216,25)" fg:x="4735" fg:w="3"/><text x="78.7350%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="78.5347%" y="1493" width="0.0166%" height="15" fill="rgb(248,107,42)" fg:x="4738" fg:w="1"/><text x="78.7847%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="78.5513%" y="1493" width="0.0166%" height="15" fill="rgb(221,85,43)" fg:x="4739" fg:w="1"/><text x="78.8013%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="78.5679%" y="1493" width="0.0166%" height="15" fill="rgb(225,34,24)" fg:x="4740" fg:w="1"/><text x="78.8179%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="78.5845%" y="1493" width="0.0166%" height="15" fill="rgb(211,119,1)" fg:x="4741" fg:w="1"/><text x="78.8345%" y="1503.50"></text></g><g><title>leveldb::Hash (2 samples, 0.03%)</title><rect x="78.6010%" y="1493" width="0.0332%" height="15" fill="rgb(254,216,46)" fg:x="4742" fg:w="2"/><text x="78.8510%" y="1503.50"></text></g><g><title>leveldb::MemTableIterator::Next (1 samples, 0.02%)</title><rect x="78.6342%" y="1493" width="0.0166%" height="15" fill="rgb(238,11,38)" fg:x="4744" fg:w="1"/><text x="78.8842%" y="1503.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="78.6508%" y="1493" width="0.0332%" height="15" fill="rgb(233,50,15)" fg:x="4745" fg:w="2"/><text x="78.9008%" y="1503.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="78.6839%" y="1493" width="0.0166%" height="15" fill="rgb(217,181,29)" fg:x="4747" fg:w="1"/><text x="78.9339%" y="1503.50"></text></g><g><title>[unknown] (36 samples, 0.60%)</title><rect x="78.1203%" y="1509" width="0.5967%" height="15" fill="rgb(214,56,3)" fg:x="4713" fg:w="36"/><text x="78.3703%" y="1519.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="78.7005%" y="1493" width="0.0166%" height="15" fill="rgb(230,69,45)" fg:x="4748" fg:w="1"/><text x="78.9505%" y="1503.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="78.7171%" y="1477" width="0.1658%" height="15" fill="rgb(224,201,50)" fg:x="4749" fg:w="10"/><text x="78.9671%" y="1487.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="78.7171%" y="1461" width="0.1658%" height="15" fill="rgb(217,228,18)" fg:x="4749" fg:w="10"/><text x="78.9671%" y="1471.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="78.7171%" y="1445" width="0.1658%" height="15" fill="rgb(239,33,44)" fg:x="4749" fg:w="10"/><text x="78.9671%" y="1455.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="78.7502%" y="1429" width="0.1326%" height="15" fill="rgb(248,210,23)" fg:x="4751" fg:w="8"/><text x="79.0002%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="78.8662%" y="1413" width="0.0166%" height="15" fill="rgb(253,135,8)" fg:x="4758" fg:w="1"/><text x="79.1162%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="78.8828%" y="1397" width="0.0166%" height="15" fill="rgb(217,98,21)" fg:x="4759" fg:w="1"/><text x="79.1328%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="78.8994%" y="1397" width="0.0166%" height="15" fill="rgb(253,130,21)" fg:x="4760" fg:w="1"/><text x="79.1494%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (10 samples, 0.17%)</title><rect x="78.9160%" y="1397" width="0.1658%" height="15" fill="rgb(207,81,54)" fg:x="4761" fg:w="10"/><text x="79.1660%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="79.0817%" y="1397" width="0.0166%" height="15" fill="rgb(232,48,33)" fg:x="4771" fg:w="1"/><text x="79.3317%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (1 samples, 0.02%)</title><rect x="79.0983%" y="1397" width="0.0166%" height="15" fill="rgb(211,9,35)" fg:x="4772" fg:w="1"/><text x="79.3483%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="79.1149%" y="1397" width="0.0166%" height="15" fill="rgb(205,152,21)" fg:x="4773" fg:w="1"/><text x="79.3649%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="79.1149%" y="1381" width="0.0166%" height="15" fill="rgb(249,21,27)" fg:x="4773" fg:w="1"/><text x="79.3649%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="79.1149%" y="1365" width="0.0166%" height="15" fill="rgb(252,29,24)" fg:x="4773" fg:w="1"/><text x="79.3649%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="79.1149%" y="1349" width="0.0166%" height="15" fill="rgb(230,130,50)" fg:x="4773" fg:w="1"/><text x="79.3649%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="79.1149%" y="1333" width="0.0166%" height="15" fill="rgb(239,144,14)" fg:x="4773" fg:w="1"/><text x="79.3649%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (4 samples, 0.07%)</title><rect x="79.1314%" y="1397" width="0.0663%" height="15" fill="rgb(227,111,50)" fg:x="4774" fg:w="4"/><text x="79.3814%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="79.1977%" y="1397" width="0.0166%" height="15" fill="rgb(254,84,20)" fg:x="4778" fg:w="1"/><text x="79.4477%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1 samples, 0.02%)</title><rect x="79.2143%" y="1397" width="0.0166%" height="15" fill="rgb(232,90,48)" fg:x="4779" fg:w="1"/><text x="79.4643%" y="1407.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (2 samples, 0.03%)</title><rect x="79.2309%" y="1397" width="0.0332%" height="15" fill="rgb(253,63,47)" fg:x="4780" fg:w="2"/><text x="79.4809%" y="1407.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="79.2475%" y="1381" width="0.0166%" height="15" fill="rgb(251,146,35)" fg:x="4781" fg:w="1"/><text x="79.4975%" y="1391.50"></text></g><g><title>[[jbd2]] (2 samples, 0.03%)</title><rect x="79.2806%" y="1205" width="0.0332%" height="15" fill="rgb(229,192,35)" fg:x="4783" fg:w="2"/><text x="79.5306%" y="1215.50"></text></g><g><title>[[jbd2]] (3 samples, 0.05%)</title><rect x="79.2806%" y="1221" width="0.0497%" height="15" fill="rgb(225,68,9)" fg:x="4783" fg:w="3"/><text x="79.5306%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.3138%" y="1205" width="0.0166%" height="15" fill="rgb(214,97,34)" fg:x="4785" fg:w="1"/><text x="79.5638%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (21 samples, 0.35%)</title><rect x="79.2640%" y="1381" width="0.3481%" height="15" fill="rgb(253,31,26)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1391.50"></text></g><g><title>__unlink (21 samples, 0.35%)</title><rect x="79.2640%" y="1365" width="0.3481%" height="15" fill="rgb(225,151,47)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1375.50"></text></g><g><title>[unknown] (21 samples, 0.35%)</title><rect x="79.2640%" y="1349" width="0.3481%" height="15" fill="rgb(206,185,9)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1359.50"></text></g><g><title>[unknown] (21 samples, 0.35%)</title><rect x="79.2640%" y="1333" width="0.3481%" height="15" fill="rgb(249,65,17)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1343.50"></text></g><g><title>[unknown] (21 samples, 0.35%)</title><rect x="79.2640%" y="1317" width="0.3481%" height="15" fill="rgb(220,110,10)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1327.50"></text></g><g><title>[unknown] (21 samples, 0.35%)</title><rect x="79.2640%" y="1301" width="0.3481%" height="15" fill="rgb(222,198,49)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1311.50"></text></g><g><title>[unknown] (21 samples, 0.35%)</title><rect x="79.2640%" y="1285" width="0.3481%" height="15" fill="rgb(239,81,13)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1295.50"></text></g><g><title>[[ext4]] (21 samples, 0.35%)</title><rect x="79.2640%" y="1269" width="0.3481%" height="15" fill="rgb(216,128,11)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1279.50"></text></g><g><title>[unknown] (21 samples, 0.35%)</title><rect x="79.2640%" y="1253" width="0.3481%" height="15" fill="rgb(247,156,8)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1263.50"></text></g><g><title>[unknown] (21 samples, 0.35%)</title><rect x="79.2640%" y="1237" width="0.3481%" height="15" fill="rgb(219,173,1)" fg:x="4782" fg:w="21"/><text x="79.5140%" y="1247.50"></text></g><g><title>[unknown] (17 samples, 0.28%)</title><rect x="79.3303%" y="1221" width="0.2818%" height="15" fill="rgb(227,42,24)" fg:x="4786" fg:w="17"/><text x="79.5803%" y="1231.50"></text></g><g><title>[unknown] (13 samples, 0.22%)</title><rect x="79.3967%" y="1205" width="0.2155%" height="15" fill="rgb(253,219,50)" fg:x="4790" fg:w="13"/><text x="79.6467%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="79.4961%" y="1189" width="0.1160%" height="15" fill="rgb(215,191,54)" fg:x="4796" fg:w="7"/><text x="79.7461%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="79.5293%" y="1173" width="0.0829%" height="15" fill="rgb(238,83,12)" fg:x="4798" fg:w="5"/><text x="79.7793%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.5624%" y="1157" width="0.0497%" height="15" fill="rgb(205,124,9)" fg:x="4800" fg:w="3"/><text x="79.8124%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="79.5790%" y="1141" width="0.0332%" height="15" fill="rgb(253,174,7)" fg:x="4801" fg:w="2"/><text x="79.8290%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.5956%" y="1125" width="0.0166%" height="15" fill="rgb(206,134,49)" fg:x="4802" fg:w="1"/><text x="79.8456%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.5956%" y="1109" width="0.0166%" height="15" fill="rgb(221,89,20)" fg:x="4802" fg:w="1"/><text x="79.8456%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.5956%" y="1093" width="0.0166%" height="15" fill="rgb(240,205,13)" fg:x="4802" fg:w="1"/><text x="79.8456%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.5956%" y="1077" width="0.0166%" height="15" fill="rgb(237,174,32)" fg:x="4802" fg:w="1"/><text x="79.8456%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.5956%" y="1061" width="0.0166%" height="15" fill="rgb(226,12,15)" fg:x="4802" fg:w="1"/><text x="79.8456%" y="1071.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (27 samples, 0.45%)</title><rect x="79.2640%" y="1397" width="0.4475%" height="15" fill="rgb(245,160,52)" fg:x="4782" fg:w="27"/><text x="79.5140%" y="1407.50"></text></g><g><title>leveldb::TableCache::Evict (6 samples, 0.10%)</title><rect x="79.6121%" y="1381" width="0.0995%" height="15" fill="rgb(253,80,21)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1391.50"></text></g><g><title>Erase (6 samples, 0.10%)</title><rect x="79.6121%" y="1365" width="0.0995%" height="15" fill="rgb(231,225,22)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (6 samples, 0.10%)</title><rect x="79.6121%" y="1349" width="0.0995%" height="15" fill="rgb(253,185,12)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (6 samples, 0.10%)</title><rect x="79.6121%" y="1333" width="0.0995%" height="15" fill="rgb(234,197,21)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (6 samples, 0.10%)</title><rect x="79.6121%" y="1317" width="0.0995%" height="15" fill="rgb(210,47,30)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1327.50"></text></g><g><title>leveldb::DeleteEntry (6 samples, 0.10%)</title><rect x="79.6121%" y="1301" width="0.0995%" height="15" fill="rgb(246,139,27)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1311.50"></text></g><g><title>~PosixMmapReadableFile (6 samples, 0.10%)</title><rect x="79.6121%" y="1285" width="0.0995%" height="15" fill="rgb(226,130,16)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (6 samples, 0.10%)</title><rect x="79.6121%" y="1269" width="0.0995%" height="15" fill="rgb(237,208,20)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1279.50"></text></g><g><title>__munmap (6 samples, 0.10%)</title><rect x="79.6121%" y="1253" width="0.0995%" height="15" fill="rgb(245,186,28)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1263.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1237" width="0.0995%" height="15" fill="rgb(238,105,39)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1221" width="0.0995%" height="15" fill="rgb(253,228,11)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1205" width="0.0995%" height="15" fill="rgb(224,136,38)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1189" width="0.0995%" height="15" fill="rgb(211,3,25)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1173" width="0.0995%" height="15" fill="rgb(238,66,34)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1183.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1157" width="0.0995%" height="15" fill="rgb(223,188,11)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1141" width="0.0995%" height="15" fill="rgb(221,10,35)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1125" width="0.0995%" height="15" fill="rgb(223,18,44)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="79.6121%" y="1109" width="0.0995%" height="15" fill="rgb(220,97,41)" fg:x="4803" fg:w="6"/><text x="79.8621%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.6619%" y="1093" width="0.0497%" height="15" fill="rgb(206,95,45)" fg:x="4806" fg:w="3"/><text x="79.9119%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="79.6784%" y="1077" width="0.0332%" height="15" fill="rgb(209,96,13)" fg:x="4807" fg:w="2"/><text x="79.9284%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="79.7447%" y="1269" width="0.0663%" height="15" fill="rgb(237,39,34)" fg:x="4811" fg:w="4"/><text x="79.9947%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="79.7447%" y="1253" width="0.0663%" height="15" fill="rgb(213,49,47)" fg:x="4811" fg:w="4"/><text x="79.9947%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="79.7447%" y="1237" width="0.0663%" height="15" fill="rgb(205,107,27)" fg:x="4811" fg:w="4"/><text x="79.9947%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="79.7447%" y="1221" width="0.0663%" height="15" fill="rgb(212,142,9)" fg:x="4811" fg:w="4"/><text x="79.9947%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1205" width="0.0497%" height="15" fill="rgb(226,182,0)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1189" width="0.0497%" height="15" fill="rgb(231,3,53)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1173" width="0.0497%" height="15" fill="rgb(246,111,28)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1157" width="0.0497%" height="15" fill="rgb(254,183,7)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1141" width="0.0497%" height="15" fill="rgb(247,177,28)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1125" width="0.0497%" height="15" fill="rgb(244,43,1)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1109" width="0.0497%" height="15" fill="rgb(207,2,35)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="79.7613%" y="1093" width="0.0497%" height="15" fill="rgb(213,83,22)" fg:x="4812" fg:w="3"/><text x="80.0113%" y="1103.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (5 samples, 0.08%)</title><rect x="79.7447%" y="1285" width="0.0829%" height="15" fill="rgb(246,212,13)" fg:x="4811" fg:w="5"/><text x="79.9947%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="79.8110%" y="1269" width="0.0166%" height="15" fill="rgb(213,127,46)" fg:x="4815" fg:w="1"/><text x="80.0610%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="79.8110%" y="1253" width="0.0166%" height="15" fill="rgb(219,215,39)" fg:x="4815" fg:w="1"/><text x="80.0610%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="79.8110%" y="1237" width="0.0166%" height="15" fill="rgb(227,99,17)" fg:x="4815" fg:w="1"/><text x="80.0610%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="79.8110%" y="1221" width="0.0166%" height="15" fill="rgb(208,155,18)" fg:x="4815" fg:w="1"/><text x="80.0610%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="79.8110%" y="1205" width="0.0166%" height="15" fill="rgb(223,204,38)" fg:x="4815" fg:w="1"/><text x="80.0610%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="79.8110%" y="1189" width="0.0166%" height="15" fill="rgb(212,114,21)" fg:x="4815" fg:w="1"/><text x="80.0610%" y="1199.50"></text></g><g><title>leveldb::operator== (2 samples, 0.03%)</title><rect x="79.8276%" y="1269" width="0.0332%" height="15" fill="rgb(250,74,13)" fg:x="4816" fg:w="2"/><text x="80.0776%" y="1279.50"></text></g><g><title>leveldb::BlockBuilder::Add (3 samples, 0.05%)</title><rect x="79.8276%" y="1285" width="0.0497%" height="15" fill="rgb(234,7,1)" fg:x="4816" fg:w="3"/><text x="80.0776%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="79.8608%" y="1269" width="0.0166%" height="15" fill="rgb(207,138,31)" fg:x="4818" fg:w="1"/><text x="80.1108%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="79.8608%" y="1253" width="0.0166%" height="15" fill="rgb(215,186,42)" fg:x="4818" fg:w="1"/><text x="80.1108%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="79.8608%" y="1237" width="0.0166%" height="15" fill="rgb(229,205,49)" fg:x="4818" fg:w="1"/><text x="80.1108%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="79.8608%" y="1221" width="0.0166%" height="15" fill="rgb(216,156,32)" fg:x="4818" fg:w="1"/><text x="80.1108%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="79.8608%" y="1205" width="0.0166%" height="15" fill="rgb(238,7,21)" fg:x="4818" fg:w="1"/><text x="80.1108%" y="1215.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.03%)</title><rect x="79.8773%" y="1253" width="0.0332%" height="15" fill="rgb(249,190,22)" fg:x="4819" fg:w="2"/><text x="80.1273%" y="1263.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (2 samples, 0.03%)</title><rect x="79.9105%" y="1253" width="0.0332%" height="15" fill="rgb(253,51,31)" fg:x="4821" fg:w="2"/><text x="80.1605%" y="1263.50"></text></g><g><title>Next (14 samples, 0.23%)</title><rect x="79.7447%" y="1317" width="0.2321%" height="15" fill="rgb(237,90,54)" fg:x="4811" fg:w="14"/><text x="79.9947%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (14 samples, 0.23%)</title><rect x="79.7447%" y="1301" width="0.2321%" height="15" fill="rgb(250,214,33)" fg:x="4811" fg:w="14"/><text x="79.9947%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (6 samples, 0.10%)</title><rect x="79.8773%" y="1285" width="0.0995%" height="15" fill="rgb(237,10,49)" fg:x="4819" fg:w="6"/><text x="80.1273%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (6 samples, 0.10%)</title><rect x="79.8773%" y="1269" width="0.0995%" height="15" fill="rgb(241,56,36)" fg:x="4819" fg:w="6"/><text x="80.1273%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.03%)</title><rect x="79.9436%" y="1253" width="0.0332%" height="15" fill="rgb(227,164,12)" fg:x="4823" fg:w="2"/><text x="80.1936%" y="1263.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="79.9768%" y="1253" width="0.0332%" height="15" fill="rgb(249,149,35)" fg:x="4825" fg:w="2"/><text x="80.2268%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="80.0099%" y="1237" width="0.0166%" height="15" fill="rgb(238,227,50)" fg:x="4827" fg:w="1"/><text x="80.2599%" y="1247.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="80.0099%" y="1221" width="0.0166%" height="15" fill="rgb(235,102,45)" fg:x="4827" fg:w="1"/><text x="80.2599%" y="1231.50"></text></g><g><title>leveldb::crc32c::Unmask (2 samples, 0.03%)</title><rect x="80.0265%" y="1237" width="0.0332%" height="15" fill="rgb(211,10,38)" fg:x="4828" fg:w="2"/><text x="80.2765%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="80.0265%" y="1221" width="0.0332%" height="15" fill="rgb(219,77,48)" fg:x="4828" fg:w="2"/><text x="80.2765%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="80.0265%" y="1205" width="0.0332%" height="15" fill="rgb(246,6,15)" fg:x="4828" fg:w="2"/><text x="80.2765%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0431%" y="1189" width="0.0166%" height="15" fill="rgb(207,220,2)" fg:x="4829" fg:w="1"/><text x="80.2931%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0431%" y="1173" width="0.0166%" height="15" fill="rgb(242,48,14)" fg:x="4829" fg:w="1"/><text x="80.2931%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0431%" y="1157" width="0.0166%" height="15" fill="rgb(218,19,27)" fg:x="4829" fg:w="1"/><text x="80.2931%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0431%" y="1141" width="0.0166%" height="15" fill="rgb(228,0,35)" fg:x="4829" fg:w="1"/><text x="80.2931%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0431%" y="1125" width="0.0166%" height="15" fill="rgb(244,142,54)" fg:x="4829" fg:w="1"/><text x="80.2931%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0431%" y="1109" width="0.0166%" height="15" fill="rgb(243,217,40)" fg:x="4829" fg:w="1"/><text x="80.2931%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0431%" y="1093" width="0.0166%" height="15" fill="rgb(207,114,16)" fg:x="4829" fg:w="1"/><text x="80.2931%" y="1103.50"></text></g><g><title>SkipEmptyDataBlocksForward (17 samples, 0.28%)</title><rect x="79.9768%" y="1317" width="0.2818%" height="15" fill="rgb(224,33,25)" fg:x="4825" fg:w="17"/><text x="80.2268%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (17 samples, 0.28%)</title><rect x="79.9768%" y="1301" width="0.2818%" height="15" fill="rgb(230,93,54)" fg:x="4825" fg:w="17"/><text x="80.2268%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (17 samples, 0.28%)</title><rect x="79.9768%" y="1285" width="0.2818%" height="15" fill="rgb(224,56,24)" fg:x="4825" fg:w="17"/><text x="80.2268%" y="1295.50"></text></g><g><title>leveldb::Table::BlockReader (17 samples, 0.28%)</title><rect x="79.9768%" y="1269" width="0.2818%" height="15" fill="rgb(235,189,50)" fg:x="4825" fg:w="17"/><text x="80.2268%" y="1279.50"></text></g><g><title>leveldb::ReadBlock (15 samples, 0.25%)</title><rect x="80.0099%" y="1253" width="0.2486%" height="15" fill="rgb(242,173,8)" fg:x="4827" fg:w="15"/><text x="80.2599%" y="1263.50"></text></g><g><title>leveldb::crc32c::Value (12 samples, 0.20%)</title><rect x="80.0597%" y="1237" width="0.1989%" height="15" fill="rgb(209,206,10)" fg:x="4830" fg:w="12"/><text x="80.3097%" y="1247.50"></text></g><g><title>crc32c::ExtendSse42 (12 samples, 0.20%)</title><rect x="80.0597%" y="1221" width="0.1989%" height="15" fill="rgb(213,182,44)" fg:x="4830" fg:w="12"/><text x="80.3097%" y="1231.50"></text></g><g><title>_mm_crc32_u64 (8 samples, 0.13%)</title><rect x="80.1260%" y="1205" width="0.1326%" height="15" fill="rgb(243,51,15)" fg:x="4834" fg:w="8"/><text x="80.3760%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="80.2586%" y="1317" width="0.0166%" height="15" fill="rgb(241,13,14)" fg:x="4842" fg:w="1"/><text x="80.5086%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="80.2752%" y="1301" width="0.0166%" height="15" fill="rgb(239,147,24)" fg:x="4843" fg:w="1"/><text x="80.5252%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="80.2752%" y="1285" width="0.0166%" height="15" fill="rgb(223,129,16)" fg:x="4843" fg:w="1"/><text x="80.5252%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="80.2752%" y="1269" width="0.0166%" height="15" fill="rgb(209,169,13)" fg:x="4843" fg:w="1"/><text x="80.5252%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (2 samples, 0.03%)</title><rect x="80.2752%" y="1317" width="0.0332%" height="15" fill="rgb(235,159,41)" fg:x="4843" fg:w="2"/><text x="80.5252%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::SeekToFirst (1 samples, 0.02%)</title><rect x="80.2917%" y="1301" width="0.0166%" height="15" fill="rgb(223,219,48)" fg:x="4844" fg:w="1"/><text x="80.5417%" y="1311.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="80.2917%" y="1285" width="0.0166%" height="15" fill="rgb(236,80,13)" fg:x="4844" fg:w="1"/><text x="80.5417%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="80.2917%" y="1269" width="0.0166%" height="15" fill="rgb(213,5,6)" fg:x="4844" fg:w="1"/><text x="80.5417%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="80.2917%" y="1253" width="0.0166%" height="15" fill="rgb(205,59,21)" fg:x="4844" fg:w="1"/><text x="80.5417%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="80.2917%" y="1237" width="0.0166%" height="15" fill="rgb(247,137,35)" fg:x="4844" fg:w="1"/><text x="80.5417%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="80.3083%" y="1317" width="0.0166%" height="15" fill="rgb(242,208,28)" fg:x="4845" fg:w="1"/><text x="80.5583%" y="1327.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.02%)</title><rect x="80.3249%" y="1317" width="0.0166%" height="15" fill="rgb(245,62,25)" fg:x="4846" fg:w="1"/><text x="80.5749%" y="1327.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="80.3415%" y="1301" width="0.0166%" height="15" fill="rgb(233,99,54)" fg:x="4847" fg:w="1"/><text x="80.5915%" y="1311.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="80.3580%" y="1301" width="0.0166%" height="15" fill="rgb(213,10,37)" fg:x="4848" fg:w="1"/><text x="80.6080%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (4 samples, 0.07%)</title><rect x="80.3415%" y="1317" width="0.0663%" height="15" fill="rgb(235,143,30)" fg:x="4847" fg:w="4"/><text x="80.5915%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.03%)</title><rect x="80.3746%" y="1301" width="0.0332%" height="15" fill="rgb(250,146,33)" fg:x="4849" fg:w="2"/><text x="80.6246%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2 samples, 0.03%)</title><rect x="80.3746%" y="1285" width="0.0332%" height="15" fill="rgb(226,198,42)" fg:x="4849" fg:w="2"/><text x="80.6246%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="80.3912%" y="1269" width="0.0166%" height="15" fill="rgb(222,55,6)" fg:x="4850" fg:w="1"/><text x="80.6412%" y="1279.50"></text></g><g><title>Next (43 samples, 0.71%)</title><rect x="79.7447%" y="1349" width="0.7127%" height="15" fill="rgb(213,224,31)" fg:x="4811" fg:w="43"/><text x="79.9947%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (43 samples, 0.71%)</title><rect x="79.7447%" y="1333" width="0.7127%" height="15" fill="rgb(226,103,35)" fg:x="4811" fg:w="43"/><text x="79.9947%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (3 samples, 0.05%)</title><rect x="80.4078%" y="1317" width="0.0497%" height="15" fill="rgb(205,66,45)" fg:x="4851" fg:w="3"/><text x="80.6578%" y="1327.50"></text></g><g><title>SetDataIterator (1 samples, 0.02%)</title><rect x="80.4575%" y="1301" width="0.0166%" height="15" fill="rgb(226,51,42)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Set (1 samples, 0.02%)</title><rect x="80.4575%" y="1285" width="0.0166%" height="15" fill="rgb(206,69,1)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="80.4575%" y="1269" width="0.0166%" height="15" fill="rgb(213,228,47)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="80.4575%" y="1253" width="0.0166%" height="15" fill="rgb(224,204,18)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1263.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="80.4575%" y="1237" width="0.0166%" height="15" fill="rgb(253,187,47)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1247.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="80.4575%" y="1221" width="0.0166%" height="15" fill="rgb(232,61,2)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1231.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (1 samples, 0.02%)</title><rect x="80.4575%" y="1205" width="0.0166%" height="15" fill="rgb(213,132,35)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1215.50"></text></g><g><title>DeleteBlock (1 samples, 0.02%)</title><rect x="80.4575%" y="1189" width="0.0166%" height="15" fill="rgb(247,33,21)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1199.50"></text></g><g><title>leveldb::DeleteBlock (1 samples, 0.02%)</title><rect x="80.4575%" y="1173" width="0.0166%" height="15" fill="rgb(233,71,46)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.02%)</title><rect x="80.4575%" y="1157" width="0.0166%" height="15" fill="rgb(222,173,43)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="80.4575%" y="1141" width="0.0166%" height="15" fill="rgb(249,218,47)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="80.4575%" y="1125" width="0.0166%" height="15" fill="rgb(254,185,48)" fg:x="4854" fg:w="1"/><text x="80.7075%" y="1135.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="80.4741%" y="1285" width="0.0166%" height="15" fill="rgb(252,165,50)" fg:x="4855" fg:w="1"/><text x="80.7241%" y="1295.50"></text></g><g><title>leveldb::crc32c::Unmask (1 samples, 0.02%)</title><rect x="80.4906%" y="1269" width="0.0166%" height="15" fill="rgb(206,219,6)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1253" width="0.0166%" height="15" fill="rgb(212,212,45)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1237" width="0.0166%" height="15" fill="rgb(221,31,9)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1221" width="0.0166%" height="15" fill="rgb(234,198,39)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1205" width="0.0166%" height="15" fill="rgb(252,145,46)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1189" width="0.0166%" height="15" fill="rgb(237,149,0)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1173" width="0.0166%" height="15" fill="rgb(229,65,5)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1157" width="0.0166%" height="15" fill="rgb(235,60,36)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1141" width="0.0166%" height="15" fill="rgb(222,47,18)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1125" width="0.0166%" height="15" fill="rgb(235,114,22)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1109" width="0.0166%" height="15" fill="rgb(209,167,11)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1093" width="0.0166%" height="15" fill="rgb(251,73,18)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1077" width="0.0166%" height="15" fill="rgb(217,60,17)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.4906%" y="1061" width="0.0166%" height="15" fill="rgb(224,36,37)" fg:x="4856" fg:w="1"/><text x="80.7406%" y="1071.50"></text></g><g><title>SkipEmptyDataBlocksForward (12 samples, 0.20%)</title><rect x="80.4575%" y="1349" width="0.1989%" height="15" fill="rgb(211,21,32)" fg:x="4854" fg:w="12"/><text x="80.7075%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (12 samples, 0.20%)</title><rect x="80.4575%" y="1333" width="0.1989%" height="15" fill="rgb(231,55,48)" fg:x="4854" fg:w="12"/><text x="80.7075%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (12 samples, 0.20%)</title><rect x="80.4575%" y="1317" width="0.1989%" height="15" fill="rgb(227,42,18)" fg:x="4854" fg:w="12"/><text x="80.7075%" y="1327.50"></text></g><g><title>leveldb::Table::BlockReader (11 samples, 0.18%)</title><rect x="80.4741%" y="1301" width="0.1823%" height="15" fill="rgb(217,2,27)" fg:x="4855" fg:w="11"/><text x="80.7241%" y="1311.50"></text></g><g><title>leveldb::ReadBlock (10 samples, 0.17%)</title><rect x="80.4906%" y="1285" width="0.1658%" height="15" fill="rgb(251,138,23)" fg:x="4856" fg:w="10"/><text x="80.7406%" y="1295.50"></text></g><g><title>leveldb::crc32c::Value (9 samples, 0.15%)</title><rect x="80.5072%" y="1269" width="0.1492%" height="15" fill="rgb(226,184,11)" fg:x="4857" fg:w="9"/><text x="80.7572%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (9 samples, 0.15%)</title><rect x="80.5072%" y="1253" width="0.1492%" height="15" fill="rgb(242,142,12)" fg:x="4857" fg:w="9"/><text x="80.7572%" y="1263.50"></text></g><g><title>_mm_crc32_u64 (7 samples, 0.12%)</title><rect x="80.5404%" y="1237" width="0.1160%" height="15" fill="rgb(234,187,18)" fg:x="4859" fg:w="7"/><text x="80.7904%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="80.6730%" y="1333" width="0.0166%" height="15" fill="rgb(237,44,42)" fg:x="4867" fg:w="1"/><text x="80.9230%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (4 samples, 0.07%)</title><rect x="80.6564%" y="1349" width="0.0663%" height="15" fill="rgb(211,90,23)" fg:x="4866" fg:w="4"/><text x="80.9064%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="80.6895%" y="1333" width="0.0332%" height="15" fill="rgb(207,81,18)" fg:x="4868" fg:w="2"/><text x="80.9395%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="80.7393%" y="1333" width="0.1326%" height="15" fill="rgb(222,107,28)" fg:x="4871" fg:w="8"/><text x="80.9893%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="80.7393%" y="1317" width="0.1326%" height="15" fill="rgb(237,83,52)" fg:x="4871" fg:w="8"/><text x="80.9893%" y="1327.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="80.7393%" y="1301" width="0.1326%" height="15" fill="rgb(208,67,11)" fg:x="4871" fg:w="8"/><text x="80.9893%" y="1311.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="80.7393%" y="1285" width="0.1326%" height="15" fill="rgb(249,157,49)" fg:x="4871" fg:w="8"/><text x="80.9893%" y="1295.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="80.7393%" y="1269" width="0.1326%" height="15" fill="rgb(243,200,1)" fg:x="4871" fg:w="8"/><text x="80.9893%" y="1279.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="80.7393%" y="1253" width="0.1326%" height="15" fill="rgb(225,162,37)" fg:x="4871" fg:w="8"/><text x="80.9893%" y="1263.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="80.7558%" y="1237" width="0.1160%" height="15" fill="rgb(242,92,13)" fg:x="4872" fg:w="7"/><text x="81.0058%" y="1247.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="80.7558%" y="1221" width="0.1160%" height="15" fill="rgb(220,43,36)" fg:x="4872" fg:w="7"/><text x="81.0058%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="80.7558%" y="1205" width="0.1160%" height="15" fill="rgb(213,165,48)" fg:x="4872" fg:w="7"/><text x="81.0058%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="80.7558%" y="1189" width="0.1160%" height="15" fill="rgb(227,200,9)" fg:x="4872" fg:w="7"/><text x="81.0058%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.8056%" y="1173" width="0.0663%" height="15" fill="rgb(221,222,28)" fg:x="4875" fg:w="4"/><text x="81.0556%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.8056%" y="1157" width="0.0663%" height="15" fill="rgb(223,142,26)" fg:x="4875" fg:w="4"/><text x="81.0556%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="80.8056%" y="1141" width="0.0663%" height="15" fill="rgb(243,46,9)" fg:x="4875" fg:w="4"/><text x="81.0556%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.8553%" y="1125" width="0.0166%" height="15" fill="rgb(250,56,11)" fg:x="4878" fg:w="1"/><text x="81.1053%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.8553%" y="1109" width="0.0166%" height="15" fill="rgb(229,113,5)" fg:x="4878" fg:w="1"/><text x="81.1053%" y="1119.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (11 samples, 0.18%)</title><rect x="80.7227%" y="1349" width="0.1823%" height="15" fill="rgb(244,108,28)" fg:x="4870" fg:w="11"/><text x="80.9727%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="80.8719%" y="1333" width="0.0332%" height="15" fill="rgb(242,119,50)" fg:x="4879" fg:w="2"/><text x="81.1219%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="80.9050%" y="1349" width="0.0166%" height="15" fill="rgb(224,164,23)" fg:x="4881" fg:w="1"/><text x="81.1550%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.03%)</title><rect x="80.9216%" y="1349" width="0.0332%" height="15" fill="rgb(214,227,44)" fg:x="4882" fg:w="2"/><text x="81.1716%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::NextEntryOffset (1 samples, 0.02%)</title><rect x="80.9382%" y="1333" width="0.0166%" height="15" fill="rgb(238,202,4)" fg:x="4883" fg:w="1"/><text x="81.1882%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.03%)</title><rect x="80.9547%" y="1349" width="0.0332%" height="15" fill="rgb(213,190,30)" fg:x="4884" fg:w="2"/><text x="81.2047%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="80.9713%" y="1333" width="0.0166%" height="15" fill="rgb(239,15,2)" fg:x="4885" fg:w="1"/><text x="81.2213%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="80.9713%" y="1317" width="0.0166%" height="15" fill="rgb(249,229,4)" fg:x="4885" fg:w="1"/><text x="81.2213%" y="1327.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (4 samples, 0.07%)</title><rect x="80.9879%" y="1349" width="0.0663%" height="15" fill="rgb(239,75,44)" fg:x="4886" fg:w="4"/><text x="81.2379%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (3 samples, 0.05%)</title><rect x="81.0542%" y="1349" width="0.0497%" height="15" fill="rgb(251,206,23)" fg:x="4890" fg:w="3"/><text x="81.3042%" y="1359.50"></text></g><g><title>Next (83 samples, 1.38%)</title><rect x="79.7447%" y="1381" width="1.3758%" height="15" fill="rgb(215,208,0)" fg:x="4811" fg:w="83"/><text x="79.9947%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (83 samples, 1.38%)</title><rect x="79.7447%" y="1365" width="1.3758%" height="15" fill="rgb(230,75,50)" fg:x="4811" fg:w="83"/><text x="79.9947%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::FileSize (1 samples, 0.02%)</title><rect x="81.1039%" y="1349" width="0.0166%" height="15" fill="rgb(246,180,39)" fg:x="4893" fg:w="1"/><text x="81.3539%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="81.1205%" y="1381" width="0.0166%" height="15" fill="rgb(249,175,24)" fg:x="4894" fg:w="1"/><text x="81.3705%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (15 samples, 0.25%)</title><rect x="81.1371%" y="1381" width="0.2486%" height="15" fill="rgb(247,176,22)" fg:x="4895" fg:w="15"/><text x="81.3871%" y="1391.50"></text></g><g><title>leveldb::Slice::compare (4 samples, 0.07%)</title><rect x="81.3194%" y="1365" width="0.0663%" height="15" fill="rgb(241,100,24)" fg:x="4906" fg:w="4"/><text x="81.5694%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (5 samples, 0.08%)</title><rect x="81.3857%" y="1381" width="0.0829%" height="15" fill="rgb(233,4,35)" fg:x="4910" fg:w="5"/><text x="81.6357%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="81.4520%" y="1365" width="0.0166%" height="15" fill="rgb(211,164,46)" fg:x="4914" fg:w="1"/><text x="81.7020%" y="1375.50"></text></g><g><title>Next (2 samples, 0.03%)</title><rect x="81.5183%" y="1349" width="0.0332%" height="15" fill="rgb(242,99,53)" fg:x="4918" fg:w="2"/><text x="81.7683%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.03%)</title><rect x="81.5183%" y="1333" width="0.0332%" height="15" fill="rgb(243,45,33)" fg:x="4918" fg:w="2"/><text x="81.7683%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.03%)</title><rect x="81.5183%" y="1317" width="0.0332%" height="15" fill="rgb(217,55,21)" fg:x="4918" fg:w="2"/><text x="81.7683%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (2 samples, 0.03%)</title><rect x="81.5515%" y="1349" width="0.0332%" height="15" fill="rgb(245,145,46)" fg:x="4920" fg:w="2"/><text x="81.8015%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="81.5680%" y="1333" width="0.0166%" height="15" fill="rgb(215,112,45)" fg:x="4921" fg:w="1"/><text x="81.8180%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (3 samples, 0.05%)</title><rect x="81.5846%" y="1349" width="0.0497%" height="15" fill="rgb(228,104,16)" fg:x="4922" fg:w="3"/><text x="81.8346%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.05%)</title><rect x="81.5846%" y="1333" width="0.0497%" height="15" fill="rgb(239,186,38)" fg:x="4922" fg:w="3"/><text x="81.8346%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.05%)</title><rect x="81.5846%" y="1317" width="0.0497%" height="15" fill="rgb(228,38,35)" fg:x="4922" fg:w="3"/><text x="81.8346%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="81.6178%" y="1301" width="0.0166%" height="15" fill="rgb(251,42,40)" fg:x="4924" fg:w="1"/><text x="81.8678%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="81.6343%" y="1349" width="0.0166%" height="15" fill="rgb(210,51,19)" fg:x="4925" fg:w="1"/><text x="81.8843%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (7 samples, 0.12%)</title><rect x="81.6509%" y="1349" width="0.1160%" height="15" fill="rgb(236,94,42)" fg:x="4926" fg:w="7"/><text x="81.9009%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="81.7504%" y="1333" width="0.0166%" height="15" fill="rgb(239,167,16)" fg:x="4932" fg:w="1"/><text x="82.0004%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="81.7504%" y="1317" width="0.0166%" height="15" fill="rgb(252,175,31)" fg:x="4932" fg:w="1"/><text x="82.0004%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="81.7504%" y="1301" width="0.0166%" height="15" fill="rgb(206,166,30)" fg:x="4932" fg:w="1"/><text x="82.0004%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="81.7504%" y="1285" width="0.0166%" height="15" fill="rgb(206,209,37)" fg:x="4932" fg:w="1"/><text x="82.0004%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::Valid (4 samples, 0.07%)</title><rect x="81.7669%" y="1349" width="0.0663%" height="15" fill="rgb(226,91,4)" fg:x="4933" fg:w="4"/><text x="82.0169%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="81.8333%" y="1333" width="0.0663%" height="15" fill="rgb(222,167,0)" fg:x="4937" fg:w="4"/><text x="82.0833%" y="1343.50"></text></g><g><title>leveldb::Slice::compare (4 samples, 0.07%)</title><rect x="81.8333%" y="1317" width="0.0663%" height="15" fill="rgb(211,70,14)" fg:x="4937" fg:w="4"/><text x="82.0833%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="81.8996%" y="1333" width="0.0166%" height="15" fill="rgb(214,84,42)" fg:x="4941" fg:w="1"/><text x="82.1496%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="81.9161%" y="1333" width="0.0166%" height="15" fill="rgb(235,157,37)" fg:x="4942" fg:w="1"/><text x="82.1661%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="81.9161%" y="1317" width="0.0166%" height="15" fill="rgb(225,13,6)" fg:x="4942" fg:w="1"/><text x="82.1661%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="81.9161%" y="1301" width="0.0166%" height="15" fill="rgb(205,202,1)" fg:x="4942" fg:w="1"/><text x="82.1661%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (2 samples, 0.03%)</title><rect x="81.9327%" y="1333" width="0.0332%" height="15" fill="rgb(232,195,26)" fg:x="4943" fg:w="2"/><text x="82.1827%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="81.9493%" y="1317" width="0.0166%" height="15" fill="rgb(208,102,26)" fg:x="4944" fg:w="1"/><text x="82.1993%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="81.9493%" y="1301" width="0.0166%" height="15" fill="rgb(215,41,39)" fg:x="4944" fg:w="1"/><text x="82.1993%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="81.9659%" y="1333" width="0.0166%" height="15" fill="rgb(247,139,11)" fg:x="4945" fg:w="1"/><text x="82.2159%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="81.9824%" y="1333" width="0.0166%" height="15" fill="rgb(243,99,6)" fg:x="4946" fg:w="1"/><text x="82.2324%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::key (4 samples, 0.07%)</title><rect x="81.9990%" y="1333" width="0.0663%" height="15" fill="rgb(230,168,48)" fg:x="4947" fg:w="4"/><text x="82.2490%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (40 samples, 0.66%)</title><rect x="81.4852%" y="1365" width="0.6630%" height="15" fill="rgb(238,227,13)" fg:x="4916" fg:w="40"/><text x="81.7352%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (19 samples, 0.31%)</title><rect x="81.8333%" y="1349" width="0.3149%" height="15" fill="rgb(209,109,13)" fg:x="4937" fg:w="19"/><text x="82.0833%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.08%)</title><rect x="82.0653%" y="1333" width="0.0829%" height="15" fill="rgb(228,195,1)" fg:x="4951" fg:w="5"/><text x="82.3153%" y="1343.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="82.1316%" y="1317" width="0.0166%" height="15" fill="rgb(230,218,0)" fg:x="4955" fg:w="1"/><text x="82.3816%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="82.1482%" y="1365" width="0.0166%" height="15" fill="rgb(206,1,45)" fg:x="4956" fg:w="1"/><text x="82.3982%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="82.1482%" y="1349" width="0.0166%" height="15" fill="rgb(209,124,26)" fg:x="4956" fg:w="1"/><text x="82.3982%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.1482%" y="1333" width="0.0166%" height="15" fill="rgb(220,59,8)" fg:x="4956" fg:w="1"/><text x="82.3982%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="82.1648%" y="1365" width="0.0166%" height="15" fill="rgb(251,41,37)" fg:x="4957" fg:w="1"/><text x="82.4148%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (5 samples, 0.08%)</title><rect x="82.1813%" y="1365" width="0.0829%" height="15" fill="rgb(239,152,21)" fg:x="4958" fg:w="5"/><text x="82.4313%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="82.2476%" y="1349" width="0.0166%" height="15" fill="rgb(226,32,1)" fg:x="4962" fg:w="1"/><text x="82.4976%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="82.2476%" y="1333" width="0.0166%" height="15" fill="rgb(230,154,36)" fg:x="4962" fg:w="1"/><text x="82.4976%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="82.2476%" y="1317" width="0.0166%" height="15" fill="rgb(208,228,43)" fg:x="4962" fg:w="1"/><text x="82.4976%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="82.2476%" y="1301" width="0.0166%" height="15" fill="rgb(214,203,3)" fg:x="4962" fg:w="1"/><text x="82.4976%" y="1311.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="82.2642%" y="1333" width="0.0166%" height="15" fill="rgb(207,149,29)" fg:x="4963" fg:w="1"/><text x="82.5142%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="82.2808%" y="1333" width="0.0166%" height="15" fill="rgb(250,105,7)" fg:x="4964" fg:w="1"/><text x="82.5308%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (2 samples, 0.03%)</title><rect x="82.2974%" y="1317" width="0.0332%" height="15" fill="rgb(232,222,16)" fg:x="4965" fg:w="2"/><text x="82.5474%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (5 samples, 0.08%)</title><rect x="82.2642%" y="1365" width="0.0829%" height="15" fill="rgb(209,32,24)" fg:x="4963" fg:w="5"/><text x="82.5142%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (5 samples, 0.08%)</title><rect x="82.2642%" y="1349" width="0.0829%" height="15" fill="rgb(225,13,6)" fg:x="4963" fg:w="5"/><text x="82.5142%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.05%)</title><rect x="82.2974%" y="1333" width="0.0497%" height="15" fill="rgb(245,226,26)" fg:x="4965" fg:w="3"/><text x="82.5474%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="82.3305%" y="1317" width="0.0166%" height="15" fill="rgb(229,178,27)" fg:x="4967" fg:w="1"/><text x="82.5805%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="82.3305%" y="1301" width="0.0166%" height="15" fill="rgb(205,227,28)" fg:x="4967" fg:w="1"/><text x="82.5805%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="82.3305%" y="1285" width="0.0166%" height="15" fill="rgb(210,191,45)" fg:x="4967" fg:w="1"/><text x="82.5805%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (54 samples, 0.90%)</title><rect x="81.4686%" y="1381" width="0.8951%" height="15" fill="rgb(206,124,16)" fg:x="4915" fg:w="54"/><text x="81.7186%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="82.3471%" y="1365" width="0.0166%" height="15" fill="rgb(210,162,0)" fg:x="4968" fg:w="1"/><text x="82.5971%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (2 samples, 0.03%)</title><rect x="82.3637%" y="1381" width="0.0332%" height="15" fill="rgb(211,54,38)" fg:x="4969" fg:w="2"/><text x="82.6137%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (2 samples, 0.03%)</title><rect x="82.3968%" y="1381" width="0.0332%" height="15" fill="rgb(248,192,3)" fg:x="4971" fg:w="2"/><text x="82.6468%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="82.4134%" y="1365" width="0.0166%" height="15" fill="rgb(233,187,18)" fg:x="4972" fg:w="1"/><text x="82.6634%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.4134%" y="1349" width="0.0166%" height="15" fill="rgb(237,208,14)" fg:x="4972" fg:w="1"/><text x="82.6634%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.4134%" y="1333" width="0.0166%" height="15" fill="rgb(212,77,1)" fg:x="4972" fg:w="1"/><text x="82.6634%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (3 samples, 0.05%)</title><rect x="82.4300%" y="1381" width="0.0497%" height="15" fill="rgb(210,163,22)" fg:x="4973" fg:w="3"/><text x="82.6800%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1 samples, 0.02%)</title><rect x="82.4963%" y="1317" width="0.0166%" height="15" fill="rgb(250,58,28)" fg:x="4977" fg:w="1"/><text x="82.7463%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (4 samples, 0.07%)</title><rect x="82.4797%" y="1381" width="0.0663%" height="15" fill="rgb(254,28,41)" fg:x="4976" fg:w="4"/><text x="82.7297%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::value (4 samples, 0.07%)</title><rect x="82.4797%" y="1365" width="0.0663%" height="15" fill="rgb(237,162,36)" fg:x="4976" fg:w="4"/><text x="82.7297%" y="1375.50"></text></g><g><title>value (4 samples, 0.07%)</title><rect x="82.4797%" y="1349" width="0.0663%" height="15" fill="rgb(232,56,6)" fg:x="4976" fg:w="4"/><text x="82.7297%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::value (4 samples, 0.07%)</title><rect x="82.4797%" y="1333" width="0.0663%" height="15" fill="rgb(216,127,42)" fg:x="4976" fg:w="4"/><text x="82.7297%" y="1343.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.03%)</title><rect x="82.5128%" y="1317" width="0.0332%" height="15" fill="rgb(241,69,15)" fg:x="4978" fg:w="2"/><text x="82.7628%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="82.5460%" y="1381" width="0.0166%" height="15" fill="rgb(227,180,19)" fg:x="4980" fg:w="1"/><text x="82.7960%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="82.5626%" y="1381" width="0.0166%" height="15" fill="rgb(231,188,29)" fg:x="4981" fg:w="1"/><text x="82.8126%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="82.5626%" y="1365" width="0.0166%" height="15" fill="rgb(224,176,27)" fg:x="4981" fg:w="1"/><text x="82.8126%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.02%)</title><rect x="82.5791%" y="1381" width="0.0166%" height="15" fill="rgb(249,214,19)" fg:x="4982" fg:w="1"/><text x="82.8291%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::value (2 samples, 0.03%)</title><rect x="82.5957%" y="1381" width="0.0332%" height="15" fill="rgb(240,0,4)" fg:x="4983" fg:w="2"/><text x="82.8457%" y="1391.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="82.6289%" y="1381" width="0.0166%" height="15" fill="rgb(233,28,41)" fg:x="4985" fg:w="1"/><text x="82.8789%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="82.6289%" y="1365" width="0.0166%" height="15" fill="rgb(220,90,51)" fg:x="4985" fg:w="1"/><text x="82.8789%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="82.6289%" y="1349" width="0.0166%" height="15" fill="rgb(250,52,22)" fg:x="4985" fg:w="1"/><text x="82.8789%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="82.6289%" y="1333" width="0.0166%" height="15" fill="rgb(231,152,36)" fg:x="4985" fg:w="1"/><text x="82.8789%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="82.6289%" y="1317" width="0.0166%" height="15" fill="rgb(250,218,4)" fg:x="4985" fg:w="1"/><text x="82.8789%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="82.6289%" y="1301" width="0.0166%" height="15" fill="rgb(210,38,21)" fg:x="4985" fg:w="1"/><text x="82.8789%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="82.6620%" y="1365" width="0.0166%" height="15" fill="rgb(230,75,13)" fg:x="4987" fg:w="1"/><text x="82.9120%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="82.6620%" y="1349" width="0.0166%" height="15" fill="rgb(250,68,53)" fg:x="4987" fg:w="1"/><text x="82.9120%" y="1359.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="82.6786%" y="1365" width="0.0166%" height="15" fill="rgb(250,210,16)" fg:x="4988" fg:w="1"/><text x="82.9286%" y="1375.50"></text></g><g><title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (1 samples, 0.02%)</title><rect x="82.6786%" y="1349" width="0.0166%" height="15" fill="rgb(240,132,5)" fg:x="4988" fg:w="1"/><text x="82.9286%" y="1359.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="82.6952%" y="1349" width="0.0166%" height="15" fill="rgb(222,148,48)" fg:x="4989" fg:w="1"/><text x="82.9452%" y="1359.50"></text></g><g><title>leveldb::InternalKey::user_key (2 samples, 0.03%)</title><rect x="82.6952%" y="1365" width="0.0332%" height="15" fill="rgb(247,181,24)" fg:x="4989" fg:w="2"/><text x="82.9452%" y="1375.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="82.7118%" y="1349" width="0.0166%" height="15" fill="rgb(239,5,31)" fg:x="4990" fg:w="1"/><text x="82.9618%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.02%)</title><rect x="82.7118%" y="1333" width="0.0166%" height="15" fill="rgb(241,152,38)" fg:x="4990" fg:w="1"/><text x="82.9618%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="82.7118%" y="1317" width="0.0166%" height="15" fill="rgb(246,200,37)" fg:x="4990" fg:w="1"/><text x="82.9618%" y="1327.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (7 samples, 0.12%)</title><rect x="82.6455%" y="1381" width="0.1160%" height="15" fill="rgb(243,210,26)" fg:x="4986" fg:w="7"/><text x="82.8955%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="82.7283%" y="1365" width="0.0332%" height="15" fill="rgb(222,22,22)" fg:x="4991" fg:w="2"/><text x="82.9783%" y="1375.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="82.7449%" y="1349" width="0.0166%" height="15" fill="rgb(208,129,28)" fg:x="4992" fg:w="1"/><text x="82.9949%" y="1359.50"></text></g><g><title>MaxGrandParentOverlapBytes (1 samples, 0.02%)</title><rect x="82.8112%" y="1365" width="0.0166%" height="15" fill="rgb(254,169,28)" fg:x="4996" fg:w="1"/><text x="83.0612%" y="1375.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="82.8112%" y="1349" width="0.0166%" height="15" fill="rgb(225,45,17)" fg:x="4996" fg:w="1"/><text x="83.0612%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="82.8278%" y="1365" width="0.0166%" height="15" fill="rgb(232,199,2)" fg:x="4997" fg:w="1"/><text x="83.0778%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="82.8278%" y="1349" width="0.0166%" height="15" fill="rgb(235,33,40)" fg:x="4997" fg:w="1"/><text x="83.0778%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.8278%" y="1333" width="0.0166%" height="15" fill="rgb(237,89,50)" fg:x="4997" fg:w="1"/><text x="83.0778%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.8278%" y="1317" width="0.0166%" height="15" fill="rgb(238,126,5)" fg:x="4997" fg:w="1"/><text x="83.0778%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="82.8444%" y="1349" width="0.0166%" height="15" fill="rgb(247,214,42)" fg:x="4998" fg:w="1"/><text x="83.0944%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="82.8609%" y="1349" width="0.0166%" height="15" fill="rgb(238,60,45)" fg:x="4999" fg:w="1"/><text x="83.1109%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="82.8609%" y="1333" width="0.0166%" height="15" fill="rgb(225,69,44)" fg:x="4999" fg:w="1"/><text x="83.1109%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.8609%" y="1317" width="0.0166%" height="15" fill="rgb(241,13,44)" fg:x="4999" fg:w="1"/><text x="83.1109%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.8609%" y="1301" width="0.0166%" height="15" fill="rgb(227,121,22)" fg:x="4999" fg:w="1"/><text x="83.1109%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="82.8609%" y="1285" width="0.0166%" height="15" fill="rgb(231,160,23)" fg:x="4999" fg:w="1"/><text x="83.1109%" y="1295.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (8 samples, 0.13%)</title><rect x="82.7615%" y="1381" width="0.1326%" height="15" fill="rgb(250,179,43)" fg:x="4993" fg:w="8"/><text x="83.0115%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="82.8444%" y="1365" width="0.0497%" height="15" fill="rgb(233,54,46)" fg:x="4998" fg:w="3"/><text x="83.0944%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="82.8775%" y="1349" width="0.0166%" height="15" fill="rgb(247,120,42)" fg:x="5000" fg:w="1"/><text x="83.1275%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (5 samples, 0.08%)</title><rect x="82.8941%" y="1349" width="0.0829%" height="15" fill="rgb(221,219,12)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1359.50"></text></g><g><title>__unlink (5 samples, 0.08%)</title><rect x="82.8941%" y="1333" width="0.0829%" height="15" fill="rgb(211,126,8)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1343.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="82.8941%" y="1317" width="0.0829%" height="15" fill="rgb(218,154,33)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="82.8941%" y="1301" width="0.0829%" height="15" fill="rgb(212,199,16)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="82.8941%" y="1285" width="0.0829%" height="15" fill="rgb(236,215,46)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1295.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="82.8941%" y="1269" width="0.0829%" height="15" fill="rgb(232,32,22)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="82.8941%" y="1253" width="0.0829%" height="15" fill="rgb(234,79,15)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1263.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="82.8941%" y="1237" width="0.0829%" height="15" fill="rgb(235,187,47)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="82.8941%" y="1221" width="0.0829%" height="15" fill="rgb(244,69,37)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="82.8941%" y="1205" width="0.0829%" height="15" fill="rgb(249,140,25)" fg:x="5001" fg:w="5"/><text x="83.1441%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.9107%" y="1189" width="0.0663%" height="15" fill="rgb(213,69,8)" fg:x="5002" fg:w="4"/><text x="83.1607%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.9272%" y="1173" width="0.0497%" height="15" fill="rgb(220,136,2)" fg:x="5003" fg:w="3"/><text x="83.1772%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.9604%" y="1157" width="0.0166%" height="15" fill="rgb(237,50,36)" fg:x="5005" fg:w="1"/><text x="83.2104%" y="1167.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (6 samples, 0.10%)</title><rect x="82.8941%" y="1365" width="0.0995%" height="15" fill="rgb(226,18,11)" fg:x="5001" fg:w="6"/><text x="83.1441%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::GetChildren (1 samples, 0.02%)</title><rect x="82.9770%" y="1349" width="0.0166%" height="15" fill="rgb(243,156,2)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1359.50"></text></g><g><title>__GI___readdir64 (1 samples, 0.02%)</title><rect x="82.9770%" y="1333" width="0.0166%" height="15" fill="rgb(218,8,34)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1343.50"></text></g><g><title>__GI___getdents64 (1 samples, 0.02%)</title><rect x="82.9770%" y="1317" width="0.0166%" height="15" fill="rgb(250,94,35)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.9770%" y="1301" width="0.0166%" height="15" fill="rgb(229,127,21)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.9770%" y="1285" width="0.0166%" height="15" fill="rgb(234,49,5)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.9770%" y="1269" width="0.0166%" height="15" fill="rgb(248,12,16)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.9770%" y="1253" width="0.0166%" height="15" fill="rgb(208,220,31)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1263.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="82.9770%" y="1237" width="0.0166%" height="15" fill="rgb(243,184,0)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1247.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="82.9770%" y="1221" width="0.0166%" height="15" fill="rgb(217,38,21)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1231.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="82.9770%" y="1205" width="0.0166%" height="15" fill="rgb(239,120,45)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="82.9770%" y="1189" width="0.0166%" height="15" fill="rgb(235,33,2)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.9770%" y="1173" width="0.0166%" height="15" fill="rgb(249,161,5)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.9770%" y="1157" width="0.0166%" height="15" fill="rgb(250,165,48)" fg:x="5006" fg:w="1"/><text x="83.2270%" y="1167.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="82.9935%" y="1109" width="0.0332%" height="15" fill="rgb(221,23,45)" fg:x="5007" fg:w="2"/><text x="83.2435%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="82.9935%" y="1093" width="0.0332%" height="15" fill="rgb(217,108,46)" fg:x="5007" fg:w="2"/><text x="83.2435%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="82.9935%" y="1077" width="0.0332%" height="15" fill="rgb(254,26,35)" fg:x="5007" fg:w="2"/><text x="83.2435%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0101%" y="1061" width="0.0166%" height="15" fill="rgb(218,223,28)" fg:x="5008" fg:w="1"/><text x="83.2601%" y="1071.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="82.9935%" y="1157" width="0.0497%" height="15" fill="rgb(242,27,47)" fg:x="5007" fg:w="3"/><text x="83.2435%" y="1167.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="82.9935%" y="1141" width="0.0497%" height="15" fill="rgb(218,39,35)" fg:x="5007" fg:w="3"/><text x="83.2435%" y="1151.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="82.9935%" y="1125" width="0.0497%" height="15" fill="rgb(232,127,16)" fg:x="5007" fg:w="3"/><text x="83.2435%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0267%" y="1109" width="0.0166%" height="15" fill="rgb(231,219,51)" fg:x="5009" fg:w="1"/><text x="83.2767%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0267%" y="1093" width="0.0166%" height="15" fill="rgb(217,220,46)" fg:x="5009" fg:w="1"/><text x="83.2767%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0267%" y="1077" width="0.0166%" height="15" fill="rgb(230,75,1)" fg:x="5009" fg:w="1"/><text x="83.2767%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0267%" y="1061" width="0.0166%" height="15" fill="rgb(218,2,8)" fg:x="5009" fg:w="1"/><text x="83.2767%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0267%" y="1045" width="0.0166%" height="15" fill="rgb(206,111,30)" fg:x="5009" fg:w="1"/><text x="83.2767%" y="1055.50"></text></g><g><title>Sync (6 samples, 0.10%)</title><rect x="82.9935%" y="1333" width="0.0995%" height="15" fill="rgb(209,135,6)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (6 samples, 0.10%)</title><rect x="82.9935%" y="1317" width="0.0995%" height="15" fill="rgb(205,169,10)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1327.50"></text></g><g><title>fdatasync (6 samples, 0.10%)</title><rect x="82.9935%" y="1301" width="0.0995%" height="15" fill="rgb(212,204,38)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1311.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="82.9935%" y="1285" width="0.0995%" height="15" fill="rgb(205,199,14)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1295.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="82.9935%" y="1269" width="0.0995%" height="15" fill="rgb(212,4,6)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1279.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="82.9935%" y="1253" width="0.0995%" height="15" fill="rgb(250,15,10)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1263.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="82.9935%" y="1237" width="0.0995%" height="15" fill="rgb(212,49,51)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="82.9935%" y="1221" width="0.0995%" height="15" fill="rgb(235,21,9)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="82.9935%" y="1205" width="0.0995%" height="15" fill="rgb(251,31,32)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="82.9935%" y="1189" width="0.0995%" height="15" fill="rgb(246,23,9)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="82.9935%" y="1173" width="0.0995%" height="15" fill="rgb(225,216,14)" fg:x="5007" fg:w="6"/><text x="83.2435%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="83.0433%" y="1157" width="0.0497%" height="15" fill="rgb(215,200,26)" fg:x="5010" fg:w="3"/><text x="83.2933%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="83.0433%" y="1141" width="0.0497%" height="15" fill="rgb(237,130,47)" fg:x="5010" fg:w="3"/><text x="83.2933%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="83.0433%" y="1125" width="0.0497%" height="15" fill="rgb(247,74,14)" fg:x="5010" fg:w="3"/><text x="83.2933%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="83.0433%" y="1109" width="0.0497%" height="15" fill="rgb(254,97,46)" fg:x="5010" fg:w="3"/><text x="83.2933%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="83.0433%" y="1093" width="0.0497%" height="15" fill="rgb(234,191,1)" fg:x="5010" fg:w="3"/><text x="83.2933%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="83.0433%" y="1077" width="0.0497%" height="15" fill="rgb(215,165,14)" fg:x="5010" fg:w="3"/><text x="83.2933%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0764%" y="1061" width="0.0166%" height="15" fill="rgb(230,182,6)" fg:x="5012" fg:w="1"/><text x="83.3264%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0764%" y="1045" width="0.0166%" height="15" fill="rgb(210,127,39)" fg:x="5012" fg:w="1"/><text x="83.3264%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0764%" y="1029" width="0.0166%" height="15" fill="rgb(223,212,51)" fg:x="5012" fg:w="1"/><text x="83.3264%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="83.0930%" y="1333" width="0.0166%" height="15" fill="rgb(226,176,43)" fg:x="5013" fg:w="1"/><text x="83.3430%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="83.1096%" y="1317" width="0.0166%" height="15" fill="rgb(222,155,4)" fg:x="5014" fg:w="1"/><text x="83.3596%" y="1327.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="83.1096%" y="1301" width="0.0166%" height="15" fill="rgb(215,149,7)" fg:x="5014" fg:w="1"/><text x="83.3596%" y="1311.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.03%)</title><rect x="83.1924%" y="1301" width="0.0332%" height="15" fill="rgb(252,199,23)" fg:x="5019" fg:w="2"/><text x="83.4424%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="83.4079%" y="1285" width="0.0166%" height="15" fill="rgb(245,52,29)" fg:x="5032" fg:w="1"/><text x="83.6579%" y="1295.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="83.4079%" y="1269" width="0.0166%" height="15" fill="rgb(221,228,19)" fg:x="5032" fg:w="1"/><text x="83.6579%" y="1279.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="83.4079%" y="1253" width="0.0166%" height="15" fill="rgb(253,101,6)" fg:x="5032" fg:w="1"/><text x="83.6579%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (21 samples, 0.35%)</title><rect x="83.2256%" y="1301" width="0.3481%" height="15" fill="rgb(211,130,8)" fg:x="5021" fg:w="21"/><text x="83.4756%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.15%)</title><rect x="83.4245%" y="1285" width="0.1492%" height="15" fill="rgb(238,37,53)" fg:x="5033" fg:w="9"/><text x="83.6745%" y="1295.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="83.5571%" y="1269" width="0.0166%" height="15" fill="rgb(235,145,5)" fg:x="5041" fg:w="1"/><text x="83.8071%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (2 samples, 0.03%)</title><rect x="83.5737%" y="1285" width="0.0332%" height="15" fill="rgb(244,12,43)" fg:x="5042" fg:w="2"/><text x="83.8237%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="83.5737%" y="1269" width="0.0332%" height="15" fill="rgb(246,195,24)" fg:x="5042" fg:w="2"/><text x="83.8237%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="83.5737%" y="1253" width="0.0332%" height="15" fill="rgb(235,163,6)" fg:x="5042" fg:w="2"/><text x="83.8237%" y="1263.50"></text></g><g><title>leveldb::PutVarint32 (3 samples, 0.05%)</title><rect x="83.5737%" y="1301" width="0.0497%" height="15" fill="rgb(236,218,17)" fg:x="5042" fg:w="3"/><text x="83.8237%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="83.6068%" y="1285" width="0.0166%" height="15" fill="rgb(235,12,38)" fg:x="5044" fg:w="1"/><text x="83.8568%" y="1295.50"></text></g><g><title>leveldb::Slice::operator[] (2 samples, 0.03%)</title><rect x="83.6234%" y="1301" width="0.0332%" height="15" fill="rgb(225,195,33)" fg:x="5045" fg:w="2"/><text x="83.8734%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="83.6566%" y="1301" width="0.0166%" height="15" fill="rgb(238,54,35)" fg:x="5047" fg:w="1"/><text x="83.9066%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.03%)</title><rect x="83.6731%" y="1285" width="0.0332%" height="15" fill="rgb(238,33,7)" fg:x="5048" fg:w="2"/><text x="83.9231%" y="1295.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="83.7063%" y="1285" width="0.0166%" height="15" fill="rgb(245,5,14)" fg:x="5050" fg:w="1"/><text x="83.9563%" y="1295.50"></text></g><g><title>leveldb::operator== (4 samples, 0.07%)</title><rect x="83.6731%" y="1301" width="0.0663%" height="15" fill="rgb(251,95,31)" fg:x="5048" fg:w="4"/><text x="83.9231%" y="1311.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="83.7229%" y="1285" width="0.0166%" height="15" fill="rgb(222,15,46)" fg:x="5051" fg:w="1"/><text x="83.9729%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="83.7394%" y="1301" width="0.0332%" height="15" fill="rgb(226,182,24)" fg:x="5052" fg:w="2"/><text x="83.9894%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="83.7394%" y="1285" width="0.0332%" height="15" fill="rgb(229,105,41)" fg:x="5052" fg:w="2"/><text x="83.9894%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (40 samples, 0.66%)</title><rect x="83.1261%" y="1317" width="0.6630%" height="15" fill="rgb(216,99,53)" fg:x="5015" fg:w="40"/><text x="83.3761%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="83.7726%" y="1301" width="0.0166%" height="15" fill="rgb(253,26,20)" fg:x="5054" fg:w="1"/><text x="84.0226%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="83.7726%" y="1285" width="0.0166%" height="15" fill="rgb(249,155,28)" fg:x="5054" fg:w="1"/><text x="84.0226%" y="1295.50"></text></g><g><title>leveldb::BlockHandle::EncodeTo (2 samples, 0.03%)</title><rect x="83.7892%" y="1317" width="0.0332%" height="15" fill="rgb(241,221,2)" fg:x="5055" fg:w="2"/><text x="84.0392%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (1 samples, 0.02%)</title><rect x="83.8057%" y="1301" width="0.0166%" height="15" fill="rgb(219,124,6)" fg:x="5056" fg:w="1"/><text x="84.0557%" y="1311.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="83.8223%" y="1317" width="0.0166%" height="15" fill="rgb(233,37,6)" fg:x="5057" fg:w="1"/><text x="84.0723%" y="1327.50"></text></g><g><title>BloomHash (1 samples, 0.02%)</title><rect x="83.8555%" y="1269" width="0.0166%" height="15" fill="rgb(238,20,14)" fg:x="5059" fg:w="1"/><text x="84.1055%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (6 samples, 0.10%)</title><rect x="83.8389%" y="1285" width="0.0995%" height="15" fill="rgb(232,106,27)" fg:x="5058" fg:w="6"/><text x="84.0889%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (4 samples, 0.07%)</title><rect x="83.8720%" y="1269" width="0.0663%" height="15" fill="rgb(246,157,24)" fg:x="5060" fg:w="4"/><text x="84.1220%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (4 samples, 0.07%)</title><rect x="83.8720%" y="1253" width="0.0663%" height="15" fill="rgb(214,153,10)" fg:x="5060" fg:w="4"/><text x="84.1220%" y="1263.50"></text></g><g><title>BloomHash (2 samples, 0.03%)</title><rect x="83.9052%" y="1237" width="0.0332%" height="15" fill="rgb(212,94,6)" fg:x="5062" fg:w="2"/><text x="84.1552%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (1 samples, 0.02%)</title><rect x="83.9383%" y="1285" width="0.0166%" height="15" fill="rgb(254,25,27)" fg:x="5064" fg:w="1"/><text x="84.1883%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (13 samples, 0.22%)</title><rect x="83.8389%" y="1317" width="0.2155%" height="15" fill="rgb(250,43,52)" fg:x="5058" fg:w="13"/><text x="84.0889%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (13 samples, 0.22%)</title><rect x="83.8389%" y="1301" width="0.2155%" height="15" fill="rgb(221,226,40)" fg:x="5058" fg:w="13"/><text x="84.0889%" y="1311.50"></text></g><g><title>leveldb::Hash (6 samples, 0.10%)</title><rect x="83.9549%" y="1285" width="0.0995%" height="15" fill="rgb(235,162,34)" fg:x="5065" fg:w="6"/><text x="84.2049%" y="1295.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="84.0709%" y="1301" width="0.0166%" height="15" fill="rgb(239,24,26)" fg:x="5072" fg:w="1"/><text x="84.3209%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="84.0544%" y="1317" width="0.0497%" height="15" fill="rgb(244,226,11)" fg:x="5071" fg:w="3"/><text x="84.3044%" y="1327.50"></text></g><g><title>leveldb::MemTableIterator::key (1 samples, 0.02%)</title><rect x="84.0875%" y="1301" width="0.0166%" height="15" fill="rgb(225,23,10)" fg:x="5073" fg:w="1"/><text x="84.3375%" y="1311.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (1 samples, 0.02%)</title><rect x="84.0875%" y="1285" width="0.0166%" height="15" fill="rgb(249,125,6)" fg:x="5073" fg:w="1"/><text x="84.3375%" y="1295.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1 samples, 0.02%)</title><rect x="84.0875%" y="1269" width="0.0166%" height="15" fill="rgb(246,212,12)" fg:x="5073" fg:w="1"/><text x="84.3375%" y="1279.50"></text></g><g><title>leveldb::MemTableIterator::value (1 samples, 0.02%)</title><rect x="84.1041%" y="1317" width="0.0166%" height="15" fill="rgb(230,43,32)" fg:x="5074" fg:w="1"/><text x="84.3541%" y="1327.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="84.1041%" y="1301" width="0.0166%" height="15" fill="rgb(210,95,23)" fg:x="5074" fg:w="1"/><text x="84.3541%" y="1311.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="84.1041%" y="1285" width="0.0166%" height="15" fill="rgb(229,103,33)" fg:x="5074" fg:w="1"/><text x="84.3541%" y="1295.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.03%)</title><rect x="84.1207%" y="1317" width="0.0332%" height="15" fill="rgb(222,104,27)" fg:x="5075" fg:w="2"/><text x="84.3707%" y="1327.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="84.2201%" y="1077" width="0.0332%" height="15" fill="rgb(239,221,23)" fg:x="5081" fg:w="2"/><text x="84.4701%" y="1087.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="84.2035%" y="1109" width="0.0663%" height="15" fill="rgb(222,98,21)" fg:x="5080" fg:w="4"/><text x="84.4535%" y="1119.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="84.2035%" y="1093" width="0.0663%" height="15" fill="rgb(231,101,20)" fg:x="5080" fg:w="4"/><text x="84.4535%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.2533%" y="1077" width="0.0166%" height="15" fill="rgb(215,150,22)" fg:x="5083" fg:w="1"/><text x="84.5033%" y="1087.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="84.2035%" y="1125" width="0.0829%" height="15" fill="rgb(248,3,34)" fg:x="5080" fg:w="5"/><text x="84.4535%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.2698%" y="1109" width="0.0166%" height="15" fill="rgb(220,141,21)" fg:x="5084" fg:w="1"/><text x="84.5198%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.2698%" y="1093" width="0.0166%" height="15" fill="rgb(223,41,48)" fg:x="5084" fg:w="1"/><text x="84.5198%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.2698%" y="1077" width="0.0166%" height="15" fill="rgb(247,12,5)" fg:x="5084" fg:w="1"/><text x="84.5198%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.2698%" y="1061" width="0.0166%" height="15" fill="rgb(206,173,10)" fg:x="5084" fg:w="1"/><text x="84.5198%" y="1071.50"></text></g><g><title>[[ext4]] (8 samples, 0.13%)</title><rect x="84.1870%" y="1141" width="0.1326%" height="15" fill="rgb(233,214,37)" fg:x="5079" fg:w="8"/><text x="84.4370%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.2864%" y="1125" width="0.0332%" height="15" fill="rgb(238,86,43)" fg:x="5085" fg:w="2"/><text x="84.5364%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.2864%" y="1109" width="0.0332%" height="15" fill="rgb(212,182,8)" fg:x="5085" fg:w="2"/><text x="84.5364%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.2864%" y="1093" width="0.0332%" height="15" fill="rgb(240,91,47)" fg:x="5085" fg:w="2"/><text x="84.5364%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.2864%" y="1077" width="0.0332%" height="15" fill="rgb(209,138,26)" fg:x="5085" fg:w="2"/><text x="84.5364%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.3030%" y="1061" width="0.0166%" height="15" fill="rgb(231,163,20)" fg:x="5086" fg:w="1"/><text x="84.5530%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.3030%" y="1045" width="0.0166%" height="15" fill="rgb(214,91,54)" fg:x="5086" fg:w="1"/><text x="84.5530%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="84.3693%" y="1093" width="0.0166%" height="15" fill="rgb(230,32,17)" fg:x="5090" fg:w="1"/><text x="84.6193%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="84.3693%" y="1077" width="0.0166%" height="15" fill="rgb(231,34,34)" fg:x="5090" fg:w="1"/><text x="84.6193%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="84.3693%" y="1061" width="0.0166%" height="15" fill="rgb(224,228,27)" fg:x="5090" fg:w="1"/><text x="84.6193%" y="1071.50"></text></g><g><title>[[ext4]] (15 samples, 0.25%)</title><rect x="84.1538%" y="1173" width="0.2486%" height="15" fill="rgb(219,35,40)" fg:x="5077" fg:w="15"/><text x="84.4038%" y="1183.50"></text></g><g><title>[unknown] (13 samples, 0.22%)</title><rect x="84.1870%" y="1157" width="0.2155%" height="15" fill="rgb(234,42,8)" fg:x="5079" fg:w="13"/><text x="84.4370%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="84.3196%" y="1141" width="0.0829%" height="15" fill="rgb(226,75,22)" fg:x="5087" fg:w="5"/><text x="84.5696%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="84.3362%" y="1125" width="0.0663%" height="15" fill="rgb(242,203,28)" fg:x="5088" fg:w="4"/><text x="84.5862%" y="1135.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="84.3693%" y="1109" width="0.0332%" height="15" fill="rgb(221,3,9)" fg:x="5090" fg:w="2"/><text x="84.6193%" y="1119.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="84.3859%" y="1093" width="0.0166%" height="15" fill="rgb(214,34,31)" fg:x="5091" fg:w="1"/><text x="84.6359%" y="1103.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="84.3859%" y="1077" width="0.0166%" height="15" fill="rgb(252,119,15)" fg:x="5091" fg:w="1"/><text x="84.6359%" y="1087.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="84.3859%" y="1061" width="0.0166%" height="15" fill="rgb(244,224,31)" fg:x="5091" fg:w="1"/><text x="84.6359%" y="1071.50"></text></g><g><title>Flush (16 samples, 0.27%)</title><rect x="84.1538%" y="1301" width="0.2652%" height="15" fill="rgb(215,8,51)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1311.50"></text></g><g><title>FlushBuffer (16 samples, 0.27%)</title><rect x="84.1538%" y="1285" width="0.2652%" height="15" fill="rgb(207,24,1)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (16 samples, 0.27%)</title><rect x="84.1538%" y="1269" width="0.2652%" height="15" fill="rgb(245,90,0)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1279.50"></text></g><g><title>__GI___libc_write (16 samples, 0.27%)</title><rect x="84.1538%" y="1253" width="0.2652%" height="15" fill="rgb(246,43,48)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1263.50"></text></g><g><title>[unknown] (16 samples, 0.27%)</title><rect x="84.1538%" y="1237" width="0.2652%" height="15" fill="rgb(252,218,10)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1247.50"></text></g><g><title>[unknown] (16 samples, 0.27%)</title><rect x="84.1538%" y="1221" width="0.2652%" height="15" fill="rgb(231,24,35)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1231.50"></text></g><g><title>[unknown] (16 samples, 0.27%)</title><rect x="84.1538%" y="1205" width="0.2652%" height="15" fill="rgb(225,66,19)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1215.50"></text></g><g><title>[unknown] (16 samples, 0.27%)</title><rect x="84.1538%" y="1189" width="0.2652%" height="15" fill="rgb(214,96,51)" fg:x="5077" fg:w="16"/><text x="84.4038%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.4025%" y="1173" width="0.0166%" height="15" fill="rgb(251,151,47)" fg:x="5092" fg:w="1"/><text x="84.6525%" y="1183.50"></text></g><g><title>leveldb::TableBuilder::Flush (17 samples, 0.28%)</title><rect x="84.1538%" y="1317" width="0.2818%" height="15" fill="rgb(236,79,14)" fg:x="5077" fg:w="17"/><text x="84.4038%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.02%)</title><rect x="84.4190%" y="1301" width="0.0166%" height="15" fill="rgb(210,205,11)" fg:x="5093" fg:w="1"/><text x="84.6690%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="84.4190%" y="1285" width="0.0166%" height="15" fill="rgb(233,142,53)" fg:x="5093" fg:w="1"/><text x="84.6690%" y="1295.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="84.4190%" y="1269" width="0.0166%" height="15" fill="rgb(212,116,48)" fg:x="5093" fg:w="1"/><text x="84.6690%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="84.4190%" y="1253" width="0.0166%" height="15" fill="rgb(234,55,33)" fg:x="5093" fg:w="1"/><text x="84.6690%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="84.4190%" y="1237" width="0.0166%" height="15" fill="rgb(253,92,27)" fg:x="5093" fg:w="1"/><text x="84.6690%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::ok (1 samples, 0.02%)</title><rect x="84.4356%" y="1317" width="0.0166%" height="15" fill="rgb(220,7,35)" fg:x="5094" fg:w="1"/><text x="84.6856%" y="1327.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (89 samples, 1.48%)</title><rect x="82.9935%" y="1365" width="1.4752%" height="15" fill="rgb(246,124,6)" fg:x="5007" fg:w="89"/><text x="83.2435%" y="1375.50"></text></g><g><title>leveldb::BuildTable (89 samples, 1.48%)</title><rect x="82.9935%" y="1349" width="1.4752%" height="15" fill="rgb(212,111,51)" fg:x="5007" fg:w="89"/><text x="83.2435%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (82 samples, 1.36%)</title><rect x="83.1096%" y="1333" width="1.3592%" height="15" fill="rgb(253,116,7)" fg:x="5014" fg:w="82"/><text x="83.3596%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="84.4522%" y="1317" width="0.0166%" height="15" fill="rgb(213,145,18)" fg:x="5095" fg:w="1"/><text x="84.7022%" y="1327.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (96 samples, 1.59%)</title><rect x="82.8941%" y="1381" width="1.5912%" height="15" fill="rgb(219,149,7)" fg:x="5001" fg:w="96"/><text x="83.1441%" y="1391.50"></text></g><g><title>leveldb::MemTable::Unref (1 samples, 0.02%)</title><rect x="84.4688%" y="1365" width="0.0166%" height="15" fill="rgb(225,156,20)" fg:x="5096" fg:w="1"/><text x="84.7188%" y="1375.50"></text></g><g><title>leveldb::MemTable::~MemTable (1 samples, 0.02%)</title><rect x="84.4688%" y="1349" width="0.0166%" height="15" fill="rgb(211,98,19)" fg:x="5096" fg:w="1"/><text x="84.7188%" y="1359.50"></text></g><g><title>leveldb::Arena::~Arena (1 samples, 0.02%)</title><rect x="84.4688%" y="1333" width="0.0166%" height="15" fill="rgb(231,192,31)" fg:x="5096" fg:w="1"/><text x="84.7188%" y="1343.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="84.4688%" y="1317" width="0.0166%" height="15" fill="rgb(249,95,19)" fg:x="5096" fg:w="1"/><text x="84.7188%" y="1327.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="84.4688%" y="1301" width="0.0166%" height="15" fill="rgb(247,101,36)" fg:x="5096" fg:w="1"/><text x="84.7188%" y="1311.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.02%)</title><rect x="84.4688%" y="1285" width="0.0166%" height="15" fill="rgb(221,45,43)" fg:x="5096" fg:w="1"/><text x="84.7188%" y="1295.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="84.4688%" y="1269" width="0.0166%" height="15" fill="rgb(220,42,1)" fg:x="5096" fg:w="1"/><text x="84.7188%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (10 samples, 0.17%)</title><rect x="84.4853%" y="1381" width="0.1658%" height="15" fill="rgb(236,19,24)" fg:x="5097" fg:w="10"/><text x="84.7353%" y="1391.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="84.6345%" y="1365" width="0.0166%" height="15" fill="rgb(225,192,6)" fg:x="5106" fg:w="1"/><text x="84.8845%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="84.6345%" y="1349" width="0.0166%" height="15" fill="rgb(242,30,19)" fg:x="5106" fg:w="1"/><text x="84.8845%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="84.6345%" y="1333" width="0.0166%" height="15" fill="rgb(240,36,6)" fg:x="5106" fg:w="1"/><text x="84.8845%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="84.6345%" y="1317" width="0.0166%" height="15" fill="rgb(246,40,28)" fg:x="5106" fg:w="1"/><text x="84.8845%" y="1327.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="84.7671%" y="1109" width="0.0166%" height="15" fill="rgb(225,155,33)" fg:x="5114" fg:w="1"/><text x="85.0171%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="84.7671%" y="1093" width="0.0166%" height="15" fill="rgb(240,65,18)" fg:x="5114" fg:w="1"/><text x="85.0171%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="84.7671%" y="1077" width="0.0166%" height="15" fill="rgb(217,0,48)" fg:x="5114" fg:w="1"/><text x="85.0171%" y="1087.50"></text></g><g><title>[[ext4]] (16 samples, 0.27%)</title><rect x="84.7505%" y="1125" width="0.2652%" height="15" fill="rgb(217,80,15)" fg:x="5113" fg:w="16"/><text x="85.0005%" y="1135.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="84.7837%" y="1109" width="0.2321%" height="15" fill="rgb(253,43,51)" fg:x="5115" fg:w="14"/><text x="85.0337%" y="1119.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="84.8334%" y="1093" width="0.1823%" height="15" fill="rgb(246,60,4)" fg:x="5118" fg:w="11"/><text x="85.0834%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="84.9329%" y="1077" width="0.0829%" height="15" fill="rgb(230,40,54)" fg:x="5124" fg:w="5"/><text x="85.1829%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="84.9826%" y="1061" width="0.0332%" height="15" fill="rgb(208,20,44)" fg:x="5127" fg:w="2"/><text x="85.2326%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.9992%" y="1045" width="0.0166%" height="15" fill="rgb(230,22,22)" fg:x="5128" fg:w="1"/><text x="85.2492%" y="1055.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="84.9992%" y="1029" width="0.0166%" height="15" fill="rgb(207,57,4)" fg:x="5128" fg:w="1"/><text x="85.2492%" y="1039.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="84.9992%" y="1013" width="0.0166%" height="15" fill="rgb(242,130,33)" fg:x="5128" fg:w="1"/><text x="85.2492%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.9992%" y="997" width="0.0166%" height="15" fill="rgb(218,66,43)" fg:x="5128" fg:w="1"/><text x="85.2492%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.9992%" y="981" width="0.0166%" height="15" fill="rgb(236,105,16)" fg:x="5128" fg:w="1"/><text x="85.2492%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.9992%" y="965" width="0.0166%" height="15" fill="rgb(230,46,15)" fg:x="5128" fg:w="1"/><text x="85.2492%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.9992%" y="949" width="0.0166%" height="15" fill="rgb(251,172,40)" fg:x="5128" fg:w="1"/><text x="85.2492%" y="959.50"></text></g><g><title>[[ext4]] (20 samples, 0.33%)</title><rect x="84.7505%" y="1141" width="0.3315%" height="15" fill="rgb(225,217,32)" fg:x="5113" fg:w="20"/><text x="85.0005%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="85.0157%" y="1125" width="0.0663%" height="15" fill="rgb(243,10,29)" fg:x="5129" fg:w="4"/><text x="85.2657%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="85.0157%" y="1109" width="0.0663%" height="15" fill="rgb(207,102,10)" fg:x="5129" fg:w="4"/><text x="85.2657%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.0655%" y="1093" width="0.0166%" height="15" fill="rgb(241,125,5)" fg:x="5132" fg:w="1"/><text x="85.3155%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.0655%" y="1077" width="0.0166%" height="15" fill="rgb(230,125,29)" fg:x="5132" fg:w="1"/><text x="85.3155%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.0655%" y="1061" width="0.0166%" height="15" fill="rgb(223,65,44)" fg:x="5132" fg:w="1"/><text x="85.3155%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.0655%" y="1045" width="0.0166%" height="15" fill="rgb(224,188,28)" fg:x="5132" fg:w="1"/><text x="85.3155%" y="1055.50"></text></g><g><title>[[nvme]] (4 samples, 0.07%)</title><rect x="85.1815%" y="1061" width="0.0663%" height="15" fill="rgb(254,197,27)" fg:x="5139" fg:w="4"/><text x="85.4315%" y="1071.50"></text></g><g><title>[[nvme]] (4 samples, 0.07%)</title><rect x="85.1815%" y="1045" width="0.0663%" height="15" fill="rgb(220,200,25)" fg:x="5139" fg:w="4"/><text x="85.4315%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="85.1815%" y="1029" width="0.0663%" height="15" fill="rgb(239,225,54)" fg:x="5139" fg:w="4"/><text x="85.4315%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.1981%" y="1013" width="0.0497%" height="15" fill="rgb(211,59,40)" fg:x="5140" fg:w="3"/><text x="85.4481%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.1981%" y="997" width="0.0497%" height="15" fill="rgb(213,176,46)" fg:x="5140" fg:w="3"/><text x="85.4481%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2312%" y="981" width="0.0166%" height="15" fill="rgb(226,99,4)" fg:x="5142" fg:w="1"/><text x="85.4812%" y="991.50"></text></g><g><title>[[ext4]] (34 samples, 0.56%)</title><rect x="84.7008%" y="1157" width="0.5636%" height="15" fill="rgb(239,203,43)" fg:x="5110" fg:w="34"/><text x="84.9508%" y="1167.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="85.0820%" y="1141" width="0.1823%" height="15" fill="rgb(246,1,45)" fg:x="5133" fg:w="11"/><text x="85.3320%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="85.1318%" y="1125" width="0.1326%" height="15" fill="rgb(231,42,52)" fg:x="5136" fg:w="8"/><text x="85.3818%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="85.1649%" y="1109" width="0.0995%" height="15" fill="rgb(240,13,50)" fg:x="5138" fg:w="6"/><text x="85.4149%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="85.1649%" y="1093" width="0.0995%" height="15" fill="rgb(225,81,14)" fg:x="5138" fg:w="6"/><text x="85.4149%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="85.1649%" y="1077" width="0.0995%" height="15" fill="rgb(216,182,23)" fg:x="5138" fg:w="6"/><text x="85.4149%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2478%" y="1061" width="0.0166%" height="15" fill="rgb(233,137,19)" fg:x="5143" fg:w="1"/><text x="85.4978%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2478%" y="1045" width="0.0166%" height="15" fill="rgb(242,61,46)" fg:x="5143" fg:w="1"/><text x="85.4978%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2478%" y="1029" width="0.0166%" height="15" fill="rgb(221,168,51)" fg:x="5143" fg:w="1"/><text x="85.4978%" y="1039.50"></text></g><g><title>[[ext4]] (35 samples, 0.58%)</title><rect x="84.7008%" y="1189" width="0.5801%" height="15" fill="rgb(238,48,15)" fg:x="5110" fg:w="35"/><text x="84.9508%" y="1199.50"></text></g><g><title>[[ext4]] (35 samples, 0.58%)</title><rect x="84.7008%" y="1173" width="0.5801%" height="15" fill="rgb(216,13,16)" fg:x="5110" fg:w="35"/><text x="84.9508%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.2644%" y="1157" width="0.0166%" height="15" fill="rgb(223,185,34)" fg:x="5144" fg:w="1"/><text x="85.5144%" y="1167.50"></text></g><g><title>Sync (48 samples, 0.80%)</title><rect x="84.6511%" y="1365" width="0.7956%" height="15" fill="rgb(228,94,42)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (48 samples, 0.80%)</title><rect x="84.6511%" y="1349" width="0.7956%" height="15" fill="rgb(218,166,43)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1359.50"></text></g><g><title>fdatasync (48 samples, 0.80%)</title><rect x="84.6511%" y="1333" width="0.7956%" height="15" fill="rgb(232,30,50)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1343.50"></text></g><g><title>[unknown] (48 samples, 0.80%)</title><rect x="84.6511%" y="1317" width="0.7956%" height="15" fill="rgb(245,206,45)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1327.50"></text></g><g><title>[unknown] (48 samples, 0.80%)</title><rect x="84.6511%" y="1301" width="0.7956%" height="15" fill="rgb(220,56,22)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1311.50"></text></g><g><title>[unknown] (48 samples, 0.80%)</title><rect x="84.6511%" y="1285" width="0.7956%" height="15" fill="rgb(239,129,38)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1295.50"></text></g><g><title>[[ext4]] (48 samples, 0.80%)</title><rect x="84.6511%" y="1269" width="0.7956%" height="15" fill="rgb(207,68,41)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1279.50"></text></g><g><title>[unknown] (48 samples, 0.80%)</title><rect x="84.6511%" y="1253" width="0.7956%" height="15" fill="rgb(221,21,7)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1263.50"></text></g><g><title>[unknown] (48 samples, 0.80%)</title><rect x="84.6511%" y="1237" width="0.7956%" height="15" fill="rgb(240,33,25)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1247.50"></text></g><g><title>[unknown] (48 samples, 0.80%)</title><rect x="84.6511%" y="1221" width="0.7956%" height="15" fill="rgb(242,119,10)" fg:x="5107" fg:w="48"/><text x="84.9011%" y="1231.50"></text></g><g><title>[unknown] (47 samples, 0.78%)</title><rect x="84.6677%" y="1205" width="0.7790%" height="15" fill="rgb(214,149,40)" fg:x="5108" fg:w="47"/><text x="84.9177%" y="1215.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="85.2810%" y="1189" width="0.1658%" height="15" fill="rgb(228,25,36)" fg:x="5145" fg:w="10"/><text x="85.5310%" y="1199.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="85.2810%" y="1173" width="0.1658%" height="15" fill="rgb(222,59,15)" fg:x="5145" fg:w="10"/><text x="85.5310%" y="1183.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="85.2810%" y="1157" width="0.1658%" height="15" fill="rgb(218,170,0)" fg:x="5145" fg:w="10"/><text x="85.5310%" y="1167.50"></text></g><g><title>[unknown] (10 samples, 0.17%)</title><rect x="85.2810%" y="1141" width="0.1658%" height="15" fill="rgb(232,173,23)" fg:x="5145" fg:w="10"/><text x="85.5310%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="85.3141%" y="1125" width="0.1326%" height="15" fill="rgb(218,116,1)" fg:x="5147" fg:w="8"/><text x="85.5641%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="85.3473%" y="1109" width="0.0995%" height="15" fill="rgb(207,34,4)" fg:x="5149" fg:w="6"/><text x="85.5973%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="85.3473%" y="1093" width="0.0995%" height="15" fill="rgb(229,54,52)" fg:x="5149" fg:w="6"/><text x="85.5973%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="85.3473%" y="1077" width="0.0995%" height="15" fill="rgb(211,86,23)" fg:x="5149" fg:w="6"/><text x="85.5973%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="85.3473%" y="1061" width="0.0995%" height="15" fill="rgb(254,153,34)" fg:x="5149" fg:w="6"/><text x="85.5973%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3970%" y="1045" width="0.0497%" height="15" fill="rgb(219,220,14)" fg:x="5152" fg:w="3"/><text x="85.6470%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3970%" y="1029" width="0.0497%" height="15" fill="rgb(247,8,26)" fg:x="5152" fg:w="3"/><text x="85.6470%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Close (1 samples, 0.02%)</title><rect x="85.4467%" y="1365" width="0.0166%" height="15" fill="rgb(213,129,42)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1375.50"></text></g><g><title>__close (1 samples, 0.02%)</title><rect x="85.4467%" y="1349" width="0.0166%" height="15" fill="rgb(225,95,41)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4467%" y="1333" width="0.0166%" height="15" fill="rgb(215,134,24)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4467%" y="1317" width="0.0166%" height="15" fill="rgb(235,23,54)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4467%" y="1301" width="0.0166%" height="15" fill="rgb(229,96,31)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4467%" y="1285" width="0.0166%" height="15" fill="rgb(206,111,12)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1295.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.4467%" y="1269" width="0.0166%" height="15" fill="rgb(222,177,8)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1279.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.4467%" y="1253" width="0.0166%" height="15" fill="rgb(251,36,52)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1263.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.4467%" y="1237" width="0.0166%" height="15" fill="rgb(216,182,29)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1247.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.4467%" y="1221" width="0.0166%" height="15" fill="rgb(241,145,50)" fg:x="5155" fg:w="1"/><text x="85.6967%" y="1231.50"></text></g><g><title>FlushBuffer (1 samples, 0.02%)</title><rect x="85.4633%" y="1301" width="0.0166%" height="15" fill="rgb(231,71,35)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="85.4633%" y="1285" width="0.0166%" height="15" fill="rgb(218,22,17)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1295.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="85.4633%" y="1269" width="0.0166%" height="15" fill="rgb(225,227,6)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4633%" y="1253" width="0.0166%" height="15" fill="rgb(224,204,17)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4633%" y="1237" width="0.0166%" height="15" fill="rgb(227,61,28)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4633%" y="1221" width="0.0166%" height="15" fill="rgb(242,148,23)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4633%" y="1205" width="0.0166%" height="15" fill="rgb(237,105,33)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.4633%" y="1189" width="0.0166%" height="15" fill="rgb(238,218,40)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4633%" y="1173" width="0.0166%" height="15" fill="rgb(209,126,11)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.4633%" y="1157" width="0.0166%" height="15" fill="rgb(245,90,11)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="85.4633%" y="1141" width="0.0166%" height="15" fill="rgb(211,195,10)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4633%" y="1125" width="0.0166%" height="15" fill="rgb(231,45,45)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4633%" y="1109" width="0.0166%" height="15" fill="rgb(246,100,43)" fg:x="5156" fg:w="1"/><text x="85.7133%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::Finish (2 samples, 0.03%)</title><rect x="85.4633%" y="1365" width="0.0332%" height="15" fill="rgb(241,193,8)" fg:x="5156" fg:w="2"/><text x="85.7133%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (2 samples, 0.03%)</title><rect x="85.4633%" y="1349" width="0.0332%" height="15" fill="rgb(208,76,19)" fg:x="5156" fg:w="2"/><text x="85.7133%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (2 samples, 0.03%)</title><rect x="85.4633%" y="1333" width="0.0332%" height="15" fill="rgb(223,69,40)" fg:x="5156" fg:w="2"/><text x="85.7133%" y="1343.50"></text></g><g><title>Append (2 samples, 0.03%)</title><rect x="85.4633%" y="1317" width="0.0332%" height="15" fill="rgb(207,120,39)" fg:x="5156" fg:w="2"/><text x="85.7133%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="85.4799%" y="1301" width="0.0166%" height="15" fill="rgb(212,209,28)" fg:x="5157" fg:w="1"/><text x="85.7299%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="85.4799%" y="1285" width="0.0166%" height="15" fill="rgb(246,82,29)" fg:x="5157" fg:w="1"/><text x="85.7299%" y="1295.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (52 samples, 0.86%)</title><rect x="84.6511%" y="1381" width="0.8619%" height="15" fill="rgb(239,6,40)" fg:x="5107" fg:w="52"/><text x="84.9011%" y="1391.50"></text></g><g><title>leveldb::TableCache::NewIterator (1 samples, 0.02%)</title><rect x="85.4964%" y="1365" width="0.0166%" height="15" fill="rgb(228,181,35)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1375.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.02%)</title><rect x="85.4964%" y="1349" width="0.0166%" height="15" fill="rgb(238,151,2)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1359.50"></text></g><g><title>NewRandomAccessFile (1 samples, 0.02%)</title><rect x="85.4964%" y="1333" width="0.0166%" height="15" fill="rgb(236,94,18)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewRandomAccessFile (1 samples, 0.02%)</title><rect x="85.4964%" y="1317" width="0.0166%" height="15" fill="rgb(208,38,14)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1327.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="85.4964%" y="1301" width="0.0166%" height="15" fill="rgb(234,215,27)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4964%" y="1285" width="0.0166%" height="15" fill="rgb(254,211,53)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4964%" y="1269" width="0.0166%" height="15" fill="rgb(216,175,11)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4964%" y="1253" width="0.0166%" height="15" fill="rgb(246,179,26)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.4964%" y="1237" width="0.0166%" height="15" fill="rgb(249,19,52)" fg:x="5158" fg:w="1"/><text x="85.7464%" y="1247.50"></text></g><g><title>leveldb::DBImpl::OpenCompactionOutputFile (1 samples, 0.02%)</title><rect x="85.5130%" y="1381" width="0.0166%" height="15" fill="rgb(230,42,52)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1391.50"></text></g><g><title>NewWritableFile (1 samples, 0.02%)</title><rect x="85.5130%" y="1365" width="0.0166%" height="15" fill="rgb(221,171,0)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (1 samples, 0.02%)</title><rect x="85.5130%" y="1349" width="0.0166%" height="15" fill="rgb(222,177,40)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1359.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="85.5130%" y="1333" width="0.0166%" height="15" fill="rgb(247,34,16)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1317" width="0.0166%" height="15" fill="rgb(213,217,37)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1301" width="0.0166%" height="15" fill="rgb(231,189,24)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1285" width="0.0166%" height="15" fill="rgb(214,22,9)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1269" width="0.0166%" height="15" fill="rgb(212,70,22)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1253" width="0.0166%" height="15" fill="rgb(249,64,51)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1237" width="0.0166%" height="15" fill="rgb(249,148,20)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1221" width="0.0166%" height="15" fill="rgb(246,46,48)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1205" width="0.0166%" height="15" fill="rgb(217,34,48)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1189" width="0.0166%" height="15" fill="rgb(222,45,26)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.5130%" y="1173" width="0.0166%" height="15" fill="rgb(230,201,36)" fg:x="5159" fg:w="1"/><text x="85.7630%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="85.5296%" y="1381" width="0.0663%" height="15" fill="rgb(217,30,43)" fg:x="5160" fg:w="4"/><text x="85.7796%" y="1391.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="85.5793%" y="1365" width="0.0166%" height="15" fill="rgb(230,197,40)" fg:x="5163" fg:w="1"/><text x="85.8293%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.12%)</title><rect x="85.5959%" y="1365" width="0.1160%" height="15" fill="rgb(239,181,18)" fg:x="5164" fg:w="7"/><text x="85.8459%" y="1375.50"></text></g><g><title>leveldb::Slice::compare (4 samples, 0.07%)</title><rect x="85.6456%" y="1349" width="0.0663%" height="15" fill="rgb(222,60,39)" fg:x="5167" fg:w="4"/><text x="85.8956%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1 samples, 0.02%)</title><rect x="85.7119%" y="1365" width="0.0166%" height="15" fill="rgb(210,60,22)" fg:x="5171" fg:w="1"/><text x="85.9619%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::value (3 samples, 0.05%)</title><rect x="85.7285%" y="1365" width="0.0497%" height="15" fill="rgb(239,213,48)" fg:x="5172" fg:w="3"/><text x="85.9785%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="86.1263%" y="1349" width="0.0497%" height="15" fill="rgb(253,214,23)" fg:x="5196" fg:w="3"/><text x="86.3763%" y="1359.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="86.1595%" y="1333" width="0.0166%" height="15" fill="rgb(211,98,45)" fg:x="5198" fg:w="1"/><text x="86.4095%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (3 samples, 0.05%)</title><rect x="86.1760%" y="1349" width="0.0497%" height="15" fill="rgb(239,130,44)" fg:x="5199" fg:w="3"/><text x="86.4260%" y="1359.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="86.2092%" y="1333" width="0.0166%" height="15" fill="rgb(222,181,35)" fg:x="5201" fg:w="1"/><text x="86.4592%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (3 samples, 0.05%)</title><rect x="86.2258%" y="1349" width="0.0497%" height="15" fill="rgb(219,219,49)" fg:x="5202" fg:w="3"/><text x="86.4758%" y="1359.50"></text></g><g><title>[bitcoind-base] (1 samples, 0.02%)</title><rect x="86.3086%" y="1333" width="0.0166%" height="15" fill="rgb(227,161,51)" fg:x="5207" fg:w="1"/><text x="86.5586%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="86.3086%" y="1317" width="0.0166%" height="15" fill="rgb(239,112,27)" fg:x="5207" fg:w="1"/><text x="86.5586%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="86.3252%" y="1333" width="0.0663%" height="15" fill="rgb(248,122,18)" fg:x="5208" fg:w="4"/><text x="86.5752%" y="1343.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.03%)</title><rect x="86.3584%" y="1317" width="0.0332%" height="15" fill="rgb(245,130,23)" fg:x="5210" fg:w="2"/><text x="86.6084%" y="1327.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.03%)</title><rect x="86.3915%" y="1333" width="0.0332%" height="15" fill="rgb(211,225,28)" fg:x="5212" fg:w="2"/><text x="86.6415%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="86.4247%" y="1333" width="0.0166%" height="15" fill="rgb(242,105,44)" fg:x="5214" fg:w="1"/><text x="86.6747%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.08%)</title><rect x="86.4412%" y="1333" width="0.0829%" height="15" fill="rgb(216,183,46)" fg:x="5215" fg:w="5"/><text x="86.6912%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (16 samples, 0.27%)</title><rect x="86.2755%" y="1349" width="0.2652%" height="15" fill="rgb(227,112,9)" fg:x="5205" fg:w="16"/><text x="86.5255%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="86.5241%" y="1333" width="0.0166%" height="15" fill="rgb(244,21,0)" fg:x="5220" fg:w="1"/><text x="86.7741%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="86.5407%" y="1333" width="0.0166%" height="15" fill="rgb(236,185,14)" fg:x="5221" fg:w="1"/><text x="86.7907%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (4 samples, 0.07%)</title><rect x="86.5573%" y="1333" width="0.0663%" height="15" fill="rgb(236,170,30)" fg:x="5222" fg:w="4"/><text x="86.8073%" y="1343.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="86.6070%" y="1317" width="0.0166%" height="15" fill="rgb(209,198,51)" fg:x="5225" fg:w="1"/><text x="86.8570%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (3 samples, 0.05%)</title><rect x="86.6236%" y="1333" width="0.0497%" height="15" fill="rgb(205,171,26)" fg:x="5226" fg:w="3"/><text x="86.8736%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.03%)</title><rect x="86.6401%" y="1317" width="0.0332%" height="15" fill="rgb(246,41,49)" fg:x="5227" fg:w="2"/><text x="86.8901%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.03%)</title><rect x="86.6401%" y="1301" width="0.0332%" height="15" fill="rgb(240,229,12)" fg:x="5227" fg:w="2"/><text x="86.8901%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="86.6401%" y="1285" width="0.0332%" height="15" fill="rgb(212,8,54)" fg:x="5227" fg:w="2"/><text x="86.8901%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="86.6567%" y="1269" width="0.0166%" height="15" fill="rgb(230,114,13)" fg:x="5228" fg:w="1"/><text x="86.9067%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="86.6567%" y="1253" width="0.0166%" height="15" fill="rgb(229,130,28)" fg:x="5228" fg:w="1"/><text x="86.9067%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="86.6733%" y="1333" width="0.0166%" height="15" fill="rgb(206,139,15)" fg:x="5229" fg:w="1"/><text x="86.9233%" y="1343.50"></text></g><g><title>leveldb::Slice::data (1 samples, 0.02%)</title><rect x="86.6899%" y="1317" width="0.0166%" height="15" fill="rgb(241,188,35)" fg:x="5230" fg:w="1"/><text x="86.9399%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="86.7064%" y="1285" width="0.0166%" height="15" fill="rgb(208,224,26)" fg:x="5231" fg:w="1"/><text x="86.9564%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="86.7064%" y="1269" width="0.0166%" height="15" fill="rgb(251,131,28)" fg:x="5231" fg:w="1"/><text x="86.9564%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.03%)</title><rect x="86.7064%" y="1317" width="0.0332%" height="15" fill="rgb(208,153,1)" fg:x="5231" fg:w="2"/><text x="86.9564%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.03%)</title><rect x="86.7064%" y="1301" width="0.0332%" height="15" fill="rgb(234,33,36)" fg:x="5231" fg:w="2"/><text x="86.9564%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="86.7230%" y="1285" width="0.0166%" height="15" fill="rgb(246,42,29)" fg:x="5232" fg:w="1"/><text x="86.9730%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="86.7230%" y="1269" width="0.0166%" height="15" fill="rgb(251,114,16)" fg:x="5232" fg:w="1"/><text x="86.9730%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="86.7230%" y="1253" width="0.0166%" height="15" fill="rgb(233,13,38)" fg:x="5232" fg:w="1"/><text x="86.9730%" y="1263.50"></text></g><g><title>leveldb::PutVarint32 (13 samples, 0.22%)</title><rect x="86.5407%" y="1349" width="0.2155%" height="15" fill="rgb(247,120,19)" fg:x="5221" fg:w="13"/><text x="86.7907%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (4 samples, 0.07%)</title><rect x="86.6899%" y="1333" width="0.0663%" height="15" fill="rgb(205,11,16)" fg:x="5230" fg:w="4"/><text x="86.9399%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="86.7396%" y="1317" width="0.0166%" height="15" fill="rgb(228,185,19)" fg:x="5233" fg:w="1"/><text x="86.9896%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="86.7396%" y="1301" width="0.0166%" height="15" fill="rgb(239,88,52)" fg:x="5233" fg:w="1"/><text x="86.9896%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="86.7396%" y="1285" width="0.0166%" height="15" fill="rgb(219,23,1)" fg:x="5233" fg:w="1"/><text x="86.9896%" y="1295.50"></text></g><g><title>leveldb::PutVarint64 (1 samples, 0.02%)</title><rect x="86.7562%" y="1349" width="0.0166%" height="15" fill="rgb(253,177,16)" fg:x="5234" fg:w="1"/><text x="87.0062%" y="1359.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="86.7727%" y="1349" width="0.0166%" height="15" fill="rgb(225,150,40)" fg:x="5235" fg:w="1"/><text x="87.0227%" y="1359.50"></text></g><g><title>leveldb::Slice::data (1 samples, 0.02%)</title><rect x="86.7893%" y="1349" width="0.0166%" height="15" fill="rgb(208,108,30)" fg:x="5236" fg:w="1"/><text x="87.0393%" y="1359.50"></text></g><g><title>leveldb::Slice::operator[] (10 samples, 0.17%)</title><rect x="86.8059%" y="1349" width="0.1658%" height="15" fill="rgb(214,122,4)" fg:x="5237" fg:w="10"/><text x="87.0559%" y="1359.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="87.0214%" y="1333" width="0.0166%" height="15" fill="rgb(229,74,37)" fg:x="5250" fg:w="1"/><text x="87.2714%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::ok (2 samples, 0.03%)</title><rect x="87.0380%" y="1333" width="0.0332%" height="15" fill="rgb(233,61,41)" fg:x="5251" fg:w="2"/><text x="87.2880%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (7 samples, 0.12%)</title><rect x="86.9717%" y="1349" width="0.1160%" height="15" fill="rgb(238,191,5)" fg:x="5247" fg:w="7"/><text x="87.2217%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="87.0711%" y="1333" width="0.0166%" height="15" fill="rgb(233,78,24)" fg:x="5253" fg:w="1"/><text x="87.3211%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="87.0711%" y="1317" width="0.0166%" height="15" fill="rgb(211,142,8)" fg:x="5253" fg:w="1"/><text x="87.3211%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="87.0711%" y="1301" width="0.0166%" height="15" fill="rgb(253,38,53)" fg:x="5253" fg:w="1"/><text x="87.3211%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="87.0711%" y="1285" width="0.0166%" height="15" fill="rgb(234,63,51)" fg:x="5253" fg:w="1"/><text x="87.3211%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::status (3 samples, 0.05%)</title><rect x="87.0877%" y="1349" width="0.0497%" height="15" fill="rgb(205,23,31)" fg:x="5254" fg:w="3"/><text x="87.3377%" y="1359.50"></text></g><g><title>leveldb::Status::Status (2 samples, 0.03%)</title><rect x="87.1043%" y="1333" width="0.0332%" height="15" fill="rgb(210,184,50)" fg:x="5255" fg:w="2"/><text x="87.3543%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (12 samples, 0.20%)</title><rect x="87.1374%" y="1333" width="0.1989%" height="15" fill="rgb(222,112,26)" fg:x="5257" fg:w="12"/><text x="87.3874%" y="1343.50"></text></g><g><title>leveldb::operator== (14 samples, 0.23%)</title><rect x="87.1374%" y="1349" width="0.2321%" height="15" fill="rgb(250,98,18)" fg:x="5257" fg:w="14"/><text x="87.3874%" y="1359.50"></text></g><g><title>memcpy@plt (2 samples, 0.03%)</title><rect x="87.3363%" y="1333" width="0.0332%" height="15" fill="rgb(250,34,12)" fg:x="5269" fg:w="2"/><text x="87.5863%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="87.4523%" y="1317" width="0.0166%" height="15" fill="rgb(236,141,30)" fg:x="5276" fg:w="1"/><text x="87.7023%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="87.4523%" y="1301" width="0.0166%" height="15" fill="rgb(246,134,38)" fg:x="5276" fg:w="1"/><text x="87.7023%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (6 samples, 0.10%)</title><rect x="87.4689%" y="1317" width="0.0995%" height="15" fill="rgb(240,114,4)" fg:x="5277" fg:w="6"/><text x="87.7189%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (6 samples, 0.10%)</title><rect x="87.4689%" y="1301" width="0.0995%" height="15" fill="rgb(243,113,39)" fg:x="5277" fg:w="6"/><text x="87.7189%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (6 samples, 0.10%)</title><rect x="87.4689%" y="1285" width="0.0995%" height="15" fill="rgb(239,215,4)" fg:x="5277" fg:w="6"/><text x="87.7189%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.03%)</title><rect x="87.5352%" y="1269" width="0.0332%" height="15" fill="rgb(236,229,45)" fg:x="5281" fg:w="2"/><text x="87.7852%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (13 samples, 0.22%)</title><rect x="87.3695%" y="1333" width="0.2155%" height="15" fill="rgb(242,2,6)" fg:x="5271" fg:w="13"/><text x="87.6195%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="87.5684%" y="1317" width="0.0166%" height="15" fill="rgb(239,108,21)" fg:x="5283" fg:w="1"/><text x="87.8184%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="87.5684%" y="1301" width="0.0166%" height="15" fill="rgb(215,168,34)" fg:x="5283" fg:w="1"/><text x="87.8184%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="87.5684%" y="1285" width="0.0166%" height="15" fill="rgb(238,31,17)" fg:x="5283" fg:w="1"/><text x="87.8184%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (14 samples, 0.23%)</title><rect x="87.3695%" y="1349" width="0.2321%" height="15" fill="rgb(220,133,11)" fg:x="5271" fg:w="14"/><text x="87.6195%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="87.5849%" y="1333" width="0.0166%" height="15" fill="rgb(212,158,23)" fg:x="5284" fg:w="1"/><text x="87.8349%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="87.5849%" y="1317" width="0.0166%" height="15" fill="rgb(223,172,7)" fg:x="5284" fg:w="1"/><text x="87.8349%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (3 samples, 0.05%)</title><rect x="87.6015%" y="1349" width="0.0497%" height="15" fill="rgb(244,3,52)" fg:x="5285" fg:w="3"/><text x="87.8515%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (3 samples, 0.05%)</title><rect x="87.6015%" y="1333" width="0.0497%" height="15" fill="rgb(207,69,27)" fg:x="5285" fg:w="3"/><text x="87.8515%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (2 samples, 0.03%)</title><rect x="87.6181%" y="1317" width="0.0332%" height="15" fill="rgb(213,136,45)" fg:x="5286" fg:w="2"/><text x="87.8681%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="87.6347%" y="1301" width="0.0166%" height="15" fill="rgb(218,79,17)" fg:x="5287" fg:w="1"/><text x="87.8847%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="87.6347%" y="1285" width="0.0166%" height="15" fill="rgb(216,106,36)" fg:x="5287" fg:w="1"/><text x="87.8847%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (114 samples, 1.89%)</title><rect x="85.7782%" y="1365" width="1.8896%" height="15" fill="rgb(251,27,45)" fg:x="5175" fg:w="114"/><text x="86.0282%" y="1375.50">l..</text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="87.6513%" y="1349" width="0.0166%" height="15" fill="rgb(232,21,34)" fg:x="5288" fg:w="1"/><text x="87.9013%" y="1359.50"></text></g><g><title>unsigned int&amp; std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::emplace_back&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="87.6513%" y="1333" width="0.0166%" height="15" fill="rgb(249,191,16)" fg:x="5288" fg:w="1"/><text x="87.9013%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.02%)</title><rect x="87.6678%" y="1365" width="0.0166%" height="15" fill="rgb(224,88,20)" fg:x="5289" fg:w="1"/><text x="87.9178%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6678%" y="1349" width="0.0166%" height="15" fill="rgb(237,93,27)" fg:x="5289" fg:w="1"/><text x="87.9178%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6678%" y="1333" width="0.0166%" height="15" fill="rgb(226,198,48)" fg:x="5289" fg:w="1"/><text x="87.9178%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6678%" y="1317" width="0.0166%" height="15" fill="rgb(207,162,53)" fg:x="5289" fg:w="1"/><text x="87.9178%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6678%" y="1301" width="0.0166%" height="15" fill="rgb(207,169,9)" fg:x="5289" fg:w="1"/><text x="87.9178%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6678%" y="1285" width="0.0166%" height="15" fill="rgb(224,166,46)" fg:x="5289" fg:w="1"/><text x="87.9178%" y="1295.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (2 samples, 0.03%)</title><rect x="87.7507%" y="1349" width="0.0332%" height="15" fill="rgb(233,26,6)" fg:x="5294" fg:w="2"/><text x="88.0007%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.03%)</title><rect x="87.7507%" y="1333" width="0.0332%" height="15" fill="rgb(218,106,45)" fg:x="5294" fg:w="2"/><text x="88.0007%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.03%)</title><rect x="87.7507%" y="1317" width="0.0332%" height="15" fill="rgb(240,217,4)" fg:x="5294" fg:w="2"/><text x="88.0007%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="87.7673%" y="1301" width="0.0166%" height="15" fill="rgb(246,171,10)" fg:x="5295" fg:w="1"/><text x="88.0173%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="87.7673%" y="1285" width="0.0166%" height="15" fill="rgb(223,197,30)" fg:x="5295" fg:w="1"/><text x="88.0173%" y="1295.50"></text></g><g><title>leveldb::Slice::data (1 samples, 0.02%)</title><rect x="87.7839%" y="1349" width="0.0166%" height="15" fill="rgb(207,92,16)" fg:x="5296" fg:w="1"/><text x="88.0339%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (8 samples, 0.13%)</title><rect x="87.6844%" y="1365" width="0.1326%" height="15" fill="rgb(211,6,44)" fg:x="5290" fg:w="8"/><text x="87.9344%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="87.8004%" y="1349" width="0.0166%" height="15" fill="rgb(219,139,2)" fg:x="5297" fg:w="1"/><text x="88.0504%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="87.8004%" y="1333" width="0.0166%" height="15" fill="rgb(224,103,21)" fg:x="5297" fg:w="1"/><text x="88.0504%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="87.8004%" y="1317" width="0.0166%" height="15" fill="rgb(254,110,48)" fg:x="5297" fg:w="1"/><text x="88.0504%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="87.8004%" y="1301" width="0.0166%" height="15" fill="rgb(212,88,19)" fg:x="5297" fg:w="1"/><text x="88.0504%" y="1311.50"></text></g><g><title>leveldb::EncodeVarint32 (7 samples, 0.12%)</title><rect x="87.8170%" y="1365" width="0.1160%" height="15" fill="rgb(248,103,6)" fg:x="5298" fg:w="7"/><text x="88.0670%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="87.9662%" y="1317" width="0.0166%" height="15" fill="rgb(214,53,46)" fg:x="5307" fg:w="1"/><text x="88.2162%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="87.9662%" y="1301" width="0.0166%" height="15" fill="rgb(236,190,24)" fg:x="5307" fg:w="1"/><text x="88.2162%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="87.9828%" y="1317" width="0.0332%" height="15" fill="rgb(254,58,28)" fg:x="5308" fg:w="2"/><text x="88.2328%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="87.9828%" y="1301" width="0.0332%" height="15" fill="rgb(243,63,27)" fg:x="5308" fg:w="2"/><text x="88.2328%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.03%)</title><rect x="87.9828%" y="1285" width="0.0332%" height="15" fill="rgb(206,81,20)" fg:x="5308" fg:w="2"/><text x="88.2328%" y="1295.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="87.9993%" y="1269" width="0.0166%" height="15" fill="rgb(252,69,51)" fg:x="5309" fg:w="1"/><text x="88.2493%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (7 samples, 0.12%)</title><rect x="87.9330%" y="1365" width="0.1160%" height="15" fill="rgb(222,213,4)" fg:x="5305" fg:w="7"/><text x="88.1830%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (6 samples, 0.10%)</title><rect x="87.9496%" y="1349" width="0.0995%" height="15" fill="rgb(226,198,12)" fg:x="5306" fg:w="6"/><text x="88.1996%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.10%)</title><rect x="87.9496%" y="1333" width="0.0995%" height="15" fill="rgb(248,115,11)" fg:x="5306" fg:w="6"/><text x="88.1996%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (2 samples, 0.03%)</title><rect x="88.0159%" y="1317" width="0.0332%" height="15" fill="rgb(221,148,54)" fg:x="5310" fg:w="2"/><text x="88.2659%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (2 samples, 0.03%)</title><rect x="88.0159%" y="1301" width="0.0332%" height="15" fill="rgb(214,209,51)" fg:x="5310" fg:w="2"/><text x="88.2659%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="88.0325%" y="1285" width="0.0166%" height="15" fill="rgb(249,116,53)" fg:x="5311" fg:w="1"/><text x="88.2825%" y="1295.50"></text></g><g><title>BloomHash (3 samples, 0.05%)</title><rect x="88.4469%" y="1317" width="0.0497%" height="15" fill="rgb(248,170,1)" fg:x="5336" fg:w="3"/><text x="88.6969%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (17 samples, 0.28%)</title><rect x="88.4966%" y="1301" width="0.2818%" height="15" fill="rgb(244,105,10)" fg:x="5339" fg:w="17"/><text x="88.7466%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (51 samples, 0.85%)</title><rect x="88.0822%" y="1333" width="0.8454%" height="15" fill="rgb(229,100,5)" fg:x="5314" fg:w="51"/><text x="88.3322%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (26 samples, 0.43%)</title><rect x="88.4966%" y="1317" width="0.4310%" height="15" fill="rgb(233,221,39)" fg:x="5339" fg:w="26"/><text x="88.7466%" y="1327.50"></text></g><g><title>leveldb::Hash (9 samples, 0.15%)</title><rect x="88.7784%" y="1301" width="0.1492%" height="15" fill="rgb(233,88,21)" fg:x="5356" fg:w="9"/><text x="89.0284%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1285" width="0.0166%" height="15" fill="rgb(206,13,0)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1269" width="0.0166%" height="15" fill="rgb(242,15,35)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1253" width="0.0166%" height="15" fill="rgb(247,142,41)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1237" width="0.0166%" height="15" fill="rgb(245,51,29)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1221" width="0.0166%" height="15" fill="rgb(228,209,43)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1205" width="0.0166%" height="15" fill="rgb(233,185,9)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1215.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="88.9110%" y="1189" width="0.0166%" height="15" fill="rgb(226,93,0)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1173" width="0.0166%" height="15" fill="rgb(245,194,43)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1157" width="0.0166%" height="15" fill="rgb(211,145,34)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9110%" y="1141" width="0.0166%" height="15" fill="rgb(231,228,28)" fg:x="5364" fg:w="1"/><text x="89.1610%" y="1151.50"></text></g><g><title>leveldb::Hash (21 samples, 0.35%)</title><rect x="88.9276%" y="1333" width="0.3481%" height="15" fill="rgb(236,149,4)" fg:x="5365" fg:w="21"/><text x="89.1776%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Flush (1 samples, 0.02%)</title><rect x="89.2757%" y="1317" width="0.0166%" height="15" fill="rgb(234,114,38)" fg:x="5386" fg:w="1"/><text x="89.5257%" y="1327.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="89.2757%" y="1301" width="0.0166%" height="15" fill="rgb(246,132,51)" fg:x="5386" fg:w="1"/><text x="89.5257%" y="1311.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="89.2757%" y="1285" width="0.0166%" height="15" fill="rgb(251,137,22)" fg:x="5386" fg:w="1"/><text x="89.5257%" y="1295.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (3 samples, 0.05%)</title><rect x="89.2757%" y="1333" width="0.0497%" height="15" fill="rgb(243,59,52)" fg:x="5386" fg:w="3"/><text x="89.5257%" y="1343.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (2 samples, 0.03%)</title><rect x="89.2922%" y="1317" width="0.0332%" height="15" fill="rgb(239,56,28)" fg:x="5387" fg:w="2"/><text x="89.5422%" y="1327.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (2 samples, 0.03%)</title><rect x="89.2922%" y="1301" width="0.0332%" height="15" fill="rgb(218,168,27)" fg:x="5387" fg:w="2"/><text x="89.5422%" y="1311.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (2 samples, 0.03%)</title><rect x="89.2922%" y="1285" width="0.0332%" height="15" fill="rgb(232,165,11)" fg:x="5387" fg:w="2"/><text x="89.5422%" y="1295.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (2 samples, 0.03%)</title><rect x="89.2922%" y="1269" width="0.0332%" height="15" fill="rgb(253,55,41)" fg:x="5387" fg:w="2"/><text x="89.5422%" y="1279.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="89.3088%" y="1253" width="0.0166%" height="15" fill="rgb(233,206,24)" fg:x="5388" fg:w="1"/><text x="89.5588%" y="1263.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="89.3088%" y="1237" width="0.0166%" height="15" fill="rgb(220,199,8)" fg:x="5388" fg:w="1"/><text x="89.5588%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (78 samples, 1.29%)</title><rect x="88.0491%" y="1349" width="1.2929%" height="15" fill="rgb(254,65,26)" fg:x="5312" fg:w="78"/><text x="88.2991%" y="1359.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (1 samples, 0.02%)</title><rect x="89.3254%" y="1333" width="0.0166%" height="15" fill="rgb(253,102,23)" fg:x="5389" fg:w="1"/><text x="89.5754%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (79 samples, 1.31%)</title><rect x="88.0491%" y="1365" width="1.3095%" height="15" fill="rgb(231,103,35)" fg:x="5312" fg:w="79"/><text x="88.2991%" y="1375.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="89.3420%" y="1349" width="0.0166%" height="15" fill="rgb(238,26,10)" fg:x="5390" fg:w="1"/><text x="89.5920%" y="1359.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="89.3420%" y="1333" width="0.0166%" height="15" fill="rgb(234,191,34)" fg:x="5390" fg:w="1"/><text x="89.5920%" y="1343.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="89.3420%" y="1317" width="0.0166%" height="15" fill="rgb(206,210,9)" fg:x="5390" fg:w="1"/><text x="89.5920%" y="1327.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="89.3420%" y="1301" width="0.0166%" height="15" fill="rgb(219,155,3)" fg:x="5390" fg:w="1"/><text x="89.5920%" y="1311.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="89.3420%" y="1285" width="0.0166%" height="15" fill="rgb(221,62,52)" fg:x="5390" fg:w="1"/><text x="89.5920%" y="1295.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="89.3420%" y="1269" width="0.0166%" height="15" fill="rgb(215,197,36)" fg:x="5390" fg:w="1"/><text x="89.5920%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (3 samples, 0.05%)</title><rect x="89.4911%" y="1349" width="0.0497%" height="15" fill="rgb(226,222,6)" fg:x="5399" fg:w="3"/><text x="89.7411%" y="1359.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="89.5243%" y="1333" width="0.0166%" height="15" fill="rgb(215,58,28)" fg:x="5401" fg:w="1"/><text x="89.7743%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="89.5243%" y="1317" width="0.0166%" height="15" fill="rgb(212,148,2)" fg:x="5401" fg:w="1"/><text x="89.7743%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="89.5243%" y="1301" width="0.0166%" height="15" fill="rgb(208,21,42)" fg:x="5401" fg:w="1"/><text x="89.7743%" y="1311.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="89.5409%" y="1349" width="0.0166%" height="15" fill="rgb(209,107,26)" fg:x="5402" fg:w="1"/><text x="89.7909%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (16 samples, 0.27%)</title><rect x="89.3585%" y="1365" width="0.2652%" height="15" fill="rgb(254,60,47)" fg:x="5391" fg:w="16"/><text x="89.6085%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (4 samples, 0.07%)</title><rect x="89.5574%" y="1349" width="0.0663%" height="15" fill="rgb(207,226,45)" fg:x="5403" fg:w="4"/><text x="89.8074%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (1 samples, 0.02%)</title><rect x="89.6237%" y="1349" width="0.0166%" height="15" fill="rgb(223,124,22)" fg:x="5407" fg:w="1"/><text x="89.8737%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="89.6403%" y="1349" width="0.0166%" height="15" fill="rgb(240,162,13)" fg:x="5408" fg:w="1"/><text x="89.8903%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="89.6403%" y="1333" width="0.0166%" height="15" fill="rgb(244,199,31)" fg:x="5408" fg:w="1"/><text x="89.8903%" y="1343.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="89.6403%" y="1317" width="0.0166%" height="15" fill="rgb(207,92,16)" fg:x="5408" fg:w="1"/><text x="89.8903%" y="1327.50"></text></g><g><title>leveldb::PutFixed64 (1 samples, 0.02%)</title><rect x="89.6403%" y="1301" width="0.0166%" height="15" fill="rgb(215,31,19)" fg:x="5408" fg:w="1"/><text x="89.8903%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::FindShortestSeparator (3 samples, 0.05%)</title><rect x="89.6237%" y="1365" width="0.0497%" height="15" fill="rgb(245,118,14)" fg:x="5407" fg:w="3"/><text x="89.8737%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="89.6569%" y="1349" width="0.0166%" height="15" fill="rgb(248,12,46)" fg:x="5409" fg:w="1"/><text x="89.9069%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (3 samples, 0.05%)</title><rect x="89.8558%" y="1317" width="0.0497%" height="15" fill="rgb(209,119,0)" fg:x="5421" fg:w="3"/><text x="90.1058%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (3 samples, 0.05%)</title><rect x="89.8558%" y="1301" width="0.0497%" height="15" fill="rgb(254,51,44)" fg:x="5421" fg:w="3"/><text x="90.1058%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.03%)</title><rect x="89.9055%" y="1317" width="0.0332%" height="15" fill="rgb(253,182,35)" fg:x="5424" fg:w="2"/><text x="90.1555%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (2 samples, 0.03%)</title><rect x="89.9055%" y="1301" width="0.0332%" height="15" fill="rgb(205,198,39)" fg:x="5424" fg:w="2"/><text x="90.1555%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (9 samples, 0.15%)</title><rect x="89.8392%" y="1333" width="0.1492%" height="15" fill="rgb(251,175,48)" fg:x="5420" fg:w="9"/><text x="90.0892%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (3 samples, 0.05%)</title><rect x="89.9387%" y="1317" width="0.0497%" height="15" fill="rgb(239,38,17)" fg:x="5426" fg:w="3"/><text x="90.1887%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (2 samples, 0.03%)</title><rect x="89.9552%" y="1301" width="0.0332%" height="15" fill="rgb(212,101,8)" fg:x="5427" fg:w="2"/><text x="90.2052%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (2 samples, 0.03%)</title><rect x="89.9552%" y="1285" width="0.0332%" height="15" fill="rgb(228,35,17)" fg:x="5427" fg:w="2"/><text x="90.2052%" y="1295.50"></text></g><g><title>leveldb::PutVarint32 (24 samples, 0.40%)</title><rect x="89.6735%" y="1365" width="0.3978%" height="15" fill="rgb(214,95,8)" fg:x="5410" fg:w="24"/><text x="89.9235%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (14 samples, 0.23%)</title><rect x="89.8392%" y="1349" width="0.2321%" height="15" fill="rgb(210,176,35)" fg:x="5420" fg:w="14"/><text x="90.0892%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (5 samples, 0.08%)</title><rect x="89.9884%" y="1333" width="0.0829%" height="15" fill="rgb(226,4,3)" fg:x="5429" fg:w="5"/><text x="90.2384%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (2 samples, 0.03%)</title><rect x="90.0381%" y="1317" width="0.0332%" height="15" fill="rgb(232,133,14)" fg:x="5432" fg:w="2"/><text x="90.2881%" y="1327.50"></text></g><g><title>leveldb::PutVarint64 (1 samples, 0.02%)</title><rect x="90.0713%" y="1365" width="0.0166%" height="15" fill="rgb(250,191,8)" fg:x="5434" fg:w="1"/><text x="90.3213%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="90.0713%" y="1349" width="0.0166%" height="15" fill="rgb(213,12,45)" fg:x="5434" fg:w="1"/><text x="90.3213%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="90.0713%" y="1333" width="0.0166%" height="15" fill="rgb(233,78,26)" fg:x="5434" fg:w="1"/><text x="90.3213%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.0713%" y="1317" width="0.0166%" height="15" fill="rgb(245,222,11)" fg:x="5434" fg:w="1"/><text x="90.3213%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.0713%" y="1301" width="0.0166%" height="15" fill="rgb(216,174,12)" fg:x="5434" fg:w="1"/><text x="90.3213%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="90.0713%" y="1285" width="0.0166%" height="15" fill="rgb(213,15,9)" fg:x="5434" fg:w="1"/><text x="90.3213%" y="1295.50"></text></g><g><title>leveldb::BlockHandle::EncodeTo (1 samples, 0.02%)</title><rect x="90.0713%" y="1269" width="0.0166%" height="15" fill="rgb(238,103,32)" fg:x="5434" fg:w="1"/><text x="90.3213%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="90.0879%" y="1317" width="0.0166%" height="15" fill="rgb(245,85,15)" fg:x="5435" fg:w="1"/><text x="90.3379%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.03%)</title><rect x="90.0879%" y="1365" width="0.0332%" height="15" fill="rgb(254,204,5)" fg:x="5435" fg:w="2"/><text x="90.3379%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.03%)</title><rect x="90.0879%" y="1349" width="0.0332%" height="15" fill="rgb(231,178,15)" fg:x="5435" fg:w="2"/><text x="90.3379%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.03%)</title><rect x="90.0879%" y="1333" width="0.0332%" height="15" fill="rgb(248,151,3)" fg:x="5435" fg:w="2"/><text x="90.3379%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="90.1044%" y="1317" width="0.0166%" height="15" fill="rgb(250,139,13)" fg:x="5436" fg:w="1"/><text x="90.3544%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="90.1044%" y="1301" width="0.0166%" height="15" fill="rgb(243,107,53)" fg:x="5436" fg:w="1"/><text x="90.3544%" y="1311.50"></text></g><g><title>WriteUnbuffered (1 samples, 0.02%)</title><rect x="90.1210%" y="1317" width="0.0166%" height="15" fill="rgb(232,81,15)" fg:x="5437" fg:w="1"/><text x="90.3710%" y="1327.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="90.3862%" y="1205" width="0.0332%" height="15" fill="rgb(225,187,48)" fg:x="5453" fg:w="2"/><text x="90.6362%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.4028%" y="1189" width="0.0166%" height="15" fill="rgb(205,116,12)" fg:x="5454" fg:w="1"/><text x="90.6528%" y="1199.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="90.6680%" y="1125" width="0.0995%" height="15" fill="rgb(220,222,31)" fg:x="5470" fg:w="6"/><text x="90.9180%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="90.7177%" y="1109" width="0.0497%" height="15" fill="rgb(233,187,49)" fg:x="5473" fg:w="3"/><text x="90.9677%" y="1119.50"></text></g><g><title>[[ext4]] (15 samples, 0.25%)</title><rect x="90.6017%" y="1141" width="0.2486%" height="15" fill="rgb(211,168,53)" fg:x="5466" fg:w="15"/><text x="90.8517%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="90.7674%" y="1125" width="0.0829%" height="15" fill="rgb(206,160,16)" fg:x="5476" fg:w="5"/><text x="91.0174%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="1109" width="0.0166%" height="15" fill="rgb(254,164,13)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="1093" width="0.0166%" height="15" fill="rgb(229,45,30)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="1077" width="0.0166%" height="15" fill="rgb(237,32,10)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="1061" width="0.0166%" height="15" fill="rgb(251,20,47)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="1045" width="0.0166%" height="15" fill="rgb(251,116,12)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="1029" width="0.0166%" height="15" fill="rgb(214,227,27)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="1013" width="0.0166%" height="15" fill="rgb(248,10,53)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="997" width="0.0166%" height="15" fill="rgb(221,176,25)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="981" width="0.0166%" height="15" fill="rgb(205,70,46)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.8337%" y="965" width="0.0166%" height="15" fill="rgb(217,45,38)" fg:x="5480" fg:w="1"/><text x="91.0837%" y="975.50"></text></g><g><title>[[ext4]] (24 samples, 0.40%)</title><rect x="90.5188%" y="1157" width="0.3978%" height="15" fill="rgb(243,6,54)" fg:x="5461" fg:w="24"/><text x="90.7688%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="90.8503%" y="1141" width="0.0663%" height="15" fill="rgb(242,76,23)" fg:x="5481" fg:w="4"/><text x="91.1003%" y="1151.50"></text></g><g><title>[[ext4]] (46 samples, 0.76%)</title><rect x="90.4525%" y="1173" width="0.7625%" height="15" fill="rgb(239,166,0)" fg:x="5457" fg:w="46"/><text x="90.7025%" y="1183.50"></text></g><g><title>[unknown] (18 samples, 0.30%)</title><rect x="90.9166%" y="1157" width="0.2984%" height="15" fill="rgb(238,174,32)" fg:x="5485" fg:w="18"/><text x="91.1666%" y="1167.50"></text></g><g><title>[unknown] (16 samples, 0.27%)</title><rect x="90.9498%" y="1141" width="0.2652%" height="15" fill="rgb(238,124,44)" fg:x="5487" fg:w="16"/><text x="91.1998%" y="1151.50"></text></g><g><title>[unknown] (13 samples, 0.22%)</title><rect x="90.9995%" y="1125" width="0.2155%" height="15" fill="rgb(206,185,9)" fg:x="5490" fg:w="13"/><text x="91.2495%" y="1135.50"></text></g><g><title>[unknown] (12 samples, 0.20%)</title><rect x="91.0161%" y="1109" width="0.1989%" height="15" fill="rgb(215,157,17)" fg:x="5491" fg:w="12"/><text x="91.2661%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="91.1155%" y="1093" width="0.0995%" height="15" fill="rgb(251,17,29)" fg:x="5497" fg:w="6"/><text x="91.3655%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="91.1653%" y="1077" width="0.0497%" height="15" fill="rgb(227,113,27)" fg:x="5500" fg:w="3"/><text x="91.4153%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="91.1818%" y="1061" width="0.0332%" height="15" fill="rgb(217,226,24)" fg:x="5501" fg:w="2"/><text x="91.4318%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.1984%" y="1045" width="0.0166%" height="15" fill="rgb(251,99,38)" fg:x="5502" fg:w="1"/><text x="91.4484%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.1984%" y="1029" width="0.0166%" height="15" fill="rgb(231,147,19)" fg:x="5502" fg:w="1"/><text x="91.4484%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.1984%" y="1013" width="0.0166%" height="15" fill="rgb(230,86,8)" fg:x="5502" fg:w="1"/><text x="91.4484%" y="1023.50"></text></g><g><title>[[ext4]] (126 samples, 2.09%)</title><rect x="90.4359%" y="1189" width="2.0885%" height="15" fill="rgb(237,159,39)" fg:x="5456" fg:w="126"/><text x="90.6859%" y="1199.50">[..</text></g><g><title>[unknown] (79 samples, 1.31%)</title><rect x="91.2150%" y="1173" width="1.3095%" height="15" fill="rgb(247,179,47)" fg:x="5503" fg:w="79"/><text x="91.4650%" y="1183.50"></text></g><g><title>[unknown] (71 samples, 1.18%)</title><rect x="91.3476%" y="1157" width="1.1769%" height="15" fill="rgb(253,152,26)" fg:x="5511" fg:w="71"/><text x="91.5976%" y="1167.50"></text></g><g><title>[unknown] (59 samples, 0.98%)</title><rect x="91.5465%" y="1141" width="0.9780%" height="15" fill="rgb(222,211,15)" fg:x="5523" fg:w="59"/><text x="91.7965%" y="1151.50"></text></g><g><title>[unknown] (47 samples, 0.78%)</title><rect x="91.7454%" y="1125" width="0.7790%" height="15" fill="rgb(236,193,6)" fg:x="5535" fg:w="47"/><text x="91.9954%" y="1135.50"></text></g><g><title>[unknown] (36 samples, 0.60%)</title><rect x="91.9277%" y="1109" width="0.5967%" height="15" fill="rgb(226,206,10)" fg:x="5546" fg:w="36"/><text x="92.1777%" y="1119.50"></text></g><g><title>[unknown] (11 samples, 0.18%)</title><rect x="92.3421%" y="1093" width="0.1823%" height="15" fill="rgb(213,125,22)" fg:x="5571" fg:w="11"/><text x="92.5921%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="92.4747%" y="1077" width="0.0497%" height="15" fill="rgb(221,66,28)" fg:x="5579" fg:w="3"/><text x="92.7247%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="92.4913%" y="1061" width="0.0332%" height="15" fill="rgb(222,84,53)" fg:x="5580" fg:w="2"/><text x="92.7413%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5079%" y="1045" width="0.0166%" height="15" fill="rgb(243,50,15)" fg:x="5581" fg:w="1"/><text x="92.7579%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5079%" y="1029" width="0.0166%" height="15" fill="rgb(208,184,23)" fg:x="5581" fg:w="1"/><text x="92.7579%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.5079%" y="1013" width="0.0166%" height="15" fill="rgb(221,83,2)" fg:x="5581" fg:w="1"/><text x="92.7579%" y="1023.50"></text></g><g><title>[[ext4]] (151 samples, 2.50%)</title><rect x="90.3531%" y="1221" width="2.5029%" height="15" fill="rgb(236,53,24)" fg:x="5451" fg:w="151"/><text x="90.6031%" y="1231.50">[[..</text></g><g><title>[unknown] (147 samples, 2.44%)</title><rect x="90.4194%" y="1205" width="2.4366%" height="15" fill="rgb(244,171,29)" fg:x="5455" fg:w="147"/><text x="90.6694%" y="1215.50">[u..</text></g><g><title>[unknown] (20 samples, 0.33%)</title><rect x="92.5244%" y="1189" width="0.3315%" height="15" fill="rgb(205,19,11)" fg:x="5582" fg:w="20"/><text x="92.7744%" y="1199.50"></text></g><g><title>[unknown] (17 samples, 0.28%)</title><rect x="92.5742%" y="1173" width="0.2818%" height="15" fill="rgb(207,108,29)" fg:x="5585" fg:w="17"/><text x="92.8242%" y="1183.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="92.9223%" y="1125" width="0.0166%" height="15" fill="rgb(236,215,43)" fg:x="5606" fg:w="1"/><text x="93.1723%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9223%" y="1109" width="0.0166%" height="15" fill="rgb(213,58,35)" fg:x="5606" fg:w="1"/><text x="93.1723%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9223%" y="1093" width="0.0166%" height="15" fill="rgb(220,211,46)" fg:x="5606" fg:w="1"/><text x="93.1723%" y="1103.50"></text></g><g><title>[unknown] (171 samples, 2.83%)</title><rect x="90.1707%" y="1285" width="2.8344%" height="15" fill="rgb(212,134,16)" fg:x="5440" fg:w="171"/><text x="90.4207%" y="1295.50">[u..</text></g><g><title>[unknown] (171 samples, 2.83%)</title><rect x="90.1707%" y="1269" width="2.8344%" height="15" fill="rgb(232,90,44)" fg:x="5440" fg:w="171"/><text x="90.4207%" y="1279.50">[u..</text></g><g><title>[unknown] (170 samples, 2.82%)</title><rect x="90.1873%" y="1253" width="2.8178%" height="15" fill="rgb(212,18,36)" fg:x="5441" fg:w="170"/><text x="90.4373%" y="1263.50">[u..</text></g><g><title>[unknown] (164 samples, 2.72%)</title><rect x="90.2868%" y="1237" width="2.7184%" height="15" fill="rgb(206,112,24)" fg:x="5447" fg:w="164"/><text x="90.5368%" y="1247.50">[u..</text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="92.8560%" y="1221" width="0.1492%" height="15" fill="rgb(238,223,40)" fg:x="5602" fg:w="9"/><text x="93.1060%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="92.8891%" y="1205" width="0.1160%" height="15" fill="rgb(226,169,20)" fg:x="5604" fg:w="7"/><text x="93.1391%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="92.9223%" y="1189" width="0.0829%" height="15" fill="rgb(241,64,52)" fg:x="5606" fg:w="5"/><text x="93.1723%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="92.9223%" y="1173" width="0.0829%" height="15" fill="rgb(228,120,25)" fg:x="5606" fg:w="5"/><text x="93.1723%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="92.9223%" y="1157" width="0.0829%" height="15" fill="rgb(234,108,19)" fg:x="5606" fg:w="5"/><text x="93.1723%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="92.9223%" y="1141" width="0.0829%" height="15" fill="rgb(236,133,29)" fg:x="5606" fg:w="5"/><text x="93.1723%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="92.9388%" y="1125" width="0.0663%" height="15" fill="rgb(246,174,53)" fg:x="5607" fg:w="4"/><text x="93.1888%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="92.9388%" y="1109" width="0.0663%" height="15" fill="rgb(210,105,35)" fg:x="5607" fg:w="4"/><text x="93.1888%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9886%" y="1093" width="0.0166%" height="15" fill="rgb(225,27,26)" fg:x="5610" fg:w="1"/><text x="93.2386%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9886%" y="1077" width="0.0166%" height="15" fill="rgb(233,2,39)" fg:x="5610" fg:w="1"/><text x="93.2386%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9886%" y="1061" width="0.0166%" height="15" fill="rgb(219,164,26)" fg:x="5610" fg:w="1"/><text x="93.2386%" y="1071.50"></text></g><g><title>Flush (175 samples, 2.90%)</title><rect x="90.1210%" y="1349" width="2.9007%" height="15" fill="rgb(236,211,5)" fg:x="5437" fg:w="175"/><text x="90.3710%" y="1359.50">Fl..</text></g><g><title>FlushBuffer (175 samples, 2.90%)</title><rect x="90.1210%" y="1333" width="2.9007%" height="15" fill="rgb(244,227,23)" fg:x="5437" fg:w="175"/><text x="90.3710%" y="1343.50">Fl..</text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (174 samples, 2.88%)</title><rect x="90.1376%" y="1317" width="2.8841%" height="15" fill="rgb(230,184,8)" fg:x="5438" fg:w="174"/><text x="90.3876%" y="1327.50">le..</text></g><g><title>__GI___libc_write (174 samples, 2.88%)</title><rect x="90.1376%" y="1301" width="2.8841%" height="15" fill="rgb(217,125,48)" fg:x="5438" fg:w="174"/><text x="90.3876%" y="1311.50">__..</text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="93.0051%" y="1285" width="0.0166%" height="15" fill="rgb(223,192,47)" fg:x="5611" fg:w="1"/><text x="93.2551%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Reset (1 samples, 0.02%)</title><rect x="93.0217%" y="1349" width="0.0166%" height="15" fill="rgb(226,119,10)" fg:x="5612" fg:w="1"/><text x="93.2717%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.0217%" y="1333" width="0.0166%" height="15" fill="rgb(221,49,29)" fg:x="5612" fg:w="1"/><text x="93.2717%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Finish (1 samples, 0.02%)</title><rect x="93.0383%" y="1333" width="0.0166%" height="15" fill="rgb(217,205,19)" fg:x="5613" fg:w="1"/><text x="93.2883%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Finish (1 samples, 0.02%)</title><rect x="93.0383%" y="1317" width="0.0166%" height="15" fill="rgb(242,104,7)" fg:x="5613" fg:w="1"/><text x="93.2883%" y="1327.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="93.0549%" y="1317" width="0.0332%" height="15" fill="rgb(209,154,48)" fg:x="5614" fg:w="2"/><text x="93.3049%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.1543%" y="1285" width="0.0663%" height="15" fill="rgb(219,213,46)" fg:x="5620" fg:w="4"/><text x="93.4043%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.1543%" y="1269" width="0.0663%" height="15" fill="rgb(229,105,38)" fg:x="5620" fg:w="4"/><text x="93.4043%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1253" width="0.0497%" height="15" fill="rgb(205,151,5)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1237" width="0.0497%" height="15" fill="rgb(248,115,40)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1221" width="0.0497%" height="15" fill="rgb(206,179,2)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1205" width="0.0497%" height="15" fill="rgb(230,103,24)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1189" width="0.0497%" height="15" fill="rgb(218,152,4)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1173" width="0.0497%" height="15" fill="rgb(236,161,54)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1157" width="0.0497%" height="15" fill="rgb(226,65,17)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1141" width="0.0497%" height="15" fill="rgb(221,134,44)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1125" width="0.0497%" height="15" fill="rgb(251,129,4)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1109" width="0.0497%" height="15" fill="rgb(244,32,34)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.1709%" y="1093" width="0.0497%" height="15" fill="rgb(251,224,37)" fg:x="5621" fg:w="3"/><text x="93.4209%" y="1103.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (12 samples, 0.20%)</title><rect x="93.0383%" y="1349" width="0.1989%" height="15" fill="rgb(248,117,31)" fg:x="5613" fg:w="12"/><text x="93.2883%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (11 samples, 0.18%)</title><rect x="93.0549%" y="1333" width="0.1823%" height="15" fill="rgb(222,208,37)" fg:x="5614" fg:w="11"/><text x="93.3049%" y="1343.50"></text></g><g><title>leveldb::crc32c::Value (9 samples, 0.15%)</title><rect x="93.0880%" y="1317" width="0.1492%" height="15" fill="rgb(234,211,25)" fg:x="5616" fg:w="9"/><text x="93.3380%" y="1327.50"></text></g><g><title>crc32c::ExtendSse42 (9 samples, 0.15%)</title><rect x="93.0880%" y="1301" width="0.1492%" height="15" fill="rgb(211,72,6)" fg:x="5616" fg:w="9"/><text x="93.3380%" y="1311.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="93.2206%" y="1285" width="0.0166%" height="15" fill="rgb(249,198,38)" fg:x="5624" fg:w="1"/><text x="93.4706%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Flush (189 samples, 3.13%)</title><rect x="90.1210%" y="1365" width="3.1328%" height="15" fill="rgb(221,86,51)" fg:x="5437" fg:w="189"/><text x="90.3710%" y="1375.50">lev..</text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="93.2372%" y="1349" width="0.0166%" height="15" fill="rgb(226,178,43)" fg:x="5625" fg:w="1"/><text x="93.4872%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.2372%" y="1333" width="0.0166%" height="15" fill="rgb(215,145,7)" fg:x="5625" fg:w="1"/><text x="93.4872%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (1 samples, 0.02%)</title><rect x="93.2538%" y="1365" width="0.0166%" height="15" fill="rgb(250,202,36)" fg:x="5626" fg:w="1"/><text x="93.5038%" y="1375.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="93.2703%" y="1349" width="0.0166%" height="15" fill="rgb(215,86,13)" fg:x="5627" fg:w="1"/><text x="93.5203%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="93.2869%" y="1349" width="0.0332%" height="15" fill="rgb(221,134,12)" fg:x="5628" fg:w="2"/><text x="93.5369%" y="1359.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (2 samples, 0.03%)</title><rect x="93.3201%" y="1349" width="0.0332%" height="15" fill="rgb(213,82,10)" fg:x="5630" fg:w="2"/><text x="93.5701%" y="1359.50"></text></g><g><title>MaxGrandParentOverlapBytes (1 samples, 0.02%)</title><rect x="93.3366%" y="1333" width="0.0166%" height="15" fill="rgb(214,142,0)" fg:x="5631" fg:w="1"/><text x="93.5866%" y="1343.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="93.3366%" y="1317" width="0.0166%" height="15" fill="rgb(205,145,9)" fg:x="5631" fg:w="1"/><text x="93.5866%" y="1327.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (5 samples, 0.08%)</title><rect x="93.3532%" y="1349" width="0.0829%" height="15" fill="rgb(244,214,8)" fg:x="5632" fg:w="5"/><text x="93.6032%" y="1359.50"></text></g><g><title>leveldb::ParseInternalKey (1 samples, 0.02%)</title><rect x="93.4195%" y="1333" width="0.0166%" height="15" fill="rgb(224,72,51)" fg:x="5636" fg:w="1"/><text x="93.6695%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="93.4361%" y="1349" width="0.0497%" height="15" fill="rgb(233,137,37)" fg:x="5637" fg:w="3"/><text x="93.6861%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::ok (14 samples, 0.23%)</title><rect x="93.2703%" y="1365" width="0.2321%" height="15" fill="rgb(208,71,28)" fg:x="5627" fg:w="14"/><text x="93.5203%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="93.4858%" y="1349" width="0.0166%" height="15" fill="rgb(226,31,7)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1333" width="0.0166%" height="15" fill="rgb(229,62,18)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1317" width="0.0166%" height="15" fill="rgb(226,74,28)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1301" width="0.0166%" height="15" fill="rgb(214,170,18)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1285" width="0.0166%" height="15" fill="rgb(227,229,35)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1269" width="0.0166%" height="15" fill="rgb(225,181,39)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1253" width="0.0166%" height="15" fill="rgb(253,124,44)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1237" width="0.0166%" height="15" fill="rgb(220,75,18)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4858%" y="1221" width="0.0166%" height="15" fill="rgb(239,175,43)" fg:x="5640" fg:w="1"/><text x="93.7358%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="93.5024%" y="1365" width="0.0166%" height="15" fill="rgb(228,112,50)" fg:x="5641" fg:w="1"/><text x="93.7524%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="93.5024%" y="1349" width="0.0166%" height="15" fill="rgb(232,105,36)" fg:x="5641" fg:w="1"/><text x="93.7524%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="93.5024%" y="1333" width="0.0166%" height="15" fill="rgb(227,137,47)" fg:x="5641" fg:w="1"/><text x="93.7524%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="93.5024%" y="1317" width="0.0166%" height="15" fill="rgb(217,51,9)" fg:x="5641" fg:w="1"/><text x="93.7524%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="93.5024%" y="1301" width="0.0166%" height="15" fill="rgb(245,117,0)" fg:x="5641" fg:w="1"/><text x="93.7524%" y="1311.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="93.5024%" y="1285" width="0.0166%" height="15" fill="rgb(252,52,30)" fg:x="5641" fg:w="1"/><text x="93.7524%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (481 samples, 7.97%)</title><rect x="85.5959%" y="1381" width="7.9728%" height="15" fill="rgb(227,85,33)" fg:x="5164" fg:w="481"/><text x="85.8459%" y="1391.50">leveldb::Ta..</text></g><g><title>value (3 samples, 0.05%)</title><rect x="93.5190%" y="1365" width="0.0497%" height="15" fill="rgb(220,157,20)" fg:x="5642" fg:w="3"/><text x="93.7690%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::value (3 samples, 0.05%)</title><rect x="93.5190%" y="1349" width="0.0497%" height="15" fill="rgb(254,14,34)" fg:x="5642" fg:w="3"/><text x="93.7690%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (1 samples, 0.02%)</title><rect x="93.5687%" y="1381" width="0.0166%" height="15" fill="rgb(216,103,41)" fg:x="5645" fg:w="1"/><text x="93.8187%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="93.5853%" y="1381" width="0.0166%" height="15" fill="rgb(245,221,9)" fg:x="5646" fg:w="1"/><text x="93.8353%" y="1391.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (839 samples, 13.91%)</title><rect x="79.7116%" y="1397" width="13.9068%" height="15" fill="rgb(254,136,47)" fg:x="4809" fg:w="839"/><text x="79.9616%" y="1407.50">leveldb::DBImpl::DoCo..</text></g><g><title>value (1 samples, 0.02%)</title><rect x="93.6019%" y="1381" width="0.0166%" height="15" fill="rgb(235,71,46)" fg:x="5647" fg:w="1"/><text x="93.8519%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::value (1 samples, 0.02%)</title><rect x="93.6019%" y="1365" width="0.0166%" height="15" fill="rgb(242,154,29)" fg:x="5647" fg:w="1"/><text x="93.8519%" y="1375.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (893 samples, 14.80%)</title><rect x="78.8828%" y="1413" width="14.8019%" height="15" fill="rgb(210,65,31)" fg:x="4759" fg:w="893"/><text x="79.1328%" y="1423.50">leveldb::DBImpl::Backgr..</text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="93.6184%" y="1397" width="0.0663%" height="15" fill="rgb(244,9,50)" fg:x="5648" fg:w="4"/><text x="93.8684%" y="1407.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="93.6682%" y="1381" width="0.0166%" height="15" fill="rgb(215,141,38)" fg:x="5651" fg:w="1"/><text x="93.9182%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (2 samples, 0.03%)</title><rect x="93.6847%" y="1381" width="0.0332%" height="15" fill="rgb(241,129,6)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1391.50"></text></g><g><title>__unlink (2 samples, 0.03%)</title><rect x="93.6847%" y="1365" width="0.0332%" height="15" fill="rgb(253,169,4)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1375.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1349" width="0.0332%" height="15" fill="rgb(237,82,36)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1359.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1333" width="0.0332%" height="15" fill="rgb(209,171,11)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1343.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1317" width="0.0332%" height="15" fill="rgb(242,19,22)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1327.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1301" width="0.0332%" height="15" fill="rgb(251,122,24)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1311.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1285" width="0.0332%" height="15" fill="rgb(226,166,42)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1295.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="93.6847%" y="1269" width="0.0332%" height="15" fill="rgb(244,101,48)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1253" width="0.0332%" height="15" fill="rgb(227,125,1)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1237" width="0.0332%" height="15" fill="rgb(206,79,43)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1221" width="0.0332%" height="15" fill="rgb(241,109,41)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.6847%" y="1205" width="0.0332%" height="15" fill="rgb(219,73,4)" fg:x="5652" fg:w="2"/><text x="93.9347%" y="1215.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (3 samples, 0.05%)</title><rect x="93.6847%" y="1397" width="0.0497%" height="15" fill="rgb(239,25,41)" fg:x="5652" fg:w="3"/><text x="93.9347%" y="1407.50"></text></g><g><title>leveldb::TableCache::Evict (1 samples, 0.02%)</title><rect x="93.7179%" y="1381" width="0.0166%" height="15" fill="rgb(208,88,46)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1391.50"></text></g><g><title>Erase (1 samples, 0.02%)</title><rect x="93.7179%" y="1365" width="0.0166%" height="15" fill="rgb(239,184,9)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (1 samples, 0.02%)</title><rect x="93.7179%" y="1349" width="0.0166%" height="15" fill="rgb(223,114,13)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (1 samples, 0.02%)</title><rect x="93.7179%" y="1333" width="0.0166%" height="15" fill="rgb(214,28,42)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.02%)</title><rect x="93.7179%" y="1317" width="0.0166%" height="15" fill="rgb(252,32,44)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1327.50"></text></g><g><title>leveldb::DeleteEntry (1 samples, 0.02%)</title><rect x="93.7179%" y="1301" width="0.0166%" height="15" fill="rgb(231,159,4)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1311.50"></text></g><g><title>~PosixMmapReadableFile (1 samples, 0.02%)</title><rect x="93.7179%" y="1285" width="0.0166%" height="15" fill="rgb(210,35,26)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (1 samples, 0.02%)</title><rect x="93.7179%" y="1269" width="0.0166%" height="15" fill="rgb(208,190,37)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1279.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="93.7179%" y="1253" width="0.0166%" height="15" fill="rgb(226,148,22)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1237" width="0.0166%" height="15" fill="rgb(242,153,24)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1221" width="0.0166%" height="15" fill="rgb(213,133,7)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1205" width="0.0166%" height="15" fill="rgb(248,206,18)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1189" width="0.0166%" height="15" fill="rgb(233,157,4)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1173" width="0.0166%" height="15" fill="rgb(249,179,32)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1157" width="0.0166%" height="15" fill="rgb(248,69,35)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1141" width="0.0166%" height="15" fill="rgb(249,158,38)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1125" width="0.0166%" height="15" fill="rgb(223,18,43)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7179%" y="1109" width="0.0166%" height="15" fill="rgb(238,42,45)" fg:x="5654" fg:w="1"/><text x="93.9679%" y="1119.50"></text></g><g><title>Sync (1 samples, 0.02%)</title><rect x="93.7345%" y="1365" width="0.0166%" height="15" fill="rgb(219,65,47)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1 samples, 0.02%)</title><rect x="93.7345%" y="1349" width="0.0166%" height="15" fill="rgb(248,153,12)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1359.50"></text></g><g><title>fdatasync (1 samples, 0.02%)</title><rect x="93.7345%" y="1333" width="0.0166%" height="15" fill="rgb(240,118,4)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1317" width="0.0166%" height="15" fill="rgb(250,96,34)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1301" width="0.0166%" height="15" fill="rgb(221,15,4)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1285" width="0.0166%" height="15" fill="rgb(217,149,33)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1295.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.7345%" y="1269" width="0.0166%" height="15" fill="rgb(213,58,29)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1253" width="0.0166%" height="15" fill="rgb(236,218,9)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1237" width="0.0166%" height="15" fill="rgb(248,40,19)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1221" width="0.0166%" height="15" fill="rgb(212,17,6)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1205" width="0.0166%" height="15" fill="rgb(206,212,20)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.7345%" y="1189" width="0.0166%" height="15" fill="rgb(229,80,37)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.7345%" y="1173" width="0.0166%" height="15" fill="rgb(253,8,37)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.7345%" y="1157" width="0.0166%" height="15" fill="rgb(215,16,43)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1141" width="0.0166%" height="15" fill="rgb(236,219,16)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1125" width="0.0166%" height="15" fill="rgb(251,0,3)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1109" width="0.0166%" height="15" fill="rgb(207,133,37)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1093" width="0.0166%" height="15" fill="rgb(250,143,20)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7345%" y="1077" width="0.0166%" height="15" fill="rgb(242,19,50)" fg:x="5655" fg:w="1"/><text x="93.9845%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="93.8008%" y="1317" width="0.0166%" height="15" fill="rgb(206,124,43)" fg:x="5659" fg:w="1"/><text x="94.0508%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="93.8173%" y="1317" width="0.0332%" height="15" fill="rgb(229,4,38)" fg:x="5660" fg:w="2"/><text x="94.0673%" y="1327.50"></text></g><g><title>leveldb::BlockBuilder::Add (7 samples, 0.12%)</title><rect x="93.7510%" y="1349" width="0.1160%" height="15" fill="rgb(247,220,45)" fg:x="5656" fg:w="7"/><text x="94.0010%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.08%)</title><rect x="93.7842%" y="1333" width="0.0829%" height="15" fill="rgb(247,195,0)" fg:x="5658" fg:w="5"/><text x="94.0342%" y="1343.50"></text></g><g><title>leveldb::PutVarint64 (1 samples, 0.02%)</title><rect x="93.8505%" y="1317" width="0.0166%" height="15" fill="rgb(252,12,19)" fg:x="5662" fg:w="1"/><text x="94.1005%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="93.8505%" y="1301" width="0.0166%" height="15" fill="rgb(222,49,50)" fg:x="5662" fg:w="1"/><text x="94.1005%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="93.8505%" y="1285" width="0.0166%" height="15" fill="rgb(209,157,28)" fg:x="5662" fg:w="1"/><text x="94.1005%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="93.8505%" y="1269" width="0.0166%" height="15" fill="rgb(238,174,24)" fg:x="5662" fg:w="1"/><text x="94.1005%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="93.8505%" y="1253" width="0.0166%" height="15" fill="rgb(224,17,28)" fg:x="5662" fg:w="1"/><text x="94.1005%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="93.8671%" y="1349" width="0.0166%" height="15" fill="rgb(249,7,29)" fg:x="5663" fg:w="1"/><text x="94.1171%" y="1359.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="93.8836%" y="1173" width="0.0166%" height="15" fill="rgb(243,178,4)" fg:x="5664" fg:w="1"/><text x="94.1336%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8836%" y="1157" width="0.0166%" height="15" fill="rgb(246,138,35)" fg:x="5664" fg:w="1"/><text x="94.1336%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8836%" y="1141" width="0.0166%" height="15" fill="rgb(251,85,18)" fg:x="5664" fg:w="1"/><text x="94.1336%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8836%" y="1125" width="0.0166%" height="15" fill="rgb(254,55,9)" fg:x="5664" fg:w="1"/><text x="94.1336%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8836%" y="1109" width="0.0166%" height="15" fill="rgb(248,4,50)" fg:x="5664" fg:w="1"/><text x="94.1336%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.8836%" y="1093" width="0.0166%" height="15" fill="rgb(215,208,14)" fg:x="5664" fg:w="1"/><text x="94.1336%" y="1103.50"></text></g><g><title>execute_native_thread_routine (907 samples, 15.03%)</title><rect x="78.8828%" y="1477" width="15.0340%" height="15" fill="rgb(218,37,18)" fg:x="4759" fg:w="907"/><text x="79.1328%" y="1487.50">execute_native_thread_r..</text></g><g><title>BackgroundThreadEntryPoint (907 samples, 15.03%)</title><rect x="78.8828%" y="1461" width="15.0340%" height="15" fill="rgb(206,104,13)" fg:x="4759" fg:w="907"/><text x="79.1328%" y="1471.50">BackgroundThreadEntryPo..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (907 samples, 15.03%)</title><rect x="78.8828%" y="1445" width="15.0340%" height="15" fill="rgb(248,94,22)" fg:x="4759" fg:w="907"/><text x="79.1328%" y="1455.50">leveldb::(anonymous nam..</text></g><g><title>leveldb::DBImpl::BackgroundCall (907 samples, 15.03%)</title><rect x="78.8828%" y="1429" width="15.0340%" height="15" fill="rgb(235,42,46)" fg:x="4759" fg:w="907"/><text x="79.1328%" y="1439.50">leveldb::DBImpl::Backgr..</text></g><g><title>leveldb::DBImpl::CompactMemTable (14 samples, 0.23%)</title><rect x="93.6847%" y="1413" width="0.2321%" height="15" fill="rgb(220,228,48)" fg:x="5652" fg:w="14"/><text x="93.9347%" y="1423.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (11 samples, 0.18%)</title><rect x="93.7345%" y="1397" width="0.1823%" height="15" fill="rgb(216,58,12)" fg:x="5655" fg:w="11"/><text x="93.9845%" y="1407.50"></text></g><g><title>leveldb::BuildTable (11 samples, 0.18%)</title><rect x="93.7345%" y="1381" width="0.1823%" height="15" fill="rgb(223,97,52)" fg:x="5655" fg:w="11"/><text x="93.9845%" y="1391.50"></text></g><g><title>leveldb::TableBuilder::Add (10 samples, 0.17%)</title><rect x="93.7510%" y="1365" width="0.1658%" height="15" fill="rgb(208,159,17)" fg:x="5656" fg:w="10"/><text x="94.0010%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Flush (2 samples, 0.03%)</title><rect x="93.8836%" y="1349" width="0.0332%" height="15" fill="rgb(215,172,9)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1359.50"></text></g><g><title>Flush (2 samples, 0.03%)</title><rect x="93.8836%" y="1333" width="0.0332%" height="15" fill="rgb(252,175,30)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1343.50"></text></g><g><title>FlushBuffer (2 samples, 0.03%)</title><rect x="93.8836%" y="1317" width="0.0332%" height="15" fill="rgb(209,159,10)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (2 samples, 0.03%)</title><rect x="93.8836%" y="1301" width="0.0332%" height="15" fill="rgb(229,73,51)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1311.50"></text></g><g><title>__GI___libc_write (2 samples, 0.03%)</title><rect x="93.8836%" y="1285" width="0.0332%" height="15" fill="rgb(208,212,43)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8836%" y="1269" width="0.0332%" height="15" fill="rgb(254,123,53)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8836%" y="1253" width="0.0332%" height="15" fill="rgb(254,128,49)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8836%" y="1237" width="0.0332%" height="15" fill="rgb(246,16,16)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8836%" y="1221" width="0.0332%" height="15" fill="rgb(209,200,1)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1231.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="93.8836%" y="1205" width="0.0332%" height="15" fill="rgb(235,9,3)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="93.8836%" y="1189" width="0.0332%" height="15" fill="rgb(233,121,54)" fg:x="5664" fg:w="2"/><text x="94.1336%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9002%" y="1173" width="0.0166%" height="15" fill="rgb(236,80,25)" fg:x="5665" fg:w="1"/><text x="94.1502%" y="1183.50"></text></g><g><title>__clone (918 samples, 15.22%)</title><rect x="78.7171%" y="1509" width="15.2163%" height="15" fill="rgb(220,44,24)" fg:x="4749" fg:w="918"/><text x="78.9671%" y="1519.50">__clone</text></g><g><title>start_thread (918 samples, 15.22%)</title><rect x="78.7171%" y="1493" width="15.2163%" height="15" fill="rgb(236,225,16)" fg:x="4749" fg:w="918"/><text x="78.9671%" y="1503.50">start_thread</text></g><g><title>name_stack_maps (1 samples, 0.02%)</title><rect x="93.9168%" y="1477" width="0.0166%" height="15" fill="rgb(237,140,0)" fg:x="5666" fg:w="1"/><text x="94.1668%" y="1487.50"></text></g><g><title>__GI___snprintf (1 samples, 0.02%)</title><rect x="93.9168%" y="1461" width="0.0166%" height="15" fill="rgb(243,225,53)" fg:x="5666" fg:w="1"/><text x="94.1668%" y="1471.50"></text></g><g><title>__vsnprintf_internal (1 samples, 0.02%)</title><rect x="93.9168%" y="1445" width="0.0166%" height="15" fill="rgb(240,140,30)" fg:x="5666" fg:w="1"/><text x="94.1668%" y="1455.50"></text></g><g><title>__printf_buffer (1 samples, 0.02%)</title><rect x="93.9168%" y="1429" width="0.0166%" height="15" fill="rgb(217,51,16)" fg:x="5666" fg:w="1"/><text x="94.1668%" y="1439.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="93.9334%" y="1381" width="0.0166%" height="15" fill="rgb(245,75,50)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1391.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="93.9334%" y="1365" width="0.0166%" height="15" fill="rgb(208,174,22)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1375.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="93.9334%" y="1349" width="0.0166%" height="15" fill="rgb(219,98,50)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1359.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="93.9334%" y="1333" width="0.0166%" height="15" fill="rgb(243,138,3)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1343.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="93.9334%" y="1317" width="0.0166%" height="15" fill="rgb(243,132,26)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1327.50"></text></g><g><title>leveldb::DBImpl::Recover (1 samples, 0.02%)</title><rect x="93.9334%" y="1301" width="0.0166%" height="15" fill="rgb(250,201,8)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1311.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (1 samples, 0.02%)</title><rect x="93.9334%" y="1285" width="0.0166%" height="15" fill="rgb(213,91,26)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="93.9334%" y="1269" width="0.0166%" height="15" fill="rgb(229,117,1)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="93.9334%" y="1253" width="0.0166%" height="15" fill="rgb(229,24,6)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="93.9334%" y="1237" width="0.0166%" height="15" fill="rgb(206,69,11)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1247.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="93.9334%" y="1221" width="0.0166%" height="15" fill="rgb(234,111,34)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1231.50"></text></g><g><title>std::allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="93.9334%" y="1205" width="0.0166%" height="15" fill="rgb(213,187,51)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1215.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="93.9334%" y="1189" width="0.0166%" height="15" fill="rgb(207,45,11)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="93.9334%" y="1173" width="0.0166%" height="15" fill="rgb(225,151,47)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1183.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="93.9334%" y="1157" width="0.0166%" height="15" fill="rgb(211,226,5)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1141" width="0.0166%" height="15" fill="rgb(214,83,52)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1125" width="0.0166%" height="15" fill="rgb(229,49,53)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1109" width="0.0166%" height="15" fill="rgb(246,8,28)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1093" width="0.0166%" height="15" fill="rgb(207,28,41)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1077" width="0.0166%" height="15" fill="rgb(254,22,25)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1061" width="0.0166%" height="15" fill="rgb(209,120,42)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1045" width="0.0166%" height="15" fill="rgb(216,194,18)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1029" width="0.0166%" height="15" fill="rgb(213,70,17)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="1013" width="0.0166%" height="15" fill="rgb(228,66,19)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="997" width="0.0166%" height="15" fill="rgb(236,221,54)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="981" width="0.0166%" height="15" fill="rgb(207,175,15)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.9334%" y="965" width="0.0166%" height="15" fill="rgb(234,76,8)" fg:x="5667" fg:w="1"/><text x="94.1834%" y="975.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="93.9499%" y="1285" width="0.0166%" height="15" fill="rgb(243,106,0)" fg:x="5668" fg:w="1"/><text x="94.1999%" y="1295.50"></text></g><g><title>CheckProofOfWorkImpl (3 samples, 0.05%)</title><rect x="93.9499%" y="1301" width="0.0497%" height="15" fill="rgb(208,48,19)" fg:x="5668" fg:w="3"/><text x="94.1999%" y="1311.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (2 samples, 0.03%)</title><rect x="93.9665%" y="1285" width="0.0332%" height="15" fill="rgb(251,50,29)" fg:x="5669" fg:w="2"/><text x="94.2165%" y="1295.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="93.9831%" y="1269" width="0.0166%" height="15" fill="rgb(222,31,49)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1279.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (1 samples, 0.02%)</title><rect x="93.9831%" y="1253" width="0.0166%" height="15" fill="rgb(232,33,18)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="93.9831%" y="1237" width="0.0166%" height="15" fill="rgb(209,1,44)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1247.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="93.9831%" y="1221" width="0.0166%" height="15" fill="rgb(211,7,1)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1231.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="93.9831%" y="1205" width="0.0166%" height="15" fill="rgb(224,111,27)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1215.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="93.9831%" y="1189" width="0.0166%" height="15" fill="rgb(252,195,39)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1199.50"></text></g><g><title>std::pair&lt;uint256 const, CBlockIndex&gt;::pair&lt;uint256 const&amp;&gt; (1 samples, 0.02%)</title><rect x="93.9831%" y="1173" width="0.0166%" height="15" fill="rgb(237,198,5)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1183.50"></text></g><g><title>std::pair&lt;uint256 const, CBlockIndex&gt;::pair&lt;uint256 const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="93.9831%" y="1157" width="0.0166%" height="15" fill="rgb(232,148,1)" fg:x="5670" fg:w="1"/><text x="94.2331%" y="1167.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="93.9997%" y="1285" width="0.0166%" height="15" fill="rgb(249,41,3)" fg:x="5671" fg:w="1"/><text x="94.2497%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="93.9997%" y="1269" width="0.0166%" height="15" fill="rgb(215,14,33)" fg:x="5671" fg:w="1"/><text x="94.2497%" y="1279.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="93.9997%" y="1253" width="0.0166%" height="15" fill="rgb(209,146,24)" fg:x="5671" fg:w="1"/><text x="94.2497%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="93.9997%" y="1237" width="0.0166%" height="15" fill="rgb(219,51,47)" fg:x="5671" fg:w="1"/><text x="94.2497%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="93.9997%" y="1221" width="0.0166%" height="15" fill="rgb(234,217,40)" fg:x="5671" fg:w="1"/><text x="94.2497%" y="1231.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.02%)</title><rect x="93.9997%" y="1205" width="0.0166%" height="15" fill="rgb(228,34,26)" fg:x="5671" fg:w="1"/><text x="94.2497%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="94.0162%" y="1269" width="0.0166%" height="15" fill="rgb(224,50,29)" fg:x="5672" fg:w="1"/><text x="94.2662%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="94.0162%" y="1253" width="0.0166%" height="15" fill="rgb(205,79,51)" fg:x="5672" fg:w="1"/><text x="94.2662%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="94.0162%" y="1237" width="0.0166%" height="15" fill="rgb(218,136,28)" fg:x="5672" fg:w="1"/><text x="94.2662%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="94.0162%" y="1221" width="0.0166%" height="15" fill="rgb(220,150,10)" fg:x="5672" fg:w="1"/><text x="94.2662%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (3 samples, 0.05%)</title><rect x="93.9997%" y="1301" width="0.0497%" height="15" fill="rgb(242,158,47)" fg:x="5671" fg:w="3"/><text x="94.2497%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2 samples, 0.03%)</title><rect x="94.0162%" y="1285" width="0.0332%" height="15" fill="rgb(209,68,0)" fg:x="5672" fg:w="2"/><text x="94.2662%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="94.0328%" y="1269" width="0.0166%" height="15" fill="rgb(208,13,41)" fg:x="5673" fg:w="1"/><text x="94.2828%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="94.0328%" y="1253" width="0.0166%" height="15" fill="rgb(226,201,7)" fg:x="5673" fg:w="1"/><text x="94.2828%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="94.0328%" y="1237" width="0.0166%" height="15" fill="rgb(236,103,26)" fg:x="5673" fg:w="1"/><text x="94.2828%" y="1247.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="94.0494%" y="1285" width="0.0166%" height="15" fill="rgb(243,162,8)" fg:x="5674" fg:w="1"/><text x="94.2994%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="94.0494%" y="1269" width="0.0166%" height="15" fill="rgb(237,225,11)" fg:x="5674" fg:w="1"/><text x="94.2994%" y="1279.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="94.0494%" y="1253" width="0.0166%" height="15" fill="rgb(247,186,32)" fg:x="5674" fg:w="1"/><text x="94.2994%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="94.0494%" y="1237" width="0.0166%" height="15" fill="rgb(215,26,28)" fg:x="5674" fg:w="1"/><text x="94.2994%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.02%)</title><rect x="94.0494%" y="1221" width="0.0166%" height="15" fill="rgb(208,121,6)" fg:x="5674" fg:w="1"/><text x="94.2994%" y="1231.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (8 samples, 0.13%)</title><rect x="93.9499%" y="1349" width="0.1326%" height="15" fill="rgb(225,91,3)" fg:x="5668" fg:w="8"/><text x="94.1999%" y="1359.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (8 samples, 0.13%)</title><rect x="93.9499%" y="1333" width="0.1326%" height="15" fill="rgb(246,119,36)" fg:x="5668" fg:w="8"/><text x="94.1999%" y="1343.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (8 samples, 0.13%)</title><rect x="93.9499%" y="1317" width="0.1326%" height="15" fill="rgb(254,173,2)" fg:x="5668" fg:w="8"/><text x="94.1999%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.03%)</title><rect x="94.0494%" y="1301" width="0.0332%" height="15" fill="rgb(209,87,54)" fg:x="5674" fg:w="2"/><text x="94.2994%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="94.0660%" y="1285" width="0.0166%" height="15" fill="rgb(223,216,20)" fg:x="5675" fg:w="1"/><text x="94.3160%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="94.0660%" y="1269" width="0.0166%" height="15" fill="rgb(220,31,8)" fg:x="5675" fg:w="1"/><text x="94.3160%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="94.0660%" y="1253" width="0.0166%" height="15" fill="rgb(220,185,15)" fg:x="5675" fg:w="1"/><text x="94.3160%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="94.0660%" y="1237" width="0.0166%" height="15" fill="rgb(247,190,50)" fg:x="5675" fg:w="1"/><text x="94.3160%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="94.0660%" y="1221" width="0.0166%" height="15" fill="rgb(239,173,47)" fg:x="5675" fg:w="1"/><text x="94.3160%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="94.0660%" y="1205" width="0.0166%" height="15" fill="rgb(218,190,42)" fg:x="5675" fg:w="1"/><text x="94.3160%" y="1215.50"></text></g><g><title>__libc_start_call_main (10 samples, 0.17%)</title><rect x="93.9334%" y="1509" width="0.1658%" height="15" fill="rgb(251,207,16)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1519.50"></text></g><g><title>main (10 samples, 0.17%)</title><rect x="93.9334%" y="1493" width="0.1658%" height="15" fill="rgb(222,199,47)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1503.50"></text></g><g><title>main (10 samples, 0.17%)</title><rect x="93.9334%" y="1477" width="0.1658%" height="15" fill="rgb(245,190,7)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1487.50"></text></g><g><title>AppInitMain (10 samples, 0.17%)</title><rect x="93.9334%" y="1461" width="0.1658%" height="15" fill="rgb(239,85,38)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1471.50"></text></g><g><title>InitAndLoadChainstate (10 samples, 0.17%)</title><rect x="93.9334%" y="1445" width="0.1658%" height="15" fill="rgb(229,69,51)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1455.50"></text></g><g><title>operator (10 samples, 0.17%)</title><rect x="93.9334%" y="1429" width="0.1658%" height="15" fill="rgb(231,104,51)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1439.50"></text></g><g><title>InitAndLoadChainstate (10 samples, 0.17%)</title><rect x="93.9334%" y="1413" width="0.1658%" height="15" fill="rgb(235,49,4)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1423.50"></text></g><g><title>node::LoadChainstate (10 samples, 0.17%)</title><rect x="93.9334%" y="1397" width="0.1658%" height="15" fill="rgb(246,166,20)" fg:x="5667" fg:w="10"/><text x="94.1834%" y="1407.50"></text></g><g><title>node::CompleteChainstateInitialization (9 samples, 0.15%)</title><rect x="93.9499%" y="1381" width="0.1492%" height="15" fill="rgb(230,119,37)" fg:x="5668" fg:w="9"/><text x="94.1999%" y="1391.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (9 samples, 0.15%)</title><rect x="93.9499%" y="1365" width="0.1492%" height="15" fill="rgb(234,77,34)" fg:x="5668" fg:w="9"/><text x="94.1999%" y="1375.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1349" width="0.0166%" height="15" fill="rgb(211,222,33)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1359.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1333" width="0.0166%" height="15" fill="rgb(226,45,42)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1343.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1317" width="0.0166%" height="15" fill="rgb(215,174,28)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1327.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1301" width="0.0166%" height="15" fill="rgb(254,173,49)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1285" width="0.0166%" height="15" fill="rgb(229,191,6)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1269" width="0.0166%" height="15" fill="rgb(212,145,22)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1253" width="0.0166%" height="15" fill="rgb(226,6,51)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1237" width="0.0166%" height="15" fill="rgb(227,128,8)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1221" width="0.0166%" height="15" fill="rgb(205,24,10)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1205" width="0.0166%" height="15" fill="rgb(217,147,27)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1189" width="0.0166%" height="15" fill="rgb(250,82,42)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1173" width="0.0166%" height="15" fill="rgb(248,93,17)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1157" width="0.0166%" height="15" fill="rgb(254,212,40)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1167.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1141" width="0.0166%" height="15" fill="rgb(229,209,2)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1151.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1125" width="0.0166%" height="15" fill="rgb(211,50,43)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1109" width="0.0166%" height="15" fill="rgb(245,196,29)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="94.0825%" y="1093" width="0.0166%" height="15" fill="rgb(216,132,13)" fg:x="5676" fg:w="1"/><text x="94.3325%" y="1103.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="94.0991%" y="1509" width="0.0166%" height="15" fill="rgb(251,108,21)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1519.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.02%)</title><rect x="94.0991%" y="1493" width="0.0166%" height="15" fill="rgb(229,174,54)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1503.50"></text></g><g><title>main (1 samples, 0.02%)</title><rect x="94.0991%" y="1477" width="0.0166%" height="15" fill="rgb(211,175,47)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1487.50"></text></g><g><title>main (1 samples, 0.02%)</title><rect x="94.0991%" y="1461" width="0.0166%" height="15" fill="rgb(234,5,37)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1471.50"></text></g><g><title>AppInitMain (1 samples, 0.02%)</title><rect x="94.0991%" y="1445" width="0.0166%" height="15" fill="rgb(244,150,43)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.02%)</title><rect x="94.0991%" y="1429" width="0.0166%" height="15" fill="rgb(242,172,38)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1439.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="94.0991%" y="1413" width="0.0166%" height="15" fill="rgb(205,27,8)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1423.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.02%)</title><rect x="94.0991%" y="1397" width="0.0166%" height="15" fill="rgb(217,57,3)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1407.50"></text></g><g><title>node::LoadChainstate (1 samples, 0.02%)</title><rect x="94.0991%" y="1381" width="0.0166%" height="15" fill="rgb(242,21,38)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1391.50"></text></g><g><title>node::CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="94.0991%" y="1365" width="0.0166%" height="15" fill="rgb(209,64,43)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1375.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.02%)</title><rect x="94.0991%" y="1349" width="0.0166%" height="15" fill="rgb(222,2,46)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1359.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (1 samples, 0.02%)</title><rect x="94.0991%" y="1333" width="0.0166%" height="15" fill="rgb(218,19,44)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1343.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.02%)</title><rect x="94.0991%" y="1317" width="0.0166%" height="15" fill="rgb(240,203,42)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1327.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="94.0991%" y="1301" width="0.0166%" height="15" fill="rgb(229,23,45)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1311.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (1 samples, 0.02%)</title><rect x="94.0991%" y="1285" width="0.0166%" height="15" fill="rgb(205,228,51)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1295.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.02%)</title><rect x="94.0991%" y="1269" width="0.0166%" height="15" fill="rgb(239,36,20)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1279.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.02%)</title><rect x="94.0991%" y="1253" width="0.0166%" height="15" fill="rgb(248,172,27)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1263.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="94.0991%" y="1237" width="0.0166%" height="15" fill="rgb(244,55,32)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1247.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="94.0991%" y="1221" width="0.0166%" height="15" fill="rgb(215,97,16)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1231.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.02%)</title><rect x="94.0991%" y="1205" width="0.0166%" height="15" fill="rgb(224,80,29)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1215.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.02%)</title><rect x="94.0991%" y="1189" width="0.0166%" height="15" fill="rgb(216,93,47)" fg:x="5677" fg:w="1"/><text x="94.3491%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="94.1157%" y="1509" width="0.0166%" height="15" fill="rgb(238,159,10)" fg:x="5678" fg:w="1"/><text x="94.3657%" y="1519.50"></text></g><g><title>__vsnprintf_internal (1 samples, 0.02%)</title><rect x="94.1323%" y="1509" width="0.0166%" height="15" fill="rgb(223,98,29)" fg:x="5679" fg:w="1"/><text x="94.3823%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1323%" y="1493" width="0.0166%" height="15" fill="rgb(210,176,23)" fg:x="5679" fg:w="1"/><text x="94.3823%" y="1503.50"></text></g><g><title>AppInit (7 samples, 0.12%)</title><rect x="94.1488%" y="1445" width="0.1160%" height="15" fill="rgb(242,162,27)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1455.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (7 samples, 0.12%)</title><rect x="94.1488%" y="1429" width="0.1160%" height="15" fill="rgb(245,109,32)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1439.50"></text></g><g><title>kernel::Context::Context (7 samples, 0.12%)</title><rect x="94.1488%" y="1413" width="0.1160%" height="15" fill="rgb(248,87,8)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1423.50"></text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (7 samples, 0.12%)</title><rect x="94.1488%" y="1397" width="0.1160%" height="15" fill="rgb(250,160,50)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1407.50"></text></g><g><title>kernel::Context::Context (7 samples, 0.12%)</title><rect x="94.1488%" y="1381" width="0.1160%" height="15" fill="rgb(246,165,25)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1391.50"></text></g><g><title>__pthread_once_slow (7 samples, 0.12%)</title><rect x="94.1488%" y="1365" width="0.1160%" height="15" fill="rgb(249,219,3)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1375.50"></text></g><g><title>_FUN (7 samples, 0.12%)</title><rect x="94.1488%" y="1349" width="0.1160%" height="15" fill="rgb(226,66,5)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1359.50"></text></g><g><title>operator (7 samples, 0.12%)</title><rect x="94.1488%" y="1333" width="0.1160%" height="15" fill="rgb(250,220,43)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1343.50"></text></g><g><title>operator (7 samples, 0.12%)</title><rect x="94.1488%" y="1317" width="0.1160%" height="15" fill="rgb(225,111,31)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1327.50"></text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (7 samples, 0.12%)</title><rect x="94.1488%" y="1301" width="0.1160%" height="15" fill="rgb(248,106,18)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1311.50"></text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (7 samples, 0.12%)</title><rect x="94.1488%" y="1285" width="0.1160%" height="15" fill="rgb(220,226,45)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1295.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (7 samples, 0.12%)</title><rect x="94.1488%" y="1269" width="0.1160%" height="15" fill="rgb(208,58,53)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1279.50"></text></g><g><title>RandomInit (7 samples, 0.12%)</title><rect x="94.1488%" y="1253" width="0.1160%" height="15" fill="rgb(209,133,1)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1263.50"></text></g><g><title>CSHA512::Finalize (7 samples, 0.12%)</title><rect x="94.1488%" y="1237" width="0.1160%" height="15" fill="rgb(228,216,27)" fg:x="5680" fg:w="7"/><text x="94.3988%" y="1247.50"></text></g><g><title>CSHA512::Write (5 samples, 0.08%)</title><rect x="94.1820%" y="1221" width="0.0829%" height="15" fill="rgb(238,155,2)" fg:x="5682" fg:w="5"/><text x="94.4320%" y="1231.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="94.2649%" y="1349" width="0.0166%" height="15" fill="rgb(244,99,37)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1359.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="94.2649%" y="1333" width="0.0166%" height="15" fill="rgb(254,32,3)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1343.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="94.2649%" y="1317" width="0.0166%" height="15" fill="rgb(234,46,50)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1327.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="94.2649%" y="1301" width="0.0166%" height="15" fill="rgb(232,118,51)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1311.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="94.2649%" y="1285" width="0.0166%" height="15" fill="rgb(207,24,32)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1 samples, 0.02%)</title><rect x="94.2649%" y="1269" width="0.0166%" height="15" fill="rgb(208,107,43)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1 samples, 0.02%)</title><rect x="94.2649%" y="1253" width="0.0166%" height="15" fill="rgb(231,28,9)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1263.50"></text></g><g><title>__unlink (1 samples, 0.02%)</title><rect x="94.2649%" y="1237" width="0.0166%" height="15" fill="rgb(241,204,15)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1221" width="0.0166%" height="15" fill="rgb(214,54,15)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1205" width="0.0166%" height="15" fill="rgb(230,12,28)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1189" width="0.0166%" height="15" fill="rgb(221,171,5)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1173" width="0.0166%" height="15" fill="rgb(207,72,25)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1157" width="0.0166%" height="15" fill="rgb(249,79,37)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="94.2649%" y="1141" width="0.0166%" height="15" fill="rgb(209,98,49)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1125" width="0.0166%" height="15" fill="rgb(221,62,13)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1109" width="0.0166%" height="15" fill="rgb(223,39,6)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1093" width="0.0166%" height="15" fill="rgb(246,163,20)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1077" width="0.0166%" height="15" fill="rgb(211,111,29)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.2649%" y="1061" width="0.0166%" height="15" fill="rgb(243,118,5)" fg:x="5687" fg:w="1"/><text x="94.5149%" y="1071.50"></text></g><g><title>Chainstate::LoadChainTip (6 samples, 0.10%)</title><rect x="94.2815%" y="1333" width="0.0995%" height="15" fill="rgb(240,144,52)" fg:x="5688" fg:w="6"/><text x="94.5315%" y="1343.50"></text></g><g><title>CChain::SetTip (6 samples, 0.10%)</title><rect x="94.2815%" y="1317" width="0.0995%" height="15" fill="rgb(244,158,36)" fg:x="5688" fg:w="6"/><text x="94.5315%" y="1327.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.02%)</title><rect x="94.4141%" y="1301" width="0.0166%" height="15" fill="rgb(241,109,37)" fg:x="5696" fg:w="1"/><text x="94.6641%" y="1311.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.02%)</title><rect x="94.4141%" y="1285" width="0.0166%" height="15" fill="rgb(213,95,32)" fg:x="5696" fg:w="1"/><text x="94.6641%" y="1295.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.02%)</title><rect x="94.4141%" y="1269" width="0.0166%" height="15" fill="rgb(252,193,9)" fg:x="5696" fg:w="1"/><text x="94.6641%" y="1279.50"></text></g><g><title>std::tuple_element&lt;1ul, std::pair&lt;uint256 const, CBlockIndex&gt; &gt;::type&amp; std::get&lt;1ul, uint256 const, CBlockIndex&gt; (2 samples, 0.03%)</title><rect x="94.4306%" y="1301" width="0.0332%" height="15" fill="rgb(225,213,21)" fg:x="5697" fg:w="2"/><text x="94.6806%" y="1311.50"></text></g><g><title>CBlockIndex&amp; std::__pair_get&lt;1ul&gt;::__get&lt;uint256 const, CBlockIndex&gt; (2 samples, 0.03%)</title><rect x="94.4306%" y="1285" width="0.0332%" height="15" fill="rgb(220,172,46)" fg:x="5697" fg:w="2"/><text x="94.6806%" y="1295.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.12%)</title><rect x="94.3809%" y="1317" width="0.1160%" height="15" fill="rgb(235,75,41)" fg:x="5694" fg:w="7"/><text x="94.6309%" y="1327.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (2 samples, 0.03%)</title><rect x="94.4638%" y="1301" width="0.0332%" height="15" fill="rgb(213,86,9)" fg:x="5699" fg:w="2"/><text x="94.7138%" y="1311.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (2 samples, 0.03%)</title><rect x="94.4638%" y="1285" width="0.0332%" height="15" fill="rgb(238,127,51)" fg:x="5699" fg:w="2"/><text x="94.7138%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::EqualTo (1 samples, 0.02%)</title><rect x="94.5798%" y="1253" width="0.0166%" height="15" fill="rgb(215,2,54)" fg:x="5706" fg:w="1"/><text x="94.8298%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (1 samples, 0.02%)</title><rect x="94.6958%" y="1221" width="0.0166%" height="15" fill="rgb(245,80,6)" fg:x="5713" fg:w="1"/><text x="94.9458%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (2 samples, 0.03%)</title><rect x="94.6958%" y="1237" width="0.0332%" height="15" fill="rgb(233,106,42)" fg:x="5713" fg:w="2"/><text x="94.9458%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator- (1 samples, 0.02%)</title><rect x="94.7124%" y="1221" width="0.0166%" height="15" fill="rgb(244,86,38)" fg:x="5714" fg:w="1"/><text x="94.9624%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (5 samples, 0.08%)</title><rect x="94.7290%" y="1205" width="0.0829%" height="15" fill="rgb(242,167,7)" fg:x="5715" fg:w="5"/><text x="94.9790%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (8 samples, 0.13%)</title><rect x="94.7290%" y="1221" width="0.1326%" height="15" fill="rgb(218,216,3)" fg:x="5715" fg:w="8"/><text x="94.9790%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator- (3 samples, 0.05%)</title><rect x="94.8119%" y="1205" width="0.0497%" height="15" fill="rgb(206,136,36)" fg:x="5720" fg:w="3"/><text x="95.0619%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator++ (2 samples, 0.03%)</title><rect x="94.8284%" y="1189" width="0.0332%" height="15" fill="rgb(206,206,15)" fg:x="5721" fg:w="2"/><text x="95.0784%" y="1199.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (9 samples, 0.15%)</title><rect x="94.7290%" y="1237" width="0.1492%" height="15" fill="rgb(207,163,34)" fg:x="5715" fg:w="9"/><text x="94.9790%" y="1247.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.02%)</title><rect x="94.8616%" y="1221" width="0.0166%" height="15" fill="rgb(240,127,22)" fg:x="5723" fg:w="1"/><text x="95.1116%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="94.8616%" y="1205" width="0.0166%" height="15" fill="rgb(227,49,5)" fg:x="5723" fg:w="1"/><text x="95.1116%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (23 samples, 0.38%)</title><rect x="94.8782%" y="1237" width="0.3812%" height="15" fill="rgb(231,8,6)" fg:x="5724" fg:w="23"/><text x="95.1282%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (44 samples, 0.73%)</title><rect x="94.5964%" y="1253" width="0.7293%" height="15" fill="rgb(223,21,24)" fg:x="5707" fg:w="44"/><text x="94.8464%" y="1263.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (4 samples, 0.07%)</title><rect x="95.2594%" y="1237" width="0.0663%" height="15" fill="rgb(244,44,52)" fg:x="5747" fg:w="4"/><text x="95.5094%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (4 samples, 0.07%)</title><rect x="95.2594%" y="1221" width="0.0663%" height="15" fill="rgb(207,73,28)" fg:x="5747" fg:w="4"/><text x="95.5094%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.2594%" y="1205" width="0.0663%" height="15" fill="rgb(234,215,10)" fg:x="5747" fg:w="4"/><text x="95.5094%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.2594%" y="1189" width="0.0663%" height="15" fill="rgb(236,85,3)" fg:x="5747" fg:w="4"/><text x="95.5094%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.2594%" y="1173" width="0.0663%" height="15" fill="rgb(236,102,39)" fg:x="5747" fg:w="4"/><text x="95.5094%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.2594%" y="1157" width="0.0663%" height="15" fill="rgb(243,50,8)" fg:x="5747" fg:w="4"/><text x="95.5094%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="95.2594%" y="1141" width="0.0663%" height="15" fill="rgb(207,111,4)" fg:x="5747" fg:w="4"/><text x="95.5094%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1125" width="0.0497%" height="15" fill="rgb(230,52,42)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1109" width="0.0497%" height="15" fill="rgb(252,178,50)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1093" width="0.0497%" height="15" fill="rgb(234,46,35)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1077" width="0.0497%" height="15" fill="rgb(228,69,37)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1061" width="0.0497%" height="15" fill="rgb(221,21,11)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1045" width="0.0497%" height="15" fill="rgb(223,56,9)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1029" width="0.0497%" height="15" fill="rgb(234,30,19)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="1013" width="0.0497%" height="15" fill="rgb(211,64,54)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="95.2760%" y="997" width="0.0497%" height="15" fill="rgb(250,189,5)" fg:x="5748" fg:w="3"/><text x="95.5260%" y="1007.50"></text></g><g><title>GetBlockProof (76 samples, 1.26%)</title><rect x="94.5798%" y="1285" width="1.2597%" height="15" fill="rgb(214,180,13)" fg:x="5706" fg:w="76"/><text x="94.8298%" y="1295.50"></text></g><g><title>operator/ (76 samples, 1.26%)</title><rect x="94.5798%" y="1269" width="1.2597%" height="15" fill="rgb(238,40,40)" fg:x="5706" fg:w="76"/><text x="94.8298%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (31 samples, 0.51%)</title><rect x="95.3257%" y="1253" width="0.5138%" height="15" fill="rgb(214,101,38)" fg:x="5751" fg:w="31"/><text x="95.5757%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (12 samples, 0.20%)</title><rect x="95.8395%" y="1285" width="0.1989%" height="15" fill="rgb(242,65,53)" fg:x="5782" fg:w="12"/><text x="96.0895%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (3 samples, 0.05%)</title><rect x="95.9887%" y="1269" width="0.0497%" height="15" fill="rgb(230,22,45)" fg:x="5791" fg:w="3"/><text x="96.2387%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="96.0385%" y="1285" width="0.0166%" height="15" fill="rgb(223,77,1)" fg:x="5794" fg:w="1"/><text x="96.2885%" y="1295.50"></text></g><g><title>CDiskBlockIndex::CDiskBlockIndex (1 samples, 0.02%)</title><rect x="96.0716%" y="1269" width="0.0166%" height="15" fill="rgb(227,33,37)" fg:x="5796" fg:w="1"/><text x="96.3216%" y="1279.50"></text></g><g><title>CBlockIndex::CBlockIndex (1 samples, 0.02%)</title><rect x="96.0716%" y="1253" width="0.0166%" height="15" fill="rgb(224,148,39)" fg:x="5796" fg:w="1"/><text x="96.3216%" y="1263.50"></text></g><g><title>CSHA256::Finalize (2 samples, 0.03%)</title><rect x="96.0882%" y="1221" width="0.0332%" height="15" fill="rgb(232,212,39)" fg:x="5797" fg:w="2"/><text x="96.3382%" y="1231.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.03%)</title><rect x="96.0882%" y="1205" width="0.0332%" height="15" fill="rgb(251,172,7)" fg:x="5797" fg:w="2"/><text x="96.3382%" y="1215.50"></text></g><g><title>QuadRound (2 samples, 0.03%)</title><rect x="96.0882%" y="1189" width="0.0332%" height="15" fill="rgb(219,39,9)" fg:x="5797" fg:w="2"/><text x="96.3382%" y="1199.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.03%)</title><rect x="96.0882%" y="1173" width="0.0332%" height="15" fill="rgb(228,118,14)" fg:x="5797" fg:w="2"/><text x="96.3382%" y="1183.50"></text></g><g><title>CBlockHeader::GetHash (3 samples, 0.05%)</title><rect x="96.0882%" y="1253" width="0.0497%" height="15" fill="rgb(207,140,10)" fg:x="5797" fg:w="3"/><text x="96.3382%" y="1263.50"></text></g><g><title>HashWriter::GetHash (3 samples, 0.05%)</title><rect x="96.0882%" y="1237" width="0.0497%" height="15" fill="rgb(227,111,53)" fg:x="5797" fg:w="3"/><text x="96.3382%" y="1247.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="96.1213%" y="1221" width="0.0166%" height="15" fill="rgb(216,165,16)" fg:x="5799" fg:w="1"/><text x="96.3713%" y="1231.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="96.1213%" y="1205" width="0.0166%" height="15" fill="rgb(226,111,18)" fg:x="5799" fg:w="1"/><text x="96.3713%" y="1215.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="96.1379%" y="1253" width="0.0166%" height="15" fill="rgb(251,27,17)" fg:x="5800" fg:w="1"/><text x="96.3879%" y="1263.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="96.1379%" y="1237" width="0.0166%" height="15" fill="rgb(254,69,9)" fg:x="5800" fg:w="1"/><text x="96.3879%" y="1247.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (5 samples, 0.08%)</title><rect x="96.0882%" y="1269" width="0.0829%" height="15" fill="rgb(234,140,37)" fg:x="5797" fg:w="5"/><text x="96.3382%" y="1279.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="96.1545%" y="1253" width="0.0166%" height="15" fill="rgb(220,93,8)" fg:x="5801" fg:w="1"/><text x="96.4045%" y="1263.50"></text></g><g><title>Shuffle (1 samples, 0.02%)</title><rect x="96.1545%" y="1237" width="0.0166%" height="15" fill="rgb(236,113,3)" fg:x="5801" fg:w="1"/><text x="96.4045%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="96.1545%" y="1221" width="0.0166%" height="15" fill="rgb(234,108,23)" fg:x="5801" fg:w="1"/><text x="96.4045%" y="1231.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="96.1876%" y="1253" width="0.0166%" height="15" fill="rgb(205,114,34)" fg:x="5803" fg:w="1"/><text x="96.4376%" y="1263.50"></text></g><g><title>CheckProofOfWorkImpl (3 samples, 0.05%)</title><rect x="96.1711%" y="1269" width="0.0497%" height="15" fill="rgb(236,200,45)" fg:x="5802" fg:w="3"/><text x="96.4211%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="96.2042%" y="1253" width="0.0166%" height="15" fill="rgb(227,194,29)" fg:x="5804" fg:w="1"/><text x="96.4542%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.02%)</title><rect x="96.2042%" y="1237" width="0.0166%" height="15" fill="rgb(250,76,42)" fg:x="5804" fg:w="1"/><text x="96.4542%" y="1247.50"></text></g><g><title>FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.2208%" y="1269" width="0.0166%" height="15" fill="rgb(208,128,8)" fg:x="5805" fg:w="1"/><text x="96.4708%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.2208%" y="1253" width="0.0166%" height="15" fill="rgb(229,209,35)" fg:x="5805" fg:w="1"/><text x="96.4708%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="96.2208%" y="1237" width="0.0166%" height="15" fill="rgb(215,39,53)" fg:x="5805" fg:w="1"/><text x="96.4708%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::EqualTo (1 samples, 0.02%)</title><rect x="96.2374%" y="1269" width="0.0166%" height="15" fill="rgb(219,123,41)" fg:x="5806" fg:w="1"/><text x="96.4874%" y="1279.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="96.2539%" y="1269" width="0.0166%" height="15" fill="rgb(212,158,18)" fg:x="5807" fg:w="1"/><text x="96.5039%" y="1279.50"></text></g><g><title>CDBIterator::GetKeyImpl (1 samples, 0.02%)</title><rect x="96.2539%" y="1253" width="0.0166%" height="15" fill="rgb(234,196,53)" fg:x="5807" fg:w="1"/><text x="96.5039%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.2539%" y="1237" width="0.0166%" height="15" fill="rgb(210,139,12)" fg:x="5807" fg:w="1"/><text x="96.5039%" y="1247.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.2705%" y="1093" width="0.0166%" height="15" fill="rgb(220,116,54)" fg:x="5808" fg:w="1"/><text x="96.5205%" y="1103.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.2705%" y="1077" width="0.0166%" height="15" fill="rgb(247,103,28)" fg:x="5808" fg:w="1"/><text x="96.5205%" y="1087.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="96.2705%" y="1061" width="0.0166%" height="15" fill="rgb(253,156,45)" fg:x="5808" fg:w="1"/><text x="96.5205%" y="1071.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="96.2705%" y="1045" width="0.0166%" height="15" fill="rgb(237,157,52)" fg:x="5808" fg:w="1"/><text x="96.5205%" y="1055.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="96.2705%" y="1173" width="0.0332%" height="15" fill="rgb(253,112,16)" fg:x="5808" fg:w="2"/><text x="96.5205%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="96.2705%" y="1157" width="0.0332%" height="15" fill="rgb(234,70,18)" fg:x="5808" fg:w="2"/><text x="96.5205%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (2 samples, 0.03%)</title><rect x="96.2705%" y="1141" width="0.0332%" height="15" fill="rgb(247,138,19)" fg:x="5808" fg:w="2"/><text x="96.5205%" y="1151.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="96.2705%" y="1125" width="0.0332%" height="15" fill="rgb(207,171,1)" fg:x="5808" fg:w="2"/><text x="96.5205%" y="1135.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (2 samples, 0.03%)</title><rect x="96.2705%" y="1109" width="0.0332%" height="15" fill="rgb(239,213,3)" fg:x="5808" fg:w="2"/><text x="96.5205%" y="1119.50"></text></g><g><title>pthread_mutex_lock@plt (1 samples, 0.02%)</title><rect x="96.2871%" y="1093" width="0.0166%" height="15" fill="rgb(226,112,4)" fg:x="5809" fg:w="1"/><text x="96.5371%" y="1103.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, uint256&amp;&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1173" width="0.0166%" height="15" fill="rgb(252,170,12)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, uint256&amp;&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1157" width="0.0166%" height="15" fill="rgb(241,106,13)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream, uint256&amp;&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1141" width="0.0166%" height="15" fill="rgb(225,73,23)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1151.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1125" width="0.0166%" height="15" fill="rgb(251,227,29)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1135.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.3037%" y="1109" width="0.0166%" height="15" fill="rgb(237,144,13)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1119.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1093" width="0.0166%" height="15" fill="rgb(232,106,46)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (1 samples, 0.02%)</title><rect x="96.3037%" y="1077" width="0.0166%" height="15" fill="rgb(245,154,53)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1087.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1061" width="0.0166%" height="15" fill="rgb(212,119,47)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1071.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1045" width="0.0166%" height="15" fill="rgb(253,135,25)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1055.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1029" width="0.0166%" height="15" fill="rgb(253,208,39)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1039.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="96.3037%" y="1013" width="0.0166%" height="15" fill="rgb(226,64,12)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1023.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt;::UniqueLock (1 samples, 0.02%)</title><rect x="96.3037%" y="997" width="0.0166%" height="15" fill="rgb(214,162,37)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="1007.50"></text></g><g><title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock (1 samples, 0.02%)</title><rect x="96.3037%" y="981" width="0.0166%" height="15" fill="rgb(250,104,5)" fg:x="5810" fg:w="1"/><text x="96.5537%" y="991.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="96.3202%" y="1109" width="0.0166%" height="15" fill="rgb(220,202,50)" fg:x="5811" fg:w="1"/><text x="96.5702%" y="1119.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="96.3202%" y="1093" width="0.0166%" height="15" fill="rgb(248,67,38)" fg:x="5811" fg:w="1"/><text x="96.5702%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (5 samples, 0.08%)</title><rect x="96.2705%" y="1253" width="0.0829%" height="15" fill="rgb(242,94,35)" fg:x="5808" fg:w="5"/><text x="96.5205%" y="1263.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (5 samples, 0.08%)</title><rect x="96.2705%" y="1237" width="0.0829%" height="15" fill="rgb(209,78,37)" fg:x="5808" fg:w="5"/><text x="96.5205%" y="1247.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (5 samples, 0.08%)</title><rect x="96.2705%" y="1221" width="0.0829%" height="15" fill="rgb(230,126,47)" fg:x="5808" fg:w="5"/><text x="96.5205%" y="1231.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (5 samples, 0.08%)</title><rect x="96.2705%" y="1205" width="0.0829%" height="15" fill="rgb(222,110,35)" fg:x="5808" fg:w="5"/><text x="96.5205%" y="1215.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (5 samples, 0.08%)</title><rect x="96.2705%" y="1189" width="0.0829%" height="15" fill="rgb(233,154,20)" fg:x="5808" fg:w="5"/><text x="96.5205%" y="1199.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, unsigned int&amp;&gt; (2 samples, 0.03%)</title><rect x="96.3202%" y="1173" width="0.0332%" height="15" fill="rgb(223,53,50)" fg:x="5811" fg:w="2"/><text x="96.5702%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, unsigned int&amp;&gt; (2 samples, 0.03%)</title><rect x="96.3202%" y="1157" width="0.0332%" height="15" fill="rgb(251,27,26)" fg:x="5811" fg:w="2"/><text x="96.5702%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="96.3202%" y="1141" width="0.0332%" height="15" fill="rgb(223,189,16)" fg:x="5811" fg:w="2"/><text x="96.5702%" y="1151.50"></text></g><g><title>unsigned int ser_readdata32&lt;DataStream&gt; (2 samples, 0.03%)</title><rect x="96.3202%" y="1125" width="0.0332%" height="15" fill="rgb(207,5,54)" fg:x="5811" fg:w="2"/><text x="96.5702%" y="1135.50"></text></g><g><title>int ReadVarInt&lt;DataStream, (VarIntMode)1, int&gt; (1 samples, 0.02%)</title><rect x="96.3368%" y="1109" width="0.0166%" height="15" fill="rgb(254,124,50)" fg:x="5812" fg:w="1"/><text x="96.5868%" y="1119.50"></text></g><g><title>DataStream::DataStream (8 samples, 0.13%)</title><rect x="96.3534%" y="1253" width="0.1326%" height="15" fill="rgb(253,193,24)" fg:x="5813" fg:w="8"/><text x="96.6034%" y="1263.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (8 samples, 0.13%)</title><rect x="96.3534%" y="1237" width="0.1326%" height="15" fill="rgb(235,170,24)" fg:x="5813" fg:w="8"/><text x="96.6034%" y="1247.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (8 samples, 0.13%)</title><rect x="96.3534%" y="1221" width="0.1326%" height="15" fill="rgb(222,212,52)" fg:x="5813" fg:w="8"/><text x="96.6034%" y="1231.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (7 samples, 0.12%)</title><rect x="96.3700%" y="1205" width="0.1160%" height="15" fill="rgb(223,17,45)" fg:x="5814" fg:w="7"/><text x="96.6200%" y="1215.50"></text></g><g><title>decltype  (4 samples, 0.07%)</title><rect x="96.4197%" y="1189" width="0.0663%" height="15" fill="rgb(227,103,26)" fg:x="5817" fg:w="4"/><text x="96.6697%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (4 samples, 0.07%)</title><rect x="96.4197%" y="1173" width="0.0663%" height="15" fill="rgb(251,151,25)" fg:x="5817" fg:w="4"/><text x="96.6697%" y="1183.50"></text></g><g><title>decltype (4 samples, 0.07%)</title><rect x="96.4197%" y="1157" width="0.0663%" height="15" fill="rgb(248,144,29)" fg:x="5817" fg:w="4"/><text x="96.6697%" y="1167.50"></text></g><g><title>DataStream::Xor (2 samples, 0.03%)</title><rect x="96.4860%" y="1253" width="0.0332%" height="15" fill="rgb(245,97,16)" fg:x="5821" fg:w="2"/><text x="96.7360%" y="1263.50"></text></g><g><title>util::Xor (2 samples, 0.03%)</title><rect x="96.4860%" y="1237" width="0.0332%" height="15" fill="rgb(220,200,29)" fg:x="5821" fg:w="2"/><text x="96.7360%" y="1247.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="96.5026%" y="1221" width="0.0166%" height="15" fill="rgb(206,38,29)" fg:x="5822" fg:w="1"/><text x="96.7526%" y="1231.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="96.5026%" y="1205" width="0.0166%" height="15" fill="rgb(245,19,52)" fg:x="5822" fg:w="1"/><text x="96.7526%" y="1215.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.02%)</title><rect x="96.5191%" y="1253" width="0.0166%" height="15" fill="rgb(205,67,43)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1263.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="96.5191%" y="1237" width="0.0166%" height="15" fill="rgb(217,128,23)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="96.5191%" y="1221" width="0.0166%" height="15" fill="rgb(210,109,28)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="96.5191%" y="1205" width="0.0166%" height="15" fill="rgb(233,181,7)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="96.5191%" y="1189" width="0.0166%" height="15" fill="rgb(244,11,22)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1199.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (1 samples, 0.02%)</title><rect x="96.5191%" y="1173" width="0.0166%" height="15" fill="rgb(205,124,54)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1183.50"></text></g><g><title>std::allocator&lt;std::byte&gt;::deallocate (1 samples, 0.02%)</title><rect x="96.5191%" y="1157" width="0.0166%" height="15" fill="rgb(218,21,27)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1167.50"></text></g><g><title>std::__new_allocator&lt;std::byte&gt;::deallocate (1 samples, 0.02%)</title><rect x="96.5191%" y="1141" width="0.0166%" height="15" fill="rgb(224,153,33)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="96.5191%" y="1125" width="0.0166%" height="15" fill="rgb(240,219,28)" fg:x="5823" fg:w="1"/><text x="96.7691%" y="1135.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (17 samples, 0.28%)</title><rect x="96.2705%" y="1269" width="0.2818%" height="15" fill="rgb(214,80,29)" fg:x="5808" fg:w="17"/><text x="96.5205%" y="1279.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.5357%" y="1253" width="0.0166%" height="15" fill="rgb(247,148,44)" fg:x="5824" fg:w="1"/><text x="96.7857%" y="1263.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="96.5357%" y="1237" width="0.0166%" height="15" fill="rgb(243,110,30)" fg:x="5824" fg:w="1"/><text x="96.7857%" y="1247.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="96.5357%" y="1221" width="0.0166%" height="15" fill="rgb(243,173,41)" fg:x="5824" fg:w="1"/><text x="96.7857%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="96.5357%" y="1205" width="0.0166%" height="15" fill="rgb(225,160,47)" fg:x="5824" fg:w="1"/><text x="96.7857%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="96.5357%" y="1189" width="0.0166%" height="15" fill="rgb(215,44,21)" fg:x="5824" fg:w="1"/><text x="96.7857%" y="1199.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="96.5357%" y="1173" width="0.0166%" height="15" fill="rgb(248,90,3)" fg:x="5824" fg:w="1"/><text x="96.7857%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="96.5523%" y="1269" width="0.0166%" height="15" fill="rgb(220,196,49)" fg:x="5825" fg:w="1"/><text x="96.8023%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (1 samples, 0.02%)</title><rect x="96.5523%" y="1253" width="0.0166%" height="15" fill="rgb(217,138,14)" fg:x="5825" fg:w="1"/><text x="96.8023%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.02%)</title><rect x="96.5689%" y="1253" width="0.0166%" height="15" fill="rgb(219,111,20)" fg:x="5826" fg:w="1"/><text x="96.8189%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="96.5689%" y="1237" width="0.0166%" height="15" fill="rgb(218,114,4)" fg:x="5826" fg:w="1"/><text x="96.8189%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.03%)</title><rect x="96.5689%" y="1269" width="0.0332%" height="15" fill="rgb(238,133,3)" fg:x="5826" fg:w="2"/><text x="96.8189%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="96.5854%" y="1253" width="0.0166%" height="15" fill="rgb(224,95,0)" fg:x="5827" fg:w="1"/><text x="96.8354%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="96.5854%" y="1237" width="0.0166%" height="15" fill="rgb(220,169,35)" fg:x="5827" fg:w="1"/><text x="96.8354%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="96.6020%" y="1269" width="0.0166%" height="15" fill="rgb(242,116,47)" fg:x="5828" fg:w="1"/><text x="96.8520%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.6186%" y="1269" width="0.0166%" height="15" fill="rgb(251,42,20)" fg:x="5829" fg:w="1"/><text x="96.8686%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.6186%" y="1253" width="0.0166%" height="15" fill="rgb(234,7,34)" fg:x="5829" fg:w="1"/><text x="96.8686%" y="1263.50"></text></g><g><title>leveldb::DecodeFixed64 (1 samples, 0.02%)</title><rect x="96.6186%" y="1237" width="0.0166%" height="15" fill="rgb(243,208,13)" fg:x="5829" fg:w="1"/><text x="96.8686%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.6186%" y="1221" width="0.0166%" height="15" fill="rgb(227,33,28)" fg:x="5829" fg:w="1"/><text x="96.8686%" y="1231.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="96.6352%" y="1189" width="0.0166%" height="15" fill="rgb(250,47,37)" fg:x="5830" fg:w="1"/><text x="96.8852%" y="1199.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="96.6352%" y="1173" width="0.0166%" height="15" fill="rgb(235,111,52)" fg:x="5830" fg:w="1"/><text x="96.8852%" y="1183.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="96.6352%" y="1157" width="0.0166%" height="15" fill="rgb(223,64,28)" fg:x="5830" fg:w="1"/><text x="96.8852%" y="1167.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="96.6352%" y="1141" width="0.0166%" height="15" fill="rgb(236,67,22)" fg:x="5830" fg:w="1"/><text x="96.8852%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1173" width="0.0663%" height="15" fill="rgb(243,79,24)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1157" width="0.0663%" height="15" fill="rgb(241,225,22)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1141" width="0.0663%" height="15" fill="rgb(228,214,26)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1125" width="0.0663%" height="15" fill="rgb(219,84,52)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1109" width="0.0663%" height="15" fill="rgb(220,12,22)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1093" width="0.0663%" height="15" fill="rgb(219,9,49)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1077" width="0.0663%" height="15" fill="rgb(237,40,43)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1061" width="0.0663%" height="15" fill="rgb(212,189,32)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.6683%" y="1045" width="0.0663%" height="15" fill="rgb(247,48,9)" fg:x="5832" fg:w="4"/><text x="96.9183%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.6849%" y="1029" width="0.0497%" height="15" fill="rgb(247,112,3)" fg:x="5833" fg:w="3"/><text x="96.9349%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.6849%" y="1013" width="0.0497%" height="15" fill="rgb(243,110,18)" fg:x="5833" fg:w="3"/><text x="96.9349%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.6849%" y="997" width="0.0497%" height="15" fill="rgb(233,223,44)" fg:x="5833" fg:w="3"/><text x="96.9349%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.6849%" y="981" width="0.0497%" height="15" fill="rgb(245,160,20)" fg:x="5833" fg:w="3"/><text x="96.9349%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.6849%" y="965" width="0.0497%" height="15" fill="rgb(225,37,1)" fg:x="5833" fg:w="3"/><text x="96.9349%" y="975.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (8 samples, 0.13%)</title><rect x="96.6352%" y="1205" width="0.1326%" height="15" fill="rgb(253,227,39)" fg:x="5830" fg:w="8"/><text x="96.8852%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.12%)</title><rect x="96.6517%" y="1189" width="0.1160%" height="15" fill="rgb(240,179,26)" fg:x="5831" fg:w="7"/><text x="96.9017%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2 samples, 0.03%)</title><rect x="96.7346%" y="1173" width="0.0332%" height="15" fill="rgb(237,212,23)" fg:x="5836" fg:w="2"/><text x="96.9846%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (2 samples, 0.03%)</title><rect x="96.7346%" y="1157" width="0.0332%" height="15" fill="rgb(221,38,11)" fg:x="5836" fg:w="2"/><text x="96.9846%" y="1167.50"></text></g><g><title>std::equal_to&lt;uint256&gt;::operator (2 samples, 0.03%)</title><rect x="96.7346%" y="1141" width="0.0332%" height="15" fill="rgb(215,85,6)" fg:x="5836" fg:w="2"/><text x="96.9846%" y="1151.50"></text></g><g><title>operator== (2 samples, 0.03%)</title><rect x="96.7346%" y="1125" width="0.0332%" height="15" fill="rgb(239,64,14)" fg:x="5836" fg:w="2"/><text x="96.9846%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.03%)</title><rect x="96.7346%" y="1109" width="0.0332%" height="15" fill="rgb(215,150,32)" fg:x="5836" fg:w="2"/><text x="96.9846%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="96.8672%" y="1157" width="0.0166%" height="15" fill="rgb(238,15,13)" fg:x="5844" fg:w="1"/><text x="97.1172%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (1 samples, 0.02%)</title><rect x="96.8672%" y="1141" width="0.0166%" height="15" fill="rgb(251,87,8)" fg:x="5844" fg:w="1"/><text x="97.1172%" y="1151.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="96.8672%" y="1125" width="0.0166%" height="15" fill="rgb(206,86,1)" fg:x="5844" fg:w="1"/><text x="97.1172%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (8 samples, 0.13%)</title><rect x="96.7678%" y="1205" width="0.1326%" height="15" fill="rgb(208,151,45)" fg:x="5838" fg:w="8"/><text x="97.0178%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.13%)</title><rect x="96.7678%" y="1189" width="0.1326%" height="15" fill="rgb(231,181,24)" fg:x="5838" fg:w="8"/><text x="97.0178%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.13%)</title><rect x="96.7678%" y="1173" width="0.1326%" height="15" fill="rgb(240,106,29)" fg:x="5838" fg:w="8"/><text x="97.0178%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="96.8838%" y="1157" width="0.0166%" height="15" fill="rgb(227,166,11)" fg:x="5845" fg:w="1"/><text x="97.1338%" y="1167.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="96.8838%" y="1141" width="0.0166%" height="15" fill="rgb(254,14,34)" fg:x="5845" fg:w="1"/><text x="97.1338%" y="1151.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (52 samples, 0.86%)</title><rect x="96.0550%" y="1285" width="0.8619%" height="15" fill="rgb(223,222,6)" fg:x="5795" fg:w="52"/><text x="96.3050%" y="1295.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (17 samples, 0.28%)</title><rect x="96.6352%" y="1269" width="0.2818%" height="15" fill="rgb(245,69,24)" fg:x="5830" fg:w="17"/><text x="96.8852%" y="1279.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (17 samples, 0.28%)</title><rect x="96.6352%" y="1253" width="0.2818%" height="15" fill="rgb(213,193,7)" fg:x="5830" fg:w="17"/><text x="96.8852%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (17 samples, 0.28%)</title><rect x="96.6352%" y="1237" width="0.2818%" height="15" fill="rgb(237,92,51)" fg:x="5830" fg:w="17"/><text x="96.8852%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (17 samples, 0.28%)</title><rect x="96.6352%" y="1221" width="0.2818%" height="15" fill="rgb(225,194,6)" fg:x="5830" fg:w="17"/><text x="96.8852%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9004%" y="1205" width="0.0166%" height="15" fill="rgb(205,159,49)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9004%" y="1189" width="0.0166%" height="15" fill="rgb(219,69,2)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="96.9004%" y="1173" width="0.0166%" height="15" fill="rgb(215,107,24)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1183.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="96.9004%" y="1157" width="0.0166%" height="15" fill="rgb(249,208,29)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1167.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="96.9004%" y="1141" width="0.0166%" height="15" fill="rgb(213,147,10)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1151.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="96.9004%" y="1125" width="0.0166%" height="15" fill="rgb(254,140,42)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1135.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="96.9004%" y="1109" width="0.0166%" height="15" fill="rgb(249,9,15)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1119.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="96.9004%" y="1093" width="0.0166%" height="15" fill="rgb(210,19,33)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9004%" y="1077" width="0.0166%" height="15" fill="rgb(241,121,22)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9004%" y="1061" width="0.0166%" height="15" fill="rgb(244,69,52)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9004%" y="1045" width="0.0166%" height="15" fill="rgb(244,191,54)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9004%" y="1029" width="0.0166%" height="15" fill="rgb(250,3,53)" fg:x="5846" fg:w="1"/><text x="97.1504%" y="1039.50"></text></g><g><title>key (1 samples, 0.02%)</title><rect x="96.9170%" y="1285" width="0.0166%" height="15" fill="rgb(205,77,3)" fg:x="5847" fg:w="1"/><text x="97.1670%" y="1295.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="96.9170%" y="1269" width="0.0166%" height="15" fill="rgb(207,155,3)" fg:x="5847" fg:w="1"/><text x="97.1670%" y="1279.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.12%)</title><rect x="96.9335%" y="1285" width="0.1160%" height="15" fill="rgb(224,79,2)" fg:x="5848" fg:w="7"/><text x="97.1835%" y="1295.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (6 samples, 0.10%)</title><rect x="96.9501%" y="1269" width="0.0995%" height="15" fill="rgb(243,172,5)" fg:x="5849" fg:w="6"/><text x="97.2001%" y="1279.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (6 samples, 0.10%)</title><rect x="96.9501%" y="1253" width="0.0995%" height="15" fill="rgb(217,23,43)" fg:x="5849" fg:w="6"/><text x="97.2001%" y="1263.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CBlockIndex*&gt; &gt;::construct&lt;CBlockIndex*, CBlockIndex*&gt; (2 samples, 0.03%)</title><rect x="97.0164%" y="1237" width="0.0332%" height="15" fill="rgb(223,109,20)" fg:x="5853" fg:w="2"/><text x="97.2664%" y="1247.50"></text></g><g><title>decltype  (2 samples, 0.03%)</title><rect x="97.0164%" y="1221" width="0.0332%" height="15" fill="rgb(232,159,21)" fg:x="5853" fg:w="2"/><text x="97.2664%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="97.0164%" y="1205" width="0.0332%" height="15" fill="rgb(219,58,2)" fg:x="5853" fg:w="2"/><text x="97.2664%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="97.0164%" y="1189" width="0.0332%" height="15" fill="rgb(241,56,8)" fg:x="5853" fg:w="2"/><text x="97.2664%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1173" width="0.0166%" height="15" fill="rgb(249,10,27)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1157" width="0.0166%" height="15" fill="rgb(248,177,5)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1141" width="0.0166%" height="15" fill="rgb(239,12,30)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1125" width="0.0166%" height="15" fill="rgb(229,164,25)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1109" width="0.0166%" height="15" fill="rgb(231,217,50)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1093" width="0.0166%" height="15" fill="rgb(247,99,32)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1077" width="0.0166%" height="15" fill="rgb(240,74,50)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1061" width="0.0166%" height="15" fill="rgb(218,54,8)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.0330%" y="1045" width="0.0166%" height="15" fill="rgb(227,132,20)" fg:x="5854" fg:w="1"/><text x="97.2830%" y="1055.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (2 samples, 0.03%)</title><rect x="97.0661%" y="1189" width="0.0332%" height="15" fill="rgb(232,134,12)" fg:x="5856" fg:w="2"/><text x="97.3161%" y="1199.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.03%)</title><rect x="97.0661%" y="1173" width="0.0332%" height="15" fill="rgb(250,129,18)" fg:x="5856" fg:w="2"/><text x="97.3161%" y="1183.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.0661%" y="1157" width="0.0332%" height="15" fill="rgb(232,129,47)" fg:x="5856" fg:w="2"/><text x="97.3161%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.0661%" y="1141" width="0.0332%" height="15" fill="rgb(230,31,40)" fg:x="5856" fg:w="2"/><text x="97.3161%" y="1151.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.0661%" y="1125" width="0.0332%" height="15" fill="rgb(232,126,10)" fg:x="5856" fg:w="2"/><text x="97.3161%" y="1135.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.0827%" y="1109" width="0.0166%" height="15" fill="rgb(205,46,31)" fg:x="5857" fg:w="1"/><text x="97.3327%" y="1119.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.0827%" y="1093" width="0.0166%" height="15" fill="rgb(232,37,37)" fg:x="5857" fg:w="1"/><text x="97.3327%" y="1103.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.0496%" y="1253" width="0.0829%" height="15" fill="rgb(240,91,16)" fg:x="5855" fg:w="5"/><text x="97.2996%" y="1263.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.0496%" y="1237" width="0.0829%" height="15" fill="rgb(224,160,9)" fg:x="5855" fg:w="5"/><text x="97.2996%" y="1247.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.0496%" y="1221" width="0.0829%" height="15" fill="rgb(215,116,14)" fg:x="5855" fg:w="5"/><text x="97.2996%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.07%)</title><rect x="97.0661%" y="1205" width="0.0663%" height="15" fill="rgb(235,46,36)" fg:x="5856" fg:w="4"/><text x="97.3161%" y="1215.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.03%)</title><rect x="97.0993%" y="1189" width="0.0332%" height="15" fill="rgb(238,39,28)" fg:x="5858" fg:w="2"/><text x="97.3493%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1324%" y="1237" width="0.0332%" height="15" fill="rgb(242,125,29)" fg:x="5860" fg:w="2"/><text x="97.3824%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1324%" y="1221" width="0.0332%" height="15" fill="rgb(238,211,30)" fg:x="5860" fg:w="2"/><text x="97.3824%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.1324%" y="1205" width="0.0332%" height="15" fill="rgb(227,201,28)" fg:x="5860" fg:w="2"/><text x="97.3824%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1324%" y="1189" width="0.0332%" height="15" fill="rgb(238,77,29)" fg:x="5860" fg:w="2"/><text x="97.3824%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1324%" y="1173" width="0.0332%" height="15" fill="rgb(213,221,40)" fg:x="5860" fg:w="2"/><text x="97.3824%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1324%" y="1157" width="0.0332%" height="15" fill="rgb(226,220,44)" fg:x="5860" fg:w="2"/><text x="97.3824%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.1324%" y="1141" width="0.0332%" height="15" fill="rgb(228,90,23)" fg:x="5860" fg:w="2"/><text x="97.3824%" y="1151.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.1656%" y="1173" width="0.0166%" height="15" fill="rgb(235,72,29)" fg:x="5862" fg:w="1"/><text x="97.4156%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.1656%" y="1221" width="0.0497%" height="15" fill="rgb(248,117,39)" fg:x="5862" fg:w="3"/><text x="97.4156%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.1656%" y="1205" width="0.0497%" height="15" fill="rgb(225,43,28)" fg:x="5862" fg:w="3"/><text x="97.4156%" y="1215.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.05%)</title><rect x="97.1656%" y="1189" width="0.0497%" height="15" fill="rgb(240,93,4)" fg:x="5862" fg:w="3"/><text x="97.4156%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1822%" y="1173" width="0.0332%" height="15" fill="rgb(234,178,27)" fg:x="5863" fg:w="2"/><text x="97.4322%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1822%" y="1157" width="0.0332%" height="15" fill="rgb(254,88,22)" fg:x="5863" fg:w="2"/><text x="97.4322%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.1822%" y="1141" width="0.0332%" height="15" fill="rgb(240,206,50)" fg:x="5863" fg:w="2"/><text x="97.4322%" y="1151.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.1987%" y="1125" width="0.0166%" height="15" fill="rgb(249,103,8)" fg:x="5864" fg:w="1"/><text x="97.4487%" y="1135.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.2153%" y="1157" width="0.0166%" height="15" fill="rgb(241,178,36)" fg:x="5865" fg:w="1"/><text x="97.4653%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.2153%" y="1205" width="0.0332%" height="15" fill="rgb(246,110,15)" fg:x="5865" fg:w="2"/><text x="97.4653%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.2153%" y="1189" width="0.0332%" height="15" fill="rgb(207,14,43)" fg:x="5865" fg:w="2"/><text x="97.4653%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.2153%" y="1173" width="0.0332%" height="15" fill="rgb(253,219,19)" fg:x="5865" fg:w="2"/><text x="97.4653%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2319%" y="1157" width="0.0166%" height="15" fill="rgb(216,126,5)" fg:x="5866" fg:w="1"/><text x="97.4819%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2319%" y="1141" width="0.0166%" height="15" fill="rgb(218,78,42)" fg:x="5866" fg:w="1"/><text x="97.4819%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2319%" y="1125" width="0.0166%" height="15" fill="rgb(215,154,40)" fg:x="5866" fg:w="1"/><text x="97.4819%" y="1135.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (162 samples, 2.69%)</title><rect x="94.5798%" y="1301" width="2.6852%" height="15" fill="rgb(235,129,32)" fg:x="5706" fg:w="162"/><text x="94.8298%" y="1311.50">no..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (13 samples, 0.22%)</title><rect x="97.0496%" y="1285" width="0.2155%" height="15" fill="rgb(218,51,8)" fg:x="5855" fg:w="13"/><text x="97.2996%" y="1295.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (13 samples, 0.22%)</title><rect x="97.0496%" y="1269" width="0.2155%" height="15" fill="rgb(245,48,4)" fg:x="5855" fg:w="13"/><text x="97.2996%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (8 samples, 0.13%)</title><rect x="97.1324%" y="1253" width="0.1326%" height="15" fill="rgb(250,175,12)" fg:x="5860" fg:w="8"/><text x="97.3824%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (6 samples, 0.10%)</title><rect x="97.1656%" y="1237" width="0.0995%" height="15" fill="rgb(237,95,40)" fg:x="5862" fg:w="6"/><text x="97.4156%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.2153%" y="1221" width="0.0497%" height="15" fill="rgb(244,120,0)" fg:x="5865" fg:w="3"/><text x="97.4653%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2485%" y="1205" width="0.0166%" height="15" fill="rgb(241,19,42)" fg:x="5867" fg:w="1"/><text x="97.4985%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2485%" y="1189" width="0.0166%" height="15" fill="rgb(217,174,48)" fg:x="5867" fg:w="1"/><text x="97.4985%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.2485%" y="1173" width="0.0166%" height="15" fill="rgb(239,36,38)" fg:x="5867" fg:w="1"/><text x="97.4985%" y="1183.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.2485%" y="1157" width="0.0166%" height="15" fill="rgb(220,63,49)" fg:x="5867" fg:w="1"/><text x="97.4985%" y="1167.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (169 samples, 2.80%)</title><rect x="94.4969%" y="1317" width="2.8013%" height="15" fill="rgb(240,101,13)" fg:x="5701" fg:w="169"/><text x="94.7469%" y="1327.50">no..</text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (2 samples, 0.03%)</title><rect x="97.2650%" y="1301" width="0.0332%" height="15" fill="rgb(209,184,51)" fg:x="5868" fg:w="2"/><text x="97.5150%" y="1311.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (2 samples, 0.03%)</title><rect x="97.2650%" y="1285" width="0.0332%" height="15" fill="rgb(206,136,39)" fg:x="5868" fg:w="2"/><text x="97.5150%" y="1295.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (2 samples, 0.03%)</title><rect x="97.2650%" y="1269" width="0.0332%" height="15" fill="rgb(254,47,45)" fg:x="5868" fg:w="2"/><text x="97.5150%" y="1279.50"></text></g><g><title>util::SignalInterrupt::operator bool (1 samples, 0.02%)</title><rect x="97.2982%" y="1317" width="0.0166%" height="15" fill="rgb(252,103,20)" fg:x="5870" fg:w="1"/><text x="97.5482%" y="1327.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (2 samples, 0.03%)</title><rect x="97.3313%" y="1221" width="0.0332%" height="15" fill="rgb(230,69,12)" fg:x="5872" fg:w="2"/><text x="97.5813%" y="1231.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.03%)</title><rect x="97.3313%" y="1205" width="0.0332%" height="15" fill="rgb(219,2,28)" fg:x="5872" fg:w="2"/><text x="97.5813%" y="1215.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.3313%" y="1189" width="0.0332%" height="15" fill="rgb(210,9,12)" fg:x="5872" fg:w="2"/><text x="97.5813%" y="1199.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.3313%" y="1173" width="0.0332%" height="15" fill="rgb(235,99,33)" fg:x="5872" fg:w="2"/><text x="97.5813%" y="1183.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.3313%" y="1157" width="0.0332%" height="15" fill="rgb(230,11,38)" fg:x="5872" fg:w="2"/><text x="97.5813%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.3148%" y="1285" width="0.0663%" height="15" fill="rgb(217,129,0)" fg:x="5871" fg:w="4"/><text x="97.5648%" y="1295.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.3148%" y="1269" width="0.0663%" height="15" fill="rgb(222,198,4)" fg:x="5871" fg:w="4"/><text x="97.5648%" y="1279.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.3313%" y="1253" width="0.0497%" height="15" fill="rgb(246,170,27)" fg:x="5872" fg:w="3"/><text x="97.5813%" y="1263.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.05%)</title><rect x="97.3313%" y="1237" width="0.0497%" height="15" fill="rgb(229,17,28)" fg:x="5872" fg:w="3"/><text x="97.5813%" y="1247.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.3645%" y="1221" width="0.0166%" height="15" fill="rgb(233,198,48)" fg:x="5874" fg:w="1"/><text x="97.6145%" y="1231.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.03%)</title><rect x="97.3811%" y="1221" width="0.0332%" height="15" fill="rgb(238,103,23)" fg:x="5875" fg:w="2"/><text x="97.6311%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;::operator-- (1 samples, 0.02%)</title><rect x="97.4142%" y="1173" width="0.0166%" height="15" fill="rgb(206,91,41)" fg:x="5877" fg:w="1"/><text x="97.6642%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.3811%" y="1269" width="0.0829%" height="15" fill="rgb(227,34,25)" fg:x="5875" fg:w="5"/><text x="97.6311%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.08%)</title><rect x="97.3811%" y="1253" width="0.0829%" height="15" fill="rgb(210,110,44)" fg:x="5875" fg:w="5"/><text x="97.6311%" y="1263.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (5 samples, 0.08%)</title><rect x="97.3811%" y="1237" width="0.0829%" height="15" fill="rgb(216,189,8)" fg:x="5875" fg:w="5"/><text x="97.6311%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.4142%" y="1221" width="0.0497%" height="15" fill="rgb(234,9,46)" fg:x="5877" fg:w="3"/><text x="97.6642%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.4142%" y="1205" width="0.0497%" height="15" fill="rgb(251,200,5)" fg:x="5877" fg:w="3"/><text x="97.6642%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.4142%" y="1189" width="0.0497%" height="15" fill="rgb(238,165,37)" fg:x="5877" fg:w="3"/><text x="97.6642%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.4308%" y="1173" width="0.0332%" height="15" fill="rgb(232,77,38)" fg:x="5878" fg:w="2"/><text x="97.6808%" y="1183.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.4639%" y="1205" width="0.0166%" height="15" fill="rgb(253,179,33)" fg:x="5880" fg:w="1"/><text x="97.7139%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.4639%" y="1253" width="0.0497%" height="15" fill="rgb(240,13,35)" fg:x="5880" fg:w="3"/><text x="97.7139%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.4639%" y="1237" width="0.0497%" height="15" fill="rgb(242,150,49)" fg:x="5880" fg:w="3"/><text x="97.7139%" y="1247.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.05%)</title><rect x="97.4639%" y="1221" width="0.0497%" height="15" fill="rgb(237,176,28)" fg:x="5880" fg:w="3"/><text x="97.7139%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.4805%" y="1205" width="0.0332%" height="15" fill="rgb(214,176,33)" fg:x="5881" fg:w="2"/><text x="97.7305%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.4805%" y="1189" width="0.0332%" height="15" fill="rgb(214,25,12)" fg:x="5881" fg:w="2"/><text x="97.7305%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.4805%" y="1173" width="0.0332%" height="15" fill="rgb(238,190,20)" fg:x="5881" fg:w="2"/><text x="97.7305%" y="1183.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.4971%" y="1157" width="0.0166%" height="15" fill="rgb(208,11,19)" fg:x="5882" fg:w="1"/><text x="97.7471%" y="1167.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.5137%" y="1157" width="0.0166%" height="15" fill="rgb(239,90,4)" fg:x="5883" fg:w="1"/><text x="97.7637%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.5137%" y="1205" width="0.0332%" height="15" fill="rgb(248,110,3)" fg:x="5883" fg:w="2"/><text x="97.7637%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.5137%" y="1189" width="0.0332%" height="15" fill="rgb(210,41,30)" fg:x="5883" fg:w="2"/><text x="97.7637%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.03%)</title><rect x="97.5137%" y="1173" width="0.0332%" height="15" fill="rgb(239,36,8)" fg:x="5883" fg:w="2"/><text x="97.7637%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5303%" y="1157" width="0.0166%" height="15" fill="rgb(237,201,47)" fg:x="5884" fg:w="1"/><text x="97.7803%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5303%" y="1141" width="0.0166%" height="15" fill="rgb(224,140,29)" fg:x="5884" fg:w="1"/><text x="97.7803%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5303%" y="1125" width="0.0166%" height="15" fill="rgb(231,209,17)" fg:x="5884" fg:w="1"/><text x="97.7803%" y="1135.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.5303%" y="1109" width="0.0166%" height="15" fill="rgb(249,196,1)" fg:x="5884" fg:w="1"/><text x="97.7803%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5468%" y="1189" width="0.0166%" height="15" fill="rgb(223,207,51)" fg:x="5885" fg:w="1"/><text x="97.7968%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5468%" y="1173" width="0.0166%" height="15" fill="rgb(210,14,40)" fg:x="5885" fg:w="1"/><text x="97.7968%" y="1183.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.5468%" y="1157" width="0.0166%" height="15" fill="rgb(250,20,52)" fg:x="5885" fg:w="1"/><text x="97.7968%" y="1167.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (193 samples, 3.20%)</title><rect x="94.3809%" y="1333" width="3.1991%" height="15" fill="rgb(241,46,11)" fg:x="5694" fg:w="193"/><text x="94.6309%" y="1343.50">Cha..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (16 samples, 0.27%)</title><rect x="97.3148%" y="1317" width="0.2652%" height="15" fill="rgb(219,105,5)" fg:x="5871" fg:w="16"/><text x="97.5648%" y="1327.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (16 samples, 0.27%)</title><rect x="97.3148%" y="1301" width="0.2652%" height="15" fill="rgb(252,77,35)" fg:x="5871" fg:w="16"/><text x="97.5648%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (12 samples, 0.20%)</title><rect x="97.3811%" y="1285" width="0.1989%" height="15" fill="rgb(243,119,2)" fg:x="5875" fg:w="12"/><text x="97.6311%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (7 samples, 0.12%)</title><rect x="97.4639%" y="1269" width="0.1160%" height="15" fill="rgb(206,82,28)" fg:x="5880" fg:w="7"/><text x="97.7139%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.5137%" y="1253" width="0.0663%" height="15" fill="rgb(227,120,12)" fg:x="5883" fg:w="4"/><text x="97.7637%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.5137%" y="1237" width="0.0663%" height="15" fill="rgb(229,134,41)" fg:x="5883" fg:w="4"/><text x="97.7637%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.5137%" y="1221" width="0.0663%" height="15" fill="rgb(239,96,32)" fg:x="5883" fg:w="4"/><text x="97.7637%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.03%)</title><rect x="97.5468%" y="1205" width="0.0332%" height="15" fill="rgb(225,46,27)" fg:x="5885" fg:w="2"/><text x="97.7968%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5634%" y="1189" width="0.0166%" height="15" fill="rgb(215,168,2)" fg:x="5886" fg:w="1"/><text x="97.8134%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5634%" y="1173" width="0.0166%" height="15" fill="rgb(207,170,52)" fg:x="5886" fg:w="1"/><text x="97.8134%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5634%" y="1157" width="0.0166%" height="15" fill="rgb(237,198,36)" fg:x="5886" fg:w="1"/><text x="97.8134%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5634%" y="1141" width="0.0166%" height="15" fill="rgb(213,27,14)" fg:x="5886" fg:w="1"/><text x="97.8134%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.5634%" y="1125" width="0.0166%" height="15" fill="rgb(218,77,5)" fg:x="5886" fg:w="1"/><text x="97.8134%" y="1135.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (2 samples, 0.03%)</title><rect x="97.5800%" y="1333" width="0.0332%" height="15" fill="rgb(230,219,39)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1343.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (2 samples, 0.03%)</title><rect x="97.5800%" y="1317" width="0.0332%" height="15" fill="rgb(245,177,7)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1327.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (2 samples, 0.03%)</title><rect x="97.5800%" y="1301" width="0.0332%" height="15" fill="rgb(246,44,46)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1311.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="97.5800%" y="1285" width="0.0332%" height="15" fill="rgb(207,173,15)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1295.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="97.5800%" y="1269" width="0.0332%" height="15" fill="rgb(245,170,50)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1279.50"></text></g><g><title>operator (2 samples, 0.03%)</title><rect x="97.5800%" y="1253" width="0.0332%" height="15" fill="rgb(233,156,21)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1263.50"></text></g><g><title>node::CompleteChainstateInitialization (2 samples, 0.03%)</title><rect x="97.5800%" y="1237" width="0.0332%" height="15" fill="rgb(253,146,27)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1247.50"></text></g><g><title>Chainstate::NeedsRedownload (2 samples, 0.03%)</title><rect x="97.5800%" y="1221" width="0.0332%" height="15" fill="rgb(247,66,29)" fg:x="5887" fg:w="2"/><text x="97.8300%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (2 samples, 0.03%)</title><rect x="97.6131%" y="1333" width="0.0332%" height="15" fill="rgb(218,207,26)" fg:x="5889" fg:w="2"/><text x="97.8631%" y="1343.50"></text></g><g><title>operator (207 samples, 3.43%)</title><rect x="94.2649%" y="1397" width="3.4311%" height="15" fill="rgb(234,93,26)" fg:x="5687" fg:w="207"/><text x="94.5149%" y="1407.50">ope..</text></g><g><title>InitAndLoadChainstate (207 samples, 3.43%)</title><rect x="94.2649%" y="1381" width="3.4311%" height="15" fill="rgb(214,75,48)" fg:x="5687" fg:w="207"/><text x="94.5149%" y="1391.50">Ini..</text></g><g><title>node::LoadChainstate (207 samples, 3.43%)</title><rect x="94.2649%" y="1365" width="3.4311%" height="15" fill="rgb(229,119,22)" fg:x="5687" fg:w="207"/><text x="94.5149%" y="1375.50">nod..</text></g><g><title>node::CompleteChainstateInitialization (206 samples, 3.41%)</title><rect x="94.2815%" y="1349" width="3.4146%" height="15" fill="rgb(226,153,19)" fg:x="5688" fg:w="206"/><text x="94.5315%" y="1359.50">nod..</text></g><g><title>util::SignalInterrupt::operator bool (3 samples, 0.05%)</title><rect x="97.6463%" y="1333" width="0.0497%" height="15" fill="rgb(220,204,36)" fg:x="5891" fg:w="3"/><text x="97.8963%" y="1343.50"></text></g><g><title>InitAndLoadChainstate (208 samples, 3.45%)</title><rect x="94.2649%" y="1413" width="3.4477%" height="15" fill="rgb(253,181,43)" fg:x="5687" fg:w="208"/><text x="94.5149%" y="1423.50">Ini..</text></g><g><title>std::__detail::_MakeUniq&lt;ChainstateManager&gt;::__single_object std::make_unique&lt;ChainstateManager, util::SignalInterrupt&amp;, kernel::ChainstateManagerOpts&amp;, kernel::BlockManagerOpts&amp;&gt; (1 samples, 0.02%)</title><rect x="97.6960%" y="1397" width="0.0166%" height="15" fill="rgb(211,41,51)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1407.50"></text></g><g><title>ChainstateManager::ChainstateManager (1 samples, 0.02%)</title><rect x="97.6960%" y="1381" width="0.0166%" height="15" fill="rgb(207,215,0)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1391.50"></text></g><g><title>ValidationCache::ValidationCache (1 samples, 0.02%)</title><rect x="97.6960%" y="1365" width="0.0166%" height="15" fill="rgb(212,153,10)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1375.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (1 samples, 0.02%)</title><rect x="97.6960%" y="1349" width="0.0166%" height="15" fill="rgb(251,171,36)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1359.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (1 samples, 0.02%)</title><rect x="97.6960%" y="1333" width="0.0166%" height="15" fill="rgb(225,219,41)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1343.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="97.6960%" y="1317" width="0.0166%" height="15" fill="rgb(208,200,1)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1327.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="97.6960%" y="1301" width="0.0166%" height="15" fill="rgb(206,75,47)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1311.50"></text></g><g><title>uint256* std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (1 samples, 0.02%)</title><rect x="97.6960%" y="1285" width="0.0166%" height="15" fill="rgb(248,3,16)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1295.50"></text></g><g><title>uint256* std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.6960%" y="1269" width="0.0166%" height="15" fill="rgb(242,157,36)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1279.50"></text></g><g><title>uint256* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.6960%" y="1253" width="0.0166%" height="15" fill="rgb(215,175,11)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1263.50"></text></g><g><title>void std::_Construct&lt;uint256&gt; (1 samples, 0.02%)</title><rect x="97.6960%" y="1237" width="0.0166%" height="15" fill="rgb(252,222,22)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1247.50"></text></g><g><title>uint256::uint256 (1 samples, 0.02%)</title><rect x="97.6960%" y="1221" width="0.0166%" height="15" fill="rgb(250,121,35)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1231.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.02%)</title><rect x="97.6960%" y="1205" width="0.0166%" height="15" fill="rgb(233,120,49)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1215.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="97.6960%" y="1189" width="0.0166%" height="15" fill="rgb(205,201,14)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1173" width="0.0166%" height="15" fill="rgb(219,58,45)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1157" width="0.0166%" height="15" fill="rgb(251,65,12)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1141" width="0.0166%" height="15" fill="rgb(224,47,31)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1125" width="0.0166%" height="15" fill="rgb(233,74,26)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1109" width="0.0166%" height="15" fill="rgb(231,211,31)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1093" width="0.0166%" height="15" fill="rgb(239,167,5)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1077" width="0.0166%" height="15" fill="rgb(241,85,0)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.6960%" y="1061" width="0.0166%" height="15" fill="rgb(229,130,21)" fg:x="5894" fg:w="1"/><text x="97.9460%" y="1071.50"></text></g><g><title>main (209 samples, 3.46%)</title><rect x="94.2649%" y="1445" width="3.4643%" height="15" fill="rgb(254,84,49)" fg:x="5687" fg:w="209"/><text x="94.5149%" y="1455.50">main</text></g><g><title>AppInitMain (209 samples, 3.46%)</title><rect x="94.2649%" y="1429" width="3.4643%" height="15" fill="rgb(235,85,21)" fg:x="5687" fg:w="209"/><text x="94.5149%" y="1439.50">App..</text></g><g><title>std::__detail::_MakeUniq&lt;CBlockPolicyEstimator&gt;::__single_object std::make_unique&lt;CBlockPolicyEstimator, fs::path, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1413" width="0.0166%" height="15" fill="rgb(246,128,52)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1423.50"></text></g><g><title>CBlockPolicyEstimator::CBlockPolicyEstimator (1 samples, 0.02%)</title><rect x="97.7126%" y="1397" width="0.0166%" height="15" fill="rgb(243,114,49)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1407.50"></text></g><g><title>CBlockPolicyEstimator::Read (1 samples, 0.02%)</title><rect x="97.7126%" y="1381" width="0.0166%" height="15" fill="rgb(240,224,22)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1391.50"></text></g><g><title>TxConfirmStats::Read (1 samples, 0.02%)</title><rect x="97.7126%" y="1365" width="0.0166%" height="15" fill="rgb(247,201,52)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1375.50"></text></g><g><title>operator&gt;&gt;&lt;Wrapper&lt;VectorFormatter&lt;VectorFormatter&lt;(anonymous namespace)::EncodedDoubleFormatter&gt; &gt;, std::vector&lt;std::vector&lt;double&gt; &gt;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1349" width="0.0166%" height="15" fill="rgb(231,70,45)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1359.50"></text></g><g><title>Unserialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;VectorFormatter&lt;(anonymous namespace)::EncodedDoubleFormatter&gt; &gt;, std::vector&lt;std::vector&lt;double&gt; &gt;&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1333" width="0.0166%" height="15" fill="rgb(217,215,20)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1343.50"></text></g><g><title>TxConfirmStats::Read (1 samples, 0.02%)</title><rect x="97.7126%" y="1317" width="0.0166%" height="15" fill="rgb(226,170,30)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1327.50"></text></g><g><title>void VectorFormatter&lt;VectorFormatter&lt;(anonymous namespace)::EncodedDoubleFormatter&gt; &gt;::Unser&lt;AutoFile, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1301" width="0.0166%" height="15" fill="rgb(220,190,43)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1311.50"></text></g><g><title>Unser&lt;AutoFile, std::vector&lt;double&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1285" width="0.0166%" height="15" fill="rgb(218,20,18)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1295.50"></text></g><g><title>Unser&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1269" width="0.0166%" height="15" fill="rgb(245,37,26)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1279.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&gt;&gt;&lt;unsigned long&amp;&gt;(unsigned long&amp;) (1 samples, 0.02%)</title><rect x="97.7126%" y="1253" width="0.0166%" height="15" fill="rgb(241,127,29)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1263.50"></text></g><g><title>void Unserialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1237" width="0.0166%" height="15" fill="rgb(241,33,26)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1247.50"></text></g><g><title>unsigned long ser_readdata64&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="97.7126%" y="1221" width="0.0166%" height="15" fill="rgb(220,106,21)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1231.50"></text></g><g><title>AutoFile::read (1 samples, 0.02%)</title><rect x="97.7126%" y="1205" width="0.0166%" height="15" fill="rgb(225,125,35)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1215.50"></text></g><g><title>AutoFile::detail_fread (1 samples, 0.02%)</title><rect x="97.7126%" y="1189" width="0.0166%" height="15" fill="rgb(248,80,22)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1199.50"></text></g><g><title>_IO_fread (1 samples, 0.02%)</title><rect x="97.7126%" y="1173" width="0.0166%" height="15" fill="rgb(231,117,39)" fg:x="5895" fg:w="1"/><text x="97.9626%" y="1183.50"></text></g><g><title>_start (220 samples, 3.65%)</title><rect x="94.1488%" y="1509" width="3.6466%" height="15" fill="rgb(239,183,16)" fg:x="5680" fg:w="220"/><text x="94.3988%" y="1519.50">_sta..</text></g><g><title>__libc_start_main@@GLIBC_2.34 (220 samples, 3.65%)</title><rect x="94.1488%" y="1493" width="3.6466%" height="15" fill="rgb(221,61,19)" fg:x="5680" fg:w="220"/><text x="94.3988%" y="1503.50">__li..</text></g><g><title>__libc_start_call_main (220 samples, 3.65%)</title><rect x="94.1488%" y="1477" width="3.6466%" height="15" fill="rgb(239,196,44)" fg:x="5680" fg:w="220"/><text x="94.3988%" y="1487.50">__li..</text></g><g><title>main (220 samples, 3.65%)</title><rect x="94.1488%" y="1461" width="3.6466%" height="15" fill="rgb(206,113,19)" fg:x="5680" fg:w="220"/><text x="94.3988%" y="1471.50">main</text></g><g><title>util::SignalInterrupt::wait (4 samples, 0.07%)</title><rect x="97.7292%" y="1445" width="0.0663%" height="15" fill="rgb(245,114,12)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1455.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.07%)</title><rect x="97.7292%" y="1429" width="0.0663%" height="15" fill="rgb(247,89,39)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1439.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.07%)</title><rect x="97.7292%" y="1413" width="0.0663%" height="15" fill="rgb(213,85,14)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1423.50"></text></g><g><title>read (4 samples, 0.07%)</title><rect x="97.7292%" y="1397" width="0.0663%" height="15" fill="rgb(249,206,33)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1381" width="0.0663%" height="15" fill="rgb(235,167,47)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1365" width="0.0663%" height="15" fill="rgb(217,177,16)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1349" width="0.0663%" height="15" fill="rgb(250,228,29)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1333" width="0.0663%" height="15" fill="rgb(216,195,42)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1317" width="0.0663%" height="15" fill="rgb(232,192,32)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1301" width="0.0663%" height="15" fill="rgb(211,8,47)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1285" width="0.0663%" height="15" fill="rgb(251,201,9)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1269" width="0.0663%" height="15" fill="rgb(206,185,47)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1253" width="0.0663%" height="15" fill="rgb(245,54,32)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.7292%" y="1237" width="0.0663%" height="15" fill="rgb(208,1,8)" fg:x="5896" fg:w="4"/><text x="97.9792%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.7457%" y="1221" width="0.0497%" height="15" fill="rgb(228,57,24)" fg:x="5897" fg:w="3"/><text x="97.9957%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.7457%" y="1205" width="0.0497%" height="15" fill="rgb(251,24,8)" fg:x="5897" fg:w="3"/><text x="97.9957%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.7457%" y="1189" width="0.0497%" height="15" fill="rgb(236,196,50)" fg:x="5897" fg:w="3"/><text x="97.9957%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.7457%" y="1173" width="0.0497%" height="15" fill="rgb(246,222,29)" fg:x="5897" fg:w="3"/><text x="97.9957%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.7457%" y="1157" width="0.0497%" height="15" fill="rgb(211,34,40)" fg:x="5897" fg:w="3"/><text x="97.9957%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.7457%" y="1141" width="0.0497%" height="15" fill="rgb(210,66,51)" fg:x="5897" fg:w="3"/><text x="97.9957%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.7457%" y="1125" width="0.0497%" height="15" fill="rgb(250,56,43)" fg:x="5897" fg:w="3"/><text x="97.9957%" y="1135.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="97.7955%" y="1509" width="0.0166%" height="15" fill="rgb(240,111,50)" fg:x="5900" fg:w="1"/><text x="98.0455%" y="1519.50"></text></g><g><title>crc32c::ExtendSse42 (6 samples, 0.10%)</title><rect x="97.8120%" y="1509" width="0.0995%" height="15" fill="rgb(209,117,13)" fg:x="5901" fg:w="6"/><text x="98.0620%" y="1519.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="97.8949%" y="1493" width="0.0166%" height="15" fill="rgb(232,164,45)" fg:x="5906" fg:w="1"/><text x="98.1449%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="97.9115%" y="1477" width="0.0166%" height="15" fill="rgb(205,69,32)" fg:x="5907" fg:w="1"/><text x="98.1615%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="97.9115%" y="1509" width="0.0332%" height="15" fill="rgb(240,147,45)" fg:x="5907" fg:w="2"/><text x="98.1615%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.03%)</title><rect x="97.9115%" y="1493" width="0.0332%" height="15" fill="rgb(221,94,48)" fg:x="5907" fg:w="2"/><text x="98.1615%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="97.9281%" y="1477" width="0.0166%" height="15" fill="rgb(249,209,17)" fg:x="5908" fg:w="1"/><text x="98.1781%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (5 samples, 0.08%)</title><rect x="97.9446%" y="1509" width="0.0829%" height="15" fill="rgb(228,57,28)" fg:x="5909" fg:w="5"/><text x="98.1946%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.08%)</title><rect x="97.9446%" y="1493" width="0.0829%" height="15" fill="rgb(250,133,26)" fg:x="5909" fg:w="5"/><text x="98.1946%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.9612%" y="1477" width="0.0663%" height="15" fill="rgb(254,15,16)" fg:x="5910" fg:w="4"/><text x="98.2112%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.9612%" y="1461" width="0.0663%" height="15" fill="rgb(209,147,42)" fg:x="5910" fg:w="4"/><text x="98.2112%" y="1471.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.9612%" y="1445" width="0.0663%" height="15" fill="rgb(208,5,29)" fg:x="5910" fg:w="4"/><text x="98.2112%" y="1455.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1429" width="0.0497%" height="15" fill="rgb(250,73,31)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1439.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1413" width="0.0497%" height="15" fill="rgb(238,45,10)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1423.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1397" width="0.0497%" height="15" fill="rgb(214,104,5)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1407.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1381" width="0.0497%" height="15" fill="rgb(242,217,19)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1391.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1365" width="0.0497%" height="15" fill="rgb(246,113,27)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1375.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1349" width="0.0497%" height="15" fill="rgb(221,34,27)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1333" width="0.0497%" height="15" fill="rgb(246,109,6)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1317" width="0.0497%" height="15" fill="rgb(217,12,25)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1301" width="0.0497%" height="15" fill="rgb(250,195,5)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.9778%" y="1285" width="0.0497%" height="15" fill="rgb(244,140,45)" fg:x="5911" fg:w="3"/><text x="98.2278%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="98.0275%" y="1509" width="0.0166%" height="15" fill="rgb(230,64,14)" fg:x="5914" fg:w="1"/><text x="98.2775%" y="1519.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="98.0275%" y="1493" width="0.0166%" height="15" fill="rgb(206,27,27)" fg:x="5914" fg:w="1"/><text x="98.2775%" y="1503.50"></text></g><g><title>leveldb::MutexLock::~MutexLock (1 samples, 0.02%)</title><rect x="98.0275%" y="1477" width="0.0166%" height="15" fill="rgb(230,14,50)" fg:x="5914" fg:w="1"/><text x="98.2775%" y="1487.50"></text></g><g><title>leveldb::port::Mutex::Unlock (1 samples, 0.02%)</title><rect x="98.0275%" y="1461" width="0.0166%" height="15" fill="rgb(237,172,14)" fg:x="5914" fg:w="1"/><text x="98.2775%" y="1471.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="98.0275%" y="1445" width="0.0166%" height="15" fill="rgb(209,25,21)" fg:x="5914" fg:w="1"/><text x="98.2775%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="98.0275%" y="1429" width="0.0166%" height="15" fill="rgb(248,148,22)" fg:x="5914" fg:w="1"/><text x="98.2775%" y="1439.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="98.0275%" y="1413" width="0.0166%" height="15" fill="rgb(234,100,22)" fg:x="5914" fg:w="1"/><text x="98.2775%" y="1423.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="98.0441%" y="1509" width="0.0166%" height="15" fill="rgb(210,20,30)" fg:x="5915" fg:w="1"/><text x="98.2941%" y="1519.50"></text></g><g><title>DecodeEntry (1 samples, 0.02%)</title><rect x="98.0441%" y="1493" width="0.0166%" height="15" fill="rgb(232,58,0)" fg:x="5915" fg:w="1"/><text x="98.2941%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (7 samples, 0.12%)</title><rect x="98.0607%" y="1477" width="0.1160%" height="15" fill="rgb(221,68,13)" fg:x="5916" fg:w="7"/><text x="98.3107%" y="1487.50"></text></g><g><title>leveldb::BlockBuilder::Add (15 samples, 0.25%)</title><rect x="98.0607%" y="1509" width="0.2486%" height="15" fill="rgb(231,194,11)" fg:x="5916" fg:w="15"/><text x="98.3107%" y="1519.50"></text></g><g><title>leveldb::operator== (15 samples, 0.25%)</title><rect x="98.0607%" y="1493" width="0.2486%" height="15" fill="rgb(235,51,41)" fg:x="5916" fg:w="15"/><text x="98.3107%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (8 samples, 0.13%)</title><rect x="98.1767%" y="1477" width="0.1326%" height="15" fill="rgb(240,50,32)" fg:x="5923" fg:w="8"/><text x="98.4267%" y="1487.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="98.3093%" y="1509" width="0.0166%" height="15" fill="rgb(240,185,36)" fg:x="5931" fg:w="1"/><text x="98.5593%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="98.3093%" y="1493" width="0.0166%" height="15" fill="rgb(211,168,15)" fg:x="5931" fg:w="1"/><text x="98.5593%" y="1503.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="98.3259%" y="1509" width="0.0166%" height="15" fill="rgb(221,70,0)" fg:x="5932" fg:w="1"/><text x="98.5759%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="98.3259%" y="1493" width="0.0166%" height="15" fill="rgb(205,21,33)" fg:x="5932" fg:w="1"/><text x="98.5759%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="98.3259%" y="1477" width="0.0166%" height="15" fill="rgb(225,106,10)" fg:x="5932" fg:w="1"/><text x="98.5759%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.3259%" y="1461" width="0.0166%" height="15" fill="rgb(236,200,50)" fg:x="5932" fg:w="1"/><text x="98.5759%" y="1471.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.3259%" y="1445" width="0.0166%" height="15" fill="rgb(249,93,23)" fg:x="5932" fg:w="1"/><text x="98.5759%" y="1455.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="98.3259%" y="1429" width="0.0166%" height="15" fill="rgb(244,115,35)" fg:x="5932" fg:w="1"/><text x="98.5759%" y="1439.50"></text></g><g><title>leveldb::MemTableIterator::value (1 samples, 0.02%)</title><rect x="98.3259%" y="1413" width="0.0166%" height="15" fill="rgb(231,129,47)" fg:x="5932" fg:w="1"/><text x="98.5759%" y="1423.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="98.3424%" y="1509" width="0.0166%" height="15" fill="rgb(225,160,50)" fg:x="5933" fg:w="1"/><text x="98.5924%" y="1519.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="98.3424%" y="1493" width="0.0166%" height="15" fill="rgb(218,135,23)" fg:x="5933" fg:w="1"/><text x="98.5924%" y="1503.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="98.3590%" y="1509" width="0.0166%" height="15" fill="rgb(227,119,14)" fg:x="5934" fg:w="1"/><text x="98.6090%" y="1519.50"></text></g><g><title>NewWritableFile (1 samples, 0.02%)</title><rect x="98.3756%" y="1253" width="0.0166%" height="15" fill="rgb(242,138,13)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (1 samples, 0.02%)</title><rect x="98.3756%" y="1237" width="0.0166%" height="15" fill="rgb(215,11,16)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1247.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="98.3756%" y="1221" width="0.0166%" height="15" fill="rgb(234,170,50)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1205" width="0.0166%" height="15" fill="rgb(233,34,20)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1189" width="0.0166%" height="15" fill="rgb(237,100,45)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1173" width="0.0166%" height="15" fill="rgb(231,184,36)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1157" width="0.0166%" height="15" fill="rgb(252,93,2)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1141" width="0.0166%" height="15" fill="rgb(248,176,47)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1125" width="0.0166%" height="15" fill="rgb(249,125,23)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1109" width="0.0166%" height="15" fill="rgb(239,67,42)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1093" width="0.0166%" height="15" fill="rgb(244,162,4)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.3756%" y="1077" width="0.0166%" height="15" fill="rgb(214,150,38)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1061" width="0.0166%" height="15" fill="rgb(228,211,28)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1045" width="0.0166%" height="15" fill="rgb(212,98,48)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1029" width="0.0166%" height="15" fill="rgb(213,45,13)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="1013" width="0.0166%" height="15" fill="rgb(218,35,29)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="997" width="0.0166%" height="15" fill="rgb(244,13,3)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.3756%" y="981" width="0.0166%" height="15" fill="rgb(235,170,19)" fg:x="5935" fg:w="1"/><text x="98.6256%" y="991.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4088%" y="1077" width="0.0166%" height="15" fill="rgb(233,193,43)" fg:x="5937" fg:w="1"/><text x="98.6588%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4088%" y="1061" width="0.0166%" height="15" fill="rgb(228,223,20)" fg:x="5937" fg:w="1"/><text x="98.6588%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4088%" y="1045" width="0.0166%" height="15" fill="rgb(208,85,54)" fg:x="5937" fg:w="1"/><text x="98.6588%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4088%" y="1029" width="0.0166%" height="15" fill="rgb(254,14,45)" fg:x="5937" fg:w="1"/><text x="98.6588%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.4088%" y="1013" width="0.0166%" height="15" fill="rgb(247,99,29)" fg:x="5937" fg:w="1"/><text x="98.6588%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4088%" y="997" width="0.0166%" height="15" fill="rgb(225,180,54)" fg:x="5937" fg:w="1"/><text x="98.6588%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4088%" y="981" width="0.0166%" height="15" fill="rgb(239,88,43)" fg:x="5937" fg:w="1"/><text x="98.6588%" y="991.50"></text></g><g><title>Sync (6 samples, 0.10%)</title><rect x="98.3922%" y="1253" width="0.0995%" height="15" fill="rgb(209,47,11)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (6 samples, 0.10%)</title><rect x="98.3922%" y="1237" width="0.0995%" height="15" fill="rgb(219,179,23)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1247.50"></text></g><g><title>fdatasync (6 samples, 0.10%)</title><rect x="98.3922%" y="1221" width="0.0995%" height="15" fill="rgb(213,183,19)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.3922%" y="1205" width="0.0995%" height="15" fill="rgb(210,11,9)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.3922%" y="1189" width="0.0995%" height="15" fill="rgb(239,194,16)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.3922%" y="1173" width="0.0995%" height="15" fill="rgb(246,23,50)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1183.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="98.3922%" y="1157" width="0.0995%" height="15" fill="rgb(245,10,41)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.3922%" y="1141" width="0.0995%" height="15" fill="rgb(228,43,24)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.3922%" y="1125" width="0.0995%" height="15" fill="rgb(220,151,0)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.3922%" y="1109" width="0.0995%" height="15" fill="rgb(232,219,10)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.10%)</title><rect x="98.3922%" y="1093" width="0.0995%" height="15" fill="rgb(227,217,48)" fg:x="5936" fg:w="6"/><text x="98.6422%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4253%" y="1077" width="0.0663%" height="15" fill="rgb(210,66,35)" fg:x="5938" fg:w="4"/><text x="98.6753%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4253%" y="1061" width="0.0663%" height="15" fill="rgb(254,6,7)" fg:x="5938" fg:w="4"/><text x="98.6753%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4253%" y="1045" width="0.0663%" height="15" fill="rgb(235,222,42)" fg:x="5938" fg:w="4"/><text x="98.6753%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4253%" y="1029" width="0.0663%" height="15" fill="rgb(245,126,5)" fg:x="5938" fg:w="4"/><text x="98.6753%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4253%" y="1013" width="0.0663%" height="15" fill="rgb(215,73,17)" fg:x="5938" fg:w="4"/><text x="98.6753%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4253%" y="997" width="0.0663%" height="15" fill="rgb(219,198,52)" fg:x="5938" fg:w="4"/><text x="98.6753%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="981" width="0.0497%" height="15" fill="rgb(217,159,18)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="965" width="0.0497%" height="15" fill="rgb(212,177,18)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="949" width="0.0497%" height="15" fill="rgb(241,10,11)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="933" width="0.0497%" height="15" fill="rgb(232,114,35)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="917" width="0.0497%" height="15" fill="rgb(238,222,8)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="901" width="0.0497%" height="15" fill="rgb(251,153,44)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="885" width="0.0497%" height="15" fill="rgb(210,140,51)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="869" width="0.0497%" height="15" fill="rgb(222,63,0)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4419%" y="853" width="0.0497%" height="15" fill="rgb(240,18,40)" fg:x="5939" fg:w="3"/><text x="98.6919%" y="863.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="98.4916%" y="1253" width="0.0166%" height="15" fill="rgb(237,88,16)" fg:x="5942" fg:w="1"/><text x="98.7416%" y="1263.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="98.4916%" y="1237" width="0.0166%" height="15" fill="rgb(251,117,13)" fg:x="5942" fg:w="1"/><text x="98.7416%" y="1247.50"></text></g><g><title>leveldb::MemTableIterator::value (1 samples, 0.02%)</title><rect x="98.5082%" y="1253" width="0.0166%" height="15" fill="rgb(251,228,8)" fg:x="5943" fg:w="1"/><text x="98.7582%" y="1263.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="98.5082%" y="1237" width="0.0166%" height="15" fill="rgb(205,107,49)" fg:x="5943" fg:w="1"/><text x="98.7582%" y="1247.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="98.5082%" y="1221" width="0.0166%" height="15" fill="rgb(238,72,41)" fg:x="5943" fg:w="1"/><text x="98.7582%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="98.5248%" y="1221" width="0.0663%" height="15" fill="rgb(248,183,52)" fg:x="5944" fg:w="4"/><text x="98.7748%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.03%)</title><rect x="98.5579%" y="1205" width="0.0332%" height="15" fill="rgb(215,58,20)" fg:x="5946" fg:w="2"/><text x="98.8079%" y="1215.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="98.5911%" y="1221" width="0.0166%" height="15" fill="rgb(209,49,13)" fg:x="5948" fg:w="1"/><text x="98.8411%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="98.5911%" y="1205" width="0.0166%" height="15" fill="rgb(208,113,17)" fg:x="5948" fg:w="1"/><text x="98.8411%" y="1215.50"></text></g><g><title>leveldb::BlockBuilder::Add (6 samples, 0.10%)</title><rect x="98.5248%" y="1237" width="0.0995%" height="15" fill="rgb(208,14,22)" fg:x="5944" fg:w="6"/><text x="98.7748%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="98.6077%" y="1221" width="0.0166%" height="15" fill="rgb(222,95,2)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="98.6077%" y="1205" width="0.0166%" height="15" fill="rgb(253,180,37)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="98.6077%" y="1189" width="0.0166%" height="15" fill="rgb(250,81,33)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.6077%" y="1173" width="0.0166%" height="15" fill="rgb(251,151,41)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="98.6077%" y="1157" width="0.0166%" height="15" fill="rgb(210,135,17)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1167.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="98.6077%" y="1141" width="0.0166%" height="15" fill="rgb(239,21,29)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="98.6077%" y="1125" width="0.0166%" height="15" fill="rgb(231,215,16)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6077%" y="1109" width="0.0166%" height="15" fill="rgb(239,151,54)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6077%" y="1093" width="0.0166%" height="15" fill="rgb(222,122,38)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6077%" y="1077" width="0.0166%" height="15" fill="rgb(243,128,1)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6077%" y="1061" width="0.0166%" height="15" fill="rgb(225,74,21)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6077%" y="1045" width="0.0166%" height="15" fill="rgb(216,210,10)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6077%" y="1029" width="0.0166%" height="15" fill="rgb(228,76,19)" fg:x="5949" fg:w="1"/><text x="98.8577%" y="1039.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="98.6242%" y="1237" width="0.0166%" height="15" fill="rgb(236,80,34)" fg:x="5950" fg:w="1"/><text x="98.8742%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="98.6242%" y="1221" width="0.0166%" height="15" fill="rgb(225,173,23)" fg:x="5950" fg:w="1"/><text x="98.8742%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="98.6242%" y="1205" width="0.0166%" height="15" fill="rgb(253,38,1)" fg:x="5950" fg:w="1"/><text x="98.8742%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="98.6242%" y="1189" width="0.0166%" height="15" fill="rgb(206,155,35)" fg:x="5950" fg:w="1"/><text x="98.8742%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="98.6242%" y="1173" width="0.0166%" height="15" fill="rgb(254,27,53)" fg:x="5950" fg:w="1"/><text x="98.8742%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.6574%" y="1077" width="0.0166%" height="15" fill="rgb(225,52,41)" fg:x="5952" fg:w="1"/><text x="98.9074%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6574%" y="1061" width="0.0166%" height="15" fill="rgb(244,53,18)" fg:x="5952" fg:w="1"/><text x="98.9074%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6574%" y="1045" width="0.0166%" height="15" fill="rgb(254,206,48)" fg:x="5952" fg:w="1"/><text x="98.9074%" y="1055.50"></text></g><g><title>[[ext4]] (2 samples, 0.03%)</title><rect x="98.6740%" y="1029" width="0.0332%" height="15" fill="rgb(236,182,23)" fg:x="5953" fg:w="2"/><text x="98.9240%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.6905%" y="1013" width="0.0166%" height="15" fill="rgb(236,191,37)" fg:x="5954" fg:w="1"/><text x="98.9405%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6905%" y="997" width="0.0166%" height="15" fill="rgb(245,53,8)" fg:x="5954" fg:w="1"/><text x="98.9405%" y="1007.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="98.6740%" y="1045" width="0.0497%" height="15" fill="rgb(245,147,9)" fg:x="5953" fg:w="3"/><text x="98.9240%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7071%" y="1029" width="0.0166%" height="15" fill="rgb(218,24,48)" fg:x="5955" fg:w="1"/><text x="98.9571%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7071%" y="1013" width="0.0166%" height="15" fill="rgb(254,23,9)" fg:x="5955" fg:w="1"/><text x="98.9571%" y="1023.50"></text></g><g><title>[[ext4]] (6 samples, 0.10%)</title><rect x="98.6574%" y="1093" width="0.0995%" height="15" fill="rgb(244,105,9)" fg:x="5952" fg:w="6"/><text x="98.9074%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.6740%" y="1077" width="0.0829%" height="15" fill="rgb(212,142,22)" fg:x="5953" fg:w="5"/><text x="98.9240%" y="1087.50"></text></g><g><title>[[ext4]] (5 samples, 0.08%)</title><rect x="98.6740%" y="1061" width="0.0829%" height="15" fill="rgb(221,114,49)" fg:x="5953" fg:w="5"/><text x="98.9240%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.7237%" y="1045" width="0.0332%" height="15" fill="rgb(223,210,25)" fg:x="5956" fg:w="2"/><text x="98.9737%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.7237%" y="1029" width="0.0332%" height="15" fill="rgb(235,162,44)" fg:x="5956" fg:w="2"/><text x="98.9737%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7403%" y="1013" width="0.0166%" height="15" fill="rgb(237,65,45)" fg:x="5957" fg:w="1"/><text x="98.9903%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7403%" y="997" width="0.0166%" height="15" fill="rgb(208,79,9)" fg:x="5957" fg:w="1"/><text x="98.9903%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7403%" y="981" width="0.0166%" height="15" fill="rgb(215,228,8)" fg:x="5957" fg:w="1"/><text x="98.9903%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7403%" y="965" width="0.0166%" height="15" fill="rgb(205,185,17)" fg:x="5957" fg:w="1"/><text x="98.9903%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7403%" y="949" width="0.0166%" height="15" fill="rgb(213,62,36)" fg:x="5957" fg:w="1"/><text x="98.9903%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7403%" y="933" width="0.0166%" height="15" fill="rgb(209,34,9)" fg:x="5957" fg:w="1"/><text x="98.9903%" y="943.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (24 samples, 0.40%)</title><rect x="98.3756%" y="1285" width="0.3978%" height="15" fill="rgb(246,151,27)" fg:x="5935" fg:w="24"/><text x="98.6256%" y="1295.50"></text></g><g><title>leveldb::BuildTable (24 samples, 0.40%)</title><rect x="98.3756%" y="1269" width="0.3978%" height="15" fill="rgb(218,206,3)" fg:x="5935" fg:w="24"/><text x="98.6256%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (15 samples, 0.25%)</title><rect x="98.5248%" y="1253" width="0.2486%" height="15" fill="rgb(242,202,1)" fg:x="5944" fg:w="15"/><text x="98.7748%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Flush (8 samples, 0.13%)</title><rect x="98.6408%" y="1237" width="0.1326%" height="15" fill="rgb(227,185,16)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1247.50"></text></g><g><title>Flush (8 samples, 0.13%)</title><rect x="98.6408%" y="1221" width="0.1326%" height="15" fill="rgb(241,1,14)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1231.50"></text></g><g><title>FlushBuffer (8 samples, 0.13%)</title><rect x="98.6408%" y="1205" width="0.1326%" height="15" fill="rgb(212,113,25)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (8 samples, 0.13%)</title><rect x="98.6408%" y="1189" width="0.1326%" height="15" fill="rgb(247,37,43)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1199.50"></text></g><g><title>__GI___libc_write (8 samples, 0.13%)</title><rect x="98.6408%" y="1173" width="0.1326%" height="15" fill="rgb(226,54,8)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="98.6408%" y="1157" width="0.1326%" height="15" fill="rgb(251,205,25)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="98.6408%" y="1141" width="0.1326%" height="15" fill="rgb(246,87,35)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="98.6408%" y="1125" width="0.1326%" height="15" fill="rgb(251,145,46)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="98.6408%" y="1109" width="0.1326%" height="15" fill="rgb(210,210,33)" fg:x="5951" fg:w="8"/><text x="98.8908%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7568%" y="1093" width="0.0166%" height="15" fill="rgb(221,151,11)" fg:x="5958" fg:w="1"/><text x="99.0068%" y="1103.50"></text></g><g><title>leveldb::MemTable::Unref (1 samples, 0.02%)</title><rect x="98.7734%" y="1285" width="0.0166%" height="15" fill="rgb(208,160,28)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1295.50"></text></g><g><title>leveldb::MemTable::~MemTable (1 samples, 0.02%)</title><rect x="98.7734%" y="1269" width="0.0166%" height="15" fill="rgb(243,69,29)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1279.50"></text></g><g><title>leveldb::Arena::~Arena (1 samples, 0.02%)</title><rect x="98.7734%" y="1253" width="0.0166%" height="15" fill="rgb(224,144,4)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="98.7734%" y="1237" width="0.0166%" height="15" fill="rgb(211,140,38)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1247.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="98.7734%" y="1221" width="0.0166%" height="15" fill="rgb(252,189,15)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1231.50"></text></g><g><title>systrim.constprop.0 (1 samples, 0.02%)</title><rect x="98.7734%" y="1205" width="0.0166%" height="15" fill="rgb(251,175,23)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1215.50"></text></g><g><title>__default_morecore@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="98.7734%" y="1189" width="0.0166%" height="15" fill="rgb(212,184,11)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1199.50"></text></g><g><title>__sbrk (1 samples, 0.02%)</title><rect x="98.7734%" y="1173" width="0.0166%" height="15" fill="rgb(217,205,6)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1183.50"></text></g><g><title>__brk (1 samples, 0.02%)</title><rect x="98.7734%" y="1157" width="0.0166%" height="15" fill="rgb(235,45,45)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1141" width="0.0166%" height="15" fill="rgb(211,157,53)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1125" width="0.0166%" height="15" fill="rgb(212,13,8)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1109" width="0.0166%" height="15" fill="rgb(218,80,36)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1093" width="0.0166%" height="15" fill="rgb(211,123,43)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1077" width="0.0166%" height="15" fill="rgb(206,165,2)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1061" width="0.0166%" height="15" fill="rgb(248,63,35)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1045" width="0.0166%" height="15" fill="rgb(219,133,41)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1029" width="0.0166%" height="15" fill="rgb(206,175,46)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="1013" width="0.0166%" height="15" fill="rgb(224,41,35)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="997" width="0.0166%" height="15" fill="rgb(226,113,24)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7734%" y="981" width="0.0166%" height="15" fill="rgb(219,51,41)" fg:x="5959" fg:w="1"/><text x="99.0234%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.7900%" y="1253" width="0.0166%" height="15" fill="rgb(220,145,47)" fg:x="5960" fg:w="1"/><text x="99.0400%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.8066%" y="1237" width="0.0166%" height="15" fill="rgb(239,121,47)" fg:x="5961" fg:w="1"/><text x="99.0566%" y="1247.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="98.8066%" y="1221" width="0.0166%" height="15" fill="rgb(207,60,40)" fg:x="5961" fg:w="1"/><text x="99.0566%" y="1231.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (2 samples, 0.03%)</title><rect x="98.8066%" y="1253" width="0.0332%" height="15" fill="rgb(224,229,11)" fg:x="5961" fg:w="2"/><text x="99.0566%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.8231%" y="1237" width="0.0166%" height="15" fill="rgb(252,28,32)" fg:x="5962" fg:w="1"/><text x="99.0731%" y="1247.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="98.8231%" y="1221" width="0.0166%" height="15" fill="rgb(207,52,49)" fg:x="5962" fg:w="1"/><text x="99.0731%" y="1231.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="98.8231%" y="1205" width="0.0166%" height="15" fill="rgb(243,51,50)" fg:x="5962" fg:w="1"/><text x="99.0731%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.8397%" y="1253" width="0.0166%" height="15" fill="rgb(212,92,21)" fg:x="5963" fg:w="1"/><text x="99.0897%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.8563%" y="1253" width="0.0166%" height="15" fill="rgb(230,183,50)" fg:x="5964" fg:w="1"/><text x="99.1063%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.8563%" y="1237" width="0.0166%" height="15" fill="rgb(225,48,9)" fg:x="5964" fg:w="1"/><text x="99.1063%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="98.8729%" y="1253" width="0.0166%" height="15" fill="rgb(254,44,4)" fg:x="5965" fg:w="1"/><text x="99.1229%" y="1263.50"></text></g><g><title>leveldb::Arena::Allocate (2 samples, 0.03%)</title><rect x="98.8894%" y="1221" width="0.0332%" height="15" fill="rgb(252,128,37)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1231.50"></text></g><g><title>leveldb::Arena::AllocateFallback (2 samples, 0.03%)</title><rect x="98.8894%" y="1205" width="0.0332%" height="15" fill="rgb(227,178,8)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1215.50"></text></g><g><title>leveldb::Arena::AllocateFallback (2 samples, 0.03%)</title><rect x="98.8894%" y="1189" width="0.0332%" height="15" fill="rgb(205,206,32)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1199.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (2 samples, 0.03%)</title><rect x="98.8894%" y="1173" width="0.0332%" height="15" fill="rgb(220,218,22)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1183.50"></text></g><g><title>operator new (2 samples, 0.03%)</title><rect x="98.8894%" y="1157" width="0.0332%" height="15" fill="rgb(236,41,28)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1167.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="98.8894%" y="1141" width="0.0332%" height="15" fill="rgb(219,37,7)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1151.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="98.8894%" y="1125" width="0.0332%" height="15" fill="rgb(206,160,15)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.8894%" y="1109" width="0.0332%" height="15" fill="rgb(208,82,21)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="98.8894%" y="1093" width="0.0332%" height="15" fill="rgb(226,130,25)" fg:x="5966" fg:w="2"/><text x="99.1394%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.9060%" y="1077" width="0.0166%" height="15" fill="rgb(212,72,24)" fg:x="5967" fg:w="1"/><text x="99.1560%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.9060%" y="1061" width="0.0166%" height="15" fill="rgb(206,28,16)" fg:x="5967" fg:w="1"/><text x="99.1560%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.9060%" y="1045" width="0.0166%" height="15" fill="rgb(249,41,5)" fg:x="5967" fg:w="1"/><text x="99.1560%" y="1055.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="98.9226%" y="1221" width="0.0166%" height="15" fill="rgb(233,96,48)" fg:x="5968" fg:w="1"/><text x="99.1726%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.03%)</title><rect x="98.9392%" y="1205" width="0.0332%" height="15" fill="rgb(240,198,11)" fg:x="5969" fg:w="2"/><text x="99.1892%" y="1215.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="98.9557%" y="1189" width="0.0166%" height="15" fill="rgb(209,175,35)" fg:x="5970" fg:w="1"/><text x="99.2057%" y="1199.50"></text></g><g><title>leveldb::GetVarint32 (1 samples, 0.02%)</title><rect x="98.9723%" y="1205" width="0.0166%" height="15" fill="rgb(214,40,51)" fg:x="5971" fg:w="1"/><text x="99.2223%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.9889%" y="1205" width="0.0166%" height="15" fill="rgb(252,56,4)" fg:x="5972" fg:w="1"/><text x="99.2389%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (5 samples, 0.08%)</title><rect x="99.0055%" y="1205" width="0.0829%" height="15" fill="rgb(219,131,5)" fg:x="5973" fg:w="5"/><text x="99.2555%" y="1215.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="99.0718%" y="1189" width="0.0166%" height="15" fill="rgb(223,67,53)" fg:x="5977" fg:w="1"/><text x="99.3218%" y="1199.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.0718%" y="1173" width="0.0166%" height="15" fill="rgb(227,154,8)" fg:x="5977" fg:w="1"/><text x="99.3218%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (1 samples, 0.02%)</title><rect x="99.0883%" y="1205" width="0.0166%" height="15" fill="rgb(216,174,51)" fg:x="5978" fg:w="1"/><text x="99.3383%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="99.0883%" y="1189" width="0.0166%" height="15" fill="rgb(239,60,34)" fg:x="5978" fg:w="1"/><text x="99.3383%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="99.0883%" y="1173" width="0.0166%" height="15" fill="rgb(236,165,48)" fg:x="5978" fg:w="1"/><text x="99.3383%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="99.1546%" y="1157" width="0.0166%" height="15" fill="rgb(210,37,26)" fg:x="5982" fg:w="1"/><text x="99.4046%" y="1167.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="99.1546%" y="1141" width="0.0166%" height="15" fill="rgb(211,3,17)" fg:x="5982" fg:w="1"/><text x="99.4046%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="99.1712%" y="1141" width="0.0497%" height="15" fill="rgb(234,88,49)" fg:x="5983" fg:w="3"/><text x="99.4212%" y="1151.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="99.2044%" y="1125" width="0.0166%" height="15" fill="rgb(233,40,17)" fg:x="5985" fg:w="1"/><text x="99.4544%" y="1135.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="99.2044%" y="1109" width="0.0166%" height="15" fill="rgb(235,127,31)" fg:x="5985" fg:w="1"/><text x="99.4544%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="99.2210%" y="1141" width="0.0663%" height="15" fill="rgb(248,167,17)" fg:x="5986" fg:w="4"/><text x="99.4710%" y="1151.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.03%)</title><rect x="99.2541%" y="1125" width="0.0332%" height="15" fill="rgb(218,179,8)" fg:x="5988" fg:w="2"/><text x="99.5041%" y="1135.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.03%)</title><rect x="99.2873%" y="1141" width="0.0332%" height="15" fill="rgb(216,92,14)" fg:x="5990" fg:w="2"/><text x="99.5373%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="99.3038%" y="1125" width="0.0166%" height="15" fill="rgb(221,198,46)" fg:x="5991" fg:w="1"/><text x="99.5538%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (13 samples, 0.22%)</title><rect x="99.1712%" y="1157" width="0.2155%" height="15" fill="rgb(244,7,25)" fg:x="5983" fg:w="13"/><text x="99.4212%" y="1167.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (4 samples, 0.07%)</title><rect x="99.3204%" y="1141" width="0.0663%" height="15" fill="rgb(233,75,6)" fg:x="5992" fg:w="4"/><text x="99.5704%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (3 samples, 0.05%)</title><rect x="99.3370%" y="1125" width="0.0497%" height="15" fill="rgb(240,189,41)" fg:x="5993" fg:w="3"/><text x="99.5870%" y="1135.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="99.3867%" y="1157" width="0.0166%" height="15" fill="rgb(237,157,21)" fg:x="5996" fg:w="1"/><text x="99.6367%" y="1167.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="99.3867%" y="1141" width="0.0166%" height="15" fill="rgb(210,136,49)" fg:x="5996" fg:w="1"/><text x="99.6367%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (23 samples, 0.38%)</title><rect x="99.1049%" y="1173" width="0.3812%" height="15" fill="rgb(210,68,29)" fg:x="5979" fg:w="23"/><text x="99.3549%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (5 samples, 0.08%)</title><rect x="99.4033%" y="1157" width="0.0829%" height="15" fill="rgb(247,207,20)" fg:x="5997" fg:w="5"/><text x="99.6533%" y="1167.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="99.4696%" y="1141" width="0.0166%" height="15" fill="rgb(224,73,48)" fg:x="6001" fg:w="1"/><text x="99.7196%" y="1151.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.4696%" y="1125" width="0.0166%" height="15" fill="rgb(215,136,47)" fg:x="6001" fg:w="1"/><text x="99.7196%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (26 samples, 0.43%)</title><rect x="99.1049%" y="1205" width="0.4310%" height="15" fill="rgb(232,222,16)" fg:x="5979" fg:w="26"/><text x="99.3549%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (26 samples, 0.43%)</title><rect x="99.1049%" y="1189" width="0.4310%" height="15" fill="rgb(249,202,47)" fg:x="5979" fg:w="26"/><text x="99.3549%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (3 samples, 0.05%)</title><rect x="99.4862%" y="1173" width="0.0497%" height="15" fill="rgb(236,56,8)" fg:x="6002" fg:w="3"/><text x="99.7362%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (2 samples, 0.03%)</title><rect x="99.5027%" y="1157" width="0.0332%" height="15" fill="rgb(222,6,3)" fg:x="6003" fg:w="2"/><text x="99.7527%" y="1167.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (46 samples, 0.76%)</title><rect x="98.7900%" y="1285" width="0.7625%" height="15" fill="rgb(254,222,28)" fg:x="5960" fg:w="46"/><text x="99.0400%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Iterate (46 samples, 0.76%)</title><rect x="98.7900%" y="1269" width="0.7625%" height="15" fill="rgb(219,57,23)" fg:x="5960" fg:w="46"/><text x="99.0400%" y="1279.50"></text></g><g><title>leveldb::WriteBatch::Iterate (40 samples, 0.66%)</title><rect x="98.8894%" y="1253" width="0.6630%" height="15" fill="rgb(251,106,48)" fg:x="5966" fg:w="40"/><text x="99.1394%" y="1263.50"></text></g><g><title>leveldb::MemTable::Add (40 samples, 0.66%)</title><rect x="98.8894%" y="1237" width="0.6630%" height="15" fill="rgb(242,2,23)" fg:x="5966" fg:w="40"/><text x="99.1394%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (37 samples, 0.61%)</title><rect x="98.9392%" y="1221" width="0.6133%" height="15" fill="rgb(212,109,31)" fg:x="5969" fg:w="37"/><text x="99.1892%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (1 samples, 0.02%)</title><rect x="99.5359%" y="1205" width="0.0166%" height="15" fill="rgb(241,9,22)" fg:x="6005" fg:w="1"/><text x="99.7859%" y="1215.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (1 samples, 0.02%)</title><rect x="99.5359%" y="1189" width="0.0166%" height="15" fill="rgb(209,64,27)" fg:x="6005" fg:w="1"/><text x="99.7859%" y="1199.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (1 samples, 0.02%)</title><rect x="99.5359%" y="1173" width="0.0166%" height="15" fill="rgb(248,13,44)" fg:x="6005" fg:w="1"/><text x="99.7859%" y="1183.50"></text></g><g><title>leveldb::WriteBatchInternal::SetContents (1 samples, 0.02%)</title><rect x="99.5525%" y="1285" width="0.0166%" height="15" fill="rgb(213,86,6)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="99.5525%" y="1269" width="0.0166%" height="15" fill="rgb(247,11,18)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="99.5525%" y="1253" width="0.0166%" height="15" fill="rgb(252,31,11)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="99.5525%" y="1237" width="0.0166%" height="15" fill="rgb(215,63,51)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="99.5525%" y="1221" width="0.0166%" height="15" fill="rgb(222,180,4)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="99.5525%" y="1205" width="0.0166%" height="15" fill="rgb(233,4,23)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="99.5525%" y="1189" width="0.0166%" height="15" fill="rgb(230,116,22)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="99.5525%" y="1173" width="0.0166%" height="15" fill="rgb(222,20,14)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1157" width="0.0166%" height="15" fill="rgb(210,176,43)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1141" width="0.0166%" height="15" fill="rgb(219,67,32)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1125" width="0.0166%" height="15" fill="rgb(228,91,39)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1109" width="0.0166%" height="15" fill="rgb(254,63,14)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1093" width="0.0166%" height="15" fill="rgb(216,171,39)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1077" width="0.0166%" height="15" fill="rgb(248,68,25)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1061" width="0.0166%" height="15" fill="rgb(239,63,16)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1045" width="0.0166%" height="15" fill="rgb(225,111,43)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5525%" y="1029" width="0.0166%" height="15" fill="rgb(246,165,17)" fg:x="6006" fg:w="1"/><text x="99.8025%" y="1039.50"></text></g><g><title>leveldb::log::Reader::ReadPhysicalRecord (1 samples, 0.02%)</title><rect x="99.5690%" y="1269" width="0.0166%" height="15" fill="rgb(208,124,1)" fg:x="6007" fg:w="1"/><text x="99.8190%" y="1279.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="99.5690%" y="1253" width="0.0166%" height="15" fill="rgb(234,147,33)" fg:x="6007" fg:w="1"/><text x="99.8190%" y="1263.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="99.5690%" y="1237" width="0.0166%" height="15" fill="rgb(240,86,30)" fg:x="6007" fg:w="1"/><text x="99.8190%" y="1247.50"></text></g><g><title>crc32c::RequestPrefetch (1 samples, 0.02%)</title><rect x="99.5690%" y="1221" width="0.0166%" height="15" fill="rgb(237,34,51)" fg:x="6007" fg:w="1"/><text x="99.8190%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (4 samples, 0.07%)</title><rect x="99.5856%" y="1237" width="0.0663%" height="15" fill="rgb(232,131,41)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.07%)</title><rect x="99.5856%" y="1221" width="0.0663%" height="15" fill="rgb(227,129,53)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.07%)</title><rect x="99.5856%" y="1205" width="0.0663%" height="15" fill="rgb(230,90,35)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (4 samples, 0.07%)</title><rect x="99.5856%" y="1189" width="0.0663%" height="15" fill="rgb(248,88,27)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.07%)</title><rect x="99.5856%" y="1173" width="0.0663%" height="15" fill="rgb(223,18,17)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.5856%" y="1157" width="0.0663%" height="15" fill="rgb(241,11,10)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.5856%" y="1141" width="0.0663%" height="15" fill="rgb(232,111,52)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.5856%" y="1125" width="0.0663%" height="15" fill="rgb(228,67,8)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.5856%" y="1109" width="0.0663%" height="15" fill="rgb(251,168,31)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.5856%" y="1093" width="0.0663%" height="15" fill="rgb(249,164,11)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.5856%" y="1077" width="0.0663%" height="15" fill="rgb(239,81,9)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.5856%" y="1061" width="0.0663%" height="15" fill="rgb(222,145,38)" fg:x="6008" fg:w="4"/><text x="99.8356%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.6188%" y="1045" width="0.0332%" height="15" fill="rgb(238,80,54)" fg:x="6010" fg:w="2"/><text x="99.8688%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6353%" y="1029" width="0.0166%" height="15" fill="rgb(237,116,16)" fg:x="6011" fg:w="1"/><text x="99.8853%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6353%" y="1013" width="0.0166%" height="15" fill="rgb(218,135,19)" fg:x="6011" fg:w="1"/><text x="99.8853%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6353%" y="997" width="0.0166%" height="15" fill="rgb(216,207,44)" fg:x="6011" fg:w="1"/><text x="99.8853%" y="1007.50"></text></g><g><title>CompleteChainstateInitialization (80 samples, 1.33%)</title><rect x="98.3756%" y="1397" width="1.3260%" height="15" fill="rgb(226,152,40)" fg:x="5935" fg:w="80"/><text x="98.6256%" y="1407.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (80 samples, 1.33%)</title><rect x="98.3756%" y="1381" width="1.3260%" height="15" fill="rgb(219,98,35)" fg:x="5935" fg:w="80"/><text x="98.6256%" y="1391.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (80 samples, 1.33%)</title><rect x="98.3756%" y="1365" width="1.3260%" height="15" fill="rgb(222,136,46)" fg:x="5935" fg:w="80"/><text x="98.6256%" y="1375.50"></text></g><g><title>CDBWrapper::CDBWrapper (80 samples, 1.33%)</title><rect x="98.3756%" y="1349" width="1.3260%" height="15" fill="rgb(222,71,8)" fg:x="5935" fg:w="80"/><text x="98.6256%" y="1359.50"></text></g><g><title>leveldb::DB::Open (80 samples, 1.33%)</title><rect x="98.3756%" y="1333" width="1.3260%" height="15" fill="rgb(209,89,53)" fg:x="5935" fg:w="80"/><text x="98.6256%" y="1343.50"></text></g><g><title>leveldb::DBImpl::Recover (80 samples, 1.33%)</title><rect x="98.3756%" y="1317" width="1.3260%" height="15" fill="rgb(210,97,51)" fg:x="5935" fg:w="80"/><text x="98.6256%" y="1327.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (80 samples, 1.33%)</title><rect x="98.3756%" y="1301" width="1.3260%" height="15" fill="rgb(248,65,21)" fg:x="5935" fg:w="80"/><text x="98.6256%" y="1311.50"></text></g><g><title>leveldb::log::Reader::ReadRecord (8 samples, 0.13%)</title><rect x="99.5690%" y="1285" width="0.1326%" height="15" fill="rgb(222,5,31)" fg:x="6007" fg:w="8"/><text x="99.8190%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7 samples, 0.12%)</title><rect x="99.5856%" y="1269" width="0.1160%" height="15" fill="rgb(241,16,30)" fg:x="6008" fg:w="7"/><text x="99.8356%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (7 samples, 0.12%)</title><rect x="99.5856%" y="1253" width="0.1160%" height="15" fill="rgb(215,86,30)" fg:x="6008" fg:w="7"/><text x="99.8356%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.6519%" y="1237" width="0.0497%" height="15" fill="rgb(235,26,44)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.6519%" y="1221" width="0.0497%" height="15" fill="rgb(228,147,14)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="99.6519%" y="1205" width="0.0497%" height="15" fill="rgb(253,38,50)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="99.6519%" y="1189" width="0.0497%" height="15" fill="rgb(251,151,16)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1173" width="0.0497%" height="15" fill="rgb(224,64,19)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1157" width="0.0497%" height="15" fill="rgb(235,214,47)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1141" width="0.0497%" height="15" fill="rgb(218,15,19)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1125" width="0.0497%" height="15" fill="rgb(247,209,3)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1109" width="0.0497%" height="15" fill="rgb(217,29,2)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1093" width="0.0497%" height="15" fill="rgb(234,9,9)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1077" width="0.0497%" height="15" fill="rgb(207,43,14)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6519%" y="1061" width="0.0497%" height="15" fill="rgb(216,219,36)" fg:x="6012" fg:w="3"/><text x="99.9019%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6851%" y="1045" width="0.0166%" height="15" fill="rgb(238,12,26)" fg:x="6014" fg:w="1"/><text x="99.9351%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6851%" y="1029" width="0.0166%" height="15" fill="rgb(226,67,30)" fg:x="6014" fg:w="1"/><text x="99.9351%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6851%" y="1013" width="0.0166%" height="15" fill="rgb(229,154,7)" fg:x="6014" fg:w="1"/><text x="99.9351%" y="1023.50"></text></g><g><title>SetDataIterator (1 samples, 0.02%)</title><rect x="99.7016%" y="1221" width="0.0166%" height="15" fill="rgb(249,90,18)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Set (1 samples, 0.02%)</title><rect x="99.7016%" y="1205" width="0.0166%" height="15" fill="rgb(223,53,15)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1215.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="99.7016%" y="1189" width="0.0166%" height="15" fill="rgb(253,86,38)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1199.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.02%)</title><rect x="99.7016%" y="1173" width="0.0166%" height="15" fill="rgb(222,198,9)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1183.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="99.7016%" y="1157" width="0.0166%" height="15" fill="rgb(240,146,25)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1167.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="99.7016%" y="1141" width="0.0166%" height="15" fill="rgb(225,38,10)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1151.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (1 samples, 0.02%)</title><rect x="99.7016%" y="1125" width="0.0166%" height="15" fill="rgb(246,93,4)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1135.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="99.7016%" y="1109" width="0.0166%" height="15" fill="rgb(222,55,18)" fg:x="6015" fg:w="1"/><text x="99.9516%" y="1119.50"></text></g><g><title>leveldb::crc32c::Value (2 samples, 0.03%)</title><rect x="99.7182%" y="1189" width="0.0332%" height="15" fill="rgb(233,137,48)" fg:x="6016" fg:w="2"/><text x="99.9682%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.03%)</title><rect x="99.7182%" y="1173" width="0.0332%" height="15" fill="rgb(214,8,54)" fg:x="6016" fg:w="2"/><text x="99.9682%" y="1183.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="99.7348%" y="1157" width="0.0166%" height="15" fill="rgb(206,75,4)" fg:x="6017" fg:w="1"/><text x="99.9848%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (4 samples, 0.07%)</title><rect x="99.7016%" y="1317" width="0.0663%" height="15" fill="rgb(238,171,14)" fg:x="6015" fg:w="4"/><text x="99.9516%" y="1327.50"></text></g><g><title>Next (4 samples, 0.07%)</title><rect x="99.7016%" y="1301" width="0.0663%" height="15" fill="rgb(233,70,41)" fg:x="6015" fg:w="4"/><text x="99.9516%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (4 samples, 0.07%)</title><rect x="99.7016%" y="1285" width="0.0663%" height="15" fill="rgb(214,68,36)" fg:x="6015" fg:w="4"/><text x="99.9516%" y="1295.50"></text></g><g><title>SkipEmptyDataBlocksForward (4 samples, 0.07%)</title><rect x="99.7016%" y="1269" width="0.0663%" height="15" fill="rgb(223,29,5)" fg:x="6015" fg:w="4"/><text x="99.9516%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (4 samples, 0.07%)</title><rect x="99.7016%" y="1253" width="0.0663%" height="15" fill="rgb(251,22,40)" fg:x="6015" fg:w="4"/><text x="99.9516%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (4 samples, 0.07%)</title><rect x="99.7016%" y="1237" width="0.0663%" height="15" fill="rgb(210,67,41)" fg:x="6015" fg:w="4"/><text x="99.9516%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (3 samples, 0.05%)</title><rect x="99.7182%" y="1221" width="0.0497%" height="15" fill="rgb(225,177,31)" fg:x="6016" fg:w="3"/><text x="99.9682%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (3 samples, 0.05%)</title><rect x="99.7182%" y="1205" width="0.0497%" height="15" fill="rgb(221,229,11)" fg:x="6016" fg:w="3"/><text x="99.9682%" y="1215.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="99.7514%" y="1189" width="0.0166%" height="15" fill="rgb(247,172,52)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1199.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.7514%" y="1173" width="0.0166%" height="15" fill="rgb(212,73,19)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1183.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="99.7514%" y="1157" width="0.0166%" height="15" fill="rgb(244,7,46)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1141" width="0.0166%" height="15" fill="rgb(230,113,20)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1125" width="0.0166%" height="15" fill="rgb(209,97,30)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1109" width="0.0166%" height="15" fill="rgb(243,89,12)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1093" width="0.0166%" height="15" fill="rgb(228,32,19)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1077" width="0.0166%" height="15" fill="rgb(248,25,17)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1061" width="0.0166%" height="15" fill="rgb(232,161,29)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1045" width="0.0166%" height="15" fill="rgb(251,192,11)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7514%" y="1029" width="0.0166%" height="15" fill="rgb(240,47,32)" fg:x="6018" fg:w="1"/><text x="100.0014%" y="1039.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (5 samples, 0.08%)</title><rect x="99.7016%" y="1333" width="0.0829%" height="15" fill="rgb(250,16,45)" fg:x="6015" fg:w="5"/><text x="99.9516%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.02%)</title><rect x="99.7679%" y="1317" width="0.0166%" height="15" fill="rgb(227,217,42)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1327.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="99.7679%" y="1301" width="0.0166%" height="15" fill="rgb(206,82,54)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="99.7679%" y="1285" width="0.0166%" height="15" fill="rgb(243,145,25)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1295.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="99.7679%" y="1269" width="0.0166%" height="15" fill="rgb(207,166,24)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="99.7679%" y="1253" width="0.0166%" height="15" fill="rgb(215,191,44)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.02%)</title><rect x="99.7679%" y="1237" width="0.0166%" height="15" fill="rgb(234,218,51)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="99.7679%" y="1221" width="0.0166%" height="15" fill="rgb(245,133,21)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="99.7679%" y="1205" width="0.0166%" height="15" fill="rgb(230,136,45)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1215.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="99.7679%" y="1189" width="0.0166%" height="15" fill="rgb(247,63,43)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="99.7679%" y="1173" width="0.0166%" height="15" fill="rgb(254,223,31)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1183.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="99.7679%" y="1157" width="0.0166%" height="15" fill="rgb(236,185,0)" fg:x="6019" fg:w="1"/><text x="100.0179%" y="1167.50"></text></g><g><title>main (86 samples, 1.43%)</title><rect x="98.3756%" y="1509" width="1.4255%" height="15" fill="rgb(231,139,46)" fg:x="5935" fg:w="86"/><text x="98.6256%" y="1519.50"></text></g><g><title>main (86 samples, 1.43%)</title><rect x="98.3756%" y="1493" width="1.4255%" height="15" fill="rgb(236,147,31)" fg:x="5935" fg:w="86"/><text x="98.6256%" y="1503.50"></text></g><g><title>AppInitMain (86 samples, 1.43%)</title><rect x="98.3756%" y="1477" width="1.4255%" height="15" fill="rgb(225,222,22)" fg:x="5935" fg:w="86"/><text x="98.6256%" y="1487.50"></text></g><g><title>InitAndLoadChainstate (86 samples, 1.43%)</title><rect x="98.3756%" y="1461" width="1.4255%" height="15" fill="rgb(225,193,14)" fg:x="5935" fg:w="86"/><text x="98.6256%" y="1471.50"></text></g><g><title>operator (86 samples, 1.43%)</title><rect x="98.3756%" y="1445" width="1.4255%" height="15" fill="rgb(253,193,46)" fg:x="5935" fg:w="86"/><text x="98.6256%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (86 samples, 1.43%)</title><rect x="98.3756%" y="1429" width="1.4255%" height="15" fill="rgb(218,187,39)" fg:x="5935" fg:w="86"/><text x="98.6256%" y="1439.50"></text></g><g><title>node::LoadChainstate (86 samples, 1.43%)</title><rect x="98.3756%" y="1413" width="1.4255%" height="15" fill="rgb(227,162,48)" fg:x="5935" fg:w="86"/><text x="98.6256%" y="1423.50"></text></g><g><title>node::CompleteChainstateInitialization (6 samples, 0.10%)</title><rect x="99.7016%" y="1397" width="0.0995%" height="15" fill="rgb(222,25,5)" fg:x="6015" fg:w="6"/><text x="99.9516%" y="1407.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (6 samples, 0.10%)</title><rect x="99.7016%" y="1381" width="0.0995%" height="15" fill="rgb(211,205,16)" fg:x="6015" fg:w="6"/><text x="99.9516%" y="1391.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (6 samples, 0.10%)</title><rect x="99.7016%" y="1365" width="0.0995%" height="15" fill="rgb(244,191,2)" fg:x="6015" fg:w="6"/><text x="99.9516%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (6 samples, 0.10%)</title><rect x="99.7016%" y="1349" width="0.0995%" height="15" fill="rgb(248,159,12)" fg:x="6015" fg:w="6"/><text x="99.9516%" y="1359.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1333" width="0.0166%" height="15" fill="rgb(235,204,17)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1343.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1317" width="0.0166%" height="15" fill="rgb(240,21,27)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1327.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1301" width="0.0166%" height="15" fill="rgb(224,170,31)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1285" width="0.0166%" height="15" fill="rgb(223,145,32)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1269" width="0.0166%" height="15" fill="rgb(243,100,5)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1253" width="0.0166%" height="15" fill="rgb(242,131,51)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1237" width="0.0166%" height="15" fill="rgb(223,156,46)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1221" width="0.0166%" height="15" fill="rgb(215,10,40)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1205" width="0.0166%" height="15" fill="rgb(233,155,0)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1189" width="0.0166%" height="15" fill="rgb(247,78,6)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1173" width="0.0166%" height="15" fill="rgb(237,217,21)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1157" width="0.0166%" height="15" fill="rgb(212,1,21)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.7845%" y="1141" width="0.0166%" height="15" fill="rgb(213,7,14)" fg:x="6020" fg:w="1"/><text x="100.0345%" y="1151.50"></text></g><g><title>bitcoind-base (1,546 samples, 25.63%)</title><rect x="74.2417%" y="1525" width="25.6257%" height="15" fill="rgb(225,84,14)" fg:x="4479" fg:w="1546"/><text x="74.4917%" y="1535.50">bitcoind-base</text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.07%)</title><rect x="99.8011%" y="1509" width="0.0663%" height="15" fill="rgb(239,216,39)" fg:x="6021" fg:w="4"/><text x="100.0511%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="99.8508%" y="1493" width="0.0166%" height="15" fill="rgb(253,29,23)" fg:x="6024" fg:w="1"/><text x="100.1008%" y="1503.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="99.8508%" y="1477" width="0.0166%" height="15" fill="rgb(220,167,50)" fg:x="6024" fg:w="1"/><text x="100.1008%" y="1487.50"></text></g><g><title>perf-exec (4 samples, 0.07%)</title><rect x="99.8674%" y="1525" width="0.0663%" height="15" fill="rgb(232,141,1)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1535.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1509" width="0.0663%" height="15" fill="rgb(222,210,1)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1519.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1493" width="0.0663%" height="15" fill="rgb(219,84,10)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1477" width="0.0663%" height="15" fill="rgb(245,188,6)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1461" width="0.0663%" height="15" fill="rgb(252,139,39)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1471.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1445" width="0.0663%" height="15" fill="rgb(218,42,26)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1429" width="0.0663%" height="15" fill="rgb(237,226,51)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1413" width="0.0663%" height="15" fill="rgb(246,15,17)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8674%" y="1397" width="0.0663%" height="15" fill="rgb(228,170,42)" fg:x="6025" fg:w="4"/><text x="100.1174%" y="1407.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8840%" y="1381" width="0.0497%" height="15" fill="rgb(248,118,53)" fg:x="6026" fg:w="3"/><text x="100.1340%" y="1391.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8840%" y="1365" width="0.0497%" height="15" fill="rgb(207,30,10)" fg:x="6026" fg:w="3"/><text x="100.1340%" y="1375.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8840%" y="1349" width="0.0497%" height="15" fill="rgb(217,104,38)" fg:x="6026" fg:w="3"/><text x="100.1340%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8840%" y="1333" width="0.0497%" height="15" fill="rgb(211,165,26)" fg:x="6026" fg:w="3"/><text x="100.1340%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8840%" y="1317" width="0.0497%" height="15" fill="rgb(247,38,9)" fg:x="6026" fg:w="3"/><text x="100.1340%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8840%" y="1301" width="0.0497%" height="15" fill="rgb(218,187,8)" fg:x="6026" fg:w="3"/><text x="100.1340%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8840%" y="1285" width="0.0497%" height="15" fill="rgb(247,94,28)" fg:x="6026" fg:w="3"/><text x="100.1340%" y="1295.50"></text></g><g><title>all (6,033 samples, 100%)</title><rect x="0.0000%" y="1541" width="100.0000%" height="15" fill="rgb(218,173,30)" fg:x="0" fg:w="6033"/><text x="0.2500%" y="1551.50"></text></g><g><title>taskset (4 samples, 0.07%)</title><rect x="99.9337%" y="1525" width="0.0663%" height="15" fill="rgb(245,45,36)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1535.50"></text></g><g><title>_start (4 samples, 0.07%)</title><rect x="99.9337%" y="1509" width="0.0663%" height="15" fill="rgb(221,172,44)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1519.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4 samples, 0.07%)</title><rect x="99.9337%" y="1493" width="0.0663%" height="15" fill="rgb(222,45,12)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1503.50"></text></g><g><title>__libc_start_call_main (4 samples, 0.07%)</title><rect x="99.9337%" y="1477" width="0.0663%" height="15" fill="rgb(250,10,22)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1487.50"></text></g><g><title>main (4 samples, 0.07%)</title><rect x="99.9337%" y="1461" width="0.0663%" height="15" fill="rgb(239,27,0)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1471.50"></text></g><g><title>do_taskset (4 samples, 0.07%)</title><rect x="99.9337%" y="1445" width="0.0663%" height="15" fill="rgb(223,118,22)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1455.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (4 samples, 0.07%)</title><rect x="99.9337%" y="1429" width="0.0663%" height="15" fill="rgb(251,81,25)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1413" width="0.0663%" height="15" fill="rgb(237,225,53)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1397" width="0.0663%" height="15" fill="rgb(237,186,51)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1381" width="0.0663%" height="15" fill="rgb(247,209,11)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1365" width="0.0663%" height="15" fill="rgb(223,109,27)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1349" width="0.0663%" height="15" fill="rgb(246,181,13)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1333" width="0.0663%" height="15" fill="rgb(234,57,44)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1317" width="0.0663%" height="15" fill="rgb(211,227,50)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9337%" y="1301" width="0.0663%" height="15" fill="rgb(254,57,34)" fg:x="6029" fg:w="4"/><text x="100.1837%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1285" width="0.0497%" height="15" fill="rgb(227,212,26)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1269" width="0.0497%" height="15" fill="rgb(244,169,44)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1253" width="0.0497%" height="15" fill="rgb(236,135,50)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1237" width="0.0497%" height="15" fill="rgb(241,89,30)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1221" width="0.0497%" height="15" fill="rgb(206,113,34)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1205" width="0.0497%" height="15" fill="rgb(218,104,52)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1189" width="0.0497%" height="15" fill="rgb(223,82,32)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1173" width="0.0497%" height="15" fill="rgb(249,219,30)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1157" width="0.0497%" height="15" fill="rgb(233,141,21)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1141" width="0.0497%" height="15" fill="rgb(252,87,44)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9503%" y="1125" width="0.0497%" height="15" fill="rgb(229,48,33)" fg:x="6030" fg:w="3"/><text x="100.2003%" y="1135.50"></text></g></svg></svg>