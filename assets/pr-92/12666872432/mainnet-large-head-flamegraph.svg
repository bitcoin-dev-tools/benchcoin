<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1590" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1573.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1573.00"> </text><svg id="frames" x="10" width="1180" total_samples="67289"><g><title>AddCoins (10 samples, 0.01%)</title><rect x="0.0059%" y="1509" width="0.0149%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="10"/><text x="0.2559%" y="1519.50"></text></g><g><title>Span&lt;std::byte const&gt;::Span&lt;std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="0.8486%" y="1493" width="0.0119%" height="15" fill="rgb(217,0,24)" fg:x="571" fg:w="8"/><text x="1.0986%" y="1503.50"></text></g><g><title>std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt;::data (8 samples, 0.01%)</title><rect x="0.8486%" y="1477" width="0.0119%" height="15" fill="rgb(221,193,54)" fg:x="571" fg:w="8"/><text x="1.0986%" y="1487.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="0.8634%" y="1493" width="0.0163%" height="15" fill="rgb(248,212,6)" fg:x="581" fg:w="11"/><text x="1.1134%" y="1503.50"></text></g><g><title>_IO_fwrite (11 samples, 0.02%)</title><rect x="0.8798%" y="1493" width="0.0163%" height="15" fill="rgb(208,68,35)" fg:x="592" fg:w="11"/><text x="1.1298%" y="1503.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (256 samples, 0.38%)</title><rect x="0.8961%" y="1493" width="0.3804%" height="15" fill="rgb(232,128,0)" fg:x="603" fg:w="256"/><text x="1.1461%" y="1503.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (256 samples, 0.38%)</title><rect x="0.8961%" y="1477" width="0.3804%" height="15" fill="rgb(207,160,47)" fg:x="603" fg:w="256"/><text x="1.1461%" y="1487.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (256 samples, 0.38%)</title><rect x="0.8961%" y="1461" width="0.3804%" height="15" fill="rgb(228,23,34)" fg:x="603" fg:w="256"/><text x="1.1461%" y="1471.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (256 samples, 0.38%)</title><rect x="0.8961%" y="1445" width="0.3804%" height="15" fill="rgb(218,30,26)" fg:x="603" fg:w="256"/><text x="1.1461%" y="1455.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (256 samples, 0.38%)</title><rect x="0.8961%" y="1429" width="0.3804%" height="15" fill="rgb(220,122,19)" fg:x="603" fg:w="256"/><text x="1.1461%" y="1439.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (65 samples, 0.10%)</title><rect x="1.1800%" y="1413" width="0.0966%" height="15" fill="rgb(250,228,42)" fg:x="794" fg:w="65"/><text x="1.4300%" y="1423.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (21 samples, 0.03%)</title><rect x="1.2766%" y="1493" width="0.0312%" height="15" fill="rgb(240,193,28)" fg:x="859" fg:w="21"/><text x="1.5266%" y="1503.50"></text></g><g><title>AutoFile::write (2,321 samples, 3.45%)</title><rect x="0.0208%" y="1509" width="3.4493%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="2321"/><text x="0.2708%" y="1519.50">Aut..</text></g><g><title>util::Xor (1,455 samples, 2.16%)</title><rect x="1.3078%" y="1493" width="2.1623%" height="15" fill="rgb(206,188,39)" fg:x="880" fg:w="1455"/><text x="1.5578%" y="1503.50">u..</text></g><g><title>std::operator^= (471 samples, 0.70%)</title><rect x="2.7701%" y="1477" width="0.7000%" height="15" fill="rgb(217,207,13)" fg:x="1864" fg:w="471"/><text x="3.0201%" y="1487.50"></text></g><g><title>std::operator^ (471 samples, 0.70%)</title><rect x="2.7701%" y="1461" width="0.7000%" height="15" fill="rgb(231,73,38)" fg:x="1864" fg:w="471"/><text x="3.0201%" y="1471.50"></text></g><g><title>CCoinsViewCache::BatchWrite (9 samples, 0.01%)</title><rect x="3.4820%" y="1509" width="0.0134%" height="15" fill="rgb(225,20,46)" fg:x="2343" fg:w="9"/><text x="3.7320%" y="1519.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (9 samples, 0.01%)</title><rect x="3.4820%" y="1493" width="0.0134%" height="15" fill="rgb(210,31,41)" fg:x="2343" fg:w="9"/><text x="3.7320%" y="1503.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="3.4820%" y="1477" width="0.0134%" height="15" fill="rgb(221,200,47)" fg:x="2343" fg:w="9"/><text x="3.7320%" y="1487.50"></text></g><g><title>CCoinsViewCache::FetchCoin (28 samples, 0.04%)</title><rect x="3.4954%" y="1509" width="0.0416%" height="15" fill="rgb(226,26,5)" fg:x="2352" fg:w="28"/><text x="3.7454%" y="1519.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (13 samples, 0.02%)</title><rect x="3.5177%" y="1493" width="0.0193%" height="15" fill="rgb(249,33,26)" fg:x="2367" fg:w="13"/><text x="3.7677%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (13 samples, 0.02%)</title><rect x="3.5177%" y="1477" width="0.0193%" height="15" fill="rgb(235,183,28)" fg:x="2367" fg:w="13"/><text x="3.7677%" y="1487.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (11 samples, 0.02%)</title><rect x="3.5370%" y="1333" width="0.0163%" height="15" fill="rgb(221,5,38)" fg:x="2380" fg:w="11"/><text x="3.7870%" y="1343.50"></text></g><g><title>CCoinsViewCache::GetCoin (30 samples, 0.04%)</title><rect x="3.5370%" y="1509" width="0.0446%" height="15" fill="rgb(247,18,42)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1519.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (30 samples, 0.04%)</title><rect x="3.5370%" y="1493" width="0.0446%" height="15" fill="rgb(241,131,45)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1503.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (30 samples, 0.04%)</title><rect x="3.5370%" y="1477" width="0.0446%" height="15" fill="rgb(249,31,29)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1487.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (30 samples, 0.04%)</title><rect x="3.5370%" y="1461" width="0.0446%" height="15" fill="rgb(225,111,53)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1471.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (30 samples, 0.04%)</title><rect x="3.5370%" y="1445" width="0.0446%" height="15" fill="rgb(238,160,17)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1455.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (30 samples, 0.04%)</title><rect x="3.5370%" y="1429" width="0.0446%" height="15" fill="rgb(214,148,48)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1439.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (30 samples, 0.04%)</title><rect x="3.5370%" y="1413" width="0.0446%" height="15" fill="rgb(232,36,49)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1423.50"></text></g><g><title>Coin::Coin (30 samples, 0.04%)</title><rect x="3.5370%" y="1397" width="0.0446%" height="15" fill="rgb(209,103,24)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1407.50"></text></g><g><title>CTxOut::CTxOut (30 samples, 0.04%)</title><rect x="3.5370%" y="1381" width="0.0446%" height="15" fill="rgb(229,88,8)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1391.50"></text></g><g><title>CScript::CScript (30 samples, 0.04%)</title><rect x="3.5370%" y="1365" width="0.0446%" height="15" fill="rgb(213,181,19)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1375.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (30 samples, 0.04%)</title><rect x="3.5370%" y="1349" width="0.0446%" height="15" fill="rgb(254,191,54)" fg:x="2380" fg:w="30"/><text x="3.7870%" y="1359.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (19 samples, 0.03%)</title><rect x="3.5533%" y="1333" width="0.0282%" height="15" fill="rgb(241,83,37)" fg:x="2391" fg:w="19"/><text x="3.8033%" y="1343.50"></text></g><g><title>CCoinsViewCache::SpendCoin (8 samples, 0.01%)</title><rect x="3.5860%" y="1509" width="0.0119%" height="15" fill="rgb(233,36,39)" fg:x="2413" fg:w="8"/><text x="3.8360%" y="1519.50"></text></g><g><title>CSHA256::Write (16 samples, 0.02%)</title><rect x="3.6276%" y="1477" width="0.0238%" height="15" fill="rgb(226,3,54)" fg:x="2441" fg:w="16"/><text x="3.8776%" y="1487.50"></text></g><g><title>memcpy (18 samples, 0.03%)</title><rect x="3.6276%" y="1493" width="0.0268%" height="15" fill="rgb(245,192,40)" fg:x="2441" fg:w="18"/><text x="3.8776%" y="1503.50"></text></g><g><title>CSHA256::Write (24 samples, 0.04%)</title><rect x="3.6202%" y="1509" width="0.0357%" height="15" fill="rgb(238,167,29)" fg:x="2436" fg:w="24"/><text x="3.8702%" y="1519.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="3.6574%" y="1493" width="0.0104%" height="15" fill="rgb(232,182,51)" fg:x="2461" fg:w="7"/><text x="3.9074%" y="1503.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="3.6574%" y="1477" width="0.0104%" height="15" fill="rgb(231,60,39)" fg:x="2461" fg:w="7"/><text x="3.9074%" y="1487.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="3.6574%" y="1461" width="0.0104%" height="15" fill="rgb(208,69,12)" fg:x="2461" fg:w="7"/><text x="3.9074%" y="1471.50"></text></g><g><title>CScript::GetSigOpCount (13 samples, 0.02%)</title><rect x="3.6559%" y="1509" width="0.0193%" height="15" fill="rgb(235,93,37)" fg:x="2460" fg:w="13"/><text x="3.9059%" y="1519.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (8 samples, 0.01%)</title><rect x="3.7109%" y="1461" width="0.0119%" height="15" fill="rgb(213,116,39)" fg:x="2497" fg:w="8"/><text x="3.9609%" y="1471.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (7 samples, 0.01%)</title><rect x="3.7123%" y="1445" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="2498" fg:w="7"/><text x="3.9623%" y="1455.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (7 samples, 0.01%)</title><rect x="3.7123%" y="1429" width="0.0104%" height="15" fill="rgb(206,96,30)" fg:x="2498" fg:w="7"/><text x="3.9623%" y="1439.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (7 samples, 0.01%)</title><rect x="3.7123%" y="1413" width="0.0104%" height="15" fill="rgb(218,138,4)" fg:x="2498" fg:w="7"/><text x="3.9623%" y="1423.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (7 samples, 0.01%)</title><rect x="3.7123%" y="1397" width="0.0104%" height="15" fill="rgb(250,191,14)" fg:x="2498" fg:w="7"/><text x="3.9623%" y="1407.50"></text></g><g><title>CScript::IsWitnessProgram (120 samples, 0.18%)</title><rect x="3.6782%" y="1509" width="0.1783%" height="15" fill="rgb(239,60,40)" fg:x="2475" fg:w="120"/><text x="3.9282%" y="1519.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (100 samples, 0.15%)</title><rect x="3.7079%" y="1493" width="0.1486%" height="15" fill="rgb(206,27,48)" fg:x="2495" fg:w="100"/><text x="3.9579%" y="1503.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (99 samples, 0.15%)</title><rect x="3.7094%" y="1477" width="0.1471%" height="15" fill="rgb(225,35,8)" fg:x="2496" fg:w="99"/><text x="3.9594%" y="1487.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1461" width="0.1338%" height="15" fill="rgb(250,213,24)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1471.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1445" width="0.1338%" height="15" fill="rgb(247,123,22)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1429" width="0.1338%" height="15" fill="rgb(231,138,38)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1439.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1413" width="0.1338%" height="15" fill="rgb(231,145,46)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1423.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1397" width="0.1338%" height="15" fill="rgb(251,118,11)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1407.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1381" width="0.1338%" height="15" fill="rgb(217,147,25)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1365" width="0.1338%" height="15" fill="rgb(247,81,37)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (90 samples, 0.13%)</title><rect x="3.7227%" y="1349" width="0.1338%" height="15" fill="rgb(209,12,38)" fg:x="2505" fg:w="90"/><text x="3.9727%" y="1359.50"></text></g><g><title>CBlockUndo::~CBlockUndo (17 samples, 0.03%)</title><rect x="3.8788%" y="1493" width="0.0253%" height="15" fill="rgb(227,1,9)" fg:x="2610" fg:w="17"/><text x="4.1288%" y="1503.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (17 samples, 0.03%)</title><rect x="3.8788%" y="1477" width="0.0253%" height="15" fill="rgb(248,47,43)" fg:x="2610" fg:w="17"/><text x="4.1288%" y="1487.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (17 samples, 0.03%)</title><rect x="3.8788%" y="1461" width="0.0253%" height="15" fill="rgb(221,10,30)" fg:x="2610" fg:w="17"/><text x="4.1288%" y="1471.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (17 samples, 0.03%)</title><rect x="3.8788%" y="1445" width="0.0253%" height="15" fill="rgb(210,229,1)" fg:x="2610" fg:w="17"/><text x="4.1288%" y="1455.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (17 samples, 0.03%)</title><rect x="3.8788%" y="1429" width="0.0253%" height="15" fill="rgb(222,148,37)" fg:x="2610" fg:w="17"/><text x="4.1288%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (16 samples, 0.02%)</title><rect x="3.8803%" y="1413" width="0.0238%" height="15" fill="rgb(234,67,33)" fg:x="2611" fg:w="16"/><text x="4.1303%" y="1423.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (16 samples, 0.02%)</title><rect x="3.8803%" y="1397" width="0.0238%" height="15" fill="rgb(247,98,35)" fg:x="2611" fg:w="16"/><text x="4.1303%" y="1407.50"></text></g><g><title>CTxUndo::~CTxUndo (16 samples, 0.02%)</title><rect x="3.8803%" y="1381" width="0.0238%" height="15" fill="rgb(247,138,52)" fg:x="2611" fg:w="16"/><text x="4.1303%" y="1391.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (16 samples, 0.02%)</title><rect x="3.8803%" y="1365" width="0.0238%" height="15" fill="rgb(213,79,30)" fg:x="2611" fg:w="16"/><text x="4.1303%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (13 samples, 0.02%)</title><rect x="3.8847%" y="1349" width="0.0193%" height="15" fill="rgb(246,177,23)" fg:x="2614" fg:w="13"/><text x="4.1347%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (13 samples, 0.02%)</title><rect x="3.8847%" y="1333" width="0.0193%" height="15" fill="rgb(230,62,27)" fg:x="2614" fg:w="13"/><text x="4.1347%" y="1343.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (13 samples, 0.02%)</title><rect x="3.8847%" y="1317" width="0.0193%" height="15" fill="rgb(216,154,8)" fg:x="2614" fg:w="13"/><text x="4.1347%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (7 samples, 0.01%)</title><rect x="3.8937%" y="1301" width="0.0104%" height="15" fill="rgb(244,35,45)" fg:x="2620" fg:w="7"/><text x="4.1437%" y="1311.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (7 samples, 0.01%)</title><rect x="3.8937%" y="1285" width="0.0104%" height="15" fill="rgb(251,115,12)" fg:x="2620" fg:w="7"/><text x="4.1437%" y="1295.50"></text></g><g><title>Coin::~Coin (7 samples, 0.01%)</title><rect x="3.8937%" y="1269" width="0.0104%" height="15" fill="rgb(240,54,50)" fg:x="2620" fg:w="7"/><text x="4.1437%" y="1279.50"></text></g><g><title>CTxOut::~CTxOut (7 samples, 0.01%)</title><rect x="3.8937%" y="1253" width="0.0104%" height="15" fill="rgb(233,84,52)" fg:x="2620" fg:w="7"/><text x="4.1437%" y="1263.50"></text></g><g><title>CScript::~CScript (7 samples, 0.01%)</title><rect x="3.8937%" y="1237" width="0.0104%" height="15" fill="rgb(207,117,47)" fg:x="2620" fg:w="7"/><text x="4.1437%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (7 samples, 0.01%)</title><rect x="3.8937%" y="1221" width="0.0104%" height="15" fill="rgb(249,43,39)" fg:x="2620" fg:w="7"/><text x="4.1437%" y="1231.50"></text></g><g><title>Chainstate::ConnectBlock (39 samples, 0.06%)</title><rect x="3.8699%" y="1509" width="0.0580%" height="15" fill="rgb(209,38,44)" fg:x="2604" fg:w="39"/><text x="4.1199%" y="1519.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="4.1017%" y="597" width="0.0104%" height="15" fill="rgb(236,212,23)" fg:x="2760" fg:w="7"/><text x="4.3517%" y="607.50"></text></g><g><title>[[ext4]] (9 samples, 0.01%)</title><rect x="4.1017%" y="629" width="0.0134%" height="15" fill="rgb(242,79,21)" fg:x="2760" fg:w="9"/><text x="4.3517%" y="639.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="4.1017%" y="613" width="0.0134%" height="15" fill="rgb(211,96,35)" fg:x="2760" fg:w="9"/><text x="4.3517%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="4.0987%" y="773" width="0.0178%" height="15" fill="rgb(253,215,40)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="783.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="4.0987%" y="757" width="0.0178%" height="15" fill="rgb(211,81,21)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="767.50"></text></g><g><title>new_do_write (12 samples, 0.02%)</title><rect x="4.0987%" y="741" width="0.0178%" height="15" fill="rgb(208,190,38)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="751.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="4.0987%" y="725" width="0.0178%" height="15" fill="rgb(235,213,38)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="735.50"></text></g><g><title>__GI___libc_write (12 samples, 0.02%)</title><rect x="4.0987%" y="709" width="0.0178%" height="15" fill="rgb(237,122,38)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="719.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="4.0987%" y="693" width="0.0178%" height="15" fill="rgb(244,218,35)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="703.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="4.0987%" y="677" width="0.0178%" height="15" fill="rgb(240,68,47)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="687.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="4.0987%" y="661" width="0.0178%" height="15" fill="rgb(210,16,53)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="671.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="4.0987%" y="645" width="0.0178%" height="15" fill="rgb(235,124,12)" fg:x="2758" fg:w="12"/><text x="4.3487%" y="655.50"></text></g><g><title>_IO_fwrite (129 samples, 0.19%)</title><rect x="3.9338%" y="789" width="0.1917%" height="15" fill="rgb(224,169,11)" fg:x="2647" fg:w="129"/><text x="4.1838%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="949" width="0.1991%" height="15" fill="rgb(250,166,2)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="959.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="933" width="0.1991%" height="15" fill="rgb(242,216,29)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="943.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="917" width="0.1991%" height="15" fill="rgb(230,116,27)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (134 samples, 0.20%)</title><rect x="3.9278%" y="901" width="0.1991%" height="15" fill="rgb(228,99,48)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="885" width="0.1991%" height="15" fill="rgb(253,11,6)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="869" width="0.1991%" height="15" fill="rgb(247,143,39)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="853" width="0.1991%" height="15" fill="rgb(236,97,10)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="837" width="0.1991%" height="15" fill="rgb(233,208,19)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (134 samples, 0.20%)</title><rect x="3.9278%" y="821" width="0.1991%" height="15" fill="rgb(216,164,2)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="831.50"></text></g><g><title>AutoFile::write (134 samples, 0.20%)</title><rect x="3.9278%" y="805" width="0.1991%" height="15" fill="rgb(220,129,5)" fg:x="2643" fg:w="134"/><text x="4.1778%" y="815.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="4.1760%" y="645" width="0.0238%" height="15" fill="rgb(242,17,10)" fg:x="2810" fg:w="16"/><text x="4.4260%" y="655.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="4.1849%" y="629" width="0.0149%" height="15" fill="rgb(242,107,0)" fg:x="2816" fg:w="10"/><text x="4.4349%" y="639.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="4.1879%" y="613" width="0.0119%" height="15" fill="rgb(251,28,31)" fg:x="2818" fg:w="8"/><text x="4.4379%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="4.1894%" y="597" width="0.0104%" height="15" fill="rgb(233,223,10)" fg:x="2819" fg:w="7"/><text x="4.4394%" y="607.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="4.1894%" y="581" width="0.0104%" height="15" fill="rgb(215,21,27)" fg:x="2819" fg:w="7"/><text x="4.4394%" y="591.50"></text></g><g><title>[[ext4]] (78 samples, 0.12%)</title><rect x="4.1730%" y="661" width="0.1159%" height="15" fill="rgb(232,23,21)" fg:x="2808" fg:w="78"/><text x="4.4230%" y="671.50"></text></g><g><title>[unknown] (60 samples, 0.09%)</title><rect x="4.1998%" y="645" width="0.0892%" height="15" fill="rgb(244,5,23)" fg:x="2826" fg:w="60"/><text x="4.4498%" y="655.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="4.2043%" y="629" width="0.0847%" height="15" fill="rgb(226,81,46)" fg:x="2829" fg:w="57"/><text x="4.4543%" y="639.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="4.2147%" y="613" width="0.0743%" height="15" fill="rgb(247,70,30)" fg:x="2836" fg:w="50"/><text x="4.4647%" y="623.50"></text></g><g><title>[unknown] (43 samples, 0.06%)</title><rect x="4.2251%" y="597" width="0.0639%" height="15" fill="rgb(212,68,19)" fg:x="2843" fg:w="43"/><text x="4.4751%" y="607.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="4.2488%" y="581" width="0.0401%" height="15" fill="rgb(240,187,13)" fg:x="2859" fg:w="27"/><text x="4.4988%" y="591.50"></text></g><g><title>[[ext4]] (100 samples, 0.15%)</title><rect x="4.1612%" y="693" width="0.1486%" height="15" fill="rgb(223,113,26)" fg:x="2800" fg:w="100"/><text x="4.4112%" y="703.50"></text></g><g><title>[unknown] (96 samples, 0.14%)</title><rect x="4.1671%" y="677" width="0.1427%" height="15" fill="rgb(206,192,2)" fg:x="2804" fg:w="96"/><text x="4.4171%" y="687.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="4.2890%" y="661" width="0.0208%" height="15" fill="rgb(241,108,4)" fg:x="2886" fg:w="14"/><text x="4.5390%" y="671.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="4.2964%" y="645" width="0.0134%" height="15" fill="rgb(247,173,49)" fg:x="2891" fg:w="9"/><text x="4.5464%" y="655.50"></text></g><g><title>_IO_fwrite (124 samples, 0.18%)</title><rect x="4.1359%" y="853" width="0.1843%" height="15" fill="rgb(224,114,35)" fg:x="2783" fg:w="124"/><text x="4.3859%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (115 samples, 0.17%)</title><rect x="4.1493%" y="837" width="0.1709%" height="15" fill="rgb(245,159,27)" fg:x="2792" fg:w="115"/><text x="4.3993%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (115 samples, 0.17%)</title><rect x="4.1493%" y="821" width="0.1709%" height="15" fill="rgb(245,172,44)" fg:x="2792" fg:w="115"/><text x="4.3993%" y="831.50"></text></g><g><title>new_do_write (114 samples, 0.17%)</title><rect x="4.1508%" y="805" width="0.1694%" height="15" fill="rgb(236,23,11)" fg:x="2793" fg:w="114"/><text x="4.4008%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (114 samples, 0.17%)</title><rect x="4.1508%" y="789" width="0.1694%" height="15" fill="rgb(205,117,38)" fg:x="2793" fg:w="114"/><text x="4.4008%" y="799.50"></text></g><g><title>__GI___libc_write (114 samples, 0.17%)</title><rect x="4.1508%" y="773" width="0.1694%" height="15" fill="rgb(237,72,25)" fg:x="2793" fg:w="114"/><text x="4.4008%" y="783.50"></text></g><g><title>[unknown] (114 samples, 0.17%)</title><rect x="4.1508%" y="757" width="0.1694%" height="15" fill="rgb(244,70,9)" fg:x="2793" fg:w="114"/><text x="4.4008%" y="767.50"></text></g><g><title>[unknown] (114 samples, 0.17%)</title><rect x="4.1508%" y="741" width="0.1694%" height="15" fill="rgb(217,125,39)" fg:x="2793" fg:w="114"/><text x="4.4008%" y="751.50"></text></g><g><title>[unknown] (114 samples, 0.17%)</title><rect x="4.1508%" y="725" width="0.1694%" height="15" fill="rgb(235,36,10)" fg:x="2793" fg:w="114"/><text x="4.4008%" y="735.50"></text></g><g><title>[unknown] (112 samples, 0.17%)</title><rect x="4.1537%" y="709" width="0.1664%" height="15" fill="rgb(251,123,47)" fg:x="2795" fg:w="112"/><text x="4.4037%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="4.3098%" y="693" width="0.0104%" height="15" fill="rgb(221,13,13)" fg:x="2900" fg:w="7"/><text x="4.5598%" y="703.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="4.3202%" y="853" width="0.0104%" height="15" fill="rgb(238,131,9)" fg:x="2907" fg:w="7"/><text x="4.5702%" y="863.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="4.3202%" y="837" width="0.0104%" height="15" fill="rgb(211,50,8)" fg:x="2907" fg:w="7"/><text x="4.5702%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="4.3202%" y="821" width="0.0104%" height="15" fill="rgb(245,182,24)" fg:x="2907" fg:w="7"/><text x="4.5702%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="4.3202%" y="805" width="0.0104%" height="15" fill="rgb(242,14,37)" fg:x="2907" fg:w="7"/><text x="4.5702%" y="815.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (7 samples, 0.01%)</title><rect x="4.3202%" y="789" width="0.0104%" height="15" fill="rgb(246,228,12)" fg:x="2907" fg:w="7"/><text x="4.5702%" y="799.50"></text></g><g><title>AutoFile::write (161 samples, 0.24%)</title><rect x="4.1270%" y="869" width="0.2393%" height="15" fill="rgb(213,55,15)" fg:x="2777" fg:w="161"/><text x="4.3770%" y="879.50"></text></g><g><title>util::Xor (24 samples, 0.04%)</title><rect x="4.3306%" y="853" width="0.0357%" height="15" fill="rgb(209,9,3)" fg:x="2914" fg:w="24"/><text x="4.5806%" y="863.50"></text></g><g><title>std::operator^= (8 samples, 0.01%)</title><rect x="4.3544%" y="837" width="0.0119%" height="15" fill="rgb(230,59,30)" fg:x="2930" fg:w="8"/><text x="4.6044%" y="847.50"></text></g><g><title>std::operator^ (8 samples, 0.01%)</title><rect x="4.3544%" y="821" width="0.0119%" height="15" fill="rgb(209,121,21)" fg:x="2930" fg:w="8"/><text x="4.6044%" y="831.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (165 samples, 0.25%)</title><rect x="4.1270%" y="901" width="0.2452%" height="15" fill="rgb(220,109,13)" fg:x="2777" fg:w="165"/><text x="4.3770%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (165 samples, 0.25%)</title><rect x="4.1270%" y="885" width="0.2452%" height="15" fill="rgb(232,18,1)" fg:x="2777" fg:w="165"/><text x="4.3770%" y="895.50"></text></g><g><title>[[ext4]] (9 samples, 0.01%)</title><rect x="4.3856%" y="661" width="0.0134%" height="15" fill="rgb(215,41,42)" fg:x="2951" fg:w="9"/><text x="4.6356%" y="671.50"></text></g><g><title>[[ext4]] (11 samples, 0.02%)</title><rect x="4.3856%" y="693" width="0.0163%" height="15" fill="rgb(224,123,36)" fg:x="2951" fg:w="11"/><text x="4.6356%" y="703.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="4.3856%" y="677" width="0.0163%" height="15" fill="rgb(240,125,3)" fg:x="2951" fg:w="11"/><text x="4.6356%" y="687.50"></text></g><g><title>_IO_fwrite (22 samples, 0.03%)</title><rect x="4.3722%" y="853" width="0.0327%" height="15" fill="rgb(205,98,50)" fg:x="2942" fg:w="22"/><text x="4.6222%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="4.3781%" y="837" width="0.0268%" height="15" fill="rgb(205,185,37)" fg:x="2946" fg:w="18"/><text x="4.6281%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="4.3781%" y="821" width="0.0268%" height="15" fill="rgb(238,207,15)" fg:x="2946" fg:w="18"/><text x="4.6281%" y="831.50"></text></g><g><title>new_do_write (18 samples, 0.03%)</title><rect x="4.3781%" y="805" width="0.0268%" height="15" fill="rgb(213,199,42)" fg:x="2946" fg:w="18"/><text x="4.6281%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="4.3781%" y="789" width="0.0268%" height="15" fill="rgb(235,201,11)" fg:x="2946" fg:w="18"/><text x="4.6281%" y="799.50"></text></g><g><title>__GI___libc_write (18 samples, 0.03%)</title><rect x="4.3781%" y="773" width="0.0268%" height="15" fill="rgb(207,46,11)" fg:x="2946" fg:w="18"/><text x="4.6281%" y="783.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="4.3781%" y="757" width="0.0268%" height="15" fill="rgb(241,35,35)" fg:x="2946" fg:w="18"/><text x="4.6281%" y="767.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="4.3796%" y="741" width="0.0253%" height="15" fill="rgb(243,32,47)" fg:x="2947" fg:w="17"/><text x="4.6296%" y="751.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="4.3811%" y="725" width="0.0238%" height="15" fill="rgb(247,202,23)" fg:x="2948" fg:w="16"/><text x="4.6311%" y="735.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="4.3841%" y="709" width="0.0208%" height="15" fill="rgb(219,102,11)" fg:x="2950" fg:w="14"/><text x="4.6341%" y="719.50"></text></g><g><title>AutoFile::write (29 samples, 0.04%)</title><rect x="4.3722%" y="869" width="0.0431%" height="15" fill="rgb(243,110,44)" fg:x="2942" fg:w="29"/><text x="4.6222%" y="879.50"></text></g><g><title>CompressScript (10 samples, 0.01%)</title><rect x="4.4153%" y="869" width="0.0149%" height="15" fill="rgb(222,74,54)" fg:x="2971" fg:w="10"/><text x="4.6653%" y="879.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (40 samples, 0.06%)</title><rect x="4.3722%" y="901" width="0.0594%" height="15" fill="rgb(216,99,12)" fg:x="2942" fg:w="40"/><text x="4.6222%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (40 samples, 0.06%)</title><rect x="4.3722%" y="885" width="0.0594%" height="15" fill="rgb(226,22,26)" fg:x="2942" fg:w="40"/><text x="4.6222%" y="895.50"></text></g><g><title>AutoFile::write (18 samples, 0.03%)</title><rect x="4.4346%" y="805" width="0.0268%" height="15" fill="rgb(217,163,10)" fg:x="2984" fg:w="18"/><text x="4.6846%" y="815.50"></text></g><g><title>_IO_fwrite (16 samples, 0.02%)</title><rect x="4.4376%" y="789" width="0.0238%" height="15" fill="rgb(213,25,53)" fg:x="2986" fg:w="16"/><text x="4.6876%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (362 samples, 0.54%)</title><rect x="3.9278%" y="1045" width="0.5380%" height="15" fill="rgb(252,105,26)" fg:x="2643" fg:w="362"/><text x="4.1778%" y="1055.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (362 samples, 0.54%)</title><rect x="3.9278%" y="1029" width="0.5380%" height="15" fill="rgb(220,39,43)" fg:x="2643" fg:w="362"/><text x="4.1778%" y="1039.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (362 samples, 0.54%)</title><rect x="3.9278%" y="1013" width="0.5380%" height="15" fill="rgb(229,68,48)" fg:x="2643" fg:w="362"/><text x="4.1778%" y="1023.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (362 samples, 0.54%)</title><rect x="3.9278%" y="997" width="0.5380%" height="15" fill="rgb(252,8,32)" fg:x="2643" fg:w="362"/><text x="4.1778%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (362 samples, 0.54%)</title><rect x="3.9278%" y="981" width="0.5380%" height="15" fill="rgb(223,20,43)" fg:x="2643" fg:w="362"/><text x="4.1778%" y="991.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (362 samples, 0.54%)</title><rect x="3.9278%" y="965" width="0.5380%" height="15" fill="rgb(229,81,49)" fg:x="2643" fg:w="362"/><text x="4.1778%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (228 samples, 0.34%)</title><rect x="4.1270%" y="949" width="0.3388%" height="15" fill="rgb(236,28,36)" fg:x="2777" fg:w="228"/><text x="4.3770%" y="959.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (228 samples, 0.34%)</title><rect x="4.1270%" y="933" width="0.3388%" height="15" fill="rgb(249,185,26)" fg:x="2777" fg:w="228"/><text x="4.3770%" y="943.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (228 samples, 0.34%)</title><rect x="4.1270%" y="917" width="0.3388%" height="15" fill="rgb(249,174,33)" fg:x="2777" fg:w="228"/><text x="4.3770%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (23 samples, 0.03%)</title><rect x="4.4316%" y="901" width="0.0342%" height="15" fill="rgb(233,201,37)" fg:x="2982" fg:w="23"/><text x="4.6816%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (23 samples, 0.03%)</title><rect x="4.4316%" y="885" width="0.0342%" height="15" fill="rgb(221,78,26)" fg:x="2982" fg:w="23"/><text x="4.6816%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (23 samples, 0.03%)</title><rect x="4.4316%" y="869" width="0.0342%" height="15" fill="rgb(250,127,30)" fg:x="2982" fg:w="23"/><text x="4.6816%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (23 samples, 0.03%)</title><rect x="4.4316%" y="853" width="0.0342%" height="15" fill="rgb(230,49,44)" fg:x="2982" fg:w="23"/><text x="4.6816%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (21 samples, 0.03%)</title><rect x="4.4346%" y="837" width="0.0312%" height="15" fill="rgb(229,67,23)" fg:x="2984" fg:w="21"/><text x="4.6846%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (21 samples, 0.03%)</title><rect x="4.4346%" y="821" width="0.0312%" height="15" fill="rgb(249,83,47)" fg:x="2984" fg:w="21"/><text x="4.6846%" y="831.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="4.6263%" y="917" width="0.0268%" height="15" fill="rgb(215,43,3)" fg:x="3113" fg:w="18"/><text x="4.8763%" y="927.50"></text></g><g><title>new_do_write (18 samples, 0.03%)</title><rect x="4.6263%" y="901" width="0.0268%" height="15" fill="rgb(238,154,13)" fg:x="3113" fg:w="18"/><text x="4.8763%" y="911.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="4.6263%" y="885" width="0.0268%" height="15" fill="rgb(219,56,2)" fg:x="3113" fg:w="18"/><text x="4.8763%" y="895.50"></text></g><g><title>__GI___libc_write (17 samples, 0.03%)</title><rect x="4.6278%" y="869" width="0.0253%" height="15" fill="rgb(233,0,4)" fg:x="3114" fg:w="17"/><text x="4.8778%" y="879.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="4.6278%" y="853" width="0.0253%" height="15" fill="rgb(235,30,7)" fg:x="3114" fg:w="17"/><text x="4.8778%" y="863.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="4.6293%" y="837" width="0.0238%" height="15" fill="rgb(250,79,13)" fg:x="3115" fg:w="16"/><text x="4.8793%" y="847.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="4.6293%" y="821" width="0.0238%" height="15" fill="rgb(211,146,34)" fg:x="3115" fg:w="16"/><text x="4.8793%" y="831.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="4.6308%" y="805" width="0.0223%" height="15" fill="rgb(228,22,38)" fg:x="3116" fg:w="15"/><text x="4.8808%" y="815.50"></text></g><g><title>[[ext4]] (13 samples, 0.02%)</title><rect x="4.6337%" y="789" width="0.0193%" height="15" fill="rgb(235,168,5)" fg:x="3118" fg:w="13"/><text x="4.8837%" y="799.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="4.6352%" y="773" width="0.0178%" height="15" fill="rgb(221,155,16)" fg:x="3119" fg:w="12"/><text x="4.8852%" y="783.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="4.6352%" y="757" width="0.0178%" height="15" fill="rgb(215,215,53)" fg:x="3119" fg:w="12"/><text x="4.8852%" y="767.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="4.6382%" y="741" width="0.0149%" height="15" fill="rgb(223,4,10)" fg:x="3121" fg:w="10"/><text x="4.8882%" y="751.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="4.6412%" y="725" width="0.0119%" height="15" fill="rgb(234,103,6)" fg:x="3123" fg:w="8"/><text x="4.8912%" y="735.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (22 samples, 0.03%)</title><rect x="4.6233%" y="933" width="0.0327%" height="15" fill="rgb(227,97,0)" fg:x="3111" fg:w="22"/><text x="4.8733%" y="943.50"></text></g><g><title>_IO_fwrite (128 samples, 0.19%)</title><rect x="4.4688%" y="949" width="0.1902%" height="15" fill="rgb(234,150,53)" fg:x="3007" fg:w="128"/><text x="4.7188%" y="959.50"></text></g><g><title>AutoFile::write (131 samples, 0.19%)</title><rect x="4.4658%" y="965" width="0.1947%" height="15" fill="rgb(228,201,54)" fg:x="3005" fg:w="131"/><text x="4.7158%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (139 samples, 0.21%)</title><rect x="4.4658%" y="1045" width="0.2066%" height="15" fill="rgb(222,22,37)" fg:x="3005" fg:w="139"/><text x="4.7158%" y="1055.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (139 samples, 0.21%)</title><rect x="4.4658%" y="1029" width="0.2066%" height="15" fill="rgb(237,53,32)" fg:x="3005" fg:w="139"/><text x="4.7158%" y="1039.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (139 samples, 0.21%)</title><rect x="4.4658%" y="1013" width="0.2066%" height="15" fill="rgb(233,25,53)" fg:x="3005" fg:w="139"/><text x="4.7158%" y="1023.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (139 samples, 0.21%)</title><rect x="4.4658%" y="997" width="0.2066%" height="15" fill="rgb(210,40,34)" fg:x="3005" fg:w="139"/><text x="4.7158%" y="1007.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (139 samples, 0.21%)</title><rect x="4.4658%" y="981" width="0.2066%" height="15" fill="rgb(241,220,44)" fg:x="3005" fg:w="139"/><text x="4.7158%" y="991.50"></text></g><g><title>vtable for std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (8 samples, 0.01%)</title><rect x="4.6605%" y="965" width="0.0119%" height="15" fill="rgb(235,28,35)" fg:x="3136" fg:w="8"/><text x="4.9105%" y="975.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (540 samples, 0.80%)</title><rect x="3.9278%" y="1061" width="0.8025%" height="15" fill="rgb(210,56,17)" fg:x="2643" fg:w="540"/><text x="4.1778%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="4.6724%" y="1045" width="0.0580%" height="15" fill="rgb(224,130,29)" fg:x="3144" fg:w="39"/><text x="4.9224%" y="1055.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="4.6724%" y="1029" width="0.0580%" height="15" fill="rgb(235,212,8)" fg:x="3144" fg:w="39"/><text x="4.9224%" y="1039.50"></text></g><g><title>AutoFile::write (39 samples, 0.06%)</title><rect x="4.6724%" y="1013" width="0.0580%" height="15" fill="rgb(223,33,50)" fg:x="3144" fg:w="39"/><text x="4.9224%" y="1023.50"></text></g><g><title>_IO_fwrite (38 samples, 0.06%)</title><rect x="4.6739%" y="997" width="0.0565%" height="15" fill="rgb(219,149,13)" fg:x="3145" fg:w="38"/><text x="4.9239%" y="1007.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="4.7541%" y="997" width="0.0104%" height="15" fill="rgb(250,156,29)" fg:x="3199" fg:w="7"/><text x="5.0041%" y="1007.50"></text></g><g><title>_IO_fwrite (25 samples, 0.04%)</title><rect x="4.7318%" y="1013" width="0.0372%" height="15" fill="rgb(216,193,19)" fg:x="3184" fg:w="25"/><text x="4.9818%" y="1023.50"></text></g><g><title>AutoFile::write (27 samples, 0.04%)</title><rect x="4.7303%" y="1029" width="0.0401%" height="15" fill="rgb(216,135,14)" fg:x="3183" fg:w="27"/><text x="4.9803%" y="1039.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (569 samples, 0.85%)</title><rect x="3.9278%" y="1397" width="0.8456%" height="15" fill="rgb(241,47,5)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1381" width="0.8456%" height="15" fill="rgb(233,42,35)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1391.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1365" width="0.8456%" height="15" fill="rgb(231,13,6)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1375.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1349" width="0.8456%" height="15" fill="rgb(207,181,40)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1359.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1333" width="0.8456%" height="15" fill="rgb(254,173,49)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1343.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1317" width="0.8456%" height="15" fill="rgb(221,1,38)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1327.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1301" width="0.8456%" height="15" fill="rgb(206,124,46)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1311.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1285" width="0.8456%" height="15" fill="rgb(249,21,11)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1295.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1269" width="0.8456%" height="15" fill="rgb(222,201,40)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1279.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1253" width="0.8456%" height="15" fill="rgb(235,61,29)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1263.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1237" width="0.8456%" height="15" fill="rgb(219,207,3)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1247.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1221" width="0.8456%" height="15" fill="rgb(222,56,46)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1205" width="0.8456%" height="15" fill="rgb(239,76,54)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1215.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1189" width="0.8456%" height="15" fill="rgb(231,124,27)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1199.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1173" width="0.8456%" height="15" fill="rgb(249,195,6)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1183.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1157" width="0.8456%" height="15" fill="rgb(237,174,47)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1141" width="0.8456%" height="15" fill="rgb(206,201,31)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1125" width="0.8456%" height="15" fill="rgb(231,57,52)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1109" width="0.8456%" height="15" fill="rgb(248,177,22)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1093" width="0.8456%" height="15" fill="rgb(215,211,37)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (569 samples, 0.85%)</title><rect x="3.9278%" y="1077" width="0.8456%" height="15" fill="rgb(241,128,51)" fg:x="2643" fg:w="569"/><text x="4.1778%" y="1087.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (29 samples, 0.04%)</title><rect x="4.7303%" y="1061" width="0.0431%" height="15" fill="rgb(227,165,31)" fg:x="3183" fg:w="29"/><text x="4.9803%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (29 samples, 0.04%)</title><rect x="4.7303%" y="1045" width="0.0431%" height="15" fill="rgb(228,167,24)" fg:x="3183" fg:w="29"/><text x="4.9803%" y="1055.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (570 samples, 0.85%)</title><rect x="3.9278%" y="1509" width="0.8471%" height="15" fill="rgb(228,143,12)" fg:x="2643" fg:w="570"/><text x="4.1778%" y="1519.50"></text></g><g><title>Chainstate::ActivateBestChain (570 samples, 0.85%)</title><rect x="3.9278%" y="1493" width="0.8471%" height="15" fill="rgb(249,149,8)" fg:x="2643" fg:w="570"/><text x="4.1778%" y="1503.50"></text></g><g><title>Chainstate::ActivateBestChainStep (570 samples, 0.85%)</title><rect x="3.9278%" y="1477" width="0.8471%" height="15" fill="rgb(243,35,44)" fg:x="2643" fg:w="570"/><text x="4.1778%" y="1487.50"></text></g><g><title>Chainstate::ConnectTip (570 samples, 0.85%)</title><rect x="3.9278%" y="1461" width="0.8471%" height="15" fill="rgb(246,89,9)" fg:x="2643" fg:w="570"/><text x="4.1778%" y="1471.50"></text></g><g><title>Chainstate::ConnectBlock (570 samples, 0.85%)</title><rect x="3.9278%" y="1445" width="0.8471%" height="15" fill="rgb(233,213,13)" fg:x="2643" fg:w="570"/><text x="4.1778%" y="1455.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (570 samples, 0.85%)</title><rect x="3.9278%" y="1429" width="0.8471%" height="15" fill="rgb(233,141,41)" fg:x="2643" fg:w="570"/><text x="4.1778%" y="1439.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (570 samples, 0.85%)</title><rect x="3.9278%" y="1413" width="0.8471%" height="15" fill="rgb(239,167,4)" fg:x="2643" fg:w="570"/><text x="4.1778%" y="1423.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::set (9 samples, 0.01%)</title><rect x="4.8002%" y="1493" width="0.0134%" height="15" fill="rgb(209,217,16)" fg:x="3230" fg:w="9"/><text x="5.0502%" y="1503.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree (9 samples, 0.01%)</title><rect x="4.8002%" y="1477" width="0.0134%" height="15" fill="rgb(219,88,35)" fg:x="3230" fg:w="9"/><text x="5.0502%" y="1487.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Rb_tree_impl&lt;std::less&lt;COutPoint&gt;, true&gt;::_Rb_tree_impl (9 samples, 0.01%)</title><rect x="4.8002%" y="1461" width="0.0134%" height="15" fill="rgb(220,193,23)" fg:x="3230" fg:w="9"/><text x="5.0502%" y="1471.50"></text></g><g><title>std::_Rb_tree_header::_Rb_tree_header (9 samples, 0.01%)</title><rect x="4.8002%" y="1445" width="0.0134%" height="15" fill="rgb(230,90,52)" fg:x="3230" fg:w="9"/><text x="5.0502%" y="1455.50"></text></g><g><title>std::_Rb_tree_header::_M_reset (9 samples, 0.01%)</title><rect x="4.8002%" y="1429" width="0.0134%" height="15" fill="rgb(252,106,19)" fg:x="3230" fg:w="9"/><text x="5.0502%" y="1439.50"></text></g><g><title>CheckTransaction (39 samples, 0.06%)</title><rect x="4.7794%" y="1509" width="0.0580%" height="15" fill="rgb(206,74,20)" fg:x="3216" fg:w="39"/><text x="5.0294%" y="1519.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1493" width="0.0238%" height="15" fill="rgb(230,138,44)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1503.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (16 samples, 0.02%)</title><rect x="4.8136%" y="1477" width="0.0238%" height="15" fill="rgb(235,182,43)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1487.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1461" width="0.0238%" height="15" fill="rgb(242,16,51)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1471.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1445" width="0.0238%" height="15" fill="rgb(248,9,4)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1455.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1429" width="0.0238%" height="15" fill="rgb(210,31,22)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1439.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1413" width="0.0238%" height="15" fill="rgb(239,54,39)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1423.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1397" width="0.0238%" height="15" fill="rgb(230,99,41)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1407.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (16 samples, 0.02%)</title><rect x="4.8136%" y="1381" width="0.0238%" height="15" fill="rgb(253,106,12)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1391.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1365" width="0.0238%" height="15" fill="rgb(213,46,41)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1375.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1349" width="0.0238%" height="15" fill="rgb(215,133,35)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1359.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1333" width="0.0238%" height="15" fill="rgb(213,28,5)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1343.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="4.8136%" y="1317" width="0.0238%" height="15" fill="rgb(215,77,49)" fg:x="3239" fg:w="16"/><text x="5.0636%" y="1327.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1301" width="0.0178%" height="15" fill="rgb(248,100,22)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1311.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1285" width="0.0178%" height="15" fill="rgb(208,67,9)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1295.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1269" width="0.0178%" height="15" fill="rgb(219,133,21)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1279.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1253" width="0.0178%" height="15" fill="rgb(246,46,29)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1263.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1237" width="0.0178%" height="15" fill="rgb(246,185,52)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1247.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1221" width="0.0178%" height="15" fill="rgb(252,136,11)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1231.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1205" width="0.0178%" height="15" fill="rgb(219,138,53)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1189" width="0.0178%" height="15" fill="rgb(211,51,23)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1199.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1173" width="0.0178%" height="15" fill="rgb(247,221,28)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1183.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1157" width="0.0178%" height="15" fill="rgb(251,222,45)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1167.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1141" width="0.0178%" height="15" fill="rgb(217,162,53)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1125" width="0.0178%" height="15" fill="rgb(229,93,14)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1135.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="4.8195%" y="1109" width="0.0178%" height="15" fill="rgb(209,67,49)" fg:x="3243" fg:w="12"/><text x="5.0695%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (10 samples, 0.01%)</title><rect x="4.8225%" y="1093" width="0.0149%" height="15" fill="rgb(213,87,29)" fg:x="3245" fg:w="10"/><text x="5.0725%" y="1103.50"></text></g><g><title>CompressAmount (26 samples, 0.04%)</title><rect x="4.8388%" y="1509" width="0.0386%" height="15" fill="rgb(205,151,52)" fg:x="3256" fg:w="26"/><text x="5.0888%" y="1519.50"></text></g><g><title>CompressScript (27 samples, 0.04%)</title><rect x="4.8775%" y="1509" width="0.0401%" height="15" fill="rgb(253,215,39)" fg:x="3282" fg:w="27"/><text x="5.1275%" y="1519.50"></text></g><g><title>_int_malloc (18 samples, 0.03%)</title><rect x="4.9443%" y="1493" width="0.0268%" height="15" fill="rgb(221,220,41)" fg:x="3327" fg:w="18"/><text x="5.1943%" y="1503.50"></text></g><g><title>CountWitnessSigOps (44 samples, 0.07%)</title><rect x="4.9206%" y="1509" width="0.0654%" height="15" fill="rgb(218,133,21)" fg:x="3311" fg:w="44"/><text x="5.1706%" y="1519.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (10 samples, 0.01%)</title><rect x="4.9711%" y="1493" width="0.0149%" height="15" fill="rgb(221,193,43)" fg:x="3345" fg:w="10"/><text x="5.2211%" y="1503.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (10 samples, 0.01%)</title><rect x="4.9711%" y="1477" width="0.0149%" height="15" fill="rgb(240,128,52)" fg:x="3345" fg:w="10"/><text x="5.2211%" y="1487.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (10 samples, 0.01%)</title><rect x="4.9711%" y="1461" width="0.0149%" height="15" fill="rgb(253,114,12)" fg:x="3345" fg:w="10"/><text x="5.2211%" y="1471.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (10 samples, 0.01%)</title><rect x="4.9711%" y="1445" width="0.0149%" height="15" fill="rgb(215,223,47)" fg:x="3345" fg:w="10"/><text x="5.2211%" y="1455.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (10 samples, 0.01%)</title><rect x="4.9711%" y="1429" width="0.0149%" height="15" fill="rgb(248,225,23)" fg:x="3345" fg:w="10"/><text x="5.2211%" y="1439.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (10 samples, 0.01%)</title><rect x="4.9711%" y="1413" width="0.0149%" height="15" fill="rgb(250,108,0)" fg:x="3345" fg:w="10"/><text x="5.2211%" y="1423.50"></text></g><g><title>malloc (7 samples, 0.01%)</title><rect x="4.9756%" y="1397" width="0.0104%" height="15" fill="rgb(228,208,7)" fg:x="3348" fg:w="7"/><text x="5.2256%" y="1407.50"></text></g><g><title>DataStream::read (9 samples, 0.01%)</title><rect x="4.9860%" y="1509" width="0.0134%" height="15" fill="rgb(244,45,10)" fg:x="3355" fg:w="9"/><text x="5.2360%" y="1519.50"></text></g><g><title>GetScriptOp (7 samples, 0.01%)</title><rect x="5.0187%" y="1509" width="0.0104%" height="15" fill="rgb(207,125,25)" fg:x="3377" fg:w="7"/><text x="5.2687%" y="1519.50"></text></g><g><title>GetTransactionSigOpCost (7 samples, 0.01%)</title><rect x="5.0291%" y="1509" width="0.0104%" height="15" fill="rgb(210,195,18)" fg:x="3384" fg:w="7"/><text x="5.2791%" y="1519.50"></text></g><g><title>SipHashUint256Extra (105 samples, 0.16%)</title><rect x="5.0543%" y="1509" width="0.1560%" height="15" fill="rgb(249,80,12)" fg:x="3401" fg:w="105"/><text x="5.3043%" y="1519.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (32 samples, 0.05%)</title><rect x="5.1628%" y="1493" width="0.0476%" height="15" fill="rgb(221,65,9)" fg:x="3474" fg:w="32"/><text x="5.4128%" y="1503.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (32 samples, 0.05%)</title><rect x="5.1628%" y="1477" width="0.0476%" height="15" fill="rgb(235,49,36)" fg:x="3474" fg:w="32"/><text x="5.4128%" y="1487.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (11 samples, 0.02%)</title><rect x="5.2267%" y="1477" width="0.0163%" height="15" fill="rgb(225,32,20)" fg:x="3517" fg:w="11"/><text x="5.4767%" y="1487.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (11 samples, 0.02%)</title><rect x="5.2267%" y="1461" width="0.0163%" height="15" fill="rgb(215,141,46)" fg:x="3517" fg:w="11"/><text x="5.4767%" y="1471.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (11 samples, 0.02%)</title><rect x="5.2267%" y="1445" width="0.0163%" height="15" fill="rgb(250,160,47)" fg:x="3517" fg:w="11"/><text x="5.4767%" y="1455.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (11 samples, 0.02%)</title><rect x="5.2267%" y="1429" width="0.0163%" height="15" fill="rgb(216,222,40)" fg:x="3517" fg:w="11"/><text x="5.4767%" y="1439.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (11 samples, 0.02%)</title><rect x="5.2267%" y="1413" width="0.0163%" height="15" fill="rgb(234,217,39)" fg:x="3517" fg:w="11"/><text x="5.4767%" y="1423.50"></text></g><g><title>operator new (10 samples, 0.01%)</title><rect x="5.2282%" y="1397" width="0.0149%" height="15" fill="rgb(207,178,40)" fg:x="3518" fg:w="10"/><text x="5.4782%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.01%)</title><rect x="5.2297%" y="1381" width="0.0134%" height="15" fill="rgb(221,136,13)" fg:x="3519" fg:w="9"/><text x="5.4797%" y="1391.50"></text></g><g><title>UpdateCoins (26 samples, 0.04%)</title><rect x="5.2104%" y="1509" width="0.0386%" height="15" fill="rgb(249,199,10)" fg:x="3506" fg:w="26"/><text x="5.4604%" y="1519.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (16 samples, 0.02%)</title><rect x="5.2252%" y="1493" width="0.0238%" height="15" fill="rgb(249,222,13)" fg:x="3516" fg:w="16"/><text x="5.4752%" y="1503.50"></text></g><g><title>CSHA256::Write (13 samples, 0.02%)</title><rect x="5.2951%" y="1493" width="0.0193%" height="15" fill="rgb(244,185,38)" fg:x="3563" fg:w="13"/><text x="5.5451%" y="1503.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.01%)</title><rect x="5.3203%" y="1493" width="0.0104%" height="15" fill="rgb(236,202,9)" fg:x="3580" fg:w="7"/><text x="5.5703%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (13 samples, 0.02%)</title><rect x="5.3411%" y="1493" width="0.0193%" height="15" fill="rgb(250,229,37)" fg:x="3594" fg:w="13"/><text x="5.5911%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.01%)</title><rect x="5.3738%" y="1493" width="0.0104%" height="15" fill="rgb(206,174,23)" fg:x="3616" fg:w="7"/><text x="5.6238%" y="1503.50"></text></g><g><title>[[heap]] (114 samples, 0.17%)</title><rect x="5.2951%" y="1509" width="0.1694%" height="15" fill="rgb(211,33,43)" fg:x="3563" fg:w="114"/><text x="5.5451%" y="1519.50"></text></g><g><title>AutoFile::write (79 samples, 0.12%)</title><rect x="5.4719%" y="1493" width="0.1174%" height="15" fill="rgb(245,58,50)" fg:x="3682" fg:w="79"/><text x="5.7219%" y="1503.50"></text></g><g><title>CCoinsViewCache::AccessCoin (9 samples, 0.01%)</title><rect x="5.5938%" y="1493" width="0.0134%" height="15" fill="rgb(244,68,36)" fg:x="3764" fg:w="9"/><text x="5.8438%" y="1503.50"></text></g><g><title>CCoinsViewCache::AddCoin (14 samples, 0.02%)</title><rect x="5.6072%" y="1493" width="0.0208%" height="15" fill="rgb(232,229,15)" fg:x="3773" fg:w="14"/><text x="5.8572%" y="1503.50"></text></g><g><title>CCoinsViewCache::FetchCoin (33 samples, 0.05%)</title><rect x="5.6280%" y="1493" width="0.0490%" height="15" fill="rgb(254,30,23)" fg:x="3787" fg:w="33"/><text x="5.8780%" y="1503.50"></text></g><g><title>CSHA256::Reset (9 samples, 0.01%)</title><rect x="5.7082%" y="1493" width="0.0134%" height="15" fill="rgb(235,160,14)" fg:x="3841" fg:w="9"/><text x="5.9582%" y="1503.50"></text></g><g><title>CSHA256::Write (191 samples, 0.28%)</title><rect x="5.7216%" y="1493" width="0.2839%" height="15" fill="rgb(212,155,44)" fg:x="3850" fg:w="191"/><text x="5.9716%" y="1503.50"></text></g><g><title>CScript::GetSigOpCount (22 samples, 0.03%)</title><rect x="6.0054%" y="1493" width="0.0327%" height="15" fill="rgb(226,2,50)" fg:x="4041" fg:w="22"/><text x="6.2554%" y="1503.50"></text></g><g><title>CTransaction::ComputeHasWitness (18 samples, 0.03%)</title><rect x="6.0515%" y="1493" width="0.0268%" height="15" fill="rgb(234,177,6)" fg:x="4072" fg:w="18"/><text x="6.3015%" y="1503.50"></text></g><g><title>CalculateSequenceLocks (8 samples, 0.01%)</title><rect x="6.0916%" y="1493" width="0.0119%" height="15" fill="rgb(217,24,9)" fg:x="4099" fg:w="8"/><text x="6.3416%" y="1503.50"></text></g><g><title>CompressAmount (20 samples, 0.03%)</title><rect x="6.1065%" y="1493" width="0.0297%" height="15" fill="rgb(220,13,46)" fg:x="4109" fg:w="20"/><text x="6.3565%" y="1503.50"></text></g><g><title>CompressScript (19 samples, 0.03%)</title><rect x="6.1362%" y="1493" width="0.0282%" height="15" fill="rgb(239,221,27)" fg:x="4129" fg:w="19"/><text x="6.3862%" y="1503.50"></text></g><g><title>GetScriptOp (54 samples, 0.08%)</title><rect x="6.1897%" y="1493" width="0.0803%" height="15" fill="rgb(222,198,25)" fg:x="4165" fg:w="54"/><text x="6.4397%" y="1503.50"></text></g><g><title>SipHashUint256Extra (92 samples, 0.14%)</title><rect x="6.2789%" y="1493" width="0.1367%" height="15" fill="rgb(211,99,13)" fg:x="4225" fg:w="92"/><text x="6.5289%" y="1503.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="6.4201%" y="1493" width="0.0104%" height="15" fill="rgb(232,111,31)" fg:x="4320" fg:w="7"/><text x="6.6701%" y="1503.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="6.4305%" y="1493" width="0.0104%" height="15" fill="rgb(245,82,37)" fg:x="4327" fg:w="7"/><text x="6.6805%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (241 samples, 0.36%)</title><rect x="6.4409%" y="1493" width="0.3582%" height="15" fill="rgb(227,149,46)" fg:x="4334" fg:w="241"/><text x="6.6909%" y="1503.50"></text></g><g><title>_IO_fwrite (379 samples, 0.56%)</title><rect x="6.7990%" y="1493" width="0.5632%" height="15" fill="rgb(218,36,50)" fg:x="4575" fg:w="379"/><text x="7.0490%" y="1503.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (7 samples, 0.01%)</title><rect x="7.3667%" y="1493" width="0.0104%" height="15" fill="rgb(226,80,48)" fg:x="4957" fg:w="7"/><text x="7.6167%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (243 samples, 0.36%)</title><rect x="7.3831%" y="1493" width="0.3611%" height="15" fill="rgb(238,224,15)" fg:x="4968" fg:w="243"/><text x="7.6331%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (579 samples, 0.86%)</title><rect x="7.7442%" y="1493" width="0.8605%" height="15" fill="rgb(241,136,10)" fg:x="5211" fg:w="579"/><text x="7.9942%" y="1503.50"></text></g><g><title>__mempcpy@plt (18 samples, 0.03%)</title><rect x="8.6047%" y="1493" width="0.0268%" height="15" fill="rgb(208,32,45)" fg:x="5790" fg:w="18"/><text x="8.8547%" y="1503.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (19 samples, 0.03%)</title><rect x="8.6314%" y="1493" width="0.0282%" height="15" fill="rgb(207,135,9)" fg:x="5808" fg:w="19"/><text x="8.8814%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned (11 samples, 0.02%)</title><rect x="8.6597%" y="1493" width="0.0163%" height="15" fill="rgb(206,86,44)" fg:x="5827" fg:w="11"/><text x="8.9097%" y="1503.50"></text></g><g><title>_int_free (91 samples, 0.14%)</title><rect x="8.6805%" y="1493" width="0.1352%" height="15" fill="rgb(245,177,15)" fg:x="5841" fg:w="91"/><text x="8.9305%" y="1503.50"></text></g><g><title>_int_malloc (300 samples, 0.45%)</title><rect x="8.8187%" y="1493" width="0.4458%" height="15" fill="rgb(206,64,50)" fg:x="5934" fg:w="300"/><text x="9.0687%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (55 samples, 0.08%)</title><rect x="9.2660%" y="1493" width="0.0817%" height="15" fill="rgb(234,36,40)" fg:x="6235" fg:w="55"/><text x="9.5160%" y="1503.50"></text></g><g><title>free@plt (11 samples, 0.02%)</title><rect x="9.3477%" y="1493" width="0.0163%" height="15" fill="rgb(213,64,8)" fg:x="6290" fg:w="11"/><text x="9.5977%" y="1503.50"></text></g><g><title>fwrite@plt (11 samples, 0.02%)</title><rect x="9.3656%" y="1493" width="0.0163%" height="15" fill="rgb(210,75,36)" fg:x="6302" fg:w="11"/><text x="9.6156%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (17 samples, 0.03%)</title><rect x="9.3819%" y="1493" width="0.0253%" height="15" fill="rgb(229,88,21)" fg:x="6313" fg:w="17"/><text x="9.6319%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (151 samples, 0.22%)</title><rect x="9.4681%" y="1493" width="0.2244%" height="15" fill="rgb(252,204,47)" fg:x="6371" fg:w="151"/><text x="9.7181%" y="1503.50"></text></g><g><title>malloc (163 samples, 0.24%)</title><rect x="9.7222%" y="1493" width="0.2422%" height="15" fill="rgb(208,77,27)" fg:x="6542" fg:w="163"/><text x="9.9722%" y="1503.50"></text></g><g><title>malloc@plt (21 samples, 0.03%)</title><rect x="9.9645%" y="1493" width="0.0312%" height="15" fill="rgb(221,76,26)" fg:x="6705" fg:w="21"/><text x="10.2145%" y="1503.50"></text></g><g><title>malloc_consolidate (8 samples, 0.01%)</title><rect x="9.9957%" y="1493" width="0.0119%" height="15" fill="rgb(225,139,18)" fg:x="6726" fg:w="8"/><text x="10.2457%" y="1503.50"></text></g><g><title>memcmp@plt (11 samples, 0.02%)</title><rect x="10.0076%" y="1493" width="0.0163%" height="15" fill="rgb(230,137,11)" fg:x="6734" fg:w="11"/><text x="10.2576%" y="1503.50"></text></g><g><title>memcpy@plt (66 samples, 0.10%)</title><rect x="10.0239%" y="1493" width="0.0981%" height="15" fill="rgb(212,28,1)" fg:x="6745" fg:w="66"/><text x="10.2739%" y="1503.50"></text></g><g><title>operator delete (25 samples, 0.04%)</title><rect x="10.1384%" y="1493" width="0.0372%" height="15" fill="rgb(248,164,17)" fg:x="6822" fg:w="25"/><text x="10.3884%" y="1503.50"></text></g><g><title>operator new (50 samples, 0.07%)</title><rect x="10.1755%" y="1493" width="0.0743%" height="15" fill="rgb(222,171,42)" fg:x="6847" fg:w="50"/><text x="10.4255%" y="1503.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="10.2513%" y="1493" width="0.0163%" height="15" fill="rgb(243,84,45)" fg:x="6898" fg:w="11"/><text x="10.5013%" y="1503.50"></text></g><g><title>sha256_x86_shani::Transform (12 samples, 0.02%)</title><rect x="10.2766%" y="1493" width="0.0178%" height="15" fill="rgb(252,49,23)" fg:x="6915" fg:w="12"/><text x="10.5266%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.02%)</title><rect x="10.2944%" y="1493" width="0.0178%" height="15" fill="rgb(215,19,7)" fg:x="6927" fg:w="12"/><text x="10.5444%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (7 samples, 0.01%)</title><rect x="10.3122%" y="1493" width="0.0104%" height="15" fill="rgb(238,81,41)" fg:x="6939" fg:w="7"/><text x="10.5622%" y="1503.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (41 samples, 0.06%)</title><rect x="10.3464%" y="1493" width="0.0609%" height="15" fill="rgb(210,199,37)" fg:x="6962" fg:w="41"/><text x="10.5964%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (14 samples, 0.02%)</title><rect x="10.4088%" y="1493" width="0.0208%" height="15" fill="rgb(244,192,49)" fg:x="7004" fg:w="14"/><text x="10.6588%" y="1503.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (14 samples, 0.02%)</title><rect x="10.4400%" y="1493" width="0.0208%" height="15" fill="rgb(226,211,11)" fg:x="7025" fg:w="14"/><text x="10.6900%" y="1503.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (13 samples, 0.02%)</title><rect x="10.4623%" y="1493" width="0.0193%" height="15" fill="rgb(236,162,54)" fg:x="7040" fg:w="13"/><text x="10.7123%" y="1503.50"></text></g><g><title>_IO_fwrite (10 samples, 0.01%)</title><rect x="10.4668%" y="1477" width="0.0149%" height="15" fill="rgb(220,229,9)" fg:x="7043" fg:w="10"/><text x="10.7168%" y="1487.50"></text></g><g><title>unlink_chunk.isra.0 (15 samples, 0.02%)</title><rect x="10.5129%" y="1493" width="0.0223%" height="15" fill="rgb(250,87,22)" fg:x="7074" fg:w="15"/><text x="10.7629%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="10.5366%" y="1493" width="0.0223%" height="15" fill="rgb(239,43,17)" fg:x="7090" fg:w="15"/><text x="10.7866%" y="1503.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="10.5604%" y="1493" width="0.0119%" height="15" fill="rgb(231,177,25)" fg:x="7106" fg:w="8"/><text x="10.8104%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.02%)</title><rect x="10.5768%" y="1493" width="0.0208%" height="15" fill="rgb(219,179,1)" fg:x="7117" fg:w="14"/><text x="10.8268%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="10.6139%" y="1493" width="0.0104%" height="15" fill="rgb(238,219,53)" fg:x="7142" fg:w="7"/><text x="10.8639%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (36 samples, 0.05%)</title><rect x="10.6243%" y="1493" width="0.0535%" height="15" fill="rgb(232,167,36)" fg:x="7149" fg:w="36"/><text x="10.8743%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (96 samples, 0.14%)</title><rect x="10.6778%" y="1493" width="0.1427%" height="15" fill="rgb(244,19,51)" fg:x="7185" fg:w="96"/><text x="10.9278%" y="1503.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (10 samples, 0.01%)</title><rect x="10.8339%" y="1493" width="0.0149%" height="15" fill="rgb(224,6,22)" fg:x="7290" fg:w="10"/><text x="11.0839%" y="1503.50"></text></g><g><title>[anon] (3,627 samples, 5.39%)</title><rect x="5.4645%" y="1509" width="5.3902%" height="15" fill="rgb(224,145,5)" fg:x="3677" fg:w="3627"/><text x="5.7145%" y="1519.50">[anon]</text></g><g><title>[bitcoind-head] (15 samples, 0.02%)</title><rect x="10.8547%" y="1509" width="0.0223%" height="15" fill="rgb(234,130,49)" fg:x="7304" fg:w="15"/><text x="11.1047%" y="1519.50"></text></g><g><title>AutoFile::write (66 samples, 0.10%)</title><rect x="10.9111%" y="1493" width="0.0981%" height="15" fill="rgb(254,6,2)" fg:x="7342" fg:w="66"/><text x="11.1611%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.02%)</title><rect x="10.9899%" y="1477" width="0.0193%" height="15" fill="rgb(208,96,46)" fg:x="7395" fg:w="13"/><text x="11.2399%" y="1487.50"></text></g><g><title>CCoinsViewCache::AddCoin (11 samples, 0.02%)</title><rect x="11.0330%" y="1493" width="0.0163%" height="15" fill="rgb(239,3,39)" fg:x="7424" fg:w="11"/><text x="11.2830%" y="1503.50"></text></g><g><title>CCoinsViewCache::FetchCoin (25 samples, 0.04%)</title><rect x="11.0494%" y="1493" width="0.0372%" height="15" fill="rgb(233,210,1)" fg:x="7435" fg:w="25"/><text x="11.2994%" y="1503.50"></text></g><g><title>CCoinsViewCache::SpendCoin (7 samples, 0.01%)</title><rect x="11.0895%" y="1493" width="0.0104%" height="15" fill="rgb(244,137,37)" fg:x="7462" fg:w="7"/><text x="11.3395%" y="1503.50"></text></g><g><title>CSHA256::Write (34 samples, 0.05%)</title><rect x="11.1118%" y="1493" width="0.0505%" height="15" fill="rgb(240,136,2)" fg:x="7477" fg:w="34"/><text x="11.3618%" y="1503.50"></text></g><g><title>CScript::GetSigOpCount (9 samples, 0.01%)</title><rect x="11.1623%" y="1493" width="0.0134%" height="15" fill="rgb(239,18,37)" fg:x="7511" fg:w="9"/><text x="11.4123%" y="1503.50"></text></g><g><title>DataStream::read (10 samples, 0.01%)</title><rect x="11.2054%" y="1493" width="0.0149%" height="15" fill="rgb(218,185,22)" fg:x="7540" fg:w="10"/><text x="11.4554%" y="1503.50"></text></g><g><title>GetScriptOp (31 samples, 0.05%)</title><rect x="11.2277%" y="1493" width="0.0461%" height="15" fill="rgb(225,218,4)" fg:x="7555" fg:w="31"/><text x="11.4777%" y="1503.50"></text></g><g><title>SipHashUint256Extra (103 samples, 0.15%)</title><rect x="11.2752%" y="1493" width="0.1531%" height="15" fill="rgb(230,182,32)" fg:x="7587" fg:w="103"/><text x="11.5252%" y="1503.50"></text></g><g><title>[unknown] (71 samples, 0.11%)</title><rect x="11.4372%" y="1493" width="0.1055%" height="15" fill="rgb(242,56,43)" fg:x="7696" fg:w="71"/><text x="11.6872%" y="1503.50"></text></g><g><title>[unknown] (61 samples, 0.09%)</title><rect x="11.4521%" y="1477" width="0.0907%" height="15" fill="rgb(233,99,24)" fg:x="7706" fg:w="61"/><text x="11.7021%" y="1487.50"></text></g><g><title>[unknown] (51 samples, 0.08%)</title><rect x="11.4670%" y="1461" width="0.0758%" height="15" fill="rgb(234,209,42)" fg:x="7716" fg:w="51"/><text x="11.7170%" y="1471.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="11.4848%" y="1445" width="0.0580%" height="15" fill="rgb(227,7,12)" fg:x="7728" fg:w="39"/><text x="11.7348%" y="1455.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (379 samples, 0.56%)</title><rect x="11.5591%" y="1493" width="0.5632%" height="15" fill="rgb(245,203,43)" fg:x="7778" fg:w="379"/><text x="11.8091%" y="1503.50"></text></g><g><title>_IO_fwrite (470 samples, 0.70%)</title><rect x="12.1223%" y="1493" width="0.6985%" height="15" fill="rgb(238,205,33)" fg:x="8157" fg:w="470"/><text x="12.3723%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (9 samples, 0.01%)</title><rect x="12.8342%" y="1493" width="0.0134%" height="15" fill="rgb(231,56,7)" fg:x="8636" fg:w="9"/><text x="13.0842%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (222 samples, 0.33%)</title><rect x="12.8476%" y="1493" width="0.3299%" height="15" fill="rgb(244,186,29)" fg:x="8645" fg:w="222"/><text x="13.0976%" y="1503.50"></text></g><g><title>__mempcpy@plt (14 samples, 0.02%)</title><rect x="13.1775%" y="1493" width="0.0208%" height="15" fill="rgb(234,111,31)" fg:x="8867" fg:w="14"/><text x="13.4275%" y="1503.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (23 samples, 0.03%)</title><rect x="13.1983%" y="1493" width="0.0342%" height="15" fill="rgb(241,149,10)" fg:x="8881" fg:w="23"/><text x="13.4483%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned (9 samples, 0.01%)</title><rect x="13.2325%" y="1493" width="0.0134%" height="15" fill="rgb(249,206,44)" fg:x="8904" fg:w="9"/><text x="13.4825%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned_erms (9 samples, 0.01%)</title><rect x="13.2458%" y="1493" width="0.0134%" height="15" fill="rgb(251,153,30)" fg:x="8913" fg:w="9"/><text x="13.4958%" y="1503.50"></text></g><g><title>_int_free (46 samples, 0.07%)</title><rect x="13.2622%" y="1493" width="0.0684%" height="15" fill="rgb(239,152,38)" fg:x="8924" fg:w="46"/><text x="13.5122%" y="1503.50"></text></g><g><title>_int_free_create_chunk (8 samples, 0.01%)</title><rect x="13.3306%" y="1493" width="0.0119%" height="15" fill="rgb(249,139,47)" fg:x="8970" fg:w="8"/><text x="13.5806%" y="1503.50"></text></g><g><title>_int_malloc (281 samples, 0.42%)</title><rect x="13.3439%" y="1493" width="0.4176%" height="15" fill="rgb(244,64,35)" fg:x="8979" fg:w="281"/><text x="13.5939%" y="1503.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="13.7482%" y="1477" width="0.0134%" height="15" fill="rgb(216,46,15)" fg:x="9251" fg:w="9"/><text x="13.9982%" y="1487.50"></text></g><g><title>cfree@GLIBC_2.2.5 (24 samples, 0.04%)</title><rect x="13.7645%" y="1493" width="0.0357%" height="15" fill="rgb(250,74,19)" fg:x="9262" fg:w="24"/><text x="14.0145%" y="1503.50"></text></g><g><title>free@plt (14 samples, 0.02%)</title><rect x="13.8017%" y="1493" width="0.0208%" height="15" fill="rgb(249,42,33)" fg:x="9287" fg:w="14"/><text x="14.0517%" y="1503.50"></text></g><g><title>fwrite@plt (9 samples, 0.01%)</title><rect x="13.8225%" y="1493" width="0.0134%" height="15" fill="rgb(242,149,17)" fg:x="9301" fg:w="9"/><text x="14.0725%" y="1503.50"></text></g><g><title>malloc (166 samples, 0.25%)</title><rect x="13.8581%" y="1493" width="0.2467%" height="15" fill="rgb(244,29,21)" fg:x="9325" fg:w="166"/><text x="14.1081%" y="1503.50"></text></g><g><title>memcpy@plt (12 samples, 0.02%)</title><rect x="14.1227%" y="1493" width="0.0178%" height="15" fill="rgb(220,130,37)" fg:x="9503" fg:w="12"/><text x="14.3727%" y="1503.50"></text></g><g><title>operator delete (16 samples, 0.02%)</title><rect x="14.1509%" y="1493" width="0.0238%" height="15" fill="rgb(211,67,2)" fg:x="9522" fg:w="16"/><text x="14.4009%" y="1503.50"></text></g><g><title>operator new (22 samples, 0.03%)</title><rect x="14.1747%" y="1493" width="0.0327%" height="15" fill="rgb(235,68,52)" fg:x="9538" fg:w="22"/><text x="14.4247%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.02%)</title><rect x="14.2297%" y="1493" width="0.0193%" height="15" fill="rgb(246,142,3)" fg:x="9575" fg:w="13"/><text x="14.4797%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (12 samples, 0.02%)</title><rect x="14.2638%" y="1493" width="0.0178%" height="15" fill="rgb(241,25,7)" fg:x="9598" fg:w="12"/><text x="14.5138%" y="1503.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (9 samples, 0.01%)</title><rect x="14.3025%" y="1493" width="0.0134%" height="15" fill="rgb(242,119,39)" fg:x="9624" fg:w="9"/><text x="14.5525%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.04%)</title><rect x="14.3218%" y="1493" width="0.0386%" height="15" fill="rgb(241,98,45)" fg:x="9637" fg:w="26"/><text x="14.5718%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (10 samples, 0.01%)</title><rect x="14.3723%" y="1493" width="0.0149%" height="15" fill="rgb(254,28,30)" fg:x="9671" fg:w="10"/><text x="14.6223%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="14.3872%" y="1493" width="0.0149%" height="15" fill="rgb(241,142,54)" fg:x="9681" fg:w="10"/><text x="14.6372%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.03%)</title><rect x="14.4110%" y="1493" width="0.0327%" height="15" fill="rgb(222,85,15)" fg:x="9697" fg:w="22"/><text x="14.6610%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (86 samples, 0.13%)</title><rect x="14.4511%" y="1493" width="0.1278%" height="15" fill="rgb(210,85,47)" fg:x="9724" fg:w="86"/><text x="14.7011%" y="1503.50"></text></g><g><title>[unknown] (2,493 samples, 3.70%)</title><rect x="10.8770%" y="1509" width="3.7049%" height="15" fill="rgb(224,206,25)" fg:x="7319" fg:w="2493"/><text x="11.1270%" y="1519.50">[unk..</text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (145 samples, 0.22%)</title><rect x="14.5819%" y="1509" width="0.2155%" height="15" fill="rgb(243,201,19)" fg:x="9812" fg:w="145"/><text x="14.8319%" y="1519.50"></text></g><g><title>_IO_fwrite (28 samples, 0.04%)</title><rect x="14.7989%" y="1509" width="0.0416%" height="15" fill="rgb(236,59,4)" fg:x="9958" fg:w="28"/><text x="15.0489%" y="1519.50"></text></g><g><title>CBlockIndex::GetAncestor (12 samples, 0.02%)</title><rect x="14.8865%" y="1333" width="0.0178%" height="15" fill="rgb(254,179,45)" fg:x="10017" fg:w="12"/><text x="15.1365%" y="1343.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.01%)</title><rect x="14.9281%" y="1269" width="0.0104%" height="15" fill="rgb(226,14,10)" fg:x="10045" fg:w="7"/><text x="15.1781%" y="1279.50"></text></g><g><title>SipHashUint256Extra (12 samples, 0.02%)</title><rect x="14.9519%" y="1205" width="0.0178%" height="15" fill="rgb(244,27,41)" fg:x="10061" fg:w="12"/><text x="15.2019%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (24 samples, 0.04%)</title><rect x="14.9742%" y="1205" width="0.0357%" height="15" fill="rgb(235,35,32)" fg:x="10076" fg:w="24"/><text x="15.2242%" y="1215.50"></text></g><g><title>SipHashUint256Extra (535 samples, 0.80%)</title><rect x="15.0129%" y="1189" width="0.7951%" height="15" fill="rgb(218,68,31)" fg:x="10102" fg:w="535"/><text x="15.2629%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (248 samples, 0.37%)</title><rect x="15.4394%" y="1173" width="0.3686%" height="15" fill="rgb(207,120,37)" fg:x="10389" fg:w="248"/><text x="15.6894%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (248 samples, 0.37%)</title><rect x="15.4394%" y="1157" width="0.3686%" height="15" fill="rgb(227,98,0)" fg:x="10389" fg:w="248"/><text x="15.6894%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1,096 samples, 1.63%)</title><rect x="15.8585%" y="1109" width="1.6288%" height="15" fill="rgb(207,7,3)" fg:x="10671" fg:w="1096"/><text x="16.1085%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (422 samples, 0.63%)</title><rect x="16.8601%" y="1093" width="0.6271%" height="15" fill="rgb(206,98,19)" fg:x="11345" fg:w="422"/><text x="17.1101%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (422 samples, 0.63%)</title><rect x="16.8601%" y="1077" width="0.6271%" height="15" fill="rgb(217,5,26)" fg:x="11345" fg:w="422"/><text x="17.1101%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (70 samples, 0.10%)</title><rect x="17.5749%" y="1093" width="0.1040%" height="15" fill="rgb(235,190,38)" fg:x="11826" fg:w="70"/><text x="17.8249%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (69 samples, 0.10%)</title><rect x="17.5764%" y="1077" width="0.1025%" height="15" fill="rgb(247,86,24)" fg:x="11827" fg:w="69"/><text x="17.8264%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (69 samples, 0.10%)</title><rect x="17.5764%" y="1061" width="0.1025%" height="15" fill="rgb(205,101,16)" fg:x="11827" fg:w="69"/><text x="17.8264%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (69 samples, 0.10%)</title><rect x="17.5764%" y="1045" width="0.1025%" height="15" fill="rgb(246,168,33)" fg:x="11827" fg:w="69"/><text x="17.8264%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (25 samples, 0.04%)</title><rect x="17.6418%" y="1029" width="0.0372%" height="15" fill="rgb(231,114,1)" fg:x="11871" fg:w="25"/><text x="17.8918%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (132 samples, 0.20%)</title><rect x="17.4873%" y="1109" width="0.1962%" height="15" fill="rgb(207,184,53)" fg:x="11767" fg:w="132"/><text x="17.7373%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,803 samples, 2.68%)</title><rect x="15.0099%" y="1205" width="2.6795%" height="15" fill="rgb(224,95,51)" fg:x="10100" fg:w="1803"/><text x="15.2599%" y="1215.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,266 samples, 1.88%)</title><rect x="15.8079%" y="1189" width="1.8814%" height="15" fill="rgb(212,188,45)" fg:x="10637" fg:w="1266"/><text x="16.0579%" y="1199.50">s..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,243 samples, 1.85%)</title><rect x="15.8421%" y="1173" width="1.8473%" height="15" fill="rgb(223,154,38)" fg:x="10660" fg:w="1243"/><text x="16.0921%" y="1183.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,243 samples, 1.85%)</title><rect x="15.8421%" y="1157" width="1.8473%" height="15" fill="rgb(251,22,52)" fg:x="10660" fg:w="1243"/><text x="16.0921%" y="1167.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1,243 samples, 1.85%)</title><rect x="15.8421%" y="1141" width="1.8473%" height="15" fill="rgb(229,209,22)" fg:x="10660" fg:w="1243"/><text x="16.0921%" y="1151.50">s..</text></g><g><title>SaltedOutpointHasher::operator (1,243 samples, 1.85%)</title><rect x="15.8421%" y="1125" width="1.8473%" height="15" fill="rgb(234,138,34)" fg:x="10660" fg:w="1243"/><text x="16.0921%" y="1135.50">S..</text></g><g><title>SipHashUint256Extra (302 samples, 0.45%)</title><rect x="17.6894%" y="1189" width="0.4488%" height="15" fill="rgb(212,95,11)" fg:x="11903" fg:w="302"/><text x="17.9394%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (161 samples, 0.24%)</title><rect x="17.8989%" y="1173" width="0.2393%" height="15" fill="rgb(240,179,47)" fg:x="12044" fg:w="161"/><text x="18.1489%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (161 samples, 0.24%)</title><rect x="17.8989%" y="1157" width="0.2393%" height="15" fill="rgb(240,163,11)" fg:x="12044" fg:w="161"/><text x="18.1489%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (8 samples, 0.01%)</title><rect x="18.1412%" y="1109" width="0.0119%" height="15" fill="rgb(236,37,12)" fg:x="12207" fg:w="8"/><text x="18.3912%" y="1119.50"></text></g><g><title>SipHashUint256Extra (184 samples, 0.27%)</title><rect x="18.1530%" y="1109" width="0.2734%" height="15" fill="rgb(232,164,16)" fg:x="12215" fg:w="184"/><text x="18.4030%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (69 samples, 0.10%)</title><rect x="18.3239%" y="1093" width="0.1025%" height="15" fill="rgb(244,205,15)" fg:x="12330" fg:w="69"/><text x="18.5739%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (69 samples, 0.10%)</title><rect x="18.3239%" y="1077" width="0.1025%" height="15" fill="rgb(223,117,47)" fg:x="12330" fg:w="69"/><text x="18.5739%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (290 samples, 0.43%)</title><rect x="18.4280%" y="1109" width="0.4310%" height="15" fill="rgb(244,107,35)" fg:x="12400" fg:w="290"/><text x="18.6780%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (488 samples, 0.73%)</title><rect x="18.1397%" y="1189" width="0.7252%" height="15" fill="rgb(205,140,8)" fg:x="12206" fg:w="488"/><text x="18.3897%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (487 samples, 0.72%)</title><rect x="18.1412%" y="1173" width="0.7237%" height="15" fill="rgb(228,84,46)" fg:x="12207" fg:w="487"/><text x="18.3912%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (487 samples, 0.72%)</title><rect x="18.1412%" y="1157" width="0.7237%" height="15" fill="rgb(254,188,9)" fg:x="12207" fg:w="487"/><text x="18.3912%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (487 samples, 0.72%)</title><rect x="18.1412%" y="1141" width="0.7237%" height="15" fill="rgb(206,112,54)" fg:x="12207" fg:w="487"/><text x="18.3912%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (487 samples, 0.72%)</title><rect x="18.1412%" y="1125" width="0.7237%" height="15" fill="rgb(216,84,49)" fg:x="12207" fg:w="487"/><text x="18.3912%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (9 samples, 0.01%)</title><rect x="18.9169%" y="1157" width="0.0134%" height="15" fill="rgb(214,194,35)" fg:x="12729" fg:w="9"/><text x="19.1669%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (9 samples, 0.01%)</title><rect x="18.9169%" y="1141" width="0.0134%" height="15" fill="rgb(249,28,3)" fg:x="12729" fg:w="9"/><text x="19.1669%" y="1151.50"></text></g><g><title>__memset_avx512_unaligned_erms (9 samples, 0.01%)</title><rect x="18.9169%" y="1125" width="0.0134%" height="15" fill="rgb(222,56,52)" fg:x="12729" fg:w="9"/><text x="19.1669%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="18.9184%" y="1109" width="0.0119%" height="15" fill="rgb(245,217,50)" fg:x="12730" fg:w="8"/><text x="19.1684%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="18.9184%" y="1093" width="0.0119%" height="15" fill="rgb(213,201,24)" fg:x="12730" fg:w="8"/><text x="19.1684%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="18.9184%" y="1077" width="0.0119%" height="15" fill="rgb(248,116,28)" fg:x="12730" fg:w="8"/><text x="19.1684%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="18.9184%" y="1061" width="0.0119%" height="15" fill="rgb(219,72,43)" fg:x="12730" fg:w="8"/><text x="19.1684%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="18.9199%" y="1045" width="0.0104%" height="15" fill="rgb(209,138,14)" fg:x="12731" fg:w="7"/><text x="19.1699%" y="1055.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="18.9199%" y="1029" width="0.0104%" height="15" fill="rgb(222,18,33)" fg:x="12731" fg:w="7"/><text x="19.1699%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (837 samples, 1.24%)</title><rect x="17.6894%" y="1205" width="1.2439%" height="15" fill="rgb(213,199,7)" fg:x="11903" fg:w="837"/><text x="17.9394%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (46 samples, 0.07%)</title><rect x="18.8649%" y="1189" width="0.0684%" height="15" fill="rgb(250,110,10)" fg:x="12694" fg:w="46"/><text x="19.1149%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (46 samples, 0.07%)</title><rect x="18.8649%" y="1173" width="0.0684%" height="15" fill="rgb(248,123,6)" fg:x="12694" fg:w="46"/><text x="19.1149%" y="1183.50"></text></g><g><title>SipHashUint256Extra (40 samples, 0.06%)</title><rect x="18.9407%" y="1189" width="0.0594%" height="15" fill="rgb(206,91,31)" fg:x="12745" fg:w="40"/><text x="19.1907%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (15 samples, 0.02%)</title><rect x="18.9778%" y="1173" width="0.0223%" height="15" fill="rgb(211,154,13)" fg:x="12770" fg:w="15"/><text x="19.2278%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (15 samples, 0.02%)</title><rect x="18.9778%" y="1157" width="0.0223%" height="15" fill="rgb(225,148,7)" fg:x="12770" fg:w="15"/><text x="19.2278%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (57 samples, 0.08%)</title><rect x="19.0001%" y="1189" width="0.0847%" height="15" fill="rgb(220,160,43)" fg:x="12785" fg:w="57"/><text x="19.2501%" y="1199.50"></text></g><g><title>decltype  (7 samples, 0.01%)</title><rect x="19.0863%" y="1173" width="0.0104%" height="15" fill="rgb(213,52,39)" fg:x="12843" fg:w="7"/><text x="19.3363%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (7 samples, 0.01%)</title><rect x="19.0863%" y="1157" width="0.0104%" height="15" fill="rgb(243,137,7)" fg:x="12843" fg:w="7"/><text x="19.3363%" y="1167.50"></text></g><g><title>decltype  (7 samples, 0.01%)</title><rect x="19.0863%" y="1141" width="0.0104%" height="15" fill="rgb(230,79,13)" fg:x="12843" fg:w="7"/><text x="19.3363%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (7 samples, 0.01%)</title><rect x="19.0863%" y="1125" width="0.0104%" height="15" fill="rgb(247,105,23)" fg:x="12843" fg:w="7"/><text x="19.3363%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (7 samples, 0.01%)</title><rect x="19.0863%" y="1109" width="0.0104%" height="15" fill="rgb(223,179,41)" fg:x="12843" fg:w="7"/><text x="19.3363%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (84 samples, 0.12%)</title><rect x="19.0997%" y="1109" width="0.1248%" height="15" fill="rgb(218,9,34)" fg:x="12852" fg:w="84"/><text x="19.3497%" y="1119.50"></text></g><g><title>operator new (84 samples, 0.12%)</title><rect x="19.0997%" y="1093" width="0.1248%" height="15" fill="rgb(222,106,8)" fg:x="12852" fg:w="84"/><text x="19.3497%" y="1103.50"></text></g><g><title>__posix_memalign (83 samples, 0.12%)</title><rect x="19.1012%" y="1077" width="0.1233%" height="15" fill="rgb(211,220,0)" fg:x="12853" fg:w="83"/><text x="19.3512%" y="1087.50"></text></g><g><title>malloc (83 samples, 0.12%)</title><rect x="19.1012%" y="1061" width="0.1233%" height="15" fill="rgb(229,52,16)" fg:x="12853" fg:w="83"/><text x="19.3512%" y="1071.50"></text></g><g><title>_int_malloc (83 samples, 0.12%)</title><rect x="19.1012%" y="1045" width="0.1233%" height="15" fill="rgb(212,155,18)" fg:x="12853" fg:w="83"/><text x="19.3512%" y="1055.50"></text></g><g><title>malloc_consolidate (21 samples, 0.03%)</title><rect x="19.1933%" y="1029" width="0.0312%" height="15" fill="rgb(242,21,14)" fg:x="12915" fg:w="21"/><text x="19.4433%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (200 samples, 0.30%)</title><rect x="18.9333%" y="1205" width="0.2972%" height="15" fill="rgb(222,19,48)" fg:x="12740" fg:w="200"/><text x="19.1833%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (97 samples, 0.14%)</title><rect x="19.0863%" y="1189" width="0.1442%" height="15" fill="rgb(232,45,27)" fg:x="12843" fg:w="97"/><text x="19.3363%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (88 samples, 0.13%)</title><rect x="19.0997%" y="1173" width="0.1308%" height="15" fill="rgb(249,103,42)" fg:x="12852" fg:w="88"/><text x="19.3497%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (88 samples, 0.13%)</title><rect x="19.0997%" y="1157" width="0.1308%" height="15" fill="rgb(246,81,33)" fg:x="12852" fg:w="88"/><text x="19.3497%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (88 samples, 0.13%)</title><rect x="19.0997%" y="1141" width="0.1308%" height="15" fill="rgb(252,33,42)" fg:x="12852" fg:w="88"/><text x="19.3497%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (88 samples, 0.13%)</title><rect x="19.0997%" y="1125" width="0.1308%" height="15" fill="rgb(209,212,41)" fg:x="12852" fg:w="88"/><text x="19.3497%" y="1135.50"></text></g><g><title>SipHashUint256Extra (17 samples, 0.03%)</title><rect x="19.2335%" y="1173" width="0.0253%" height="15" fill="rgb(207,154,6)" fg:x="12942" fg:w="17"/><text x="19.4835%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="19.2439%" y="1157" width="0.0149%" height="15" fill="rgb(223,64,47)" fg:x="12949" fg:w="10"/><text x="19.4939%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="19.2439%" y="1141" width="0.0149%" height="15" fill="rgb(211,161,38)" fg:x="12949" fg:w="10"/><text x="19.4939%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (28 samples, 0.04%)</title><rect x="19.2305%" y="1205" width="0.0416%" height="15" fill="rgb(219,138,40)" fg:x="12940" fg:w="28"/><text x="19.4805%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (28 samples, 0.04%)</title><rect x="19.2305%" y="1189" width="0.0416%" height="15" fill="rgb(241,228,46)" fg:x="12940" fg:w="28"/><text x="19.4805%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.01%)</title><rect x="19.2587%" y="1173" width="0.0134%" height="15" fill="rgb(223,209,38)" fg:x="12959" fg:w="9"/><text x="19.5087%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (2,913 samples, 4.33%)</title><rect x="14.9475%" y="1237" width="4.3291%" height="15" fill="rgb(236,164,45)" fg:x="10058" fg:w="2913"/><text x="15.1975%" y="1247.50">std::..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (2,913 samples, 4.33%)</title><rect x="14.9475%" y="1221" width="4.3291%" height="15" fill="rgb(231,15,5)" fg:x="10058" fg:w="2913"/><text x="15.1975%" y="1231.50">std::..</text></g><g><title>Coin::DynamicMemoryUsage (14 samples, 0.02%)</title><rect x="19.3197%" y="1173" width="0.0208%" height="15" fill="rgb(252,35,15)" fg:x="13000" fg:w="14"/><text x="19.5697%" y="1183.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (14 samples, 0.02%)</title><rect x="19.3197%" y="1157" width="0.0208%" height="15" fill="rgb(248,181,18)" fg:x="13000" fg:w="14"/><text x="19.5697%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::allocated_memory (8 samples, 0.01%)</title><rect x="19.3286%" y="1141" width="0.0119%" height="15" fill="rgb(233,39,42)" fg:x="13006" fg:w="8"/><text x="19.5786%" y="1151.50"></text></g><g><title>Coin::DynamicMemoryUsage (15 samples, 0.02%)</title><rect x="19.3197%" y="1189" width="0.0223%" height="15" fill="rgb(238,110,33)" fg:x="13000" fg:w="15"/><text x="19.5697%" y="1199.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (12 samples, 0.02%)</title><rect x="19.3449%" y="1189" width="0.0178%" height="15" fill="rgb(233,195,10)" fg:x="13017" fg:w="12"/><text x="19.5949%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (11 samples, 0.02%)</title><rect x="19.3464%" y="1173" width="0.0163%" height="15" fill="rgb(254,105,3)" fg:x="13018" fg:w="11"/><text x="19.5964%" y="1183.50"></text></g><g><title>CCoinsViewCache::BatchWrite (61 samples, 0.09%)</title><rect x="19.2766%" y="1205" width="0.0907%" height="15" fill="rgb(221,225,9)" fg:x="12971" fg:w="61"/><text x="19.5266%" y="1215.50"></text></g><g><title>SipHashUint256Extra (1,696 samples, 2.52%)</title><rect x="19.3672%" y="1205" width="2.5205%" height="15" fill="rgb(224,227,45)" fg:x="13032" fg:w="1696"/><text x="19.6172%" y="1215.50">Si..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (830 samples, 1.23%)</title><rect x="20.6542%" y="1189" width="1.2335%" height="15" fill="rgb(229,198,43)" fg:x="13898" fg:w="830"/><text x="20.9042%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (830 samples, 1.23%)</title><rect x="20.6542%" y="1173" width="1.2335%" height="15" fill="rgb(206,209,35)" fg:x="13898" fg:w="830"/><text x="20.9042%" y="1183.50"></text></g><g><title>SipHashUint256Extra (18 samples, 0.03%)</title><rect x="21.8996%" y="1125" width="0.0268%" height="15" fill="rgb(245,195,53)" fg:x="14736" fg:w="18"/><text x="22.1496%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.02%)</title><rect x="21.9293%" y="1125" width="0.0163%" height="15" fill="rgb(240,92,26)" fg:x="14756" fg:w="11"/><text x="22.1793%" y="1135.50"></text></g><g><title>[[igc]] (8 samples, 0.01%)</title><rect x="21.9471%" y="1013" width="0.0119%" height="15" fill="rgb(207,40,23)" fg:x="14768" fg:w="8"/><text x="22.1971%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (44 samples, 0.07%)</title><rect x="21.8951%" y="1157" width="0.0654%" height="15" fill="rgb(223,111,35)" fg:x="14733" fg:w="44"/><text x="22.1451%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (44 samples, 0.07%)</title><rect x="21.8951%" y="1141" width="0.0654%" height="15" fill="rgb(229,147,28)" fg:x="14733" fg:w="44"/><text x="22.1451%" y="1151.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (9 samples, 0.01%)</title><rect x="21.9471%" y="1125" width="0.0134%" height="15" fill="rgb(211,29,28)" fg:x="14768" fg:w="9"/><text x="22.1971%" y="1135.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="21.9471%" y="1109" width="0.0134%" height="15" fill="rgb(228,72,33)" fg:x="14768" fg:w="9"/><text x="22.1971%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="21.9471%" y="1093" width="0.0134%" height="15" fill="rgb(205,214,31)" fg:x="14768" fg:w="9"/><text x="22.1971%" y="1103.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="21.9471%" y="1077" width="0.0134%" height="15" fill="rgb(224,111,15)" fg:x="14768" fg:w="9"/><text x="22.1971%" y="1087.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="21.9471%" y="1061" width="0.0134%" height="15" fill="rgb(253,21,26)" fg:x="14768" fg:w="9"/><text x="22.1971%" y="1071.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="21.9471%" y="1045" width="0.0134%" height="15" fill="rgb(245,139,43)" fg:x="14768" fg:w="9"/><text x="22.1971%" y="1055.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="21.9471%" y="1029" width="0.0134%" height="15" fill="rgb(252,170,7)" fg:x="14768" fg:w="9"/><text x="22.1971%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (46 samples, 0.07%)</title><rect x="21.8936%" y="1189" width="0.0684%" height="15" fill="rgb(231,118,14)" fg:x="14732" fg:w="46"/><text x="22.1436%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (45 samples, 0.07%)</title><rect x="21.8951%" y="1173" width="0.0669%" height="15" fill="rgb(238,83,0)" fg:x="14733" fg:w="45"/><text x="22.1451%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (54 samples, 0.08%)</title><rect x="21.8892%" y="1205" width="0.0803%" height="15" fill="rgb(221,39,39)" fg:x="14729" fg:w="54"/><text x="22.1392%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (105 samples, 0.16%)</title><rect x="21.9694%" y="1205" width="0.1560%" height="15" fill="rgb(222,119,46)" fg:x="14783" fg:w="105"/><text x="22.2194%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (65 samples, 0.10%)</title><rect x="22.0289%" y="1189" width="0.0966%" height="15" fill="rgb(222,165,49)" fg:x="14823" fg:w="65"/><text x="22.2789%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (65 samples, 0.10%)</title><rect x="22.0289%" y="1173" width="0.0966%" height="15" fill="rgb(219,113,52)" fg:x="14823" fg:w="65"/><text x="22.2789%" y="1183.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (65 samples, 0.10%)</title><rect x="22.0289%" y="1157" width="0.0966%" height="15" fill="rgb(214,7,15)" fg:x="14823" fg:w="65"/><text x="22.2789%" y="1167.50"></text></g><g><title>operator== (65 samples, 0.10%)</title><rect x="22.0289%" y="1141" width="0.0966%" height="15" fill="rgb(235,32,4)" fg:x="14823" fg:w="65"/><text x="22.2789%" y="1151.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (65 samples, 0.10%)</title><rect x="22.0289%" y="1125" width="0.0966%" height="15" fill="rgb(238,90,54)" fg:x="14823" fg:w="65"/><text x="22.2789%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (65 samples, 0.10%)</title><rect x="22.0289%" y="1109" width="0.0966%" height="15" fill="rgb(213,208,19)" fg:x="14823" fg:w="65"/><text x="22.2789%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (65 samples, 0.10%)</title><rect x="22.0289%" y="1093" width="0.0966%" height="15" fill="rgb(233,156,4)" fg:x="14823" fg:w="65"/><text x="22.2789%" y="1103.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.01%)</title><rect x="22.1582%" y="1125" width="0.0134%" height="15" fill="rgb(207,194,5)" fg:x="14910" fg:w="9"/><text x="22.4082%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (22 samples, 0.03%)</title><rect x="22.1507%" y="1157" width="0.0327%" height="15" fill="rgb(206,111,30)" fg:x="14905" fg:w="22"/><text x="22.4007%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (22 samples, 0.03%)</title><rect x="22.1507%" y="1141" width="0.0327%" height="15" fill="rgb(243,70,54)" fg:x="14905" fg:w="22"/><text x="22.4007%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="22.1715%" y="1125" width="0.0119%" height="15" fill="rgb(242,28,8)" fg:x="14919" fg:w="8"/><text x="22.4215%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (24 samples, 0.04%)</title><rect x="22.1507%" y="1189" width="0.0357%" height="15" fill="rgb(219,106,18)" fg:x="14905" fg:w="24"/><text x="22.4007%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (24 samples, 0.04%)</title><rect x="22.1507%" y="1173" width="0.0357%" height="15" fill="rgb(244,222,10)" fg:x="14905" fg:w="24"/><text x="22.4007%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (42 samples, 0.06%)</title><rect x="22.1255%" y="1205" width="0.0624%" height="15" fill="rgb(236,179,52)" fg:x="14888" fg:w="42"/><text x="22.3755%" y="1215.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1,965 samples, 2.92%)</title><rect x="19.2766%" y="1237" width="2.9202%" height="15" fill="rgb(213,23,39)" fg:x="12971" fg:w="1965"/><text x="19.5266%" y="1247.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1,965 samples, 2.92%)</title><rect x="19.2766%" y="1221" width="2.9202%" height="15" fill="rgb(238,48,10)" fg:x="12971" fg:w="1965"/><text x="19.5266%" y="1231.50">st..</text></g><g><title>SipHashUint256Extra (117 samples, 0.17%)</title><rect x="22.1998%" y="1221" width="0.1739%" height="15" fill="rgb(251,196,23)" fg:x="14938" fg:w="117"/><text x="22.4498%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (57 samples, 0.08%)</title><rect x="22.2889%" y="1205" width="0.0847%" height="15" fill="rgb(250,152,24)" fg:x="14998" fg:w="57"/><text x="22.5389%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (57 samples, 0.08%)</title><rect x="22.2889%" y="1189" width="0.0847%" height="15" fill="rgb(209,150,17)" fg:x="14998" fg:w="57"/><text x="22.5389%" y="1199.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (20 samples, 0.03%)</title><rect x="22.4346%" y="1157" width="0.0297%" height="15" fill="rgb(234,202,34)" fg:x="15096" fg:w="20"/><text x="22.6846%" y="1167.50"></text></g><g><title>Coin::DynamicMemoryUsage (14 samples, 0.02%)</title><rect x="22.4643%" y="1157" width="0.0208%" height="15" fill="rgb(253,148,53)" fg:x="15116" fg:w="14"/><text x="22.7143%" y="1167.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (9 samples, 0.01%)</title><rect x="22.4717%" y="1141" width="0.0134%" height="15" fill="rgb(218,129,16)" fg:x="15121" fg:w="9"/><text x="22.7217%" y="1151.50"></text></g><g><title>Coin::operator= (14 samples, 0.02%)</title><rect x="22.4881%" y="1157" width="0.0208%" height="15" fill="rgb(216,85,19)" fg:x="15132" fg:w="14"/><text x="22.7381%" y="1167.50"></text></g><g><title>CTxOut::operator= (10 samples, 0.01%)</title><rect x="22.4940%" y="1141" width="0.0149%" height="15" fill="rgb(235,228,7)" fg:x="15136" fg:w="10"/><text x="22.7440%" y="1151.50"></text></g><g><title>CScript::operator= (8 samples, 0.01%)</title><rect x="22.4970%" y="1125" width="0.0119%" height="15" fill="rgb(245,175,0)" fg:x="15138" fg:w="8"/><text x="22.7470%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (8 samples, 0.01%)</title><rect x="22.4970%" y="1109" width="0.0119%" height="15" fill="rgb(208,168,36)" fg:x="15138" fg:w="8"/><text x="22.7470%" y="1119.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (23 samples, 0.03%)</title><rect x="22.5089%" y="1157" width="0.0342%" height="15" fill="rgb(246,171,24)" fg:x="15146" fg:w="23"/><text x="22.7589%" y="1167.50"></text></g><g><title>CCoinsCacheEntry::Next (9 samples, 0.01%)</title><rect x="22.5297%" y="1141" width="0.0134%" height="15" fill="rgb(215,142,24)" fg:x="15160" fg:w="9"/><text x="22.7797%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (129 samples, 0.19%)</title><rect x="22.3870%" y="1173" width="0.1917%" height="15" fill="rgb(250,187,7)" fg:x="15064" fg:w="129"/><text x="22.6370%" y="1183.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (17 samples, 0.03%)</title><rect x="22.5535%" y="1157" width="0.0253%" height="15" fill="rgb(228,66,33)" fg:x="15176" fg:w="17"/><text x="22.8035%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (26 samples, 0.04%)</title><rect x="24.0857%" y="1157" width="0.0386%" height="15" fill="rgb(234,215,21)" fg:x="16207" fg:w="26"/><text x="24.3357%" y="1167.50"></text></g><g><title>ReadLE64 (26 samples, 0.04%)</title><rect x="24.0857%" y="1141" width="0.0386%" height="15" fill="rgb(222,191,20)" fg:x="16207" fg:w="26"/><text x="24.3357%" y="1151.50"></text></g><g><title>SipHashUint256Extra (26 samples, 0.04%)</title><rect x="24.0857%" y="1125" width="0.0386%" height="15" fill="rgb(245,79,54)" fg:x="16207" fg:w="26"/><text x="24.3357%" y="1135.50"></text></g><g><title>SipHashUint256Extra (1,739 samples, 2.58%)</title><rect x="22.5787%" y="1173" width="2.5844%" height="15" fill="rgb(240,10,37)" fg:x="15193" fg:w="1739"/><text x="22.8287%" y="1183.50">Si..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (699 samples, 1.04%)</title><rect x="24.1243%" y="1157" width="1.0388%" height="15" fill="rgb(214,192,32)" fg:x="16233" fg:w="699"/><text x="24.3743%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (699 samples, 1.04%)</title><rect x="24.1243%" y="1141" width="1.0388%" height="15" fill="rgb(209,36,54)" fg:x="16233" fg:w="699"/><text x="24.3743%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_remove_bucket_begin (7 samples, 0.01%)</title><rect x="25.1720%" y="1157" width="0.0104%" height="15" fill="rgb(220,10,11)" fg:x="16938" fg:w="7"/><text x="25.4220%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (18 samples, 0.03%)</title><rect x="25.1631%" y="1173" width="0.0268%" height="15" fill="rgb(221,106,17)" fg:x="16932" fg:w="18"/><text x="25.4131%" y="1183.50"></text></g><g><title>[[xt_MASQUERADE]] (9 samples, 0.01%)</title><rect x="25.4440%" y="1045" width="0.0134%" height="15" fill="rgb(251,142,44)" fg:x="17121" fg:w="9"/><text x="25.6940%" y="1055.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="25.4440%" y="1029" width="0.0134%" height="15" fill="rgb(238,13,15)" fg:x="17121" fg:w="9"/><text x="25.6940%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="25.4470%" y="1013" width="0.0104%" height="15" fill="rgb(208,107,27)" fg:x="17123" fg:w="7"/><text x="25.6970%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="25.4470%" y="997" width="0.0104%" height="15" fill="rgb(205,136,37)" fg:x="17123" fg:w="7"/><text x="25.6970%" y="1007.50"></text></g><g><title>[[igc]] (35 samples, 0.05%)</title><rect x="25.4380%" y="1061" width="0.0520%" height="15" fill="rgb(250,205,27)" fg:x="17117" fg:w="35"/><text x="25.6880%" y="1071.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="25.4574%" y="1045" width="0.0327%" height="15" fill="rgb(210,80,43)" fg:x="17130" fg:w="22"/><text x="25.7074%" y="1055.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="25.4588%" y="1029" width="0.0312%" height="15" fill="rgb(247,160,36)" fg:x="17131" fg:w="21"/><text x="25.7088%" y="1039.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="25.4692%" y="1013" width="0.0208%" height="15" fill="rgb(234,13,49)" fg:x="17138" fg:w="14"/><text x="25.7192%" y="1023.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="25.4752%" y="997" width="0.0149%" height="15" fill="rgb(234,122,0)" fg:x="17142" fg:w="10"/><text x="25.7252%" y="1007.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="25.4767%" y="981" width="0.0134%" height="15" fill="rgb(207,146,38)" fg:x="17143" fg:w="9"/><text x="25.7267%" y="991.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="25.4767%" y="965" width="0.0134%" height="15" fill="rgb(207,177,25)" fg:x="17143" fg:w="9"/><text x="25.7267%" y="975.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="25.4796%" y="949" width="0.0104%" height="15" fill="rgb(211,178,42)" fg:x="17145" fg:w="7"/><text x="25.7296%" y="959.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="25.4796%" y="933" width="0.0104%" height="15" fill="rgb(230,69,54)" fg:x="17145" fg:w="7"/><text x="25.7296%" y="943.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="25.4796%" y="917" width="0.0104%" height="15" fill="rgb(214,135,41)" fg:x="17145" fg:w="7"/><text x="25.7296%" y="927.50"></text></g><g><title>[unknown] (48 samples, 0.07%)</title><rect x="25.4321%" y="1157" width="0.0713%" height="15" fill="rgb(237,67,25)" fg:x="17113" fg:w="48"/><text x="25.6821%" y="1167.50"></text></g><g><title>[unknown] (48 samples, 0.07%)</title><rect x="25.4321%" y="1141" width="0.0713%" height="15" fill="rgb(222,189,50)" fg:x="17113" fg:w="48"/><text x="25.6821%" y="1151.50"></text></g><g><title>[unknown] (47 samples, 0.07%)</title><rect x="25.4336%" y="1125" width="0.0698%" height="15" fill="rgb(245,148,34)" fg:x="17114" fg:w="47"/><text x="25.6836%" y="1135.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="25.4351%" y="1109" width="0.0684%" height="15" fill="rgb(222,29,6)" fg:x="17115" fg:w="46"/><text x="25.6851%" y="1119.50"></text></g><g><title>[unknown] (45 samples, 0.07%)</title><rect x="25.4365%" y="1093" width="0.0669%" height="15" fill="rgb(221,189,43)" fg:x="17116" fg:w="45"/><text x="25.6865%" y="1103.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="25.4380%" y="1077" width="0.0654%" height="15" fill="rgb(207,36,27)" fg:x="17117" fg:w="44"/><text x="25.6880%" y="1087.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="25.4901%" y="1061" width="0.0134%" height="15" fill="rgb(217,90,24)" fg:x="17152" fg:w="9"/><text x="25.7401%" y="1071.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="25.4901%" y="1045" width="0.0134%" height="15" fill="rgb(224,66,35)" fg:x="17152" fg:w="9"/><text x="25.7401%" y="1055.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="25.4901%" y="1029" width="0.0134%" height="15" fill="rgb(221,13,50)" fg:x="17152" fg:w="9"/><text x="25.7401%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="25.4930%" y="1013" width="0.0104%" height="15" fill="rgb(236,68,49)" fg:x="17154" fg:w="7"/><text x="25.7430%" y="1023.50"></text></g><g><title>[[igc]] (13 samples, 0.02%)</title><rect x="25.5569%" y="997" width="0.0193%" height="15" fill="rgb(229,146,28)" fg:x="17197" fg:w="13"/><text x="25.8069%" y="1007.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="25.5599%" y="981" width="0.0163%" height="15" fill="rgb(225,31,38)" fg:x="17199" fg:w="11"/><text x="25.8099%" y="991.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="25.5644%" y="965" width="0.0119%" height="15" fill="rgb(250,208,3)" fg:x="17202" fg:w="8"/><text x="25.8144%" y="975.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="25.5658%" y="949" width="0.0104%" height="15" fill="rgb(246,54,23)" fg:x="17203" fg:w="7"/><text x="25.8158%" y="959.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="25.5554%" y="1093" width="0.0223%" height="15" fill="rgb(243,76,11)" fg:x="17196" fg:w="15"/><text x="25.8054%" y="1103.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="25.5554%" y="1077" width="0.0223%" height="15" fill="rgb(245,21,50)" fg:x="17196" fg:w="15"/><text x="25.8054%" y="1087.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="25.5554%" y="1061" width="0.0223%" height="15" fill="rgb(228,9,43)" fg:x="17196" fg:w="15"/><text x="25.8054%" y="1071.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="25.5554%" y="1045" width="0.0223%" height="15" fill="rgb(208,100,47)" fg:x="17196" fg:w="15"/><text x="25.8054%" y="1055.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="25.5554%" y="1029" width="0.0223%" height="15" fill="rgb(232,26,8)" fg:x="17196" fg:w="15"/><text x="25.8054%" y="1039.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="25.5569%" y="1013" width="0.0208%" height="15" fill="rgb(216,166,38)" fg:x="17197" fg:w="14"/><text x="25.8069%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.03%)</title><rect x="25.5777%" y="1093" width="0.0282%" height="15" fill="rgb(251,202,51)" fg:x="17211" fg:w="19"/><text x="25.8277%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (80 samples, 0.12%)</title><rect x="25.5034%" y="1157" width="0.1189%" height="15" fill="rgb(254,216,34)" fg:x="17161" fg:w="80"/><text x="25.7534%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (80 samples, 0.12%)</title><rect x="25.5034%" y="1141" width="0.1189%" height="15" fill="rgb(251,32,27)" fg:x="17161" fg:w="80"/><text x="25.7534%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (80 samples, 0.12%)</title><rect x="25.5034%" y="1125" width="0.1189%" height="15" fill="rgb(208,127,28)" fg:x="17161" fg:w="80"/><text x="25.7534%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (80 samples, 0.12%)</title><rect x="25.5034%" y="1109" width="0.1189%" height="15" fill="rgb(224,137,22)" fg:x="17161" fg:w="80"/><text x="25.7534%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (11 samples, 0.02%)</title><rect x="25.6060%" y="1093" width="0.0163%" height="15" fill="rgb(254,70,32)" fg:x="17230" fg:w="11"/><text x="25.8560%" y="1103.50"></text></g><g><title>[[igc]] (15 samples, 0.02%)</title><rect x="25.6283%" y="949" width="0.0223%" height="15" fill="rgb(229,75,37)" fg:x="17245" fg:w="15"/><text x="25.8783%" y="959.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="25.6342%" y="933" width="0.0163%" height="15" fill="rgb(252,64,23)" fg:x="17249" fg:w="11"/><text x="25.8842%" y="943.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="25.6372%" y="917" width="0.0134%" height="15" fill="rgb(232,162,48)" fg:x="17251" fg:w="9"/><text x="25.8872%" y="927.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="25.6387%" y="901" width="0.0119%" height="15" fill="rgb(246,160,12)" fg:x="17252" fg:w="8"/><text x="25.8887%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (316 samples, 0.47%)</title><rect x="25.1899%" y="1173" width="0.4696%" height="15" fill="rgb(247,166,0)" fg:x="16950" fg:w="316"/><text x="25.4399%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (25 samples, 0.04%)</title><rect x="25.6223%" y="1157" width="0.0372%" height="15" fill="rgb(249,219,21)" fg:x="17241" fg:w="25"/><text x="25.8723%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (25 samples, 0.04%)</title><rect x="25.6223%" y="1141" width="0.0372%" height="15" fill="rgb(205,209,3)" fg:x="17241" fg:w="25"/><text x="25.8723%" y="1151.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (25 samples, 0.04%)</title><rect x="25.6223%" y="1125" width="0.0372%" height="15" fill="rgb(243,44,1)" fg:x="17241" fg:w="25"/><text x="25.8723%" y="1135.50"></text></g><g><title>operator== (25 samples, 0.04%)</title><rect x="25.6223%" y="1109" width="0.0372%" height="15" fill="rgb(206,159,16)" fg:x="17241" fg:w="25"/><text x="25.8723%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (25 samples, 0.04%)</title><rect x="25.6223%" y="1093" width="0.0372%" height="15" fill="rgb(244,77,30)" fg:x="17241" fg:w="25"/><text x="25.8723%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (25 samples, 0.04%)</title><rect x="25.6223%" y="1077" width="0.0372%" height="15" fill="rgb(218,69,12)" fg:x="17241" fg:w="25"/><text x="25.8723%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (25 samples, 0.04%)</title><rect x="25.6223%" y="1061" width="0.0372%" height="15" fill="rgb(212,87,7)" fg:x="17241" fg:w="25"/><text x="25.8723%" y="1071.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="25.6253%" y="1045" width="0.0342%" height="15" fill="rgb(245,114,25)" fg:x="17243" fg:w="23"/><text x="25.8753%" y="1055.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="25.6268%" y="1029" width="0.0327%" height="15" fill="rgb(210,61,42)" fg:x="17244" fg:w="22"/><text x="25.8768%" y="1039.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="25.6283%" y="1013" width="0.0312%" height="15" fill="rgb(211,52,33)" fg:x="17245" fg:w="21"/><text x="25.8783%" y="1023.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="25.6283%" y="997" width="0.0312%" height="15" fill="rgb(234,58,33)" fg:x="17245" fg:w="21"/><text x="25.8783%" y="1007.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="25.6283%" y="981" width="0.0312%" height="15" fill="rgb(220,115,36)" fg:x="17245" fg:w="21"/><text x="25.8783%" y="991.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="25.6283%" y="965" width="0.0312%" height="15" fill="rgb(243,153,54)" fg:x="17245" fg:w="21"/><text x="25.8783%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (62 samples, 0.09%)</title><rect x="25.6639%" y="1173" width="0.0921%" height="15" fill="rgb(251,47,18)" fg:x="17269" fg:w="62"/><text x="25.9139%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (27 samples, 0.04%)</title><rect x="25.7159%" y="1157" width="0.0401%" height="15" fill="rgb(242,102,42)" fg:x="17304" fg:w="27"/><text x="25.9659%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (20 samples, 0.03%)</title><rect x="25.7263%" y="1141" width="0.0297%" height="15" fill="rgb(234,31,38)" fg:x="17311" fg:w="20"/><text x="25.9763%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (20 samples, 0.03%)</title><rect x="25.7263%" y="1125" width="0.0297%" height="15" fill="rgb(221,117,51)" fg:x="17311" fg:w="20"/><text x="25.9763%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,281 samples, 3.39%)</title><rect x="22.3870%" y="1189" width="3.3899%" height="15" fill="rgb(212,20,18)" fg:x="15064" fg:w="2281"/><text x="22.6370%" y="1199.50">std..</text></g><g><title>vtable for std::ios_base (14 samples, 0.02%)</title><rect x="25.7561%" y="1173" width="0.0208%" height="15" fill="rgb(245,133,36)" fg:x="17331" fg:w="14"/><text x="26.0061%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (10 samples, 0.01%)</title><rect x="25.7620%" y="1157" width="0.0149%" height="15" fill="rgb(212,6,19)" fg:x="17335" fg:w="10"/><text x="26.0120%" y="1167.50"></text></g><g><title>SipHashUint256Extra (111 samples, 0.16%)</title><rect x="25.7828%" y="1157" width="0.1650%" height="15" fill="rgb(218,1,36)" fg:x="17349" fg:w="111"/><text x="26.0328%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (45 samples, 0.07%)</title><rect x="25.8809%" y="1141" width="0.0669%" height="15" fill="rgb(246,84,54)" fg:x="17415" fg:w="45"/><text x="26.1309%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (45 samples, 0.07%)</title><rect x="25.8809%" y="1125" width="0.0669%" height="15" fill="rgb(242,110,6)" fg:x="17415" fg:w="45"/><text x="26.1309%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,400 samples, 3.57%)</title><rect x="22.3855%" y="1221" width="3.5667%" height="15" fill="rgb(214,47,5)" fg:x="15063" fg:w="2400"/><text x="22.6355%" y="1231.50">std:..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,399 samples, 3.57%)</title><rect x="22.3870%" y="1205" width="3.5652%" height="15" fill="rgb(218,159,25)" fg:x="15064" fg:w="2399"/><text x="22.6370%" y="1215.50">std:..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (118 samples, 0.18%)</title><rect x="25.7769%" y="1189" width="0.1754%" height="15" fill="rgb(215,211,28)" fg:x="17345" fg:w="118"/><text x="26.0269%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (118 samples, 0.18%)</title><rect x="25.7769%" y="1173" width="0.1754%" height="15" fill="rgb(238,59,32)" fg:x="17345" fg:w="118"/><text x="26.0269%" y="1183.50"></text></g><g><title>CCoinsViewCache::BatchWrite (7,412 samples, 11.02%)</title><rect x="14.9385%" y="1253" width="11.0152%" height="15" fill="rgb(226,82,3)" fg:x="10052" fg:w="7412"/><text x="15.1885%" y="1263.50">CCoinsViewCache:..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (2,528 samples, 3.76%)</title><rect x="22.1968%" y="1237" width="3.7569%" height="15" fill="rgb(240,164,32)" fg:x="14936" fg:w="2528"/><text x="22.4468%" y="1247.50">std:..</text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (47 samples, 0.07%)</title><rect x="25.9537%" y="1237" width="0.0698%" height="15" fill="rgb(232,46,7)" fg:x="17464" fg:w="47"/><text x="26.2037%" y="1247.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (47 samples, 0.07%)</title><rect x="25.9537%" y="1221" width="0.0698%" height="15" fill="rgb(229,129,53)" fg:x="17464" fg:w="47"/><text x="26.2037%" y="1231.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (47 samples, 0.07%)</title><rect x="25.9537%" y="1205" width="0.0698%" height="15" fill="rgb(234,188,29)" fg:x="17464" fg:w="47"/><text x="26.2037%" y="1215.50"></text></g><g><title>operator new (47 samples, 0.07%)</title><rect x="25.9537%" y="1189" width="0.0698%" height="15" fill="rgb(246,141,4)" fg:x="17464" fg:w="47"/><text x="26.2037%" y="1199.50"></text></g><g><title>__posix_memalign (47 samples, 0.07%)</title><rect x="25.9537%" y="1173" width="0.0698%" height="15" fill="rgb(229,23,39)" fg:x="17464" fg:w="47"/><text x="26.2037%" y="1183.50"></text></g><g><title>malloc (47 samples, 0.07%)</title><rect x="25.9537%" y="1157" width="0.0698%" height="15" fill="rgb(206,12,3)" fg:x="17464" fg:w="47"/><text x="26.2037%" y="1167.50"></text></g><g><title>_int_malloc (47 samples, 0.07%)</title><rect x="25.9537%" y="1141" width="0.0698%" height="15" fill="rgb(252,226,20)" fg:x="17464" fg:w="47"/><text x="26.2037%" y="1151.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (77 samples, 0.11%)</title><rect x="25.9537%" y="1253" width="0.1144%" height="15" fill="rgb(216,123,35)" fg:x="17464" fg:w="77"/><text x="26.2037%" y="1263.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (27 samples, 0.04%)</title><rect x="26.0280%" y="1237" width="0.0401%" height="15" fill="rgb(212,68,40)" fg:x="17514" fg:w="27"/><text x="26.2780%" y="1247.50"></text></g><g><title>cfree@GLIBC_2.2.5 (27 samples, 0.04%)</title><rect x="26.0280%" y="1221" width="0.0401%" height="15" fill="rgb(254,125,32)" fg:x="17514" fg:w="27"/><text x="26.2780%" y="1231.50"></text></g><g><title>_int_free (27 samples, 0.04%)</title><rect x="26.0280%" y="1205" width="0.0401%" height="15" fill="rgb(253,97,22)" fg:x="17514" fg:w="27"/><text x="26.2780%" y="1215.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (27 samples, 0.04%)</title><rect x="26.0280%" y="1189" width="0.0401%" height="15" fill="rgb(241,101,14)" fg:x="17514" fg:w="27"/><text x="26.2780%" y="1199.50"></text></g><g><title>malloc_consolidate (27 samples, 0.04%)</title><rect x="26.0280%" y="1173" width="0.0401%" height="15" fill="rgb(238,103,29)" fg:x="17514" fg:w="27"/><text x="26.2780%" y="1183.50"></text></g><g><title>SipHashUint256Extra (247 samples, 0.37%)</title><rect x="26.0682%" y="1253" width="0.3671%" height="15" fill="rgb(233,195,47)" fg:x="17541" fg:w="247"/><text x="26.3182%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (88 samples, 0.13%)</title><rect x="26.3044%" y="1237" width="0.1308%" height="15" fill="rgb(246,218,30)" fg:x="17700" fg:w="88"/><text x="26.5544%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (88 samples, 0.13%)</title><rect x="26.3044%" y="1221" width="0.1308%" height="15" fill="rgb(219,145,47)" fg:x="17700" fg:w="88"/><text x="26.5544%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="26.4754%" y="1237" width="0.0119%" height="15" fill="rgb(243,12,26)" fg:x="17815" fg:w="8"/><text x="26.7254%" y="1247.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="26.4754%" y="1221" width="0.0119%" height="15" fill="rgb(214,87,16)" fg:x="17815" fg:w="8"/><text x="26.7254%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.01%)</title><rect x="26.4754%" y="1205" width="0.0119%" height="15" fill="rgb(208,99,42)" fg:x="17815" fg:w="8"/><text x="26.7254%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.01%)</title><rect x="26.4754%" y="1189" width="0.0119%" height="15" fill="rgb(253,99,2)" fg:x="17815" fg:w="8"/><text x="26.7254%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (38 samples, 0.06%)</title><rect x="26.4367%" y="1253" width="0.0565%" height="15" fill="rgb(220,168,23)" fg:x="17789" fg:w="38"/><text x="26.6867%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (27 samples, 0.04%)</title><rect x="26.4932%" y="1253" width="0.0401%" height="15" fill="rgb(242,38,24)" fg:x="17827" fg:w="27"/><text x="26.7432%" y="1263.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (9 samples, 0.01%)</title><rect x="26.5497%" y="1189" width="0.0134%" height="15" fill="rgb(225,182,9)" fg:x="17865" fg:w="9"/><text x="26.7997%" y="1199.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (9 samples, 0.01%)</title><rect x="26.5497%" y="1173" width="0.0134%" height="15" fill="rgb(243,178,37)" fg:x="17865" fg:w="9"/><text x="26.7997%" y="1183.50"></text></g><g><title>decltype  (10 samples, 0.01%)</title><rect x="26.5497%" y="1237" width="0.0149%" height="15" fill="rgb(232,139,19)" fg:x="17865" fg:w="10"/><text x="26.7997%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (10 samples, 0.01%)</title><rect x="26.5497%" y="1221" width="0.0149%" height="15" fill="rgb(225,201,24)" fg:x="17865" fg:w="10"/><text x="26.7997%" y="1231.50"></text></g><g><title>decltype  (10 samples, 0.01%)</title><rect x="26.5497%" y="1205" width="0.0149%" height="15" fill="rgb(221,47,46)" fg:x="17865" fg:w="10"/><text x="26.7997%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (22 samples, 0.03%)</title><rect x="26.5363%" y="1253" width="0.0327%" height="15" fill="rgb(249,23,13)" fg:x="17856" fg:w="22"/><text x="26.7863%" y="1263.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (9 samples, 0.01%)</title><rect x="26.5824%" y="1205" width="0.0134%" height="15" fill="rgb(219,9,5)" fg:x="17887" fg:w="9"/><text x="26.8324%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (20 samples, 0.03%)</title><rect x="26.5957%" y="1189" width="0.0297%" height="15" fill="rgb(254,171,16)" fg:x="17896" fg:w="20"/><text x="26.8457%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (20 samples, 0.03%)</title><rect x="26.5957%" y="1173" width="0.0297%" height="15" fill="rgb(230,171,20)" fg:x="17896" fg:w="20"/><text x="26.8457%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (20 samples, 0.03%)</title><rect x="26.5957%" y="1157" width="0.0297%" height="15" fill="rgb(210,71,41)" fg:x="17896" fg:w="20"/><text x="26.8457%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (16 samples, 0.02%)</title><rect x="26.6017%" y="1141" width="0.0238%" height="15" fill="rgb(206,173,20)" fg:x="17900" fg:w="16"/><text x="26.8517%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (16 samples, 0.02%)</title><rect x="26.6017%" y="1125" width="0.0238%" height="15" fill="rgb(233,88,34)" fg:x="17900" fg:w="16"/><text x="26.8517%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (16 samples, 0.02%)</title><rect x="26.6017%" y="1109" width="0.0238%" height="15" fill="rgb(223,209,46)" fg:x="17900" fg:w="16"/><text x="26.8517%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (26 samples, 0.04%)</title><rect x="26.6448%" y="1077" width="0.0386%" height="15" fill="rgb(250,43,18)" fg:x="17929" fg:w="26"/><text x="26.8948%" y="1087.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (40 samples, 0.06%)</title><rect x="26.6255%" y="1093" width="0.0594%" height="15" fill="rgb(208,13,10)" fg:x="17916" fg:w="40"/><text x="26.8755%" y="1103.50"></text></g><g><title>CCoinsViewCache::Flush (7,920 samples, 11.77%)</title><rect x="14.9385%" y="1269" width="11.7701%" height="15" fill="rgb(212,200,36)" fg:x="10052" fg:w="7920"/><text x="15.1885%" y="1279.50">CCoinsViewCache::..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (94 samples, 0.14%)</title><rect x="26.5690%" y="1253" width="0.1397%" height="15" fill="rgb(225,90,30)" fg:x="17878" fg:w="94"/><text x="26.8190%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (94 samples, 0.14%)</title><rect x="26.5690%" y="1237" width="0.1397%" height="15" fill="rgb(236,182,39)" fg:x="17878" fg:w="94"/><text x="26.8190%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (90 samples, 0.13%)</title><rect x="26.5749%" y="1221" width="0.1338%" height="15" fill="rgb(212,144,35)" fg:x="17882" fg:w="90"/><text x="26.8249%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (76 samples, 0.11%)</title><rect x="26.5957%" y="1205" width="0.1129%" height="15" fill="rgb(228,63,44)" fg:x="17896" fg:w="76"/><text x="26.8457%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="26.6255%" y="1189" width="0.0832%" height="15" fill="rgb(228,109,6)" fg:x="17916" fg:w="56"/><text x="26.8755%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="26.6255%" y="1173" width="0.0832%" height="15" fill="rgb(238,117,24)" fg:x="17916" fg:w="56"/><text x="26.8755%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="26.6255%" y="1157" width="0.0832%" height="15" fill="rgb(242,26,26)" fg:x="17916" fg:w="56"/><text x="26.8755%" y="1167.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (56 samples, 0.08%)</title><rect x="26.6255%" y="1141" width="0.0832%" height="15" fill="rgb(221,92,48)" fg:x="17916" fg:w="56"/><text x="26.8755%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (56 samples, 0.08%)</title><rect x="26.6255%" y="1125" width="0.0832%" height="15" fill="rgb(209,209,32)" fg:x="17916" fg:w="56"/><text x="26.8755%" y="1135.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (56 samples, 0.08%)</title><rect x="26.6255%" y="1109" width="0.0832%" height="15" fill="rgb(221,70,22)" fg:x="17916" fg:w="56"/><text x="26.8755%" y="1119.50"></text></g><g><title>Coin::~Coin (16 samples, 0.02%)</title><rect x="26.6849%" y="1093" width="0.0238%" height="15" fill="rgb(248,145,5)" fg:x="17956" fg:w="16"/><text x="26.9349%" y="1103.50"></text></g><g><title>CTxOut::~CTxOut (16 samples, 0.02%)</title><rect x="26.6849%" y="1077" width="0.0238%" height="15" fill="rgb(226,116,26)" fg:x="17956" fg:w="16"/><text x="26.9349%" y="1087.50"></text></g><g><title>CScript::~CScript (16 samples, 0.02%)</title><rect x="26.6849%" y="1061" width="0.0238%" height="15" fill="rgb(244,5,17)" fg:x="17956" fg:w="16"/><text x="26.9349%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (16 samples, 0.02%)</title><rect x="26.6849%" y="1045" width="0.0238%" height="15" fill="rgb(252,159,33)" fg:x="17956" fg:w="16"/><text x="26.9349%" y="1055.50"></text></g><g><title>CScript::IsWitnessProgram (14 samples, 0.02%)</title><rect x="26.7116%" y="1269" width="0.0208%" height="15" fill="rgb(206,71,0)" fg:x="17974" fg:w="14"/><text x="26.9616%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1253" width="0.0134%" height="15" fill="rgb(233,118,54)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1263.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1237" width="0.0134%" height="15" fill="rgb(234,83,48)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1247.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1221" width="0.0134%" height="15" fill="rgb(228,3,54)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1231.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1205" width="0.0134%" height="15" fill="rgb(226,155,13)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1189" width="0.0134%" height="15" fill="rgb(241,28,37)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1199.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1173" width="0.0134%" height="15" fill="rgb(233,93,10)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1183.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1157" width="0.0134%" height="15" fill="rgb(225,113,19)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1141" width="0.0134%" height="15" fill="rgb(241,2,18)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1125" width="0.0134%" height="15" fill="rgb(228,207,21)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="26.7191%" y="1109" width="0.0134%" height="15" fill="rgb(213,211,35)" fg:x="17979" fg:w="9"/><text x="26.9691%" y="1119.50"></text></g><g><title>CTxMemPool::removeConflicts (11 samples, 0.02%)</title><rect x="26.7339%" y="1269" width="0.0163%" height="15" fill="rgb(209,83,10)" fg:x="17989" fg:w="11"/><text x="26.9839%" y="1279.50"></text></g><g><title>CTxMemPool::removeConflicts (7 samples, 0.01%)</title><rect x="26.7547%" y="1205" width="0.0104%" height="15" fill="rgb(209,164,1)" fg:x="18003" fg:w="7"/><text x="27.0047%" y="1215.50"></text></g><g><title>CTxMemPool::removeConflicts (21 samples, 0.03%)</title><rect x="26.7518%" y="1253" width="0.0312%" height="15" fill="rgb(213,184,43)" fg:x="18001" fg:w="21"/><text x="27.0018%" y="1263.50"></text></g><g><title>indirectmap&lt;COutPoint, CTransaction const*&gt;::find (20 samples, 0.03%)</title><rect x="26.7533%" y="1237" width="0.0297%" height="15" fill="rgb(231,61,34)" fg:x="18002" fg:w="20"/><text x="27.0033%" y="1247.50"></text></g><g><title>std::map&lt;COutPoint const*, CTransaction const*, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (20 samples, 0.03%)</title><rect x="26.7533%" y="1221" width="0.0297%" height="15" fill="rgb(235,75,3)" fg:x="18002" fg:w="20"/><text x="27.0033%" y="1231.50"></text></g><g><title>SipHashUint256 (192 samples, 0.29%)</title><rect x="26.7830%" y="1253" width="0.2853%" height="15" fill="rgb(220,106,47)" fg:x="18022" fg:w="192"/><text x="27.0330%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (74 samples, 0.11%)</title><rect x="26.9583%" y="1237" width="0.1100%" height="15" fill="rgb(210,196,33)" fg:x="18140" fg:w="74"/><text x="27.2083%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (74 samples, 0.11%)</title><rect x="26.9583%" y="1221" width="0.1100%" height="15" fill="rgb(229,154,42)" fg:x="18140" fg:w="74"/><text x="27.2083%" y="1231.50"></text></g><g><title>SipHashUint256 (7 samples, 0.01%)</title><rect x="27.0847%" y="1173" width="0.0104%" height="15" fill="rgb(228,114,26)" fg:x="18225" fg:w="7"/><text x="27.3347%" y="1183.50"></text></g><g><title>SaltedTxidHasher::operator (18 samples, 0.03%)</title><rect x="27.0787%" y="1189" width="0.0268%" height="15" fill="rgb(208,144,1)" fg:x="18221" fg:w="18"/><text x="27.3287%" y="1199.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt; &gt; (24 samples, 0.04%)</title><rect x="27.0772%" y="1253" width="0.0357%" height="15" fill="rgb(239,112,37)" fg:x="18220" fg:w="24"/><text x="27.3272%" y="1263.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (24 samples, 0.04%)</title><rect x="27.0772%" y="1237" width="0.0357%" height="15" fill="rgb(210,96,50)" fg:x="18220" fg:w="24"/><text x="27.3272%" y="1247.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (24 samples, 0.04%)</title><rect x="27.0772%" y="1221" width="0.0357%" height="15" fill="rgb(222,178,2)" fg:x="18220" fg:w="24"/><text x="27.3272%" y="1231.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;uint256, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (24 samples, 0.04%)</title><rect x="27.0772%" y="1205" width="0.0357%" height="15" fill="rgb(226,74,18)" fg:x="18220" fg:w="24"/><text x="27.3272%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (8 samples, 0.01%)</title><rect x="27.1129%" y="1253" width="0.0119%" height="15" fill="rgb(225,67,54)" fg:x="18244" fg:w="8"/><text x="27.3629%" y="1263.50"></text></g><g><title>SipHashUint256 (15 samples, 0.02%)</title><rect x="27.1278%" y="1237" width="0.0223%" height="15" fill="rgb(251,92,32)" fg:x="18254" fg:w="15"/><text x="27.3778%" y="1247.50"></text></g><g><title>SipHashUint256 (12 samples, 0.02%)</title><rect x="27.1575%" y="1205" width="0.0178%" height="15" fill="rgb(228,149,22)" fg:x="18274" fg:w="12"/><text x="27.4075%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (25 samples, 0.04%)</title><rect x="27.1545%" y="1237" width="0.0372%" height="15" fill="rgb(243,54,13)" fg:x="18272" fg:w="25"/><text x="27.4045%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (25 samples, 0.04%)</title><rect x="27.1545%" y="1221" width="0.0372%" height="15" fill="rgb(243,180,28)" fg:x="18272" fg:w="25"/><text x="27.4045%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (8 samples, 0.01%)</title><rect x="27.1798%" y="1205" width="0.0119%" height="15" fill="rgb(208,167,24)" fg:x="18289" fg:w="8"/><text x="27.4298%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (55 samples, 0.08%)</title><rect x="27.1248%" y="1253" width="0.0817%" height="15" fill="rgb(245,73,45)" fg:x="18252" fg:w="55"/><text x="27.3748%" y="1263.50"></text></g><g><title>CTxMemPool::removeForBlock (310 samples, 0.46%)</title><rect x="26.7503%" y="1269" width="0.4607%" height="15" fill="rgb(237,203,48)" fg:x="18000" fg:w="310"/><text x="27.0003%" y="1279.50"></text></g><g><title>Coin::Coin (76 samples, 0.11%)</title><rect x="27.2333%" y="1221" width="0.1129%" height="15" fill="rgb(211,197,16)" fg:x="18325" fg:w="76"/><text x="27.4833%" y="1231.50"></text></g><g><title>CTxOut::CTxOut (75 samples, 0.11%)</title><rect x="27.2348%" y="1205" width="0.1115%" height="15" fill="rgb(243,99,51)" fg:x="18326" fg:w="75"/><text x="27.4848%" y="1215.50"></text></g><g><title>CScript::CScript (75 samples, 0.11%)</title><rect x="27.2348%" y="1189" width="0.1115%" height="15" fill="rgb(215,123,29)" fg:x="18326" fg:w="75"/><text x="27.4848%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (75 samples, 0.11%)</title><rect x="27.2348%" y="1173" width="0.1115%" height="15" fill="rgb(239,186,37)" fg:x="18326" fg:w="75"/><text x="27.4848%" y="1183.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (66 samples, 0.10%)</title><rect x="27.2481%" y="1157" width="0.0981%" height="15" fill="rgb(252,136,39)" fg:x="18335" fg:w="66"/><text x="27.4981%" y="1167.50"></text></g><g><title>AddCoins (88 samples, 0.13%)</title><rect x="27.2184%" y="1237" width="0.1308%" height="15" fill="rgb(223,213,32)" fg:x="18315" fg:w="88"/><text x="27.4684%" y="1247.50"></text></g><g><title>AddCoins (9 samples, 0.01%)</title><rect x="27.3715%" y="1173" width="0.0134%" height="15" fill="rgb(233,115,5)" fg:x="18418" fg:w="9"/><text x="27.6215%" y="1183.50"></text></g><g><title>SipHashUint256Extra (38 samples, 0.06%)</title><rect x="27.3908%" y="1173" width="0.0565%" height="15" fill="rgb(207,226,44)" fg:x="18431" fg:w="38"/><text x="27.6408%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="27.4324%" y="1157" width="0.0149%" height="15" fill="rgb(208,126,0)" fg:x="18459" fg:w="10"/><text x="27.6824%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="27.4324%" y="1141" width="0.0149%" height="15" fill="rgb(244,66,21)" fg:x="18459" fg:w="10"/><text x="27.6824%" y="1151.50"></text></g><g><title>AddCoins (8 samples, 0.01%)</title><rect x="27.4607%" y="1157" width="0.0119%" height="15" fill="rgb(222,97,12)" fg:x="18478" fg:w="8"/><text x="27.7107%" y="1167.50"></text></g><g><title>CCoinsViewCache::AddCoin (15 samples, 0.02%)</title><rect x="27.4725%" y="1157" width="0.0223%" height="15" fill="rgb(219,213,19)" fg:x="18486" fg:w="15"/><text x="27.7225%" y="1167.50"></text></g><g><title>SipHashUint256Extra (96 samples, 0.14%)</title><rect x="27.4948%" y="1157" width="0.1427%" height="15" fill="rgb(252,169,30)" fg:x="18501" fg:w="96"/><text x="27.7448%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (27 samples, 0.04%)</title><rect x="27.5974%" y="1141" width="0.0401%" height="15" fill="rgb(206,32,51)" fg:x="18570" fg:w="27"/><text x="27.8474%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (27 samples, 0.04%)</title><rect x="27.5974%" y="1125" width="0.0401%" height="15" fill="rgb(250,172,42)" fg:x="18570" fg:w="27"/><text x="27.8474%" y="1135.50"></text></g><g><title>CCoinsViewCache::AddCoin (7 samples, 0.01%)</title><rect x="27.6434%" y="1077" width="0.0104%" height="15" fill="rgb(209,34,43)" fg:x="18601" fg:w="7"/><text x="27.8934%" y="1087.50"></text></g><g><title>SipHashUint256Extra (51 samples, 0.08%)</title><rect x="27.6539%" y="1077" width="0.0758%" height="15" fill="rgb(223,11,35)" fg:x="18608" fg:w="51"/><text x="27.9039%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (13 samples, 0.02%)</title><rect x="27.7103%" y="1061" width="0.0193%" height="15" fill="rgb(251,219,26)" fg:x="18646" fg:w="13"/><text x="27.9603%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (13 samples, 0.02%)</title><rect x="27.7103%" y="1045" width="0.0193%" height="15" fill="rgb(231,119,3)" fg:x="18646" fg:w="13"/><text x="27.9603%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="27.7311%" y="1077" width="0.0104%" height="15" fill="rgb(216,97,11)" fg:x="18660" fg:w="7"/><text x="27.9811%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (71 samples, 0.11%)</title><rect x="27.6405%" y="1141" width="0.1055%" height="15" fill="rgb(223,59,9)" fg:x="18599" fg:w="71"/><text x="27.8905%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (71 samples, 0.11%)</title><rect x="27.6405%" y="1125" width="0.1055%" height="15" fill="rgb(233,93,31)" fg:x="18599" fg:w="71"/><text x="27.8905%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (71 samples, 0.11%)</title><rect x="27.6405%" y="1109" width="0.1055%" height="15" fill="rgb(239,81,33)" fg:x="18599" fg:w="71"/><text x="27.8905%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (71 samples, 0.11%)</title><rect x="27.6405%" y="1093" width="0.1055%" height="15" fill="rgb(213,120,34)" fg:x="18599" fg:w="71"/><text x="27.8905%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (75 samples, 0.11%)</title><rect x="27.6375%" y="1157" width="0.1115%" height="15" fill="rgb(243,49,53)" fg:x="18597" fg:w="75"/><text x="27.8875%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (203 samples, 0.30%)</title><rect x="27.4562%" y="1173" width="0.3017%" height="15" fill="rgb(247,216,33)" fg:x="18475" fg:w="203"/><text x="27.7062%" y="1183.50"></text></g><g><title>SipHashUint256Extra (76 samples, 0.11%)</title><rect x="27.7579%" y="1157" width="0.1129%" height="15" fill="rgb(226,26,14)" fg:x="18678" fg:w="76"/><text x="28.0079%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (23 samples, 0.03%)</title><rect x="27.8366%" y="1141" width="0.0342%" height="15" fill="rgb(215,49,53)" fg:x="18731" fg:w="23"/><text x="28.0866%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (23 samples, 0.03%)</title><rect x="27.8366%" y="1125" width="0.0342%" height="15" fill="rgb(245,162,40)" fg:x="18731" fg:w="23"/><text x="28.0866%" y="1135.50"></text></g><g><title>CCoinsViewCache::AddCoin (10 samples, 0.01%)</title><rect x="27.8753%" y="1077" width="0.0149%" height="15" fill="rgb(229,68,17)" fg:x="18757" fg:w="10"/><text x="28.1253%" y="1087.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.02%)</title><rect x="27.8901%" y="1077" width="0.0223%" height="15" fill="rgb(213,182,10)" fg:x="18767" fg:w="15"/><text x="28.1401%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="27.9020%" y="1061" width="0.0104%" height="15" fill="rgb(245,125,30)" fg:x="18775" fg:w="7"/><text x="28.1520%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.01%)</title><rect x="27.9020%" y="1045" width="0.0104%" height="15" fill="rgb(232,202,2)" fg:x="18775" fg:w="7"/><text x="28.1520%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (33 samples, 0.05%)</title><rect x="27.8723%" y="1157" width="0.0490%" height="15" fill="rgb(237,140,51)" fg:x="18755" fg:w="33"/><text x="28.1223%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (31 samples, 0.05%)</title><rect x="27.8753%" y="1141" width="0.0461%" height="15" fill="rgb(236,157,25)" fg:x="18757" fg:w="31"/><text x="28.1253%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (31 samples, 0.05%)</title><rect x="27.8753%" y="1125" width="0.0461%" height="15" fill="rgb(219,209,0)" fg:x="18757" fg:w="31"/><text x="28.1253%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (31 samples, 0.05%)</title><rect x="27.8753%" y="1109" width="0.0461%" height="15" fill="rgb(240,116,54)" fg:x="18757" fg:w="31"/><text x="28.1253%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (31 samples, 0.05%)</title><rect x="27.8753%" y="1093" width="0.0461%" height="15" fill="rgb(216,10,36)" fg:x="18757" fg:w="31"/><text x="28.1253%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (7 samples, 0.01%)</title><rect x="27.9511%" y="1125" width="0.0104%" height="15" fill="rgb(222,72,44)" fg:x="18808" fg:w="7"/><text x="28.2011%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (7 samples, 0.01%)</title><rect x="27.9511%" y="1109" width="0.0104%" height="15" fill="rgb(232,159,9)" fg:x="18808" fg:w="7"/><text x="28.2011%" y="1119.50"></text></g><g><title>SipHashUint256Extra (130 samples, 0.19%)</title><rect x="27.9630%" y="1077" width="0.1932%" height="15" fill="rgb(210,39,32)" fg:x="18816" fg:w="130"/><text x="28.2130%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (61 samples, 0.09%)</title><rect x="28.0655%" y="1061" width="0.0907%" height="15" fill="rgb(216,194,45)" fg:x="18885" fg:w="61"/><text x="28.3155%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (61 samples, 0.09%)</title><rect x="28.0655%" y="1045" width="0.0907%" height="15" fill="rgb(218,18,35)" fg:x="18885" fg:w="61"/><text x="28.3155%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (143 samples, 0.21%)</title><rect x="27.9615%" y="1125" width="0.2125%" height="15" fill="rgb(207,83,51)" fg:x="18815" fg:w="143"/><text x="28.2115%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (143 samples, 0.21%)</title><rect x="27.9615%" y="1109" width="0.2125%" height="15" fill="rgb(225,63,43)" fg:x="18815" fg:w="143"/><text x="28.2115%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (143 samples, 0.21%)</title><rect x="27.9615%" y="1093" width="0.2125%" height="15" fill="rgb(207,57,36)" fg:x="18815" fg:w="143"/><text x="28.2115%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (12 samples, 0.02%)</title><rect x="28.1562%" y="1077" width="0.0178%" height="15" fill="rgb(216,99,33)" fg:x="18946" fg:w="12"/><text x="28.4062%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (12 samples, 0.02%)</title><rect x="28.1562%" y="1061" width="0.0178%" height="15" fill="rgb(225,42,16)" fg:x="18946" fg:w="12"/><text x="28.4062%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (281 samples, 0.42%)</title><rect x="27.7579%" y="1173" width="0.4176%" height="15" fill="rgb(220,201,45)" fg:x="18678" fg:w="281"/><text x="28.0079%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (171 samples, 0.25%)</title><rect x="27.9214%" y="1157" width="0.2541%" height="15" fill="rgb(225,33,4)" fg:x="18788" fg:w="171"/><text x="28.1714%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (171 samples, 0.25%)</title><rect x="27.9214%" y="1141" width="0.2541%" height="15" fill="rgb(224,33,50)" fg:x="18788" fg:w="171"/><text x="28.1714%" y="1151.50"></text></g><g><title>Coin::Coin (62 samples, 0.09%)</title><rect x="28.1785%" y="1141" width="0.0921%" height="15" fill="rgb(246,198,51)" fg:x="18961" fg:w="62"/><text x="28.4285%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (62 samples, 0.09%)</title><rect x="28.1785%" y="1125" width="0.0921%" height="15" fill="rgb(205,22,4)" fg:x="18961" fg:w="62"/><text x="28.4285%" y="1135.50"></text></g><g><title>CScript::CScript (62 samples, 0.09%)</title><rect x="28.1785%" y="1109" width="0.0921%" height="15" fill="rgb(206,3,8)" fg:x="18961" fg:w="62"/><text x="28.4285%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (62 samples, 0.09%)</title><rect x="28.1785%" y="1093" width="0.0921%" height="15" fill="rgb(251,23,15)" fg:x="18961" fg:w="62"/><text x="28.4285%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (62 samples, 0.09%)</title><rect x="28.1785%" y="1077" width="0.0921%" height="15" fill="rgb(252,88,28)" fg:x="18961" fg:w="62"/><text x="28.4285%" y="1087.50"></text></g><g><title>AddCoins (66 samples, 0.10%)</title><rect x="28.1755%" y="1157" width="0.0981%" height="15" fill="rgb(212,127,14)" fg:x="18959" fg:w="66"/><text x="28.4255%" y="1167.50"></text></g><g><title>decltype  (36 samples, 0.05%)</title><rect x="28.2780%" y="1141" width="0.0535%" height="15" fill="rgb(247,145,37)" fg:x="19028" fg:w="36"/><text x="28.5280%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (36 samples, 0.05%)</title><rect x="28.2780%" y="1125" width="0.0535%" height="15" fill="rgb(209,117,53)" fg:x="19028" fg:w="36"/><text x="28.5280%" y="1135.50"></text></g><g><title>decltype  (36 samples, 0.05%)</title><rect x="28.2780%" y="1109" width="0.0535%" height="15" fill="rgb(212,90,42)" fg:x="19028" fg:w="36"/><text x="28.5280%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (36 samples, 0.05%)</title><rect x="28.2780%" y="1093" width="0.0535%" height="15" fill="rgb(218,164,37)" fg:x="19028" fg:w="36"/><text x="28.5280%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (36 samples, 0.05%)</title><rect x="28.2780%" y="1077" width="0.0535%" height="15" fill="rgb(246,65,34)" fg:x="19028" fg:w="36"/><text x="28.5280%" y="1087.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="28.2780%" y="1061" width="0.0535%" height="15" fill="rgb(231,100,33)" fg:x="19028" fg:w="36"/><text x="28.5280%" y="1071.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="28.2795%" y="1045" width="0.0520%" height="15" fill="rgb(228,126,14)" fg:x="19029" fg:w="35"/><text x="28.5295%" y="1055.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="28.2810%" y="1029" width="0.0505%" height="15" fill="rgb(215,173,21)" fg:x="19030" fg:w="34"/><text x="28.5310%" y="1039.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="28.2810%" y="1013" width="0.0505%" height="15" fill="rgb(210,6,40)" fg:x="19030" fg:w="34"/><text x="28.5310%" y="1023.50"></text></g><g><title>[unknown] (31 samples, 0.05%)</title><rect x="28.2855%" y="997" width="0.0461%" height="15" fill="rgb(212,48,18)" fg:x="19033" fg:w="31"/><text x="28.5355%" y="1007.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="28.2899%" y="981" width="0.0416%" height="15" fill="rgb(230,214,11)" fg:x="19036" fg:w="28"/><text x="28.5399%" y="991.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="28.2914%" y="965" width="0.0401%" height="15" fill="rgb(254,105,39)" fg:x="19037" fg:w="27"/><text x="28.5414%" y="975.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="28.3018%" y="949" width="0.0297%" height="15" fill="rgb(245,158,5)" fg:x="19044" fg:w="20"/><text x="28.5518%" y="959.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="28.3092%" y="933" width="0.0223%" height="15" fill="rgb(249,208,11)" fg:x="19049" fg:w="15"/><text x="28.5592%" y="943.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="28.3167%" y="917" width="0.0149%" height="15" fill="rgb(210,39,28)" fg:x="19054" fg:w="10"/><text x="28.5667%" y="927.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="28.3196%" y="901" width="0.0119%" height="15" fill="rgb(211,56,53)" fg:x="19056" fg:w="8"/><text x="28.5696%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (112 samples, 0.17%)</title><rect x="28.1755%" y="1173" width="0.1664%" height="15" fill="rgb(226,201,30)" fg:x="18959" fg:w="112"/><text x="28.4255%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (43 samples, 0.06%)</title><rect x="28.2780%" y="1157" width="0.0639%" height="15" fill="rgb(239,101,34)" fg:x="19028" fg:w="43"/><text x="28.5280%" y="1167.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (7 samples, 0.01%)</title><rect x="28.3508%" y="1173" width="0.0104%" height="15" fill="rgb(226,209,5)" fg:x="19077" fg:w="7"/><text x="28.6008%" y="1183.50"></text></g><g><title>CCoinsViewCache::AddCoin (682 samples, 1.01%)</title><rect x="27.3492%" y="1237" width="1.0135%" height="15" fill="rgb(250,105,47)" fg:x="18403" fg:w="682"/><text x="27.5992%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (673 samples, 1.00%)</title><rect x="27.3626%" y="1221" width="1.0002%" height="15" fill="rgb(230,72,3)" fg:x="18412" fg:w="673"/><text x="27.6126%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (673 samples, 1.00%)</title><rect x="27.3626%" y="1205" width="1.0002%" height="15" fill="rgb(232,218,39)" fg:x="18412" fg:w="673"/><text x="27.6126%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (673 samples, 1.00%)</title><rect x="27.3626%" y="1189" width="1.0002%" height="15" fill="rgb(248,166,6)" fg:x="18412" fg:w="673"/><text x="27.6126%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (12 samples, 0.02%)</title><rect x="28.3746%" y="1173" width="0.0178%" height="15" fill="rgb(247,89,20)" fg:x="19093" fg:w="12"/><text x="28.6246%" y="1183.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="28.3806%" y="1157" width="0.0119%" height="15" fill="rgb(248,130,54)" fg:x="19097" fg:w="8"/><text x="28.6306%" y="1167.50"></text></g><g><title>Coin::Coin (30 samples, 0.04%)</title><rect x="28.3672%" y="1237" width="0.0446%" height="15" fill="rgb(234,196,4)" fg:x="19088" fg:w="30"/><text x="28.6172%" y="1247.50"></text></g><g><title>CTxOut::CTxOut (29 samples, 0.04%)</title><rect x="28.3687%" y="1221" width="0.0431%" height="15" fill="rgb(250,143,31)" fg:x="19089" fg:w="29"/><text x="28.6187%" y="1231.50"></text></g><g><title>CScript::CScript (27 samples, 0.04%)</title><rect x="28.3717%" y="1205" width="0.0401%" height="15" fill="rgb(211,110,34)" fg:x="19091" fg:w="27"/><text x="28.6217%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (27 samples, 0.04%)</title><rect x="28.3717%" y="1189" width="0.0401%" height="15" fill="rgb(215,124,48)" fg:x="19091" fg:w="27"/><text x="28.6217%" y="1199.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (9 samples, 0.01%)</title><rect x="28.3984%" y="1173" width="0.0134%" height="15" fill="rgb(216,46,13)" fg:x="19109" fg:w="9"/><text x="28.6484%" y="1183.50"></text></g><g><title>SipHashUint256Extra (419 samples, 0.62%)</title><rect x="28.4133%" y="1237" width="0.6227%" height="15" fill="rgb(205,184,25)" fg:x="19119" fg:w="419"/><text x="28.6633%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (155 samples, 0.23%)</title><rect x="28.8056%" y="1221" width="0.2303%" height="15" fill="rgb(228,1,10)" fg:x="19383" fg:w="155"/><text x="29.0556%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (155 samples, 0.23%)</title><rect x="28.8056%" y="1205" width="0.2303%" height="15" fill="rgb(213,116,27)" fg:x="19383" fg:w="155"/><text x="29.0556%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (59 samples, 0.09%)</title><rect x="29.0389%" y="1237" width="0.0877%" height="15" fill="rgb(241,95,50)" fg:x="19540" fg:w="59"/><text x="29.2889%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (12 samples, 0.02%)</title><rect x="29.1266%" y="1237" width="0.0178%" height="15" fill="rgb(238,48,32)" fg:x="19599" fg:w="12"/><text x="29.3766%" y="1247.50"></text></g><g><title>AddCoins (1,307 samples, 1.94%)</title><rect x="27.2140%" y="1253" width="1.9424%" height="15" fill="rgb(235,113,49)" fg:x="18312" fg:w="1307"/><text x="27.4640%" y="1263.50">A..</text></g><g><title>CBlockIndex::GetAncestor (7 samples, 0.01%)</title><rect x="29.1578%" y="1253" width="0.0104%" height="15" fill="rgb(205,127,43)" fg:x="19620" fg:w="7"/><text x="29.4078%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (85 samples, 0.13%)</title><rect x="29.1712%" y="1221" width="0.1263%" height="15" fill="rgb(250,162,2)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (85 samples, 0.13%)</title><rect x="29.1712%" y="1205" width="0.1263%" height="15" fill="rgb(220,13,41)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (85 samples, 0.13%)</title><rect x="29.1712%" y="1189" width="0.1263%" height="15" fill="rgb(249,221,25)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1199.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (85 samples, 0.13%)</title><rect x="29.1712%" y="1173" width="0.1263%" height="15" fill="rgb(215,208,19)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (85 samples, 0.13%)</title><rect x="29.1712%" y="1157" width="0.1263%" height="15" fill="rgb(236,175,2)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (85 samples, 0.13%)</title><rect x="29.1712%" y="1141" width="0.1263%" height="15" fill="rgb(241,52,2)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1151.50"></text></g><g><title>_int_free (85 samples, 0.13%)</title><rect x="29.1712%" y="1125" width="0.1263%" height="15" fill="rgb(248,140,14)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1135.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (85 samples, 0.13%)</title><rect x="29.1712%" y="1109" width="0.1263%" height="15" fill="rgb(253,22,42)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1119.50"></text></g><g><title>malloc_consolidate (85 samples, 0.13%)</title><rect x="29.1712%" y="1093" width="0.1263%" height="15" fill="rgb(234,61,47)" fg:x="19629" fg:w="85"/><text x="29.4212%" y="1103.50"></text></g><g><title>_int_free (38 samples, 0.06%)</title><rect x="29.2990%" y="1013" width="0.0565%" height="15" fill="rgb(208,226,15)" fg:x="19715" fg:w="38"/><text x="29.5490%" y="1023.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (11 samples, 0.02%)</title><rect x="29.3391%" y="997" width="0.0163%" height="15" fill="rgb(217,221,4)" fg:x="19742" fg:w="11"/><text x="29.5891%" y="1007.50"></text></g><g><title>malloc_consolidate (11 samples, 0.02%)</title><rect x="29.3391%" y="981" width="0.0163%" height="15" fill="rgb(212,174,34)" fg:x="19742" fg:w="11"/><text x="29.5891%" y="991.50"></text></g><g><title>cfree@GLIBC_2.2.5 (42 samples, 0.06%)</title><rect x="29.2975%" y="1029" width="0.0624%" height="15" fill="rgb(253,83,4)" fg:x="19714" fg:w="42"/><text x="29.5475%" y="1039.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (44 samples, 0.07%)</title><rect x="29.2975%" y="1109" width="0.0654%" height="15" fill="rgb(250,195,49)" fg:x="19714" fg:w="44"/><text x="29.5475%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (44 samples, 0.07%)</title><rect x="29.2975%" y="1093" width="0.0654%" height="15" fill="rgb(241,192,25)" fg:x="19714" fg:w="44"/><text x="29.5475%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (44 samples, 0.07%)</title><rect x="29.2975%" y="1077" width="0.0654%" height="15" fill="rgb(208,124,10)" fg:x="19714" fg:w="44"/><text x="29.5475%" y="1087.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (44 samples, 0.07%)</title><rect x="29.2975%" y="1061" width="0.0654%" height="15" fill="rgb(222,33,0)" fg:x="19714" fg:w="44"/><text x="29.5475%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (44 samples, 0.07%)</title><rect x="29.2975%" y="1045" width="0.0654%" height="15" fill="rgb(234,209,28)" fg:x="19714" fg:w="44"/><text x="29.5475%" y="1055.50"></text></g><g><title>_int_free (21 samples, 0.03%)</title><rect x="29.3807%" y="949" width="0.0312%" height="15" fill="rgb(224,11,23)" fg:x="19770" fg:w="21"/><text x="29.6307%" y="959.50"></text></g><g><title>CBlockUndo::~CBlockUndo (164 samples, 0.24%)</title><rect x="29.1712%" y="1253" width="0.2437%" height="15" fill="rgb(232,99,1)" fg:x="19629" fg:w="164"/><text x="29.4212%" y="1263.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (164 samples, 0.24%)</title><rect x="29.1712%" y="1237" width="0.2437%" height="15" fill="rgb(237,95,45)" fg:x="19629" fg:w="164"/><text x="29.4212%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (79 samples, 0.12%)</title><rect x="29.2975%" y="1221" width="0.1174%" height="15" fill="rgb(208,109,11)" fg:x="19714" fg:w="79"/><text x="29.5475%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (79 samples, 0.12%)</title><rect x="29.2975%" y="1205" width="0.1174%" height="15" fill="rgb(216,190,48)" fg:x="19714" fg:w="79"/><text x="29.5475%" y="1215.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (79 samples, 0.12%)</title><rect x="29.2975%" y="1189" width="0.1174%" height="15" fill="rgb(251,171,36)" fg:x="19714" fg:w="79"/><text x="29.5475%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (79 samples, 0.12%)</title><rect x="29.2975%" y="1173" width="0.1174%" height="15" fill="rgb(230,62,22)" fg:x="19714" fg:w="79"/><text x="29.5475%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (79 samples, 0.12%)</title><rect x="29.2975%" y="1157" width="0.1174%" height="15" fill="rgb(225,114,35)" fg:x="19714" fg:w="79"/><text x="29.5475%" y="1167.50"></text></g><g><title>CTxUndo::~CTxUndo (79 samples, 0.12%)</title><rect x="29.2975%" y="1141" width="0.1174%" height="15" fill="rgb(215,118,42)" fg:x="19714" fg:w="79"/><text x="29.5475%" y="1151.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (79 samples, 0.12%)</title><rect x="29.2975%" y="1125" width="0.1174%" height="15" fill="rgb(243,119,21)" fg:x="19714" fg:w="79"/><text x="29.5475%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (35 samples, 0.05%)</title><rect x="29.3629%" y="1109" width="0.0520%" height="15" fill="rgb(252,177,53)" fg:x="19758" fg:w="35"/><text x="29.6129%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (35 samples, 0.05%)</title><rect x="29.3629%" y="1093" width="0.0520%" height="15" fill="rgb(237,209,29)" fg:x="19758" fg:w="35"/><text x="29.6129%" y="1103.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (35 samples, 0.05%)</title><rect x="29.3629%" y="1077" width="0.0520%" height="15" fill="rgb(212,65,23)" fg:x="19758" fg:w="35"/><text x="29.6129%" y="1087.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (32 samples, 0.05%)</title><rect x="29.3674%" y="1061" width="0.0476%" height="15" fill="rgb(230,222,46)" fg:x="19761" fg:w="32"/><text x="29.6174%" y="1071.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (32 samples, 0.05%)</title><rect x="29.3674%" y="1045" width="0.0476%" height="15" fill="rgb(215,135,32)" fg:x="19761" fg:w="32"/><text x="29.6174%" y="1055.50"></text></g><g><title>Coin::~Coin (32 samples, 0.05%)</title><rect x="29.3674%" y="1029" width="0.0476%" height="15" fill="rgb(246,101,22)" fg:x="19761" fg:w="32"/><text x="29.6174%" y="1039.50"></text></g><g><title>CTxOut::~CTxOut (32 samples, 0.05%)</title><rect x="29.3674%" y="1013" width="0.0476%" height="15" fill="rgb(206,107,13)" fg:x="19761" fg:w="32"/><text x="29.6174%" y="1023.50"></text></g><g><title>CScript::~CScript (32 samples, 0.05%)</title><rect x="29.3674%" y="997" width="0.0476%" height="15" fill="rgb(250,100,44)" fg:x="19761" fg:w="32"/><text x="29.6174%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (32 samples, 0.05%)</title><rect x="29.3674%" y="981" width="0.0476%" height="15" fill="rgb(231,147,38)" fg:x="19761" fg:w="32"/><text x="29.6174%" y="991.50"></text></g><g><title>cfree@GLIBC_2.2.5 (29 samples, 0.04%)</title><rect x="29.3718%" y="965" width="0.0431%" height="15" fill="rgb(229,8,40)" fg:x="19764" fg:w="29"/><text x="29.6218%" y="975.50"></text></g><g><title>SipHashUint256Extra (30 samples, 0.04%)</title><rect x="29.4372%" y="1173" width="0.0446%" height="15" fill="rgb(221,135,30)" fg:x="19808" fg:w="30"/><text x="29.6872%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="29.4669%" y="1157" width="0.0149%" height="15" fill="rgb(249,193,18)" fg:x="19828" fg:w="10"/><text x="29.7169%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="29.4669%" y="1141" width="0.0149%" height="15" fill="rgb(209,133,39)" fg:x="19828" fg:w="10"/><text x="29.7169%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (41 samples, 0.06%)</title><rect x="29.4268%" y="1189" width="0.0609%" height="15" fill="rgb(232,100,14)" fg:x="19801" fg:w="41"/><text x="29.6768%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (19 samples, 0.03%)</title><rect x="29.4907%" y="1157" width="0.0282%" height="15" fill="rgb(224,185,1)" fg:x="19844" fg:w="19"/><text x="29.7407%" y="1167.50"></text></g><g><title>SipHashUint256Extra (79 samples, 0.12%)</title><rect x="29.5249%" y="1157" width="0.1174%" height="15" fill="rgb(223,139,8)" fg:x="19867" fg:w="79"/><text x="29.7749%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (27 samples, 0.04%)</title><rect x="29.6022%" y="1141" width="0.0401%" height="15" fill="rgb(232,213,38)" fg:x="19919" fg:w="27"/><text x="29.8522%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (27 samples, 0.04%)</title><rect x="29.6022%" y="1125" width="0.0401%" height="15" fill="rgb(207,94,22)" fg:x="19919" fg:w="27"/><text x="29.8522%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (159 samples, 0.24%)</title><rect x="29.4209%" y="1237" width="0.2363%" height="15" fill="rgb(219,183,54)" fg:x="19797" fg:w="159"/><text x="29.6709%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (157 samples, 0.23%)</title><rect x="29.4238%" y="1221" width="0.2333%" height="15" fill="rgb(216,185,54)" fg:x="19799" fg:w="157"/><text x="29.6738%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (157 samples, 0.23%)</title><rect x="29.4238%" y="1205" width="0.2333%" height="15" fill="rgb(254,217,39)" fg:x="19799" fg:w="157"/><text x="29.6738%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (114 samples, 0.17%)</title><rect x="29.4877%" y="1189" width="0.1694%" height="15" fill="rgb(240,178,23)" fg:x="19842" fg:w="114"/><text x="29.7377%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (114 samples, 0.17%)</title><rect x="29.4877%" y="1173" width="0.1694%" height="15" fill="rgb(218,11,47)" fg:x="19842" fg:w="114"/><text x="29.7377%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.01%)</title><rect x="29.6423%" y="1157" width="0.0149%" height="15" fill="rgb(218,51,51)" fg:x="19946" fg:w="10"/><text x="29.8923%" y="1167.50"></text></g><g><title>SipHashUint256Extra (34 samples, 0.05%)</title><rect x="29.6661%" y="1237" width="0.0505%" height="15" fill="rgb(238,126,27)" fg:x="19962" fg:w="34"/><text x="29.9161%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (18 samples, 0.03%)</title><rect x="29.6898%" y="1221" width="0.0268%" height="15" fill="rgb(249,202,22)" fg:x="19978" fg:w="18"/><text x="29.9398%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (18 samples, 0.03%)</title><rect x="29.6898%" y="1205" width="0.0268%" height="15" fill="rgb(254,195,49)" fg:x="19978" fg:w="18"/><text x="29.9398%" y="1215.50"></text></g><g><title>CCoinsViewCache::AccessCoin (205 samples, 0.30%)</title><rect x="29.4149%" y="1253" width="0.3047%" height="15" fill="rgb(208,123,14)" fg:x="19793" fg:w="205"/><text x="29.6649%" y="1263.50"></text></g><g><title>CCoinsViewCache::AddCoin (21 samples, 0.03%)</title><rect x="29.7196%" y="1253" width="0.0312%" height="15" fill="rgb(224,200,8)" fg:x="19998" fg:w="21"/><text x="29.9696%" y="1263.50"></text></g><g><title>CCoinsViewCache::FetchCoin (23 samples, 0.03%)</title><rect x="29.7508%" y="1253" width="0.0342%" height="15" fill="rgb(217,61,36)" fg:x="20019" fg:w="23"/><text x="30.0008%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (7 samples, 0.01%)</title><rect x="29.7879%" y="1077" width="0.0104%" height="15" fill="rgb(206,35,45)" fg:x="20044" fg:w="7"/><text x="30.0379%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (7 samples, 0.01%)</title><rect x="29.7879%" y="1061" width="0.0104%" height="15" fill="rgb(217,65,33)" fg:x="20044" fg:w="7"/><text x="30.0379%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (7 samples, 0.01%)</title><rect x="29.7879%" y="1045" width="0.0104%" height="15" fill="rgb(222,158,48)" fg:x="20044" fg:w="7"/><text x="30.0379%" y="1055.50"></text></g><g><title>CCoinsViewCache::GetCoin (240 samples, 0.36%)</title><rect x="29.7850%" y="1253" width="0.3567%" height="15" fill="rgb(254,2,54)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1263.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (240 samples, 0.36%)</title><rect x="29.7850%" y="1237" width="0.3567%" height="15" fill="rgb(250,143,38)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1247.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (240 samples, 0.36%)</title><rect x="29.7850%" y="1221" width="0.3567%" height="15" fill="rgb(248,25,0)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1231.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (240 samples, 0.36%)</title><rect x="29.7850%" y="1205" width="0.3567%" height="15" fill="rgb(206,152,27)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (240 samples, 0.36%)</title><rect x="29.7850%" y="1189" width="0.3567%" height="15" fill="rgb(240,77,30)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1199.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (240 samples, 0.36%)</title><rect x="29.7850%" y="1173" width="0.3567%" height="15" fill="rgb(231,5,3)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (240 samples, 0.36%)</title><rect x="29.7850%" y="1157" width="0.3567%" height="15" fill="rgb(207,226,32)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1167.50"></text></g><g><title>Coin::Coin (240 samples, 0.36%)</title><rect x="29.7850%" y="1141" width="0.3567%" height="15" fill="rgb(222,207,47)" fg:x="20042" fg:w="240"/><text x="30.0350%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (239 samples, 0.36%)</title><rect x="29.7864%" y="1125" width="0.3552%" height="15" fill="rgb(229,115,45)" fg:x="20043" fg:w="239"/><text x="30.0364%" y="1135.50"></text></g><g><title>CScript::CScript (239 samples, 0.36%)</title><rect x="29.7864%" y="1109" width="0.3552%" height="15" fill="rgb(224,191,6)" fg:x="20043" fg:w="239"/><text x="30.0364%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (239 samples, 0.36%)</title><rect x="29.7864%" y="1093" width="0.3552%" height="15" fill="rgb(230,227,24)" fg:x="20043" fg:w="239"/><text x="30.0364%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (230 samples, 0.34%)</title><rect x="29.7998%" y="1077" width="0.3418%" height="15" fill="rgb(228,80,19)" fg:x="20052" fg:w="230"/><text x="30.0498%" y="1087.50"></text></g><g><title>CCoinsViewCache::HaveInputs (7 samples, 0.01%)</title><rect x="30.1416%" y="1253" width="0.0104%" height="15" fill="rgb(247,229,0)" fg:x="20282" fg:w="7"/><text x="30.3916%" y="1263.50"></text></g><g><title>CCoinsViewCache::SpendCoin (19 samples, 0.03%)</title><rect x="30.1520%" y="1253" width="0.0282%" height="15" fill="rgb(237,194,15)" fg:x="20289" fg:w="19"/><text x="30.4020%" y="1263.50"></text></g><g><title>Coin::operator= (7 samples, 0.01%)</title><rect x="30.1699%" y="1237" width="0.0104%" height="15" fill="rgb(219,203,20)" fg:x="20301" fg:w="7"/><text x="30.4199%" y="1247.50"></text></g><g><title>CScript::IsWitnessProgram (11 samples, 0.02%)</title><rect x="30.1862%" y="1253" width="0.0163%" height="15" fill="rgb(234,128,8)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1237" width="0.0163%" height="15" fill="rgb(248,202,8)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1221" width="0.0163%" height="15" fill="rgb(206,104,37)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1231.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1205" width="0.0163%" height="15" fill="rgb(223,8,27)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1215.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1189" width="0.0163%" height="15" fill="rgb(216,217,28)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1173" width="0.0163%" height="15" fill="rgb(249,199,1)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1183.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1157" width="0.0163%" height="15" fill="rgb(240,85,17)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1141" width="0.0163%" height="15" fill="rgb(206,108,45)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1125" width="0.0163%" height="15" fill="rgb(245,210,41)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1109" width="0.0163%" height="15" fill="rgb(206,13,37)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (11 samples, 0.02%)</title><rect x="30.1862%" y="1093" width="0.0163%" height="15" fill="rgb(250,61,18)" fg:x="20312" fg:w="11"/><text x="30.4362%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (28 samples, 0.04%)</title><rect x="30.2650%" y="1157" width="0.0416%" height="15" fill="rgb(235,172,48)" fg:x="20365" fg:w="28"/><text x="30.5150%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (8 samples, 0.01%)</title><rect x="30.2947%" y="1141" width="0.0119%" height="15" fill="rgb(249,201,17)" fg:x="20385" fg:w="8"/><text x="30.5447%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (28 samples, 0.04%)</title><rect x="30.3066%" y="1157" width="0.0416%" height="15" fill="rgb(219,208,6)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (28 samples, 0.04%)</title><rect x="30.3066%" y="1141" width="0.0416%" height="15" fill="rgb(248,31,23)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (28 samples, 0.04%)</title><rect x="30.3066%" y="1125" width="0.0416%" height="15" fill="rgb(245,15,42)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (28 samples, 0.04%)</title><rect x="30.3066%" y="1109" width="0.0416%" height="15" fill="rgb(222,217,39)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (28 samples, 0.04%)</title><rect x="30.3066%" y="1093" width="0.0416%" height="15" fill="rgb(210,219,27)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (28 samples, 0.04%)</title><rect x="30.3066%" y="1077" width="0.0416%" height="15" fill="rgb(252,166,36)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (28 samples, 0.04%)</title><rect x="30.3066%" y="1061" width="0.0416%" height="15" fill="rgb(245,132,34)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1071.50"></text></g><g><title>Coin::Coin (28 samples, 0.04%)</title><rect x="30.3066%" y="1045" width="0.0416%" height="15" fill="rgb(236,54,3)" fg:x="20393" fg:w="28"/><text x="30.5566%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (27 samples, 0.04%)</title><rect x="30.3081%" y="1029" width="0.0401%" height="15" fill="rgb(241,173,43)" fg:x="20394" fg:w="27"/><text x="30.5581%" y="1039.50"></text></g><g><title>CScript::CScript (27 samples, 0.04%)</title><rect x="30.3081%" y="1013" width="0.0401%" height="15" fill="rgb(215,190,9)" fg:x="20394" fg:w="27"/><text x="30.5581%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (27 samples, 0.04%)</title><rect x="30.3081%" y="997" width="0.0401%" height="15" fill="rgb(242,101,16)" fg:x="20394" fg:w="27"/><text x="30.5581%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (27 samples, 0.04%)</title><rect x="30.3081%" y="981" width="0.0401%" height="15" fill="rgb(223,190,21)" fg:x="20394" fg:w="27"/><text x="30.5581%" y="991.50"></text></g><g><title>SipHashUint256Extra (54 samples, 0.08%)</title><rect x="30.3675%" y="1157" width="0.0803%" height="15" fill="rgb(215,228,25)" fg:x="20434" fg:w="54"/><text x="30.6175%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (19 samples, 0.03%)</title><rect x="30.4195%" y="1141" width="0.0282%" height="15" fill="rgb(225,36,22)" fg:x="20469" fg:w="19"/><text x="30.6695%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (19 samples, 0.03%)</title><rect x="30.4195%" y="1125" width="0.0282%" height="15" fill="rgb(251,106,46)" fg:x="20469" fg:w="19"/><text x="30.6695%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (134 samples, 0.20%)</title><rect x="30.2605%" y="1173" width="0.1991%" height="15" fill="rgb(208,90,1)" fg:x="20362" fg:w="134"/><text x="30.5105%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="30.4478%" y="1157" width="0.0119%" height="15" fill="rgb(243,10,4)" fg:x="20488" fg:w="8"/><text x="30.6978%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (32 samples, 0.05%)</title><rect x="30.4626%" y="1141" width="0.0476%" height="15" fill="rgb(212,137,27)" fg:x="20498" fg:w="32"/><text x="30.7126%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (7 samples, 0.01%)</title><rect x="30.4998%" y="1125" width="0.0104%" height="15" fill="rgb(231,220,49)" fg:x="20523" fg:w="7"/><text x="30.7498%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (47 samples, 0.07%)</title><rect x="30.5102%" y="1141" width="0.0698%" height="15" fill="rgb(237,96,20)" fg:x="20530" fg:w="47"/><text x="30.7602%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (47 samples, 0.07%)</title><rect x="30.5102%" y="1125" width="0.0698%" height="15" fill="rgb(239,229,30)" fg:x="20530" fg:w="47"/><text x="30.7602%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (46 samples, 0.07%)</title><rect x="30.5117%" y="1109" width="0.0684%" height="15" fill="rgb(219,65,33)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (46 samples, 0.07%)</title><rect x="30.5117%" y="1093" width="0.0684%" height="15" fill="rgb(243,134,7)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (46 samples, 0.07%)</title><rect x="30.5117%" y="1077" width="0.0684%" height="15" fill="rgb(216,177,54)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (46 samples, 0.07%)</title><rect x="30.5117%" y="1061" width="0.0684%" height="15" fill="rgb(211,160,20)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (46 samples, 0.07%)</title><rect x="30.5117%" y="1045" width="0.0684%" height="15" fill="rgb(239,85,39)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1055.50"></text></g><g><title>Coin::Coin (46 samples, 0.07%)</title><rect x="30.5117%" y="1029" width="0.0684%" height="15" fill="rgb(232,125,22)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (46 samples, 0.07%)</title><rect x="30.5117%" y="1013" width="0.0684%" height="15" fill="rgb(244,57,34)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1023.50"></text></g><g><title>CScript::CScript (46 samples, 0.07%)</title><rect x="30.5117%" y="997" width="0.0684%" height="15" fill="rgb(214,203,32)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (46 samples, 0.07%)</title><rect x="30.5117%" y="981" width="0.0684%" height="15" fill="rgb(207,58,43)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (46 samples, 0.07%)</title><rect x="30.5117%" y="965" width="0.0684%" height="15" fill="rgb(215,193,15)" fg:x="20531" fg:w="46"/><text x="30.7617%" y="975.50"></text></g><g><title>SipHashUint256Extra (14 samples, 0.02%)</title><rect x="30.5904%" y="1141" width="0.0208%" height="15" fill="rgb(232,15,44)" fg:x="20584" fg:w="14"/><text x="30.8404%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (253 samples, 0.38%)</title><rect x="30.2397%" y="1221" width="0.3760%" height="15" fill="rgb(212,3,48)" fg:x="20348" fg:w="253"/><text x="30.4897%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (239 samples, 0.36%)</title><rect x="30.2605%" y="1205" width="0.3552%" height="15" fill="rgb(218,128,7)" fg:x="20362" fg:w="239"/><text x="30.5105%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (239 samples, 0.36%)</title><rect x="30.2605%" y="1189" width="0.3552%" height="15" fill="rgb(226,216,39)" fg:x="20362" fg:w="239"/><text x="30.5105%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (105 samples, 0.16%)</title><rect x="30.4597%" y="1173" width="0.1560%" height="15" fill="rgb(243,47,51)" fg:x="20496" fg:w="105"/><text x="30.7097%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (105 samples, 0.16%)</title><rect x="30.4597%" y="1157" width="0.1560%" height="15" fill="rgb(241,183,40)" fg:x="20496" fg:w="105"/><text x="30.7097%" y="1167.50"></text></g><g><title>CCoinsViewCache::GetCoin (90 samples, 0.13%)</title><rect x="30.6157%" y="1221" width="0.1338%" height="15" fill="rgb(231,217,32)" fg:x="20601" fg:w="90"/><text x="30.8657%" y="1231.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (89 samples, 0.13%)</title><rect x="30.6172%" y="1205" width="0.1323%" height="15" fill="rgb(229,61,38)" fg:x="20602" fg:w="89"/><text x="30.8672%" y="1215.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (89 samples, 0.13%)</title><rect x="30.6172%" y="1189" width="0.1323%" height="15" fill="rgb(225,210,5)" fg:x="20602" fg:w="89"/><text x="30.8672%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (89 samples, 0.13%)</title><rect x="30.6172%" y="1173" width="0.1323%" height="15" fill="rgb(231,79,45)" fg:x="20602" fg:w="89"/><text x="30.8672%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (89 samples, 0.13%)</title><rect x="30.6172%" y="1157" width="0.1323%" height="15" fill="rgb(224,100,7)" fg:x="20602" fg:w="89"/><text x="30.8672%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (89 samples, 0.13%)</title><rect x="30.6172%" y="1141" width="0.1323%" height="15" fill="rgb(241,198,18)" fg:x="20602" fg:w="89"/><text x="30.8672%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (89 samples, 0.13%)</title><rect x="30.6172%" y="1125" width="0.1323%" height="15" fill="rgb(252,97,53)" fg:x="20602" fg:w="89"/><text x="30.8672%" y="1135.50"></text></g><g><title>Coin::Coin (89 samples, 0.13%)</title><rect x="30.6172%" y="1109" width="0.1323%" height="15" fill="rgb(220,88,7)" fg:x="20602" fg:w="89"/><text x="30.8672%" y="1119.50"></text></g><g><title>CTxOut::CTxOut (88 samples, 0.13%)</title><rect x="30.6187%" y="1093" width="0.1308%" height="15" fill="rgb(213,176,14)" fg:x="20603" fg:w="88"/><text x="30.8687%" y="1103.50"></text></g><g><title>CScript::CScript (88 samples, 0.13%)</title><rect x="30.6187%" y="1077" width="0.1308%" height="15" fill="rgb(246,73,7)" fg:x="20603" fg:w="88"/><text x="30.8687%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (88 samples, 0.13%)</title><rect x="30.6187%" y="1061" width="0.1308%" height="15" fill="rgb(245,64,36)" fg:x="20603" fg:w="88"/><text x="30.8687%" y="1071.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (88 samples, 0.13%)</title><rect x="30.6187%" y="1045" width="0.1308%" height="15" fill="rgb(245,80,10)" fg:x="20603" fg:w="88"/><text x="30.8687%" y="1055.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.03%)</title><rect x="30.7613%" y="1221" width="0.0327%" height="15" fill="rgb(232,107,50)" fg:x="20699" fg:w="22"/><text x="31.0113%" y="1231.50"></text></g><g><title>CCoinsViewCache::AccessCoin (379 samples, 0.56%)</title><rect x="30.2338%" y="1237" width="0.5632%" height="15" fill="rgb(253,3,0)" fg:x="20344" fg:w="379"/><text x="30.4838%" y="1247.50"></text></g><g><title>Coin::operator= (7 samples, 0.01%)</title><rect x="30.8446%" y="1221" width="0.0104%" height="15" fill="rgb(212,99,53)" fg:x="20755" fg:w="7"/><text x="31.0946%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (49 samples, 0.07%)</title><rect x="30.8000%" y="1237" width="0.0728%" height="15" fill="rgb(249,111,54)" fg:x="20725" fg:w="49"/><text x="31.0500%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (12 samples, 0.02%)</title><rect x="30.8550%" y="1221" width="0.0178%" height="15" fill="rgb(249,55,30)" fg:x="20762" fg:w="12"/><text x="31.1050%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (16 samples, 0.02%)</title><rect x="30.8877%" y="1061" width="0.0238%" height="15" fill="rgb(237,47,42)" fg:x="20784" fg:w="16"/><text x="31.1377%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (16 samples, 0.02%)</title><rect x="30.8877%" y="1045" width="0.0238%" height="15" fill="rgb(211,20,18)" fg:x="20784" fg:w="16"/><text x="31.1377%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (16 samples, 0.02%)</title><rect x="30.8877%" y="1029" width="0.0238%" height="15" fill="rgb(231,203,46)" fg:x="20784" fg:w="16"/><text x="31.1377%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (7 samples, 0.01%)</title><rect x="30.9114%" y="1061" width="0.0104%" height="15" fill="rgb(237,142,3)" fg:x="20800" fg:w="7"/><text x="31.1614%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (555 samples, 0.82%)</title><rect x="30.8728%" y="1237" width="0.8248%" height="15" fill="rgb(241,107,1)" fg:x="20774" fg:w="555"/><text x="31.1228%" y="1247.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (552 samples, 0.82%)</title><rect x="30.8773%" y="1221" width="0.8203%" height="15" fill="rgb(229,83,13)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1231.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (552 samples, 0.82%)</title><rect x="30.8773%" y="1205" width="0.8203%" height="15" fill="rgb(241,91,40)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (552 samples, 0.82%)</title><rect x="30.8773%" y="1189" width="0.8203%" height="15" fill="rgb(225,3,45)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (552 samples, 0.82%)</title><rect x="30.8773%" y="1173" width="0.8203%" height="15" fill="rgb(244,223,14)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (552 samples, 0.82%)</title><rect x="30.8773%" y="1157" width="0.8203%" height="15" fill="rgb(224,124,37)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (552 samples, 0.82%)</title><rect x="30.8773%" y="1141" width="0.8203%" height="15" fill="rgb(251,171,30)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1151.50"></text></g><g><title>Coin::Coin (552 samples, 0.82%)</title><rect x="30.8773%" y="1125" width="0.8203%" height="15" fill="rgb(236,46,54)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1135.50"></text></g><g><title>CTxOut::CTxOut (552 samples, 0.82%)</title><rect x="30.8773%" y="1109" width="0.8203%" height="15" fill="rgb(245,213,5)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1119.50"></text></g><g><title>CScript::CScript (552 samples, 0.82%)</title><rect x="30.8773%" y="1093" width="0.8203%" height="15" fill="rgb(230,144,27)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (552 samples, 0.82%)</title><rect x="30.8773%" y="1077" width="0.8203%" height="15" fill="rgb(220,86,6)" fg:x="20777" fg:w="552"/><text x="31.1273%" y="1087.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (521 samples, 0.77%)</title><rect x="30.9233%" y="1061" width="0.7743%" height="15" fill="rgb(240,20,13)" fg:x="20808" fg:w="521"/><text x="31.1733%" y="1071.50"></text></g><g><title>CCoinsViewCache::AddCoin (7 samples, 0.01%)</title><rect x="31.7035%" y="1205" width="0.0104%" height="15" fill="rgb(217,89,34)" fg:x="21333" fg:w="7"/><text x="31.9535%" y="1215.50"></text></g><g><title>leveldb::DBImpl::Get (15 samples, 0.02%)</title><rect x="31.7556%" y="1029" width="0.0223%" height="15" fill="rgb(229,13,5)" fg:x="21368" fg:w="15"/><text x="32.0056%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (17 samples, 0.03%)</title><rect x="31.8314%" y="997" width="0.0253%" height="15" fill="rgb(244,67,35)" fg:x="21419" fg:w="17"/><text x="32.0814%" y="1007.50"></text></g><g><title>leveldb::Slice::compare (8 samples, 0.01%)</title><rect x="31.8447%" y="981" width="0.0119%" height="15" fill="rgb(221,40,2)" fg:x="21428" fg:w="8"/><text x="32.0947%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.01%)</title><rect x="31.8849%" y="981" width="0.0119%" height="15" fill="rgb(237,157,21)" fg:x="21455" fg:w="8"/><text x="32.1349%" y="991.50"></text></g><g><title>leveldb::FindFile (15 samples, 0.02%)</title><rect x="31.8967%" y="981" width="0.0223%" height="15" fill="rgb(222,94,11)" fg:x="21463" fg:w="15"/><text x="32.1467%" y="991.50"></text></g><g><title>__memcmp_evex_movbe (9 samples, 0.01%)</title><rect x="31.9785%" y="933" width="0.0134%" height="15" fill="rgb(249,113,6)" fg:x="21518" fg:w="9"/><text x="32.2285%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (39 samples, 0.06%)</title><rect x="31.9369%" y="965" width="0.0580%" height="15" fill="rgb(238,137,36)" fg:x="21490" fg:w="39"/><text x="32.1869%" y="975.50"></text></g><g><title>leveldb::Slice::compare (24 samples, 0.04%)</title><rect x="31.9592%" y="949" width="0.0357%" height="15" fill="rgb(210,102,26)" fg:x="21505" fg:w="24"/><text x="32.2092%" y="959.50"></text></g><g><title>leveldb::FindFile (19 samples, 0.03%)</title><rect x="31.9963%" y="965" width="0.0282%" height="15" fill="rgb(218,30,30)" fg:x="21530" fg:w="19"/><text x="32.2463%" y="975.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.03%)</title><rect x="32.0246%" y="965" width="0.0253%" height="15" fill="rgb(214,67,26)" fg:x="21549" fg:w="17"/><text x="32.2746%" y="975.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (7 samples, 0.01%)</title><rect x="32.0498%" y="965" width="0.0104%" height="15" fill="rgb(251,9,53)" fg:x="21566" fg:w="7"/><text x="32.2998%" y="975.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (97 samples, 0.14%)</title><rect x="31.9190%" y="981" width="0.1442%" height="15" fill="rgb(228,204,25)" fg:x="21478" fg:w="97"/><text x="32.1690%" y="991.50"></text></g><g><title>leveldb::FindFile (144 samples, 0.21%)</title><rect x="31.8566%" y="997" width="0.2140%" height="15" fill="rgb(207,153,8)" fg:x="21436" fg:w="144"/><text x="32.1066%" y="1007.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (18 samples, 0.03%)</title><rect x="32.0706%" y="997" width="0.0268%" height="15" fill="rgb(242,9,16)" fg:x="21580" fg:w="18"/><text x="32.3206%" y="1007.50"></text></g><g><title>leveldb::MemTable::Get (10 samples, 0.01%)</title><rect x="32.0989%" y="997" width="0.0149%" height="15" fill="rgb(217,211,10)" fg:x="21599" fg:w="10"/><text x="32.3489%" y="1007.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.01%)</title><rect x="32.1375%" y="965" width="0.0104%" height="15" fill="rgb(219,228,52)" fg:x="21625" fg:w="7"/><text x="32.3875%" y="975.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (7 samples, 0.01%)</title><rect x="32.1746%" y="965" width="0.0104%" height="15" fill="rgb(231,92,29)" fg:x="21650" fg:w="7"/><text x="32.4246%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (507 samples, 0.75%)</title><rect x="32.2133%" y="949" width="0.7535%" height="15" fill="rgb(232,8,23)" fg:x="21676" fg:w="507"/><text x="32.4633%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (14 samples, 0.02%)</title><rect x="32.9668%" y="949" width="0.0208%" height="15" fill="rgb(216,211,34)" fg:x="22183" fg:w="14"/><text x="33.2168%" y="959.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (32 samples, 0.05%)</title><rect x="33.0009%" y="949" width="0.0476%" height="15" fill="rgb(236,151,0)" fg:x="22206" fg:w="32"/><text x="33.2509%" y="959.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="33.2506%" y="917" width="0.0149%" height="15" fill="rgb(209,168,3)" fg:x="22374" fg:w="10"/><text x="33.5006%" y="927.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="33.2506%" y="901" width="0.0149%" height="15" fill="rgb(208,129,28)" fg:x="22374" fg:w="10"/><text x="33.5006%" y="911.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="33.2521%" y="885" width="0.0134%" height="15" fill="rgb(229,78,22)" fg:x="22375" fg:w="9"/><text x="33.5021%" y="895.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="33.2521%" y="869" width="0.0134%" height="15" fill="rgb(228,187,13)" fg:x="22375" fg:w="9"/><text x="33.5021%" y="879.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="33.2521%" y="853" width="0.0134%" height="15" fill="rgb(240,119,24)" fg:x="22375" fg:w="9"/><text x="33.5021%" y="863.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="33.2521%" y="837" width="0.0134%" height="15" fill="rgb(209,194,42)" fg:x="22375" fg:w="9"/><text x="33.5021%" y="847.50"></text></g><g><title>DecodeEntry (30 samples, 0.04%)</title><rect x="33.2239%" y="933" width="0.0446%" height="15" fill="rgb(247,200,46)" fg:x="22356" fg:w="30"/><text x="33.4739%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Seek (10 samples, 0.01%)</title><rect x="33.5538%" y="917" width="0.0149%" height="15" fill="rgb(218,76,16)" fg:x="22578" fg:w="10"/><text x="33.8038%" y="927.50"></text></g><g><title>__memcmp_evex_movbe (29 samples, 0.04%)</title><rect x="33.5835%" y="869" width="0.0431%" height="15" fill="rgb(225,21,48)" fg:x="22598" fg:w="29"/><text x="33.8335%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (45 samples, 0.07%)</title><rect x="33.5790%" y="901" width="0.0669%" height="15" fill="rgb(239,223,50)" fg:x="22595" fg:w="45"/><text x="33.8290%" y="911.50"></text></g><g><title>leveldb::Slice::compare (43 samples, 0.06%)</title><rect x="33.5820%" y="885" width="0.0639%" height="15" fill="rgb(244,45,21)" fg:x="22597" fg:w="43"/><text x="33.8320%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.02%)</title><rect x="33.6296%" y="869" width="0.0163%" height="15" fill="rgb(232,33,43)" fg:x="22629" fg:w="11"/><text x="33.8796%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Compare (23 samples, 0.03%)</title><rect x="33.7083%" y="885" width="0.0342%" height="15" fill="rgb(209,8,3)" fg:x="22682" fg:w="23"/><text x="33.9583%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (72 samples, 0.11%)</title><rect x="33.6459%" y="901" width="0.1070%" height="15" fill="rgb(214,25,53)" fg:x="22640" fg:w="72"/><text x="33.8959%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (35 samples, 0.05%)</title><rect x="33.7618%" y="901" width="0.0520%" height="15" fill="rgb(254,186,54)" fg:x="22718" fg:w="35"/><text x="34.0118%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (173 samples, 0.26%)</title><rect x="33.5716%" y="917" width="0.2571%" height="15" fill="rgb(208,174,49)" fg:x="22590" fg:w="173"/><text x="33.8216%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Compare (377 samples, 0.56%)</title><rect x="33.2699%" y="933" width="0.5603%" height="15" fill="rgb(233,191,51)" fg:x="22387" fg:w="377"/><text x="33.5199%" y="943.50"></text></g><g><title>[[igc]] (12 samples, 0.02%)</title><rect x="33.8569%" y="821" width="0.0178%" height="15" fill="rgb(222,134,10)" fg:x="22782" fg:w="12"/><text x="34.1069%" y="831.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="33.8629%" y="805" width="0.0119%" height="15" fill="rgb(230,226,20)" fg:x="22786" fg:w="8"/><text x="34.1129%" y="815.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="33.8629%" y="789" width="0.0119%" height="15" fill="rgb(251,111,25)" fg:x="22786" fg:w="8"/><text x="34.1129%" y="799.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="33.8555%" y="917" width="0.0253%" height="15" fill="rgb(224,40,46)" fg:x="22781" fg:w="17"/><text x="34.1055%" y="927.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="33.8555%" y="901" width="0.0253%" height="15" fill="rgb(236,108,47)" fg:x="22781" fg:w="17"/><text x="34.1055%" y="911.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="33.8555%" y="885" width="0.0253%" height="15" fill="rgb(234,93,0)" fg:x="22781" fg:w="17"/><text x="34.1055%" y="895.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="33.8555%" y="869" width="0.0253%" height="15" fill="rgb(224,213,32)" fg:x="22781" fg:w="17"/><text x="34.1055%" y="879.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="33.8569%" y="853" width="0.0238%" height="15" fill="rgb(251,11,48)" fg:x="22782" fg:w="16"/><text x="34.1069%" y="863.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="33.8569%" y="837" width="0.0238%" height="15" fill="rgb(236,173,5)" fg:x="22782" fg:w="16"/><text x="34.1069%" y="847.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.01%)</title><rect x="33.8807%" y="917" width="0.0104%" height="15" fill="rgb(230,95,12)" fg:x="22798" fg:w="7"/><text x="34.1307%" y="927.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (14 samples, 0.02%)</title><rect x="33.9075%" y="901" width="0.0208%" height="15" fill="rgb(232,209,1)" fg:x="22816" fg:w="14"/><text x="34.1575%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7 samples, 0.01%)</title><rect x="33.9179%" y="885" width="0.0104%" height="15" fill="rgb(232,6,1)" fg:x="22823" fg:w="7"/><text x="34.1679%" y="895.50"></text></g><g><title>__memcmp_evex_movbe (15 samples, 0.02%)</title><rect x="33.9729%" y="853" width="0.0223%" height="15" fill="rgb(210,224,50)" fg:x="22860" fg:w="15"/><text x="34.2229%" y="863.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.02%)</title><rect x="33.9952%" y="853" width="0.0208%" height="15" fill="rgb(228,127,35)" fg:x="22875" fg:w="14"/><text x="34.2452%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (61 samples, 0.09%)</title><rect x="33.9476%" y="885" width="0.0907%" height="15" fill="rgb(245,102,45)" fg:x="22843" fg:w="61"/><text x="34.1976%" y="895.50"></text></g><g><title>leveldb::Slice::compare (50 samples, 0.07%)</title><rect x="33.9639%" y="869" width="0.0743%" height="15" fill="rgb(214,1,49)" fg:x="22854" fg:w="50"/><text x="34.2139%" y="879.50"></text></g><g><title>DecodeEntry (16 samples, 0.02%)</title><rect x="34.0605%" y="869" width="0.0238%" height="15" fill="rgb(226,163,40)" fg:x="22919" fg:w="16"/><text x="34.3105%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (12 samples, 0.02%)</title><rect x="34.1170%" y="837" width="0.0178%" height="15" fill="rgb(239,212,28)" fg:x="22957" fg:w="12"/><text x="34.3670%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (12 samples, 0.02%)</title><rect x="34.1170%" y="821" width="0.0178%" height="15" fill="rgb(220,20,13)" fg:x="22957" fg:w="12"/><text x="34.3670%" y="831.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (10 samples, 0.01%)</title><rect x="34.1200%" y="805" width="0.0149%" height="15" fill="rgb(210,164,35)" fg:x="22959" fg:w="10"/><text x="34.3700%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (36 samples, 0.05%)</title><rect x="34.0932%" y="853" width="0.0535%" height="15" fill="rgb(248,109,41)" fg:x="22941" fg:w="36"/><text x="34.3432%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (8 samples, 0.01%)</title><rect x="34.1349%" y="837" width="0.0119%" height="15" fill="rgb(238,23,50)" fg:x="22969" fg:w="8"/><text x="34.3849%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (7 samples, 0.01%)</title><rect x="34.1363%" y="821" width="0.0104%" height="15" fill="rgb(211,48,49)" fg:x="22970" fg:w="7"/><text x="34.3863%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (40 samples, 0.06%)</title><rect x="34.0932%" y="869" width="0.0594%" height="15" fill="rgb(223,36,21)" fg:x="22941" fg:w="40"/><text x="34.3432%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (8 samples, 0.01%)</title><rect x="34.1527%" y="869" width="0.0119%" height="15" fill="rgb(207,123,46)" fg:x="22981" fg:w="8"/><text x="34.4027%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (8 samples, 0.01%)</title><rect x="34.1527%" y="853" width="0.0119%" height="15" fill="rgb(240,218,32)" fg:x="22981" fg:w="8"/><text x="34.4027%" y="863.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (86 samples, 0.13%)</title><rect x="34.0383%" y="885" width="0.1278%" height="15" fill="rgb(252,5,43)" fg:x="22904" fg:w="86"/><text x="34.2883%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (11 samples, 0.02%)</title><rect x="34.1720%" y="869" width="0.0163%" height="15" fill="rgb(252,84,19)" fg:x="22994" fg:w="11"/><text x="34.4220%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Seek (17 samples, 0.03%)</title><rect x="34.1661%" y="885" width="0.0253%" height="15" fill="rgb(243,152,39)" fg:x="22990" fg:w="17"/><text x="34.4161%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (26 samples, 0.04%)</title><rect x="34.1913%" y="885" width="0.0386%" height="15" fill="rgb(234,160,15)" fg:x="23007" fg:w="26"/><text x="34.4413%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (209 samples, 0.31%)</title><rect x="33.9357%" y="901" width="0.3106%" height="15" fill="rgb(237,34,20)" fg:x="22835" fg:w="209"/><text x="34.1857%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (11 samples, 0.02%)</title><rect x="34.2300%" y="885" width="0.0163%" height="15" fill="rgb(229,97,13)" fg:x="23033" fg:w="11"/><text x="34.4800%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Compare (240 samples, 0.36%)</title><rect x="33.8911%" y="917" width="0.3567%" height="15" fill="rgb(234,71,50)" fg:x="22805" fg:w="240"/><text x="34.1411%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Seek (15 samples, 0.02%)</title><rect x="34.2612%" y="869" width="0.0223%" height="15" fill="rgb(253,155,4)" fg:x="23054" fg:w="15"/><text x="34.5112%" y="879.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (7 samples, 0.01%)</title><rect x="34.2835%" y="869" width="0.0104%" height="15" fill="rgb(222,185,37)" fg:x="23069" fg:w="7"/><text x="34.5335%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (38 samples, 0.06%)</title><rect x="34.2478%" y="917" width="0.0565%" height="15" fill="rgb(251,177,13)" fg:x="23045" fg:w="38"/><text x="34.4978%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (35 samples, 0.05%)</title><rect x="34.2523%" y="901" width="0.0520%" height="15" fill="rgb(250,179,40)" fg:x="23048" fg:w="35"/><text x="34.5023%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (35 samples, 0.05%)</title><rect x="34.2523%" y="885" width="0.0520%" height="15" fill="rgb(242,44,2)" fg:x="23048" fg:w="35"/><text x="34.5023%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (7 samples, 0.01%)</title><rect x="34.3043%" y="917" width="0.0104%" height="15" fill="rgb(216,177,13)" fg:x="23083" fg:w="7"/><text x="34.5543%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (19 samples, 0.03%)</title><rect x="34.3147%" y="917" width="0.0282%" height="15" fill="rgb(216,106,43)" fg:x="23090" fg:w="19"/><text x="34.5647%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Seek (349 samples, 0.52%)</title><rect x="33.8347%" y="933" width="0.5187%" height="15" fill="rgb(216,183,2)" fg:x="22767" fg:w="349"/><text x="34.0847%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Seek (902 samples, 1.34%)</title><rect x="33.0485%" y="949" width="1.3405%" height="15" fill="rgb(249,75,3)" fg:x="22238" fg:w="902"/><text x="33.2985%" y="959.50"></text></g><g><title>leveldb::Slice::Slice (23 samples, 0.03%)</title><rect x="34.3548%" y="933" width="0.0342%" height="15" fill="rgb(219,67,39)" fg:x="23117" fg:w="23"/><text x="34.6048%" y="943.50"></text></g><g><title>leveldb::Block::Iter::~Iter (19 samples, 0.03%)</title><rect x="34.3994%" y="949" width="0.0282%" height="15" fill="rgb(253,228,2)" fg:x="23147" fg:w="19"/><text x="34.6494%" y="959.50"></text></g><g><title>leveldb::Block::Iter::~Iter (19 samples, 0.03%)</title><rect x="34.3994%" y="933" width="0.0282%" height="15" fill="rgb(235,138,27)" fg:x="23147" fg:w="19"/><text x="34.6494%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Iter (17 samples, 0.03%)</title><rect x="34.4856%" y="933" width="0.0253%" height="15" fill="rgb(236,97,51)" fg:x="23205" fg:w="17"/><text x="34.7356%" y="943.50"></text></g><g><title>leveldb::Block::NewIterator (60 samples, 0.09%)</title><rect x="34.4276%" y="949" width="0.0892%" height="15" fill="rgb(240,80,30)" fg:x="23166" fg:w="60"/><text x="34.6776%" y="959.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (10 samples, 0.01%)</title><rect x="34.5168%" y="949" width="0.0149%" height="15" fill="rgb(230,178,19)" fg:x="23226" fg:w="10"/><text x="34.7668%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (7 samples, 0.01%)</title><rect x="34.5391%" y="917" width="0.0104%" height="15" fill="rgb(210,190,27)" fg:x="23241" fg:w="7"/><text x="34.7891%" y="927.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (7 samples, 0.01%)</title><rect x="34.5510%" y="917" width="0.0104%" height="15" fill="rgb(222,107,31)" fg:x="23249" fg:w="7"/><text x="34.8010%" y="927.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (21 samples, 0.03%)</title><rect x="34.5316%" y="949" width="0.0312%" height="15" fill="rgb(216,127,34)" fg:x="23236" fg:w="21"/><text x="34.7816%" y="959.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (16 samples, 0.02%)</title><rect x="34.5391%" y="933" width="0.0238%" height="15" fill="rgb(234,116,52)" fg:x="23241" fg:w="16"/><text x="34.7891%" y="943.50"></text></g><g><title>leveldb::GetVarint64Ptr (15 samples, 0.02%)</title><rect x="34.5703%" y="949" width="0.0223%" height="15" fill="rgb(222,124,15)" fg:x="23262" fg:w="15"/><text x="34.8203%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (154 samples, 0.23%)</title><rect x="34.6015%" y="949" width="0.2289%" height="15" fill="rgb(231,179,28)" fg:x="23283" fg:w="154"/><text x="34.8515%" y="959.50"></text></g><g><title>leveldb::ExtractUserKey (8 samples, 0.01%)</title><rect x="34.8185%" y="933" width="0.0119%" height="15" fill="rgb(226,93,45)" fg:x="23429" fg:w="8"/><text x="35.0685%" y="943.50"></text></g><g><title>Lookup (7 samples, 0.01%)</title><rect x="34.8601%" y="933" width="0.0104%" height="15" fill="rgb(215,8,51)" fg:x="23457" fg:w="7"/><text x="35.1101%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (7 samples, 0.01%)</title><rect x="34.8601%" y="917" width="0.0104%" height="15" fill="rgb(223,106,5)" fg:x="23457" fg:w="7"/><text x="35.1101%" y="927.50"></text></g><g><title>_mm_crc32_u64 (10 samples, 0.01%)</title><rect x="34.8987%" y="917" width="0.0149%" height="15" fill="rgb(250,191,5)" fg:x="23483" fg:w="10"/><text x="35.1487%" y="927.50"></text></g><g><title>crc32c::ExtendSse42 (29 samples, 0.04%)</title><rect x="34.8720%" y="933" width="0.0431%" height="15" fill="rgb(242,132,44)" fg:x="23465" fg:w="29"/><text x="35.1220%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (23 samples, 0.03%)</title><rect x="34.9151%" y="933" width="0.0342%" height="15" fill="rgb(251,152,29)" fg:x="23494" fg:w="23"/><text x="35.1651%" y="943.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (9 samples, 0.01%)</title><rect x="34.9552%" y="933" width="0.0134%" height="15" fill="rgb(218,179,5)" fg:x="23521" fg:w="9"/><text x="35.2052%" y="943.50"></text></g><g><title>leveldb::GetVarint64 (7 samples, 0.01%)</title><rect x="34.9701%" y="933" width="0.0104%" height="15" fill="rgb(227,67,19)" fg:x="23531" fg:w="7"/><text x="35.2201%" y="943.50"></text></g><g><title>leveldb::GetVarint64Ptr (8 samples, 0.01%)</title><rect x="34.9805%" y="933" width="0.0119%" height="15" fill="rgb(233,119,31)" fg:x="23538" fg:w="8"/><text x="35.2305%" y="943.50"></text></g><g><title>leveldb::crc32c::Unmask (61 samples, 0.09%)</title><rect x="35.0280%" y="917" width="0.0907%" height="15" fill="rgb(241,120,22)" fg:x="23570" fg:w="61"/><text x="35.2780%" y="927.50"></text></g><g><title>[unknown] (60 samples, 0.09%)</title><rect x="35.0295%" y="901" width="0.0892%" height="15" fill="rgb(224,102,30)" fg:x="23571" fg:w="60"/><text x="35.2795%" y="911.50"></text></g><g><title>[unknown] (60 samples, 0.09%)</title><rect x="35.0295%" y="885" width="0.0892%" height="15" fill="rgb(210,164,37)" fg:x="23571" fg:w="60"/><text x="35.2795%" y="895.50"></text></g><g><title>[unknown] (59 samples, 0.09%)</title><rect x="35.0310%" y="869" width="0.0877%" height="15" fill="rgb(226,191,16)" fg:x="23572" fg:w="59"/><text x="35.2810%" y="879.50"></text></g><g><title>[unknown] (59 samples, 0.09%)</title><rect x="35.0310%" y="853" width="0.0877%" height="15" fill="rgb(214,40,45)" fg:x="23572" fg:w="59"/><text x="35.2810%" y="863.50"></text></g><g><title>[unknown] (55 samples, 0.08%)</title><rect x="35.0369%" y="837" width="0.0817%" height="15" fill="rgb(244,29,26)" fg:x="23576" fg:w="55"/><text x="35.2869%" y="847.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="35.0444%" y="821" width="0.0743%" height="15" fill="rgb(216,16,5)" fg:x="23581" fg:w="50"/><text x="35.2944%" y="831.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="35.0444%" y="805" width="0.0743%" height="15" fill="rgb(249,76,35)" fg:x="23581" fg:w="50"/><text x="35.2944%" y="815.50"></text></g><g><title>[unknown] (38 samples, 0.06%)</title><rect x="35.0622%" y="789" width="0.0565%" height="15" fill="rgb(207,11,44)" fg:x="23593" fg:w="38"/><text x="35.3122%" y="799.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="35.0889%" y="773" width="0.0297%" height="15" fill="rgb(228,190,49)" fg:x="23611" fg:w="20"/><text x="35.3389%" y="783.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="35.1053%" y="757" width="0.0134%" height="15" fill="rgb(214,173,12)" fg:x="23622" fg:w="9"/><text x="35.3553%" y="767.50"></text></g><g><title>_mm_crc32_u64 (608 samples, 0.90%)</title><rect x="35.8008%" y="885" width="0.9036%" height="15" fill="rgb(218,26,35)" fg:x="24090" fg:w="608"/><text x="36.0508%" y="895.50"></text></g><g><title>crc32c::ExtendSse42 (1,064 samples, 1.58%)</title><rect x="35.1246%" y="901" width="1.5812%" height="15" fill="rgb(220,200,19)" fg:x="23635" fg:w="1064"/><text x="35.3746%" y="911.50"></text></g><g><title>leveldb::ReadBlock (7 samples, 0.01%)</title><rect x="36.7059%" y="901" width="0.0104%" height="15" fill="rgb(239,95,49)" fg:x="24699" fg:w="7"/><text x="36.9559%" y="911.50"></text></g><g><title>leveldb::crc32c::Value (1,080 samples, 1.61%)</title><rect x="35.1187%" y="917" width="1.6050%" height="15" fill="rgb(235,85,53)" fg:x="23631" fg:w="1080"/><text x="35.3687%" y="927.50"></text></g><g><title>leveldb::ReadBlock (1,170 samples, 1.74%)</title><rect x="34.9998%" y="933" width="1.7388%" height="15" fill="rgb(233,133,31)" fg:x="23551" fg:w="1170"/><text x="35.2498%" y="943.50"></text></g><g><title>leveldb::Table::BlockReader (12 samples, 0.02%)</title><rect x="36.7385%" y="933" width="0.0178%" height="15" fill="rgb(218,25,20)" fg:x="24721" fg:w="12"/><text x="36.9885%" y="943.50"></text></g><g><title>leveldb::Table::BlockReader (1,281 samples, 1.90%)</title><rect x="34.8541%" y="949" width="1.9037%" height="15" fill="rgb(252,210,38)" fg:x="23453" fg:w="1281"/><text x="35.1041%" y="959.50">l..</text></g><g><title>leveldb::Table::InternalGet (35 samples, 0.05%)</title><rect x="36.7579%" y="949" width="0.0520%" height="15" fill="rgb(242,134,21)" fg:x="24734" fg:w="35"/><text x="37.0079%" y="959.50"></text></g><g><title>leveldb::Status::Status (7 samples, 0.01%)</title><rect x="36.7995%" y="933" width="0.0104%" height="15" fill="rgb(213,28,48)" fg:x="24762" fg:w="7"/><text x="37.0495%" y="943.50"></text></g><g><title>leveldb::Table::InternalGet (3,114 samples, 4.63%)</title><rect x="32.1880%" y="965" width="4.6278%" height="15" fill="rgb(250,196,2)" fg:x="21659" fg:w="3114"/><text x="32.4380%" y="975.50">level..</text></g><g><title>Lookup (15 samples, 0.02%)</title><rect x="36.8158%" y="949" width="0.0223%" height="15" fill="rgb(227,5,17)" fg:x="24773" fg:w="15"/><text x="37.0658%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (10 samples, 0.01%)</title><rect x="36.8233%" y="933" width="0.0149%" height="15" fill="rgb(221,226,24)" fg:x="24778" fg:w="10"/><text x="37.0733%" y="943.50"></text></g><g><title>Lookup (9 samples, 0.01%)</title><rect x="36.8455%" y="917" width="0.0134%" height="15" fill="rgb(211,5,48)" fg:x="24793" fg:w="9"/><text x="37.0955%" y="927.50"></text></g><g><title>FindPointer (9 samples, 0.01%)</title><rect x="36.8455%" y="901" width="0.0134%" height="15" fill="rgb(219,150,6)" fg:x="24793" fg:w="9"/><text x="37.0955%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (11 samples, 0.02%)</title><rect x="36.8441%" y="949" width="0.0163%" height="15" fill="rgb(251,46,16)" fg:x="24792" fg:w="11"/><text x="37.0941%" y="959.50"></text></g><g><title>Lookup (10 samples, 0.01%)</title><rect x="36.8455%" y="933" width="0.0149%" height="15" fill="rgb(220,204,40)" fg:x="24793" fg:w="10"/><text x="37.0955%" y="943.50"></text></g><g><title>leveldb::TableCache::FindTable (15 samples, 0.02%)</title><rect x="36.8708%" y="949" width="0.0223%" height="15" fill="rgb(211,85,2)" fg:x="24810" fg:w="15"/><text x="37.1208%" y="959.50"></text></g><g><title>leveldb::Version::Get (3,442 samples, 5.12%)</title><rect x="31.7957%" y="1029" width="5.1152%" height="15" fill="rgb(229,17,7)" fg:x="21395" fg:w="3442"/><text x="32.0457%" y="1039.50">leveld..</text></g><g><title>leveldb::Version::ForEachOverlapping (3,418 samples, 5.08%)</title><rect x="31.8314%" y="1013" width="5.0796%" height="15" fill="rgb(239,72,28)" fg:x="21419" fg:w="3418"/><text x="32.0814%" y="1023.50">leveld..</text></g><g><title>leveldb::Version::Get (3,225 samples, 4.79%)</title><rect x="32.1182%" y="997" width="4.7928%" height="15" fill="rgb(230,47,54)" fg:x="21612" fg:w="3225"/><text x="32.3682%" y="1007.50">leveld..</text></g><g><title>leveldb::TableCache::Get (3,214 samples, 4.78%)</title><rect x="32.1345%" y="981" width="4.7764%" height="15" fill="rgb(214,50,8)" fg:x="21623" fg:w="3214"/><text x="32.3845%" y="991.50">leveld..</text></g><g><title>leveldb::TableCache::FindTable (64 samples, 0.10%)</title><rect x="36.8158%" y="965" width="0.0951%" height="15" fill="rgb(216,198,43)" fg:x="24773" fg:w="64"/><text x="37.0658%" y="975.50"></text></g><g><title>leveldb::DBImpl::Get (3,485 samples, 5.18%)</title><rect x="31.7481%" y="1045" width="5.1792%" height="15" fill="rgb(234,20,35)" fg:x="21363" fg:w="3485"/><text x="31.9981%" y="1055.50">leveld..</text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (41 samples, 0.06%)</title><rect x="36.9630%" y="1029" width="0.0609%" height="15" fill="rgb(254,45,19)" fg:x="24872" fg:w="41"/><text x="37.2130%" y="1039.50"></text></g><g><title>decltype  (19 samples, 0.03%)</title><rect x="36.9956%" y="1013" width="0.0282%" height="15" fill="rgb(219,14,44)" fg:x="24894" fg:w="19"/><text x="37.2456%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (19 samples, 0.03%)</title><rect x="36.9956%" y="997" width="0.0282%" height="15" fill="rgb(217,220,26)" fg:x="24894" fg:w="19"/><text x="37.2456%" y="1007.50"></text></g><g><title>decltype (19 samples, 0.03%)</title><rect x="36.9956%" y="981" width="0.0282%" height="15" fill="rgb(213,158,28)" fg:x="24894" fg:w="19"/><text x="37.2456%" y="991.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (3,561 samples, 5.29%)</title><rect x="31.7348%" y="1061" width="5.2921%" height="15" fill="rgb(252,51,52)" fg:x="21354" fg:w="3561"/><text x="31.9848%" y="1071.50">CDBWra..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (52 samples, 0.08%)</title><rect x="36.9496%" y="1045" width="0.0773%" height="15" fill="rgb(246,89,16)" fg:x="24863" fg:w="52"/><text x="37.1996%" y="1055.50"></text></g><g><title>CCoinsViewDB::GetCoin (3,571 samples, 5.31%)</title><rect x="31.7333%" y="1077" width="5.3070%" height="15" fill="rgb(216,158,49)" fg:x="21353" fg:w="3571"/><text x="31.9833%" y="1087.50">CCoins..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (7 samples, 0.01%)</title><rect x="37.0298%" y="1061" width="0.0104%" height="15" fill="rgb(236,107,19)" fg:x="24917" fg:w="7"/><text x="37.2798%" y="1071.50"></text></g><g><title>CCoinsViewDB::GetCoin (10 samples, 0.01%)</title><rect x="37.0417%" y="869" width="0.0149%" height="15" fill="rgb(228,185,30)" fg:x="24925" fg:w="10"/><text x="37.2917%" y="879.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (10 samples, 0.01%)</title><rect x="37.0417%" y="853" width="0.0149%" height="15" fill="rgb(246,134,8)" fg:x="24925" fg:w="10"/><text x="37.2917%" y="863.50"></text></g><g><title>DataStream::Xor (7 samples, 0.01%)</title><rect x="37.0462%" y="837" width="0.0104%" height="15" fill="rgb(214,143,50)" fg:x="24928" fg:w="7"/><text x="37.2962%" y="847.50"></text></g><g><title>util::Xor (7 samples, 0.01%)</title><rect x="37.0462%" y="821" width="0.0104%" height="15" fill="rgb(228,75,8)" fg:x="24928" fg:w="7"/><text x="37.2962%" y="831.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (12 samples, 0.02%)</title><rect x="37.0417%" y="917" width="0.0178%" height="15" fill="rgb(207,175,4)" fg:x="24925" fg:w="12"/><text x="37.2917%" y="927.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (12 samples, 0.02%)</title><rect x="37.0417%" y="901" width="0.0178%" height="15" fill="rgb(205,108,24)" fg:x="24925" fg:w="12"/><text x="37.2917%" y="911.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (12 samples, 0.02%)</title><rect x="37.0417%" y="885" width="0.0178%" height="15" fill="rgb(244,120,49)" fg:x="24925" fg:w="12"/><text x="37.2917%" y="895.50"></text></g><g><title>DataStream::DataStream (8 samples, 0.01%)</title><rect x="37.0610%" y="853" width="0.0119%" height="15" fill="rgb(223,47,38)" fg:x="24938" fg:w="8"/><text x="37.3110%" y="863.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (8 samples, 0.01%)</title><rect x="37.0610%" y="837" width="0.0119%" height="15" fill="rgb(229,179,11)" fg:x="24938" fg:w="8"/><text x="37.3110%" y="847.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (8 samples, 0.01%)</title><rect x="37.0610%" y="821" width="0.0119%" height="15" fill="rgb(231,122,1)" fg:x="24938" fg:w="8"/><text x="37.3110%" y="831.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (7 samples, 0.01%)</title><rect x="37.0625%" y="805" width="0.0104%" height="15" fill="rgb(245,119,9)" fg:x="24939" fg:w="7"/><text x="37.3125%" y="815.50"></text></g><g><title>CCoinsViewDB::GetCoin (20 samples, 0.03%)</title><rect x="37.0595%" y="885" width="0.0297%" height="15" fill="rgb(241,163,25)" fg:x="24937" fg:w="20"/><text x="37.3095%" y="895.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (20 samples, 0.03%)</title><rect x="37.0595%" y="869" width="0.0297%" height="15" fill="rgb(217,214,3)" fg:x="24937" fg:w="20"/><text x="37.3095%" y="879.50"></text></g><g><title>DataStream::Xor (11 samples, 0.02%)</title><rect x="37.0729%" y="853" width="0.0163%" height="15" fill="rgb(240,86,28)" fg:x="24946" fg:w="11"/><text x="37.3229%" y="863.50"></text></g><g><title>util::Xor (11 samples, 0.02%)</title><rect x="37.0729%" y="837" width="0.0163%" height="15" fill="rgb(215,47,9)" fg:x="24946" fg:w="11"/><text x="37.3229%" y="847.50"></text></g><g><title>DecompressAmount (7 samples, 0.01%)</title><rect x="37.0893%" y="885" width="0.0104%" height="15" fill="rgb(252,25,45)" fg:x="24957" fg:w="7"/><text x="37.3393%" y="895.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (8 samples, 0.01%)</title><rect x="37.1026%" y="885" width="0.0119%" height="15" fill="rgb(251,164,9)" fg:x="24966" fg:w="8"/><text x="37.3526%" y="895.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (8 samples, 0.01%)</title><rect x="37.1145%" y="885" width="0.0119%" height="15" fill="rgb(233,194,0)" fg:x="24974" fg:w="8"/><text x="37.3645%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&amp;) (8 samples, 0.01%)</title><rect x="37.1324%" y="869" width="0.0119%" height="15" fill="rgb(249,111,24)" fg:x="24986" fg:w="8"/><text x="37.3824%" y="879.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="37.1324%" y="853" width="0.0119%" height="15" fill="rgb(250,223,3)" fg:x="24986" fg:w="8"/><text x="37.3824%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (8 samples, 0.01%)</title><rect x="37.1324%" y="837" width="0.0119%" height="15" fill="rgb(236,178,37)" fg:x="24986" fg:w="8"/><text x="37.3824%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (8 samples, 0.01%)</title><rect x="37.1324%" y="821" width="0.0119%" height="15" fill="rgb(241,158,50)" fg:x="24986" fg:w="8"/><text x="37.3824%" y="831.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (77 samples, 0.11%)</title><rect x="37.0417%" y="1013" width="0.1144%" height="15" fill="rgb(213,121,41)" fg:x="24925" fg:w="77"/><text x="37.2917%" y="1023.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (77 samples, 0.11%)</title><rect x="37.0417%" y="997" width="0.1144%" height="15" fill="rgb(240,92,3)" fg:x="24925" fg:w="77"/><text x="37.2917%" y="1007.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (77 samples, 0.11%)</title><rect x="37.0417%" y="981" width="0.1144%" height="15" fill="rgb(205,123,3)" fg:x="24925" fg:w="77"/><text x="37.2917%" y="991.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (77 samples, 0.11%)</title><rect x="37.0417%" y="965" width="0.1144%" height="15" fill="rgb(205,97,47)" fg:x="24925" fg:w="77"/><text x="37.2917%" y="975.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (77 samples, 0.11%)</title><rect x="37.0417%" y="949" width="0.1144%" height="15" fill="rgb(247,152,14)" fg:x="24925" fg:w="77"/><text x="37.2917%" y="959.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (77 samples, 0.11%)</title><rect x="37.0417%" y="933" width="0.1144%" height="15" fill="rgb(248,195,53)" fg:x="24925" fg:w="77"/><text x="37.2917%" y="943.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (65 samples, 0.10%)</title><rect x="37.0595%" y="917" width="0.0966%" height="15" fill="rgb(226,201,16)" fg:x="24937" fg:w="65"/><text x="37.3095%" y="927.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (65 samples, 0.10%)</title><rect x="37.0595%" y="901" width="0.0966%" height="15" fill="rgb(205,98,0)" fg:x="24937" fg:w="65"/><text x="37.3095%" y="911.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (20 samples, 0.03%)</title><rect x="37.1264%" y="885" width="0.0297%" height="15" fill="rgb(214,191,48)" fg:x="24982" fg:w="20"/><text x="37.3764%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (78 samples, 0.12%)</title><rect x="37.0417%" y="1061" width="0.1159%" height="15" fill="rgb(237,112,39)" fg:x="24925" fg:w="78"/><text x="37.2917%" y="1071.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (78 samples, 0.12%)</title><rect x="37.0417%" y="1045" width="0.1159%" height="15" fill="rgb(247,203,27)" fg:x="24925" fg:w="78"/><text x="37.2917%" y="1055.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (78 samples, 0.12%)</title><rect x="37.0417%" y="1029" width="0.1159%" height="15" fill="rgb(235,124,28)" fg:x="24925" fg:w="78"/><text x="37.2917%" y="1039.50"></text></g><g><title>DataStream::Xor (8 samples, 0.01%)</title><rect x="37.1651%" y="1061" width="0.0119%" height="15" fill="rgb(208,207,46)" fg:x="25008" fg:w="8"/><text x="37.4151%" y="1071.50"></text></g><g><title>util::Xor (8 samples, 0.01%)</title><rect x="37.1651%" y="1045" width="0.0119%" height="15" fill="rgb(234,176,4)" fg:x="25008" fg:w="8"/><text x="37.4151%" y="1055.50"></text></g><g><title>CCoinsViewDB::GetCoin (29 samples, 0.04%)</title><rect x="37.1933%" y="837" width="0.0431%" height="15" fill="rgb(230,133,28)" fg:x="25027" fg:w="29"/><text x="37.4433%" y="847.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (11 samples, 0.02%)</title><rect x="37.2364%" y="837" width="0.0163%" height="15" fill="rgb(211,137,40)" fg:x="25056" fg:w="11"/><text x="37.4864%" y="847.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (8 samples, 0.01%)</title><rect x="37.2409%" y="821" width="0.0119%" height="15" fill="rgb(254,35,13)" fg:x="25059" fg:w="8"/><text x="37.4909%" y="831.50"></text></g><g><title>operator (8 samples, 0.01%)</title><rect x="37.2409%" y="805" width="0.0119%" height="15" fill="rgb(225,49,51)" fg:x="25059" fg:w="8"/><text x="37.4909%" y="815.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (43 samples, 0.06%)</title><rect x="37.1933%" y="949" width="0.0639%" height="15" fill="rgb(251,10,15)" fg:x="25027" fg:w="43"/><text x="37.4433%" y="959.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (43 samples, 0.06%)</title><rect x="37.1933%" y="933" width="0.0639%" height="15" fill="rgb(228,207,15)" fg:x="25027" fg:w="43"/><text x="37.4433%" y="943.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (43 samples, 0.06%)</title><rect x="37.1933%" y="917" width="0.0639%" height="15" fill="rgb(241,99,19)" fg:x="25027" fg:w="43"/><text x="37.4433%" y="927.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (43 samples, 0.06%)</title><rect x="37.1933%" y="901" width="0.0639%" height="15" fill="rgb(207,104,49)" fg:x="25027" fg:w="43"/><text x="37.4433%" y="911.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (43 samples, 0.06%)</title><rect x="37.1933%" y="885" width="0.0639%" height="15" fill="rgb(234,99,18)" fg:x="25027" fg:w="43"/><text x="37.4433%" y="895.50"></text></g><g><title>DataStream::write (43 samples, 0.06%)</title><rect x="37.1933%" y="869" width="0.0639%" height="15" fill="rgb(213,191,49)" fg:x="25027" fg:w="43"/><text x="37.4433%" y="879.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (43 samples, 0.06%)</title><rect x="37.1933%" y="853" width="0.0639%" height="15" fill="rgb(210,226,19)" fg:x="25027" fg:w="43"/><text x="37.4433%" y="863.50"></text></g><g><title>SipHashUint256Extra (29 samples, 0.04%)</title><rect x="37.2587%" y="885" width="0.0431%" height="15" fill="rgb(229,97,18)" fg:x="25071" fg:w="29"/><text x="37.5087%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (13 samples, 0.02%)</title><rect x="37.2825%" y="869" width="0.0193%" height="15" fill="rgb(211,167,15)" fg:x="25087" fg:w="13"/><text x="37.5325%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (13 samples, 0.02%)</title><rect x="37.2825%" y="853" width="0.0193%" height="15" fill="rgb(210,169,34)" fg:x="25087" fg:w="13"/><text x="37.5325%" y="863.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (87 samples, 0.13%)</title><rect x="37.1859%" y="1061" width="0.1293%" height="15" fill="rgb(241,121,31)" fg:x="25022" fg:w="87"/><text x="37.4359%" y="1071.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (87 samples, 0.13%)</title><rect x="37.1859%" y="1045" width="0.1293%" height="15" fill="rgb(232,40,11)" fg:x="25022" fg:w="87"/><text x="37.4359%" y="1055.50"></text></g><g><title>Serialize&lt;DataStream&gt; (87 samples, 0.13%)</title><rect x="37.1859%" y="1029" width="0.1293%" height="15" fill="rgb(205,86,26)" fg:x="25022" fg:w="87"/><text x="37.4359%" y="1039.50"></text></g><g><title>Ser&lt;DataStream&gt; (87 samples, 0.13%)</title><rect x="37.1859%" y="1013" width="0.1293%" height="15" fill="rgb(231,126,28)" fg:x="25022" fg:w="87"/><text x="37.4359%" y="1023.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (87 samples, 0.13%)</title><rect x="37.1859%" y="997" width="0.1293%" height="15" fill="rgb(219,221,18)" fg:x="25022" fg:w="87"/><text x="37.4359%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (87 samples, 0.13%)</title><rect x="37.1859%" y="981" width="0.1293%" height="15" fill="rgb(211,40,0)" fg:x="25022" fg:w="87"/><text x="37.4359%" y="991.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (87 samples, 0.13%)</title><rect x="37.1859%" y="965" width="0.1293%" height="15" fill="rgb(239,85,43)" fg:x="25022" fg:w="87"/><text x="37.4359%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (39 samples, 0.06%)</title><rect x="37.2572%" y="949" width="0.0580%" height="15" fill="rgb(231,55,21)" fg:x="25070" fg:w="39"/><text x="37.5072%" y="959.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (39 samples, 0.06%)</title><rect x="37.2572%" y="933" width="0.0580%" height="15" fill="rgb(225,184,43)" fg:x="25070" fg:w="39"/><text x="37.5072%" y="943.50"></text></g><g><title>DataStream::write (39 samples, 0.06%)</title><rect x="37.2572%" y="917" width="0.0580%" height="15" fill="rgb(251,158,41)" fg:x="25070" fg:w="39"/><text x="37.5072%" y="927.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (39 samples, 0.06%)</title><rect x="37.2572%" y="901" width="0.0580%" height="15" fill="rgb(234,159,37)" fg:x="25070" fg:w="39"/><text x="37.5072%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (9 samples, 0.01%)</title><rect x="37.3018%" y="885" width="0.0134%" height="15" fill="rgb(216,204,22)" fg:x="25100" fg:w="9"/><text x="37.5518%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (9 samples, 0.01%)</title><rect x="37.3018%" y="869" width="0.0134%" height="15" fill="rgb(214,17,3)" fg:x="25100" fg:w="9"/><text x="37.5518%" y="879.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="37.3033%" y="853" width="0.0119%" height="15" fill="rgb(212,111,17)" fg:x="25101" fg:w="8"/><text x="37.5533%" y="863.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="37.3033%" y="837" width="0.0119%" height="15" fill="rgb(221,157,24)" fg:x="25101" fg:w="8"/><text x="37.5533%" y="847.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.01%)</title><rect x="37.3033%" y="821" width="0.0119%" height="15" fill="rgb(252,16,13)" fg:x="25101" fg:w="8"/><text x="37.5533%" y="831.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.01%)</title><rect x="37.3033%" y="805" width="0.0119%" height="15" fill="rgb(221,62,2)" fg:x="25101" fg:w="8"/><text x="37.5533%" y="815.50"></text></g><g><title>CCoinsViewDB::GetCoin (3,758 samples, 5.58%)</title><rect x="31.7333%" y="1093" width="5.5849%" height="15" fill="rgb(247,87,22)" fg:x="21353" fg:w="3758"/><text x="31.9833%" y="1103.50">CCoinsV..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (187 samples, 0.28%)</title><rect x="37.0402%" y="1077" width="0.2779%" height="15" fill="rgb(215,73,9)" fg:x="24924" fg:w="187"/><text x="37.2902%" y="1087.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (9 samples, 0.01%)</title><rect x="37.3181%" y="1093" width="0.0134%" height="15" fill="rgb(207,175,33)" fg:x="25111" fg:w="9"/><text x="37.5681%" y="1103.50"></text></g><g><title>SipHashUint256Extra (182 samples, 0.27%)</title><rect x="37.3360%" y="1093" width="0.2705%" height="15" fill="rgb(243,129,54)" fg:x="25123" fg:w="182"/><text x="37.5860%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (71 samples, 0.11%)</title><rect x="37.5009%" y="1077" width="0.1055%" height="15" fill="rgb(227,119,45)" fg:x="25234" fg:w="71"/><text x="37.7509%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (71 samples, 0.11%)</title><rect x="37.5009%" y="1061" width="0.1055%" height="15" fill="rgb(205,109,36)" fg:x="25234" fg:w="71"/><text x="37.7509%" y="1071.50"></text></g><g><title>leveldb::DBImpl::Get (8 samples, 0.01%)</title><rect x="37.6064%" y="1093" width="0.0119%" height="15" fill="rgb(205,6,39)" fg:x="25305" fg:w="8"/><text x="37.8564%" y="1103.50"></text></g><g><title>CCoinsViewBacked::GetCoin (3,977 samples, 5.91%)</title><rect x="31.7333%" y="1109" width="5.9103%" height="15" fill="rgb(221,32,16)" fg:x="21353" fg:w="3977"/><text x="31.9833%" y="1119.50">CCoinsVi..</text></g><g><title>SipHashUint256Extra (111 samples, 0.16%)</title><rect x="37.6436%" y="1109" width="0.1650%" height="15" fill="rgb(228,144,50)" fg:x="25330" fg:w="111"/><text x="37.8936%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (39 samples, 0.06%)</title><rect x="37.7506%" y="1093" width="0.0580%" height="15" fill="rgb(229,201,53)" fg:x="25402" fg:w="39"/><text x="38.0006%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (39 samples, 0.06%)</title><rect x="37.7506%" y="1077" width="0.0580%" height="15" fill="rgb(249,153,27)" fg:x="25402" fg:w="39"/><text x="38.0006%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (26 samples, 0.04%)</title><rect x="37.8086%" y="1109" width="0.0386%" height="15" fill="rgb(227,106,25)" fg:x="25441" fg:w="26"/><text x="38.0586%" y="1119.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (4,115 samples, 6.12%)</title><rect x="31.7333%" y="1157" width="6.1154%" height="15" fill="rgb(230,65,29)" fg:x="21353" fg:w="4115"/><text x="31.9833%" y="1167.50">CCoinsVi..</text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (4,115 samples, 6.12%)</title><rect x="31.7333%" y="1141" width="6.1154%" height="15" fill="rgb(221,57,46)" fg:x="21353" fg:w="4115"/><text x="31.9833%" y="1151.50">ExecuteB..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (4,115 samples, 6.12%)</title><rect x="31.7333%" y="1125" width="6.1154%" height="15" fill="rgb(229,161,17)" fg:x="21353" fg:w="4115"/><text x="31.9833%" y="1135.50">CCoinsVi..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.03%)</title><rect x="37.8531%" y="1157" width="0.0268%" height="15" fill="rgb(222,213,11)" fg:x="25471" fg:w="18"/><text x="38.1031%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (36 samples, 0.05%)</title><rect x="37.8918%" y="1109" width="0.0535%" height="15" fill="rgb(235,35,13)" fg:x="25497" fg:w="36"/><text x="38.1418%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (14 samples, 0.02%)</title><rect x="37.9245%" y="1093" width="0.0208%" height="15" fill="rgb(233,158,34)" fg:x="25519" fg:w="14"/><text x="38.1745%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (10 samples, 0.01%)</title><rect x="37.9304%" y="1077" width="0.0149%" height="15" fill="rgb(215,151,48)" fg:x="25523" fg:w="10"/><text x="38.1804%" y="1087.50"></text></g><g><title>SipHashUint256Extra (349 samples, 0.52%)</title><rect x="37.9468%" y="1109" width="0.5187%" height="15" fill="rgb(229,84,14)" fg:x="25534" fg:w="349"/><text x="38.1968%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (130 samples, 0.19%)</title><rect x="38.2722%" y="1093" width="0.1932%" height="15" fill="rgb(229,68,14)" fg:x="25753" fg:w="130"/><text x="38.5222%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (130 samples, 0.19%)</title><rect x="38.2722%" y="1077" width="0.1932%" height="15" fill="rgb(243,106,26)" fg:x="25753" fg:w="130"/><text x="38.5222%" y="1087.50"></text></g><g><title>[[igc]] (13 samples, 0.02%)</title><rect x="38.5368%" y="997" width="0.0193%" height="15" fill="rgb(206,45,38)" fg:x="25931" fg:w="13"/><text x="38.7868%" y="1007.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="38.5412%" y="981" width="0.0149%" height="15" fill="rgb(226,6,15)" fg:x="25934" fg:w="10"/><text x="38.7912%" y="991.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="38.5412%" y="965" width="0.0149%" height="15" fill="rgb(232,22,54)" fg:x="25934" fg:w="10"/><text x="38.7912%" y="975.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="38.5442%" y="949" width="0.0119%" height="15" fill="rgb(229,222,32)" fg:x="25936" fg:w="8"/><text x="38.7942%" y="959.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="38.5457%" y="933" width="0.0104%" height="15" fill="rgb(228,62,29)" fg:x="25937" fg:w="7"/><text x="38.7957%" y="943.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="38.5368%" y="1093" width="0.0297%" height="15" fill="rgb(251,103,34)" fg:x="25931" fg:w="20"/><text x="38.7868%" y="1103.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="38.5368%" y="1077" width="0.0297%" height="15" fill="rgb(233,12,30)" fg:x="25931" fg:w="20"/><text x="38.7868%" y="1087.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="38.5368%" y="1061" width="0.0297%" height="15" fill="rgb(238,52,0)" fg:x="25931" fg:w="20"/><text x="38.7868%" y="1071.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="38.5368%" y="1045" width="0.0297%" height="15" fill="rgb(223,98,5)" fg:x="25931" fg:w="20"/><text x="38.7868%" y="1055.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="38.5368%" y="1029" width="0.0297%" height="15" fill="rgb(228,75,37)" fg:x="25931" fg:w="20"/><text x="38.7868%" y="1039.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="38.5368%" y="1013" width="0.0297%" height="15" fill="rgb(205,115,49)" fg:x="25931" fg:w="20"/><text x="38.7868%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="38.5561%" y="997" width="0.0104%" height="15" fill="rgb(250,154,43)" fg:x="25944" fg:w="7"/><text x="38.8061%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (23 samples, 0.03%)</title><rect x="38.5665%" y="1093" width="0.0342%" height="15" fill="rgb(226,43,29)" fg:x="25951" fg:w="23"/><text x="38.8165%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (23 samples, 0.03%)</title><rect x="38.5665%" y="1077" width="0.0342%" height="15" fill="rgb(249,228,39)" fg:x="25951" fg:w="23"/><text x="38.8165%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (23 samples, 0.03%)</title><rect x="38.5665%" y="1061" width="0.0342%" height="15" fill="rgb(216,79,43)" fg:x="25951" fg:w="23"/><text x="38.8165%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (23 samples, 0.03%)</title><rect x="38.5665%" y="1045" width="0.0342%" height="15" fill="rgb(228,95,12)" fg:x="25951" fg:w="23"/><text x="38.8165%" y="1055.50"></text></g><g><title>[[igc]] (7 samples, 0.01%)</title><rect x="38.6066%" y="885" width="0.0104%" height="15" fill="rgb(249,221,15)" fg:x="25978" fg:w="7"/><text x="38.8566%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (107 samples, 0.16%)</title><rect x="38.4654%" y="1109" width="0.1590%" height="15" fill="rgb(233,34,13)" fg:x="25883" fg:w="107"/><text x="38.7154%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (16 samples, 0.02%)</title><rect x="38.6007%" y="1093" width="0.0238%" height="15" fill="rgb(214,103,39)" fg:x="25974" fg:w="16"/><text x="38.8507%" y="1103.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (16 samples, 0.02%)</title><rect x="38.6007%" y="1077" width="0.0238%" height="15" fill="rgb(251,126,39)" fg:x="25974" fg:w="16"/><text x="38.8507%" y="1087.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (16 samples, 0.02%)</title><rect x="38.6007%" y="1061" width="0.0238%" height="15" fill="rgb(214,216,36)" fg:x="25974" fg:w="16"/><text x="38.8507%" y="1071.50"></text></g><g><title>operator== (16 samples, 0.02%)</title><rect x="38.6007%" y="1045" width="0.0238%" height="15" fill="rgb(220,221,8)" fg:x="25974" fg:w="16"/><text x="38.8507%" y="1055.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (16 samples, 0.02%)</title><rect x="38.6007%" y="1029" width="0.0238%" height="15" fill="rgb(240,216,3)" fg:x="25974" fg:w="16"/><text x="38.8507%" y="1039.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (16 samples, 0.02%)</title><rect x="38.6007%" y="1013" width="0.0238%" height="15" fill="rgb(232,218,17)" fg:x="25974" fg:w="16"/><text x="38.8507%" y="1023.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (16 samples, 0.02%)</title><rect x="38.6007%" y="997" width="0.0238%" height="15" fill="rgb(229,163,45)" fg:x="25974" fg:w="16"/><text x="38.8507%" y="1007.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="38.6036%" y="981" width="0.0208%" height="15" fill="rgb(231,110,42)" fg:x="25976" fg:w="14"/><text x="38.8536%" y="991.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="38.6036%" y="965" width="0.0208%" height="15" fill="rgb(208,170,48)" fg:x="25976" fg:w="14"/><text x="38.8536%" y="975.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="38.6036%" y="949" width="0.0208%" height="15" fill="rgb(239,116,25)" fg:x="25976" fg:w="14"/><text x="38.8536%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="38.6036%" y="933" width="0.0208%" height="15" fill="rgb(219,200,50)" fg:x="25976" fg:w="14"/><text x="38.8536%" y="943.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="38.6036%" y="917" width="0.0208%" height="15" fill="rgb(245,200,0)" fg:x="25976" fg:w="14"/><text x="38.8536%" y="927.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="38.6066%" y="901" width="0.0178%" height="15" fill="rgb(245,119,33)" fg:x="25978" fg:w="12"/><text x="38.8566%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (28 samples, 0.04%)</title><rect x="38.6244%" y="1109" width="0.0416%" height="15" fill="rgb(231,125,12)" fg:x="25990" fg:w="28"/><text x="38.8744%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (13 samples, 0.02%)</title><rect x="38.6467%" y="1093" width="0.0193%" height="15" fill="rgb(216,96,41)" fg:x="26005" fg:w="13"/><text x="38.8967%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (530 samples, 0.79%)</title><rect x="37.8903%" y="1125" width="0.7876%" height="15" fill="rgb(248,43,45)" fg:x="25496" fg:w="530"/><text x="38.1403%" y="1135.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (8 samples, 0.01%)</title><rect x="38.6661%" y="1109" width="0.0119%" height="15" fill="rgb(217,222,7)" fg:x="26018" fg:w="8"/><text x="38.9161%" y="1119.50"></text></g><g><title>SipHashUint256Extra (329 samples, 0.49%)</title><rect x="38.6779%" y="1109" width="0.4889%" height="15" fill="rgb(233,28,6)" fg:x="26026" fg:w="329"/><text x="38.9279%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (170 samples, 0.25%)</title><rect x="38.9142%" y="1093" width="0.2526%" height="15" fill="rgb(231,218,15)" fg:x="26185" fg:w="170"/><text x="39.1642%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (170 samples, 0.25%)</title><rect x="38.9142%" y="1077" width="0.2526%" height="15" fill="rgb(226,171,48)" fg:x="26185" fg:w="170"/><text x="39.1642%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (9 samples, 0.01%)</title><rect x="39.2263%" y="1077" width="0.0134%" height="15" fill="rgb(235,201,9)" fg:x="26395" fg:w="9"/><text x="39.4763%" y="1087.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (9 samples, 0.01%)</title><rect x="39.2263%" y="1061" width="0.0134%" height="15" fill="rgb(217,80,15)" fg:x="26395" fg:w="9"/><text x="39.4763%" y="1071.50"></text></g><g><title>__memset_avx512_unaligned_erms (9 samples, 0.01%)</title><rect x="39.2263%" y="1045" width="0.0134%" height="15" fill="rgb(219,152,8)" fg:x="26395" fg:w="9"/><text x="39.4763%" y="1055.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="39.2278%" y="1029" width="0.0119%" height="15" fill="rgb(243,107,38)" fg:x="26396" fg:w="8"/><text x="39.4778%" y="1039.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="39.2278%" y="1013" width="0.0119%" height="15" fill="rgb(231,17,5)" fg:x="26396" fg:w="8"/><text x="39.4778%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="39.2278%" y="997" width="0.0119%" height="15" fill="rgb(209,25,54)" fg:x="26396" fg:w="8"/><text x="39.4778%" y="1007.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="39.2278%" y="981" width="0.0119%" height="15" fill="rgb(219,0,2)" fg:x="26396" fg:w="8"/><text x="39.4778%" y="991.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="39.2293%" y="965" width="0.0104%" height="15" fill="rgb(246,9,5)" fg:x="26397" fg:w="7"/><text x="39.4793%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (383 samples, 0.57%)</title><rect x="38.6779%" y="1125" width="0.5692%" height="15" fill="rgb(226,159,4)" fg:x="26026" fg:w="383"/><text x="38.9279%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (54 samples, 0.08%)</title><rect x="39.1669%" y="1109" width="0.0803%" height="15" fill="rgb(219,175,34)" fg:x="26355" fg:w="54"/><text x="39.4169%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (54 samples, 0.08%)</title><rect x="39.1669%" y="1093" width="0.0803%" height="15" fill="rgb(236,10,46)" fg:x="26355" fg:w="54"/><text x="39.4169%" y="1103.50"></text></g><g><title>SipHashUint256Extra (66 samples, 0.10%)</title><rect x="39.2471%" y="1109" width="0.0981%" height="15" fill="rgb(240,211,16)" fg:x="26409" fg:w="66"/><text x="39.4971%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (29 samples, 0.04%)</title><rect x="39.3021%" y="1093" width="0.0431%" height="15" fill="rgb(205,3,43)" fg:x="26446" fg:w="29"/><text x="39.5521%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (29 samples, 0.04%)</title><rect x="39.3021%" y="1077" width="0.0431%" height="15" fill="rgb(245,7,22)" fg:x="26446" fg:w="29"/><text x="39.5521%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20 samples, 0.03%)</title><rect x="39.3452%" y="1109" width="0.0297%" height="15" fill="rgb(239,132,32)" fg:x="26475" fg:w="20"/><text x="39.5952%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (99 samples, 0.15%)</title><rect x="39.2471%" y="1125" width="0.1471%" height="15" fill="rgb(228,202,34)" fg:x="26409" fg:w="99"/><text x="39.4971%" y="1135.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (13 samples, 0.02%)</title><rect x="39.3749%" y="1109" width="0.0193%" height="15" fill="rgb(254,200,22)" fg:x="26495" fg:w="13"/><text x="39.6249%" y="1119.50"></text></g><g><title>decltype  (13 samples, 0.02%)</title><rect x="39.3749%" y="1093" width="0.0193%" height="15" fill="rgb(219,10,39)" fg:x="26495" fg:w="13"/><text x="39.6249%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (13 samples, 0.02%)</title><rect x="39.3749%" y="1077" width="0.0193%" height="15" fill="rgb(226,210,39)" fg:x="26495" fg:w="13"/><text x="39.6249%" y="1087.50"></text></g><g><title>decltype  (13 samples, 0.02%)</title><rect x="39.3749%" y="1061" width="0.0193%" height="15" fill="rgb(208,219,16)" fg:x="26495" fg:w="13"/><text x="39.6249%" y="1071.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (13 samples, 0.02%)</title><rect x="39.3749%" y="1045" width="0.0193%" height="15" fill="rgb(216,158,51)" fg:x="26495" fg:w="13"/><text x="39.6249%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (13 samples, 0.02%)</title><rect x="39.3749%" y="1029" width="0.0193%" height="15" fill="rgb(233,14,44)" fg:x="26495" fg:w="13"/><text x="39.6249%" y="1039.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="39.3764%" y="1013" width="0.0178%" height="15" fill="rgb(237,97,39)" fg:x="26496" fg:w="12"/><text x="39.6264%" y="1023.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="39.3764%" y="997" width="0.0178%" height="15" fill="rgb(218,198,43)" fg:x="26496" fg:w="12"/><text x="39.6264%" y="1007.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="39.3764%" y="981" width="0.0178%" height="15" fill="rgb(231,104,20)" fg:x="26496" fg:w="12"/><text x="39.6264%" y="991.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="39.3764%" y="965" width="0.0178%" height="15" fill="rgb(254,36,13)" fg:x="26496" fg:w="12"/><text x="39.6264%" y="975.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="39.3764%" y="949" width="0.0178%" height="15" fill="rgb(248,14,50)" fg:x="26496" fg:w="12"/><text x="39.6264%" y="959.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="39.3794%" y="933" width="0.0149%" height="15" fill="rgb(217,107,29)" fg:x="26498" fg:w="10"/><text x="39.6294%" y="943.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="39.3794%" y="917" width="0.0149%" height="15" fill="rgb(251,169,33)" fg:x="26498" fg:w="10"/><text x="39.6294%" y="927.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="39.3839%" y="901" width="0.0104%" height="15" fill="rgb(217,108,32)" fg:x="26501" fg:w="7"/><text x="39.6339%" y="911.50"></text></g><g><title>CCoinsViewCache::FetchCoin (5,166 samples, 7.68%)</title><rect x="31.7333%" y="1173" width="7.6773%" height="15" fill="rgb(219,66,42)" fg:x="21353" fg:w="5166"/><text x="31.9833%" y="1183.50">CCoinsViewC..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,030 samples, 1.53%)</title><rect x="37.8799%" y="1157" width="1.5307%" height="15" fill="rgb(206,180,7)" fg:x="25489" fg:w="1030"/><text x="38.1299%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,030 samples, 1.53%)</title><rect x="37.8799%" y="1141" width="1.5307%" height="15" fill="rgb(208,226,31)" fg:x="25489" fg:w="1030"/><text x="38.1299%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (11 samples, 0.02%)</title><rect x="39.3943%" y="1125" width="0.0163%" height="15" fill="rgb(218,26,49)" fg:x="26508" fg:w="11"/><text x="39.6443%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (11 samples, 0.02%)</title><rect x="39.3943%" y="1109" width="0.0163%" height="15" fill="rgb(233,197,48)" fg:x="26508" fg:w="11"/><text x="39.6443%" y="1119.50"></text></g><g><title>SipHashUint256Extra (145 samples, 0.22%)</title><rect x="39.4151%" y="1173" width="0.2155%" height="15" fill="rgb(252,181,51)" fg:x="26522" fg:w="145"/><text x="39.6651%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (66 samples, 0.10%)</title><rect x="39.5325%" y="1157" width="0.0981%" height="15" fill="rgb(253,90,19)" fg:x="26601" fg:w="66"/><text x="39.7825%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (66 samples, 0.10%)</title><rect x="39.5325%" y="1141" width="0.0981%" height="15" fill="rgb(215,171,30)" fg:x="26601" fg:w="66"/><text x="39.7825%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (35 samples, 0.05%)</title><rect x="39.6350%" y="1173" width="0.0520%" height="15" fill="rgb(214,222,9)" fg:x="26670" fg:w="35"/><text x="39.8850%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (24 samples, 0.04%)</title><rect x="39.6959%" y="1013" width="0.0357%" height="15" fill="rgb(223,3,22)" fg:x="26711" fg:w="24"/><text x="39.9459%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (35 samples, 0.05%)</title><rect x="39.7316%" y="1013" width="0.0520%" height="15" fill="rgb(225,196,46)" fg:x="26735" fg:w="35"/><text x="39.9816%" y="1023.50"></text></g><g><title>CCoinsViewCache::GetCoin (5,450 samples, 8.10%)</title><rect x="31.7333%" y="1189" width="8.0994%" height="15" fill="rgb(209,110,37)" fg:x="21353" fg:w="5450"/><text x="31.9833%" y="1199.50">CCoinsViewC..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (93 samples, 0.14%)</title><rect x="39.6945%" y="1173" width="0.1382%" height="15" fill="rgb(249,89,12)" fg:x="26710" fg:w="93"/><text x="39.9445%" y="1183.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (93 samples, 0.14%)</title><rect x="39.6945%" y="1157" width="0.1382%" height="15" fill="rgb(226,27,33)" fg:x="26710" fg:w="93"/><text x="39.9445%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (93 samples, 0.14%)</title><rect x="39.6945%" y="1141" width="0.1382%" height="15" fill="rgb(213,82,22)" fg:x="26710" fg:w="93"/><text x="39.9445%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (93 samples, 0.14%)</title><rect x="39.6945%" y="1125" width="0.1382%" height="15" fill="rgb(248,140,0)" fg:x="26710" fg:w="93"/><text x="39.9445%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (93 samples, 0.14%)</title><rect x="39.6945%" y="1109" width="0.1382%" height="15" fill="rgb(228,106,3)" fg:x="26710" fg:w="93"/><text x="39.9445%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (92 samples, 0.14%)</title><rect x="39.6959%" y="1093" width="0.1367%" height="15" fill="rgb(209,23,37)" fg:x="26711" fg:w="92"/><text x="39.9459%" y="1103.50"></text></g><g><title>Coin::Coin (92 samples, 0.14%)</title><rect x="39.6959%" y="1077" width="0.1367%" height="15" fill="rgb(241,93,50)" fg:x="26711" fg:w="92"/><text x="39.9459%" y="1087.50"></text></g><g><title>CTxOut::CTxOut (92 samples, 0.14%)</title><rect x="39.6959%" y="1061" width="0.1367%" height="15" fill="rgb(253,46,43)" fg:x="26711" fg:w="92"/><text x="39.9459%" y="1071.50"></text></g><g><title>CScript::CScript (92 samples, 0.14%)</title><rect x="39.6959%" y="1045" width="0.1367%" height="15" fill="rgb(226,206,43)" fg:x="26711" fg:w="92"/><text x="39.9459%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (92 samples, 0.14%)</title><rect x="39.6959%" y="1029" width="0.1367%" height="15" fill="rgb(217,54,7)" fg:x="26711" fg:w="92"/><text x="39.9459%" y="1039.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (33 samples, 0.05%)</title><rect x="39.7836%" y="1013" width="0.0490%" height="15" fill="rgb(223,5,52)" fg:x="26770" fg:w="33"/><text x="40.0336%" y="1023.50"></text></g><g><title>SipHashUint256Extra (74 samples, 0.11%)</title><rect x="39.8446%" y="1189" width="0.1100%" height="15" fill="rgb(206,52,46)" fg:x="26811" fg:w="74"/><text x="40.0946%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (36 samples, 0.05%)</title><rect x="39.9010%" y="1173" width="0.0535%" height="15" fill="rgb(253,136,11)" fg:x="26849" fg:w="36"/><text x="40.1510%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (36 samples, 0.05%)</title><rect x="39.9010%" y="1157" width="0.0535%" height="15" fill="rgb(208,106,33)" fg:x="26849" fg:w="36"/><text x="40.1510%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (11 samples, 0.02%)</title><rect x="39.9991%" y="1173" width="0.0163%" height="15" fill="rgb(206,54,4)" fg:x="26915" fg:w="11"/><text x="40.2491%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (11 samples, 0.02%)</title><rect x="39.9991%" y="1157" width="0.0163%" height="15" fill="rgb(213,3,15)" fg:x="26915" fg:w="11"/><text x="40.2491%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (11 samples, 0.02%)</title><rect x="39.9991%" y="1141" width="0.0163%" height="15" fill="rgb(252,211,39)" fg:x="26915" fg:w="11"/><text x="40.2491%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (11 samples, 0.02%)</title><rect x="39.9991%" y="1125" width="0.0163%" height="15" fill="rgb(223,6,36)" fg:x="26915" fg:w="11"/><text x="40.2491%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (48 samples, 0.07%)</title><rect x="39.9545%" y="1189" width="0.0713%" height="15" fill="rgb(252,169,45)" fg:x="26885" fg:w="48"/><text x="40.2045%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (7 samples, 0.01%)</title><rect x="40.0155%" y="1173" width="0.0104%" height="15" fill="rgb(212,48,26)" fg:x="26926" fg:w="7"/><text x="40.2655%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (7 samples, 0.01%)</title><rect x="40.0155%" y="1157" width="0.0104%" height="15" fill="rgb(251,102,48)" fg:x="26926" fg:w="7"/><text x="40.2655%" y="1167.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (7 samples, 0.01%)</title><rect x="40.0155%" y="1141" width="0.0104%" height="15" fill="rgb(243,208,16)" fg:x="26926" fg:w="7"/><text x="40.2655%" y="1151.50"></text></g><g><title>operator== (7 samples, 0.01%)</title><rect x="40.0155%" y="1125" width="0.0104%" height="15" fill="rgb(219,96,24)" fg:x="26926" fg:w="7"/><text x="40.2655%" y="1135.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (7 samples, 0.01%)</title><rect x="40.0155%" y="1109" width="0.0104%" height="15" fill="rgb(219,33,29)" fg:x="26926" fg:w="7"/><text x="40.2655%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (7 samples, 0.01%)</title><rect x="40.0155%" y="1093" width="0.0104%" height="15" fill="rgb(223,176,5)" fg:x="26926" fg:w="7"/><text x="40.2655%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (7 samples, 0.01%)</title><rect x="40.0155%" y="1077" width="0.0104%" height="15" fill="rgb(228,140,14)" fg:x="26926" fg:w="7"/><text x="40.2655%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (21 samples, 0.03%)</title><rect x="40.0288%" y="1157" width="0.0312%" height="15" fill="rgb(217,179,31)" fg:x="26935" fg:w="21"/><text x="40.2788%" y="1167.50"></text></g><g><title>Coin::operator= (8 samples, 0.01%)</title><rect x="40.0482%" y="1141" width="0.0119%" height="15" fill="rgb(230,9,30)" fg:x="26948" fg:w="8"/><text x="40.2982%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (10 samples, 0.01%)</title><rect x="40.0600%" y="1157" width="0.0149%" height="15" fill="rgb(230,136,20)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (10 samples, 0.01%)</title><rect x="40.0600%" y="1141" width="0.0149%" height="15" fill="rgb(215,210,22)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (10 samples, 0.01%)</title><rect x="40.0600%" y="1125" width="0.0149%" height="15" fill="rgb(218,43,5)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="40.0600%" y="1109" width="0.0149%" height="15" fill="rgb(216,11,5)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="40.0600%" y="1093" width="0.0149%" height="15" fill="rgb(209,82,29)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="40.0600%" y="1077" width="0.0149%" height="15" fill="rgb(244,115,12)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (10 samples, 0.01%)</title><rect x="40.0600%" y="1061" width="0.0149%" height="15" fill="rgb(222,82,18)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1071.50"></text></g><g><title>Coin::Coin (10 samples, 0.01%)</title><rect x="40.0600%" y="1045" width="0.0149%" height="15" fill="rgb(249,227,8)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (10 samples, 0.01%)</title><rect x="40.0600%" y="1029" width="0.0149%" height="15" fill="rgb(253,141,45)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1039.50"></text></g><g><title>CScript::CScript (10 samples, 0.01%)</title><rect x="40.0600%" y="1013" width="0.0149%" height="15" fill="rgb(234,184,4)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (10 samples, 0.01%)</title><rect x="40.0600%" y="997" width="0.0149%" height="15" fill="rgb(218,194,23)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (10 samples, 0.01%)</title><rect x="40.0600%" y="981" width="0.0149%" height="15" fill="rgb(235,66,41)" fg:x="26956" fg:w="10"/><text x="40.3100%" y="991.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.03%)</title><rect x="40.0808%" y="1157" width="0.0327%" height="15" fill="rgb(245,217,1)" fg:x="26970" fg:w="22"/><text x="40.3308%" y="1167.50"></text></g><g><title>Coin::operator= (15 samples, 0.02%)</title><rect x="40.1596%" y="1125" width="0.0223%" height="15" fill="rgb(229,91,1)" fg:x="27023" fg:w="15"/><text x="40.4096%" y="1135.50"></text></g><g><title>CTxOut::operator= (10 samples, 0.01%)</title><rect x="40.1670%" y="1109" width="0.0149%" height="15" fill="rgb(207,101,30)" fg:x="27028" fg:w="10"/><text x="40.4170%" y="1119.50"></text></g><g><title>CScript::operator= (7 samples, 0.01%)</title><rect x="40.1715%" y="1093" width="0.0104%" height="15" fill="rgb(223,82,49)" fg:x="27031" fg:w="7"/><text x="40.4215%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (7 samples, 0.01%)</title><rect x="40.1715%" y="1077" width="0.0104%" height="15" fill="rgb(218,167,17)" fg:x="27031" fg:w="7"/><text x="40.4215%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (50 samples, 0.07%)</title><rect x="40.1195%" y="1141" width="0.0743%" height="15" fill="rgb(208,103,14)" fg:x="26996" fg:w="50"/><text x="40.3695%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (8 samples, 0.01%)</title><rect x="40.1819%" y="1125" width="0.0119%" height="15" fill="rgb(238,20,8)" fg:x="27038" fg:w="8"/><text x="40.4319%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (158 samples, 0.23%)</title><rect x="40.1938%" y="1141" width="0.2348%" height="15" fill="rgb(218,80,54)" fg:x="27046" fg:w="158"/><text x="40.4438%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (154 samples, 0.23%)</title><rect x="40.1997%" y="1125" width="0.2289%" height="15" fill="rgb(240,144,17)" fg:x="27050" fg:w="154"/><text x="40.4497%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (150 samples, 0.22%)</title><rect x="40.2057%" y="1109" width="0.2229%" height="15" fill="rgb(245,27,50)" fg:x="27054" fg:w="150"/><text x="40.4557%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (150 samples, 0.22%)</title><rect x="40.2057%" y="1093" width="0.2229%" height="15" fill="rgb(251,51,7)" fg:x="27054" fg:w="150"/><text x="40.4557%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (150 samples, 0.22%)</title><rect x="40.2057%" y="1077" width="0.2229%" height="15" fill="rgb(245,217,29)" fg:x="27054" fg:w="150"/><text x="40.4557%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (150 samples, 0.22%)</title><rect x="40.2057%" y="1061" width="0.2229%" height="15" fill="rgb(221,176,29)" fg:x="27054" fg:w="150"/><text x="40.4557%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (150 samples, 0.22%)</title><rect x="40.2057%" y="1045" width="0.2229%" height="15" fill="rgb(212,180,24)" fg:x="27054" fg:w="150"/><text x="40.4557%" y="1055.50"></text></g><g><title>Coin::Coin (150 samples, 0.22%)</title><rect x="40.2057%" y="1029" width="0.2229%" height="15" fill="rgb(254,24,2)" fg:x="27054" fg:w="150"/><text x="40.4557%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (149 samples, 0.22%)</title><rect x="40.2072%" y="1013" width="0.2214%" height="15" fill="rgb(230,100,2)" fg:x="27055" fg:w="149"/><text x="40.4572%" y="1023.50"></text></g><g><title>CScript::CScript (149 samples, 0.22%)</title><rect x="40.2072%" y="997" width="0.2214%" height="15" fill="rgb(219,142,25)" fg:x="27055" fg:w="149"/><text x="40.4572%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (149 samples, 0.22%)</title><rect x="40.2072%" y="981" width="0.2214%" height="15" fill="rgb(240,73,43)" fg:x="27055" fg:w="149"/><text x="40.4572%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (148 samples, 0.22%)</title><rect x="40.2087%" y="965" width="0.2199%" height="15" fill="rgb(214,114,15)" fg:x="27056" fg:w="148"/><text x="40.4587%" y="975.50"></text></g><g><title>Chainstate::ConnectBlock (11 samples, 0.02%)</title><rect x="40.4345%" y="1141" width="0.0163%" height="15" fill="rgb(207,130,4)" fg:x="27208" fg:w="11"/><text x="40.6845%" y="1151.50"></text></g><g><title>SipHashUint256Extra (80 samples, 0.12%)</title><rect x="40.4553%" y="1141" width="0.1189%" height="15" fill="rgb(221,25,40)" fg:x="27222" fg:w="80"/><text x="40.7053%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (35 samples, 0.05%)</title><rect x="40.5222%" y="1125" width="0.0520%" height="15" fill="rgb(241,184,7)" fg:x="27267" fg:w="35"/><text x="40.7722%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (35 samples, 0.05%)</title><rect x="40.5222%" y="1109" width="0.0520%" height="15" fill="rgb(235,159,4)" fg:x="27267" fg:w="35"/><text x="40.7722%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (26 samples, 0.04%)</title><rect x="40.5846%" y="1061" width="0.0386%" height="15" fill="rgb(214,87,48)" fg:x="27309" fg:w="26"/><text x="40.8346%" y="1071.50"></text></g><g><title>CCoinsViewCache::GetCoin (8 samples, 0.01%)</title><rect x="40.6233%" y="1061" width="0.0119%" height="15" fill="rgb(246,198,24)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="1071.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (8 samples, 0.01%)</title><rect x="40.6233%" y="1045" width="0.0119%" height="15" fill="rgb(209,66,40)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="1055.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (8 samples, 0.01%)</title><rect x="40.6233%" y="1029" width="0.0119%" height="15" fill="rgb(233,147,39)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.01%)</title><rect x="40.6233%" y="1013" width="0.0119%" height="15" fill="rgb(231,145,52)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.01%)</title><rect x="40.6233%" y="997" width="0.0119%" height="15" fill="rgb(206,20,26)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.01%)</title><rect x="40.6233%" y="981" width="0.0119%" height="15" fill="rgb(238,220,4)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (8 samples, 0.01%)</title><rect x="40.6233%" y="965" width="0.0119%" height="15" fill="rgb(252,195,42)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="975.50"></text></g><g><title>Coin::Coin (8 samples, 0.01%)</title><rect x="40.6233%" y="949" width="0.0119%" height="15" fill="rgb(209,10,6)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="959.50"></text></g><g><title>CTxOut::CTxOut (8 samples, 0.01%)</title><rect x="40.6233%" y="933" width="0.0119%" height="15" fill="rgb(229,3,52)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="943.50"></text></g><g><title>CScript::CScript (8 samples, 0.01%)</title><rect x="40.6233%" y="917" width="0.0119%" height="15" fill="rgb(253,49,37)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (8 samples, 0.01%)</title><rect x="40.6233%" y="901" width="0.0119%" height="15" fill="rgb(240,103,49)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="911.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (8 samples, 0.01%)</title><rect x="40.6233%" y="885" width="0.0119%" height="15" fill="rgb(250,182,30)" fg:x="27335" fg:w="8"/><text x="40.8733%" y="895.50"></text></g><g><title>SipHashUint256Extra (36 samples, 0.05%)</title><rect x="40.6367%" y="1061" width="0.0535%" height="15" fill="rgb(248,8,30)" fg:x="27344" fg:w="36"/><text x="40.8867%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.02%)</title><rect x="40.6723%" y="1045" width="0.0178%" height="15" fill="rgb(237,120,30)" fg:x="27368" fg:w="12"/><text x="40.9223%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.02%)</title><rect x="40.6723%" y="1029" width="0.0178%" height="15" fill="rgb(221,146,34)" fg:x="27368" fg:w="12"/><text x="40.9223%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (80 samples, 0.12%)</title><rect x="40.5846%" y="1125" width="0.1189%" height="15" fill="rgb(242,55,13)" fg:x="27309" fg:w="80"/><text x="40.8346%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (80 samples, 0.12%)</title><rect x="40.5846%" y="1109" width="0.1189%" height="15" fill="rgb(242,112,31)" fg:x="27309" fg:w="80"/><text x="40.8346%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (80 samples, 0.12%)</title><rect x="40.5846%" y="1093" width="0.1189%" height="15" fill="rgb(249,192,27)" fg:x="27309" fg:w="80"/><text x="40.8346%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (80 samples, 0.12%)</title><rect x="40.5846%" y="1077" width="0.1189%" height="15" fill="rgb(208,204,44)" fg:x="27309" fg:w="80"/><text x="40.8346%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (394 samples, 0.59%)</title><rect x="40.1195%" y="1157" width="0.5855%" height="15" fill="rgb(208,93,54)" fg:x="26996" fg:w="394"/><text x="40.3695%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (88 samples, 0.13%)</title><rect x="40.5742%" y="1141" width="0.1308%" height="15" fill="rgb(242,1,31)" fg:x="27302" fg:w="88"/><text x="40.8242%" y="1151.50"></text></g><g><title>SipHashUint256Extra (89 samples, 0.13%)</title><rect x="40.7050%" y="1141" width="0.1323%" height="15" fill="rgb(241,83,25)" fg:x="27390" fg:w="89"/><text x="40.9550%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (37 samples, 0.05%)</title><rect x="40.7823%" y="1125" width="0.0550%" height="15" fill="rgb(205,169,50)" fg:x="27442" fg:w="37"/><text x="41.0323%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (37 samples, 0.05%)</title><rect x="40.7823%" y="1109" width="0.0550%" height="15" fill="rgb(239,186,37)" fg:x="27442" fg:w="37"/><text x="41.0323%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (12 samples, 0.02%)</title><rect x="40.8388%" y="1061" width="0.0178%" height="15" fill="rgb(205,221,10)" fg:x="27480" fg:w="12"/><text x="41.0888%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (71 samples, 0.11%)</title><rect x="40.8373%" y="1141" width="0.1055%" height="15" fill="rgb(218,196,15)" fg:x="27479" fg:w="71"/><text x="41.0873%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (70 samples, 0.10%)</title><rect x="40.8388%" y="1125" width="0.1040%" height="15" fill="rgb(218,196,35)" fg:x="27480" fg:w="70"/><text x="41.0888%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (70 samples, 0.10%)</title><rect x="40.8388%" y="1109" width="0.1040%" height="15" fill="rgb(233,63,24)" fg:x="27480" fg:w="70"/><text x="41.0888%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (70 samples, 0.10%)</title><rect x="40.8388%" y="1093" width="0.1040%" height="15" fill="rgb(225,8,4)" fg:x="27480" fg:w="70"/><text x="41.0888%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (70 samples, 0.10%)</title><rect x="40.8388%" y="1077" width="0.1040%" height="15" fill="rgb(234,105,35)" fg:x="27480" fg:w="70"/><text x="41.0888%" y="1087.50"></text></g><g><title>SipHashUint256Extra (58 samples, 0.09%)</title><rect x="40.8566%" y="1061" width="0.0862%" height="15" fill="rgb(236,21,32)" fg:x="27492" fg:w="58"/><text x="41.1066%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (23 samples, 0.03%)</title><rect x="40.9086%" y="1045" width="0.0342%" height="15" fill="rgb(228,109,6)" fg:x="27527" fg:w="23"/><text x="41.1586%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (23 samples, 0.03%)</title><rect x="40.9086%" y="1029" width="0.0342%" height="15" fill="rgb(229,215,31)" fg:x="27527" fg:w="23"/><text x="41.1586%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (10 samples, 0.01%)</title><rect x="40.9577%" y="1109" width="0.0149%" height="15" fill="rgb(221,52,54)" fg:x="27560" fg:w="10"/><text x="41.2077%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (10 samples, 0.01%)</title><rect x="40.9577%" y="1093" width="0.0149%" height="15" fill="rgb(252,129,43)" fg:x="27560" fg:w="10"/><text x="41.2077%" y="1103.50"></text></g><g><title>__memset_avx512_unaligned_erms (10 samples, 0.01%)</title><rect x="40.9577%" y="1077" width="0.0149%" height="15" fill="rgb(248,183,27)" fg:x="27560" fg:w="10"/><text x="41.2077%" y="1087.50"></text></g><g><title>SipHashUint256Extra (110 samples, 0.16%)</title><rect x="40.9755%" y="1061" width="0.1635%" height="15" fill="rgb(250,0,22)" fg:x="27572" fg:w="110"/><text x="41.2255%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (35 samples, 0.05%)</title><rect x="41.0870%" y="1045" width="0.0520%" height="15" fill="rgb(213,166,10)" fg:x="27647" fg:w="35"/><text x="41.3370%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (35 samples, 0.05%)</title><rect x="41.0870%" y="1029" width="0.0520%" height="15" fill="rgb(207,163,36)" fg:x="27647" fg:w="35"/><text x="41.3370%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (121 samples, 0.18%)</title><rect x="40.9725%" y="1109" width="0.1798%" height="15" fill="rgb(208,122,22)" fg:x="27570" fg:w="121"/><text x="41.2225%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (121 samples, 0.18%)</title><rect x="40.9725%" y="1093" width="0.1798%" height="15" fill="rgb(207,104,49)" fg:x="27570" fg:w="121"/><text x="41.2225%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (121 samples, 0.18%)</title><rect x="40.9725%" y="1077" width="0.1798%" height="15" fill="rgb(248,211,50)" fg:x="27570" fg:w="121"/><text x="41.2225%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (9 samples, 0.01%)</title><rect x="41.1390%" y="1061" width="0.0134%" height="15" fill="rgb(217,13,45)" fg:x="27682" fg:w="9"/><text x="41.3890%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (9 samples, 0.01%)</title><rect x="41.1390%" y="1045" width="0.0134%" height="15" fill="rgb(211,216,49)" fg:x="27682" fg:w="9"/><text x="41.3890%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (302 samples, 0.45%)</title><rect x="40.7050%" y="1157" width="0.4488%" height="15" fill="rgb(221,58,53)" fg:x="27390" fg:w="302"/><text x="40.9550%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (142 samples, 0.21%)</title><rect x="40.9428%" y="1141" width="0.2110%" height="15" fill="rgb(220,112,41)" fg:x="27550" fg:w="142"/><text x="41.1928%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (142 samples, 0.21%)</title><rect x="40.9428%" y="1125" width="0.2110%" height="15" fill="rgb(236,38,28)" fg:x="27550" fg:w="142"/><text x="41.1928%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (17 samples, 0.03%)</title><rect x="41.1538%" y="1141" width="0.0253%" height="15" fill="rgb(227,195,22)" fg:x="27692" fg:w="17"/><text x="41.4038%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (49 samples, 0.07%)</title><rect x="41.1791%" y="1141" width="0.0728%" height="15" fill="rgb(214,55,33)" fg:x="27709" fg:w="49"/><text x="41.4291%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (48 samples, 0.07%)</title><rect x="41.1806%" y="1125" width="0.0713%" height="15" fill="rgb(248,80,13)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (48 samples, 0.07%)</title><rect x="41.1806%" y="1109" width="0.0713%" height="15" fill="rgb(238,52,6)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (48 samples, 0.07%)</title><rect x="41.1806%" y="1093" width="0.0713%" height="15" fill="rgb(224,198,47)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (48 samples, 0.07%)</title><rect x="41.1806%" y="1077" width="0.0713%" height="15" fill="rgb(233,171,20)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (48 samples, 0.07%)</title><rect x="41.1806%" y="1061" width="0.0713%" height="15" fill="rgb(241,30,25)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (48 samples, 0.07%)</title><rect x="41.1806%" y="1045" width="0.0713%" height="15" fill="rgb(207,171,38)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1055.50"></text></g><g><title>Coin::Coin (48 samples, 0.07%)</title><rect x="41.1806%" y="1029" width="0.0713%" height="15" fill="rgb(234,70,1)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (48 samples, 0.07%)</title><rect x="41.1806%" y="1013" width="0.0713%" height="15" fill="rgb(232,178,18)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1023.50"></text></g><g><title>CScript::CScript (48 samples, 0.07%)</title><rect x="41.1806%" y="997" width="0.0713%" height="15" fill="rgb(241,78,40)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (48 samples, 0.07%)</title><rect x="41.1806%" y="981" width="0.0713%" height="15" fill="rgb(222,35,25)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (48 samples, 0.07%)</title><rect x="41.1806%" y="965" width="0.0713%" height="15" fill="rgb(207,92,16)" fg:x="27710" fg:w="48"/><text x="41.4306%" y="975.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.01%)</title><rect x="41.2638%" y="1141" width="0.0134%" height="15" fill="rgb(216,59,51)" fg:x="27766" fg:w="9"/><text x="41.5138%" y="1151.50"></text></g><g><title>decltype  (37 samples, 0.05%)</title><rect x="41.2787%" y="1125" width="0.0550%" height="15" fill="rgb(213,80,28)" fg:x="27776" fg:w="37"/><text x="41.5287%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (37 samples, 0.05%)</title><rect x="41.2787%" y="1109" width="0.0550%" height="15" fill="rgb(220,93,7)" fg:x="27776" fg:w="37"/><text x="41.5287%" y="1119.50"></text></g><g><title>decltype  (37 samples, 0.05%)</title><rect x="41.2787%" y="1093" width="0.0550%" height="15" fill="rgb(225,24,44)" fg:x="27776" fg:w="37"/><text x="41.5287%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (37 samples, 0.05%)</title><rect x="41.2787%" y="1077" width="0.0550%" height="15" fill="rgb(243,74,40)" fg:x="27776" fg:w="37"/><text x="41.5287%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (37 samples, 0.05%)</title><rect x="41.2787%" y="1061" width="0.0550%" height="15" fill="rgb(228,39,7)" fg:x="27776" fg:w="37"/><text x="41.5287%" y="1071.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="41.2801%" y="1045" width="0.0535%" height="15" fill="rgb(227,79,8)" fg:x="27777" fg:w="36"/><text x="41.5301%" y="1055.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="41.2816%" y="1029" width="0.0520%" height="15" fill="rgb(236,58,11)" fg:x="27778" fg:w="35"/><text x="41.5316%" y="1039.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="41.2861%" y="1013" width="0.0476%" height="15" fill="rgb(249,63,35)" fg:x="27781" fg:w="32"/><text x="41.5361%" y="1023.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="41.2861%" y="997" width="0.0476%" height="15" fill="rgb(252,114,16)" fg:x="27781" fg:w="32"/><text x="41.5361%" y="1007.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="41.2891%" y="981" width="0.0446%" height="15" fill="rgb(254,151,24)" fg:x="27783" fg:w="30"/><text x="41.5391%" y="991.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="41.2920%" y="965" width="0.0416%" height="15" fill="rgb(253,54,39)" fg:x="27785" fg:w="28"/><text x="41.5420%" y="975.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="41.3024%" y="949" width="0.0312%" height="15" fill="rgb(243,25,45)" fg:x="27792" fg:w="21"/><text x="41.5524%" y="959.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="41.3069%" y="933" width="0.0268%" height="15" fill="rgb(234,134,9)" fg:x="27795" fg:w="18"/><text x="41.5569%" y="943.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="41.3143%" y="917" width="0.0193%" height="15" fill="rgb(227,166,31)" fg:x="27800" fg:w="13"/><text x="41.5643%" y="927.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="41.3188%" y="901" width="0.0149%" height="15" fill="rgb(245,143,41)" fg:x="27803" fg:w="10"/><text x="41.5688%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (130 samples, 0.19%)</title><rect x="41.1538%" y="1157" width="0.1932%" height="15" fill="rgb(238,181,32)" fg:x="27692" fg:w="130"/><text x="41.4038%" y="1167.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (46 samples, 0.07%)</title><rect x="41.2787%" y="1141" width="0.0684%" height="15" fill="rgb(224,113,18)" fg:x="27776" fg:w="46"/><text x="41.5287%" y="1151.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (8 samples, 0.01%)</title><rect x="41.3351%" y="1125" width="0.0119%" height="15" fill="rgb(240,229,28)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1135.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (8 samples, 0.01%)</title><rect x="41.3351%" y="1109" width="0.0119%" height="15" fill="rgb(250,185,3)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (8 samples, 0.01%)</title><rect x="41.3351%" y="1093" width="0.0119%" height="15" fill="rgb(212,59,25)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1103.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (8 samples, 0.01%)</title><rect x="41.3351%" y="1077" width="0.0119%" height="15" fill="rgb(221,87,20)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1087.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (8 samples, 0.01%)</title><rect x="41.3351%" y="1061" width="0.0119%" height="15" fill="rgb(213,74,28)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1071.50"></text></g><g><title>operator new (8 samples, 0.01%)</title><rect x="41.3351%" y="1045" width="0.0119%" height="15" fill="rgb(224,132,34)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1055.50"></text></g><g><title>__posix_memalign (8 samples, 0.01%)</title><rect x="41.3351%" y="1029" width="0.0119%" height="15" fill="rgb(222,101,24)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1039.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="41.3351%" y="1013" width="0.0119%" height="15" fill="rgb(254,142,4)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1023.50"></text></g><g><title>_int_malloc (8 samples, 0.01%)</title><rect x="41.3351%" y="997" width="0.0119%" height="15" fill="rgb(230,229,49)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="1007.50"></text></g><g><title>sysmalloc (8 samples, 0.01%)</title><rect x="41.3351%" y="981" width="0.0119%" height="15" fill="rgb(238,70,47)" fg:x="27814" fg:w="8"/><text x="41.5851%" y="991.50"></text></g><g><title>__mprotect (7 samples, 0.01%)</title><rect x="41.3366%" y="965" width="0.0104%" height="15" fill="rgb(231,160,17)" fg:x="27815" fg:w="7"/><text x="41.5866%" y="975.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="41.3366%" y="949" width="0.0104%" height="15" fill="rgb(218,68,53)" fg:x="27815" fg:w="7"/><text x="41.5866%" y="959.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="41.3366%" y="933" width="0.0104%" height="15" fill="rgb(236,111,10)" fg:x="27815" fg:w="7"/><text x="41.5866%" y="943.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="41.3366%" y="917" width="0.0104%" height="15" fill="rgb(224,34,41)" fg:x="27815" fg:w="7"/><text x="41.5866%" y="927.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="41.3366%" y="901" width="0.0104%" height="15" fill="rgb(241,118,19)" fg:x="27815" fg:w="7"/><text x="41.5866%" y="911.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="41.3366%" y="885" width="0.0104%" height="15" fill="rgb(238,129,25)" fg:x="27815" fg:w="7"/><text x="41.5866%" y="895.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="41.3366%" y="869" width="0.0104%" height="15" fill="rgb(238,22,31)" fg:x="27815" fg:w="7"/><text x="41.5866%" y="879.50"></text></g><g><title>CCoinsViewCache::GetCoin (277 samples, 0.41%)</title><rect x="41.3649%" y="1125" width="0.4117%" height="15" fill="rgb(222,174,48)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1135.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (277 samples, 0.41%)</title><rect x="41.3649%" y="1109" width="0.4117%" height="15" fill="rgb(206,152,40)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (277 samples, 0.41%)</title><rect x="41.3649%" y="1093" width="0.4117%" height="15" fill="rgb(218,99,54)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (277 samples, 0.41%)</title><rect x="41.3649%" y="1077" width="0.4117%" height="15" fill="rgb(220,174,26)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (277 samples, 0.41%)</title><rect x="41.3649%" y="1061" width="0.4117%" height="15" fill="rgb(245,116,9)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (277 samples, 0.41%)</title><rect x="41.3649%" y="1045" width="0.4117%" height="15" fill="rgb(209,72,35)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (277 samples, 0.41%)</title><rect x="41.3649%" y="1029" width="0.4117%" height="15" fill="rgb(226,126,21)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1039.50"></text></g><g><title>Coin::Coin (277 samples, 0.41%)</title><rect x="41.3649%" y="1013" width="0.4117%" height="15" fill="rgb(227,192,1)" fg:x="27834" fg:w="277"/><text x="41.6149%" y="1023.50"></text></g><g><title>CTxOut::CTxOut (276 samples, 0.41%)</title><rect x="41.3663%" y="997" width="0.4102%" height="15" fill="rgb(237,180,29)" fg:x="27835" fg:w="276"/><text x="41.6163%" y="1007.50"></text></g><g><title>CScript::CScript (276 samples, 0.41%)</title><rect x="41.3663%" y="981" width="0.4102%" height="15" fill="rgb(230,197,35)" fg:x="27835" fg:w="276"/><text x="41.6163%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (276 samples, 0.41%)</title><rect x="41.3663%" y="965" width="0.4102%" height="15" fill="rgb(246,193,31)" fg:x="27835" fg:w="276"/><text x="41.6163%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (273 samples, 0.41%)</title><rect x="41.3708%" y="949" width="0.4057%" height="15" fill="rgb(241,36,4)" fg:x="27838" fg:w="273"/><text x="41.6208%" y="959.50"></text></g><g><title>CTransaction::IsCoinBase (8 samples, 0.01%)</title><rect x="41.7825%" y="1109" width="0.0119%" height="15" fill="rgb(241,130,17)" fg:x="28115" fg:w="8"/><text x="42.0325%" y="1119.50"></text></g><g><title>COutPoint::IsNull (7 samples, 0.01%)</title><rect x="41.7839%" y="1093" width="0.0104%" height="15" fill="rgb(206,137,32)" fg:x="28116" fg:w="7"/><text x="42.0339%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (7 samples, 0.01%)</title><rect x="41.7839%" y="1077" width="0.0104%" height="15" fill="rgb(237,228,51)" fg:x="28116" fg:w="7"/><text x="42.0339%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (7 samples, 0.01%)</title><rect x="41.7839%" y="1061" width="0.0104%" height="15" fill="rgb(243,6,42)" fg:x="28116" fg:w="7"/><text x="42.0339%" y="1071.50"></text></g><g><title>Chainstate::ConnectBlock (22 samples, 0.03%)</title><rect x="41.7765%" y="1125" width="0.0327%" height="15" fill="rgb(251,74,28)" fg:x="28111" fg:w="22"/><text x="42.0265%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (6,796 samples, 10.10%)</title><rect x="31.7140%" y="1205" width="10.0997%" height="15" fill="rgb(218,20,49)" fg:x="21340" fg:w="6796"/><text x="31.9640%" y="1215.50">CCoinsViewCache..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1,201 samples, 1.78%)</title><rect x="40.0288%" y="1189" width="1.7848%" height="15" fill="rgb(238,28,14)" fg:x="26935" fg:w="1201"/><text x="40.2788%" y="1199.50">s..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1,201 samples, 1.78%)</title><rect x="40.0288%" y="1173" width="1.7848%" height="15" fill="rgb(229,40,46)" fg:x="26935" fg:w="1201"/><text x="40.2788%" y="1183.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (314 samples, 0.47%)</title><rect x="41.3470%" y="1157" width="0.4666%" height="15" fill="rgb(244,195,20)" fg:x="27822" fg:w="314"/><text x="41.5970%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (314 samples, 0.47%)</title><rect x="41.3470%" y="1141" width="0.4666%" height="15" fill="rgb(253,56,35)" fg:x="27822" fg:w="314"/><text x="41.5970%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (8 samples, 0.01%)</title><rect x="41.8226%" y="1029" width="0.0119%" height="15" fill="rgb(210,149,44)" fg:x="28142" fg:w="8"/><text x="42.0726%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (8 samples, 0.01%)</title><rect x="41.8226%" y="1013" width="0.0119%" height="15" fill="rgb(240,135,12)" fg:x="28142" fg:w="8"/><text x="42.0726%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (8 samples, 0.01%)</title><rect x="41.8226%" y="997" width="0.0119%" height="15" fill="rgb(251,24,50)" fg:x="28142" fg:w="8"/><text x="42.0726%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (7 samples, 0.01%)</title><rect x="41.8345%" y="1029" width="0.0104%" height="15" fill="rgb(243,200,47)" fg:x="28150" fg:w="7"/><text x="42.0845%" y="1039.50"></text></g><g><title>CCoinsViewCache::GetCoin (534 samples, 0.79%)</title><rect x="41.8137%" y="1205" width="0.7936%" height="15" fill="rgb(224,166,26)" fg:x="28136" fg:w="534"/><text x="42.0637%" y="1215.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (533 samples, 0.79%)</title><rect x="41.8152%" y="1189" width="0.7921%" height="15" fill="rgb(233,0,47)" fg:x="28137" fg:w="533"/><text x="42.0652%" y="1199.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (533 samples, 0.79%)</title><rect x="41.8152%" y="1173" width="0.7921%" height="15" fill="rgb(253,80,5)" fg:x="28137" fg:w="533"/><text x="42.0652%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (533 samples, 0.79%)</title><rect x="41.8152%" y="1157" width="0.7921%" height="15" fill="rgb(214,133,25)" fg:x="28137" fg:w="533"/><text x="42.0652%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (533 samples, 0.79%)</title><rect x="41.8152%" y="1141" width="0.7921%" height="15" fill="rgb(209,27,14)" fg:x="28137" fg:w="533"/><text x="42.0652%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (533 samples, 0.79%)</title><rect x="41.8152%" y="1125" width="0.7921%" height="15" fill="rgb(219,102,51)" fg:x="28137" fg:w="533"/><text x="42.0652%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (532 samples, 0.79%)</title><rect x="41.8166%" y="1109" width="0.7906%" height="15" fill="rgb(237,18,16)" fg:x="28138" fg:w="532"/><text x="42.0666%" y="1119.50"></text></g><g><title>Coin::Coin (532 samples, 0.79%)</title><rect x="41.8166%" y="1093" width="0.7906%" height="15" fill="rgb(241,85,17)" fg:x="28138" fg:w="532"/><text x="42.0666%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (532 samples, 0.79%)</title><rect x="41.8166%" y="1077" width="0.7906%" height="15" fill="rgb(236,90,42)" fg:x="28138" fg:w="532"/><text x="42.0666%" y="1087.50"></text></g><g><title>CScript::CScript (532 samples, 0.79%)</title><rect x="41.8166%" y="1061" width="0.7906%" height="15" fill="rgb(249,57,21)" fg:x="28138" fg:w="532"/><text x="42.0666%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (532 samples, 0.79%)</title><rect x="41.8166%" y="1045" width="0.7906%" height="15" fill="rgb(243,12,36)" fg:x="28138" fg:w="532"/><text x="42.0666%" y="1055.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (511 samples, 0.76%)</title><rect x="41.8479%" y="1029" width="0.7594%" height="15" fill="rgb(253,128,47)" fg:x="28159" fg:w="511"/><text x="42.0979%" y="1039.50"></text></g><g><title>SipHashUint256Extra (22 samples, 0.03%)</title><rect x="42.6147%" y="1205" width="0.0327%" height="15" fill="rgb(207,33,20)" fg:x="28675" fg:w="22"/><text x="42.8647%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="42.6325%" y="1189" width="0.0149%" height="15" fill="rgb(233,215,35)" fg:x="28687" fg:w="10"/><text x="42.8825%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="42.6325%" y="1173" width="0.0149%" height="15" fill="rgb(249,188,52)" fg:x="28687" fg:w="10"/><text x="42.8825%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (28 samples, 0.04%)</title><rect x="42.6474%" y="1205" width="0.0416%" height="15" fill="rgb(225,12,32)" fg:x="28697" fg:w="28"/><text x="42.8974%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (16 samples, 0.02%)</title><rect x="42.6652%" y="1189" width="0.0238%" height="15" fill="rgb(247,98,14)" fg:x="28709" fg:w="16"/><text x="42.9152%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (16 samples, 0.02%)</title><rect x="42.6652%" y="1173" width="0.0238%" height="15" fill="rgb(247,219,48)" fg:x="28709" fg:w="16"/><text x="42.9152%" y="1183.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (16 samples, 0.02%)</title><rect x="42.6652%" y="1157" width="0.0238%" height="15" fill="rgb(253,60,48)" fg:x="28709" fg:w="16"/><text x="42.9152%" y="1167.50"></text></g><g><title>operator== (16 samples, 0.02%)</title><rect x="42.6652%" y="1141" width="0.0238%" height="15" fill="rgb(245,15,52)" fg:x="28709" fg:w="16"/><text x="42.9152%" y="1151.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (16 samples, 0.02%)</title><rect x="42.6652%" y="1125" width="0.0238%" height="15" fill="rgb(220,133,28)" fg:x="28709" fg:w="16"/><text x="42.9152%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (16 samples, 0.02%)</title><rect x="42.6652%" y="1109" width="0.0238%" height="15" fill="rgb(217,180,4)" fg:x="28709" fg:w="16"/><text x="42.9152%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (16 samples, 0.02%)</title><rect x="42.6652%" y="1093" width="0.0238%" height="15" fill="rgb(251,24,1)" fg:x="28709" fg:w="16"/><text x="42.9152%" y="1103.50"></text></g><g><title>CCoinsViewCache::HaveCoin (7,399 samples, 11.00%)</title><rect x="31.6976%" y="1221" width="10.9959%" height="15" fill="rgb(212,185,49)" fg:x="21329" fg:w="7399"/><text x="31.9476%" y="1231.50">CCoinsViewCache:..</text></g><g><title>CCoinsViewCache::HaveInputs (7,400 samples, 11.00%)</title><rect x="31.6976%" y="1237" width="10.9973%" height="15" fill="rgb(215,175,22)" fg:x="21329" fg:w="7400"/><text x="31.9476%" y="1247.50">CCoinsViewCache:..</text></g><g><title>SipHashUint256Extra (49 samples, 0.07%)</title><rect x="42.7039%" y="1237" width="0.0728%" height="15" fill="rgb(250,205,14)" fg:x="28735" fg:w="49"/><text x="42.9539%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (21 samples, 0.03%)</title><rect x="42.7455%" y="1221" width="0.0312%" height="15" fill="rgb(225,211,22)" fg:x="28763" fg:w="21"/><text x="42.9955%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (21 samples, 0.03%)</title><rect x="42.7455%" y="1205" width="0.0312%" height="15" fill="rgb(251,179,42)" fg:x="28763" fg:w="21"/><text x="42.9955%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.03%)</title><rect x="42.7797%" y="1237" width="0.0327%" height="15" fill="rgb(208,216,51)" fg:x="28786" fg:w="22"/><text x="43.0297%" y="1247.50"></text></g><g><title>Consensus::CheckTxInputs (8,472 samples, 12.59%)</title><rect x="30.2234%" y="1253" width="12.5905%" height="15" fill="rgb(235,36,11)" fg:x="20337" fg:w="8472"/><text x="30.4734%" y="1263.50">Consensus::CheckTxI..</text></g><g><title>CountWitnessSigOps (9 samples, 0.01%)</title><rect x="42.8138%" y="1253" width="0.0134%" height="15" fill="rgb(213,189,28)" fg:x="28809" fg:w="9"/><text x="43.0638%" y="1263.50"></text></g><g><title>SipHashUint256Extra (26 samples, 0.04%)</title><rect x="42.8332%" y="1189" width="0.0386%" height="15" fill="rgb(227,203,42)" fg:x="28822" fg:w="26"/><text x="43.0832%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="42.8584%" y="1173" width="0.0134%" height="15" fill="rgb(244,72,36)" fg:x="28839" fg:w="9"/><text x="43.1084%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="42.8584%" y="1157" width="0.0134%" height="15" fill="rgb(213,53,17)" fg:x="28839" fg:w="9"/><text x="43.1084%" y="1167.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (32 samples, 0.05%)</title><rect x="42.8272%" y="1237" width="0.0476%" height="15" fill="rgb(207,167,3)" fg:x="28818" fg:w="32"/><text x="43.0772%" y="1247.50"></text></g><g><title>void std::sort&lt;long*&gt; (32 samples, 0.05%)</title><rect x="42.8272%" y="1221" width="0.0476%" height="15" fill="rgb(216,98,30)" fg:x="28818" fg:w="32"/><text x="43.0772%" y="1231.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (32 samples, 0.05%)</title><rect x="42.8272%" y="1205" width="0.0476%" height="15" fill="rgb(236,123,15)" fg:x="28818" fg:w="32"/><text x="43.0772%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (10 samples, 0.01%)</title><rect x="42.8822%" y="1237" width="0.0149%" height="15" fill="rgb(248,81,50)" fg:x="28855" fg:w="10"/><text x="43.1322%" y="1247.50"></text></g><g><title>CTransaction::GetValueOut (10 samples, 0.01%)</title><rect x="42.8971%" y="1237" width="0.0149%" height="15" fill="rgb(214,120,4)" fg:x="28865" fg:w="10"/><text x="43.1471%" y="1247.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (7 samples, 0.01%)</title><rect x="42.9298%" y="1221" width="0.0104%" height="15" fill="rgb(208,179,34)" fg:x="28887" fg:w="7"/><text x="43.1798%" y="1231.50"></text></g><g><title>Chainstate::ConnectBlock (19 samples, 0.03%)</title><rect x="42.9208%" y="1237" width="0.0282%" height="15" fill="rgb(227,140,7)" fg:x="28881" fg:w="19"/><text x="43.1708%" y="1247.50"></text></g><g><title>Consensus::CheckTxInputs (7 samples, 0.01%)</title><rect x="42.9491%" y="1237" width="0.0104%" height="15" fill="rgb(214,22,6)" fg:x="28900" fg:w="7"/><text x="43.1991%" y="1247.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (8 samples, 0.01%)</title><rect x="43.0605%" y="1221" width="0.0119%" height="15" fill="rgb(207,137,27)" fg:x="28975" fg:w="8"/><text x="43.3105%" y="1231.50"></text></g><g><title>ReadLE64 (8 samples, 0.01%)</title><rect x="43.0605%" y="1205" width="0.0119%" height="15" fill="rgb(210,8,46)" fg:x="28975" fg:w="8"/><text x="43.3105%" y="1215.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.01%)</title><rect x="43.0605%" y="1189" width="0.0119%" height="15" fill="rgb(240,16,54)" fg:x="28975" fg:w="8"/><text x="43.3105%" y="1199.50"></text></g><g><title>SipHashUint256Extra (119 samples, 0.18%)</title><rect x="42.9639%" y="1237" width="0.1768%" height="15" fill="rgb(211,209,29)" fg:x="28910" fg:w="119"/><text x="43.2139%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (46 samples, 0.07%)</title><rect x="43.0724%" y="1221" width="0.0684%" height="15" fill="rgb(226,228,24)" fg:x="28983" fg:w="46"/><text x="43.3224%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (46 samples, 0.07%)</title><rect x="43.0724%" y="1205" width="0.0684%" height="15" fill="rgb(222,84,9)" fg:x="28983" fg:w="46"/><text x="43.3224%" y="1215.50"></text></g><g><title>EvaluateSequenceLocks (219 samples, 0.33%)</title><rect x="42.8272%" y="1253" width="0.3255%" height="15" fill="rgb(234,203,30)" fg:x="28818" fg:w="219"/><text x="43.0772%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="43.1408%" y="1237" width="0.0119%" height="15" fill="rgb(238,109,14)" fg:x="29029" fg:w="8"/><text x="43.3908%" y="1247.50"></text></g><g><title>GetP2SHSigOpCount (31 samples, 0.05%)</title><rect x="43.1958%" y="1157" width="0.0461%" height="15" fill="rgb(233,206,34)" fg:x="29066" fg:w="31"/><text x="43.4458%" y="1167.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.02%)</title><rect x="43.2433%" y="1157" width="0.0163%" height="15" fill="rgb(220,167,47)" fg:x="29098" fg:w="11"/><text x="43.4933%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (55 samples, 0.08%)</title><rect x="43.1839%" y="1173" width="0.0817%" height="15" fill="rgb(238,105,10)" fg:x="29058" fg:w="55"/><text x="43.4339%" y="1183.50"></text></g><g><title>GetLegacySigOpCount (9 samples, 0.01%)</title><rect x="43.2834%" y="1141" width="0.0134%" height="15" fill="rgb(213,227,17)" fg:x="29125" fg:w="9"/><text x="43.5334%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (7 samples, 0.01%)</title><rect x="43.2968%" y="1141" width="0.0104%" height="15" fill="rgb(217,132,38)" fg:x="29134" fg:w="7"/><text x="43.5468%" y="1151.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.01%)</title><rect x="43.3236%" y="1141" width="0.0104%" height="15" fill="rgb(242,146,4)" fg:x="29152" fg:w="7"/><text x="43.5736%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (103 samples, 0.15%)</title><rect x="43.1839%" y="1221" width="0.1531%" height="15" fill="rgb(212,61,9)" fg:x="29058" fg:w="103"/><text x="43.4339%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (103 samples, 0.15%)</title><rect x="43.1839%" y="1205" width="0.1531%" height="15" fill="rgb(247,126,22)" fg:x="29058" fg:w="103"/><text x="43.4339%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (103 samples, 0.15%)</title><rect x="43.1839%" y="1189" width="0.1531%" height="15" fill="rgb(220,196,2)" fg:x="29058" fg:w="103"/><text x="43.4339%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (48 samples, 0.07%)</title><rect x="43.2656%" y="1173" width="0.0713%" height="15" fill="rgb(208,46,4)" fg:x="29113" fg:w="48"/><text x="43.5156%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (48 samples, 0.07%)</title><rect x="43.2656%" y="1157" width="0.0713%" height="15" fill="rgb(252,104,46)" fg:x="29113" fg:w="48"/><text x="43.5156%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (13 samples, 0.02%)</title><rect x="43.3488%" y="1221" width="0.0193%" height="15" fill="rgb(237,152,48)" fg:x="29169" fg:w="13"/><text x="43.5988%" y="1231.50"></text></g><g><title>CCoinsViewCache::AccessCoin (135 samples, 0.20%)</title><rect x="43.1809%" y="1237" width="0.2006%" height="15" fill="rgb(221,59,37)" fg:x="29056" fg:w="135"/><text x="43.4309%" y="1247.50"></text></g><g><title>CScript::GetSigOpCount (12 samples, 0.02%)</title><rect x="43.3905%" y="1237" width="0.0178%" height="15" fill="rgb(209,202,51)" fg:x="29197" fg:w="12"/><text x="43.6405%" y="1247.50"></text></g><g><title>CScript::IsWitnessProgram (7 samples, 0.01%)</title><rect x="43.4113%" y="1237" width="0.0104%" height="15" fill="rgb(228,81,30)" fg:x="29211" fg:w="7"/><text x="43.6613%" y="1247.50"></text></g><g><title>CalculateSequenceLocks (10 samples, 0.01%)</title><rect x="43.4231%" y="1237" width="0.0149%" height="15" fill="rgb(227,42,39)" fg:x="29219" fg:w="10"/><text x="43.6731%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (14 samples, 0.02%)</title><rect x="43.4395%" y="1221" width="0.0208%" height="15" fill="rgb(221,26,2)" fg:x="29230" fg:w="14"/><text x="43.6895%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (8 samples, 0.01%)</title><rect x="43.4484%" y="1205" width="0.0119%" height="15" fill="rgb(254,61,31)" fg:x="29236" fg:w="8"/><text x="43.6984%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (8 samples, 0.01%)</title><rect x="43.4484%" y="1189" width="0.0119%" height="15" fill="rgb(222,173,38)" fg:x="29236" fg:w="8"/><text x="43.6984%" y="1199.50"></text></g><g><title>CScript::IsPushOnly (7 samples, 0.01%)</title><rect x="43.4737%" y="1205" width="0.0104%" height="15" fill="rgb(218,50,12)" fg:x="29253" fg:w="7"/><text x="43.7237%" y="1215.50"></text></g><g><title>GetScriptOp (7 samples, 0.01%)</title><rect x="43.4841%" y="1205" width="0.0104%" height="15" fill="rgb(223,88,40)" fg:x="29260" fg:w="7"/><text x="43.7341%" y="1215.50"></text></g><g><title>CScript::GetOp (23 samples, 0.03%)</title><rect x="43.4633%" y="1221" width="0.0342%" height="15" fill="rgb(237,54,19)" fg:x="29246" fg:w="23"/><text x="43.7133%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (14 samples, 0.02%)</title><rect x="43.5168%" y="1173" width="0.0208%" height="15" fill="rgb(251,129,25)" fg:x="29282" fg:w="14"/><text x="43.7668%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (14 samples, 0.02%)</title><rect x="43.5168%" y="1157" width="0.0208%" height="15" fill="rgb(238,97,19)" fg:x="29282" fg:w="14"/><text x="43.7668%" y="1167.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (14 samples, 0.02%)</title><rect x="43.5168%" y="1141" width="0.0208%" height="15" fill="rgb(240,169,18)" fg:x="29282" fg:w="14"/><text x="43.7668%" y="1151.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (14 samples, 0.02%)</title><rect x="43.5168%" y="1125" width="0.0208%" height="15" fill="rgb(230,187,49)" fg:x="29282" fg:w="14"/><text x="43.7668%" y="1135.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (14 samples, 0.02%)</title><rect x="43.5168%" y="1109" width="0.0208%" height="15" fill="rgb(209,44,26)" fg:x="29282" fg:w="14"/><text x="43.7668%" y="1119.50"></text></g><g><title>operator new (14 samples, 0.02%)</title><rect x="43.5168%" y="1093" width="0.0208%" height="15" fill="rgb(244,0,6)" fg:x="29282" fg:w="14"/><text x="43.7668%" y="1103.50"></text></g><g><title>malloc (14 samples, 0.02%)</title><rect x="43.5168%" y="1077" width="0.0208%" height="15" fill="rgb(248,18,21)" fg:x="29282" fg:w="14"/><text x="43.7668%" y="1087.50"></text></g><g><title>_int_malloc (13 samples, 0.02%)</title><rect x="43.5183%" y="1061" width="0.0193%" height="15" fill="rgb(245,180,19)" fg:x="29283" fg:w="13"/><text x="43.7683%" y="1071.50"></text></g><g><title>CScript::IsWitnessProgram (24 samples, 0.04%)</title><rect x="43.5079%" y="1221" width="0.0357%" height="15" fill="rgb(252,118,36)" fg:x="29276" fg:w="24"/><text x="43.7579%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (18 samples, 0.03%)</title><rect x="43.5168%" y="1205" width="0.0268%" height="15" fill="rgb(210,224,19)" fg:x="29282" fg:w="18"/><text x="43.7668%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (18 samples, 0.03%)</title><rect x="43.5168%" y="1189" width="0.0268%" height="15" fill="rgb(218,30,24)" fg:x="29282" fg:w="18"/><text x="43.7668%" y="1199.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="43.5510%" y="1205" width="0.0104%" height="15" fill="rgb(219,75,50)" fg:x="29305" fg:w="7"/><text x="43.8010%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="43.5510%" y="1189" width="0.0104%" height="15" fill="rgb(234,72,50)" fg:x="29305" fg:w="7"/><text x="43.8010%" y="1199.50"></text></g><g><title>CountWitnessSigOps (13 samples, 0.02%)</title><rect x="43.5435%" y="1221" width="0.0193%" height="15" fill="rgb(219,100,48)" fg:x="29300" fg:w="13"/><text x="43.7935%" y="1231.50"></text></g><g><title>GetP2SHSigOpCount (9 samples, 0.01%)</title><rect x="43.5628%" y="1221" width="0.0134%" height="15" fill="rgb(253,5,41)" fg:x="29313" fg:w="9"/><text x="43.8128%" y="1231.50"></text></g><g><title>GetScriptOp (14 samples, 0.02%)</title><rect x="43.5762%" y="1221" width="0.0208%" height="15" fill="rgb(247,181,11)" fg:x="29322" fg:w="14"/><text x="43.8262%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (10 samples, 0.01%)</title><rect x="43.5822%" y="1205" width="0.0149%" height="15" fill="rgb(222,223,25)" fg:x="29326" fg:w="10"/><text x="43.8322%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (10 samples, 0.01%)</title><rect x="43.5822%" y="1189" width="0.0149%" height="15" fill="rgb(214,198,28)" fg:x="29326" fg:w="10"/><text x="43.8322%" y="1199.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1173" width="0.0134%" height="15" fill="rgb(230,46,43)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1157" width="0.0134%" height="15" fill="rgb(233,65,53)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1167.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1141" width="0.0134%" height="15" fill="rgb(221,121,27)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1125" width="0.0134%" height="15" fill="rgb(247,70,47)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1135.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1109" width="0.0134%" height="15" fill="rgb(228,85,35)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1093" width="0.0134%" height="15" fill="rgb(209,50,18)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1077" width="0.0134%" height="15" fill="rgb(250,19,35)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1061" width="0.0134%" height="15" fill="rgb(253,107,29)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (9 samples, 0.01%)</title><rect x="43.5836%" y="1045" width="0.0134%" height="15" fill="rgb(252,179,29)" fg:x="29327" fg:w="9"/><text x="43.8336%" y="1055.50"></text></g><g><title>SipHashUint256Extra (171 samples, 0.25%)</title><rect x="43.6059%" y="1221" width="0.2541%" height="15" fill="rgb(238,194,6)" fg:x="29342" fg:w="171"/><text x="43.8559%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (66 samples, 0.10%)</title><rect x="43.7620%" y="1205" width="0.0981%" height="15" fill="rgb(238,164,29)" fg:x="29447" fg:w="66"/><text x="44.0120%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (66 samples, 0.10%)</title><rect x="43.7620%" y="1189" width="0.0981%" height="15" fill="rgb(224,25,9)" fg:x="29447" fg:w="66"/><text x="44.0120%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (9 samples, 0.01%)</title><rect x="43.8630%" y="1205" width="0.0134%" height="15" fill="rgb(244,153,23)" fg:x="29515" fg:w="9"/><text x="44.1130%" y="1215.50"></text></g><g><title>CScript::GetOp (9 samples, 0.01%)</title><rect x="43.8630%" y="1189" width="0.0134%" height="15" fill="rgb(212,203,14)" fg:x="29515" fg:w="9"/><text x="44.1130%" y="1199.50"></text></g><g><title>WitnessSigOps (17 samples, 0.03%)</title><rect x="43.8601%" y="1221" width="0.0253%" height="15" fill="rgb(220,164,20)" fg:x="29513" fg:w="17"/><text x="44.1101%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.01%)</title><rect x="43.8853%" y="1221" width="0.0134%" height="15" fill="rgb(222,203,48)" fg:x="29530" fg:w="9"/><text x="44.1353%" y="1231.50"></text></g><g><title>CountWitnessSigOps (313 samples, 0.47%)</title><rect x="43.4380%" y="1237" width="0.4652%" height="15" fill="rgb(215,159,22)" fg:x="29229" fg:w="313"/><text x="43.6880%" y="1247.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_less_iter::operator (7 samples, 0.01%)</title><rect x="43.9745%" y="1141" width="0.0104%" height="15" fill="rgb(216,183,47)" fg:x="29590" fg:w="7"/><text x="44.2245%" y="1151.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (57 samples, 0.08%)</title><rect x="43.9121%" y="1221" width="0.0847%" height="15" fill="rgb(229,195,25)" fg:x="29548" fg:w="57"/><text x="44.1621%" y="1231.50"></text></g><g><title>void std::sort&lt;long*&gt; (32 samples, 0.05%)</title><rect x="43.9492%" y="1205" width="0.0476%" height="15" fill="rgb(224,132,51)" fg:x="29573" fg:w="32"/><text x="44.1992%" y="1215.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (32 samples, 0.05%)</title><rect x="43.9492%" y="1189" width="0.0476%" height="15" fill="rgb(240,63,7)" fg:x="29573" fg:w="32"/><text x="44.1992%" y="1199.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (30 samples, 0.04%)</title><rect x="43.9522%" y="1173" width="0.0446%" height="15" fill="rgb(249,182,41)" fg:x="29575" fg:w="30"/><text x="44.2022%" y="1183.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (30 samples, 0.04%)</title><rect x="43.9522%" y="1157" width="0.0446%" height="15" fill="rgb(243,47,26)" fg:x="29575" fg:w="30"/><text x="44.2022%" y="1167.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;long*, __gnu_cxx::__ops::_Val_less_iter&gt; (8 samples, 0.01%)</title><rect x="43.9849%" y="1141" width="0.0119%" height="15" fill="rgb(233,48,2)" fg:x="29597" fg:w="8"/><text x="44.2349%" y="1151.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (26 samples, 0.04%)</title><rect x="44.0325%" y="1189" width="0.0386%" height="15" fill="rgb(244,165,34)" fg:x="29629" fg:w="26"/><text x="44.2825%" y="1199.50"></text></g><g><title>void std::sort&lt;long*&gt; (21 samples, 0.03%)</title><rect x="44.0399%" y="1173" width="0.0312%" height="15" fill="rgb(207,89,7)" fg:x="29634" fg:w="21"/><text x="44.2899%" y="1183.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (21 samples, 0.03%)</title><rect x="44.0399%" y="1157" width="0.0312%" height="15" fill="rgb(244,117,36)" fg:x="29634" fg:w="21"/><text x="44.2899%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (21 samples, 0.03%)</title><rect x="44.0399%" y="1141" width="0.0312%" height="15" fill="rgb(226,144,34)" fg:x="29634" fg:w="21"/><text x="44.2899%" y="1151.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (21 samples, 0.03%)</title><rect x="44.0399%" y="1125" width="0.0312%" height="15" fill="rgb(213,23,19)" fg:x="29634" fg:w="21"/><text x="44.2899%" y="1135.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;long*, __gnu_cxx::__ops::_Val_less_iter&gt; (8 samples, 0.01%)</title><rect x="44.0592%" y="1109" width="0.0119%" height="15" fill="rgb(217,75,12)" fg:x="29647" fg:w="8"/><text x="44.3092%" y="1119.50"></text></g><g><title>CScript::GetOp (10 samples, 0.01%)</title><rect x="44.1127%" y="1173" width="0.0149%" height="15" fill="rgb(224,159,17)" fg:x="29683" fg:w="10"/><text x="44.3627%" y="1183.50"></text></g><g><title>CScript::GetSigOpCount (54 samples, 0.08%)</title><rect x="44.0711%" y="1189" width="0.0803%" height="15" fill="rgb(217,118,1)" fg:x="29655" fg:w="54"/><text x="44.3211%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (12 samples, 0.02%)</title><rect x="44.1335%" y="1173" width="0.0178%" height="15" fill="rgb(232,180,48)" fg:x="29697" fg:w="12"/><text x="44.3835%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (8 samples, 0.01%)</title><rect x="44.1395%" y="1157" width="0.0119%" height="15" fill="rgb(230,27,33)" fg:x="29701" fg:w="8"/><text x="44.3895%" y="1167.50"></text></g><g><title>GetLegacySigOpCount (21 samples, 0.03%)</title><rect x="44.1647%" y="1189" width="0.0312%" height="15" fill="rgb(205,31,21)" fg:x="29718" fg:w="21"/><text x="44.4147%" y="1199.50"></text></g><g><title>GetScriptOp (59 samples, 0.09%)</title><rect x="44.1959%" y="1189" width="0.0877%" height="15" fill="rgb(253,59,4)" fg:x="29739" fg:w="59"/><text x="44.4459%" y="1199.50"></text></g><g><title>CScript::GetOp (183 samples, 0.27%)</title><rect x="44.0221%" y="1205" width="0.2720%" height="15" fill="rgb(224,201,9)" fg:x="29622" fg:w="183"/><text x="44.2721%" y="1215.50"></text></g><g><title>CScript::GetSigOpCount (208 samples, 0.31%)</title><rect x="43.9968%" y="1221" width="0.3091%" height="15" fill="rgb(229,206,30)" fg:x="29605" fg:w="208"/><text x="44.2468%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (7 samples, 0.01%)</title><rect x="44.2955%" y="1205" width="0.0104%" height="15" fill="rgb(212,67,47)" fg:x="29806" fg:w="7"/><text x="44.5455%" y="1215.50"></text></g><g><title>EvaluateSequenceLocks (10 samples, 0.01%)</title><rect x="44.3074%" y="1221" width="0.0149%" height="15" fill="rgb(211,96,50)" fg:x="29814" fg:w="10"/><text x="44.5574%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (9 samples, 0.01%)</title><rect x="44.3223%" y="1221" width="0.0134%" height="15" fill="rgb(252,114,18)" fg:x="29824" fg:w="9"/><text x="44.5723%" y="1231.50"></text></g><g><title>GetScriptOp (48 samples, 0.07%)</title><rect x="44.3356%" y="1221" width="0.0713%" height="15" fill="rgb(223,58,37)" fg:x="29833" fg:w="48"/><text x="44.5856%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (357 samples, 0.53%)</title><rect x="43.9047%" y="1237" width="0.5305%" height="15" fill="rgb(237,70,4)" fg:x="29543" fg:w="357"/><text x="44.1547%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (10 samples, 0.01%)</title><rect x="44.4203%" y="1221" width="0.0149%" height="15" fill="rgb(244,85,46)" fg:x="29890" fg:w="10"/><text x="44.6703%" y="1231.50"></text></g><g><title>SipHashUint256Extra (28 samples, 0.04%)</title><rect x="44.4664%" y="1125" width="0.0416%" height="15" fill="rgb(223,39,52)" fg:x="29921" fg:w="28"/><text x="44.7164%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.02%)</title><rect x="44.4902%" y="1109" width="0.0178%" height="15" fill="rgb(218,200,14)" fg:x="29937" fg:w="12"/><text x="44.7402%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.02%)</title><rect x="44.4902%" y="1093" width="0.0178%" height="15" fill="rgb(208,171,16)" fg:x="29937" fg:w="12"/><text x="44.7402%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (48 samples, 0.07%)</title><rect x="44.4411%" y="1141" width="0.0713%" height="15" fill="rgb(234,200,18)" fg:x="29904" fg:w="48"/><text x="44.6911%" y="1151.50"></text></g><g><title>CScript::GetSigOpCount (10 samples, 0.01%)</title><rect x="44.5184%" y="1109" width="0.0149%" height="15" fill="rgb(228,45,11)" fg:x="29956" fg:w="10"/><text x="44.7684%" y="1119.50"></text></g><g><title>GetScriptOp (10 samples, 0.01%)</title><rect x="44.5377%" y="1109" width="0.0149%" height="15" fill="rgb(237,182,11)" fg:x="29969" fg:w="10"/><text x="44.7877%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (80 samples, 0.12%)</title><rect x="44.4367%" y="1189" width="0.1189%" height="15" fill="rgb(241,175,49)" fg:x="29901" fg:w="80"/><text x="44.6867%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (79 samples, 0.12%)</title><rect x="44.4382%" y="1173" width="0.1174%" height="15" fill="rgb(247,38,35)" fg:x="29902" fg:w="79"/><text x="44.6882%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (79 samples, 0.12%)</title><rect x="44.4382%" y="1157" width="0.1174%" height="15" fill="rgb(228,39,49)" fg:x="29902" fg:w="79"/><text x="44.6882%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (29 samples, 0.04%)</title><rect x="44.5125%" y="1141" width="0.0431%" height="15" fill="rgb(226,101,26)" fg:x="29952" fg:w="29"/><text x="44.7625%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (29 samples, 0.04%)</title><rect x="44.5125%" y="1125" width="0.0431%" height="15" fill="rgb(206,141,19)" fg:x="29952" fg:w="29"/><text x="44.7625%" y="1135.50"></text></g><g><title>CScript::GetSigOpCount (7 samples, 0.01%)</title><rect x="44.5556%" y="1189" width="0.0104%" height="15" fill="rgb(211,200,13)" fg:x="29981" fg:w="7"/><text x="44.8056%" y="1199.50"></text></g><g><title>GetScriptOp (15 samples, 0.02%)</title><rect x="44.5719%" y="1189" width="0.0223%" height="15" fill="rgb(241,121,6)" fg:x="29992" fg:w="15"/><text x="44.8219%" y="1199.50"></text></g><g><title>CCoinsViewCache::AccessCoin (115 samples, 0.17%)</title><rect x="44.4367%" y="1205" width="0.1709%" height="15" fill="rgb(234,221,29)" fg:x="29901" fg:w="115"/><text x="44.6867%" y="1215.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.01%)</title><rect x="44.5942%" y="1189" width="0.0134%" height="15" fill="rgb(229,136,5)" fg:x="30007" fg:w="9"/><text x="44.8442%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.01%)</title><rect x="44.6239%" y="1173" width="0.0104%" height="15" fill="rgb(238,36,11)" fg:x="30027" fg:w="7"/><text x="44.8739%" y="1183.50"></text></g><g><title>GetScriptOp (8 samples, 0.01%)</title><rect x="44.6447%" y="1173" width="0.0119%" height="15" fill="rgb(251,55,41)" fg:x="30041" fg:w="8"/><text x="44.8947%" y="1183.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.02%)</title><rect x="44.6566%" y="1173" width="0.0223%" height="15" fill="rgb(242,34,40)" fg:x="30049" fg:w="15"/><text x="44.9066%" y="1183.50"></text></g><g><title>CScript::GetOp (41 samples, 0.06%)</title><rect x="44.6210%" y="1189" width="0.0609%" height="15" fill="rgb(215,42,17)" fg:x="30025" fg:w="41"/><text x="44.8710%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (7 samples, 0.01%)</title><rect x="44.6819%" y="1189" width="0.0104%" height="15" fill="rgb(207,44,46)" fg:x="30066" fg:w="7"/><text x="44.9319%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (61 samples, 0.09%)</title><rect x="44.6106%" y="1205" width="0.0907%" height="15" fill="rgb(211,206,28)" fg:x="30018" fg:w="61"/><text x="44.8606%" y="1215.50"></text></g><g><title>GetScriptOp (9 samples, 0.01%)</title><rect x="44.7042%" y="1205" width="0.0134%" height="15" fill="rgb(237,167,16)" fg:x="30081" fg:w="9"/><text x="44.9542%" y="1215.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.02%)</title><rect x="44.7190%" y="1205" width="0.0223%" height="15" fill="rgb(233,66,6)" fg:x="30091" fg:w="15"/><text x="44.9690%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="44.7295%" y="1189" width="0.0119%" height="15" fill="rgb(246,123,29)" fg:x="30098" fg:w="8"/><text x="44.9795%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="44.7295%" y="1173" width="0.0119%" height="15" fill="rgb(209,62,40)" fg:x="30098" fg:w="8"/><text x="44.9795%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (208 samples, 0.31%)</title><rect x="44.4352%" y="1237" width="0.3091%" height="15" fill="rgb(218,4,25)" fg:x="29900" fg:w="208"/><text x="44.6852%" y="1247.50"></text></g><g><title>GetP2SHSigOpCount (207 samples, 0.31%)</title><rect x="44.4367%" y="1221" width="0.3076%" height="15" fill="rgb(253,91,49)" fg:x="29901" fg:w="207"/><text x="44.6867%" y="1231.50"></text></g><g><title>GetScriptOp (25 samples, 0.04%)</title><rect x="44.7443%" y="1237" width="0.0372%" height="15" fill="rgb(228,155,29)" fg:x="30108" fg:w="25"/><text x="44.9943%" y="1247.50"></text></g><g><title>SipHashUint256Extra (29 samples, 0.04%)</title><rect x="44.7844%" y="1237" width="0.0431%" height="15" fill="rgb(243,57,37)" fg:x="30135" fg:w="29"/><text x="45.0344%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="44.8142%" y="1221" width="0.0134%" height="15" fill="rgb(244,167,17)" fg:x="30155" fg:w="9"/><text x="45.0642%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.01%)</title><rect x="44.8142%" y="1205" width="0.0134%" height="15" fill="rgb(207,181,38)" fg:x="30155" fg:w="9"/><text x="45.0642%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="44.8275%" y="1237" width="0.0104%" height="15" fill="rgb(211,8,23)" fg:x="30164" fg:w="7"/><text x="45.0775%" y="1247.50"></text></g><g><title>GetTransactionSigOpCost (1,126 samples, 1.67%)</title><rect x="43.1660%" y="1253" width="1.6734%" height="15" fill="rgb(235,11,44)" fg:x="29046" fg:w="1126"/><text x="43.4160%" y="1263.50"></text></g><g><title>SipHashUint256Extra (12 samples, 0.02%)</title><rect x="44.8573%" y="1237" width="0.0178%" height="15" fill="rgb(248,18,52)" fg:x="30184" fg:w="12"/><text x="45.1073%" y="1247.50"></text></g><g><title>SequenceLocks (27 samples, 0.04%)</title><rect x="44.8394%" y="1253" width="0.0401%" height="15" fill="rgb(208,4,7)" fg:x="30172" fg:w="27"/><text x="45.0894%" y="1263.50"></text></g><g><title>SipHashUint256Extra (201 samples, 0.30%)</title><rect x="44.8795%" y="1253" width="0.2987%" height="15" fill="rgb(240,17,39)" fg:x="30199" fg:w="201"/><text x="45.1295%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (82 samples, 0.12%)</title><rect x="45.0564%" y="1237" width="0.1219%" height="15" fill="rgb(207,170,3)" fg:x="30318" fg:w="82"/><text x="45.3064%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (82 samples, 0.12%)</title><rect x="45.0564%" y="1221" width="0.1219%" height="15" fill="rgb(236,100,52)" fg:x="30318" fg:w="82"/><text x="45.3064%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (50 samples, 0.07%)</title><rect x="45.1887%" y="1237" width="0.0743%" height="15" fill="rgb(246,78,51)" fg:x="30407" fg:w="50"/><text x="45.4387%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (22 samples, 0.03%)</title><rect x="45.2303%" y="1221" width="0.0327%" height="15" fill="rgb(211,17,15)" fg:x="30435" fg:w="22"/><text x="45.4803%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (21 samples, 0.03%)</title><rect x="45.2318%" y="1205" width="0.0312%" height="15" fill="rgb(209,59,46)" fg:x="30436" fg:w="21"/><text x="45.4818%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (18 samples, 0.03%)</title><rect x="45.2362%" y="1189" width="0.0268%" height="15" fill="rgb(210,92,25)" fg:x="30439" fg:w="18"/><text x="45.4862%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (18 samples, 0.03%)</title><rect x="45.2362%" y="1173" width="0.0268%" height="15" fill="rgb(238,174,52)" fg:x="30439" fg:w="18"/><text x="45.4862%" y="1183.50"></text></g><g><title>CCoinsViewCache::FetchCoin (15 samples, 0.02%)</title><rect x="45.2942%" y="1221" width="0.0223%" height="15" fill="rgb(230,73,7)" fg:x="30478" fg:w="15"/><text x="45.5442%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (15 samples, 0.02%)</title><rect x="45.2942%" y="1205" width="0.0223%" height="15" fill="rgb(243,124,40)" fg:x="30478" fg:w="15"/><text x="45.5442%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (15 samples, 0.02%)</title><rect x="45.2942%" y="1189" width="0.0223%" height="15" fill="rgb(244,170,11)" fg:x="30478" fg:w="15"/><text x="45.5442%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (12 samples, 0.02%)</title><rect x="45.2986%" y="1173" width="0.0178%" height="15" fill="rgb(207,114,54)" fg:x="30481" fg:w="12"/><text x="45.5486%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (12 samples, 0.02%)</title><rect x="45.2986%" y="1157" width="0.0178%" height="15" fill="rgb(205,42,20)" fg:x="30481" fg:w="12"/><text x="45.5486%" y="1167.50"></text></g><g><title>UpdateCoins (7 samples, 0.01%)</title><rect x="45.3061%" y="1141" width="0.0104%" height="15" fill="rgb(230,30,28)" fg:x="30486" fg:w="7"/><text x="45.5561%" y="1151.50"></text></g><g><title>CCheckQueueControl&lt;CScriptCheck&gt;::Add (8 samples, 0.01%)</title><rect x="45.3209%" y="1205" width="0.0119%" height="15" fill="rgb(205,73,54)" fg:x="30496" fg:w="8"/><text x="45.5709%" y="1215.50"></text></g><g><title>Chainstate::ConnectBlock (12 samples, 0.02%)</title><rect x="45.3194%" y="1221" width="0.0178%" height="15" fill="rgb(254,227,23)" fg:x="30495" fg:w="12"/><text x="45.5694%" y="1231.50"></text></g><g><title>Coin::Clear (8 samples, 0.01%)</title><rect x="45.3373%" y="1221" width="0.0119%" height="15" fill="rgb(228,202,34)" fg:x="30507" fg:w="8"/><text x="45.5873%" y="1231.50"></text></g><g><title>CTxOut::SetNull (7 samples, 0.01%)</title><rect x="45.3388%" y="1205" width="0.0104%" height="15" fill="rgb(222,225,37)" fg:x="30508" fg:w="7"/><text x="45.5888%" y="1215.50"></text></g><g><title>CScript::clear (7 samples, 0.01%)</title><rect x="45.3388%" y="1189" width="0.0104%" height="15" fill="rgb(221,14,54)" fg:x="30508" fg:w="7"/><text x="45.5888%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (7 samples, 0.01%)</title><rect x="45.3388%" y="1173" width="0.0104%" height="15" fill="rgb(254,102,2)" fg:x="30508" fg:w="7"/><text x="45.5888%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (7 samples, 0.01%)</title><rect x="45.3388%" y="1157" width="0.0104%" height="15" fill="rgb(232,104,17)" fg:x="30508" fg:w="7"/><text x="45.5888%" y="1167.50"></text></g><g><title>SipHashUint256Extra (24 samples, 0.04%)</title><rect x="45.3819%" y="1189" width="0.0357%" height="15" fill="rgb(250,220,14)" fg:x="30537" fg:w="24"/><text x="45.6319%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="45.4056%" y="1173" width="0.0119%" height="15" fill="rgb(241,158,9)" fg:x="30553" fg:w="8"/><text x="45.6556%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="45.4056%" y="1157" width="0.0119%" height="15" fill="rgb(246,9,43)" fg:x="30553" fg:w="8"/><text x="45.6556%" y="1167.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.02%)</title><rect x="45.4398%" y="1109" width="0.0163%" height="15" fill="rgb(206,73,33)" fg:x="30576" fg:w="11"/><text x="45.6898%" y="1119.50"></text></g><g><title>CCoinsViewCache::SpendCoin (134 samples, 0.20%)</title><rect x="45.2630%" y="1237" width="0.1991%" height="15" fill="rgb(222,79,8)" fg:x="30457" fg:w="134"/><text x="45.5130%" y="1247.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (65 samples, 0.10%)</title><rect x="45.3655%" y="1221" width="0.0966%" height="15" fill="rgb(234,8,54)" fg:x="30526" fg:w="65"/><text x="45.6155%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (65 samples, 0.10%)</title><rect x="45.3655%" y="1205" width="0.0966%" height="15" fill="rgb(209,134,38)" fg:x="30526" fg:w="65"/><text x="45.6155%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (21 samples, 0.03%)</title><rect x="45.4309%" y="1189" width="0.0312%" height="15" fill="rgb(230,127,29)" fg:x="30570" fg:w="21"/><text x="45.6809%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (21 samples, 0.03%)</title><rect x="45.4309%" y="1173" width="0.0312%" height="15" fill="rgb(242,44,41)" fg:x="30570" fg:w="21"/><text x="45.6809%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (21 samples, 0.03%)</title><rect x="45.4309%" y="1157" width="0.0312%" height="15" fill="rgb(222,56,43)" fg:x="30570" fg:w="21"/><text x="45.6809%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (21 samples, 0.03%)</title><rect x="45.4309%" y="1141" width="0.0312%" height="15" fill="rgb(238,39,47)" fg:x="30570" fg:w="21"/><text x="45.6809%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (21 samples, 0.03%)</title><rect x="45.4309%" y="1125" width="0.0312%" height="15" fill="rgb(226,79,43)" fg:x="30570" fg:w="21"/><text x="45.6809%" y="1135.50"></text></g><g><title>SipHashUint256Extra (133 samples, 0.20%)</title><rect x="45.4710%" y="1237" width="0.1977%" height="15" fill="rgb(242,105,53)" fg:x="30597" fg:w="133"/><text x="45.7210%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (56 samples, 0.08%)</title><rect x="45.5855%" y="1221" width="0.0832%" height="15" fill="rgb(251,132,46)" fg:x="30674" fg:w="56"/><text x="45.8355%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (56 samples, 0.08%)</title><rect x="45.5855%" y="1205" width="0.0832%" height="15" fill="rgb(231,77,14)" fg:x="30674" fg:w="56"/><text x="45.8355%" y="1215.50"></text></g><g><title>UpdateCoins (24 samples, 0.04%)</title><rect x="45.6687%" y="1237" width="0.0357%" height="15" fill="rgb(240,135,9)" fg:x="30730" fg:w="24"/><text x="45.9187%" y="1247.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (8 samples, 0.01%)</title><rect x="45.6925%" y="1221" width="0.0119%" height="15" fill="rgb(248,109,14)" fg:x="30746" fg:w="8"/><text x="45.9425%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.02%)</title><rect x="45.7073%" y="1237" width="0.0193%" height="15" fill="rgb(227,146,52)" fg:x="30756" fg:w="13"/><text x="45.9573%" y="1247.50"></text></g><g><title>malloc (20 samples, 0.03%)</title><rect x="45.7311%" y="1125" width="0.0297%" height="15" fill="rgb(232,54,3)" fg:x="30772" fg:w="20"/><text x="45.9811%" y="1135.50"></text></g><g><title>_int_malloc (19 samples, 0.03%)</title><rect x="45.7326%" y="1109" width="0.0282%" height="15" fill="rgb(229,201,43)" fg:x="30773" fg:w="19"/><text x="45.9826%" y="1119.50"></text></g><g><title>UpdateCoins (390 samples, 0.58%)</title><rect x="45.1857%" y="1253" width="0.5796%" height="15" fill="rgb(252,161,33)" fg:x="30405" fg:w="390"/><text x="45.4357%" y="1263.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (26 samples, 0.04%)</title><rect x="45.7266%" y="1237" width="0.0386%" height="15" fill="rgb(226,146,40)" fg:x="30769" fg:w="26"/><text x="45.9766%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (26 samples, 0.04%)</title><rect x="45.7266%" y="1221" width="0.0386%" height="15" fill="rgb(219,47,25)" fg:x="30769" fg:w="26"/><text x="45.9766%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (26 samples, 0.04%)</title><rect x="45.7266%" y="1205" width="0.0386%" height="15" fill="rgb(250,135,13)" fg:x="30769" fg:w="26"/><text x="45.9766%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (26 samples, 0.04%)</title><rect x="45.7266%" y="1189" width="0.0386%" height="15" fill="rgb(219,229,18)" fg:x="30769" fg:w="26"/><text x="45.9766%" y="1199.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (26 samples, 0.04%)</title><rect x="45.7266%" y="1173" width="0.0386%" height="15" fill="rgb(217,152,27)" fg:x="30769" fg:w="26"/><text x="45.9766%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (26 samples, 0.04%)</title><rect x="45.7266%" y="1157" width="0.0386%" height="15" fill="rgb(225,71,47)" fg:x="30769" fg:w="26"/><text x="45.9766%" y="1167.50"></text></g><g><title>operator new (25 samples, 0.04%)</title><rect x="45.7281%" y="1141" width="0.0372%" height="15" fill="rgb(220,139,14)" fg:x="30770" fg:w="25"/><text x="45.9781%" y="1151.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (9 samples, 0.01%)</title><rect x="45.7846%" y="1221" width="0.0134%" height="15" fill="rgb(247,54,32)" fg:x="30808" fg:w="9"/><text x="46.0346%" y="1231.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (9 samples, 0.01%)</title><rect x="45.7846%" y="1205" width="0.0134%" height="15" fill="rgb(252,131,39)" fg:x="30808" fg:w="9"/><text x="46.0346%" y="1215.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (9 samples, 0.01%)</title><rect x="45.7846%" y="1189" width="0.0134%" height="15" fill="rgb(210,108,39)" fg:x="30808" fg:w="9"/><text x="46.0346%" y="1199.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (9 samples, 0.01%)</title><rect x="45.7846%" y="1173" width="0.0134%" height="15" fill="rgb(205,23,29)" fg:x="30808" fg:w="9"/><text x="46.0346%" y="1183.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (9 samples, 0.01%)</title><rect x="45.7846%" y="1157" width="0.0134%" height="15" fill="rgb(246,139,46)" fg:x="30808" fg:w="9"/><text x="46.0346%" y="1167.50"></text></g><g><title>AutoFile::write (38 samples, 0.06%)</title><rect x="45.7757%" y="1237" width="0.0565%" height="15" fill="rgb(250,81,26)" fg:x="30802" fg:w="38"/><text x="46.0257%" y="1247.50"></text></g><g><title>util::Xor (23 samples, 0.03%)</title><rect x="45.7980%" y="1221" width="0.0342%" height="15" fill="rgb(214,104,7)" fg:x="30817" fg:w="23"/><text x="46.0480%" y="1231.50"></text></g><g><title>CSHA256::Write (37 samples, 0.05%)</title><rect x="45.8322%" y="1237" width="0.0550%" height="15" fill="rgb(233,189,8)" fg:x="30840" fg:w="37"/><text x="46.0822%" y="1247.50"></text></g><g><title>CompressAmount (7 samples, 0.01%)</title><rect x="45.8871%" y="1237" width="0.0104%" height="15" fill="rgb(228,141,17)" fg:x="30877" fg:w="7"/><text x="46.1371%" y="1247.50"></text></g><g><title>AllocateFileRange (8 samples, 0.01%)</title><rect x="45.9065%" y="1205" width="0.0119%" height="15" fill="rgb(247,157,1)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1215.50"></text></g><g><title>posix_fallocate (8 samples, 0.01%)</title><rect x="45.9065%" y="1189" width="0.0119%" height="15" fill="rgb(249,225,5)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.9065%" y="1173" width="0.0119%" height="15" fill="rgb(242,55,13)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.9065%" y="1157" width="0.0119%" height="15" fill="rgb(230,49,50)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.9065%" y="1141" width="0.0119%" height="15" fill="rgb(241,111,38)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.9065%" y="1125" width="0.0119%" height="15" fill="rgb(252,155,4)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1135.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="45.9065%" y="1109" width="0.0119%" height="15" fill="rgb(212,69,32)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1119.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="45.9065%" y="1093" width="0.0119%" height="15" fill="rgb(243,107,47)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1103.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="45.9065%" y="1077" width="0.0119%" height="15" fill="rgb(247,130,12)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1087.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="45.9065%" y="1061" width="0.0119%" height="15" fill="rgb(233,74,16)" fg:x="30890" fg:w="8"/><text x="46.1565%" y="1071.50"></text></g><g><title>node::BlockManager::FindUndoPos (19 samples, 0.03%)</title><rect x="45.9065%" y="1237" width="0.0282%" height="15" fill="rgb(208,58,18)" fg:x="30890" fg:w="19"/><text x="46.1565%" y="1247.50"></text></g><g><title>FlatFileSeq::Allocate (19 samples, 0.03%)</title><rect x="45.9065%" y="1221" width="0.0282%" height="15" fill="rgb(242,225,1)" fg:x="30890" fg:w="19"/><text x="46.1565%" y="1231.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="45.9436%" y="677" width="0.0104%" height="15" fill="rgb(249,39,40)" fg:x="30915" fg:w="7"/><text x="46.1936%" y="687.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="45.9436%" y="661" width="0.0104%" height="15" fill="rgb(207,72,44)" fg:x="30915" fg:w="7"/><text x="46.1936%" y="671.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="45.9436%" y="645" width="0.0104%" height="15" fill="rgb(215,193,12)" fg:x="30915" fg:w="7"/><text x="46.1936%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (7 samples, 0.01%)</title><rect x="45.9436%" y="629" width="0.0104%" height="15" fill="rgb(248,41,39)" fg:x="30915" fg:w="7"/><text x="46.1936%" y="639.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (7 samples, 0.01%)</title><rect x="45.9436%" y="613" width="0.0104%" height="15" fill="rgb(253,85,4)" fg:x="30915" fg:w="7"/><text x="46.1936%" y="623.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (15 samples, 0.02%)</title><rect x="45.9436%" y="725" width="0.0223%" height="15" fill="rgb(243,70,31)" fg:x="30915" fg:w="15"/><text x="46.1936%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (15 samples, 0.02%)</title><rect x="45.9436%" y="709" width="0.0223%" height="15" fill="rgb(253,195,26)" fg:x="30915" fg:w="15"/><text x="46.1936%" y="719.50"></text></g><g><title>AutoFile::write (15 samples, 0.02%)</title><rect x="45.9436%" y="693" width="0.0223%" height="15" fill="rgb(243,42,11)" fg:x="30915" fg:w="15"/><text x="46.1936%" y="703.50"></text></g><g><title>util::Xor (8 samples, 0.01%)</title><rect x="45.9540%" y="677" width="0.0119%" height="15" fill="rgb(239,66,17)" fg:x="30922" fg:w="8"/><text x="46.2040%" y="687.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (8 samples, 0.01%)</title><rect x="45.9689%" y="725" width="0.0119%" height="15" fill="rgb(217,132,21)" fg:x="30932" fg:w="8"/><text x="46.2189%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="45.9689%" y="709" width="0.0119%" height="15" fill="rgb(252,202,21)" fg:x="30932" fg:w="8"/><text x="46.2189%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (8 samples, 0.01%)</title><rect x="45.9689%" y="693" width="0.0119%" height="15" fill="rgb(233,98,36)" fg:x="30932" fg:w="8"/><text x="46.2189%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (8 samples, 0.01%)</title><rect x="45.9689%" y="677" width="0.0119%" height="15" fill="rgb(216,153,54)" fg:x="30932" fg:w="8"/><text x="46.2189%" y="687.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (34 samples, 0.05%)</title><rect x="45.9347%" y="869" width="0.0505%" height="15" fill="rgb(250,99,7)" fg:x="30909" fg:w="34"/><text x="46.1847%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (34 samples, 0.05%)</title><rect x="45.9347%" y="853" width="0.0505%" height="15" fill="rgb(207,56,50)" fg:x="30909" fg:w="34"/><text x="46.1847%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (34 samples, 0.05%)</title><rect x="45.9347%" y="837" width="0.0505%" height="15" fill="rgb(244,61,34)" fg:x="30909" fg:w="34"/><text x="46.1847%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (34 samples, 0.05%)</title><rect x="45.9347%" y="821" width="0.0505%" height="15" fill="rgb(241,50,38)" fg:x="30909" fg:w="34"/><text x="46.1847%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (34 samples, 0.05%)</title><rect x="45.9347%" y="805" width="0.0505%" height="15" fill="rgb(212,166,30)" fg:x="30909" fg:w="34"/><text x="46.1847%" y="815.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (34 samples, 0.05%)</title><rect x="45.9347%" y="789" width="0.0505%" height="15" fill="rgb(249,127,32)" fg:x="30909" fg:w="34"/><text x="46.1847%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (28 samples, 0.04%)</title><rect x="45.9436%" y="773" width="0.0416%" height="15" fill="rgb(209,103,0)" fg:x="30915" fg:w="28"/><text x="46.1936%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (28 samples, 0.04%)</title><rect x="45.9436%" y="757" width="0.0416%" height="15" fill="rgb(238,209,51)" fg:x="30915" fg:w="28"/><text x="46.1936%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (28 samples, 0.04%)</title><rect x="45.9436%" y="741" width="0.0416%" height="15" fill="rgb(237,56,23)" fg:x="30915" fg:w="28"/><text x="46.1936%" y="751.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (39 samples, 0.06%)</title><rect x="45.9347%" y="1221" width="0.0580%" height="15" fill="rgb(215,153,46)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1205" width="0.0580%" height="15" fill="rgb(224,49,31)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1189" width="0.0580%" height="15" fill="rgb(250,18,42)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1173" width="0.0580%" height="15" fill="rgb(215,176,39)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1157" width="0.0580%" height="15" fill="rgb(223,77,29)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1141" width="0.0580%" height="15" fill="rgb(234,94,52)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1125" width="0.0580%" height="15" fill="rgb(220,154,50)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1109" width="0.0580%" height="15" fill="rgb(212,11,10)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1119.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1093" width="0.0580%" height="15" fill="rgb(205,166,19)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1077" width="0.0580%" height="15" fill="rgb(244,198,16)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1061" width="0.0580%" height="15" fill="rgb(219,69,12)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1045" width="0.0580%" height="15" fill="rgb(245,30,7)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1055.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1029" width="0.0580%" height="15" fill="rgb(218,221,48)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="1013" width="0.0580%" height="15" fill="rgb(216,66,15)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="997" width="0.0580%" height="15" fill="rgb(226,122,50)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="981" width="0.0580%" height="15" fill="rgb(239,156,16)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="965" width="0.0580%" height="15" fill="rgb(224,27,38)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="975.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="949" width="0.0580%" height="15" fill="rgb(224,39,27)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="959.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="933" width="0.0580%" height="15" fill="rgb(215,92,29)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="917" width="0.0580%" height="15" fill="rgb(207,159,16)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="901" width="0.0580%" height="15" fill="rgb(238,163,47)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (39 samples, 0.06%)</title><rect x="45.9347%" y="885" width="0.0580%" height="15" fill="rgb(219,91,49)" fg:x="30909" fg:w="39"/><text x="46.1847%" y="895.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="45.9956%" y="1029" width="0.0104%" height="15" fill="rgb(227,167,31)" fg:x="30950" fg:w="7"/><text x="46.2456%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="45.9956%" y="1013" width="0.0104%" height="15" fill="rgb(234,80,54)" fg:x="30950" fg:w="7"/><text x="46.2456%" y="1023.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (9 samples, 0.01%)</title><rect x="45.9941%" y="1157" width="0.0134%" height="15" fill="rgb(212,114,2)" fg:x="30949" fg:w="9"/><text x="46.2441%" y="1167.50"></text></g><g><title>new_do_write (9 samples, 0.01%)</title><rect x="45.9941%" y="1141" width="0.0134%" height="15" fill="rgb(234,50,24)" fg:x="30949" fg:w="9"/><text x="46.2441%" y="1151.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (9 samples, 0.01%)</title><rect x="45.9941%" y="1125" width="0.0134%" height="15" fill="rgb(221,68,8)" fg:x="30949" fg:w="9"/><text x="46.2441%" y="1135.50"></text></g><g><title>__GI___libc_write (9 samples, 0.01%)</title><rect x="45.9941%" y="1109" width="0.0134%" height="15" fill="rgb(254,180,31)" fg:x="30949" fg:w="9"/><text x="46.2441%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="45.9941%" y="1093" width="0.0134%" height="15" fill="rgb(247,130,50)" fg:x="30949" fg:w="9"/><text x="46.2441%" y="1103.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="45.9941%" y="1077" width="0.0134%" height="15" fill="rgb(211,109,4)" fg:x="30949" fg:w="9"/><text x="46.2441%" y="1087.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="45.9941%" y="1061" width="0.0134%" height="15" fill="rgb(238,50,21)" fg:x="30949" fg:w="9"/><text x="46.2441%" y="1071.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="45.9956%" y="1045" width="0.0119%" height="15" fill="rgb(225,57,45)" fg:x="30950" fg:w="8"/><text x="46.2456%" y="1055.50"></text></g><g><title>AutoFile::~AutoFile (12 samples, 0.02%)</title><rect x="45.9927%" y="1221" width="0.0178%" height="15" fill="rgb(209,196,50)" fg:x="30948" fg:w="12"/><text x="46.2427%" y="1231.50"></text></g><g><title>AutoFile::fclose (12 samples, 0.02%)</title><rect x="45.9927%" y="1205" width="0.0178%" height="15" fill="rgb(242,140,13)" fg:x="30948" fg:w="12"/><text x="46.2427%" y="1215.50"></text></g><g><title>fclose@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="45.9927%" y="1189" width="0.0178%" height="15" fill="rgb(217,111,7)" fg:x="30948" fg:w="12"/><text x="46.2427%" y="1199.50"></text></g><g><title>_IO_file_close_it@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="45.9927%" y="1173" width="0.0178%" height="15" fill="rgb(253,193,51)" fg:x="30948" fg:w="12"/><text x="46.2427%" y="1183.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="46.0179%" y="725" width="0.0104%" height="15" fill="rgb(252,70,29)" fg:x="30965" fg:w="7"/><text x="46.2679%" y="735.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.01%)</title><rect x="46.1487%" y="581" width="0.0104%" height="15" fill="rgb(232,127,12)" fg:x="31053" fg:w="7"/><text x="46.3987%" y="591.50"></text></g><g><title>memcpy (11 samples, 0.02%)</title><rect x="46.1442%" y="597" width="0.0163%" height="15" fill="rgb(211,180,21)" fg:x="31050" fg:w="11"/><text x="46.3942%" y="607.50"></text></g><g><title>CSHA256::Write (74 samples, 0.11%)</title><rect x="46.0521%" y="613" width="0.1100%" height="15" fill="rgb(229,72,13)" fg:x="30988" fg:w="74"/><text x="46.3021%" y="623.50"></text></g><g><title>CompressAmount (11 samples, 0.02%)</title><rect x="46.1621%" y="613" width="0.0163%" height="15" fill="rgb(240,211,49)" fg:x="31062" fg:w="11"/><text x="46.4121%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.1829%" y="245" width="0.0134%" height="15" fill="rgb(219,149,40)" fg:x="31076" fg:w="9"/><text x="46.4329%" y="255.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.1829%" y="229" width="0.0134%" height="15" fill="rgb(210,127,46)" fg:x="31076" fg:w="9"/><text x="46.4329%" y="239.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.1829%" y="213" width="0.0134%" height="15" fill="rgb(220,106,7)" fg:x="31076" fg:w="9"/><text x="46.4329%" y="223.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="46.1829%" y="197" width="0.0134%" height="15" fill="rgb(249,31,22)" fg:x="31076" fg:w="9"/><text x="46.4329%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="181" width="0.0119%" height="15" fill="rgb(253,1,49)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="191.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="165" width="0.0119%" height="15" fill="rgb(227,144,33)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="149" width="0.0119%" height="15" fill="rgb(249,163,44)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="159.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="133" width="0.0119%" height="15" fill="rgb(234,15,39)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="143.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="117" width="0.0119%" height="15" fill="rgb(207,66,16)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="127.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (8 samples, 0.01%)</title><rect x="46.1844%" y="101" width="0.0119%" height="15" fill="rgb(233,112,24)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="111.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="85" width="0.0119%" height="15" fill="rgb(230,90,22)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="95.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="69" width="0.0119%" height="15" fill="rgb(229,61,13)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="79.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="53" width="0.0119%" height="15" fill="rgb(225,57,24)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="63.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (8 samples, 0.01%)</title><rect x="46.1844%" y="37" width="0.0119%" height="15" fill="rgb(208,169,48)" fg:x="31077" fg:w="8"/><text x="46.4344%" y="47.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (13 samples, 0.02%)</title><rect x="46.1829%" y="613" width="0.0193%" height="15" fill="rgb(244,218,51)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (13 samples, 0.02%)</title><rect x="46.1829%" y="597" width="0.0193%" height="15" fill="rgb(214,148,10)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="581" width="0.0193%" height="15" fill="rgb(225,174,27)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="565" width="0.0193%" height="15" fill="rgb(230,96,26)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="549" width="0.0193%" height="15" fill="rgb(232,10,30)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="533" width="0.0193%" height="15" fill="rgb(222,8,50)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="517" width="0.0193%" height="15" fill="rgb(213,81,27)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="501" width="0.0193%" height="15" fill="rgb(245,50,10)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="485" width="0.0193%" height="15" fill="rgb(216,100,18)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="469" width="0.0193%" height="15" fill="rgb(236,147,54)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="453" width="0.0193%" height="15" fill="rgb(205,143,26)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="437" width="0.0193%" height="15" fill="rgb(236,26,9)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="421" width="0.0193%" height="15" fill="rgb(221,165,53)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="405" width="0.0193%" height="15" fill="rgb(214,110,17)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="389" width="0.0193%" height="15" fill="rgb(237,197,12)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="373" width="0.0193%" height="15" fill="rgb(205,84,17)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="357" width="0.0193%" height="15" fill="rgb(237,18,45)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="341" width="0.0193%" height="15" fill="rgb(221,87,14)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="325" width="0.0193%" height="15" fill="rgb(238,186,15)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="309" width="0.0193%" height="15" fill="rgb(208,115,11)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="293" width="0.0193%" height="15" fill="rgb(254,175,0)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="277" width="0.0193%" height="15" fill="rgb(227,24,42)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (13 samples, 0.02%)</title><rect x="46.1829%" y="261" width="0.0193%" height="15" fill="rgb(223,211,37)" fg:x="31076" fg:w="13"/><text x="46.4329%" y="271.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="46.2022%" y="613" width="0.0104%" height="15" fill="rgb(235,49,27)" fg:x="31089" fg:w="7"/><text x="46.4522%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (134 samples, 0.20%)</title><rect x="46.0313%" y="725" width="0.1991%" height="15" fill="rgb(254,97,51)" fg:x="30974" fg:w="134"/><text x="46.2813%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (134 samples, 0.20%)</title><rect x="46.0313%" y="709" width="0.1991%" height="15" fill="rgb(249,51,40)" fg:x="30974" fg:w="134"/><text x="46.2813%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (134 samples, 0.20%)</title><rect x="46.0313%" y="693" width="0.1991%" height="15" fill="rgb(210,128,45)" fg:x="30974" fg:w="134"/><text x="46.2813%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (134 samples, 0.20%)</title><rect x="46.0313%" y="677" width="0.1991%" height="15" fill="rgb(224,137,50)" fg:x="30974" fg:w="134"/><text x="46.2813%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (134 samples, 0.20%)</title><rect x="46.0313%" y="661" width="0.1991%" height="15" fill="rgb(242,15,9)" fg:x="30974" fg:w="134"/><text x="46.2813%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (122 samples, 0.18%)</title><rect x="46.0491%" y="645" width="0.1813%" height="15" fill="rgb(233,187,41)" fg:x="30986" fg:w="122"/><text x="46.2991%" y="655.50"></text></g><g><title>HashWriter::write (122 samples, 0.18%)</title><rect x="46.0491%" y="629" width="0.1813%" height="15" fill="rgb(227,2,29)" fg:x="30986" fg:w="122"/><text x="46.2991%" y="639.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (12 samples, 0.02%)</title><rect x="46.2126%" y="613" width="0.0178%" height="15" fill="rgb(222,70,3)" fg:x="31096" fg:w="12"/><text x="46.4626%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (150 samples, 0.22%)</title><rect x="46.0164%" y="773" width="0.2229%" height="15" fill="rgb(213,11,42)" fg:x="30964" fg:w="150"/><text x="46.2664%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (150 samples, 0.22%)</title><rect x="46.0164%" y="757" width="0.2229%" height="15" fill="rgb(225,150,9)" fg:x="30964" fg:w="150"/><text x="46.2664%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (150 samples, 0.22%)</title><rect x="46.0164%" y="741" width="0.2229%" height="15" fill="rgb(230,162,45)" fg:x="30964" fg:w="150"/><text x="46.2664%" y="751.50"></text></g><g><title>CSHA256::Write (17 samples, 0.03%)</title><rect x="46.2483%" y="709" width="0.0253%" height="15" fill="rgb(222,14,52)" fg:x="31120" fg:w="17"/><text x="46.4983%" y="719.50"></text></g><g><title>CompressScript (27 samples, 0.04%)</title><rect x="46.2483%" y="725" width="0.0401%" height="15" fill="rgb(254,198,14)" fg:x="31120" fg:w="27"/><text x="46.4983%" y="735.50"></text></g><g><title>CSHA256::Write (18 samples, 0.03%)</title><rect x="46.3226%" y="661" width="0.0268%" height="15" fill="rgb(220,217,30)" fg:x="31170" fg:w="18"/><text x="46.5726%" y="671.50"></text></g><g><title>CSHA256::Write (62 samples, 0.09%)</title><rect x="46.2884%" y="677" width="0.0921%" height="15" fill="rgb(215,146,41)" fg:x="31147" fg:w="62"/><text x="46.5384%" y="687.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.3820%" y="213" width="0.0104%" height="15" fill="rgb(217,27,36)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="223.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.3820%" y="197" width="0.0104%" height="15" fill="rgb(219,218,39)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="207.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (7 samples, 0.01%)</title><rect x="46.3820%" y="181" width="0.0104%" height="15" fill="rgb(219,4,42)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="191.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (7 samples, 0.01%)</title><rect x="46.3820%" y="165" width="0.0104%" height="15" fill="rgb(249,119,36)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.3820%" y="149" width="0.0104%" height="15" fill="rgb(209,23,33)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="159.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.3820%" y="133" width="0.0104%" height="15" fill="rgb(211,10,0)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="143.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (7 samples, 0.01%)</title><rect x="46.3820%" y="117" width="0.0104%" height="15" fill="rgb(208,99,37)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="127.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (7 samples, 0.01%)</title><rect x="46.3820%" y="101" width="0.0104%" height="15" fill="rgb(213,132,31)" fg:x="31210" fg:w="7"/><text x="46.6320%" y="111.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (8 samples, 0.01%)</title><rect x="46.3820%" y="677" width="0.0119%" height="15" fill="rgb(243,129,40)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="687.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (8 samples, 0.01%)</title><rect x="46.3820%" y="661" width="0.0119%" height="15" fill="rgb(210,66,33)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="645" width="0.0119%" height="15" fill="rgb(209,189,4)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="655.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="629" width="0.0119%" height="15" fill="rgb(214,107,37)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="639.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="613" width="0.0119%" height="15" fill="rgb(245,88,54)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="623.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="597" width="0.0119%" height="15" fill="rgb(205,146,20)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="581" width="0.0119%" height="15" fill="rgb(220,161,25)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="591.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="565" width="0.0119%" height="15" fill="rgb(215,152,15)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="549" width="0.0119%" height="15" fill="rgb(233,192,44)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="533" width="0.0119%" height="15" fill="rgb(240,170,46)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="517" width="0.0119%" height="15" fill="rgb(207,104,33)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="501" width="0.0119%" height="15" fill="rgb(219,21,39)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="485" width="0.0119%" height="15" fill="rgb(214,133,29)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="469" width="0.0119%" height="15" fill="rgb(226,93,6)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="479.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="453" width="0.0119%" height="15" fill="rgb(252,222,34)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="463.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="437" width="0.0119%" height="15" fill="rgb(252,92,48)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="447.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="421" width="0.0119%" height="15" fill="rgb(245,223,24)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="405" width="0.0119%" height="15" fill="rgb(205,176,3)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="415.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="389" width="0.0119%" height="15" fill="rgb(235,151,15)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="399.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="373" width="0.0119%" height="15" fill="rgb(237,209,11)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="383.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="357" width="0.0119%" height="15" fill="rgb(243,227,24)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="367.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="341" width="0.0119%" height="15" fill="rgb(239,193,16)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="351.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="325" width="0.0119%" height="15" fill="rgb(231,27,9)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="309" width="0.0119%" height="15" fill="rgb(219,169,10)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="319.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="293" width="0.0119%" height="15" fill="rgb(244,229,43)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="303.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="277" width="0.0119%" height="15" fill="rgb(254,38,20)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="287.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="261" width="0.0119%" height="15" fill="rgb(250,47,30)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="245" width="0.0119%" height="15" fill="rgb(224,124,36)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="255.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.3820%" y="229" width="0.0119%" height="15" fill="rgb(246,68,51)" fg:x="31210" fg:w="8"/><text x="46.6320%" y="239.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (75 samples, 0.11%)</title><rect x="46.2884%" y="725" width="0.1115%" height="15" fill="rgb(253,43,49)" fg:x="31147" fg:w="75"/><text x="46.5384%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (75 samples, 0.11%)</title><rect x="46.2884%" y="709" width="0.1115%" height="15" fill="rgb(219,54,36)" fg:x="31147" fg:w="75"/><text x="46.5384%" y="719.50"></text></g><g><title>HashWriter::write (75 samples, 0.11%)</title><rect x="46.2884%" y="693" width="0.1115%" height="15" fill="rgb(227,133,34)" fg:x="31147" fg:w="75"/><text x="46.5384%" y="703.50"></text></g><g><title>CompressScript (7 samples, 0.01%)</title><rect x="46.4088%" y="677" width="0.0104%" height="15" fill="rgb(247,227,15)" fg:x="31228" fg:w="7"/><text x="46.6588%" y="687.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (15 samples, 0.02%)</title><rect x="46.3999%" y="725" width="0.0223%" height="15" fill="rgb(229,96,14)" fg:x="31222" fg:w="15"/><text x="46.6499%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char&gt; (15 samples, 0.02%)</title><rect x="46.3999%" y="709" width="0.0223%" height="15" fill="rgb(220,79,17)" fg:x="31222" fg:w="15"/><text x="46.6499%" y="719.50"></text></g><g><title>HashWriter::write (15 samples, 0.02%)</title><rect x="46.3999%" y="693" width="0.0223%" height="15" fill="rgb(205,131,53)" fg:x="31222" fg:w="15"/><text x="46.6499%" y="703.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="293" width="0.0104%" height="15" fill="rgb(209,50,29)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="303.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="277" width="0.0104%" height="15" fill="rgb(245,86,46)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="287.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="261" width="0.0104%" height="15" fill="rgb(235,66,46)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="271.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="245" width="0.0104%" height="15" fill="rgb(232,148,31)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="229" width="0.0104%" height="15" fill="rgb(217,149,8)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="239.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="213" width="0.0104%" height="15" fill="rgb(209,183,11)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="223.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="197" width="0.0104%" height="15" fill="rgb(208,55,20)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="207.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="181" width="0.0104%" height="15" fill="rgb(218,39,14)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="191.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="165" width="0.0104%" height="15" fill="rgb(216,169,33)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="175.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (7 samples, 0.01%)</title><rect x="46.4340%" y="149" width="0.0104%" height="15" fill="rgb(233,80,24)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="159.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="133" width="0.0104%" height="15" fill="rgb(213,179,31)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="143.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="117" width="0.0104%" height="15" fill="rgb(209,19,5)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="127.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="101" width="0.0104%" height="15" fill="rgb(219,18,35)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="111.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (7 samples, 0.01%)</title><rect x="46.4340%" y="85" width="0.0104%" height="15" fill="rgb(209,169,16)" fg:x="31245" fg:w="7"/><text x="46.6840%" y="95.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (8 samples, 0.01%)</title><rect x="46.4340%" y="661" width="0.0119%" height="15" fill="rgb(245,90,51)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="671.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (8 samples, 0.01%)</title><rect x="46.4340%" y="645" width="0.0119%" height="15" fill="rgb(220,99,45)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="629" width="0.0119%" height="15" fill="rgb(249,89,25)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="639.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="613" width="0.0119%" height="15" fill="rgb(239,193,0)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="623.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="597" width="0.0119%" height="15" fill="rgb(231,126,1)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="607.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="581" width="0.0119%" height="15" fill="rgb(243,166,3)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="565" width="0.0119%" height="15" fill="rgb(223,22,34)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="575.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="549" width="0.0119%" height="15" fill="rgb(251,52,51)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="533" width="0.0119%" height="15" fill="rgb(221,165,28)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="517" width="0.0119%" height="15" fill="rgb(218,121,47)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="501" width="0.0119%" height="15" fill="rgb(209,120,9)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="485" width="0.0119%" height="15" fill="rgb(236,68,12)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="469" width="0.0119%" height="15" fill="rgb(225,194,26)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="453" width="0.0119%" height="15" fill="rgb(231,84,39)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="463.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="437" width="0.0119%" height="15" fill="rgb(210,11,45)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="447.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="421" width="0.0119%" height="15" fill="rgb(224,54,52)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="431.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="405" width="0.0119%" height="15" fill="rgb(238,102,14)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="389" width="0.0119%" height="15" fill="rgb(243,160,52)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="399.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="373" width="0.0119%" height="15" fill="rgb(216,114,19)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="383.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="357" width="0.0119%" height="15" fill="rgb(244,166,37)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="341" width="0.0119%" height="15" fill="rgb(246,29,44)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="351.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="325" width="0.0119%" height="15" fill="rgb(215,56,53)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="335.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (8 samples, 0.01%)</title><rect x="46.4340%" y="309" width="0.0119%" height="15" fill="rgb(217,60,2)" fg:x="31245" fg:w="8"/><text x="46.6840%" y="319.50"></text></g><g><title>CSHA256::Write (14 samples, 0.02%)</title><rect x="46.4459%" y="613" width="0.0208%" height="15" fill="rgb(207,26,24)" fg:x="31253" fg:w="14"/><text x="46.6959%" y="623.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (7 samples, 0.01%)</title><rect x="46.4742%" y="613" width="0.0104%" height="15" fill="rgb(252,210,15)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (7 samples, 0.01%)</title><rect x="46.4742%" y="597" width="0.0104%" height="15" fill="rgb(253,209,26)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="581" width="0.0104%" height="15" fill="rgb(238,170,14)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="565" width="0.0104%" height="15" fill="rgb(216,178,15)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="549" width="0.0104%" height="15" fill="rgb(250,197,2)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="533" width="0.0104%" height="15" fill="rgb(212,70,42)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="517" width="0.0104%" height="15" fill="rgb(227,213,9)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="501" width="0.0104%" height="15" fill="rgb(245,99,25)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="485" width="0.0104%" height="15" fill="rgb(250,82,29)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="469" width="0.0104%" height="15" fill="rgb(241,226,54)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="453" width="0.0104%" height="15" fill="rgb(221,99,41)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="437" width="0.0104%" height="15" fill="rgb(213,90,21)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="421" width="0.0104%" height="15" fill="rgb(205,208,24)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="405" width="0.0104%" height="15" fill="rgb(246,31,12)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="389" width="0.0104%" height="15" fill="rgb(213,154,6)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="373" width="0.0104%" height="15" fill="rgb(222,163,29)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="357" width="0.0104%" height="15" fill="rgb(227,201,8)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="341" width="0.0104%" height="15" fill="rgb(233,9,32)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="325" width="0.0104%" height="15" fill="rgb(217,54,24)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="309" width="0.0104%" height="15" fill="rgb(235,192,0)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="293" width="0.0104%" height="15" fill="rgb(235,45,9)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="277" width="0.0104%" height="15" fill="rgb(246,42,40)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.4742%" y="261" width="0.0104%" height="15" fill="rgb(248,111,24)" fg:x="31272" fg:w="7"/><text x="46.7242%" y="271.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (45 samples, 0.07%)</title><rect x="46.4221%" y="725" width="0.0669%" height="15" fill="rgb(249,65,22)" fg:x="31237" fg:w="45"/><text x="46.6721%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (45 samples, 0.07%)</title><rect x="46.4221%" y="709" width="0.0669%" height="15" fill="rgb(238,111,51)" fg:x="31237" fg:w="45"/><text x="46.6721%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (45 samples, 0.07%)</title><rect x="46.4221%" y="693" width="0.0669%" height="15" fill="rgb(250,118,22)" fg:x="31237" fg:w="45"/><text x="46.6721%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (45 samples, 0.07%)</title><rect x="46.4221%" y="677" width="0.0669%" height="15" fill="rgb(234,84,26)" fg:x="31237" fg:w="45"/><text x="46.6721%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (29 samples, 0.04%)</title><rect x="46.4459%" y="661" width="0.0431%" height="15" fill="rgb(243,172,12)" fg:x="31253" fg:w="29"/><text x="46.6959%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (29 samples, 0.04%)</title><rect x="46.4459%" y="645" width="0.0431%" height="15" fill="rgb(236,150,49)" fg:x="31253" fg:w="29"/><text x="46.6959%" y="655.50"></text></g><g><title>HashWriter::write (29 samples, 0.04%)</title><rect x="46.4459%" y="629" width="0.0431%" height="15" fill="rgb(225,197,26)" fg:x="31253" fg:w="29"/><text x="46.6959%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (326 samples, 0.48%)</title><rect x="46.0135%" y="869" width="0.4845%" height="15" fill="rgb(214,17,42)" fg:x="30962" fg:w="326"/><text x="46.2635%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (326 samples, 0.48%)</title><rect x="46.0135%" y="853" width="0.4845%" height="15" fill="rgb(224,165,40)" fg:x="30962" fg:w="326"/><text x="46.2635%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (326 samples, 0.48%)</title><rect x="46.0135%" y="837" width="0.4845%" height="15" fill="rgb(246,100,4)" fg:x="30962" fg:w="326"/><text x="46.2635%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (326 samples, 0.48%)</title><rect x="46.0135%" y="821" width="0.4845%" height="15" fill="rgb(222,103,0)" fg:x="30962" fg:w="326"/><text x="46.2635%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (324 samples, 0.48%)</title><rect x="46.0164%" y="805" width="0.4815%" height="15" fill="rgb(227,189,26)" fg:x="30964" fg:w="324"/><text x="46.2664%" y="815.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (324 samples, 0.48%)</title><rect x="46.0164%" y="789" width="0.4815%" height="15" fill="rgb(214,202,17)" fg:x="30964" fg:w="324"/><text x="46.2664%" y="799.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (174 samples, 0.26%)</title><rect x="46.2394%" y="773" width="0.2586%" height="15" fill="rgb(229,111,3)" fg:x="31114" fg:w="174"/><text x="46.4894%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (174 samples, 0.26%)</title><rect x="46.2394%" y="757" width="0.2586%" height="15" fill="rgb(229,172,15)" fg:x="31114" fg:w="174"/><text x="46.4894%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (174 samples, 0.26%)</title><rect x="46.2394%" y="741" width="0.2586%" height="15" fill="rgb(230,224,35)" fg:x="31114" fg:w="174"/><text x="46.4894%" y="751.50"></text></g><g><title>CSHA256::Write (8 samples, 0.01%)</title><rect x="46.4979%" y="821" width="0.0119%" height="15" fill="rgb(251,141,6)" fg:x="31288" fg:w="8"/><text x="46.7479%" y="831.50"></text></g><g><title>ShiftMessageA (8 samples, 0.01%)</title><rect x="46.5306%" y="789" width="0.0119%" height="15" fill="rgb(225,208,6)" fg:x="31310" fg:w="8"/><text x="46.7806%" y="799.50"></text></g><g><title>_mm_sha256msg1_epu32 (8 samples, 0.01%)</title><rect x="46.5306%" y="773" width="0.0119%" height="15" fill="rgb(246,181,16)" fg:x="31310" fg:w="8"/><text x="46.7806%" y="783.50"></text></g><g><title>ShiftMessageB (12 samples, 0.02%)</title><rect x="46.5306%" y="805" width="0.0178%" height="15" fill="rgb(227,129,36)" fg:x="31310" fg:w="12"/><text x="46.7806%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (20 samples, 0.03%)</title><rect x="46.5202%" y="821" width="0.0297%" height="15" fill="rgb(248,117,24)" fg:x="31303" fg:w="20"/><text x="46.7702%" y="831.50"></text></g><g><title>CSHA256::Write (32 samples, 0.05%)</title><rect x="46.5529%" y="773" width="0.0476%" height="15" fill="rgb(214,185,35)" fg:x="31325" fg:w="32"/><text x="46.8029%" y="783.50"></text></g><g><title>QuadRound (10 samples, 0.01%)</title><rect x="46.6228%" y="757" width="0.0149%" height="15" fill="rgb(236,150,34)" fg:x="31372" fg:w="10"/><text x="46.8728%" y="767.50"></text></g><g><title>ShiftMessageA (14 samples, 0.02%)</title><rect x="46.6376%" y="741" width="0.0208%" height="15" fill="rgb(243,228,27)" fg:x="31382" fg:w="14"/><text x="46.8876%" y="751.50"></text></g><g><title>_mm_sha256msg1_epu32 (14 samples, 0.02%)</title><rect x="46.6376%" y="725" width="0.0208%" height="15" fill="rgb(245,77,44)" fg:x="31382" fg:w="14"/><text x="46.8876%" y="735.50"></text></g><g><title>ShiftMessageB (27 samples, 0.04%)</title><rect x="46.6376%" y="757" width="0.0401%" height="15" fill="rgb(235,214,42)" fg:x="31382" fg:w="27"/><text x="46.8876%" y="767.50"></text></g><g><title>ShiftMessageC (13 samples, 0.02%)</title><rect x="46.6584%" y="741" width="0.0193%" height="15" fill="rgb(221,74,3)" fg:x="31396" fg:w="13"/><text x="46.9084%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (43 samples, 0.06%)</title><rect x="46.6213%" y="773" width="0.0639%" height="15" fill="rgb(206,121,29)" fg:x="31371" fg:w="43"/><text x="46.8713%" y="783.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (131 samples, 0.19%)</title><rect x="46.4979%" y="869" width="0.1947%" height="15" fill="rgb(249,131,53)" fg:x="31288" fg:w="131"/><text x="46.7479%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (131 samples, 0.19%)</title><rect x="46.4979%" y="853" width="0.1947%" height="15" fill="rgb(236,170,29)" fg:x="31288" fg:w="131"/><text x="46.7479%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (131 samples, 0.19%)</title><rect x="46.4979%" y="837" width="0.1947%" height="15" fill="rgb(247,96,15)" fg:x="31288" fg:w="131"/><text x="46.7479%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (96 samples, 0.14%)</title><rect x="46.5500%" y="821" width="0.1427%" height="15" fill="rgb(211,210,7)" fg:x="31323" fg:w="96"/><text x="46.8000%" y="831.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (94 samples, 0.14%)</title><rect x="46.5529%" y="805" width="0.1397%" height="15" fill="rgb(240,88,50)" fg:x="31325" fg:w="94"/><text x="46.8029%" y="815.50"></text></g><g><title>HashWriter::write (94 samples, 0.14%)</title><rect x="46.5529%" y="789" width="0.1397%" height="15" fill="rgb(209,229,26)" fg:x="31325" fg:w="94"/><text x="46.8029%" y="799.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="46.7387%" y="805" width="0.0104%" height="15" fill="rgb(210,68,23)" fg:x="31450" fg:w="7"/><text x="46.9887%" y="815.50"></text></g><g><title>CSHA256::Write (45 samples, 0.07%)</title><rect x="46.6926%" y="821" width="0.0669%" height="15" fill="rgb(229,180,13)" fg:x="31419" fg:w="45"/><text x="46.9426%" y="831.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (9 samples, 0.01%)</title><rect x="46.7625%" y="821" width="0.0134%" height="15" fill="rgb(236,53,44)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="831.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (9 samples, 0.01%)</title><rect x="46.7625%" y="805" width="0.0134%" height="15" fill="rgb(244,214,29)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="815.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="789" width="0.0134%" height="15" fill="rgb(220,75,29)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="799.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="773" width="0.0134%" height="15" fill="rgb(214,183,37)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="783.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="757" width="0.0134%" height="15" fill="rgb(239,117,29)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="767.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="741" width="0.0134%" height="15" fill="rgb(237,171,35)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="725" width="0.0134%" height="15" fill="rgb(229,178,53)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="735.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="709" width="0.0134%" height="15" fill="rgb(210,102,19)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="719.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="693" width="0.0134%" height="15" fill="rgb(235,127,22)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="703.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="677" width="0.0134%" height="15" fill="rgb(244,31,31)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="687.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="661" width="0.0134%" height="15" fill="rgb(231,43,21)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="645" width="0.0134%" height="15" fill="rgb(217,131,35)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="629" width="0.0134%" height="15" fill="rgb(221,149,4)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="613" width="0.0134%" height="15" fill="rgb(232,170,28)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="623.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="597" width="0.0134%" height="15" fill="rgb(238,56,10)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="607.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="581" width="0.0134%" height="15" fill="rgb(235,196,14)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="591.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="565" width="0.0134%" height="15" fill="rgb(216,45,48)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="575.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="549" width="0.0134%" height="15" fill="rgb(238,213,17)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="559.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="533" width="0.0134%" height="15" fill="rgb(212,13,2)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="517" width="0.0134%" height="15" fill="rgb(240,114,20)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="501" width="0.0134%" height="15" fill="rgb(228,41,40)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="511.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.7625%" y="485" width="0.0134%" height="15" fill="rgb(244,132,35)" fg:x="31466" fg:w="9"/><text x="47.0125%" y="495.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (7 samples, 0.01%)</title><rect x="46.7654%" y="469" width="0.0104%" height="15" fill="rgb(253,189,4)" fg:x="31468" fg:w="7"/><text x="47.0154%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.01%)</title><rect x="46.7758%" y="821" width="0.0119%" height="15" fill="rgb(224,37,19)" fg:x="31475" fg:w="8"/><text x="47.0258%" y="831.50"></text></g><g><title>void WriteCompactSize&lt;HashWriter&gt; (10 samples, 0.01%)</title><rect x="46.7877%" y="821" width="0.0149%" height="15" fill="rgb(235,223,18)" fg:x="31483" fg:w="10"/><text x="47.0377%" y="831.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (550 samples, 0.82%)</title><rect x="46.0135%" y="885" width="0.8174%" height="15" fill="rgb(235,163,25)" fg:x="30962" fg:w="550"/><text x="46.2635%" y="895.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (93 samples, 0.14%)</title><rect x="46.6926%" y="869" width="0.1382%" height="15" fill="rgb(217,145,28)" fg:x="31419" fg:w="93"/><text x="46.9426%" y="879.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (93 samples, 0.14%)</title><rect x="46.6926%" y="853" width="0.1382%" height="15" fill="rgb(223,223,32)" fg:x="31419" fg:w="93"/><text x="46.9426%" y="863.50"></text></g><g><title>HashWriter::write (93 samples, 0.14%)</title><rect x="46.6926%" y="837" width="0.1382%" height="15" fill="rgb(227,189,39)" fg:x="31419" fg:w="93"/><text x="46.9426%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (19 samples, 0.03%)</title><rect x="46.8026%" y="821" width="0.0282%" height="15" fill="rgb(248,10,22)" fg:x="31493" fg:w="19"/><text x="47.0526%" y="831.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (554 samples, 0.82%)</title><rect x="46.0105%" y="1221" width="0.8233%" height="15" fill="rgb(248,46,39)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1231.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1205" width="0.8233%" height="15" fill="rgb(248,113,48)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1189" width="0.8233%" height="15" fill="rgb(245,16,25)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1173" width="0.8233%" height="15" fill="rgb(249,152,16)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1157" width="0.8233%" height="15" fill="rgb(250,16,1)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1141" width="0.8233%" height="15" fill="rgb(249,138,3)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1151.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1125" width="0.8233%" height="15" fill="rgb(227,71,41)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1135.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1109" width="0.8233%" height="15" fill="rgb(209,184,23)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1119.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1093" width="0.8233%" height="15" fill="rgb(223,215,31)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1077" width="0.8233%" height="15" fill="rgb(210,146,28)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1061" width="0.8233%" height="15" fill="rgb(209,183,41)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1045" width="0.8233%" height="15" fill="rgb(209,224,45)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1029" width="0.8233%" height="15" fill="rgb(224,209,51)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="1013" width="0.8233%" height="15" fill="rgb(223,17,39)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="997" width="0.8233%" height="15" fill="rgb(234,204,37)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="981" width="0.8233%" height="15" fill="rgb(236,120,5)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="965" width="0.8233%" height="15" fill="rgb(248,97,27)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="975.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="949" width="0.8233%" height="15" fill="rgb(240,66,17)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="959.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="933" width="0.8233%" height="15" fill="rgb(210,79,3)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="917" width="0.8233%" height="15" fill="rgb(214,176,27)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (554 samples, 0.82%)</title><rect x="46.0105%" y="901" width="0.8233%" height="15" fill="rgb(235,185,3)" fg:x="30960" fg:w="554"/><text x="46.2605%" y="911.50"></text></g><g><title>__fopen_internal (12 samples, 0.02%)</title><rect x="46.8398%" y="1189" width="0.0178%" height="15" fill="rgb(227,24,12)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1199.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="46.8398%" y="1173" width="0.0178%" height="15" fill="rgb(252,169,48)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1183.50"></text></g><g><title>_IO_file_open (12 samples, 0.02%)</title><rect x="46.8398%" y="1157" width="0.0178%" height="15" fill="rgb(212,65,1)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1167.50"></text></g><g><title>__GI___libc_open (12 samples, 0.02%)</title><rect x="46.8398%" y="1141" width="0.0178%" height="15" fill="rgb(242,39,24)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1151.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="46.8398%" y="1125" width="0.0178%" height="15" fill="rgb(249,32,23)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1135.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="46.8398%" y="1109" width="0.0178%" height="15" fill="rgb(251,195,23)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1119.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="46.8398%" y="1093" width="0.0178%" height="15" fill="rgb(236,174,8)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1103.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="46.8398%" y="1077" width="0.0178%" height="15" fill="rgb(220,197,8)" fg:x="31518" fg:w="12"/><text x="47.0898%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="46.8457%" y="1061" width="0.0119%" height="15" fill="rgb(240,108,37)" fg:x="31522" fg:w="8"/><text x="47.0957%" y="1071.50"></text></g><g><title>create_directories (10 samples, 0.01%)</title><rect x="46.8576%" y="1189" width="0.0149%" height="15" fill="rgb(232,176,24)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1199.50"></text></g><g><title>std::filesystem::is_symlink (10 samples, 0.01%)</title><rect x="46.8576%" y="1173" width="0.0149%" height="15" fill="rgb(243,35,29)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1183.50"></text></g><g><title>std::filesystem::symlink_status (10 samples, 0.01%)</title><rect x="46.8576%" y="1157" width="0.0149%" height="15" fill="rgb(210,37,18)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1167.50"></text></g><g><title>std::filesystem::symlink_status (10 samples, 0.01%)</title><rect x="46.8576%" y="1141" width="0.0149%" height="15" fill="rgb(224,184,40)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1151.50"></text></g><g><title>__GI___fstatat64 (10 samples, 0.01%)</title><rect x="46.8576%" y="1125" width="0.0149%" height="15" fill="rgb(236,39,29)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1135.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8576%" y="1109" width="0.0149%" height="15" fill="rgb(232,48,39)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1119.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8576%" y="1093" width="0.0149%" height="15" fill="rgb(236,34,42)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1103.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8576%" y="1077" width="0.0149%" height="15" fill="rgb(243,106,37)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1087.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8576%" y="1061" width="0.0149%" height="15" fill="rgb(218,96,6)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1071.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8576%" y="1045" width="0.0149%" height="15" fill="rgb(235,130,12)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1055.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="46.8576%" y="1029" width="0.0149%" height="15" fill="rgb(231,95,0)" fg:x="31530" fg:w="10"/><text x="47.1076%" y="1039.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="46.8591%" y="1013" width="0.0134%" height="15" fill="rgb(228,12,23)" fg:x="31531" fg:w="9"/><text x="47.1091%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="46.8606%" y="997" width="0.0119%" height="15" fill="rgb(216,12,1)" fg:x="31532" fg:w="8"/><text x="47.1106%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="46.8620%" y="981" width="0.0104%" height="15" fill="rgb(219,59,3)" fg:x="31533" fg:w="7"/><text x="47.1120%" y="991.50"></text></g><g><title>node::BlockManager::OpenUndoFile (29 samples, 0.04%)</title><rect x="46.8353%" y="1221" width="0.0431%" height="15" fill="rgb(215,208,46)" fg:x="31515" fg:w="29"/><text x="47.0853%" y="1231.50"></text></g><g><title>FlatFileSeq::Open (29 samples, 0.04%)</title><rect x="46.8353%" y="1205" width="0.0431%" height="15" fill="rgb(254,224,29)" fg:x="31515" fg:w="29"/><text x="47.0853%" y="1215.50"></text></g><g><title>CompressAmount (13 samples, 0.02%)</title><rect x="46.8784%" y="1045" width="0.0193%" height="15" fill="rgb(232,14,29)" fg:x="31544" fg:w="13"/><text x="47.1284%" y="1055.50"></text></g><g><title>CompressScript (8 samples, 0.01%)</title><rect x="46.8977%" y="1045" width="0.0119%" height="15" fill="rgb(208,45,52)" fg:x="31557" fg:w="8"/><text x="47.1477%" y="1055.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (9 samples, 0.01%)</title><rect x="46.9408%" y="709" width="0.0134%" height="15" fill="rgb(234,191,28)" fg:x="31586" fg:w="9"/><text x="47.1908%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9408%" y="693" width="0.0134%" height="15" fill="rgb(244,67,43)" fg:x="31586" fg:w="9"/><text x="47.1908%" y="703.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.9408%" y="677" width="0.0134%" height="15" fill="rgb(236,189,24)" fg:x="31586" fg:w="9"/><text x="47.1908%" y="687.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (9 samples, 0.01%)</title><rect x="46.9408%" y="661" width="0.0134%" height="15" fill="rgb(239,214,33)" fg:x="31586" fg:w="9"/><text x="47.1908%" y="671.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (9 samples, 0.01%)</title><rect x="46.9408%" y="645" width="0.0134%" height="15" fill="rgb(226,176,41)" fg:x="31586" fg:w="9"/><text x="47.1908%" y="655.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (24 samples, 0.04%)</title><rect x="46.9334%" y="757" width="0.0357%" height="15" fill="rgb(248,47,8)" fg:x="31581" fg:w="24"/><text x="47.1834%" y="767.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (24 samples, 0.04%)</title><rect x="46.9334%" y="741" width="0.0357%" height="15" fill="rgb(218,81,44)" fg:x="31581" fg:w="24"/><text x="47.1834%" y="751.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (24 samples, 0.04%)</title><rect x="46.9334%" y="725" width="0.0357%" height="15" fill="rgb(213,98,6)" fg:x="31581" fg:w="24"/><text x="47.1834%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="46.9542%" y="709" width="0.0149%" height="15" fill="rgb(222,85,22)" fg:x="31595" fg:w="10"/><text x="47.2042%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="693" width="0.0134%" height="15" fill="rgb(239,46,39)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="677" width="0.0134%" height="15" fill="rgb(237,12,29)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="687.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="661" width="0.0134%" height="15" fill="rgb(214,77,8)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="671.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="645" width="0.0134%" height="15" fill="rgb(217,168,37)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="655.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="629" width="0.0134%" height="15" fill="rgb(221,217,23)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="613" width="0.0134%" height="15" fill="rgb(243,229,36)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="623.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="597" width="0.0134%" height="15" fill="rgb(251,163,40)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="581" width="0.0134%" height="15" fill="rgb(237,222,12)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="565" width="0.0134%" height="15" fill="rgb(248,132,6)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="575.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="46.9557%" y="549" width="0.0134%" height="15" fill="rgb(227,167,50)" fg:x="31596" fg:w="9"/><text x="47.2057%" y="559.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="46.9572%" y="533" width="0.0119%" height="15" fill="rgb(242,84,37)" fg:x="31597" fg:w="8"/><text x="47.2072%" y="543.50"></text></g><g><title>CompressAmount (10 samples, 0.01%)</title><rect x="46.9809%" y="693" width="0.0149%" height="15" fill="rgb(212,4,50)" fg:x="31613" fg:w="10"/><text x="47.2309%" y="703.50"></text></g><g><title>CompressScript (14 samples, 0.02%)</title><rect x="46.9958%" y="693" width="0.0208%" height="15" fill="rgb(230,228,32)" fg:x="31623" fg:w="14"/><text x="47.2458%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="47.0404%" y="501" width="0.0104%" height="15" fill="rgb(248,217,23)" fg:x="31653" fg:w="7"/><text x="47.2904%" y="511.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="47.0404%" y="485" width="0.0104%" height="15" fill="rgb(238,197,32)" fg:x="31653" fg:w="7"/><text x="47.2904%" y="495.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="47.0404%" y="469" width="0.0104%" height="15" fill="rgb(236,106,1)" fg:x="31653" fg:w="7"/><text x="47.2904%" y="479.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="47.0404%" y="453" width="0.0104%" height="15" fill="rgb(219,228,13)" fg:x="31653" fg:w="7"/><text x="47.2904%" y="463.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="47.0508%" y="501" width="0.0104%" height="15" fill="rgb(238,30,35)" fg:x="31660" fg:w="7"/><text x="47.3008%" y="511.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="47.0508%" y="485" width="0.0104%" height="15" fill="rgb(236,70,23)" fg:x="31660" fg:w="7"/><text x="47.3008%" y="495.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (7 samples, 0.01%)</title><rect x="47.0508%" y="469" width="0.0104%" height="15" fill="rgb(249,104,48)" fg:x="31660" fg:w="7"/><text x="47.3008%" y="479.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (7 samples, 0.01%)</title><rect x="47.0508%" y="453" width="0.0104%" height="15" fill="rgb(254,117,50)" fg:x="31660" fg:w="7"/><text x="47.3008%" y="463.50"></text></g><g><title>CompressScript (57 samples, 0.08%)</title><rect x="46.9780%" y="709" width="0.0847%" height="15" fill="rgb(223,152,4)" fg:x="31611" fg:w="57"/><text x="47.2280%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (28 samples, 0.04%)</title><rect x="47.0211%" y="693" width="0.0416%" height="15" fill="rgb(245,6,2)" fg:x="31640" fg:w="28"/><text x="47.2711%" y="703.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="677" width="0.0401%" height="15" fill="rgb(249,150,24)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="687.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="661" width="0.0401%" height="15" fill="rgb(228,185,42)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="671.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="645" width="0.0401%" height="15" fill="rgb(226,39,33)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="655.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="629" width="0.0401%" height="15" fill="rgb(221,166,19)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="639.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="613" width="0.0401%" height="15" fill="rgb(209,109,2)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="623.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="597" width="0.0401%" height="15" fill="rgb(252,216,26)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="607.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="581" width="0.0401%" height="15" fill="rgb(227,173,36)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="591.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="565" width="0.0401%" height="15" fill="rgb(209,90,7)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="549" width="0.0401%" height="15" fill="rgb(250,194,11)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="559.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (27 samples, 0.04%)</title><rect x="47.0225%" y="533" width="0.0401%" height="15" fill="rgb(220,72,50)" fg:x="31641" fg:w="27"/><text x="47.2725%" y="543.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (18 samples, 0.03%)</title><rect x="47.0359%" y="517" width="0.0268%" height="15" fill="rgb(222,106,48)" fg:x="31650" fg:w="18"/><text x="47.2859%" y="527.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (104 samples, 0.15%)</title><rect x="46.9319%" y="853" width="0.1546%" height="15" fill="rgb(216,220,45)" fg:x="31580" fg:w="104"/><text x="47.1819%" y="863.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (104 samples, 0.15%)</title><rect x="46.9319%" y="837" width="0.1546%" height="15" fill="rgb(234,112,18)" fg:x="31580" fg:w="104"/><text x="47.1819%" y="847.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (104 samples, 0.15%)</title><rect x="46.9319%" y="821" width="0.1546%" height="15" fill="rgb(206,179,9)" fg:x="31580" fg:w="104"/><text x="47.1819%" y="831.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (104 samples, 0.15%)</title><rect x="46.9319%" y="805" width="0.1546%" height="15" fill="rgb(215,115,40)" fg:x="31580" fg:w="104"/><text x="47.1819%" y="815.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (103 samples, 0.15%)</title><rect x="46.9334%" y="789" width="0.1531%" height="15" fill="rgb(222,69,34)" fg:x="31581" fg:w="103"/><text x="47.1834%" y="799.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (103 samples, 0.15%)</title><rect x="46.9334%" y="773" width="0.1531%" height="15" fill="rgb(209,161,10)" fg:x="31581" fg:w="103"/><text x="47.1834%" y="783.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (79 samples, 0.12%)</title><rect x="46.9690%" y="757" width="0.1174%" height="15" fill="rgb(217,6,38)" fg:x="31605" fg:w="79"/><text x="47.2190%" y="767.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (79 samples, 0.12%)</title><rect x="46.9690%" y="741" width="0.1174%" height="15" fill="rgb(229,229,48)" fg:x="31605" fg:w="79"/><text x="47.2190%" y="751.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (79 samples, 0.12%)</title><rect x="46.9690%" y="725" width="0.1174%" height="15" fill="rgb(225,21,28)" fg:x="31605" fg:w="79"/><text x="47.2190%" y="735.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="47.0864%" y="853" width="0.0193%" height="15" fill="rgb(206,33,13)" fg:x="31684" fg:w="13"/><text x="47.3364%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.02%)</title><rect x="47.0864%" y="837" width="0.0193%" height="15" fill="rgb(242,178,17)" fg:x="31684" fg:w="13"/><text x="47.3364%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (13 samples, 0.02%)</title><rect x="47.0864%" y="821" width="0.0193%" height="15" fill="rgb(220,162,5)" fg:x="31684" fg:w="13"/><text x="47.3364%" y="831.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (13 samples, 0.02%)</title><rect x="47.0864%" y="805" width="0.0193%" height="15" fill="rgb(210,33,43)" fg:x="31684" fg:w="13"/><text x="47.3364%" y="815.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (790 samples, 1.17%)</title><rect x="45.9347%" y="1237" width="1.1740%" height="15" fill="rgb(216,116,54)" fg:x="30909" fg:w="790"/><text x="46.1847%" y="1247.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1221" width="0.2303%" height="15" fill="rgb(249,92,24)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1231.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (155 samples, 0.23%)</title><rect x="46.8784%" y="1205" width="0.2303%" height="15" fill="rgb(231,189,14)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1215.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1189" width="0.2303%" height="15" fill="rgb(230,8,41)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1199.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1173" width="0.2303%" height="15" fill="rgb(249,7,27)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1183.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1157" width="0.2303%" height="15" fill="rgb(232,86,5)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1167.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1141" width="0.2303%" height="15" fill="rgb(224,175,18)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1125" width="0.2303%" height="15" fill="rgb(220,129,12)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1135.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1109" width="0.2303%" height="15" fill="rgb(210,19,36)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1093" width="0.2303%" height="15" fill="rgb(219,96,14)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1103.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1077" width="0.2303%" height="15" fill="rgb(249,106,1)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1087.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (155 samples, 0.23%)</title><rect x="46.8784%" y="1061" width="0.2303%" height="15" fill="rgb(249,155,20)" fg:x="31544" fg:w="155"/><text x="47.1284%" y="1071.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (132 samples, 0.20%)</title><rect x="46.9126%" y="1045" width="0.1962%" height="15" fill="rgb(244,168,9)" fg:x="31567" fg:w="132"/><text x="47.1626%" y="1055.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="1029" width="0.1947%" height="15" fill="rgb(216,23,50)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="1013" width="0.1947%" height="15" fill="rgb(224,219,20)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="1023.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="997" width="0.1947%" height="15" fill="rgb(222,156,15)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="1007.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="981" width="0.1947%" height="15" fill="rgb(231,97,17)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="991.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="965" width="0.1947%" height="15" fill="rgb(218,70,48)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="975.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="949" width="0.1947%" height="15" fill="rgb(212,196,52)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="959.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="933" width="0.1947%" height="15" fill="rgb(243,203,18)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="943.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="917" width="0.1947%" height="15" fill="rgb(252,125,41)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="927.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="901" width="0.1947%" height="15" fill="rgb(223,180,33)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="911.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (131 samples, 0.19%)</title><rect x="46.9141%" y="885" width="0.1947%" height="15" fill="rgb(254,159,46)" fg:x="31568" fg:w="131"/><text x="47.1641%" y="895.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (126 samples, 0.19%)</title><rect x="46.9215%" y="869" width="0.1873%" height="15" fill="rgb(254,38,10)" fg:x="31573" fg:w="126"/><text x="47.1715%" y="879.50"></text></g><g><title>ShiftMessageB (12 samples, 0.02%)</title><rect x="47.1206%" y="1221" width="0.0178%" height="15" fill="rgb(208,217,32)" fg:x="31707" fg:w="12"/><text x="47.3706%" y="1231.50"></text></g><g><title>ShiftMessageC (10 samples, 0.01%)</title><rect x="47.1236%" y="1205" width="0.0149%" height="15" fill="rgb(221,120,13)" fg:x="31709" fg:w="10"/><text x="47.3736%" y="1215.50"></text></g><g><title>sha256_x86_shani::Transform (25 samples, 0.04%)</title><rect x="47.1102%" y="1237" width="0.0372%" height="15" fill="rgb(246,54,52)" fg:x="31700" fg:w="25"/><text x="47.3602%" y="1247.50"></text></g><g><title>CompressAmount (15 samples, 0.02%)</title><rect x="47.1489%" y="1061" width="0.0223%" height="15" fill="rgb(242,34,25)" fg:x="31726" fg:w="15"/><text x="47.3989%" y="1071.50"></text></g><g><title>CompressScript (8 samples, 0.01%)</title><rect x="47.1712%" y="1061" width="0.0119%" height="15" fill="rgb(247,209,9)" fg:x="31741" fg:w="8"/><text x="47.4212%" y="1071.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (8 samples, 0.01%)</title><rect x="47.2187%" y="725" width="0.0119%" height="15" fill="rgb(228,71,26)" fg:x="31773" fg:w="8"/><text x="47.4687%" y="735.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="47.2187%" y="709" width="0.0119%" height="15" fill="rgb(222,145,49)" fg:x="31773" fg:w="8"/><text x="47.4687%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="47.2187%" y="693" width="0.0119%" height="15" fill="rgb(218,121,17)" fg:x="31773" fg:w="8"/><text x="47.4687%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (8 samples, 0.01%)</title><rect x="47.2187%" y="677" width="0.0119%" height="15" fill="rgb(244,50,7)" fg:x="31773" fg:w="8"/><text x="47.4687%" y="687.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (8 samples, 0.01%)</title><rect x="47.2187%" y="661" width="0.0119%" height="15" fill="rgb(246,229,37)" fg:x="31773" fg:w="8"/><text x="47.4687%" y="671.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (28 samples, 0.04%)</title><rect x="47.2053%" y="773" width="0.0416%" height="15" fill="rgb(225,18,5)" fg:x="31764" fg:w="28"/><text x="47.4553%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (28 samples, 0.04%)</title><rect x="47.2053%" y="757" width="0.0416%" height="15" fill="rgb(213,204,8)" fg:x="31764" fg:w="28"/><text x="47.4553%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (28 samples, 0.04%)</title><rect x="47.2053%" y="741" width="0.0416%" height="15" fill="rgb(238,103,6)" fg:x="31764" fg:w="28"/><text x="47.4553%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="47.2306%" y="725" width="0.0163%" height="15" fill="rgb(222,25,35)" fg:x="31781" fg:w="11"/><text x="47.4806%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="709" width="0.0149%" height="15" fill="rgb(213,203,35)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="693" width="0.0149%" height="15" fill="rgb(221,79,53)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="703.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="677" width="0.0149%" height="15" fill="rgb(243,200,35)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="687.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="661" width="0.0149%" height="15" fill="rgb(248,60,25)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="671.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="645" width="0.0149%" height="15" fill="rgb(227,53,46)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="629" width="0.0149%" height="15" fill="rgb(216,120,32)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="639.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="613" width="0.0149%" height="15" fill="rgb(220,134,1)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="597" width="0.0149%" height="15" fill="rgb(237,168,5)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="581" width="0.0149%" height="15" fill="rgb(231,100,33)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="591.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="47.2321%" y="565" width="0.0149%" height="15" fill="rgb(236,177,47)" fg:x="31782" fg:w="10"/><text x="47.4821%" y="575.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (9 samples, 0.01%)</title><rect x="47.2336%" y="549" width="0.0134%" height="15" fill="rgb(235,7,49)" fg:x="31783" fg:w="9"/><text x="47.4836%" y="559.50"></text></g><g><title>CompressScript (13 samples, 0.02%)</title><rect x="47.2678%" y="709" width="0.0193%" height="15" fill="rgb(232,119,22)" fg:x="31806" fg:w="13"/><text x="47.5178%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="47.3034%" y="517" width="0.0119%" height="15" fill="rgb(254,73,53)" fg:x="31830" fg:w="8"/><text x="47.5534%" y="527.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="47.3034%" y="501" width="0.0119%" height="15" fill="rgb(251,35,20)" fg:x="31830" fg:w="8"/><text x="47.5534%" y="511.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (8 samples, 0.01%)</title><rect x="47.3034%" y="485" width="0.0119%" height="15" fill="rgb(241,119,20)" fg:x="31830" fg:w="8"/><text x="47.5534%" y="495.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="47.3034%" y="469" width="0.0119%" height="15" fill="rgb(207,102,14)" fg:x="31830" fg:w="8"/><text x="47.5534%" y="479.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="47.3034%" y="453" width="0.0119%" height="15" fill="rgb(248,201,50)" fg:x="31830" fg:w="8"/><text x="47.5534%" y="463.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="47.3034%" y="437" width="0.0119%" height="15" fill="rgb(222,185,44)" fg:x="31830" fg:w="8"/><text x="47.5534%" y="447.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="47.3049%" y="421" width="0.0104%" height="15" fill="rgb(218,107,18)" fg:x="31831" fg:w="7"/><text x="47.5549%" y="431.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="47.3049%" y="405" width="0.0104%" height="15" fill="rgb(237,177,39)" fg:x="31831" fg:w="7"/><text x="47.5549%" y="415.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="47.3049%" y="389" width="0.0104%" height="15" fill="rgb(246,69,6)" fg:x="31831" fg:w="7"/><text x="47.5549%" y="399.50"></text></g><g><title>CompressScript (42 samples, 0.06%)</title><rect x="47.2574%" y="725" width="0.0624%" height="15" fill="rgb(234,208,37)" fg:x="31799" fg:w="42"/><text x="47.5074%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="709" width="0.0193%" height="15" fill="rgb(225,4,6)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="693" width="0.0193%" height="15" fill="rgb(233,45,0)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="677" width="0.0193%" height="15" fill="rgb(226,136,5)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="687.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="661" width="0.0193%" height="15" fill="rgb(211,91,47)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="671.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="645" width="0.0193%" height="15" fill="rgb(242,88,51)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="655.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="629" width="0.0193%" height="15" fill="rgb(230,91,28)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="613" width="0.0193%" height="15" fill="rgb(254,186,29)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="623.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="597" width="0.0193%" height="15" fill="rgb(238,6,4)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="581" width="0.0193%" height="15" fill="rgb(221,151,16)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="565" width="0.0193%" height="15" fill="rgb(251,143,52)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="575.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="47.3005%" y="549" width="0.0193%" height="15" fill="rgb(206,90,15)" fg:x="31828" fg:w="13"/><text x="47.5505%" y="559.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (11 samples, 0.02%)</title><rect x="47.3034%" y="533" width="0.0163%" height="15" fill="rgb(218,35,8)" fg:x="31830" fg:w="11"/><text x="47.5534%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="47.3317%" y="533" width="0.0104%" height="15" fill="rgb(239,215,6)" fg:x="31849" fg:w="7"/><text x="47.5817%" y="543.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="47.3317%" y="517" width="0.0104%" height="15" fill="rgb(245,116,39)" fg:x="31849" fg:w="7"/><text x="47.5817%" y="527.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (7 samples, 0.01%)</title><rect x="47.3317%" y="501" width="0.0104%" height="15" fill="rgb(242,65,28)" fg:x="31849" fg:w="7"/><text x="47.5817%" y="511.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="47.3317%" y="485" width="0.0104%" height="15" fill="rgb(252,132,53)" fg:x="31849" fg:w="7"/><text x="47.5817%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="47.3317%" y="469" width="0.0104%" height="15" fill="rgb(224,159,50)" fg:x="31849" fg:w="7"/><text x="47.5817%" y="479.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="47.3317%" y="453" width="0.0104%" height="15" fill="rgb(224,93,4)" fg:x="31849" fg:w="7"/><text x="47.5817%" y="463.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (98 samples, 0.15%)</title><rect x="47.2039%" y="869" width="0.1456%" height="15" fill="rgb(208,81,34)" fg:x="31763" fg:w="98"/><text x="47.4539%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (98 samples, 0.15%)</title><rect x="47.2039%" y="853" width="0.1456%" height="15" fill="rgb(233,92,54)" fg:x="31763" fg:w="98"/><text x="47.4539%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (98 samples, 0.15%)</title><rect x="47.2039%" y="837" width="0.1456%" height="15" fill="rgb(237,21,14)" fg:x="31763" fg:w="98"/><text x="47.4539%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (98 samples, 0.15%)</title><rect x="47.2039%" y="821" width="0.1456%" height="15" fill="rgb(249,128,51)" fg:x="31763" fg:w="98"/><text x="47.4539%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (97 samples, 0.14%)</title><rect x="47.2053%" y="805" width="0.1442%" height="15" fill="rgb(223,129,24)" fg:x="31764" fg:w="97"/><text x="47.4553%" y="815.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (97 samples, 0.14%)</title><rect x="47.2053%" y="789" width="0.1442%" height="15" fill="rgb(231,168,25)" fg:x="31764" fg:w="97"/><text x="47.4553%" y="799.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (69 samples, 0.10%)</title><rect x="47.2469%" y="773" width="0.1025%" height="15" fill="rgb(224,39,20)" fg:x="31792" fg:w="69"/><text x="47.4969%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (69 samples, 0.10%)</title><rect x="47.2469%" y="757" width="0.1025%" height="15" fill="rgb(225,152,53)" fg:x="31792" fg:w="69"/><text x="47.4969%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (69 samples, 0.10%)</title><rect x="47.2469%" y="741" width="0.1025%" height="15" fill="rgb(252,17,24)" fg:x="31792" fg:w="69"/><text x="47.4969%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="47.3257%" y="725" width="0.0238%" height="15" fill="rgb(250,114,30)" fg:x="31845" fg:w="16"/><text x="47.5757%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="709" width="0.0223%" height="15" fill="rgb(229,5,4)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="693" width="0.0223%" height="15" fill="rgb(225,176,49)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="703.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="677" width="0.0223%" height="15" fill="rgb(224,221,49)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="687.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="661" width="0.0223%" height="15" fill="rgb(253,169,27)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="671.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="645" width="0.0223%" height="15" fill="rgb(211,206,16)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="629" width="0.0223%" height="15" fill="rgb(244,87,35)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="639.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="613" width="0.0223%" height="15" fill="rgb(246,28,10)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="623.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="597" width="0.0223%" height="15" fill="rgb(229,12,44)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="581" width="0.0223%" height="15" fill="rgb(210,145,37)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="591.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="47.3272%" y="565" width="0.0223%" height="15" fill="rgb(227,112,52)" fg:x="31846" fg:w="15"/><text x="47.5772%" y="575.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (14 samples, 0.02%)</title><rect x="47.3287%" y="549" width="0.0208%" height="15" fill="rgb(238,155,34)" fg:x="31847" fg:w="14"/><text x="47.5787%" y="559.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="47.3495%" y="869" width="0.0193%" height="15" fill="rgb(239,226,36)" fg:x="31861" fg:w="13"/><text x="47.5995%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (13 samples, 0.02%)</title><rect x="47.3495%" y="853" width="0.0193%" height="15" fill="rgb(230,16,23)" fg:x="31861" fg:w="13"/><text x="47.5995%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (13 samples, 0.02%)</title><rect x="47.3495%" y="837" width="0.0193%" height="15" fill="rgb(236,171,36)" fg:x="31861" fg:w="13"/><text x="47.5995%" y="847.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (13 samples, 0.02%)</title><rect x="47.3495%" y="821" width="0.0193%" height="15" fill="rgb(221,22,14)" fg:x="31861" fg:w="13"/><text x="47.5995%" y="831.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1237" width="0.2259%" height="15" fill="rgb(242,43,11)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (152 samples, 0.23%)</title><rect x="47.1489%" y="1221" width="0.2259%" height="15" fill="rgb(232,69,23)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1205" width="0.2259%" height="15" fill="rgb(216,180,54)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1189" width="0.2259%" height="15" fill="rgb(216,5,24)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1173" width="0.2259%" height="15" fill="rgb(225,89,9)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1157" width="0.2259%" height="15" fill="rgb(243,75,33)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1141" width="0.2259%" height="15" fill="rgb(247,141,45)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1151.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1125" width="0.2259%" height="15" fill="rgb(232,177,36)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1109" width="0.2259%" height="15" fill="rgb(219,125,36)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1093" width="0.2259%" height="15" fill="rgb(227,94,9)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (152 samples, 0.23%)</title><rect x="47.1489%" y="1077" width="0.2259%" height="15" fill="rgb(240,34,52)" fg:x="31726" fg:w="152"/><text x="47.3989%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="1061" width="0.1902%" height="15" fill="rgb(216,45,12)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="1045" width="0.1902%" height="15" fill="rgb(246,21,19)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="1029" width="0.1902%" height="15" fill="rgb(213,98,42)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="1013" width="0.1902%" height="15" fill="rgb(250,136,47)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="997" width="0.1902%" height="15" fill="rgb(251,124,27)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="981" width="0.1902%" height="15" fill="rgb(229,180,14)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="965" width="0.1902%" height="15" fill="rgb(245,216,25)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="975.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="949" width="0.1902%" height="15" fill="rgb(251,43,5)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="959.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="933" width="0.1902%" height="15" fill="rgb(250,128,24)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="917" width="0.1902%" height="15" fill="rgb(217,117,27)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (128 samples, 0.19%)</title><rect x="47.1845%" y="901" width="0.1902%" height="15" fill="rgb(245,147,4)" fg:x="31750" fg:w="128"/><text x="47.4345%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (120 samples, 0.18%)</title><rect x="47.1964%" y="885" width="0.1783%" height="15" fill="rgb(242,201,35)" fg:x="31758" fg:w="120"/><text x="47.4464%" y="895.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (1,092 samples, 1.62%)</title><rect x="45.7757%" y="1253" width="1.6229%" height="15" fill="rgb(218,181,1)" fg:x="30802" fg:w="1092"/><text x="46.0257%" y="1263.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (14 samples, 0.02%)</title><rect x="47.3777%" y="1237" width="0.0208%" height="15" fill="rgb(222,6,29)" fg:x="31880" fg:w="14"/><text x="47.6277%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (16 samples, 0.02%)</title><rect x="47.3985%" y="1253" width="0.0238%" height="15" fill="rgb(208,186,3)" fg:x="31894" fg:w="16"/><text x="47.6485%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="47.4223%" y="1253" width="0.0119%" height="15" fill="rgb(216,36,26)" fg:x="31910" fg:w="8"/><text x="47.6723%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (10 samples, 0.01%)</title><rect x="47.4342%" y="1253" width="0.0149%" height="15" fill="rgb(248,201,23)" fg:x="31918" fg:w="10"/><text x="47.6842%" y="1263.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (124 samples, 0.18%)</title><rect x="47.4535%" y="1253" width="0.1843%" height="15" fill="rgb(251,170,31)" fg:x="31931" fg:w="124"/><text x="47.7035%" y="1263.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (118 samples, 0.18%)</title><rect x="47.4624%" y="1237" width="0.1754%" height="15" fill="rgb(207,110,25)" fg:x="31937" fg:w="118"/><text x="47.7124%" y="1247.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (118 samples, 0.18%)</title><rect x="47.4624%" y="1221" width="0.1754%" height="15" fill="rgb(250,54,15)" fg:x="31937" fg:w="118"/><text x="47.7124%" y="1231.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (118 samples, 0.18%)</title><rect x="47.4624%" y="1205" width="0.1754%" height="15" fill="rgb(227,68,33)" fg:x="31937" fg:w="118"/><text x="47.7124%" y="1215.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (118 samples, 0.18%)</title><rect x="47.4624%" y="1189" width="0.1754%" height="15" fill="rgb(238,34,41)" fg:x="31937" fg:w="118"/><text x="47.7124%" y="1199.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (117 samples, 0.17%)</title><rect x="47.4639%" y="1173" width="0.1739%" height="15" fill="rgb(220,11,15)" fg:x="31938" fg:w="117"/><text x="47.7139%" y="1183.50"></text></g><g><title>[unknown] (56 samples, 0.08%)</title><rect x="47.5546%" y="1157" width="0.0832%" height="15" fill="rgb(246,111,35)" fg:x="31999" fg:w="56"/><text x="47.8046%" y="1167.50"></text></g><g><title>[unknown] (55 samples, 0.08%)</title><rect x="47.5561%" y="1141" width="0.0817%" height="15" fill="rgb(209,88,53)" fg:x="32000" fg:w="55"/><text x="47.8061%" y="1151.50"></text></g><g><title>[unknown] (54 samples, 0.08%)</title><rect x="47.5576%" y="1125" width="0.0803%" height="15" fill="rgb(231,185,47)" fg:x="32001" fg:w="54"/><text x="47.8076%" y="1135.50"></text></g><g><title>[unknown] (53 samples, 0.08%)</title><rect x="47.5590%" y="1109" width="0.0788%" height="15" fill="rgb(233,154,1)" fg:x="32002" fg:w="53"/><text x="47.8090%" y="1119.50"></text></g><g><title>[unknown] (47 samples, 0.07%)</title><rect x="47.5680%" y="1093" width="0.0698%" height="15" fill="rgb(225,15,46)" fg:x="32008" fg:w="47"/><text x="47.8180%" y="1103.50"></text></g><g><title>[unknown] (42 samples, 0.06%)</title><rect x="47.5754%" y="1077" width="0.0624%" height="15" fill="rgb(211,135,41)" fg:x="32013" fg:w="42"/><text x="47.8254%" y="1087.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="47.5843%" y="1061" width="0.0535%" height="15" fill="rgb(208,54,0)" fg:x="32019" fg:w="36"/><text x="47.8343%" y="1071.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="47.5932%" y="1045" width="0.0446%" height="15" fill="rgb(244,136,14)" fg:x="32025" fg:w="30"/><text x="47.8432%" y="1055.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="47.6066%" y="1029" width="0.0312%" height="15" fill="rgb(241,56,14)" fg:x="32034" fg:w="21"/><text x="47.8566%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="47.6229%" y="1013" width="0.0149%" height="15" fill="rgb(205,80,24)" fg:x="32045" fg:w="10"/><text x="47.8729%" y="1023.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (7 samples, 0.01%)</title><rect x="47.6631%" y="1125" width="0.0104%" height="15" fill="rgb(220,57,4)" fg:x="32072" fg:w="7"/><text x="47.9131%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (7 samples, 0.01%)</title><rect x="47.6631%" y="1109" width="0.0104%" height="15" fill="rgb(226,193,50)" fg:x="32072" fg:w="7"/><text x="47.9131%" y="1119.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (32 samples, 0.05%)</title><rect x="47.6378%" y="1253" width="0.0476%" height="15" fill="rgb(231,168,22)" fg:x="32055" fg:w="32"/><text x="47.8878%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (32 samples, 0.05%)</title><rect x="47.6378%" y="1237" width="0.0476%" height="15" fill="rgb(254,215,14)" fg:x="32055" fg:w="32"/><text x="47.8878%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (32 samples, 0.05%)</title><rect x="47.6378%" y="1221" width="0.0476%" height="15" fill="rgb(211,115,16)" fg:x="32055" fg:w="32"/><text x="47.8878%" y="1231.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (32 samples, 0.05%)</title><rect x="47.6378%" y="1205" width="0.0476%" height="15" fill="rgb(236,210,16)" fg:x="32055" fg:w="32"/><text x="47.8878%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (18 samples, 0.03%)</title><rect x="47.6586%" y="1189" width="0.0268%" height="15" fill="rgb(221,94,12)" fg:x="32069" fg:w="18"/><text x="47.9086%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (18 samples, 0.03%)</title><rect x="47.6586%" y="1173" width="0.0268%" height="15" fill="rgb(235,218,49)" fg:x="32069" fg:w="18"/><text x="47.9086%" y="1183.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (18 samples, 0.03%)</title><rect x="47.6586%" y="1157" width="0.0268%" height="15" fill="rgb(217,114,14)" fg:x="32069" fg:w="18"/><text x="47.9086%" y="1167.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (18 samples, 0.03%)</title><rect x="47.6586%" y="1141" width="0.0268%" height="15" fill="rgb(216,145,22)" fg:x="32069" fg:w="18"/><text x="47.9086%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (8 samples, 0.01%)</title><rect x="47.6735%" y="1125" width="0.0119%" height="15" fill="rgb(217,112,39)" fg:x="32079" fg:w="8"/><text x="47.9235%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (8 samples, 0.01%)</title><rect x="47.6735%" y="1109" width="0.0119%" height="15" fill="rgb(225,85,32)" fg:x="32079" fg:w="8"/><text x="47.9235%" y="1119.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (8 samples, 0.01%)</title><rect x="47.6735%" y="1093" width="0.0119%" height="15" fill="rgb(245,209,47)" fg:x="32079" fg:w="8"/><text x="47.9235%" y="1103.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (7 samples, 0.01%)</title><rect x="47.6913%" y="1205" width="0.0104%" height="15" fill="rgb(218,220,15)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1215.50"></text></g><g><title>_IO_fwrite (7 samples, 0.01%)</title><rect x="47.6913%" y="1189" width="0.0104%" height="15" fill="rgb(222,202,31)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1199.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="47.6913%" y="1173" width="0.0104%" height="15" fill="rgb(243,203,4)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1183.50"></text></g><g><title>new_do_write (7 samples, 0.01%)</title><rect x="47.6913%" y="1157" width="0.0104%" height="15" fill="rgb(237,92,17)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1167.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="47.6913%" y="1141" width="0.0104%" height="15" fill="rgb(231,119,7)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1151.50"></text></g><g><title>__GI___libc_write (7 samples, 0.01%)</title><rect x="47.6913%" y="1125" width="0.0104%" height="15" fill="rgb(237,82,41)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.6913%" y="1109" width="0.0104%" height="15" fill="rgb(226,81,48)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.6913%" y="1093" width="0.0104%" height="15" fill="rgb(234,70,51)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.6913%" y="1077" width="0.0104%" height="15" fill="rgb(251,86,4)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.6913%" y="1061" width="0.0104%" height="15" fill="rgb(244,144,28)" fg:x="32091" fg:w="7"/><text x="47.9413%" y="1071.50"></text></g><g><title>BCLog::Logger::LogPrintStr (9 samples, 0.01%)</title><rect x="47.6898%" y="1237" width="0.0134%" height="15" fill="rgb(232,161,39)" fg:x="32090" fg:w="9"/><text x="47.9398%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (9 samples, 0.01%)</title><rect x="47.6898%" y="1221" width="0.0134%" height="15" fill="rgb(247,34,51)" fg:x="32090" fg:w="9"/><text x="47.9398%" y="1231.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (10 samples, 0.01%)</title><rect x="47.6898%" y="1253" width="0.0149%" height="15" fill="rgb(225,132,2)" fg:x="32090" fg:w="10"/><text x="47.9398%" y="1263.50"></text></g><g><title>void LogPrintFormatInternal&lt;unsigned int, double, double, double, double, double&gt; (10 samples, 0.01%)</title><rect x="47.7091%" y="1253" width="0.0149%" height="15" fill="rgb(209,159,44)" fg:x="32103" fg:w="10"/><text x="47.9591%" y="1263.50"></text></g><g><title>Chainstate::ConnectBlock (13,803 samples, 20.51%)</title><rect x="27.2125%" y="1269" width="20.5130%" height="15" fill="rgb(251,214,1)" fg:x="18311" fg:w="13803"/><text x="27.4625%" y="1279.50">Chainstate::ConnectBlock</text></g><g><title>SipHashUint256Extra (26 samples, 0.04%)</title><rect x="47.7374%" y="1269" width="0.0386%" height="15" fill="rgb(247,84,47)" fg:x="32122" fg:w="26"/><text x="47.9874%" y="1279.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="47.7611%" y="1253" width="0.0149%" height="15" fill="rgb(240,111,43)" fg:x="32138" fg:w="10"/><text x="48.0111%" y="1263.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="47.7611%" y="1237" width="0.0149%" height="15" fill="rgb(215,214,35)" fg:x="32138" fg:w="10"/><text x="48.0111%" y="1247.50"></text></g><g><title>ValidationSignals::BlockChecked (10 samples, 0.01%)</title><rect x="47.7760%" y="1269" width="0.0149%" height="15" fill="rgb(248,207,23)" fg:x="32148" fg:w="10"/><text x="48.0260%" y="1279.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [13], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="47.7805%" y="1253" width="0.0104%" height="15" fill="rgb(214,186,4)" fg:x="32151" fg:w="7"/><text x="48.0305%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint const*, std::pair&lt;COutPoint const* const, CTransaction const*&gt;, std::_Select1st&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt;, DereferencingComparator&lt;COutPoint const*&gt;, std::allocator&lt;std::pair&lt;COutPoint const* const, CTransaction const*&gt; &gt; &gt;::find (8 samples, 0.01%)</title><rect x="47.8013%" y="1269" width="0.0119%" height="15" fill="rgb(220,133,22)" fg:x="32165" fg:w="8"/><text x="48.0513%" y="1279.50"></text></g><g><title>BCLog::Logger::LogPrintStr (9 samples, 0.01%)</title><rect x="47.8251%" y="1253" width="0.0134%" height="15" fill="rgb(239,134,19)" fg:x="32181" fg:w="9"/><text x="48.0751%" y="1263.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (9 samples, 0.01%)</title><rect x="47.8251%" y="1237" width="0.0134%" height="15" fill="rgb(250,140,9)" fg:x="32181" fg:w="9"/><text x="48.0751%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (7 samples, 0.01%)</title><rect x="47.8280%" y="1221" width="0.0104%" height="15" fill="rgb(225,59,14)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1231.50"></text></g><g><title>_IO_fwrite (7 samples, 0.01%)</title><rect x="47.8280%" y="1205" width="0.0104%" height="15" fill="rgb(214,152,51)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1215.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="47.8280%" y="1189" width="0.0104%" height="15" fill="rgb(251,227,43)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1199.50"></text></g><g><title>new_do_write (7 samples, 0.01%)</title><rect x="47.8280%" y="1173" width="0.0104%" height="15" fill="rgb(241,96,17)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1183.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="47.8280%" y="1157" width="0.0104%" height="15" fill="rgb(234,198,43)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1167.50"></text></g><g><title>__GI___libc_write (7 samples, 0.01%)</title><rect x="47.8280%" y="1141" width="0.0104%" height="15" fill="rgb(220,108,29)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.8280%" y="1125" width="0.0104%" height="15" fill="rgb(226,163,33)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.8280%" y="1109" width="0.0104%" height="15" fill="rgb(205,194,45)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.8280%" y="1093" width="0.0104%" height="15" fill="rgb(206,143,44)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="47.8280%" y="1077" width="0.0104%" height="15" fill="rgb(236,136,36)" fg:x="32183" fg:w="7"/><text x="48.0780%" y="1087.50"></text></g><g><title>tinyformat::detail::FormatArg::format (7 samples, 0.01%)</title><rect x="47.8399%" y="1189" width="0.0104%" height="15" fill="rgb(249,172,42)" fg:x="32191" fg:w="7"/><text x="48.0899%" y="1199.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (7 samples, 0.01%)</title><rect x="47.8399%" y="1173" width="0.0104%" height="15" fill="rgb(216,139,23)" fg:x="32191" fg:w="7"/><text x="48.0899%" y="1183.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (18 samples, 0.03%)</title><rect x="47.8251%" y="1269" width="0.0268%" height="15" fill="rgb(207,166,20)" fg:x="32181" fg:w="18"/><text x="48.0751%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;double, double, double&gt; (8 samples, 0.01%)</title><rect x="47.8399%" y="1253" width="0.0119%" height="15" fill="rgb(210,209,22)" fg:x="32191" fg:w="8"/><text x="48.0899%" y="1263.50"></text></g><g><title>void tinyformat::format&lt;double, double, double&gt; (8 samples, 0.01%)</title><rect x="47.8399%" y="1237" width="0.0119%" height="15" fill="rgb(232,118,20)" fg:x="32191" fg:w="8"/><text x="48.0899%" y="1247.50"></text></g><g><title>tinyformat::vformat (8 samples, 0.01%)</title><rect x="47.8399%" y="1221" width="0.0119%" height="15" fill="rgb(238,113,42)" fg:x="32191" fg:w="8"/><text x="48.0899%" y="1231.50"></text></g><g><title>tinyformat::detail::formatImpl (8 samples, 0.01%)</title><rect x="47.8399%" y="1205" width="0.0119%" height="15" fill="rgb(231,42,5)" fg:x="32191" fg:w="8"/><text x="48.0899%" y="1215.50"></text></g><g><title>Chainstate::ConnectTip (22,167 samples, 32.94%)</title><rect x="14.9118%" y="1285" width="32.9430%" height="15" fill="rgb(243,166,24)" fg:x="10034" fg:w="22167"/><text x="15.1618%" y="1295.50">Chainstate::ConnectTip</text></g><g><title>Chainstate::ActivateBestChainStep (22,169 samples, 32.95%)</title><rect x="14.9118%" y="1301" width="32.9459%" height="15" fill="rgb(237,226,12)" fg:x="10034" fg:w="22169"/><text x="15.1618%" y="1311.50">Chainstate::ActivateBestChainStep</text></g><g><title>ValidationSignals::ActiveTipChange (8 samples, 0.01%)</title><rect x="47.8592%" y="1301" width="0.0119%" height="15" fill="rgb(229,133,24)" fg:x="32204" fg:w="8"/><text x="48.1092%" y="1311.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [16], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; (8 samples, 0.01%)</title><rect x="47.8592%" y="1285" width="0.0119%" height="15" fill="rgb(238,33,43)" fg:x="32204" fg:w="8"/><text x="48.1092%" y="1295.50"></text></g><g><title>Chainstate::ActivateBestChain (22,186 samples, 32.97%)</title><rect x="14.9103%" y="1317" width="32.9712%" height="15" fill="rgb(227,59,38)" fg:x="10033" fg:w="22186"/><text x="15.1603%" y="1327.50">Chainstate::ActivateBestChain</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (25 samples, 0.04%)</title><rect x="48.0123%" y="885" width="0.0372%" height="15" fill="rgb(230,97,0)" fg:x="32307" fg:w="25"/><text x="48.2623%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (25 samples, 0.04%)</title><rect x="48.0123%" y="869" width="0.0372%" height="15" fill="rgb(250,173,50)" fg:x="32307" fg:w="25"/><text x="48.2623%" y="879.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.04%)</title><rect x="48.0123%" y="853" width="0.0372%" height="15" fill="rgb(240,15,50)" fg:x="32307" fg:w="25"/><text x="48.2623%" y="863.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.04%)</title><rect x="48.0123%" y="837" width="0.0372%" height="15" fill="rgb(221,93,22)" fg:x="32307" fg:w="25"/><text x="48.2623%" y="847.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (25 samples, 0.04%)</title><rect x="48.0123%" y="821" width="0.0372%" height="15" fill="rgb(245,180,53)" fg:x="32307" fg:w="25"/><text x="48.2623%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (25 samples, 0.04%)</title><rect x="48.0123%" y="805" width="0.0372%" height="15" fill="rgb(231,88,51)" fg:x="32307" fg:w="25"/><text x="48.2623%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (25 samples, 0.04%)</title><rect x="48.0123%" y="789" width="0.0372%" height="15" fill="rgb(240,58,21)" fg:x="32307" fg:w="25"/><text x="48.2623%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (24 samples, 0.04%)</title><rect x="48.0138%" y="773" width="0.0357%" height="15" fill="rgb(237,21,10)" fg:x="32308" fg:w="24"/><text x="48.2638%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.04%)</title><rect x="48.0138%" y="757" width="0.0357%" height="15" fill="rgb(218,43,11)" fg:x="32308" fg:w="24"/><text x="48.2638%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.04%)</title><rect x="48.0138%" y="741" width="0.0357%" height="15" fill="rgb(218,221,29)" fg:x="32308" fg:w="24"/><text x="48.2638%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (24 samples, 0.04%)</title><rect x="48.0138%" y="725" width="0.0357%" height="15" fill="rgb(214,118,42)" fg:x="32308" fg:w="24"/><text x="48.2638%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (24 samples, 0.04%)</title><rect x="48.0138%" y="709" width="0.0357%" height="15" fill="rgb(251,200,26)" fg:x="32308" fg:w="24"/><text x="48.2638%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (24 samples, 0.04%)</title><rect x="48.0138%" y="693" width="0.0357%" height="15" fill="rgb(237,101,39)" fg:x="32308" fg:w="24"/><text x="48.2638%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (16 samples, 0.02%)</title><rect x="48.0257%" y="677" width="0.0238%" height="15" fill="rgb(251,117,11)" fg:x="32316" fg:w="16"/><text x="48.2757%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (15 samples, 0.02%)</title><rect x="48.0569%" y="869" width="0.0223%" height="15" fill="rgb(216,223,23)" fg:x="32337" fg:w="15"/><text x="48.3069%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (15 samples, 0.02%)</title><rect x="48.0569%" y="853" width="0.0223%" height="15" fill="rgb(251,54,12)" fg:x="32337" fg:w="15"/><text x="48.3069%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (15 samples, 0.02%)</title><rect x="48.0569%" y="837" width="0.0223%" height="15" fill="rgb(254,176,54)" fg:x="32337" fg:w="15"/><text x="48.3069%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="48.0569%" y="821" width="0.0223%" height="15" fill="rgb(210,32,8)" fg:x="32337" fg:w="15"/><text x="48.3069%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="48.0569%" y="805" width="0.0223%" height="15" fill="rgb(235,52,38)" fg:x="32337" fg:w="15"/><text x="48.3069%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (7 samples, 0.01%)</title><rect x="48.0688%" y="789" width="0.0104%" height="15" fill="rgb(231,4,44)" fg:x="32345" fg:w="7"/><text x="48.3188%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (7 samples, 0.01%)</title><rect x="48.0688%" y="773" width="0.0104%" height="15" fill="rgb(249,2,32)" fg:x="32345" fg:w="7"/><text x="48.3188%" y="783.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="48.0688%" y="757" width="0.0104%" height="15" fill="rgb(224,65,26)" fg:x="32345" fg:w="7"/><text x="48.3188%" y="767.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="48.0688%" y="741" width="0.0104%" height="15" fill="rgb(250,73,40)" fg:x="32345" fg:w="7"/><text x="48.3188%" y="751.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="48.0688%" y="725" width="0.0104%" height="15" fill="rgb(253,177,16)" fg:x="32345" fg:w="7"/><text x="48.3188%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (7 samples, 0.01%)</title><rect x="48.0688%" y="709" width="0.0104%" height="15" fill="rgb(217,32,34)" fg:x="32345" fg:w="7"/><text x="48.3188%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (7 samples, 0.01%)</title><rect x="48.0688%" y="693" width="0.0104%" height="15" fill="rgb(212,7,10)" fg:x="32345" fg:w="7"/><text x="48.3188%" y="703.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (23 samples, 0.03%)</title><rect x="48.0495%" y="885" width="0.0342%" height="15" fill="rgb(245,89,8)" fg:x="32332" fg:w="23"/><text x="48.2995%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (99 samples, 0.15%)</title><rect x="47.9781%" y="965" width="0.1471%" height="15" fill="rgb(237,16,53)" fg:x="32284" fg:w="99"/><text x="48.2281%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (99 samples, 0.15%)</title><rect x="47.9781%" y="949" width="0.1471%" height="15" fill="rgb(250,204,30)" fg:x="32284" fg:w="99"/><text x="48.2281%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (99 samples, 0.15%)</title><rect x="47.9781%" y="933" width="0.1471%" height="15" fill="rgb(208,77,27)" fg:x="32284" fg:w="99"/><text x="48.2281%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (99 samples, 0.15%)</title><rect x="47.9781%" y="917" width="0.1471%" height="15" fill="rgb(250,204,28)" fg:x="32284" fg:w="99"/><text x="48.2281%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (97 samples, 0.14%)</title><rect x="47.9811%" y="901" width="0.1442%" height="15" fill="rgb(244,63,21)" fg:x="32286" fg:w="97"/><text x="48.2311%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.04%)</title><rect x="48.0836%" y="885" width="0.0416%" height="15" fill="rgb(236,85,44)" fg:x="32355" fg:w="28"/><text x="48.3336%" y="895.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="48.1059%" y="869" width="0.0193%" height="15" fill="rgb(215,98,4)" fg:x="32370" fg:w="13"/><text x="48.3559%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (13 samples, 0.02%)</title><rect x="48.1059%" y="853" width="0.0193%" height="15" fill="rgb(235,38,11)" fg:x="32370" fg:w="13"/><text x="48.3559%" y="863.50"></text></g><g><title>SizeComputer::write (13 samples, 0.02%)</title><rect x="48.1059%" y="837" width="0.0193%" height="15" fill="rgb(254,186,25)" fg:x="32370" fg:w="13"/><text x="48.3559%" y="847.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (15 samples, 0.02%)</title><rect x="48.1683%" y="885" width="0.0223%" height="15" fill="rgb(225,55,31)" fg:x="32412" fg:w="15"/><text x="48.4183%" y="895.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (11 samples, 0.02%)</title><rect x="48.2055%" y="661" width="0.0163%" height="15" fill="rgb(211,15,21)" fg:x="32437" fg:w="11"/><text x="48.4555%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.04%)</title><rect x="48.1906%" y="885" width="0.0357%" height="15" fill="rgb(215,187,41)" fg:x="32427" fg:w="24"/><text x="48.4406%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.04%)</title><rect x="48.1906%" y="869" width="0.0357%" height="15" fill="rgb(248,69,32)" fg:x="32427" fg:w="24"/><text x="48.4406%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.04%)</title><rect x="48.1906%" y="853" width="0.0357%" height="15" fill="rgb(252,102,52)" fg:x="32427" fg:w="24"/><text x="48.4406%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.04%)</title><rect x="48.1906%" y="837" width="0.0357%" height="15" fill="rgb(253,140,32)" fg:x="32427" fg:w="24"/><text x="48.4406%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (24 samples, 0.04%)</title><rect x="48.1906%" y="821" width="0.0357%" height="15" fill="rgb(216,56,42)" fg:x="32427" fg:w="24"/><text x="48.4406%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.04%)</title><rect x="48.1906%" y="805" width="0.0357%" height="15" fill="rgb(216,184,14)" fg:x="32427" fg:w="24"/><text x="48.4406%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.04%)</title><rect x="48.1906%" y="789" width="0.0357%" height="15" fill="rgb(237,187,27)" fg:x="32427" fg:w="24"/><text x="48.4406%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (19 samples, 0.03%)</title><rect x="48.1981%" y="773" width="0.0282%" height="15" fill="rgb(219,65,3)" fg:x="32432" fg:w="19"/><text x="48.4481%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="48.1981%" y="757" width="0.0282%" height="15" fill="rgb(245,83,25)" fg:x="32432" fg:w="19"/><text x="48.4481%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="48.1981%" y="741" width="0.0282%" height="15" fill="rgb(214,205,45)" fg:x="32432" fg:w="19"/><text x="48.4481%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (19 samples, 0.03%)</title><rect x="48.1981%" y="725" width="0.0282%" height="15" fill="rgb(241,20,18)" fg:x="32432" fg:w="19"/><text x="48.4481%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (19 samples, 0.03%)</title><rect x="48.1981%" y="709" width="0.0282%" height="15" fill="rgb(232,163,23)" fg:x="32432" fg:w="19"/><text x="48.4481%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (19 samples, 0.03%)</title><rect x="48.1981%" y="693" width="0.0282%" height="15" fill="rgb(214,5,46)" fg:x="32432" fg:w="19"/><text x="48.4481%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (19 samples, 0.03%)</title><rect x="48.1981%" y="677" width="0.0282%" height="15" fill="rgb(229,78,17)" fg:x="32432" fg:w="19"/><text x="48.4481%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (9 samples, 0.01%)</title><rect x="48.2323%" y="869" width="0.0134%" height="15" fill="rgb(248,89,10)" fg:x="32455" fg:w="9"/><text x="48.4823%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (9 samples, 0.01%)</title><rect x="48.2323%" y="853" width="0.0134%" height="15" fill="rgb(248,54,15)" fg:x="32455" fg:w="9"/><text x="48.4823%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="48.2323%" y="837" width="0.0134%" height="15" fill="rgb(223,116,6)" fg:x="32455" fg:w="9"/><text x="48.4823%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="48.2323%" y="821" width="0.0134%" height="15" fill="rgb(205,125,38)" fg:x="32455" fg:w="9"/><text x="48.4823%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="48.2323%" y="805" width="0.0134%" height="15" fill="rgb(251,78,38)" fg:x="32455" fg:w="9"/><text x="48.4823%" y="815.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.02%)</title><rect x="48.2263%" y="885" width="0.0208%" height="15" fill="rgb(253,78,28)" fg:x="32451" fg:w="14"/><text x="48.4763%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (88 samples, 0.13%)</title><rect x="48.1253%" y="965" width="0.1308%" height="15" fill="rgb(209,120,3)" fg:x="32383" fg:w="88"/><text x="48.3753%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (88 samples, 0.13%)</title><rect x="48.1253%" y="949" width="0.1308%" height="15" fill="rgb(238,229,9)" fg:x="32383" fg:w="88"/><text x="48.3753%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (88 samples, 0.13%)</title><rect x="48.1253%" y="933" width="0.1308%" height="15" fill="rgb(253,159,18)" fg:x="32383" fg:w="88"/><text x="48.3753%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (88 samples, 0.13%)</title><rect x="48.1253%" y="917" width="0.1308%" height="15" fill="rgb(244,42,34)" fg:x="32383" fg:w="88"/><text x="48.3753%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (83 samples, 0.12%)</title><rect x="48.1327%" y="901" width="0.1233%" height="15" fill="rgb(224,8,7)" fg:x="32388" fg:w="83"/><text x="48.3827%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (7 samples, 0.01%)</title><rect x="48.2902%" y="853" width="0.0104%" height="15" fill="rgb(210,201,45)" fg:x="32494" fg:w="7"/><text x="48.5402%" y="863.50"></text></g><g><title>SizeComputer::write (7 samples, 0.01%)</title><rect x="48.2902%" y="837" width="0.0104%" height="15" fill="rgb(252,185,21)" fg:x="32494" fg:w="7"/><text x="48.5402%" y="847.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (21 samples, 0.03%)</title><rect x="48.3080%" y="853" width="0.0312%" height="15" fill="rgb(223,131,1)" fg:x="32506" fg:w="21"/><text x="48.5580%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (11 samples, 0.02%)</title><rect x="48.3229%" y="837" width="0.0163%" height="15" fill="rgb(245,141,16)" fg:x="32516" fg:w="11"/><text x="48.5729%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="48.3229%" y="821" width="0.0163%" height="15" fill="rgb(229,55,45)" fg:x="32516" fg:w="11"/><text x="48.5729%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="48.3229%" y="805" width="0.0163%" height="15" fill="rgb(208,92,15)" fg:x="32516" fg:w="11"/><text x="48.5729%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="48.3229%" y="789" width="0.0163%" height="15" fill="rgb(234,185,47)" fg:x="32516" fg:w="11"/><text x="48.5729%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="48.3229%" y="773" width="0.0163%" height="15" fill="rgb(253,104,50)" fg:x="32516" fg:w="11"/><text x="48.5729%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (49 samples, 0.07%)</title><rect x="48.2798%" y="885" width="0.0728%" height="15" fill="rgb(205,70,7)" fg:x="32487" fg:w="49"/><text x="48.5298%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (48 samples, 0.07%)</title><rect x="48.2813%" y="869" width="0.0713%" height="15" fill="rgb(240,178,43)" fg:x="32488" fg:w="48"/><text x="48.5313%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="48.3393%" y="853" width="0.0134%" height="15" fill="rgb(214,112,2)" fg:x="32527" fg:w="9"/><text x="48.5893%" y="863.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (12 samples, 0.02%)</title><rect x="48.3526%" y="885" width="0.0178%" height="15" fill="rgb(206,46,17)" fg:x="32536" fg:w="12"/><text x="48.6026%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (9 samples, 0.01%)</title><rect x="48.3571%" y="869" width="0.0134%" height="15" fill="rgb(225,220,16)" fg:x="32539" fg:w="9"/><text x="48.6071%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="48.3571%" y="853" width="0.0134%" height="15" fill="rgb(238,65,40)" fg:x="32539" fg:w="9"/><text x="48.6071%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="48.3571%" y="837" width="0.0134%" height="15" fill="rgb(230,151,21)" fg:x="32539" fg:w="9"/><text x="48.6071%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="48.3571%" y="821" width="0.0134%" height="15" fill="rgb(218,58,49)" fg:x="32539" fg:w="9"/><text x="48.6071%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="48.3571%" y="805" width="0.0134%" height="15" fill="rgb(219,179,14)" fg:x="32539" fg:w="9"/><text x="48.6071%" y="815.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (78 samples, 0.12%)</title><rect x="48.2560%" y="965" width="0.1159%" height="15" fill="rgb(223,72,1)" fg:x="32471" fg:w="78"/><text x="48.5060%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (78 samples, 0.12%)</title><rect x="48.2560%" y="949" width="0.1159%" height="15" fill="rgb(238,126,10)" fg:x="32471" fg:w="78"/><text x="48.5060%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (78 samples, 0.12%)</title><rect x="48.2560%" y="933" width="0.1159%" height="15" fill="rgb(224,206,38)" fg:x="32471" fg:w="78"/><text x="48.5060%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (78 samples, 0.12%)</title><rect x="48.2560%" y="917" width="0.1159%" height="15" fill="rgb(212,201,54)" fg:x="32471" fg:w="78"/><text x="48.5060%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (77 samples, 0.11%)</title><rect x="48.2575%" y="901" width="0.1144%" height="15" fill="rgb(218,154,48)" fg:x="32472" fg:w="77"/><text x="48.5075%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (331 samples, 0.49%)</title><rect x="47.9038%" y="981" width="0.4919%" height="15" fill="rgb(232,93,24)" fg:x="32234" fg:w="331"/><text x="48.1538%" y="991.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (15 samples, 0.02%)</title><rect x="48.3734%" y="965" width="0.0223%" height="15" fill="rgb(245,30,21)" fg:x="32550" fg:w="15"/><text x="48.6234%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="48.3734%" y="949" width="0.0223%" height="15" fill="rgb(242,148,29)" fg:x="32550" fg:w="15"/><text x="48.6234%" y="959.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="48.3734%" y="933" width="0.0223%" height="15" fill="rgb(244,153,54)" fg:x="32550" fg:w="15"/><text x="48.6234%" y="943.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (15 samples, 0.02%)</title><rect x="48.3734%" y="917" width="0.0223%" height="15" fill="rgb(252,87,22)" fg:x="32550" fg:w="15"/><text x="48.6234%" y="927.50"></text></g><g><title>SizeComputer::write (10 samples, 0.01%)</title><rect x="48.3809%" y="901" width="0.0149%" height="15" fill="rgb(210,51,29)" fg:x="32555" fg:w="10"/><text x="48.6309%" y="911.50"></text></g><g><title>GetBlockWeight (428 samples, 0.64%)</title><rect x="47.8949%" y="1285" width="0.6361%" height="15" fill="rgb(242,136,47)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1295.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1269" width="0.6361%" height="15" fill="rgb(238,68,4)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (428 samples, 0.64%)</title><rect x="47.8949%" y="1253" width="0.6361%" height="15" fill="rgb(242,161,30)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1237" width="0.6361%" height="15" fill="rgb(218,58,44)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1221" width="0.6361%" height="15" fill="rgb(252,125,32)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1205" width="0.6361%" height="15" fill="rgb(219,178,0)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1189" width="0.6361%" height="15" fill="rgb(213,152,7)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1173" width="0.6361%" height="15" fill="rgb(249,109,34)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1157" width="0.6361%" height="15" fill="rgb(232,96,21)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1141" width="0.6361%" height="15" fill="rgb(228,27,39)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1151.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1125" width="0.6361%" height="15" fill="rgb(211,182,52)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1109" width="0.6361%" height="15" fill="rgb(234,178,38)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1093" width="0.6361%" height="15" fill="rgb(221,111,3)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1077" width="0.6361%" height="15" fill="rgb(228,175,21)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1061" width="0.6361%" height="15" fill="rgb(228,174,43)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1045" width="0.6361%" height="15" fill="rgb(211,191,0)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1029" width="0.6361%" height="15" fill="rgb(253,117,3)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="1013" width="0.6361%" height="15" fill="rgb(241,127,19)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (428 samples, 0.64%)</title><rect x="47.8949%" y="997" width="0.6361%" height="15" fill="rgb(218,103,12)" fg:x="32228" fg:w="428"/><text x="48.1449%" y="1007.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (91 samples, 0.14%)</title><rect x="48.3957%" y="981" width="0.1352%" height="15" fill="rgb(236,214,43)" fg:x="32565" fg:w="91"/><text x="48.6457%" y="991.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.05%)</title><rect x="48.4834%" y="965" width="0.0476%" height="15" fill="rgb(244,144,19)" fg:x="32624" fg:w="32"/><text x="48.7334%" y="975.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (32 samples, 0.05%)</title><rect x="48.4834%" y="949" width="0.0476%" height="15" fill="rgb(246,188,10)" fg:x="32624" fg:w="32"/><text x="48.7334%" y="959.50"></text></g><g><title>SizeComputer::write (32 samples, 0.05%)</title><rect x="48.4834%" y="933" width="0.0476%" height="15" fill="rgb(212,193,33)" fg:x="32624" fg:w="32"/><text x="48.7334%" y="943.50"></text></g><g><title>ContextualCheckBlock (441 samples, 0.66%)</title><rect x="47.8830%" y="1301" width="0.6554%" height="15" fill="rgb(241,51,29)" fg:x="32220" fg:w="441"/><text x="48.1330%" y="1311.50"></text></g><g><title>FlatFileSeq::Allocate (11 samples, 0.02%)</title><rect x="48.5399%" y="1269" width="0.0163%" height="15" fill="rgb(211,58,19)" fg:x="32662" fg:w="11"/><text x="48.7899%" y="1279.50"></text></g><g><title>[[ext4]] (123 samples, 0.18%)</title><rect x="48.6142%" y="1013" width="0.1828%" height="15" fill="rgb(229,111,26)" fg:x="32712" fg:w="123"/><text x="48.8642%" y="1023.50"></text></g><g><title>[unknown] (84 samples, 0.12%)</title><rect x="48.6721%" y="997" width="0.1248%" height="15" fill="rgb(213,115,40)" fg:x="32751" fg:w="84"/><text x="48.9221%" y="1007.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="48.7375%" y="981" width="0.0594%" height="15" fill="rgb(209,56,44)" fg:x="32795" fg:w="40"/><text x="48.9875%" y="991.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="48.7732%" y="965" width="0.0238%" height="15" fill="rgb(230,108,32)" fg:x="32819" fg:w="16"/><text x="49.0232%" y="975.50"></text></g><g><title>[[ext4]] (176 samples, 0.26%)</title><rect x="48.5949%" y="1029" width="0.2616%" height="15" fill="rgb(216,165,31)" fg:x="32699" fg:w="176"/><text x="48.8449%" y="1039.50"></text></g><g><title>[unknown] (40 samples, 0.06%)</title><rect x="48.7970%" y="1013" width="0.0594%" height="15" fill="rgb(218,122,21)" fg:x="32835" fg:w="40"/><text x="49.0470%" y="1023.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="48.8118%" y="997" width="0.0446%" height="15" fill="rgb(223,224,47)" fg:x="32845" fg:w="30"/><text x="49.0618%" y="1007.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="48.8371%" y="981" width="0.0193%" height="15" fill="rgb(238,102,44)" fg:x="32862" fg:w="13"/><text x="49.0871%" y="991.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="48.8401%" y="965" width="0.0163%" height="15" fill="rgb(236,46,40)" fg:x="32864" fg:w="11"/><text x="49.0901%" y="975.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="48.8460%" y="949" width="0.0104%" height="15" fill="rgb(247,202,50)" fg:x="32868" fg:w="7"/><text x="49.0960%" y="959.50"></text></g><g><title>[[ext4]] (259 samples, 0.38%)</title><rect x="48.5577%" y="1045" width="0.3849%" height="15" fill="rgb(209,99,20)" fg:x="32674" fg:w="259"/><text x="48.8077%" y="1055.50"></text></g><g><title>[unknown] (58 samples, 0.09%)</title><rect x="48.8564%" y="1029" width="0.0862%" height="15" fill="rgb(252,27,34)" fg:x="32875" fg:w="58"/><text x="49.1064%" y="1039.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="48.8876%" y="1013" width="0.0550%" height="15" fill="rgb(215,206,23)" fg:x="32896" fg:w="37"/><text x="49.1376%" y="1023.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="48.9025%" y="997" width="0.0401%" height="15" fill="rgb(212,135,36)" fg:x="32906" fg:w="27"/><text x="49.1525%" y="1007.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="48.9040%" y="981" width="0.0386%" height="15" fill="rgb(240,189,1)" fg:x="32907" fg:w="26"/><text x="49.1540%" y="991.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="48.9070%" y="965" width="0.0357%" height="15" fill="rgb(242,56,20)" fg:x="32909" fg:w="24"/><text x="49.1570%" y="975.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="48.9203%" y="949" width="0.0223%" height="15" fill="rgb(247,132,33)" fg:x="32918" fg:w="15"/><text x="49.1703%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="48.9218%" y="933" width="0.0208%" height="15" fill="rgb(208,149,11)" fg:x="32919" fg:w="14"/><text x="49.1718%" y="943.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="48.9263%" y="917" width="0.0163%" height="15" fill="rgb(211,33,11)" fg:x="32922" fg:w="11"/><text x="49.1763%" y="927.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.9278%" y="901" width="0.0149%" height="15" fill="rgb(221,29,38)" fg:x="32923" fg:w="10"/><text x="49.1778%" y="911.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.9278%" y="885" width="0.0149%" height="15" fill="rgb(206,182,49)" fg:x="32923" fg:w="10"/><text x="49.1778%" y="895.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.9278%" y="869" width="0.0149%" height="15" fill="rgb(216,140,1)" fg:x="32923" fg:w="10"/><text x="49.1778%" y="879.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="48.9307%" y="853" width="0.0119%" height="15" fill="rgb(232,57,40)" fg:x="32925" fg:w="8"/><text x="49.1807%" y="863.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="48.9307%" y="837" width="0.0119%" height="15" fill="rgb(224,186,18)" fg:x="32925" fg:w="8"/><text x="49.1807%" y="847.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="48.9322%" y="821" width="0.0104%" height="15" fill="rgb(215,121,11)" fg:x="32926" fg:w="7"/><text x="49.1822%" y="831.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="48.9322%" y="805" width="0.0104%" height="15" fill="rgb(245,147,10)" fg:x="32926" fg:w="7"/><text x="49.1822%" y="815.50"></text></g><g><title>[[ext4]] (262 samples, 0.39%)</title><rect x="48.5577%" y="1077" width="0.3894%" height="15" fill="rgb(238,153,13)" fg:x="32674" fg:w="262"/><text x="48.8077%" y="1087.50"></text></g><g><title>[[ext4]] (262 samples, 0.39%)</title><rect x="48.5577%" y="1061" width="0.3894%" height="15" fill="rgb(233,108,0)" fg:x="32674" fg:w="262"/><text x="48.8077%" y="1071.50"></text></g><g><title>FlatFileSeq::Flush (266 samples, 0.40%)</title><rect x="48.5562%" y="1253" width="0.3953%" height="15" fill="rgb(212,157,17)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1263.50"></text></g><g><title>FileCommit (266 samples, 0.40%)</title><rect x="48.5562%" y="1237" width="0.3953%" height="15" fill="rgb(225,213,38)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1247.50"></text></g><g><title>fdatasync (266 samples, 0.40%)</title><rect x="48.5562%" y="1221" width="0.3953%" height="15" fill="rgb(248,16,11)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1231.50"></text></g><g><title>[unknown] (266 samples, 0.40%)</title><rect x="48.5562%" y="1205" width="0.3953%" height="15" fill="rgb(241,33,4)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1215.50"></text></g><g><title>[unknown] (266 samples, 0.40%)</title><rect x="48.5562%" y="1189" width="0.3953%" height="15" fill="rgb(222,26,43)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1199.50"></text></g><g><title>[unknown] (266 samples, 0.40%)</title><rect x="48.5562%" y="1173" width="0.3953%" height="15" fill="rgb(243,29,36)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1183.50"></text></g><g><title>[[ext4]] (266 samples, 0.40%)</title><rect x="48.5562%" y="1157" width="0.3953%" height="15" fill="rgb(241,9,27)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1167.50"></text></g><g><title>[unknown] (266 samples, 0.40%)</title><rect x="48.5562%" y="1141" width="0.3953%" height="15" fill="rgb(205,117,26)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1151.50"></text></g><g><title>[unknown] (266 samples, 0.40%)</title><rect x="48.5562%" y="1125" width="0.3953%" height="15" fill="rgb(209,80,39)" fg:x="32673" fg:w="266"/><text x="48.8062%" y="1135.50"></text></g><g><title>[unknown] (265 samples, 0.39%)</title><rect x="48.5577%" y="1109" width="0.3938%" height="15" fill="rgb(239,155,6)" fg:x="32674" fg:w="265"/><text x="48.8077%" y="1119.50"></text></g><g><title>[unknown] (265 samples, 0.39%)</title><rect x="48.5577%" y="1093" width="0.3938%" height="15" fill="rgb(212,104,12)" fg:x="32674" fg:w="265"/><text x="48.8077%" y="1103.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="48.9679%" y="997" width="0.0238%" height="15" fill="rgb(234,204,3)" fg:x="32950" fg:w="16"/><text x="49.2179%" y="1007.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="48.9709%" y="981" width="0.0208%" height="15" fill="rgb(251,218,7)" fg:x="32952" fg:w="14"/><text x="49.2209%" y="991.50"></text></g><g><title>[[ext4]] (22 samples, 0.03%)</title><rect x="48.9634%" y="1013" width="0.0327%" height="15" fill="rgb(221,81,32)" fg:x="32947" fg:w="22"/><text x="49.2134%" y="1023.50"></text></g><g><title>[[ext4]] (40 samples, 0.06%)</title><rect x="48.9515%" y="1029" width="0.0594%" height="15" fill="rgb(214,152,26)" fg:x="32939" fg:w="40"/><text x="49.2015%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="48.9961%" y="1013" width="0.0149%" height="15" fill="rgb(223,22,3)" fg:x="32969" fg:w="10"/><text x="49.2461%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="48.9991%" y="997" width="0.0119%" height="15" fill="rgb(207,174,7)" fg:x="32971" fg:w="8"/><text x="49.2491%" y="1007.50"></text></g><g><title>[[ext4]] (41 samples, 0.06%)</title><rect x="48.9515%" y="1061" width="0.0609%" height="15" fill="rgb(224,19,52)" fg:x="32939" fg:w="41"/><text x="49.2015%" y="1071.50"></text></g><g><title>[[ext4]] (41 samples, 0.06%)</title><rect x="48.9515%" y="1045" width="0.0609%" height="15" fill="rgb(228,24,14)" fg:x="32939" fg:w="41"/><text x="49.2015%" y="1055.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (321 samples, 0.48%)</title><rect x="48.5399%" y="1285" width="0.4770%" height="15" fill="rgb(230,153,43)" fg:x="32662" fg:w="321"/><text x="48.7899%" y="1295.50"></text></g><g><title>node::BlockManager::FlushBlockFile (310 samples, 0.46%)</title><rect x="48.5562%" y="1269" width="0.4607%" height="15" fill="rgb(231,106,12)" fg:x="32673" fg:w="310"/><text x="48.8062%" y="1279.50"></text></g><g><title>node::BlockManager::FlushUndoFile (44 samples, 0.07%)</title><rect x="48.9515%" y="1253" width="0.0654%" height="15" fill="rgb(215,92,2)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1263.50"></text></g><g><title>FlatFileSeq::Flush (44 samples, 0.07%)</title><rect x="48.9515%" y="1237" width="0.0654%" height="15" fill="rgb(249,143,25)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1247.50"></text></g><g><title>FileCommit (44 samples, 0.07%)</title><rect x="48.9515%" y="1221" width="0.0654%" height="15" fill="rgb(252,7,35)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1231.50"></text></g><g><title>fdatasync (44 samples, 0.07%)</title><rect x="48.9515%" y="1205" width="0.0654%" height="15" fill="rgb(216,69,40)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1215.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="48.9515%" y="1189" width="0.0654%" height="15" fill="rgb(240,36,33)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1199.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="48.9515%" y="1173" width="0.0654%" height="15" fill="rgb(231,128,14)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1183.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="48.9515%" y="1157" width="0.0654%" height="15" fill="rgb(245,143,14)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1167.50"></text></g><g><title>[[ext4]] (44 samples, 0.07%)</title><rect x="48.9515%" y="1141" width="0.0654%" height="15" fill="rgb(222,130,28)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1151.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="48.9515%" y="1125" width="0.0654%" height="15" fill="rgb(212,10,48)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1135.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="48.9515%" y="1109" width="0.0654%" height="15" fill="rgb(254,118,45)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1119.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="48.9515%" y="1093" width="0.0654%" height="15" fill="rgb(228,6,45)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1103.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="48.9515%" y="1077" width="0.0654%" height="15" fill="rgb(241,18,35)" fg:x="32939" fg:w="44"/><text x="49.2015%" y="1087.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (43 samples, 0.06%)</title><rect x="49.0348%" y="1125" width="0.0639%" height="15" fill="rgb(227,214,53)" fg:x="32995" fg:w="43"/><text x="49.2848%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (43 samples, 0.06%)</title><rect x="49.0348%" y="1109" width="0.0639%" height="15" fill="rgb(224,107,51)" fg:x="32995" fg:w="43"/><text x="49.2848%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (43 samples, 0.06%)</title><rect x="49.0348%" y="1093" width="0.0639%" height="15" fill="rgb(248,60,28)" fg:x="32995" fg:w="43"/><text x="49.2848%" y="1103.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (43 samples, 0.06%)</title><rect x="49.0348%" y="1077" width="0.0639%" height="15" fill="rgb(249,101,23)" fg:x="32995" fg:w="43"/><text x="49.2848%" y="1087.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (43 samples, 0.06%)</title><rect x="49.0348%" y="1061" width="0.0639%" height="15" fill="rgb(228,51,19)" fg:x="32995" fg:w="43"/><text x="49.2848%" y="1071.50"></text></g><g><title>AutoFile::write (133 samples, 0.20%)</title><rect x="49.0169%" y="1141" width="0.1977%" height="15" fill="rgb(213,20,6)" fg:x="32983" fg:w="133"/><text x="49.2669%" y="1151.50"></text></g><g><title>util::Xor (78 samples, 0.12%)</title><rect x="49.0987%" y="1125" width="0.1159%" height="15" fill="rgb(212,124,10)" fg:x="33038" fg:w="78"/><text x="49.3487%" y="1135.50"></text></g><g><title>std::operator^= (24 samples, 0.04%)</title><rect x="49.1789%" y="1109" width="0.0357%" height="15" fill="rgb(248,3,40)" fg:x="33092" fg:w="24"/><text x="49.4289%" y="1119.50"></text></g><g><title>std::operator^ (24 samples, 0.04%)</title><rect x="49.1789%" y="1093" width="0.0357%" height="15" fill="rgb(223,178,23)" fg:x="33092" fg:w="24"/><text x="49.4289%" y="1103.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="49.2859%" y="533" width="0.0178%" height="15" fill="rgb(240,132,45)" fg:x="33164" fg:w="12"/><text x="49.5359%" y="543.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="49.2904%" y="517" width="0.0134%" height="15" fill="rgb(245,164,36)" fg:x="33167" fg:w="9"/><text x="49.5404%" y="527.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.2919%" y="501" width="0.0119%" height="15" fill="rgb(231,188,53)" fg:x="33168" fg:w="8"/><text x="49.5419%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="49.2933%" y="485" width="0.0104%" height="15" fill="rgb(237,198,39)" fg:x="33169" fg:w="7"/><text x="49.5433%" y="495.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="49.2859%" y="565" width="0.0208%" height="15" fill="rgb(223,120,35)" fg:x="33164" fg:w="14"/><text x="49.5359%" y="575.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="49.2859%" y="549" width="0.0208%" height="15" fill="rgb(253,107,49)" fg:x="33164" fg:w="14"/><text x="49.5359%" y="559.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (21 samples, 0.03%)</title><rect x="49.2785%" y="709" width="0.0312%" height="15" fill="rgb(216,44,31)" fg:x="33159" fg:w="21"/><text x="49.5285%" y="719.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (19 samples, 0.03%)</title><rect x="49.2815%" y="693" width="0.0282%" height="15" fill="rgb(253,87,21)" fg:x="33161" fg:w="19"/><text x="49.5315%" y="703.50"></text></g><g><title>new_do_write (19 samples, 0.03%)</title><rect x="49.2815%" y="677" width="0.0282%" height="15" fill="rgb(226,18,2)" fg:x="33161" fg:w="19"/><text x="49.5315%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (19 samples, 0.03%)</title><rect x="49.2815%" y="661" width="0.0282%" height="15" fill="rgb(216,8,46)" fg:x="33161" fg:w="19"/><text x="49.5315%" y="671.50"></text></g><g><title>__GI___libc_write (18 samples, 0.03%)</title><rect x="49.2829%" y="645" width="0.0268%" height="15" fill="rgb(226,140,39)" fg:x="33162" fg:w="18"/><text x="49.5329%" y="655.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="49.2829%" y="629" width="0.0268%" height="15" fill="rgb(221,194,54)" fg:x="33162" fg:w="18"/><text x="49.5329%" y="639.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="49.2829%" y="613" width="0.0268%" height="15" fill="rgb(213,92,11)" fg:x="33162" fg:w="18"/><text x="49.5329%" y="623.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="49.2829%" y="597" width="0.0268%" height="15" fill="rgb(229,162,46)" fg:x="33162" fg:w="18"/><text x="49.5329%" y="607.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="49.2859%" y="581" width="0.0238%" height="15" fill="rgb(214,111,36)" fg:x="33164" fg:w="16"/><text x="49.5359%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (60 samples, 0.09%)</title><rect x="49.2220%" y="789" width="0.0892%" height="15" fill="rgb(207,6,21)" fg:x="33121" fg:w="60"/><text x="49.4720%" y="799.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (60 samples, 0.09%)</title><rect x="49.2220%" y="773" width="0.0892%" height="15" fill="rgb(213,127,38)" fg:x="33121" fg:w="60"/><text x="49.4720%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (60 samples, 0.09%)</title><rect x="49.2220%" y="757" width="0.0892%" height="15" fill="rgb(238,118,32)" fg:x="33121" fg:w="60"/><text x="49.4720%" y="767.50"></text></g><g><title>AutoFile::write (60 samples, 0.09%)</title><rect x="49.2220%" y="741" width="0.0892%" height="15" fill="rgb(240,139,39)" fg:x="33121" fg:w="60"/><text x="49.4720%" y="751.50"></text></g><g><title>_IO_fwrite (46 samples, 0.07%)</title><rect x="49.2428%" y="725" width="0.0684%" height="15" fill="rgb(235,10,37)" fg:x="33135" fg:w="46"/><text x="49.4928%" y="735.50"></text></g><g><title>[[ext4]] (23 samples, 0.03%)</title><rect x="49.3677%" y="437" width="0.0342%" height="15" fill="rgb(249,171,38)" fg:x="33219" fg:w="23"/><text x="49.6177%" y="447.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="49.3721%" y="421" width="0.0297%" height="15" fill="rgb(242,144,32)" fg:x="33222" fg:w="20"/><text x="49.6221%" y="431.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="49.3721%" y="405" width="0.0297%" height="15" fill="rgb(217,117,21)" fg:x="33222" fg:w="20"/><text x="49.6221%" y="415.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="49.3781%" y="389" width="0.0238%" height="15" fill="rgb(249,87,1)" fg:x="33226" fg:w="16"/><text x="49.6281%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="49.3795%" y="373" width="0.0223%" height="15" fill="rgb(248,196,48)" fg:x="33227" fg:w="15"/><text x="49.6295%" y="383.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.3840%" y="357" width="0.0178%" height="15" fill="rgb(251,206,33)" fg:x="33230" fg:w="12"/><text x="49.6340%" y="367.50"></text></g><g><title>[[ext4]] (24 samples, 0.04%)</title><rect x="49.3677%" y="469" width="0.0357%" height="15" fill="rgb(232,141,28)" fg:x="33219" fg:w="24"/><text x="49.6177%" y="479.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="49.3677%" y="453" width="0.0357%" height="15" fill="rgb(209,167,14)" fg:x="33219" fg:w="24"/><text x="49.6177%" y="463.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (25 samples, 0.04%)</title><rect x="49.3677%" y="597" width="0.0372%" height="15" fill="rgb(225,11,50)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="607.50"></text></g><g><title>new_do_write (25 samples, 0.04%)</title><rect x="49.3677%" y="581" width="0.0372%" height="15" fill="rgb(209,50,20)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (25 samples, 0.04%)</title><rect x="49.3677%" y="565" width="0.0372%" height="15" fill="rgb(212,17,46)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="575.50"></text></g><g><title>__GI___libc_write (25 samples, 0.04%)</title><rect x="49.3677%" y="549" width="0.0372%" height="15" fill="rgb(216,101,39)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="559.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="49.3677%" y="533" width="0.0372%" height="15" fill="rgb(212,228,48)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="543.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="49.3677%" y="517" width="0.0372%" height="15" fill="rgb(250,6,50)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="527.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="49.3677%" y="501" width="0.0372%" height="15" fill="rgb(250,160,48)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="511.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="49.3677%" y="485" width="0.0372%" height="15" fill="rgb(244,216,33)" fg:x="33219" fg:w="25"/><text x="49.6177%" y="495.50"></text></g><g><title>_IO_fwrite (56 samples, 0.08%)</title><rect x="49.3231%" y="629" width="0.0832%" height="15" fill="rgb(207,157,5)" fg:x="33189" fg:w="56"/><text x="49.5731%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (26 samples, 0.04%)</title><rect x="49.3677%" y="613" width="0.0386%" height="15" fill="rgb(228,199,8)" fg:x="33219" fg:w="26"/><text x="49.6177%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (68 samples, 0.10%)</title><rect x="49.3112%" y="693" width="0.1011%" height="15" fill="rgb(227,80,20)" fg:x="33181" fg:w="68"/><text x="49.5612%" y="703.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (68 samples, 0.10%)</title><rect x="49.3112%" y="677" width="0.1011%" height="15" fill="rgb(222,9,33)" fg:x="33181" fg:w="68"/><text x="49.5612%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (68 samples, 0.10%)</title><rect x="49.3112%" y="661" width="0.1011%" height="15" fill="rgb(239,44,28)" fg:x="33181" fg:w="68"/><text x="49.5612%" y="671.50"></text></g><g><title>AutoFile::write (68 samples, 0.10%)</title><rect x="49.3112%" y="645" width="0.1011%" height="15" fill="rgb(249,187,43)" fg:x="33181" fg:w="68"/><text x="49.5612%" y="655.50"></text></g><g><title>[[ext4]] (24 samples, 0.04%)</title><rect x="49.4940%" y="373" width="0.0357%" height="15" fill="rgb(216,141,28)" fg:x="33304" fg:w="24"/><text x="49.7440%" y="383.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="49.5029%" y="357" width="0.0268%" height="15" fill="rgb(230,154,53)" fg:x="33310" fg:w="18"/><text x="49.7529%" y="367.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="49.5073%" y="341" width="0.0223%" height="15" fill="rgb(227,82,4)" fg:x="33313" fg:w="15"/><text x="49.7573%" y="351.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.5118%" y="325" width="0.0178%" height="15" fill="rgb(220,107,16)" fg:x="33316" fg:w="12"/><text x="49.7618%" y="335.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.5118%" y="309" width="0.0178%" height="15" fill="rgb(207,187,2)" fg:x="33316" fg:w="12"/><text x="49.7618%" y="319.50"></text></g><g><title>[[ext4]] (100 samples, 0.15%)</title><rect x="49.4895%" y="389" width="0.1486%" height="15" fill="rgb(210,162,52)" fg:x="33301" fg:w="100"/><text x="49.7395%" y="399.50"></text></g><g><title>[unknown] (73 samples, 0.11%)</title><rect x="49.5296%" y="373" width="0.1085%" height="15" fill="rgb(217,216,49)" fg:x="33328" fg:w="73"/><text x="49.7796%" y="383.50"></text></g><g><title>[unknown] (72 samples, 0.11%)</title><rect x="49.5311%" y="357" width="0.1070%" height="15" fill="rgb(218,146,49)" fg:x="33329" fg:w="72"/><text x="49.7811%" y="367.50"></text></g><g><title>[unknown] (61 samples, 0.09%)</title><rect x="49.5475%" y="341" width="0.0907%" height="15" fill="rgb(216,55,40)" fg:x="33340" fg:w="61"/><text x="49.7975%" y="351.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="49.5638%" y="325" width="0.0743%" height="15" fill="rgb(208,196,21)" fg:x="33351" fg:w="50"/><text x="49.8138%" y="335.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="49.5995%" y="309" width="0.0386%" height="15" fill="rgb(242,117,42)" fg:x="33375" fg:w="26"/><text x="49.8495%" y="319.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.6262%" y="293" width="0.0119%" height="15" fill="rgb(210,11,23)" fg:x="33393" fg:w="8"/><text x="49.8762%" y="303.50"></text></g><g><title>[[ext4]] (133 samples, 0.20%)</title><rect x="49.4717%" y="421" width="0.1977%" height="15" fill="rgb(217,110,2)" fg:x="33289" fg:w="133"/><text x="49.7217%" y="431.50"></text></g><g><title>[unknown] (127 samples, 0.19%)</title><rect x="49.4806%" y="405" width="0.1887%" height="15" fill="rgb(229,77,54)" fg:x="33295" fg:w="127"/><text x="49.7306%" y="415.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="49.6381%" y="389" width="0.0312%" height="15" fill="rgb(218,53,16)" fg:x="33401" fg:w="21"/><text x="49.8881%" y="399.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="49.6441%" y="373" width="0.0253%" height="15" fill="rgb(215,38,13)" fg:x="33405" fg:w="17"/><text x="49.8941%" y="383.50"></text></g><g><title>_IO_fwrite (165 samples, 0.25%)</title><rect x="49.4405%" y="581" width="0.2452%" height="15" fill="rgb(235,42,18)" fg:x="33268" fg:w="165"/><text x="49.6905%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (165 samples, 0.25%)</title><rect x="49.4405%" y="565" width="0.2452%" height="15" fill="rgb(219,66,54)" fg:x="33268" fg:w="165"/><text x="49.6905%" y="575.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (163 samples, 0.24%)</title><rect x="49.4434%" y="549" width="0.2422%" height="15" fill="rgb(222,205,4)" fg:x="33270" fg:w="163"/><text x="49.6934%" y="559.50"></text></g><g><title>new_do_write (163 samples, 0.24%)</title><rect x="49.4434%" y="533" width="0.2422%" height="15" fill="rgb(227,213,46)" fg:x="33270" fg:w="163"/><text x="49.6934%" y="543.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (162 samples, 0.24%)</title><rect x="49.4449%" y="517" width="0.2408%" height="15" fill="rgb(250,145,42)" fg:x="33271" fg:w="162"/><text x="49.6949%" y="527.50"></text></g><g><title>__GI___libc_write (161 samples, 0.24%)</title><rect x="49.4464%" y="501" width="0.2393%" height="15" fill="rgb(219,15,2)" fg:x="33272" fg:w="161"/><text x="49.6964%" y="511.50"></text></g><g><title>[unknown] (161 samples, 0.24%)</title><rect x="49.4464%" y="485" width="0.2393%" height="15" fill="rgb(231,181,52)" fg:x="33272" fg:w="161"/><text x="49.6964%" y="495.50"></text></g><g><title>[unknown] (159 samples, 0.24%)</title><rect x="49.4494%" y="469" width="0.2363%" height="15" fill="rgb(235,1,42)" fg:x="33274" fg:w="159"/><text x="49.6994%" y="479.50"></text></g><g><title>[unknown] (158 samples, 0.23%)</title><rect x="49.4509%" y="453" width="0.2348%" height="15" fill="rgb(249,88,27)" fg:x="33275" fg:w="158"/><text x="49.7009%" y="463.50"></text></g><g><title>[unknown] (153 samples, 0.23%)</title><rect x="49.4583%" y="437" width="0.2274%" height="15" fill="rgb(235,145,16)" fg:x="33280" fg:w="153"/><text x="49.7083%" y="447.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="49.6693%" y="421" width="0.0163%" height="15" fill="rgb(237,114,19)" fg:x="33422" fg:w="11"/><text x="49.9193%" y="431.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (24 samples, 0.04%)</title><rect x="49.6857%" y="581" width="0.0357%" height="15" fill="rgb(238,51,50)" fg:x="33433" fg:w="24"/><text x="49.9357%" y="591.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (24 samples, 0.04%)</title><rect x="49.6857%" y="565" width="0.0357%" height="15" fill="rgb(205,194,25)" fg:x="33433" fg:w="24"/><text x="49.9357%" y="575.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (24 samples, 0.04%)</title><rect x="49.6857%" y="549" width="0.0357%" height="15" fill="rgb(215,203,17)" fg:x="33433" fg:w="24"/><text x="49.9357%" y="559.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (24 samples, 0.04%)</title><rect x="49.6857%" y="533" width="0.0357%" height="15" fill="rgb(233,112,49)" fg:x="33433" fg:w="24"/><text x="49.9357%" y="543.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (24 samples, 0.04%)</title><rect x="49.6857%" y="517" width="0.0357%" height="15" fill="rgb(241,130,26)" fg:x="33433" fg:w="24"/><text x="49.9357%" y="527.50"></text></g><g><title>AutoFile::write (248 samples, 0.37%)</title><rect x="49.4122%" y="597" width="0.3686%" height="15" fill="rgb(252,223,19)" fg:x="33249" fg:w="248"/><text x="49.6622%" y="607.50"></text></g><g><title>util::Xor (40 samples, 0.06%)</title><rect x="49.7214%" y="581" width="0.0594%" height="15" fill="rgb(211,95,25)" fg:x="33457" fg:w="40"/><text x="49.9714%" y="591.50"></text></g><g><title>std::operator^= (15 samples, 0.02%)</title><rect x="49.7585%" y="565" width="0.0223%" height="15" fill="rgb(251,182,27)" fg:x="33482" fg:w="15"/><text x="50.0085%" y="575.50"></text></g><g><title>std::operator^ (15 samples, 0.02%)</title><rect x="49.7585%" y="549" width="0.0223%" height="15" fill="rgb(238,24,4)" fg:x="33482" fg:w="15"/><text x="50.0085%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (326 samples, 0.48%)</title><rect x="49.3112%" y="789" width="0.4845%" height="15" fill="rgb(224,220,25)" fg:x="33181" fg:w="326"/><text x="49.5612%" y="799.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (326 samples, 0.48%)</title><rect x="49.3112%" y="773" width="0.4845%" height="15" fill="rgb(239,133,26)" fg:x="33181" fg:w="326"/><text x="49.5612%" y="783.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (326 samples, 0.48%)</title><rect x="49.3112%" y="757" width="0.4845%" height="15" fill="rgb(211,94,48)" fg:x="33181" fg:w="326"/><text x="49.5612%" y="767.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (326 samples, 0.48%)</title><rect x="49.3112%" y="741" width="0.4845%" height="15" fill="rgb(239,87,6)" fg:x="33181" fg:w="326"/><text x="49.5612%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (326 samples, 0.48%)</title><rect x="49.3112%" y="725" width="0.4845%" height="15" fill="rgb(227,62,0)" fg:x="33181" fg:w="326"/><text x="49.5612%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (326 samples, 0.48%)</title><rect x="49.3112%" y="709" width="0.4845%" height="15" fill="rgb(211,226,4)" fg:x="33181" fg:w="326"/><text x="49.5612%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (258 samples, 0.38%)</title><rect x="49.4122%" y="693" width="0.3834%" height="15" fill="rgb(253,38,52)" fg:x="33249" fg:w="258"/><text x="49.6622%" y="703.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (258 samples, 0.38%)</title><rect x="49.4122%" y="677" width="0.3834%" height="15" fill="rgb(229,126,40)" fg:x="33249" fg:w="258"/><text x="49.6622%" y="687.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (258 samples, 0.38%)</title><rect x="49.4122%" y="661" width="0.3834%" height="15" fill="rgb(229,165,44)" fg:x="33249" fg:w="258"/><text x="49.6622%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (258 samples, 0.38%)</title><rect x="49.4122%" y="645" width="0.3834%" height="15" fill="rgb(247,95,47)" fg:x="33249" fg:w="258"/><text x="49.6622%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (258 samples, 0.38%)</title><rect x="49.4122%" y="629" width="0.3834%" height="15" fill="rgb(216,140,30)" fg:x="33249" fg:w="258"/><text x="49.6622%" y="639.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (258 samples, 0.38%)</title><rect x="49.4122%" y="613" width="0.3834%" height="15" fill="rgb(246,214,8)" fg:x="33249" fg:w="258"/><text x="49.6622%" y="623.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="49.8179%" y="437" width="0.0178%" height="15" fill="rgb(227,224,15)" fg:x="33522" fg:w="12"/><text x="50.0679%" y="447.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="49.8209%" y="421" width="0.0149%" height="15" fill="rgb(233,175,4)" fg:x="33524" fg:w="10"/><text x="50.0709%" y="431.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.8239%" y="405" width="0.0119%" height="15" fill="rgb(221,66,45)" fg:x="33526" fg:w="8"/><text x="50.0739%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="49.8254%" y="389" width="0.0104%" height="15" fill="rgb(221,178,18)" fg:x="33527" fg:w="7"/><text x="50.0754%" y="399.50"></text></g><g><title>[[ext4]] (52 samples, 0.08%)</title><rect x="49.8150%" y="453" width="0.0773%" height="15" fill="rgb(213,81,29)" fg:x="33520" fg:w="52"/><text x="50.0650%" y="463.50"></text></g><g><title>[unknown] (38 samples, 0.06%)</title><rect x="49.8358%" y="437" width="0.0565%" height="15" fill="rgb(220,89,49)" fg:x="33534" fg:w="38"/><text x="50.0858%" y="447.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="49.8388%" y="421" width="0.0535%" height="15" fill="rgb(227,60,33)" fg:x="33536" fg:w="36"/><text x="50.0888%" y="431.50"></text></g><g><title>[unknown] (31 samples, 0.05%)</title><rect x="49.8462%" y="405" width="0.0461%" height="15" fill="rgb(205,113,12)" fg:x="33541" fg:w="31"/><text x="50.0962%" y="415.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="49.8566%" y="389" width="0.0357%" height="15" fill="rgb(211,32,1)" fg:x="33548" fg:w="24"/><text x="50.1066%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="49.8700%" y="373" width="0.0223%" height="15" fill="rgb(246,2,12)" fg:x="33557" fg:w="15"/><text x="50.1200%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="49.8759%" y="357" width="0.0163%" height="15" fill="rgb(243,37,27)" fg:x="33561" fg:w="11"/><text x="50.1259%" y="367.50"></text></g><g><title>[[ext4]] (66 samples, 0.10%)</title><rect x="49.8120%" y="485" width="0.0981%" height="15" fill="rgb(248,211,31)" fg:x="33518" fg:w="66"/><text x="50.0620%" y="495.50"></text></g><g><title>[unknown] (65 samples, 0.10%)</title><rect x="49.8135%" y="469" width="0.0966%" height="15" fill="rgb(242,146,47)" fg:x="33519" fg:w="65"/><text x="50.0635%" y="479.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="49.8923%" y="453" width="0.0178%" height="15" fill="rgb(206,70,20)" fg:x="33572" fg:w="12"/><text x="50.1423%" y="463.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.8982%" y="437" width="0.0119%" height="15" fill="rgb(215,10,51)" fg:x="33576" fg:w="8"/><text x="50.1482%" y="447.50"></text></g><g><title>[unknown] (77 samples, 0.11%)</title><rect x="49.8075%" y="549" width="0.1144%" height="15" fill="rgb(243,178,53)" fg:x="33515" fg:w="77"/><text x="50.0575%" y="559.50"></text></g><g><title>[unknown] (77 samples, 0.11%)</title><rect x="49.8075%" y="533" width="0.1144%" height="15" fill="rgb(233,221,20)" fg:x="33515" fg:w="77"/><text x="50.0575%" y="543.50"></text></g><g><title>[unknown] (77 samples, 0.11%)</title><rect x="49.8075%" y="517" width="0.1144%" height="15" fill="rgb(218,95,35)" fg:x="33515" fg:w="77"/><text x="50.0575%" y="527.50"></text></g><g><title>[unknown] (77 samples, 0.11%)</title><rect x="49.8075%" y="501" width="0.1144%" height="15" fill="rgb(229,13,5)" fg:x="33515" fg:w="77"/><text x="50.0575%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="49.9101%" y="485" width="0.0119%" height="15" fill="rgb(252,164,30)" fg:x="33584" fg:w="8"/><text x="50.1601%" y="495.50"></text></g><g><title>_IO_fwrite (79 samples, 0.12%)</title><rect x="49.8061%" y="645" width="0.1174%" height="15" fill="rgb(232,68,36)" fg:x="33514" fg:w="79"/><text x="50.0561%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (78 samples, 0.12%)</title><rect x="49.8075%" y="629" width="0.1159%" height="15" fill="rgb(219,59,54)" fg:x="33515" fg:w="78"/><text x="50.0575%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (78 samples, 0.12%)</title><rect x="49.8075%" y="613" width="0.1159%" height="15" fill="rgb(250,92,33)" fg:x="33515" fg:w="78"/><text x="50.0575%" y="623.50"></text></g><g><title>new_do_write (78 samples, 0.12%)</title><rect x="49.8075%" y="597" width="0.1159%" height="15" fill="rgb(229,162,54)" fg:x="33515" fg:w="78"/><text x="50.0575%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (78 samples, 0.12%)</title><rect x="49.8075%" y="581" width="0.1159%" height="15" fill="rgb(244,114,52)" fg:x="33515" fg:w="78"/><text x="50.0575%" y="591.50"></text></g><g><title>__GI___libc_write (78 samples, 0.12%)</title><rect x="49.8075%" y="565" width="0.1159%" height="15" fill="rgb(212,211,43)" fg:x="33515" fg:w="78"/><text x="50.0575%" y="575.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (10 samples, 0.01%)</title><rect x="49.9235%" y="645" width="0.0149%" height="15" fill="rgb(226,147,8)" fg:x="33593" fg:w="10"/><text x="50.1735%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (10 samples, 0.01%)</title><rect x="49.9235%" y="629" width="0.0149%" height="15" fill="rgb(226,23,13)" fg:x="33593" fg:w="10"/><text x="50.1735%" y="639.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (10 samples, 0.01%)</title><rect x="49.9235%" y="613" width="0.0149%" height="15" fill="rgb(240,63,4)" fg:x="33593" fg:w="10"/><text x="50.1735%" y="623.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (10 samples, 0.01%)</title><rect x="49.9235%" y="597" width="0.0149%" height="15" fill="rgb(221,1,32)" fg:x="33593" fg:w="10"/><text x="50.1735%" y="607.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (10 samples, 0.01%)</title><rect x="49.9235%" y="581" width="0.0149%" height="15" fill="rgb(242,117,10)" fg:x="33593" fg:w="10"/><text x="50.1735%" y="591.50"></text></g><g><title>AutoFile::write (156 samples, 0.23%)</title><rect x="49.7957%" y="661" width="0.2318%" height="15" fill="rgb(249,172,44)" fg:x="33507" fg:w="156"/><text x="50.0457%" y="671.50"></text></g><g><title>util::Xor (59 samples, 0.09%)</title><rect x="49.9398%" y="645" width="0.0877%" height="15" fill="rgb(244,46,45)" fg:x="33604" fg:w="59"/><text x="50.1898%" y="655.50"></text></g><g><title>std::operator^= (17 samples, 0.03%)</title><rect x="50.0022%" y="629" width="0.0253%" height="15" fill="rgb(206,43,17)" fg:x="33646" fg:w="17"/><text x="50.2522%" y="639.50"></text></g><g><title>std::operator^ (17 samples, 0.03%)</title><rect x="50.0022%" y="613" width="0.0253%" height="15" fill="rgb(239,218,39)" fg:x="33646" fg:w="17"/><text x="50.2522%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (162 samples, 0.24%)</title><rect x="49.7957%" y="677" width="0.2408%" height="15" fill="rgb(208,169,54)" fg:x="33507" fg:w="162"/><text x="50.0457%" y="687.50"></text></g><g><title>AutoFile::write (45 samples, 0.07%)</title><rect x="50.0379%" y="629" width="0.0669%" height="15" fill="rgb(247,25,42)" fg:x="33670" fg:w="45"/><text x="50.2879%" y="639.50"></text></g><g><title>_IO_fwrite (35 samples, 0.05%)</title><rect x="50.0528%" y="613" width="0.0520%" height="15" fill="rgb(226,23,31)" fg:x="33680" fg:w="35"/><text x="50.3028%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (595 samples, 0.88%)</title><rect x="49.2220%" y="901" width="0.8842%" height="15" fill="rgb(247,16,28)" fg:x="33121" fg:w="595"/><text x="49.4720%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (595 samples, 0.88%)</title><rect x="49.2220%" y="885" width="0.8842%" height="15" fill="rgb(231,147,38)" fg:x="33121" fg:w="595"/><text x="49.4720%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (595 samples, 0.88%)</title><rect x="49.2220%" y="869" width="0.8842%" height="15" fill="rgb(253,81,48)" fg:x="33121" fg:w="595"/><text x="49.4720%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (595 samples, 0.88%)</title><rect x="49.2220%" y="853" width="0.8842%" height="15" fill="rgb(249,222,43)" fg:x="33121" fg:w="595"/><text x="49.4720%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (595 samples, 0.88%)</title><rect x="49.2220%" y="837" width="0.8842%" height="15" fill="rgb(221,3,27)" fg:x="33121" fg:w="595"/><text x="49.4720%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (595 samples, 0.88%)</title><rect x="49.2220%" y="821" width="0.8842%" height="15" fill="rgb(228,180,5)" fg:x="33121" fg:w="595"/><text x="49.4720%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (595 samples, 0.88%)</title><rect x="49.2220%" y="805" width="0.8842%" height="15" fill="rgb(227,131,42)" fg:x="33121" fg:w="595"/><text x="49.4720%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (209 samples, 0.31%)</title><rect x="49.7957%" y="789" width="0.3106%" height="15" fill="rgb(212,3,39)" fg:x="33507" fg:w="209"/><text x="50.0457%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (209 samples, 0.31%)</title><rect x="49.7957%" y="773" width="0.3106%" height="15" fill="rgb(226,45,5)" fg:x="33507" fg:w="209"/><text x="50.0457%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (209 samples, 0.31%)</title><rect x="49.7957%" y="757" width="0.3106%" height="15" fill="rgb(215,167,45)" fg:x="33507" fg:w="209"/><text x="50.0457%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (209 samples, 0.31%)</title><rect x="49.7957%" y="741" width="0.3106%" height="15" fill="rgb(250,218,53)" fg:x="33507" fg:w="209"/><text x="50.0457%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (209 samples, 0.31%)</title><rect x="49.7957%" y="725" width="0.3106%" height="15" fill="rgb(207,140,0)" fg:x="33507" fg:w="209"/><text x="50.0457%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (209 samples, 0.31%)</title><rect x="49.7957%" y="709" width="0.3106%" height="15" fill="rgb(238,133,51)" fg:x="33507" fg:w="209"/><text x="50.0457%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (209 samples, 0.31%)</title><rect x="49.7957%" y="693" width="0.3106%" height="15" fill="rgb(218,203,53)" fg:x="33507" fg:w="209"/><text x="50.0457%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.07%)</title><rect x="50.0364%" y="677" width="0.0698%" height="15" fill="rgb(226,184,25)" fg:x="33669" fg:w="47"/><text x="50.2864%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (46 samples, 0.07%)</title><rect x="50.0379%" y="661" width="0.0684%" height="15" fill="rgb(231,121,21)" fg:x="33670" fg:w="46"/><text x="50.2879%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (46 samples, 0.07%)</title><rect x="50.0379%" y="645" width="0.0684%" height="15" fill="rgb(251,14,34)" fg:x="33670" fg:w="46"/><text x="50.2879%" y="655.50"></text></g><g><title>AutoFile::write (38 samples, 0.06%)</title><rect x="50.1077%" y="853" width="0.0565%" height="15" fill="rgb(249,193,11)" fg:x="33717" fg:w="38"/><text x="50.3577%" y="863.50"></text></g><g><title>_IO_fwrite (36 samples, 0.05%)</title><rect x="50.1107%" y="837" width="0.0535%" height="15" fill="rgb(220,172,37)" fg:x="33719" fg:w="36"/><text x="50.3607%" y="847.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (640 samples, 0.95%)</title><rect x="49.2146%" y="981" width="0.9511%" height="15" fill="rgb(231,229,43)" fg:x="33116" fg:w="640"/><text x="49.4646%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (640 samples, 0.95%)</title><rect x="49.2146%" y="965" width="0.9511%" height="15" fill="rgb(250,161,5)" fg:x="33116" fg:w="640"/><text x="49.4646%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (640 samples, 0.95%)</title><rect x="49.2146%" y="949" width="0.9511%" height="15" fill="rgb(218,225,18)" fg:x="33116" fg:w="640"/><text x="49.4646%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (640 samples, 0.95%)</title><rect x="49.2146%" y="933" width="0.9511%" height="15" fill="rgb(245,45,42)" fg:x="33116" fg:w="640"/><text x="49.4646%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (640 samples, 0.95%)</title><rect x="49.2146%" y="917" width="0.9511%" height="15" fill="rgb(211,115,1)" fg:x="33116" fg:w="640"/><text x="49.4646%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="50.1063%" y="901" width="0.0594%" height="15" fill="rgb(248,133,52)" fg:x="33716" fg:w="40"/><text x="50.3563%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (39 samples, 0.06%)</title><rect x="50.1077%" y="885" width="0.0580%" height="15" fill="rgb(238,100,21)" fg:x="33717" fg:w="39"/><text x="50.3577%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (39 samples, 0.06%)</title><rect x="50.1077%" y="869" width="0.0580%" height="15" fill="rgb(247,144,11)" fg:x="33717" fg:w="39"/><text x="50.3577%" y="879.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="50.2103%" y="517" width="0.0119%" height="15" fill="rgb(206,164,16)" fg:x="33786" fg:w="8"/><text x="50.4603%" y="527.50"></text></g><g><title>[[ext4]] (32 samples, 0.05%)</title><rect x="50.2103%" y="533" width="0.0476%" height="15" fill="rgb(222,34,3)" fg:x="33786" fg:w="32"/><text x="50.4603%" y="543.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="50.2222%" y="517" width="0.0357%" height="15" fill="rgb(248,82,4)" fg:x="33794" fg:w="24"/><text x="50.4722%" y="527.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="50.2237%" y="501" width="0.0342%" height="15" fill="rgb(228,81,46)" fg:x="33795" fg:w="23"/><text x="50.4737%" y="511.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="50.2326%" y="485" width="0.0253%" height="15" fill="rgb(227,67,47)" fg:x="33801" fg:w="17"/><text x="50.4826%" y="495.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="50.2326%" y="469" width="0.0253%" height="15" fill="rgb(215,93,53)" fg:x="33801" fg:w="17"/><text x="50.4826%" y="479.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="50.2356%" y="453" width="0.0223%" height="15" fill="rgb(248,194,39)" fg:x="33803" fg:w="15"/><text x="50.4856%" y="463.50"></text></g><g><title>[[ext4]] (46 samples, 0.07%)</title><rect x="50.2029%" y="565" width="0.0684%" height="15" fill="rgb(215,5,19)" fg:x="33781" fg:w="46"/><text x="50.4529%" y="575.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="50.2058%" y="549" width="0.0654%" height="15" fill="rgb(226,215,51)" fg:x="33783" fg:w="44"/><text x="50.4558%" y="559.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="50.2578%" y="533" width="0.0134%" height="15" fill="rgb(225,56,26)" fg:x="33818" fg:w="9"/><text x="50.5078%" y="543.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (59 samples, 0.09%)</title><rect x="50.1925%" y="693" width="0.0877%" height="15" fill="rgb(222,75,29)" fg:x="33774" fg:w="59"/><text x="50.4425%" y="703.50"></text></g><g><title>new_do_write (59 samples, 0.09%)</title><rect x="50.1925%" y="677" width="0.0877%" height="15" fill="rgb(236,139,6)" fg:x="33774" fg:w="59"/><text x="50.4425%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (58 samples, 0.09%)</title><rect x="50.1939%" y="661" width="0.0862%" height="15" fill="rgb(223,137,36)" fg:x="33775" fg:w="58"/><text x="50.4439%" y="671.50"></text></g><g><title>__GI___libc_write (58 samples, 0.09%)</title><rect x="50.1939%" y="645" width="0.0862%" height="15" fill="rgb(226,99,2)" fg:x="33775" fg:w="58"/><text x="50.4439%" y="655.50"></text></g><g><title>[unknown] (58 samples, 0.09%)</title><rect x="50.1939%" y="629" width="0.0862%" height="15" fill="rgb(206,133,23)" fg:x="33775" fg:w="58"/><text x="50.4439%" y="639.50"></text></g><g><title>[unknown] (58 samples, 0.09%)</title><rect x="50.1939%" y="613" width="0.0862%" height="15" fill="rgb(243,173,15)" fg:x="33775" fg:w="58"/><text x="50.4439%" y="623.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="50.1954%" y="597" width="0.0847%" height="15" fill="rgb(228,69,28)" fg:x="33776" fg:w="57"/><text x="50.4454%" y="607.50"></text></g><g><title>[unknown] (55 samples, 0.08%)</title><rect x="50.1984%" y="581" width="0.0817%" height="15" fill="rgb(212,51,22)" fg:x="33778" fg:w="55"/><text x="50.4484%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (62 samples, 0.09%)</title><rect x="50.1895%" y="709" width="0.0921%" height="15" fill="rgb(227,113,0)" fg:x="33772" fg:w="62"/><text x="50.4395%" y="719.50"></text></g><g><title>_IO_fwrite (67 samples, 0.10%)</title><rect x="50.1850%" y="725" width="0.0996%" height="15" fill="rgb(252,84,27)" fg:x="33769" fg:w="67"/><text x="50.4350%" y="735.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (13 samples, 0.02%)</title><rect x="50.2846%" y="725" width="0.0193%" height="15" fill="rgb(223,145,39)" fg:x="33836" fg:w="13"/><text x="50.5346%" y="735.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (13 samples, 0.02%)</title><rect x="50.2846%" y="709" width="0.0193%" height="15" fill="rgb(239,219,30)" fg:x="33836" fg:w="13"/><text x="50.5346%" y="719.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (13 samples, 0.02%)</title><rect x="50.2846%" y="693" width="0.0193%" height="15" fill="rgb(224,196,39)" fg:x="33836" fg:w="13"/><text x="50.5346%" y="703.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (13 samples, 0.02%)</title><rect x="50.2846%" y="677" width="0.0193%" height="15" fill="rgb(205,35,43)" fg:x="33836" fg:w="13"/><text x="50.5346%" y="687.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (13 samples, 0.02%)</title><rect x="50.2846%" y="661" width="0.0193%" height="15" fill="rgb(228,201,21)" fg:x="33836" fg:w="13"/><text x="50.5346%" y="671.50"></text></g><g><title>AutoFile::write (92 samples, 0.14%)</title><rect x="50.1702%" y="741" width="0.1367%" height="15" fill="rgb(237,118,16)" fg:x="33759" fg:w="92"/><text x="50.4202%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (97 samples, 0.14%)</title><rect x="50.1702%" y="789" width="0.1442%" height="15" fill="rgb(241,17,19)" fg:x="33759" fg:w="97"/><text x="50.4202%" y="799.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (97 samples, 0.14%)</title><rect x="50.1702%" y="773" width="0.1442%" height="15" fill="rgb(214,10,25)" fg:x="33759" fg:w="97"/><text x="50.4202%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (97 samples, 0.14%)</title><rect x="50.1702%" y="757" width="0.1442%" height="15" fill="rgb(238,37,29)" fg:x="33759" fg:w="97"/><text x="50.4202%" y="767.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="50.4169%" y="421" width="0.0104%" height="15" fill="rgb(253,83,25)" fg:x="33925" fg:w="7"/><text x="50.6669%" y="431.50"></text></g><g><title>[[ext4]] (29 samples, 0.04%)</title><rect x="50.4109%" y="437" width="0.0431%" height="15" fill="rgb(234,192,12)" fg:x="33921" fg:w="29"/><text x="50.6609%" y="447.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="50.4273%" y="421" width="0.0268%" height="15" fill="rgb(241,216,45)" fg:x="33932" fg:w="18"/><text x="50.6773%" y="431.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="50.4347%" y="405" width="0.0193%" height="15" fill="rgb(242,22,33)" fg:x="33937" fg:w="13"/><text x="50.6847%" y="415.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="50.4362%" y="389" width="0.0178%" height="15" fill="rgb(231,105,49)" fg:x="33938" fg:w="12"/><text x="50.6862%" y="399.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="50.4392%" y="373" width="0.0149%" height="15" fill="rgb(218,204,15)" fg:x="33940" fg:w="10"/><text x="50.6892%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="50.4436%" y="357" width="0.0104%" height="15" fill="rgb(235,138,41)" fg:x="33943" fg:w="7"/><text x="50.6936%" y="367.50"></text></g><g><title>[[ext4]] (118 samples, 0.18%)</title><rect x="50.4035%" y="453" width="0.1754%" height="15" fill="rgb(246,0,9)" fg:x="33916" fg:w="118"/><text x="50.6535%" y="463.50"></text></g><g><title>[unknown] (84 samples, 0.12%)</title><rect x="50.4540%" y="437" width="0.1248%" height="15" fill="rgb(210,74,4)" fg:x="33950" fg:w="84"/><text x="50.7040%" y="447.50"></text></g><g><title>[unknown] (84 samples, 0.12%)</title><rect x="50.4540%" y="421" width="0.1248%" height="15" fill="rgb(250,60,41)" fg:x="33950" fg:w="84"/><text x="50.7040%" y="431.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="50.4763%" y="405" width="0.1025%" height="15" fill="rgb(220,115,12)" fg:x="33965" fg:w="69"/><text x="50.7263%" y="415.50"></text></g><g><title>[unknown] (53 samples, 0.08%)</title><rect x="50.5001%" y="389" width="0.0788%" height="15" fill="rgb(237,100,13)" fg:x="33981" fg:w="53"/><text x="50.7501%" y="399.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="50.5253%" y="373" width="0.0535%" height="15" fill="rgb(213,55,26)" fg:x="33998" fg:w="36"/><text x="50.7753%" y="383.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="50.5566%" y="357" width="0.0223%" height="15" fill="rgb(216,17,4)" fg:x="34019" fg:w="15"/><text x="50.8066%" y="367.50"></text></g><g><title>[[ext4]] (146 samples, 0.22%)</title><rect x="50.3871%" y="485" width="0.2170%" height="15" fill="rgb(220,153,47)" fg:x="33905" fg:w="146"/><text x="50.6371%" y="495.50"></text></g><g><title>[unknown] (140 samples, 0.21%)</title><rect x="50.3961%" y="469" width="0.2081%" height="15" fill="rgb(215,131,9)" fg:x="33911" fg:w="140"/><text x="50.6461%" y="479.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="50.5788%" y="453" width="0.0253%" height="15" fill="rgb(233,46,42)" fg:x="34034" fg:w="17"/><text x="50.8288%" y="463.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="50.5833%" y="437" width="0.0208%" height="15" fill="rgb(226,86,7)" fg:x="34037" fg:w="14"/><text x="50.8333%" y="447.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (176 samples, 0.26%)</title><rect x="50.3559%" y="613" width="0.2616%" height="15" fill="rgb(239,226,21)" fg:x="33884" fg:w="176"/><text x="50.6059%" y="623.50"></text></g><g><title>new_do_write (176 samples, 0.26%)</title><rect x="50.3559%" y="597" width="0.2616%" height="15" fill="rgb(244,137,22)" fg:x="33884" fg:w="176"/><text x="50.6059%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (176 samples, 0.26%)</title><rect x="50.3559%" y="581" width="0.2616%" height="15" fill="rgb(211,139,35)" fg:x="33884" fg:w="176"/><text x="50.6059%" y="591.50"></text></g><g><title>__GI___libc_write (176 samples, 0.26%)</title><rect x="50.3559%" y="565" width="0.2616%" height="15" fill="rgb(214,62,50)" fg:x="33884" fg:w="176"/><text x="50.6059%" y="575.50"></text></g><g><title>[unknown] (176 samples, 0.26%)</title><rect x="50.3559%" y="549" width="0.2616%" height="15" fill="rgb(212,113,44)" fg:x="33884" fg:w="176"/><text x="50.6059%" y="559.50"></text></g><g><title>[unknown] (175 samples, 0.26%)</title><rect x="50.3574%" y="533" width="0.2601%" height="15" fill="rgb(226,150,43)" fg:x="33885" fg:w="175"/><text x="50.6074%" y="543.50"></text></g><g><title>[unknown] (175 samples, 0.26%)</title><rect x="50.3574%" y="517" width="0.2601%" height="15" fill="rgb(250,71,37)" fg:x="33885" fg:w="175"/><text x="50.6074%" y="527.50"></text></g><g><title>[unknown] (168 samples, 0.25%)</title><rect x="50.3678%" y="501" width="0.2497%" height="15" fill="rgb(219,76,19)" fg:x="33892" fg:w="168"/><text x="50.6178%" y="511.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="50.6041%" y="485" width="0.0134%" height="15" fill="rgb(250,39,11)" fg:x="34051" fg:w="9"/><text x="50.8541%" y="495.50"></text></g><g><title>_IO_fwrite (182 samples, 0.27%)</title><rect x="50.3485%" y="645" width="0.2705%" height="15" fill="rgb(230,64,31)" fg:x="33879" fg:w="182"/><text x="50.5985%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (179 samples, 0.27%)</title><rect x="50.3530%" y="629" width="0.2660%" height="15" fill="rgb(208,222,23)" fg:x="33882" fg:w="179"/><text x="50.6030%" y="639.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (25 samples, 0.04%)</title><rect x="50.6190%" y="645" width="0.0372%" height="15" fill="rgb(227,125,18)" fg:x="34061" fg:w="25"/><text x="50.8690%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (25 samples, 0.04%)</title><rect x="50.6190%" y="629" width="0.0372%" height="15" fill="rgb(234,210,9)" fg:x="34061" fg:w="25"/><text x="50.8690%" y="639.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (25 samples, 0.04%)</title><rect x="50.6190%" y="613" width="0.0372%" height="15" fill="rgb(217,127,24)" fg:x="34061" fg:w="25"/><text x="50.8690%" y="623.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (25 samples, 0.04%)</title><rect x="50.6190%" y="597" width="0.0372%" height="15" fill="rgb(239,141,48)" fg:x="34061" fg:w="25"/><text x="50.8690%" y="607.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (25 samples, 0.04%)</title><rect x="50.6190%" y="581" width="0.0372%" height="15" fill="rgb(227,109,8)" fg:x="34061" fg:w="25"/><text x="50.8690%" y="591.50"></text></g><g><title>AutoFile::write (276 samples, 0.41%)</title><rect x="50.3173%" y="661" width="0.4102%" height="15" fill="rgb(235,184,23)" fg:x="33858" fg:w="276"/><text x="50.5673%" y="671.50"></text></g><g><title>util::Xor (47 samples, 0.07%)</title><rect x="50.6576%" y="645" width="0.0698%" height="15" fill="rgb(227,226,48)" fg:x="34087" fg:w="47"/><text x="50.9076%" y="655.50"></text></g><g><title>std::operator^= (14 samples, 0.02%)</title><rect x="50.7067%" y="629" width="0.0208%" height="15" fill="rgb(206,150,11)" fg:x="34120" fg:w="14"/><text x="50.9567%" y="639.50"></text></g><g><title>std::operator^ (14 samples, 0.02%)</title><rect x="50.7067%" y="613" width="0.0208%" height="15" fill="rgb(254,2,33)" fg:x="34120" fg:w="14"/><text x="50.9567%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="661" width="0.0193%" height="15" fill="rgb(243,160,20)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="645" width="0.0193%" height="15" fill="rgb(218,208,30)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="629" width="0.0193%" height="15" fill="rgb(224,120,49)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="613" width="0.0193%" height="15" fill="rgb(246,12,2)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="597" width="0.0193%" height="15" fill="rgb(236,117,3)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="581" width="0.0193%" height="15" fill="rgb(216,128,52)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="565" width="0.0193%" height="15" fill="rgb(246,145,19)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="549" width="0.0193%" height="15" fill="rgb(222,11,46)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="559.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="533" width="0.0193%" height="15" fill="rgb(245,82,36)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="517" width="0.0193%" height="15" fill="rgb(250,73,51)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="527.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (13 samples, 0.02%)</title><rect x="50.7275%" y="501" width="0.0193%" height="15" fill="rgb(221,189,23)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="485" width="0.0193%" height="15" fill="rgb(210,33,7)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="469" width="0.0193%" height="15" fill="rgb(210,107,22)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="453" width="0.0193%" height="15" fill="rgb(222,116,37)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="437" width="0.0193%" height="15" fill="rgb(254,17,48)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="421" width="0.0193%" height="15" fill="rgb(224,36,32)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="405" width="0.0193%" height="15" fill="rgb(232,90,46)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="415.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="389" width="0.0193%" height="15" fill="rgb(241,66,40)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="399.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="373" width="0.0193%" height="15" fill="rgb(249,184,29)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="383.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="357" width="0.0193%" height="15" fill="rgb(231,181,1)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="341" width="0.0193%" height="15" fill="rgb(224,94,2)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="325" width="0.0193%" height="15" fill="rgb(229,170,15)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="309" width="0.0193%" height="15" fill="rgb(240,127,35)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="319.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="293" width="0.0193%" height="15" fill="rgb(248,196,34)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="303.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="277" width="0.0193%" height="15" fill="rgb(236,137,7)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="287.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="261" width="0.0193%" height="15" fill="rgb(235,127,16)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="245" width="0.0193%" height="15" fill="rgb(250,192,54)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="255.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="229" width="0.0193%" height="15" fill="rgb(218,98,20)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="239.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (13 samples, 0.02%)</title><rect x="50.7275%" y="213" width="0.0193%" height="15" fill="rgb(230,176,47)" fg:x="34134" fg:w="13"/><text x="50.9775%" y="223.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (295 samples, 0.44%)</title><rect x="50.3173%" y="677" width="0.4384%" height="15" fill="rgb(244,2,33)" fg:x="33858" fg:w="295"/><text x="50.5673%" y="687.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="50.8062%" y="453" width="0.0104%" height="15" fill="rgb(231,100,17)" fg:x="34187" fg:w="7"/><text x="51.0562%" y="463.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="50.8033%" y="581" width="0.0149%" height="15" fill="rgb(245,23,12)" fg:x="34185" fg:w="10"/><text x="51.0533%" y="591.50"></text></g><g><title>new_do_write (10 samples, 0.01%)</title><rect x="50.8033%" y="565" width="0.0149%" height="15" fill="rgb(249,55,22)" fg:x="34185" fg:w="10"/><text x="51.0533%" y="575.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="50.8033%" y="549" width="0.0149%" height="15" fill="rgb(207,134,9)" fg:x="34185" fg:w="10"/><text x="51.0533%" y="559.50"></text></g><g><title>__GI___libc_write (9 samples, 0.01%)</title><rect x="50.8047%" y="533" width="0.0134%" height="15" fill="rgb(218,134,0)" fg:x="34186" fg:w="9"/><text x="51.0547%" y="543.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="50.8047%" y="517" width="0.0134%" height="15" fill="rgb(213,212,33)" fg:x="34186" fg:w="9"/><text x="51.0547%" y="527.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="50.8047%" y="501" width="0.0134%" height="15" fill="rgb(252,106,18)" fg:x="34186" fg:w="9"/><text x="51.0547%" y="511.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="50.8047%" y="485" width="0.0134%" height="15" fill="rgb(208,126,42)" fg:x="34186" fg:w="9"/><text x="51.0547%" y="495.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="50.8047%" y="469" width="0.0134%" height="15" fill="rgb(246,175,29)" fg:x="34186" fg:w="9"/><text x="51.0547%" y="479.50"></text></g><g><title>_IO_fwrite (36 samples, 0.05%)</title><rect x="50.7661%" y="613" width="0.0535%" height="15" fill="rgb(215,13,50)" fg:x="34160" fg:w="36"/><text x="51.0161%" y="623.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (11 samples, 0.02%)</title><rect x="50.8033%" y="597" width="0.0163%" height="15" fill="rgb(216,172,15)" fg:x="34185" fg:w="11"/><text x="51.0533%" y="607.50"></text></g><g><title>AutoFile::write (44 samples, 0.07%)</title><rect x="50.7557%" y="629" width="0.0654%" height="15" fill="rgb(212,103,13)" fg:x="34153" fg:w="44"/><text x="51.0057%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (446 samples, 0.66%)</title><rect x="50.1672%" y="901" width="0.6628%" height="15" fill="rgb(231,171,36)" fg:x="33757" fg:w="446"/><text x="50.4172%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (446 samples, 0.66%)</title><rect x="50.1672%" y="885" width="0.6628%" height="15" fill="rgb(250,123,20)" fg:x="33757" fg:w="446"/><text x="50.4172%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (446 samples, 0.66%)</title><rect x="50.1672%" y="869" width="0.6628%" height="15" fill="rgb(212,53,50)" fg:x="33757" fg:w="446"/><text x="50.4172%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (446 samples, 0.66%)</title><rect x="50.1672%" y="853" width="0.6628%" height="15" fill="rgb(243,54,12)" fg:x="33757" fg:w="446"/><text x="50.4172%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (446 samples, 0.66%)</title><rect x="50.1672%" y="837" width="0.6628%" height="15" fill="rgb(234,101,34)" fg:x="33757" fg:w="446"/><text x="50.4172%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (446 samples, 0.66%)</title><rect x="50.1672%" y="821" width="0.6628%" height="15" fill="rgb(254,67,22)" fg:x="33757" fg:w="446"/><text x="50.4172%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (446 samples, 0.66%)</title><rect x="50.1672%" y="805" width="0.6628%" height="15" fill="rgb(250,35,47)" fg:x="33757" fg:w="446"/><text x="50.4172%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (347 samples, 0.52%)</title><rect x="50.3143%" y="789" width="0.5157%" height="15" fill="rgb(226,126,38)" fg:x="33856" fg:w="347"/><text x="50.5643%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (347 samples, 0.52%)</title><rect x="50.3143%" y="773" width="0.5157%" height="15" fill="rgb(216,138,53)" fg:x="33856" fg:w="347"/><text x="50.5643%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (347 samples, 0.52%)</title><rect x="50.3143%" y="757" width="0.5157%" height="15" fill="rgb(246,199,43)" fg:x="33856" fg:w="347"/><text x="50.5643%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (347 samples, 0.52%)</title><rect x="50.3143%" y="741" width="0.5157%" height="15" fill="rgb(232,125,11)" fg:x="33856" fg:w="347"/><text x="50.5643%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (347 samples, 0.52%)</title><rect x="50.3143%" y="725" width="0.5157%" height="15" fill="rgb(218,219,45)" fg:x="33856" fg:w="347"/><text x="50.5643%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (347 samples, 0.52%)</title><rect x="50.3143%" y="709" width="0.5157%" height="15" fill="rgb(216,102,54)" fg:x="33856" fg:w="347"/><text x="50.5643%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (347 samples, 0.52%)</title><rect x="50.3143%" y="693" width="0.5157%" height="15" fill="rgb(250,228,7)" fg:x="33856" fg:w="347"/><text x="50.5643%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="50.7557%" y="677" width="0.0743%" height="15" fill="rgb(226,125,25)" fg:x="34153" fg:w="50"/><text x="51.0057%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="50.7557%" y="661" width="0.0743%" height="15" fill="rgb(224,165,27)" fg:x="34153" fg:w="50"/><text x="51.0057%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (50 samples, 0.07%)</title><rect x="50.7557%" y="645" width="0.0743%" height="15" fill="rgb(233,86,3)" fg:x="34153" fg:w="50"/><text x="51.0057%" y="655.50"></text></g><g><title>AutoFile::write (28 samples, 0.04%)</title><rect x="50.8300%" y="853" width="0.0416%" height="15" fill="rgb(228,116,20)" fg:x="34203" fg:w="28"/><text x="51.0800%" y="863.50"></text></g><g><title>_IO_fwrite (27 samples, 0.04%)</title><rect x="50.8315%" y="837" width="0.0401%" height="15" fill="rgb(209,192,17)" fg:x="34204" fg:w="27"/><text x="51.0815%" y="847.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (477 samples, 0.71%)</title><rect x="50.1657%" y="981" width="0.7089%" height="15" fill="rgb(224,88,34)" fg:x="33756" fg:w="477"/><text x="50.4157%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (477 samples, 0.71%)</title><rect x="50.1657%" y="965" width="0.7089%" height="15" fill="rgb(233,38,6)" fg:x="33756" fg:w="477"/><text x="50.4157%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (477 samples, 0.71%)</title><rect x="50.1657%" y="949" width="0.7089%" height="15" fill="rgb(212,59,30)" fg:x="33756" fg:w="477"/><text x="50.4157%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (477 samples, 0.71%)</title><rect x="50.1657%" y="933" width="0.7089%" height="15" fill="rgb(213,80,3)" fg:x="33756" fg:w="477"/><text x="50.4157%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (477 samples, 0.71%)</title><rect x="50.1657%" y="917" width="0.7089%" height="15" fill="rgb(251,178,7)" fg:x="33756" fg:w="477"/><text x="50.4157%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.04%)</title><rect x="50.8300%" y="901" width="0.0446%" height="15" fill="rgb(213,154,26)" fg:x="34203" fg:w="30"/><text x="51.0800%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.04%)</title><rect x="50.8300%" y="885" width="0.0446%" height="15" fill="rgb(238,165,49)" fg:x="34203" fg:w="30"/><text x="51.0800%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (30 samples, 0.04%)</title><rect x="50.8300%" y="869" width="0.0446%" height="15" fill="rgb(248,91,46)" fg:x="34203" fg:w="30"/><text x="51.0800%" y="879.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="51.0797%" y="597" width="0.0178%" height="15" fill="rgb(244,21,52)" fg:x="34371" fg:w="12"/><text x="51.3297%" y="607.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="51.0767%" y="613" width="0.0238%" height="15" fill="rgb(247,122,20)" fg:x="34369" fg:w="16"/><text x="51.3267%" y="623.50"></text></g><g><title>[[ext4]] (88 samples, 0.13%)</title><rect x="51.0722%" y="629" width="0.1308%" height="15" fill="rgb(218,27,9)" fg:x="34366" fg:w="88"/><text x="51.3222%" y="639.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="51.1005%" y="613" width="0.1025%" height="15" fill="rgb(246,7,6)" fg:x="34385" fg:w="69"/><text x="51.3505%" y="623.50"></text></g><g><title>[unknown] (57 samples, 0.08%)</title><rect x="51.1183%" y="597" width="0.0847%" height="15" fill="rgb(227,135,54)" fg:x="34397" fg:w="57"/><text x="51.3683%" y="607.50"></text></g><g><title>[unknown] (51 samples, 0.08%)</title><rect x="51.1272%" y="581" width="0.0758%" height="15" fill="rgb(247,14,11)" fg:x="34403" fg:w="51"/><text x="51.3772%" y="591.50"></text></g><g><title>[unknown] (48 samples, 0.07%)</title><rect x="51.1317%" y="565" width="0.0713%" height="15" fill="rgb(206,149,34)" fg:x="34406" fg:w="48"/><text x="51.3817%" y="575.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="51.1480%" y="549" width="0.0550%" height="15" fill="rgb(227,228,4)" fg:x="34417" fg:w="37"/><text x="51.3980%" y="559.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="51.1718%" y="533" width="0.0312%" height="15" fill="rgb(238,218,28)" fg:x="34433" fg:w="21"/><text x="51.4218%" y="543.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="51.1911%" y="517" width="0.0119%" height="15" fill="rgb(252,86,40)" fg:x="34446" fg:w="8"/><text x="51.4411%" y="527.50"></text></g><g><title>[[ext4]] (340 samples, 0.51%)</title><rect x="51.0589%" y="645" width="0.5053%" height="15" fill="rgb(251,225,11)" fg:x="34357" fg:w="340"/><text x="51.3089%" y="655.50"></text></g><g><title>[unknown] (243 samples, 0.36%)</title><rect x="51.2030%" y="629" width="0.3611%" height="15" fill="rgb(206,46,49)" fg:x="34454" fg:w="243"/><text x="51.4530%" y="639.50"></text></g><g><title>[unknown] (236 samples, 0.35%)</title><rect x="51.2134%" y="613" width="0.3507%" height="15" fill="rgb(245,128,24)" fg:x="34461" fg:w="236"/><text x="51.4634%" y="623.50"></text></g><g><title>[unknown] (202 samples, 0.30%)</title><rect x="51.2640%" y="597" width="0.3002%" height="15" fill="rgb(219,177,34)" fg:x="34495" fg:w="202"/><text x="51.5140%" y="607.50"></text></g><g><title>[unknown] (169 samples, 0.25%)</title><rect x="51.3130%" y="581" width="0.2512%" height="15" fill="rgb(218,60,48)" fg:x="34528" fg:w="169"/><text x="51.5630%" y="591.50"></text></g><g><title>[unknown] (125 samples, 0.19%)</title><rect x="51.3784%" y="565" width="0.1858%" height="15" fill="rgb(221,11,5)" fg:x="34572" fg:w="125"/><text x="51.6284%" y="575.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="51.4988%" y="549" width="0.0654%" height="15" fill="rgb(220,148,13)" fg:x="34653" fg:w="44"/><text x="51.7488%" y="559.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="51.5463%" y="533" width="0.0178%" height="15" fill="rgb(210,16,3)" fg:x="34685" fg:w="12"/><text x="51.7963%" y="543.50"></text></g><g><title>[[ext4]] (422 samples, 0.63%)</title><rect x="51.0202%" y="677" width="0.6271%" height="15" fill="rgb(236,80,2)" fg:x="34331" fg:w="422"/><text x="51.2702%" y="687.50"></text></g><g><title>[unknown] (411 samples, 0.61%)</title><rect x="51.0366%" y="661" width="0.6108%" height="15" fill="rgb(239,129,19)" fg:x="34342" fg:w="411"/><text x="51.2866%" y="671.50"></text></g><g><title>[unknown] (56 samples, 0.08%)</title><rect x="51.5641%" y="645" width="0.0832%" height="15" fill="rgb(220,106,35)" fg:x="34697" fg:w="56"/><text x="51.8141%" y="655.50"></text></g><g><title>[unknown] (39 samples, 0.06%)</title><rect x="51.5894%" y="629" width="0.0580%" height="15" fill="rgb(252,139,45)" fg:x="34714" fg:w="39"/><text x="51.8394%" y="639.50"></text></g><g><title>[unknown] (499 samples, 0.74%)</title><rect x="50.9534%" y="741" width="0.7416%" height="15" fill="rgb(229,8,36)" fg:x="34286" fg:w="499"/><text x="51.2034%" y="751.50"></text></g><g><title>[unknown] (497 samples, 0.74%)</title><rect x="50.9563%" y="725" width="0.7386%" height="15" fill="rgb(230,126,33)" fg:x="34288" fg:w="497"/><text x="51.2063%" y="735.50"></text></g><g><title>[unknown] (497 samples, 0.74%)</title><rect x="50.9563%" y="709" width="0.7386%" height="15" fill="rgb(239,140,21)" fg:x="34288" fg:w="497"/><text x="51.2063%" y="719.50"></text></g><g><title>[unknown] (482 samples, 0.72%)</title><rect x="50.9786%" y="693" width="0.7163%" height="15" fill="rgb(254,104,9)" fg:x="34303" fg:w="482"/><text x="51.2286%" y="703.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="51.6474%" y="677" width="0.0476%" height="15" fill="rgb(239,52,14)" fg:x="34753" fg:w="32"/><text x="51.8974%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="51.6845%" y="661" width="0.0104%" height="15" fill="rgb(208,227,44)" fg:x="34778" fg:w="7"/><text x="51.9345%" y="671.50"></text></g><g><title>__GI___libc_write (501 samples, 0.74%)</title><rect x="50.9534%" y="757" width="0.7445%" height="15" fill="rgb(246,18,19)" fg:x="34286" fg:w="501"/><text x="51.2034%" y="767.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (513 samples, 0.76%)</title><rect x="50.9370%" y="805" width="0.7624%" height="15" fill="rgb(235,228,25)" fg:x="34275" fg:w="513"/><text x="51.1870%" y="815.50"></text></g><g><title>new_do_write (511 samples, 0.76%)</title><rect x="50.9400%" y="789" width="0.7594%" height="15" fill="rgb(240,156,20)" fg:x="34277" fg:w="511"/><text x="51.1900%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (507 samples, 0.75%)</title><rect x="50.9459%" y="773" width="0.7535%" height="15" fill="rgb(224,8,20)" fg:x="34281" fg:w="507"/><text x="51.1959%" y="783.50"></text></g><g><title>_IO_fwrite (524 samples, 0.78%)</title><rect x="50.9251%" y="837" width="0.7787%" height="15" fill="rgb(214,12,52)" fg:x="34267" fg:w="524"/><text x="51.1751%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (521 samples, 0.77%)</title><rect x="50.9296%" y="821" width="0.7743%" height="15" fill="rgb(211,220,47)" fg:x="34270" fg:w="521"/><text x="51.1796%" y="831.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (60 samples, 0.09%)</title><rect x="51.7038%" y="837" width="0.0892%" height="15" fill="rgb(250,173,5)" fg:x="34791" fg:w="60"/><text x="51.9538%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (60 samples, 0.09%)</title><rect x="51.7038%" y="821" width="0.0892%" height="15" fill="rgb(250,125,52)" fg:x="34791" fg:w="60"/><text x="51.9538%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (60 samples, 0.09%)</title><rect x="51.7038%" y="805" width="0.0892%" height="15" fill="rgb(209,133,18)" fg:x="34791" fg:w="60"/><text x="51.9538%" y="815.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (60 samples, 0.09%)</title><rect x="51.7038%" y="789" width="0.0892%" height="15" fill="rgb(216,173,22)" fg:x="34791" fg:w="60"/><text x="51.9538%" y="799.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (60 samples, 0.09%)</title><rect x="51.7038%" y="773" width="0.0892%" height="15" fill="rgb(205,3,22)" fg:x="34791" fg:w="60"/><text x="51.9538%" y="783.50"></text></g><g><title>AutoFile::write (838 samples, 1.25%)</title><rect x="50.8761%" y="853" width="1.2454%" height="15" fill="rgb(248,22,20)" fg:x="34234" fg:w="838"/><text x="51.1261%" y="863.50"></text></g><g><title>util::Xor (218 samples, 0.32%)</title><rect x="51.7975%" y="837" width="0.3240%" height="15" fill="rgb(233,6,29)" fg:x="34854" fg:w="218"/><text x="52.0475%" y="847.50"></text></g><g><title>std::operator^= (68 samples, 0.10%)</title><rect x="52.0204%" y="821" width="0.1011%" height="15" fill="rgb(240,22,54)" fg:x="35004" fg:w="68"/><text x="52.2704%" y="831.50"></text></g><g><title>std::operator^ (68 samples, 0.10%)</title><rect x="52.0204%" y="805" width="0.1011%" height="15" fill="rgb(231,133,32)" fg:x="35004" fg:w="68"/><text x="52.2704%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="853" width="0.0163%" height="15" fill="rgb(248,193,4)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="837" width="0.0163%" height="15" fill="rgb(211,178,46)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="821" width="0.0163%" height="15" fill="rgb(224,5,42)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="805" width="0.0163%" height="15" fill="rgb(239,176,25)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="789" width="0.0163%" height="15" fill="rgb(245,187,50)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="773" width="0.0163%" height="15" fill="rgb(248,24,15)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="757" width="0.0163%" height="15" fill="rgb(205,166,13)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="741" width="0.0163%" height="15" fill="rgb(208,114,23)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="725" width="0.0163%" height="15" fill="rgb(239,127,18)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="709" width="0.0163%" height="15" fill="rgb(219,154,28)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="719.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (11 samples, 0.02%)</title><rect x="52.1214%" y="693" width="0.0163%" height="15" fill="rgb(225,157,23)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="677" width="0.0163%" height="15" fill="rgb(219,8,6)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="661" width="0.0163%" height="15" fill="rgb(212,47,6)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="645" width="0.0163%" height="15" fill="rgb(224,190,4)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="629" width="0.0163%" height="15" fill="rgb(239,183,29)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="613" width="0.0163%" height="15" fill="rgb(213,57,7)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (11 samples, 0.02%)</title><rect x="52.1214%" y="597" width="0.0163%" height="15" fill="rgb(216,148,1)" fg:x="35072" fg:w="11"/><text x="52.3714%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (857 samples, 1.27%)</title><rect x="50.8761%" y="869" width="1.2736%" height="15" fill="rgb(236,182,29)" fg:x="34234" fg:w="857"/><text x="51.1261%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="52.1378%" y="853" width="0.0119%" height="15" fill="rgb(244,120,48)" fg:x="35083" fg:w="8"/><text x="52.3878%" y="863.50"></text></g><g><title>AutoFile::write (44 samples, 0.07%)</title><rect x="52.1556%" y="821" width="0.0654%" height="15" fill="rgb(206,71,34)" fg:x="35095" fg:w="44"/><text x="52.4056%" y="831.50"></text></g><g><title>_IO_fwrite (37 samples, 0.05%)</title><rect x="52.1660%" y="805" width="0.0550%" height="15" fill="rgb(242,32,6)" fg:x="35102" fg:w="37"/><text x="52.4160%" y="815.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="52.2106%" y="789" width="0.0104%" height="15" fill="rgb(241,35,3)" fg:x="35132" fg:w="7"/><text x="52.4606%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (915 samples, 1.36%)</title><rect x="50.8761%" y="901" width="1.3598%" height="15" fill="rgb(222,62,19)" fg:x="34234" fg:w="915"/><text x="51.1261%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (915 samples, 1.36%)</title><rect x="50.8761%" y="885" width="1.3598%" height="15" fill="rgb(223,110,41)" fg:x="34234" fg:w="915"/><text x="51.1261%" y="895.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="52.1556%" y="869" width="0.0803%" height="15" fill="rgb(208,224,4)" fg:x="35095" fg:w="54"/><text x="52.4056%" y="879.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="52.1556%" y="853" width="0.0803%" height="15" fill="rgb(241,137,19)" fg:x="35095" fg:w="54"/><text x="52.4056%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (54 samples, 0.08%)</title><rect x="52.1556%" y="837" width="0.0803%" height="15" fill="rgb(244,24,17)" fg:x="35095" fg:w="54"/><text x="52.4056%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="821" width="0.0119%" height="15" fill="rgb(245,178,49)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="805" width="0.0119%" height="15" fill="rgb(219,160,38)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="789" width="0.0119%" height="15" fill="rgb(228,137,14)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="773" width="0.0119%" height="15" fill="rgb(237,134,11)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="757" width="0.0119%" height="15" fill="rgb(211,126,44)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="767.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="741" width="0.0119%" height="15" fill="rgb(226,171,33)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="725" width="0.0119%" height="15" fill="rgb(253,99,13)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="709" width="0.0119%" height="15" fill="rgb(244,48,7)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="719.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="693" width="0.0119%" height="15" fill="rgb(244,217,54)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="703.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="677" width="0.0119%" height="15" fill="rgb(224,15,18)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="52.2240%" y="661" width="0.0119%" height="15" fill="rgb(244,99,12)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="645" width="0.0119%" height="15" fill="rgb(233,226,8)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="629" width="0.0119%" height="15" fill="rgb(229,211,3)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="613" width="0.0119%" height="15" fill="rgb(216,140,21)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="52.2240%" y="597" width="0.0119%" height="15" fill="rgb(234,122,30)" fg:x="35141" fg:w="8"/><text x="52.4740%" y="607.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="52.2864%" y="677" width="0.0104%" height="15" fill="rgb(236,25,46)" fg:x="35183" fg:w="7"/><text x="52.5364%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="52.2864%" y="661" width="0.0104%" height="15" fill="rgb(217,52,54)" fg:x="35183" fg:w="7"/><text x="52.5364%" y="671.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="52.2864%" y="821" width="0.0119%" height="15" fill="rgb(222,29,26)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="831.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="52.2864%" y="805" width="0.0119%" height="15" fill="rgb(216,177,29)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="815.50"></text></g><g><title>new_do_write (8 samples, 0.01%)</title><rect x="52.2864%" y="789" width="0.0119%" height="15" fill="rgb(247,136,51)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.01%)</title><rect x="52.2864%" y="773" width="0.0119%" height="15" fill="rgb(231,47,47)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="783.50"></text></g><g><title>__GI___libc_write (8 samples, 0.01%)</title><rect x="52.2864%" y="757" width="0.0119%" height="15" fill="rgb(211,192,36)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="52.2864%" y="741" width="0.0119%" height="15" fill="rgb(229,156,32)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="751.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="52.2864%" y="725" width="0.0119%" height="15" fill="rgb(248,213,20)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="735.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="52.2864%" y="709" width="0.0119%" height="15" fill="rgb(217,64,7)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="719.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="52.2864%" y="693" width="0.0119%" height="15" fill="rgb(232,142,8)" fg:x="35183" fg:w="8"/><text x="52.5364%" y="703.50"></text></g><g><title>_IO_fwrite (36 samples, 0.05%)</title><rect x="52.2463%" y="837" width="0.0535%" height="15" fill="rgb(224,92,44)" fg:x="35156" fg:w="36"/><text x="52.4963%" y="847.50"></text></g><g><title>AutoFile::write (45 samples, 0.07%)</title><rect x="52.2359%" y="853" width="0.0669%" height="15" fill="rgb(214,169,17)" fg:x="35149" fg:w="45"/><text x="52.4859%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (976 samples, 1.45%)</title><rect x="50.8746%" y="981" width="1.4505%" height="15" fill="rgb(210,59,37)" fg:x="34233" fg:w="976"/><text x="51.1246%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (976 samples, 1.45%)</title><rect x="50.8746%" y="965" width="1.4505%" height="15" fill="rgb(214,116,48)" fg:x="34233" fg:w="976"/><text x="51.1246%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (976 samples, 1.45%)</title><rect x="50.8746%" y="949" width="1.4505%" height="15" fill="rgb(244,191,6)" fg:x="34233" fg:w="976"/><text x="51.1246%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (976 samples, 1.45%)</title><rect x="50.8746%" y="933" width="1.4505%" height="15" fill="rgb(241,50,52)" fg:x="34233" fg:w="976"/><text x="51.1246%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (976 samples, 1.45%)</title><rect x="50.8746%" y="917" width="1.4505%" height="15" fill="rgb(236,75,39)" fg:x="34233" fg:w="976"/><text x="51.1246%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (60 samples, 0.09%)</title><rect x="52.2359%" y="901" width="0.0892%" height="15" fill="rgb(236,99,0)" fg:x="35149" fg:w="60"/><text x="52.4859%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (60 samples, 0.09%)</title><rect x="52.2359%" y="885" width="0.0892%" height="15" fill="rgb(207,202,15)" fg:x="35149" fg:w="60"/><text x="52.4859%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (60 samples, 0.09%)</title><rect x="52.2359%" y="869" width="0.0892%" height="15" fill="rgb(233,207,14)" fg:x="35149" fg:w="60"/><text x="52.4859%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="853" width="0.0223%" height="15" fill="rgb(226,27,51)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="837" width="0.0223%" height="15" fill="rgb(206,104,42)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="821" width="0.0223%" height="15" fill="rgb(212,225,4)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="805" width="0.0223%" height="15" fill="rgb(233,96,42)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="789" width="0.0223%" height="15" fill="rgb(229,21,32)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="773" width="0.0223%" height="15" fill="rgb(226,216,24)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="757" width="0.0223%" height="15" fill="rgb(221,163,17)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="741" width="0.0223%" height="15" fill="rgb(216,216,42)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="725" width="0.0223%" height="15" fill="rgb(240,118,7)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="52.3028%" y="709" width="0.0223%" height="15" fill="rgb(221,67,37)" fg:x="35194" fg:w="15"/><text x="52.5528%" y="719.50"></text></g><g><title>AutoFile::write (22 samples, 0.03%)</title><rect x="52.3250%" y="917" width="0.0327%" height="15" fill="rgb(241,32,44)" fg:x="35209" fg:w="22"/><text x="52.5750%" y="927.50"></text></g><g><title>_IO_fwrite (19 samples, 0.03%)</title><rect x="52.3295%" y="901" width="0.0282%" height="15" fill="rgb(235,204,43)" fg:x="35212" fg:w="19"/><text x="52.5795%" y="911.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (23 samples, 0.03%)</title><rect x="52.3250%" y="981" width="0.0342%" height="15" fill="rgb(213,116,10)" fg:x="35209" fg:w="23"/><text x="52.5750%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="52.3250%" y="965" width="0.0342%" height="15" fill="rgb(239,15,48)" fg:x="35209" fg:w="23"/><text x="52.5750%" y="975.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="52.3250%" y="949" width="0.0342%" height="15" fill="rgb(207,123,36)" fg:x="35209" fg:w="23"/><text x="52.5750%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (23 samples, 0.03%)</title><rect x="52.3250%" y="933" width="0.0342%" height="15" fill="rgb(209,103,30)" fg:x="35209" fg:w="23"/><text x="52.5750%" y="943.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="52.4127%" y="709" width="0.0238%" height="15" fill="rgb(238,100,19)" fg:x="35268" fg:w="16"/><text x="52.6627%" y="719.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="52.4142%" y="693" width="0.0223%" height="15" fill="rgb(244,30,14)" fg:x="35269" fg:w="15"/><text x="52.6642%" y="703.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="52.4142%" y="677" width="0.0223%" height="15" fill="rgb(249,174,6)" fg:x="35269" fg:w="15"/><text x="52.6642%" y="687.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="52.4172%" y="661" width="0.0193%" height="15" fill="rgb(235,213,41)" fg:x="35271" fg:w="13"/><text x="52.6672%" y="671.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="52.4216%" y="645" width="0.0149%" height="15" fill="rgb(213,118,6)" fg:x="35274" fg:w="10"/><text x="52.6716%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="52.4246%" y="629" width="0.0119%" height="15" fill="rgb(235,44,51)" fg:x="35276" fg:w="8"/><text x="52.6746%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (22 samples, 0.03%)</title><rect x="52.4053%" y="869" width="0.0327%" height="15" fill="rgb(217,9,53)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="879.50"></text></g><g><title>new_do_write (22 samples, 0.03%)</title><rect x="52.4053%" y="853" width="0.0327%" height="15" fill="rgb(237,172,34)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="863.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (22 samples, 0.03%)</title><rect x="52.4053%" y="837" width="0.0327%" height="15" fill="rgb(206,206,11)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="847.50"></text></g><g><title>__GI___libc_write (22 samples, 0.03%)</title><rect x="52.4053%" y="821" width="0.0327%" height="15" fill="rgb(214,149,29)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="831.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="52.4053%" y="805" width="0.0327%" height="15" fill="rgb(208,123,3)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="815.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="52.4053%" y="789" width="0.0327%" height="15" fill="rgb(229,126,4)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="799.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="52.4053%" y="773" width="0.0327%" height="15" fill="rgb(222,92,36)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="783.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="52.4053%" y="757" width="0.0327%" height="15" fill="rgb(216,39,41)" fg:x="35263" fg:w="22"/><text x="52.6553%" y="767.50"></text></g><g><title>[[ext4]] (21 samples, 0.03%)</title><rect x="52.4068%" y="741" width="0.0312%" height="15" fill="rgb(253,127,28)" fg:x="35264" fg:w="21"/><text x="52.6568%" y="751.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="52.4083%" y="725" width="0.0297%" height="15" fill="rgb(249,152,51)" fg:x="35265" fg:w="20"/><text x="52.6583%" y="735.50"></text></g><g><title>_IO_fwrite (50 samples, 0.07%)</title><rect x="52.3681%" y="901" width="0.0743%" height="15" fill="rgb(209,123,42)" fg:x="35238" fg:w="50"/><text x="52.6181%" y="911.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (25 samples, 0.04%)</title><rect x="52.4053%" y="885" width="0.0372%" height="15" fill="rgb(241,118,22)" fg:x="35263" fg:w="25"/><text x="52.6553%" y="895.50"></text></g><g><title>AutoFile::write (56 samples, 0.08%)</title><rect x="52.3607%" y="917" width="0.0832%" height="15" fill="rgb(208,25,7)" fg:x="35233" fg:w="56"/><text x="52.6107%" y="927.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (62 samples, 0.09%)</title><rect x="52.3592%" y="981" width="0.0921%" height="15" fill="rgb(243,144,39)" fg:x="35232" fg:w="62"/><text x="52.6092%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 0.09%)</title><rect x="52.3592%" y="965" width="0.0921%" height="15" fill="rgb(250,50,5)" fg:x="35232" fg:w="62"/><text x="52.6092%" y="975.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.09%)</title><rect x="52.3607%" y="949" width="0.0907%" height="15" fill="rgb(207,67,11)" fg:x="35233" fg:w="61"/><text x="52.6107%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (61 samples, 0.09%)</title><rect x="52.3607%" y="933" width="0.0907%" height="15" fill="rgb(245,204,40)" fg:x="35233" fg:w="61"/><text x="52.6107%" y="943.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1269" width="3.4359%" height="15" fill="rgb(238,228,24)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1279.50">Aut..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1253" width="3.4359%" height="15" fill="rgb(217,116,22)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1263.50">voi..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1237" width="3.4359%" height="15" fill="rgb(234,98,12)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1247.50">voi..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1221" width="3.4359%" height="15" fill="rgb(242,170,50)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1231.50">voi..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1205" width="3.4359%" height="15" fill="rgb(235,7,5)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1215.50">voi..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1189" width="3.4359%" height="15" fill="rgb(241,114,28)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1199.50">voi..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1173" width="3.4359%" height="15" fill="rgb(246,112,42)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1183.50">voi..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,312 samples, 3.44%)</title><rect x="49.0169%" y="1157" width="3.4359%" height="15" fill="rgb(248,228,14)" fg:x="32983" fg:w="2312"/><text x="49.2669%" y="1167.50">voi..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1141" width="3.2383%" height="15" fill="rgb(208,133,18)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1151.50">voi..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1125" width="3.2383%" height="15" fill="rgb(207,35,49)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1135.50">voi..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1109" width="3.2383%" height="15" fill="rgb(205,68,36)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1119.50">voi..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1093" width="3.2383%" height="15" fill="rgb(245,62,40)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1103.50">voi..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1077" width="3.2383%" height="15" fill="rgb(228,27,24)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1087.50">voi..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1061" width="3.2383%" height="15" fill="rgb(253,19,12)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1071.50">voi..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1045" width="3.2383%" height="15" fill="rgb(232,28,20)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1055.50">voi..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1029" width="3.2383%" height="15" fill="rgb(218,35,51)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1039.50">voi..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="1013" width="3.2383%" height="15" fill="rgb(212,90,40)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1023.50">voi..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2,179 samples, 3.24%)</title><rect x="49.2146%" y="997" width="3.2383%" height="15" fill="rgb(220,172,12)" fg:x="33116" fg:w="2179"/><text x="49.4646%" y="1007.50">voi..</text></g><g><title>__fopen_internal (12 samples, 0.02%)</title><rect x="52.4618%" y="1237" width="0.0178%" height="15" fill="rgb(226,159,20)" fg:x="35301" fg:w="12"/><text x="52.7118%" y="1247.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (12 samples, 0.02%)</title><rect x="52.4618%" y="1221" width="0.0178%" height="15" fill="rgb(234,205,16)" fg:x="35301" fg:w="12"/><text x="52.7118%" y="1231.50"></text></g><g><title>_IO_file_open (12 samples, 0.02%)</title><rect x="52.4618%" y="1205" width="0.0178%" height="15" fill="rgb(207,9,39)" fg:x="35301" fg:w="12"/><text x="52.7118%" y="1215.50"></text></g><g><title>__GI___libc_open (12 samples, 0.02%)</title><rect x="52.4618%" y="1189" width="0.0178%" height="15" fill="rgb(249,143,15)" fg:x="35301" fg:w="12"/><text x="52.7118%" y="1199.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="52.4618%" y="1173" width="0.0178%" height="15" fill="rgb(253,133,29)" fg:x="35301" fg:w="12"/><text x="52.7118%" y="1183.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="52.4633%" y="1157" width="0.0163%" height="15" fill="rgb(221,187,0)" fg:x="35302" fg:w="11"/><text x="52.7133%" y="1167.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="52.4633%" y="1141" width="0.0163%" height="15" fill="rgb(205,204,26)" fg:x="35302" fg:w="11"/><text x="52.7133%" y="1151.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="52.4633%" y="1125" width="0.0163%" height="15" fill="rgb(224,68,54)" fg:x="35302" fg:w="11"/><text x="52.7133%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="52.4692%" y="1109" width="0.0104%" height="15" fill="rgb(209,67,4)" fg:x="35306" fg:w="7"/><text x="52.7192%" y="1119.50"></text></g><g><title>create_directories (7 samples, 0.01%)</title><rect x="52.4796%" y="1237" width="0.0104%" height="15" fill="rgb(228,229,18)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1247.50"></text></g><g><title>std::filesystem::is_symlink (7 samples, 0.01%)</title><rect x="52.4796%" y="1221" width="0.0104%" height="15" fill="rgb(231,89,13)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1231.50"></text></g><g><title>std::filesystem::symlink_status (7 samples, 0.01%)</title><rect x="52.4796%" y="1205" width="0.0104%" height="15" fill="rgb(210,182,18)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1215.50"></text></g><g><title>std::filesystem::symlink_status (7 samples, 0.01%)</title><rect x="52.4796%" y="1189" width="0.0104%" height="15" fill="rgb(240,105,2)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1199.50"></text></g><g><title>__GI___fstatat64 (7 samples, 0.01%)</title><rect x="52.4796%" y="1173" width="0.0104%" height="15" fill="rgb(207,170,50)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="52.4796%" y="1157" width="0.0104%" height="15" fill="rgb(232,133,24)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="52.4796%" y="1141" width="0.0104%" height="15" fill="rgb(235,166,27)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="52.4796%" y="1125" width="0.0104%" height="15" fill="rgb(209,19,13)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="52.4796%" y="1109" width="0.0104%" height="15" fill="rgb(226,79,39)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="52.4796%" y="1093" width="0.0104%" height="15" fill="rgb(222,163,10)" fg:x="35313" fg:w="7"/><text x="52.7296%" y="1103.50"></text></g><g><title>_IO_doallocbuf (17 samples, 0.03%)</title><rect x="52.4900%" y="1205" width="0.0253%" height="15" fill="rgb(214,44,19)" fg:x="35320" fg:w="17"/><text x="52.7400%" y="1215.50"></text></g><g><title>_IO_file_doallocate (17 samples, 0.03%)</title><rect x="52.4900%" y="1189" width="0.0253%" height="15" fill="rgb(210,217,13)" fg:x="35320" fg:w="17"/><text x="52.7400%" y="1199.50"></text></g><g><title>malloc (16 samples, 0.02%)</title><rect x="52.4915%" y="1173" width="0.0238%" height="15" fill="rgb(237,61,54)" fg:x="35321" fg:w="16"/><text x="52.7415%" y="1183.50"></text></g><g><title>_int_malloc (16 samples, 0.02%)</title><rect x="52.4915%" y="1157" width="0.0238%" height="15" fill="rgb(226,184,24)" fg:x="35321" fg:w="16"/><text x="52.7415%" y="1167.50"></text></g><g><title>malloc_consolidate (8 samples, 0.01%)</title><rect x="52.5034%" y="1141" width="0.0119%" height="15" fill="rgb(223,226,4)" fg:x="35329" fg:w="8"/><text x="52.7534%" y="1151.50"></text></g><g><title>node::BlockManager::OpenBlockFile (45 samples, 0.07%)</title><rect x="52.4573%" y="1269" width="0.0669%" height="15" fill="rgb(210,26,41)" fg:x="35298" fg:w="45"/><text x="52.7073%" y="1279.50"></text></g><g><title>FlatFileSeq::Open (45 samples, 0.07%)</title><rect x="52.4573%" y="1253" width="0.0669%" height="15" fill="rgb(220,221,6)" fg:x="35298" fg:w="45"/><text x="52.7073%" y="1263.50"></text></g><g><title>fseek (23 samples, 0.03%)</title><rect x="52.4900%" y="1237" width="0.0342%" height="15" fill="rgb(225,89,49)" fg:x="35320" fg:w="23"/><text x="52.7400%" y="1247.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (23 samples, 0.03%)</title><rect x="52.4900%" y="1221" width="0.0342%" height="15" fill="rgb(218,70,45)" fg:x="35320" fg:w="23"/><text x="52.7400%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (7 samples, 0.01%)</title><rect x="52.5881%" y="661" width="0.0104%" height="15" fill="rgb(238,166,21)" fg:x="35386" fg:w="7"/><text x="52.8381%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (20 samples, 0.03%)</title><rect x="52.5747%" y="885" width="0.0297%" height="15" fill="rgb(224,141,44)" fg:x="35377" fg:w="20"/><text x="52.8247%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (20 samples, 0.03%)</title><rect x="52.5747%" y="869" width="0.0297%" height="15" fill="rgb(230,12,49)" fg:x="35377" fg:w="20"/><text x="52.8247%" y="879.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.03%)</title><rect x="52.5747%" y="853" width="0.0297%" height="15" fill="rgb(212,174,12)" fg:x="35377" fg:w="20"/><text x="52.8247%" y="863.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.03%)</title><rect x="52.5747%" y="837" width="0.0297%" height="15" fill="rgb(246,67,9)" fg:x="35377" fg:w="20"/><text x="52.8247%" y="847.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (20 samples, 0.03%)</title><rect x="52.5747%" y="821" width="0.0297%" height="15" fill="rgb(239,35,23)" fg:x="35377" fg:w="20"/><text x="52.8247%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (20 samples, 0.03%)</title><rect x="52.5747%" y="805" width="0.0297%" height="15" fill="rgb(211,167,0)" fg:x="35377" fg:w="20"/><text x="52.8247%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (20 samples, 0.03%)</title><rect x="52.5747%" y="789" width="0.0297%" height="15" fill="rgb(225,119,45)" fg:x="35377" fg:w="20"/><text x="52.8247%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (17 samples, 0.03%)</title><rect x="52.5792%" y="773" width="0.0253%" height="15" fill="rgb(210,162,6)" fg:x="35380" fg:w="17"/><text x="52.8292%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.03%)</title><rect x="52.5792%" y="757" width="0.0253%" height="15" fill="rgb(208,118,35)" fg:x="35380" fg:w="17"/><text x="52.8292%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.03%)</title><rect x="52.5792%" y="741" width="0.0253%" height="15" fill="rgb(239,4,53)" fg:x="35380" fg:w="17"/><text x="52.8292%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (17 samples, 0.03%)</title><rect x="52.5792%" y="725" width="0.0253%" height="15" fill="rgb(213,130,21)" fg:x="35380" fg:w="17"/><text x="52.8292%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.03%)</title><rect x="52.5792%" y="709" width="0.0253%" height="15" fill="rgb(235,148,0)" fg:x="35380" fg:w="17"/><text x="52.8292%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.03%)</title><rect x="52.5792%" y="693" width="0.0253%" height="15" fill="rgb(244,224,18)" fg:x="35380" fg:w="17"/><text x="52.8292%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (11 samples, 0.02%)</title><rect x="52.5881%" y="677" width="0.0163%" height="15" fill="rgb(211,214,4)" fg:x="35386" fg:w="11"/><text x="52.8381%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (50 samples, 0.07%)</title><rect x="52.5435%" y="965" width="0.0743%" height="15" fill="rgb(206,119,25)" fg:x="35356" fg:w="50"/><text x="52.7935%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (50 samples, 0.07%)</title><rect x="52.5435%" y="949" width="0.0743%" height="15" fill="rgb(243,93,47)" fg:x="35356" fg:w="50"/><text x="52.7935%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (50 samples, 0.07%)</title><rect x="52.5435%" y="933" width="0.0743%" height="15" fill="rgb(224,194,6)" fg:x="35356" fg:w="50"/><text x="52.7935%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="52.5435%" y="917" width="0.0743%" height="15" fill="rgb(243,229,6)" fg:x="35356" fg:w="50"/><text x="52.7935%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (48 samples, 0.07%)</title><rect x="52.5465%" y="901" width="0.0713%" height="15" fill="rgb(207,23,50)" fg:x="35358" fg:w="48"/><text x="52.7965%" y="911.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (18 samples, 0.03%)</title><rect x="52.6401%" y="885" width="0.0268%" height="15" fill="rgb(253,192,32)" fg:x="35421" fg:w="18"/><text x="52.8901%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (18 samples, 0.03%)</title><rect x="52.6401%" y="869" width="0.0268%" height="15" fill="rgb(213,21,6)" fg:x="35421" fg:w="18"/><text x="52.8901%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="52.6401%" y="853" width="0.0268%" height="15" fill="rgb(243,151,13)" fg:x="35421" fg:w="18"/><text x="52.8901%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="52.6401%" y="837" width="0.0268%" height="15" fill="rgb(233,165,41)" fg:x="35421" fg:w="18"/><text x="52.8901%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (18 samples, 0.03%)</title><rect x="52.6401%" y="821" width="0.0268%" height="15" fill="rgb(246,176,45)" fg:x="35421" fg:w="18"/><text x="52.8901%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (18 samples, 0.03%)</title><rect x="52.6401%" y="805" width="0.0268%" height="15" fill="rgb(217,170,52)" fg:x="35421" fg:w="18"/><text x="52.8901%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (18 samples, 0.03%)</title><rect x="52.6401%" y="789" width="0.0268%" height="15" fill="rgb(214,203,54)" fg:x="35421" fg:w="18"/><text x="52.8901%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (14 samples, 0.02%)</title><rect x="52.6460%" y="773" width="0.0208%" height="15" fill="rgb(248,215,49)" fg:x="35425" fg:w="14"/><text x="52.8960%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="52.6460%" y="757" width="0.0208%" height="15" fill="rgb(208,46,10)" fg:x="35425" fg:w="14"/><text x="52.8960%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="52.6460%" y="741" width="0.0208%" height="15" fill="rgb(254,5,31)" fg:x="35425" fg:w="14"/><text x="52.8960%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (14 samples, 0.02%)</title><rect x="52.6460%" y="725" width="0.0208%" height="15" fill="rgb(222,104,33)" fg:x="35425" fg:w="14"/><text x="52.8960%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.02%)</title><rect x="52.6460%" y="709" width="0.0208%" height="15" fill="rgb(248,49,16)" fg:x="35425" fg:w="14"/><text x="52.8960%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (14 samples, 0.02%)</title><rect x="52.6460%" y="693" width="0.0208%" height="15" fill="rgb(232,198,41)" fg:x="35425" fg:w="14"/><text x="52.8960%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.02%)</title><rect x="52.6460%" y="677" width="0.0208%" height="15" fill="rgb(214,125,3)" fg:x="35425" fg:w="14"/><text x="52.8960%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (40 samples, 0.06%)</title><rect x="52.6178%" y="965" width="0.0594%" height="15" fill="rgb(229,220,28)" fg:x="35406" fg:w="40"/><text x="52.8678%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (40 samples, 0.06%)</title><rect x="52.6178%" y="949" width="0.0594%" height="15" fill="rgb(222,64,37)" fg:x="35406" fg:w="40"/><text x="52.8678%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (40 samples, 0.06%)</title><rect x="52.6178%" y="933" width="0.0594%" height="15" fill="rgb(249,184,13)" fg:x="35406" fg:w="40"/><text x="52.8678%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="52.6178%" y="917" width="0.0594%" height="15" fill="rgb(252,176,6)" fg:x="35406" fg:w="40"/><text x="52.8678%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (40 samples, 0.06%)</title><rect x="52.6178%" y="901" width="0.0594%" height="15" fill="rgb(228,153,7)" fg:x="35406" fg:w="40"/><text x="52.8678%" y="911.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (7 samples, 0.01%)</title><rect x="52.7308%" y="853" width="0.0104%" height="15" fill="rgb(242,193,5)" fg:x="35482" fg:w="7"/><text x="52.9808%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="52.7441%" y="693" width="0.0104%" height="15" fill="rgb(232,140,9)" fg:x="35491" fg:w="7"/><text x="52.9941%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (7 samples, 0.01%)</title><rect x="52.7441%" y="677" width="0.0104%" height="15" fill="rgb(213,222,16)" fg:x="35491" fg:w="7"/><text x="52.9941%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="52.7441%" y="661" width="0.0104%" height="15" fill="rgb(222,75,50)" fg:x="35491" fg:w="7"/><text x="52.9941%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="52.7441%" y="645" width="0.0104%" height="15" fill="rgb(205,180,2)" fg:x="35491" fg:w="7"/><text x="52.9941%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="52.7441%" y="629" width="0.0104%" height="15" fill="rgb(216,34,7)" fg:x="35491" fg:w="7"/><text x="52.9941%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="853" width="0.0297%" height="15" fill="rgb(253,16,32)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="837" width="0.0297%" height="15" fill="rgb(208,97,28)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="821" width="0.0297%" height="15" fill="rgb(225,92,11)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="805" width="0.0297%" height="15" fill="rgb(243,38,12)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="789" width="0.0297%" height="15" fill="rgb(208,139,16)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="773" width="0.0297%" height="15" fill="rgb(227,24,9)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="757" width="0.0297%" height="15" fill="rgb(206,62,11)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="741" width="0.0297%" height="15" fill="rgb(228,134,27)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="725" width="0.0297%" height="15" fill="rgb(205,55,33)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (20 samples, 0.03%)</title><rect x="52.7412%" y="709" width="0.0297%" height="15" fill="rgb(243,75,43)" fg:x="35489" fg:w="20"/><text x="52.9912%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (11 samples, 0.02%)</title><rect x="52.7545%" y="693" width="0.0163%" height="15" fill="rgb(223,27,42)" fg:x="35498" fg:w="11"/><text x="53.0045%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.7545%" y="677" width="0.0163%" height="15" fill="rgb(232,189,33)" fg:x="35498" fg:w="11"/><text x="53.0045%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="52.7545%" y="661" width="0.0163%" height="15" fill="rgb(210,9,39)" fg:x="35498" fg:w="11"/><text x="53.0045%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="52.7545%" y="645" width="0.0163%" height="15" fill="rgb(242,85,26)" fg:x="35498" fg:w="11"/><text x="53.0045%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="52.7545%" y="629" width="0.0163%" height="15" fill="rgb(248,44,4)" fg:x="35498" fg:w="11"/><text x="53.0045%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="52.7590%" y="613" width="0.0119%" height="15" fill="rgb(250,96,46)" fg:x="35501" fg:w="8"/><text x="53.0090%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (8 samples, 0.01%)</title><rect x="52.7590%" y="597" width="0.0119%" height="15" fill="rgb(229,116,26)" fg:x="35501" fg:w="8"/><text x="53.0090%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (59 samples, 0.09%)</title><rect x="52.6981%" y="885" width="0.0877%" height="15" fill="rgb(246,94,34)" fg:x="35460" fg:w="59"/><text x="52.9481%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (59 samples, 0.09%)</title><rect x="52.6981%" y="869" width="0.0877%" height="15" fill="rgb(251,73,21)" fg:x="35460" fg:w="59"/><text x="52.9481%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="52.7709%" y="853" width="0.0149%" height="15" fill="rgb(254,121,25)" fg:x="35509" fg:w="10"/><text x="53.0209%" y="863.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="885" width="0.0193%" height="15" fill="rgb(215,161,49)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="869" width="0.0193%" height="15" fill="rgb(221,43,13)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="853" width="0.0193%" height="15" fill="rgb(249,5,37)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="837" width="0.0193%" height="15" fill="rgb(226,25,44)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="821" width="0.0193%" height="15" fill="rgb(238,189,16)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="805" width="0.0193%" height="15" fill="rgb(251,186,8)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="789" width="0.0193%" height="15" fill="rgb(254,34,31)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="773" width="0.0193%" height="15" fill="rgb(225,215,27)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="757" width="0.0193%" height="15" fill="rgb(221,192,48)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="52.7857%" y="741" width="0.0193%" height="15" fill="rgb(219,137,20)" fg:x="35519" fg:w="13"/><text x="53.0357%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (90 samples, 0.13%)</title><rect x="52.6773%" y="965" width="0.1338%" height="15" fill="rgb(219,84,11)" fg:x="35446" fg:w="90"/><text x="52.9273%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (90 samples, 0.13%)</title><rect x="52.6773%" y="949" width="0.1338%" height="15" fill="rgb(224,10,23)" fg:x="35446" fg:w="90"/><text x="52.9273%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (90 samples, 0.13%)</title><rect x="52.6773%" y="933" width="0.1338%" height="15" fill="rgb(248,22,39)" fg:x="35446" fg:w="90"/><text x="52.9273%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (90 samples, 0.13%)</title><rect x="52.6773%" y="917" width="0.1338%" height="15" fill="rgb(212,154,20)" fg:x="35446" fg:w="90"/><text x="52.9273%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (88 samples, 0.13%)</title><rect x="52.6802%" y="901" width="0.1308%" height="15" fill="rgb(236,199,50)" fg:x="35448" fg:w="88"/><text x="52.9302%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (194 samples, 0.29%)</title><rect x="52.5242%" y="1125" width="0.2883%" height="15" fill="rgb(211,9,17)" fg:x="35343" fg:w="194"/><text x="52.7742%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (194 samples, 0.29%)</title><rect x="52.5242%" y="1109" width="0.2883%" height="15" fill="rgb(243,216,36)" fg:x="35343" fg:w="194"/><text x="52.7742%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (194 samples, 0.29%)</title><rect x="52.5242%" y="1093" width="0.2883%" height="15" fill="rgb(250,2,10)" fg:x="35343" fg:w="194"/><text x="52.7742%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (194 samples, 0.29%)</title><rect x="52.5242%" y="1077" width="0.2883%" height="15" fill="rgb(226,50,48)" fg:x="35343" fg:w="194"/><text x="52.7742%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (194 samples, 0.29%)</title><rect x="52.5242%" y="1061" width="0.2883%" height="15" fill="rgb(243,81,16)" fg:x="35343" fg:w="194"/><text x="52.7742%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (193 samples, 0.29%)</title><rect x="52.5257%" y="1045" width="0.2868%" height="15" fill="rgb(250,14,2)" fg:x="35344" fg:w="193"/><text x="52.7757%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (193 samples, 0.29%)</title><rect x="52.5257%" y="1029" width="0.2868%" height="15" fill="rgb(233,135,29)" fg:x="35344" fg:w="193"/><text x="52.7757%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (193 samples, 0.29%)</title><rect x="52.5257%" y="1013" width="0.2868%" height="15" fill="rgb(224,64,43)" fg:x="35344" fg:w="193"/><text x="52.7757%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (193 samples, 0.29%)</title><rect x="52.5257%" y="997" width="0.2868%" height="15" fill="rgb(238,84,13)" fg:x="35344" fg:w="193"/><text x="52.7757%" y="1007.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (193 samples, 0.29%)</title><rect x="52.5257%" y="981" width="0.2868%" height="15" fill="rgb(253,48,26)" fg:x="35344" fg:w="193"/><text x="52.7757%" y="991.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (2,625 samples, 3.90%)</title><rect x="49.0169%" y="1285" width="3.9011%" height="15" fill="rgb(205,223,31)" fg:x="32983" fg:w="2625"/><text x="49.2669%" y="1295.50">node..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1269" width="0.3938%" height="15" fill="rgb(221,41,32)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (265 samples, 0.39%)</title><rect x="52.5242%" y="1253" width="0.3938%" height="15" fill="rgb(213,158,31)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1237" width="0.3938%" height="15" fill="rgb(245,126,43)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1221" width="0.3938%" height="15" fill="rgb(227,7,22)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1205" width="0.3938%" height="15" fill="rgb(252,90,44)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1189" width="0.3938%" height="15" fill="rgb(253,91,0)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1173" width="0.3938%" height="15" fill="rgb(252,175,49)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1157" width="0.3938%" height="15" fill="rgb(246,150,1)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (265 samples, 0.39%)</title><rect x="52.5242%" y="1141" width="0.3938%" height="15" fill="rgb(241,192,25)" fg:x="35343" fg:w="265"/><text x="52.7742%" y="1151.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.11%)</title><rect x="52.8125%" y="1125" width="0.1055%" height="15" fill="rgb(239,187,11)" fg:x="35537" fg:w="71"/><text x="53.0625%" y="1135.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.05%)</title><rect x="52.8719%" y="1109" width="0.0461%" height="15" fill="rgb(218,202,51)" fg:x="35577" fg:w="31"/><text x="53.1219%" y="1119.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (31 samples, 0.05%)</title><rect x="52.8719%" y="1093" width="0.0461%" height="15" fill="rgb(225,176,8)" fg:x="35577" fg:w="31"/><text x="53.1219%" y="1103.50"></text></g><g><title>SizeComputer::write (31 samples, 0.05%)</title><rect x="52.8719%" y="1077" width="0.0461%" height="15" fill="rgb(219,122,41)" fg:x="35577" fg:w="31"/><text x="53.1219%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.02%)</title><rect x="52.9879%" y="901" width="0.0193%" height="15" fill="rgb(248,140,20)" fg:x="35655" fg:w="13"/><text x="53.2379%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (13 samples, 0.02%)</title><rect x="52.9879%" y="885" width="0.0193%" height="15" fill="rgb(245,41,37)" fg:x="35655" fg:w="13"/><text x="53.2379%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="52.9879%" y="869" width="0.0193%" height="15" fill="rgb(235,82,39)" fg:x="35655" fg:w="13"/><text x="53.2379%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="52.9879%" y="853" width="0.0193%" height="15" fill="rgb(230,108,42)" fg:x="35655" fg:w="13"/><text x="53.2379%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (13 samples, 0.02%)</title><rect x="52.9879%" y="837" width="0.0193%" height="15" fill="rgb(215,150,50)" fg:x="35655" fg:w="13"/><text x="53.2379%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.02%)</title><rect x="52.9879%" y="821" width="0.0193%" height="15" fill="rgb(233,212,5)" fg:x="35655" fg:w="13"/><text x="53.2379%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (13 samples, 0.02%)</title><rect x="52.9879%" y="805" width="0.0193%" height="15" fill="rgb(245,80,22)" fg:x="35655" fg:w="13"/><text x="53.2379%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (12 samples, 0.02%)</title><rect x="52.9893%" y="789" width="0.0178%" height="15" fill="rgb(238,129,16)" fg:x="35656" fg:w="12"/><text x="53.2393%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="52.9893%" y="773" width="0.0178%" height="15" fill="rgb(240,19,0)" fg:x="35656" fg:w="12"/><text x="53.2393%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="52.9893%" y="757" width="0.0178%" height="15" fill="rgb(232,42,35)" fg:x="35656" fg:w="12"/><text x="53.2393%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="52.9893%" y="741" width="0.0178%" height="15" fill="rgb(223,130,24)" fg:x="35656" fg:w="12"/><text x="53.2393%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="52.9893%" y="725" width="0.0178%" height="15" fill="rgb(237,16,22)" fg:x="35656" fg:w="12"/><text x="53.2393%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="52.9893%" y="709" width="0.0178%" height="15" fill="rgb(248,192,20)" fg:x="35656" fg:w="12"/><text x="53.2393%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (9 samples, 0.01%)</title><rect x="52.9938%" y="693" width="0.0134%" height="15" fill="rgb(233,167,2)" fg:x="35659" fg:w="9"/><text x="53.2438%" y="703.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (50 samples, 0.07%)</title><rect x="52.9448%" y="981" width="0.0743%" height="15" fill="rgb(252,71,44)" fg:x="35626" fg:w="50"/><text x="53.1948%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (50 samples, 0.07%)</title><rect x="52.9448%" y="965" width="0.0743%" height="15" fill="rgb(238,37,47)" fg:x="35626" fg:w="50"/><text x="53.1948%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (50 samples, 0.07%)</title><rect x="52.9448%" y="949" width="0.0743%" height="15" fill="rgb(214,202,54)" fg:x="35626" fg:w="50"/><text x="53.1948%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="52.9448%" y="933" width="0.0743%" height="15" fill="rgb(254,165,40)" fg:x="35626" fg:w="50"/><text x="53.1948%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (48 samples, 0.07%)</title><rect x="52.9477%" y="917" width="0.0713%" height="15" fill="rgb(246,173,38)" fg:x="35628" fg:w="48"/><text x="53.1977%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (15 samples, 0.02%)</title><rect x="53.0310%" y="901" width="0.0223%" height="15" fill="rgb(215,3,27)" fg:x="35684" fg:w="15"/><text x="53.2810%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (15 samples, 0.02%)</title><rect x="53.0310%" y="885" width="0.0223%" height="15" fill="rgb(239,169,51)" fg:x="35684" fg:w="15"/><text x="53.2810%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="53.0310%" y="869" width="0.0223%" height="15" fill="rgb(212,5,25)" fg:x="35684" fg:w="15"/><text x="53.2810%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="53.0310%" y="853" width="0.0223%" height="15" fill="rgb(243,45,17)" fg:x="35684" fg:w="15"/><text x="53.2810%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (15 samples, 0.02%)</title><rect x="53.0310%" y="837" width="0.0223%" height="15" fill="rgb(242,97,9)" fg:x="35684" fg:w="15"/><text x="53.2810%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (15 samples, 0.02%)</title><rect x="53.0310%" y="821" width="0.0223%" height="15" fill="rgb(228,71,31)" fg:x="35684" fg:w="15"/><text x="53.2810%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (15 samples, 0.02%)</title><rect x="53.0310%" y="805" width="0.0223%" height="15" fill="rgb(252,184,16)" fg:x="35684" fg:w="15"/><text x="53.2810%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (11 samples, 0.02%)</title><rect x="53.0369%" y="789" width="0.0163%" height="15" fill="rgb(236,169,46)" fg:x="35688" fg:w="11"/><text x="53.2869%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.0369%" y="773" width="0.0163%" height="15" fill="rgb(207,17,47)" fg:x="35688" fg:w="11"/><text x="53.2869%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.0369%" y="757" width="0.0163%" height="15" fill="rgb(206,201,28)" fg:x="35688" fg:w="11"/><text x="53.2869%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="53.0369%" y="741" width="0.0163%" height="15" fill="rgb(224,184,23)" fg:x="35688" fg:w="11"/><text x="53.2869%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="53.0369%" y="725" width="0.0163%" height="15" fill="rgb(208,139,48)" fg:x="35688" fg:w="11"/><text x="53.2869%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="53.0369%" y="709" width="0.0163%" height="15" fill="rgb(208,130,10)" fg:x="35688" fg:w="11"/><text x="53.2869%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (11 samples, 0.02%)</title><rect x="53.0369%" y="693" width="0.0163%" height="15" fill="rgb(211,213,45)" fg:x="35688" fg:w="11"/><text x="53.2869%" y="703.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (9 samples, 0.01%)</title><rect x="53.0532%" y="741" width="0.0134%" height="15" fill="rgb(235,100,30)" fg:x="35699" fg:w="9"/><text x="53.3032%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (9 samples, 0.01%)</title><rect x="53.0532%" y="725" width="0.0134%" height="15" fill="rgb(206,144,31)" fg:x="35699" fg:w="9"/><text x="53.3032%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.01%)</title><rect x="53.0532%" y="709" width="0.0134%" height="15" fill="rgb(224,200,26)" fg:x="35699" fg:w="9"/><text x="53.3032%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="53.0532%" y="693" width="0.0134%" height="15" fill="rgb(247,104,53)" fg:x="35699" fg:w="9"/><text x="53.3032%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="53.0532%" y="677" width="0.0134%" height="15" fill="rgb(220,14,17)" fg:x="35699" fg:w="9"/><text x="53.3032%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="661" width="0.0104%" height="15" fill="rgb(230,140,40)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="645" width="0.0104%" height="15" fill="rgb(229,2,41)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="655.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="629" width="0.0104%" height="15" fill="rgb(232,89,16)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="639.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="613" width="0.0104%" height="15" fill="rgb(247,59,52)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="623.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="597" width="0.0104%" height="15" fill="rgb(226,110,21)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="581" width="0.0104%" height="15" fill="rgb(224,176,43)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="565" width="0.0104%" height="15" fill="rgb(221,73,6)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="549" width="0.0104%" height="15" fill="rgb(232,78,19)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="533" width="0.0104%" height="15" fill="rgb(233,112,48)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="517" width="0.0104%" height="15" fill="rgb(243,131,47)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="501" width="0.0104%" height="15" fill="rgb(226,51,1)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="485" width="0.0104%" height="15" fill="rgb(247,58,7)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.01%)</title><rect x="53.0562%" y="469" width="0.0104%" height="15" fill="rgb(209,7,32)" fg:x="35701" fg:w="7"/><text x="53.3062%" y="479.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="901" width="0.0149%" height="15" fill="rgb(209,39,41)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="885" width="0.0149%" height="15" fill="rgb(226,182,46)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="869" width="0.0149%" height="15" fill="rgb(230,219,10)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="853" width="0.0149%" height="15" fill="rgb(227,175,30)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="837" width="0.0149%" height="15" fill="rgb(217,2,50)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="821" width="0.0149%" height="15" fill="rgb(229,160,0)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="805" width="0.0149%" height="15" fill="rgb(207,78,37)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="789" width="0.0149%" height="15" fill="rgb(225,57,0)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="773" width="0.0149%" height="15" fill="rgb(232,154,2)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="53.0532%" y="757" width="0.0149%" height="15" fill="rgb(241,212,25)" fg:x="35699" fg:w="10"/><text x="53.3032%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (34 samples, 0.05%)</title><rect x="53.0191%" y="981" width="0.0505%" height="15" fill="rgb(226,69,20)" fg:x="35676" fg:w="34"/><text x="53.2691%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (34 samples, 0.05%)</title><rect x="53.0191%" y="965" width="0.0505%" height="15" fill="rgb(247,184,54)" fg:x="35676" fg:w="34"/><text x="53.2691%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.05%)</title><rect x="53.0191%" y="949" width="0.0505%" height="15" fill="rgb(210,145,0)" fg:x="35676" fg:w="34"/><text x="53.2691%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.05%)</title><rect x="53.0191%" y="933" width="0.0505%" height="15" fill="rgb(253,82,12)" fg:x="35676" fg:w="34"/><text x="53.2691%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (34 samples, 0.05%)</title><rect x="53.0191%" y="917" width="0.0505%" height="15" fill="rgb(245,42,11)" fg:x="35676" fg:w="34"/><text x="53.2691%" y="927.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="869" width="0.0312%" height="15" fill="rgb(219,147,32)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="853" width="0.0312%" height="15" fill="rgb(246,12,7)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="837" width="0.0312%" height="15" fill="rgb(243,50,9)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="821" width="0.0312%" height="15" fill="rgb(219,149,6)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="805" width="0.0312%" height="15" fill="rgb(241,51,42)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="789" width="0.0312%" height="15" fill="rgb(226,128,27)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="773" width="0.0312%" height="15" fill="rgb(244,144,4)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="757" width="0.0312%" height="15" fill="rgb(221,4,13)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="767.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="741" width="0.0312%" height="15" fill="rgb(208,170,28)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="751.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (21 samples, 0.03%)</title><rect x="53.1231%" y="725" width="0.0312%" height="15" fill="rgb(226,131,13)" fg:x="35746" fg:w="21"/><text x="53.3731%" y="735.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (13 samples, 0.02%)</title><rect x="53.1350%" y="709" width="0.0193%" height="15" fill="rgb(215,72,41)" fg:x="35754" fg:w="13"/><text x="53.3850%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="53.1350%" y="693" width="0.0193%" height="15" fill="rgb(243,108,20)" fg:x="35754" fg:w="13"/><text x="53.3850%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (13 samples, 0.02%)</title><rect x="53.1350%" y="677" width="0.0193%" height="15" fill="rgb(230,189,17)" fg:x="35754" fg:w="13"/><text x="53.3850%" y="687.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="53.1350%" y="661" width="0.0193%" height="15" fill="rgb(220,50,17)" fg:x="35754" fg:w="13"/><text x="53.3850%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="53.1350%" y="645" width="0.0193%" height="15" fill="rgb(248,152,48)" fg:x="35754" fg:w="13"/><text x="53.3850%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="53.1439%" y="629" width="0.0104%" height="15" fill="rgb(244,91,11)" fg:x="35760" fg:w="7"/><text x="53.3939%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (7 samples, 0.01%)</title><rect x="53.1439%" y="613" width="0.0104%" height="15" fill="rgb(220,157,5)" fg:x="35760" fg:w="7"/><text x="53.3939%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (56 samples, 0.08%)</title><rect x="53.0859%" y="901" width="0.0832%" height="15" fill="rgb(253,137,8)" fg:x="35721" fg:w="56"/><text x="53.3359%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (56 samples, 0.08%)</title><rect x="53.0859%" y="885" width="0.0832%" height="15" fill="rgb(217,137,51)" fg:x="35721" fg:w="56"/><text x="53.3359%" y="895.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="53.1543%" y="869" width="0.0149%" height="15" fill="rgb(218,209,53)" fg:x="35767" fg:w="10"/><text x="53.4043%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (11 samples, 0.02%)</title><rect x="53.1707%" y="741" width="0.0163%" height="15" fill="rgb(249,137,25)" fg:x="35778" fg:w="11"/><text x="53.4207%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (11 samples, 0.02%)</title><rect x="53.1707%" y="725" width="0.0163%" height="15" fill="rgb(239,155,26)" fg:x="35778" fg:w="11"/><text x="53.4207%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (11 samples, 0.02%)</title><rect x="53.1707%" y="709" width="0.0163%" height="15" fill="rgb(227,85,46)" fg:x="35778" fg:w="11"/><text x="53.4207%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.1707%" y="693" width="0.0163%" height="15" fill="rgb(251,107,43)" fg:x="35778" fg:w="11"/><text x="53.4207%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="53.1707%" y="677" width="0.0163%" height="15" fill="rgb(234,170,33)" fg:x="35778" fg:w="11"/><text x="53.4207%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="901" width="0.0282%" height="15" fill="rgb(206,29,35)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="885" width="0.0282%" height="15" fill="rgb(227,138,25)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="869" width="0.0282%" height="15" fill="rgb(249,131,35)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="853" width="0.0282%" height="15" fill="rgb(239,6,40)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="837" width="0.0282%" height="15" fill="rgb(246,136,47)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="821" width="0.0282%" height="15" fill="rgb(253,58,26)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="805" width="0.0282%" height="15" fill="rgb(237,141,10)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="789" width="0.0282%" height="15" fill="rgb(234,156,12)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="773" width="0.0282%" height="15" fill="rgb(243,224,36)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.03%)</title><rect x="53.1692%" y="757" width="0.0282%" height="15" fill="rgb(205,229,51)" fg:x="35777" fg:w="19"/><text x="53.4192%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="53.1870%" y="741" width="0.0104%" height="15" fill="rgb(223,189,4)" fg:x="35789" fg:w="7"/><text x="53.4370%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="53.1870%" y="725" width="0.0104%" height="15" fill="rgb(249,167,54)" fg:x="35789" fg:w="7"/><text x="53.4370%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="53.1870%" y="709" width="0.0104%" height="15" fill="rgb(218,34,28)" fg:x="35789" fg:w="7"/><text x="53.4370%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.1870%" y="693" width="0.0104%" height="15" fill="rgb(232,109,42)" fg:x="35789" fg:w="7"/><text x="53.4370%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="53.1870%" y="677" width="0.0104%" height="15" fill="rgb(248,214,46)" fg:x="35789" fg:w="7"/><text x="53.4370%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (95 samples, 0.14%)</title><rect x="53.0696%" y="981" width="0.1412%" height="15" fill="rgb(244,216,40)" fg:x="35710" fg:w="95"/><text x="53.3196%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (95 samples, 0.14%)</title><rect x="53.0696%" y="965" width="0.1412%" height="15" fill="rgb(231,226,31)" fg:x="35710" fg:w="95"/><text x="53.3196%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (95 samples, 0.14%)</title><rect x="53.0696%" y="949" width="0.1412%" height="15" fill="rgb(238,38,43)" fg:x="35710" fg:w="95"/><text x="53.3196%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (95 samples, 0.14%)</title><rect x="53.0696%" y="933" width="0.1412%" height="15" fill="rgb(208,88,43)" fg:x="35710" fg:w="95"/><text x="53.3196%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (95 samples, 0.14%)</title><rect x="53.0696%" y="917" width="0.1412%" height="15" fill="rgb(205,136,37)" fg:x="35710" fg:w="95"/><text x="53.3196%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="53.1974%" y="901" width="0.0134%" height="15" fill="rgb(237,34,14)" fg:x="35796" fg:w="9"/><text x="53.4474%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (205 samples, 0.30%)</title><rect x="52.9180%" y="1141" width="0.3047%" height="15" fill="rgb(236,193,44)" fg:x="35608" fg:w="205"/><text x="53.1680%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (205 samples, 0.30%)</title><rect x="52.9180%" y="1125" width="0.3047%" height="15" fill="rgb(231,48,10)" fg:x="35608" fg:w="205"/><text x="53.1680%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (205 samples, 0.30%)</title><rect x="52.9180%" y="1109" width="0.3047%" height="15" fill="rgb(213,141,34)" fg:x="35608" fg:w="205"/><text x="53.1680%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (205 samples, 0.30%)</title><rect x="52.9180%" y="1093" width="0.3047%" height="15" fill="rgb(249,130,34)" fg:x="35608" fg:w="205"/><text x="53.1680%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (205 samples, 0.30%)</title><rect x="52.9180%" y="1077" width="0.3047%" height="15" fill="rgb(219,42,41)" fg:x="35608" fg:w="205"/><text x="53.1680%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (203 samples, 0.30%)</title><rect x="52.9210%" y="1061" width="0.3017%" height="15" fill="rgb(224,100,54)" fg:x="35610" fg:w="203"/><text x="53.1710%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (203 samples, 0.30%)</title><rect x="52.9210%" y="1045" width="0.3017%" height="15" fill="rgb(229,200,27)" fg:x="35610" fg:w="203"/><text x="53.1710%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (202 samples, 0.30%)</title><rect x="52.9225%" y="1029" width="0.3002%" height="15" fill="rgb(217,118,10)" fg:x="35611" fg:w="202"/><text x="53.1725%" y="1039.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (202 samples, 0.30%)</title><rect x="52.9225%" y="1013" width="0.3002%" height="15" fill="rgb(206,22,3)" fg:x="35611" fg:w="202"/><text x="53.1725%" y="1023.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (202 samples, 0.30%)</title><rect x="52.9225%" y="997" width="0.3002%" height="15" fill="rgb(232,163,46)" fg:x="35611" fg:w="202"/><text x="53.1725%" y="1007.50"></text></g><g><title>node::BlockManager::SaveBlockToDisk (3,212 samples, 4.77%)</title><rect x="48.5399%" y="1301" width="4.7734%" height="15" fill="rgb(206,95,13)" fg:x="32662" fg:w="3212"/><text x="48.7899%" y="1311.50">node::..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1285" width="0.3953%" height="15" fill="rgb(253,154,18)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1295.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (266 samples, 0.40%)</title><rect x="52.9180%" y="1269" width="0.3953%" height="15" fill="rgb(219,32,23)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1279.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1253" width="0.3953%" height="15" fill="rgb(230,191,45)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1263.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1237" width="0.3953%" height="15" fill="rgb(229,64,36)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1221" width="0.3953%" height="15" fill="rgb(205,129,25)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1231.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1205" width="0.3953%" height="15" fill="rgb(254,112,7)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1215.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1189" width="0.3953%" height="15" fill="rgb(226,53,48)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1199.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1173" width="0.3953%" height="15" fill="rgb(214,153,38)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (266 samples, 0.40%)</title><rect x="52.9180%" y="1157" width="0.3953%" height="15" fill="rgb(243,101,7)" fg:x="35608" fg:w="266"/><text x="53.1680%" y="1167.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (61 samples, 0.09%)</title><rect x="53.2227%" y="1141" width="0.0907%" height="15" fill="rgb(240,140,22)" fg:x="35813" fg:w="61"/><text x="53.4727%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.04%)</title><rect x="53.2687%" y="1125" width="0.0446%" height="15" fill="rgb(235,114,2)" fg:x="35844" fg:w="30"/><text x="53.5187%" y="1135.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (30 samples, 0.04%)</title><rect x="53.2687%" y="1109" width="0.0446%" height="15" fill="rgb(242,59,12)" fg:x="35844" fg:w="30"/><text x="53.5187%" y="1119.50"></text></g><g><title>SizeComputer::write (30 samples, 0.04%)</title><rect x="53.2687%" y="1093" width="0.0446%" height="15" fill="rgb(252,134,9)" fg:x="35844" fg:w="30"/><text x="53.5187%" y="1103.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="53.3148%" y="1301" width="0.0119%" height="15" fill="rgb(236,4,44)" fg:x="35875" fg:w="8"/><text x="53.5648%" y="1311.50"></text></g><g><title>ChainstateManager::AcceptBlock (3,667 samples, 5.45%)</title><rect x="47.8815%" y="1317" width="5.4496%" height="15" fill="rgb(254,172,41)" fg:x="32219" fg:w="3667"/><text x="48.1315%" y="1327.50">Chainst..</text></g><g><title>CScript::GetSigOpCount (11 samples, 0.02%)</title><rect x="53.3371%" y="1301" width="0.0163%" height="15" fill="rgb(244,63,20)" fg:x="35890" fg:w="11"/><text x="53.5871%" y="1311.50"></text></g><g><title>COutPoint::IsNull (7 samples, 0.01%)</title><rect x="53.3534%" y="1285" width="0.0104%" height="15" fill="rgb(250,73,31)" fg:x="35901" fg:w="7"/><text x="53.6034%" y="1295.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (7 samples, 0.01%)</title><rect x="53.3534%" y="1269" width="0.0104%" height="15" fill="rgb(241,38,36)" fg:x="35901" fg:w="7"/><text x="53.6034%" y="1279.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (7 samples, 0.01%)</title><rect x="53.3534%" y="1253" width="0.0104%" height="15" fill="rgb(245,211,2)" fg:x="35901" fg:w="7"/><text x="53.6034%" y="1263.50"></text></g><g><title>CTransaction::IsCoinBase (12 samples, 0.02%)</title><rect x="53.3534%" y="1301" width="0.0178%" height="15" fill="rgb(206,120,28)" fg:x="35901" fg:w="12"/><text x="53.6034%" y="1311.50"></text></g><g><title>CheckBlock (8 samples, 0.01%)</title><rect x="53.3728%" y="1301" width="0.0119%" height="15" fill="rgb(211,59,34)" fg:x="35914" fg:w="8"/><text x="53.6228%" y="1311.50"></text></g><g><title>CheckBlock (7 samples, 0.01%)</title><rect x="53.4055%" y="1269" width="0.0104%" height="15" fill="rgb(233,168,5)" fg:x="35936" fg:w="7"/><text x="53.6555%" y="1279.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="53.4337%" y="1141" width="0.0104%" height="15" fill="rgb(234,33,13)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1125" width="0.0104%" height="15" fill="rgb(231,150,26)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1109" width="0.0104%" height="15" fill="rgb(217,191,4)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1093" width="0.0104%" height="15" fill="rgb(246,198,38)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1077" width="0.0104%" height="15" fill="rgb(245,64,37)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1061" width="0.0104%" height="15" fill="rgb(250,30,36)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1045" width="0.0104%" height="15" fill="rgb(217,86,53)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1055.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1029" width="0.0104%" height="15" fill="rgb(228,157,16)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1039.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="1013" width="0.0104%" height="15" fill="rgb(217,59,31)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1023.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="997" width="0.0104%" height="15" fill="rgb(237,138,41)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="981" width="0.0104%" height="15" fill="rgb(227,91,49)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="991.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (7 samples, 0.01%)</title><rect x="53.4337%" y="965" width="0.0104%" height="15" fill="rgb(247,21,44)" fg:x="35955" fg:w="7"/><text x="53.6837%" y="975.50"></text></g><g><title>CheckTransaction (23 samples, 0.03%)</title><rect x="53.4159%" y="1269" width="0.0342%" height="15" fill="rgb(219,210,51)" fg:x="35943" fg:w="23"/><text x="53.6659%" y="1279.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (11 samples, 0.02%)</title><rect x="53.4337%" y="1253" width="0.0163%" height="15" fill="rgb(209,140,6)" fg:x="35955" fg:w="11"/><text x="53.6837%" y="1263.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (11 samples, 0.02%)</title><rect x="53.4337%" y="1237" width="0.0163%" height="15" fill="rgb(221,188,24)" fg:x="35955" fg:w="11"/><text x="53.6837%" y="1247.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (11 samples, 0.02%)</title><rect x="53.4337%" y="1221" width="0.0163%" height="15" fill="rgb(232,154,20)" fg:x="35955" fg:w="11"/><text x="53.6837%" y="1231.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (11 samples, 0.02%)</title><rect x="53.4337%" y="1205" width="0.0163%" height="15" fill="rgb(244,137,50)" fg:x="35955" fg:w="11"/><text x="53.6837%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="53.4337%" y="1189" width="0.0163%" height="15" fill="rgb(225,185,43)" fg:x="35955" fg:w="11"/><text x="53.6837%" y="1199.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="53.4337%" y="1173" width="0.0163%" height="15" fill="rgb(213,205,38)" fg:x="35955" fg:w="11"/><text x="53.6837%" y="1183.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="53.4337%" y="1157" width="0.0163%" height="15" fill="rgb(236,73,12)" fg:x="35955" fg:w="11"/><text x="53.6837%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_S_left (10 samples, 0.01%)</title><rect x="53.5035%" y="1237" width="0.0149%" height="15" fill="rgb(235,219,13)" fg:x="36002" fg:w="10"/><text x="53.7535%" y="1247.50"></text></g><g><title>__memcmp_evex_movbe (21 samples, 0.03%)</title><rect x="53.5600%" y="1109" width="0.0312%" height="15" fill="rgb(218,59,36)" fg:x="36040" fg:w="21"/><text x="53.8100%" y="1119.50"></text></g><g><title>memcmp@plt (15 samples, 0.02%)</title><rect x="53.5912%" y="1109" width="0.0223%" height="15" fill="rgb(205,110,39)" fg:x="36061" fg:w="15"/><text x="53.8412%" y="1119.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (13 samples, 0.02%)</title><rect x="53.6195%" y="1109" width="0.0193%" height="15" fill="rgb(218,206,42)" fg:x="36080" fg:w="13"/><text x="53.8695%" y="1119.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (113 samples, 0.17%)</title><rect x="53.4723%" y="1253" width="0.1679%" height="15" fill="rgb(248,125,24)" fg:x="35981" fg:w="113"/><text x="53.7223%" y="1263.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (77 samples, 0.11%)</title><rect x="53.5258%" y="1237" width="0.1144%" height="15" fill="rgb(242,28,27)" fg:x="36017" fg:w="77"/><text x="53.7758%" y="1247.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (77 samples, 0.11%)</title><rect x="53.5258%" y="1221" width="0.1144%" height="15" fill="rgb(216,228,15)" fg:x="36017" fg:w="77"/><text x="53.7758%" y="1231.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (73 samples, 0.11%)</title><rect x="53.5318%" y="1205" width="0.1085%" height="15" fill="rgb(235,116,46)" fg:x="36021" fg:w="73"/><text x="53.7818%" y="1215.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (73 samples, 0.11%)</title><rect x="53.5318%" y="1189" width="0.1085%" height="15" fill="rgb(224,18,32)" fg:x="36021" fg:w="73"/><text x="53.7818%" y="1199.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (73 samples, 0.11%)</title><rect x="53.5318%" y="1173" width="0.1085%" height="15" fill="rgb(252,5,12)" fg:x="36021" fg:w="73"/><text x="53.7818%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (65 samples, 0.10%)</title><rect x="53.5437%" y="1157" width="0.0966%" height="15" fill="rgb(251,36,5)" fg:x="36029" fg:w="65"/><text x="53.7937%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (65 samples, 0.10%)</title><rect x="53.5437%" y="1141" width="0.0966%" height="15" fill="rgb(217,53,14)" fg:x="36029" fg:w="65"/><text x="53.7937%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (65 samples, 0.10%)</title><rect x="53.5437%" y="1125" width="0.0966%" height="15" fill="rgb(215,86,45)" fg:x="36029" fg:w="65"/><text x="53.7937%" y="1135.50"></text></g><g><title>__memcmp_evex_movbe (12 samples, 0.02%)</title><rect x="53.6477%" y="1237" width="0.0178%" height="15" fill="rgb(242,169,11)" fg:x="36099" fg:w="12"/><text x="53.8977%" y="1247.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (20 samples, 0.03%)</title><rect x="53.6789%" y="1237" width="0.0297%" height="15" fill="rgb(211,213,45)" fg:x="36120" fg:w="20"/><text x="53.9289%" y="1247.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (20 samples, 0.03%)</title><rect x="53.6789%" y="1221" width="0.0297%" height="15" fill="rgb(205,88,11)" fg:x="36120" fg:w="20"/><text x="53.9289%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (20 samples, 0.03%)</title><rect x="53.6789%" y="1205" width="0.0297%" height="15" fill="rgb(252,69,26)" fg:x="36120" fg:w="20"/><text x="53.9289%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (20 samples, 0.03%)</title><rect x="53.6789%" y="1189" width="0.0297%" height="15" fill="rgb(246,123,37)" fg:x="36120" fg:w="20"/><text x="53.9289%" y="1199.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (20 samples, 0.03%)</title><rect x="53.6789%" y="1173" width="0.0297%" height="15" fill="rgb(212,205,5)" fg:x="36120" fg:w="20"/><text x="53.9289%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (20 samples, 0.03%)</title><rect x="53.6789%" y="1157" width="0.0297%" height="15" fill="rgb(253,148,0)" fg:x="36120" fg:w="20"/><text x="53.9289%" y="1167.50"></text></g><g><title>operator new (18 samples, 0.03%)</title><rect x="53.6819%" y="1141" width="0.0268%" height="15" fill="rgb(239,22,4)" fg:x="36122" fg:w="18"/><text x="53.9319%" y="1151.50"></text></g><g><title>malloc (17 samples, 0.03%)</title><rect x="53.6834%" y="1125" width="0.0253%" height="15" fill="rgb(226,26,53)" fg:x="36123" fg:w="17"/><text x="53.9334%" y="1135.50"></text></g><g><title>_int_malloc (15 samples, 0.02%)</title><rect x="53.6863%" y="1109" width="0.0223%" height="15" fill="rgb(225,229,45)" fg:x="36125" fg:w="15"/><text x="53.9363%" y="1119.50"></text></g><g><title>__memcmp_evex_movbe (7 samples, 0.01%)</title><rect x="53.7131%" y="1109" width="0.0104%" height="15" fill="rgb(220,60,37)" fg:x="36143" fg:w="7"/><text x="53.9631%" y="1119.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (177 samples, 0.26%)</title><rect x="53.4649%" y="1269" width="0.2630%" height="15" fill="rgb(217,180,35)" fg:x="35976" fg:w="177"/><text x="53.7149%" y="1279.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (59 samples, 0.09%)</title><rect x="53.6403%" y="1253" width="0.0877%" height="15" fill="rgb(229,7,53)" fg:x="36094" fg:w="59"/><text x="53.8903%" y="1263.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (13 samples, 0.02%)</title><rect x="53.7086%" y="1237" width="0.0193%" height="15" fill="rgb(254,137,3)" fg:x="36140" fg:w="13"/><text x="53.9586%" y="1247.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (13 samples, 0.02%)</title><rect x="53.7086%" y="1221" width="0.0193%" height="15" fill="rgb(215,140,41)" fg:x="36140" fg:w="13"/><text x="53.9586%" y="1231.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (13 samples, 0.02%)</title><rect x="53.7086%" y="1205" width="0.0193%" height="15" fill="rgb(250,80,15)" fg:x="36140" fg:w="13"/><text x="53.9586%" y="1215.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (13 samples, 0.02%)</title><rect x="53.7086%" y="1189" width="0.0193%" height="15" fill="rgb(252,191,6)" fg:x="36140" fg:w="13"/><text x="53.9586%" y="1199.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (13 samples, 0.02%)</title><rect x="53.7086%" y="1173" width="0.0193%" height="15" fill="rgb(246,217,18)" fg:x="36140" fg:w="13"/><text x="53.9586%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (11 samples, 0.02%)</title><rect x="53.7116%" y="1157" width="0.0163%" height="15" fill="rgb(223,93,7)" fg:x="36142" fg:w="11"/><text x="53.9616%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (11 samples, 0.02%)</title><rect x="53.7116%" y="1141" width="0.0163%" height="15" fill="rgb(225,55,52)" fg:x="36142" fg:w="11"/><text x="53.9616%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (11 samples, 0.02%)</title><rect x="53.7116%" y="1125" width="0.0163%" height="15" fill="rgb(240,31,24)" fg:x="36142" fg:w="11"/><text x="53.9616%" y="1135.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (222 samples, 0.33%)</title><rect x="53.4040%" y="1285" width="0.3299%" height="15" fill="rgb(205,56,52)" fg:x="35935" fg:w="222"/><text x="53.6540%" y="1295.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="53.7473%" y="1125" width="0.0104%" height="15" fill="rgb(246,146,12)" fg:x="36166" fg:w="7"/><text x="53.9973%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (7 samples, 0.01%)</title><rect x="53.7473%" y="1109" width="0.0104%" height="15" fill="rgb(239,84,36)" fg:x="36166" fg:w="7"/><text x="53.9973%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="53.7473%" y="1093" width="0.0104%" height="15" fill="rgb(207,41,40)" fg:x="36166" fg:w="7"/><text x="53.9973%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="53.7473%" y="1077" width="0.0104%" height="15" fill="rgb(241,179,25)" fg:x="36166" fg:w="7"/><text x="53.9973%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="53.7473%" y="1061" width="0.0104%" height="15" fill="rgb(210,0,34)" fg:x="36166" fg:w="7"/><text x="53.9973%" y="1071.50"></text></g><g><title>CheckTransaction (18 samples, 0.03%)</title><rect x="53.7354%" y="1253" width="0.0268%" height="15" fill="rgb(225,217,29)" fg:x="36158" fg:w="18"/><text x="53.9854%" y="1263.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (10 samples, 0.01%)</title><rect x="53.7473%" y="1237" width="0.0149%" height="15" fill="rgb(216,191,38)" fg:x="36166" fg:w="10"/><text x="53.9973%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (10 samples, 0.01%)</title><rect x="53.7473%" y="1221" width="0.0149%" height="15" fill="rgb(232,140,52)" fg:x="36166" fg:w="10"/><text x="53.9973%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (10 samples, 0.01%)</title><rect x="53.7473%" y="1205" width="0.0149%" height="15" fill="rgb(223,158,51)" fg:x="36166" fg:w="10"/><text x="53.9973%" y="1215.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (10 samples, 0.01%)</title><rect x="53.7473%" y="1189" width="0.0149%" height="15" fill="rgb(235,29,51)" fg:x="36166" fg:w="10"/><text x="53.9973%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="53.7473%" y="1173" width="0.0149%" height="15" fill="rgb(215,181,18)" fg:x="36166" fg:w="10"/><text x="53.9973%" y="1183.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="53.7473%" y="1157" width="0.0149%" height="15" fill="rgb(227,125,34)" fg:x="36166" fg:w="10"/><text x="53.9973%" y="1167.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="53.7473%" y="1141" width="0.0149%" height="15" fill="rgb(230,197,49)" fg:x="36166" fg:w="10"/><text x="53.9973%" y="1151.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (13 samples, 0.02%)</title><rect x="53.7815%" y="1221" width="0.0193%" height="15" fill="rgb(239,141,16)" fg:x="36189" fg:w="13"/><text x="54.0315%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (8 samples, 0.01%)</title><rect x="53.7889%" y="1205" width="0.0119%" height="15" fill="rgb(225,105,43)" fg:x="36194" fg:w="8"/><text x="54.0389%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (18 samples, 0.03%)</title><rect x="53.7755%" y="1237" width="0.0268%" height="15" fill="rgb(214,131,14)" fg:x="36185" fg:w="18"/><text x="54.0255%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (26 samples, 0.04%)</title><rect x="53.7696%" y="1253" width="0.0386%" height="15" fill="rgb(229,177,11)" fg:x="36181" fg:w="26"/><text x="54.0196%" y="1263.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (55 samples, 0.08%)</title><rect x="53.7339%" y="1285" width="0.0817%" height="15" fill="rgb(231,180,14)" fg:x="36157" fg:w="55"/><text x="53.9839%" y="1295.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (55 samples, 0.08%)</title><rect x="53.7339%" y="1269" width="0.0817%" height="15" fill="rgb(232,88,2)" fg:x="36157" fg:w="55"/><text x="53.9839%" y="1279.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (10 samples, 0.01%)</title><rect x="53.8156%" y="1173" width="0.0149%" height="15" fill="rgb(205,220,8)" fg:x="36212" fg:w="10"/><text x="54.0656%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (10 samples, 0.01%)</title><rect x="53.8156%" y="1157" width="0.0149%" height="15" fill="rgb(225,23,53)" fg:x="36212" fg:w="10"/><text x="54.0656%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.01%)</title><rect x="53.8156%" y="1141" width="0.0149%" height="15" fill="rgb(213,62,29)" fg:x="36212" fg:w="10"/><text x="54.0656%" y="1151.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="53.8156%" y="1125" width="0.0149%" height="15" fill="rgb(227,75,7)" fg:x="36212" fg:w="10"/><text x="54.0656%" y="1135.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="53.8156%" y="1109" width="0.0149%" height="15" fill="rgb(207,105,14)" fg:x="36212" fg:w="10"/><text x="54.0656%" y="1119.50"></text></g><g><title>CheckTransaction (301 samples, 0.45%)</title><rect x="53.3861%" y="1301" width="0.4473%" height="15" fill="rgb(245,62,29)" fg:x="35923" fg:w="301"/><text x="53.6361%" y="1311.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (12 samples, 0.02%)</title><rect x="53.8156%" y="1285" width="0.0178%" height="15" fill="rgb(236,202,4)" fg:x="36212" fg:w="12"/><text x="54.0656%" y="1295.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (12 samples, 0.02%)</title><rect x="53.8156%" y="1269" width="0.0178%" height="15" fill="rgb(250,67,1)" fg:x="36212" fg:w="12"/><text x="54.0656%" y="1279.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (12 samples, 0.02%)</title><rect x="53.8156%" y="1253" width="0.0178%" height="15" fill="rgb(253,115,44)" fg:x="36212" fg:w="12"/><text x="54.0656%" y="1263.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (12 samples, 0.02%)</title><rect x="53.8156%" y="1237" width="0.0178%" height="15" fill="rgb(251,139,18)" fg:x="36212" fg:w="12"/><text x="54.0656%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (12 samples, 0.02%)</title><rect x="53.8156%" y="1221" width="0.0178%" height="15" fill="rgb(218,22,32)" fg:x="36212" fg:w="12"/><text x="54.0656%" y="1231.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="53.8156%" y="1205" width="0.0178%" height="15" fill="rgb(243,53,5)" fg:x="36212" fg:w="12"/><text x="54.0656%" y="1215.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (12 samples, 0.02%)</title><rect x="53.8156%" y="1189" width="0.0178%" height="15" fill="rgb(227,56,16)" fg:x="36212" fg:w="12"/><text x="54.0656%" y="1199.50"></text></g><g><title>CScript::GetOp (10 samples, 0.01%)</title><rect x="53.9613%" y="1237" width="0.0149%" height="15" fill="rgb(245,53,0)" fg:x="36310" fg:w="10"/><text x="54.2113%" y="1247.50"></text></g><g><title>CScript::GetSigOpCount (63 samples, 0.09%)</title><rect x="53.9003%" y="1253" width="0.0936%" height="15" fill="rgb(216,170,35)" fg:x="36269" fg:w="63"/><text x="54.1503%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (9 samples, 0.01%)</title><rect x="53.9806%" y="1237" width="0.0134%" height="15" fill="rgb(211,200,8)" fg:x="36323" fg:w="9"/><text x="54.2306%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (8 samples, 0.01%)</title><rect x="53.9821%" y="1221" width="0.0119%" height="15" fill="rgb(228,204,44)" fg:x="36324" fg:w="8"/><text x="54.2321%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (17 samples, 0.03%)</title><rect x="53.9955%" y="1253" width="0.0253%" height="15" fill="rgb(214,121,17)" fg:x="36333" fg:w="17"/><text x="54.2455%" y="1263.50"></text></g><g><title>CScript::GetOp (171 samples, 0.25%)</title><rect x="53.8825%" y="1269" width="0.2541%" height="15" fill="rgb(233,64,38)" fg:x="36257" fg:w="171"/><text x="54.1325%" y="1279.50"></text></g><g><title>GetScriptOp (78 samples, 0.12%)</title><rect x="54.0207%" y="1253" width="0.1159%" height="15" fill="rgb(253,54,19)" fg:x="36350" fg:w="78"/><text x="54.2707%" y="1263.50"></text></g><g><title>CScript::GetSigOpCount (210 samples, 0.31%)</title><rect x="53.8379%" y="1285" width="0.3121%" height="15" fill="rgb(253,94,18)" fg:x="36227" fg:w="210"/><text x="54.0879%" y="1295.50"></text></g><g><title>GetLegacySigOpCount (27 samples, 0.04%)</title><rect x="54.1530%" y="1285" width="0.0401%" height="15" fill="rgb(227,57,52)" fg:x="36439" fg:w="27"/><text x="54.4030%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (9 samples, 0.01%)</title><rect x="54.3298%" y="1269" width="0.0134%" height="15" fill="rgb(230,228,50)" fg:x="36558" fg:w="9"/><text x="54.5798%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (9 samples, 0.01%)</title><rect x="54.3298%" y="1253" width="0.0134%" height="15" fill="rgb(217,205,27)" fg:x="36558" fg:w="9"/><text x="54.5798%" y="1263.50"></text></g><g><title>GetScriptOp (104 samples, 0.15%)</title><rect x="54.1931%" y="1285" width="0.1546%" height="15" fill="rgb(252,71,50)" fg:x="36466" fg:w="104"/><text x="54.4431%" y="1295.50"></text></g><g><title>GetLegacySigOpCount (347 samples, 0.52%)</title><rect x="53.8335%" y="1301" width="0.5157%" height="15" fill="rgb(209,86,4)" fg:x="36224" fg:w="347"/><text x="54.0835%" y="1311.50"></text></g><g><title>GetScriptOp (34 samples, 0.05%)</title><rect x="54.3492%" y="1301" width="0.0505%" height="15" fill="rgb(229,94,0)" fg:x="36571" fg:w="34"/><text x="54.5992%" y="1311.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (14 samples, 0.02%)</title><rect x="54.4116%" y="1301" width="0.0208%" height="15" fill="rgb(252,223,21)" fg:x="36613" fg:w="14"/><text x="54.6616%" y="1311.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (15 samples, 0.02%)</title><rect x="54.4383%" y="1301" width="0.0223%" height="15" fill="rgb(230,210,4)" fg:x="36631" fg:w="15"/><text x="54.6883%" y="1311.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="917" width="0.0163%" height="15" fill="rgb(240,149,38)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="901" width="0.0163%" height="15" fill="rgb(254,105,20)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="911.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="885" width="0.0163%" height="15" fill="rgb(253,87,46)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="895.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="869" width="0.0163%" height="15" fill="rgb(253,116,33)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="879.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="853" width="0.0163%" height="15" fill="rgb(229,198,5)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="837" width="0.0163%" height="15" fill="rgb(242,38,37)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="821" width="0.0163%" height="15" fill="rgb(242,69,53)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="805" width="0.0163%" height="15" fill="rgb(249,80,16)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="815.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="789" width="0.0163%" height="15" fill="rgb(206,128,11)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="799.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="773" width="0.0163%" height="15" fill="rgb(212,35,20)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="783.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="757" width="0.0163%" height="15" fill="rgb(236,79,13)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="741" width="0.0163%" height="15" fill="rgb(233,123,3)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="54.4992%" y="725" width="0.0163%" height="15" fill="rgb(214,93,52)" fg:x="36672" fg:w="11"/><text x="54.7492%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (9 samples, 0.01%)</title><rect x="54.5022%" y="709" width="0.0134%" height="15" fill="rgb(251,37,40)" fg:x="36674" fg:w="9"/><text x="54.7522%" y="719.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="54.5156%" y="917" width="0.0104%" height="15" fill="rgb(227,80,54)" fg:x="36683" fg:w="7"/><text x="54.7656%" y="927.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (37 samples, 0.05%)</title><rect x="54.4844%" y="997" width="0.0550%" height="15" fill="rgb(254,48,11)" fg:x="36662" fg:w="37"/><text x="54.7344%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (37 samples, 0.05%)</title><rect x="54.4844%" y="981" width="0.0550%" height="15" fill="rgb(235,193,26)" fg:x="36662" fg:w="37"/><text x="54.7344%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (37 samples, 0.05%)</title><rect x="54.4844%" y="965" width="0.0550%" height="15" fill="rgb(229,99,21)" fg:x="36662" fg:w="37"/><text x="54.7344%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.05%)</title><rect x="54.4844%" y="949" width="0.0550%" height="15" fill="rgb(211,140,41)" fg:x="36662" fg:w="37"/><text x="54.7344%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (36 samples, 0.05%)</title><rect x="54.4859%" y="933" width="0.0535%" height="15" fill="rgb(240,227,30)" fg:x="36663" fg:w="36"/><text x="54.7359%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="54.5260%" y="917" width="0.0134%" height="15" fill="rgb(215,224,45)" fg:x="36690" fg:w="9"/><text x="54.7760%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (7 samples, 0.01%)</title><rect x="54.5661%" y="693" width="0.0104%" height="15" fill="rgb(206,123,31)" fg:x="36717" fg:w="7"/><text x="54.8161%" y="703.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (18 samples, 0.03%)</title><rect x="54.5542%" y="917" width="0.0268%" height="15" fill="rgb(210,138,16)" fg:x="36709" fg:w="18"/><text x="54.8042%" y="927.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (18 samples, 0.03%)</title><rect x="54.5542%" y="901" width="0.0268%" height="15" fill="rgb(228,57,28)" fg:x="36709" fg:w="18"/><text x="54.8042%" y="911.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="54.5542%" y="885" width="0.0268%" height="15" fill="rgb(242,170,10)" fg:x="36709" fg:w="18"/><text x="54.8042%" y="895.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.03%)</title><rect x="54.5542%" y="869" width="0.0268%" height="15" fill="rgb(228,214,39)" fg:x="36709" fg:w="18"/><text x="54.8042%" y="879.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (18 samples, 0.03%)</title><rect x="54.5542%" y="853" width="0.0268%" height="15" fill="rgb(218,179,33)" fg:x="36709" fg:w="18"/><text x="54.8042%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (18 samples, 0.03%)</title><rect x="54.5542%" y="837" width="0.0268%" height="15" fill="rgb(235,193,39)" fg:x="36709" fg:w="18"/><text x="54.8042%" y="847.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (18 samples, 0.03%)</title><rect x="54.5542%" y="821" width="0.0268%" height="15" fill="rgb(219,221,36)" fg:x="36709" fg:w="18"/><text x="54.8042%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (12 samples, 0.02%)</title><rect x="54.5632%" y="805" width="0.0178%" height="15" fill="rgb(248,218,19)" fg:x="36715" fg:w="12"/><text x="54.8132%" y="815.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="54.5632%" y="789" width="0.0178%" height="15" fill="rgb(205,50,9)" fg:x="36715" fg:w="12"/><text x="54.8132%" y="799.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="54.5632%" y="773" width="0.0178%" height="15" fill="rgb(238,81,28)" fg:x="36715" fg:w="12"/><text x="54.8132%" y="783.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="54.5632%" y="757" width="0.0178%" height="15" fill="rgb(235,110,19)" fg:x="36715" fg:w="12"/><text x="54.8132%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="54.5632%" y="741" width="0.0178%" height="15" fill="rgb(214,7,14)" fg:x="36715" fg:w="12"/><text x="54.8132%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.02%)</title><rect x="54.5632%" y="725" width="0.0178%" height="15" fill="rgb(211,77,3)" fg:x="36715" fg:w="12"/><text x="54.8132%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (12 samples, 0.02%)</title><rect x="54.5632%" y="709" width="0.0178%" height="15" fill="rgb(229,5,9)" fg:x="36715" fg:w="12"/><text x="54.8132%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (33 samples, 0.05%)</title><rect x="54.5394%" y="997" width="0.0490%" height="15" fill="rgb(225,90,11)" fg:x="36699" fg:w="33"/><text x="54.7894%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (33 samples, 0.05%)</title><rect x="54.5394%" y="981" width="0.0490%" height="15" fill="rgb(242,56,8)" fg:x="36699" fg:w="33"/><text x="54.7894%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (33 samples, 0.05%)</title><rect x="54.5394%" y="965" width="0.0490%" height="15" fill="rgb(249,212,39)" fg:x="36699" fg:w="33"/><text x="54.7894%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.05%)</title><rect x="54.5394%" y="949" width="0.0490%" height="15" fill="rgb(236,90,9)" fg:x="36699" fg:w="33"/><text x="54.7894%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (31 samples, 0.05%)</title><rect x="54.5423%" y="933" width="0.0461%" height="15" fill="rgb(206,88,35)" fg:x="36701" fg:w="31"/><text x="54.7923%" y="943.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (88 samples, 0.13%)</title><rect x="54.4651%" y="1013" width="0.1308%" height="15" fill="rgb(205,126,30)" fg:x="36649" fg:w="88"/><text x="54.7151%" y="1023.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1301" width="0.1768%" height="15" fill="rgb(230,176,12)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1311.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (119 samples, 0.18%)</title><rect x="54.4606%" y="1285" width="0.1768%" height="15" fill="rgb(243,19,9)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1295.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1269" width="0.1768%" height="15" fill="rgb(245,171,17)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1279.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1253" width="0.1768%" height="15" fill="rgb(227,52,21)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1237" width="0.1768%" height="15" fill="rgb(238,69,14)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1247.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1221" width="0.1768%" height="15" fill="rgb(241,156,39)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1231.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1205" width="0.1768%" height="15" fill="rgb(212,227,28)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1215.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1189" width="0.1768%" height="15" fill="rgb(209,118,27)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1173" width="0.1768%" height="15" fill="rgb(226,102,5)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1183.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1157" width="0.1768%" height="15" fill="rgb(223,34,3)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1141" width="0.1768%" height="15" fill="rgb(221,81,38)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1125" width="0.1768%" height="15" fill="rgb(236,219,28)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1109" width="0.1768%" height="15" fill="rgb(213,200,14)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1093" width="0.1768%" height="15" fill="rgb(240,33,19)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1103.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1077" width="0.1768%" height="15" fill="rgb(233,113,27)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1061" width="0.1768%" height="15" fill="rgb(220,221,18)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1045" width="0.1768%" height="15" fill="rgb(238,92,8)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1055.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (119 samples, 0.18%)</title><rect x="54.4606%" y="1029" width="0.1768%" height="15" fill="rgb(222,164,16)" fg:x="36646" fg:w="119"/><text x="54.7106%" y="1039.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.04%)</title><rect x="54.5958%" y="1013" width="0.0416%" height="15" fill="rgb(241,119,3)" fg:x="36737" fg:w="28"/><text x="54.8458%" y="1023.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="54.6196%" y="997" width="0.0178%" height="15" fill="rgb(241,44,8)" fg:x="36753" fg:w="12"/><text x="54.8696%" y="1007.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (12 samples, 0.02%)</title><rect x="54.6196%" y="981" width="0.0178%" height="15" fill="rgb(230,36,40)" fg:x="36753" fg:w="12"/><text x="54.8696%" y="991.50"></text></g><g><title>SizeComputer::write (12 samples, 0.02%)</title><rect x="54.6196%" y="965" width="0.0178%" height="15" fill="rgb(243,16,36)" fg:x="36753" fg:w="12"/><text x="54.8696%" y="975.50"></text></g><g><title>CheckBlock (882 samples, 1.31%)</title><rect x="53.3326%" y="1317" width="1.3108%" height="15" fill="rgb(231,4,26)" fg:x="35887" fg:w="882"/><text x="53.5826%" y="1327.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (26,747 samples, 39.75%)</title><rect x="14.9088%" y="1333" width="39.7494%" height="15" fill="rgb(240,9,31)" fg:x="10032" fg:w="26747"/><text x="15.1588%" y="1343.50">ChainstateManager::ProcessNewBlock</text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (7 samples, 0.01%)</title><rect x="54.6583%" y="1333" width="0.0104%" height="15" fill="rgb(207,173,15)" fg:x="36779" fg:w="7"/><text x="54.9083%" y="1343.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (7 samples, 0.01%)</title><rect x="54.6583%" y="1317" width="0.0104%" height="15" fill="rgb(224,192,53)" fg:x="36779" fg:w="7"/><text x="54.9083%" y="1327.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (7 samples, 0.01%)</title><rect x="54.6583%" y="1301" width="0.0104%" height="15" fill="rgb(223,67,28)" fg:x="36779" fg:w="7"/><text x="54.9083%" y="1311.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::reserve (24 samples, 0.04%)</title><rect x="54.6791%" y="1125" width="0.0357%" height="15" fill="rgb(211,20,47)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (24 samples, 0.04%)</title><rect x="54.6791%" y="1109" width="0.0357%" height="15" fill="rgb(240,228,2)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::_M_allocate (24 samples, 0.04%)</title><rect x="54.6791%" y="1093" width="0.0357%" height="15" fill="rgb(248,151,12)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::allocate (24 samples, 0.04%)</title><rect x="54.6791%" y="1077" width="0.0357%" height="15" fill="rgb(244,8,39)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1087.50"></text></g><g><title>std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (24 samples, 0.04%)</title><rect x="54.6791%" y="1061" width="0.0357%" height="15" fill="rgb(222,26,8)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;::allocate (24 samples, 0.04%)</title><rect x="54.6791%" y="1045" width="0.0357%" height="15" fill="rgb(213,106,44)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1055.50"></text></g><g><title>operator new (24 samples, 0.04%)</title><rect x="54.6791%" y="1029" width="0.0357%" height="15" fill="rgb(214,129,20)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1039.50"></text></g><g><title>malloc (24 samples, 0.04%)</title><rect x="54.6791%" y="1013" width="0.0357%" height="15" fill="rgb(212,32,13)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1023.50"></text></g><g><title>_int_malloc (24 samples, 0.04%)</title><rect x="54.6791%" y="997" width="0.0357%" height="15" fill="rgb(208,168,33)" fg:x="36793" fg:w="24"/><text x="54.9291%" y="1007.50"></text></g><g><title>malloc_consolidate (18 samples, 0.03%)</title><rect x="54.6880%" y="981" width="0.0268%" height="15" fill="rgb(231,207,8)" fg:x="36799" fg:w="18"/><text x="54.9380%" y="991.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="54.7162%" y="1109" width="0.0104%" height="15" fill="rgb(235,219,23)" fg:x="36818" fg:w="7"/><text x="54.9662%" y="1119.50"></text></g><g><title>_mm_add_epi32 (9 samples, 0.01%)</title><rect x="54.7281%" y="1077" width="0.0134%" height="15" fill="rgb(226,216,26)" fg:x="36826" fg:w="9"/><text x="54.9781%" y="1087.50"></text></g><g><title>QuadRound (16 samples, 0.02%)</title><rect x="54.7281%" y="1093" width="0.0238%" height="15" fill="rgb(239,137,16)" fg:x="36826" fg:w="16"/><text x="54.9781%" y="1103.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="54.7578%" y="1061" width="0.0104%" height="15" fill="rgb(207,12,36)" fg:x="36846" fg:w="7"/><text x="55.0078%" y="1071.50"></text></g><g><title>ShiftMessageB (17 samples, 0.03%)</title><rect x="54.7519%" y="1093" width="0.0253%" height="15" fill="rgb(210,214,24)" fg:x="36842" fg:w="17"/><text x="55.0019%" y="1103.50"></text></g><g><title>ShiftMessageC (13 samples, 0.02%)</title><rect x="54.7578%" y="1077" width="0.0193%" height="15" fill="rgb(206,56,30)" fg:x="36846" fg:w="13"/><text x="55.0078%" y="1087.50"></text></g><g><title>sha256_x86_shani::Transform (38 samples, 0.06%)</title><rect x="54.7266%" y="1109" width="0.0565%" height="15" fill="rgb(228,143,26)" fg:x="36825" fg:w="38"/><text x="54.9766%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (13 samples, 0.02%)</title><rect x="54.7831%" y="1109" width="0.0193%" height="15" fill="rgb(216,218,46)" fg:x="36863" fg:w="13"/><text x="55.0331%" y="1119.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.03%)</title><rect x="54.8024%" y="1109" width="0.0253%" height="15" fill="rgb(206,6,19)" fg:x="36876" fg:w="17"/><text x="55.0524%" y="1119.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (19 samples, 0.03%)</title><rect x="54.8277%" y="1109" width="0.0282%" height="15" fill="rgb(239,177,51)" fg:x="36893" fg:w="19"/><text x="55.0777%" y="1119.50"></text></g><g><title>DataStream::read (22 samples, 0.03%)</title><rect x="54.8708%" y="853" width="0.0327%" height="15" fill="rgb(216,55,25)" fg:x="36922" fg:w="22"/><text x="55.1208%" y="863.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.03%)</title><rect x="54.9109%" y="853" width="0.0297%" height="15" fill="rgb(231,163,29)" fg:x="36949" fg:w="20"/><text x="55.1609%" y="863.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="54.9302%" y="837" width="0.0104%" height="15" fill="rgb(232,149,50)" fg:x="36962" fg:w="7"/><text x="55.1802%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (7 samples, 0.01%)</title><rect x="54.9302%" y="821" width="0.0104%" height="15" fill="rgb(223,142,48)" fg:x="36962" fg:w="7"/><text x="55.1802%" y="831.50"></text></g><g><title>DataStream::read (7 samples, 0.01%)</title><rect x="54.9302%" y="805" width="0.0104%" height="15" fill="rgb(245,83,23)" fg:x="36962" fg:w="7"/><text x="55.1802%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (11 samples, 0.02%)</title><rect x="54.9406%" y="853" width="0.0163%" height="15" fill="rgb(224,63,2)" fg:x="36969" fg:w="11"/><text x="55.1906%" y="863.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (7 samples, 0.01%)</title><rect x="54.9837%" y="661" width="0.0104%" height="15" fill="rgb(218,65,53)" fg:x="36998" fg:w="7"/><text x="55.2337%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="54.9837%" y="645" width="0.0104%" height="15" fill="rgb(221,84,29)" fg:x="36998" fg:w="7"/><text x="55.2337%" y="655.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="54.9837%" y="629" width="0.0104%" height="15" fill="rgb(234,0,32)" fg:x="36998" fg:w="7"/><text x="55.2337%" y="639.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (7 samples, 0.01%)</title><rect x="54.9837%" y="613" width="0.0104%" height="15" fill="rgb(206,20,16)" fg:x="36998" fg:w="7"/><text x="55.2337%" y="623.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.03%)</title><rect x="54.9704%" y="709" width="0.0253%" height="15" fill="rgb(244,172,18)" fg:x="36989" fg:w="17"/><text x="55.2204%" y="719.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="54.9718%" y="693" width="0.0238%" height="15" fill="rgb(254,133,1)" fg:x="36990" fg:w="16"/><text x="55.2218%" y="703.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (14 samples, 0.02%)</title><rect x="54.9748%" y="677" width="0.0208%" height="15" fill="rgb(222,206,41)" fg:x="36992" fg:w="14"/><text x="55.2248%" y="687.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.04%)</title><rect x="54.9629%" y="837" width="0.0416%" height="15" fill="rgb(212,3,42)" fg:x="36984" fg:w="28"/><text x="55.2129%" y="847.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.04%)</title><rect x="54.9629%" y="821" width="0.0416%" height="15" fill="rgb(241,11,4)" fg:x="36984" fg:w="28"/><text x="55.2129%" y="831.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.04%)</title><rect x="54.9629%" y="805" width="0.0416%" height="15" fill="rgb(205,19,26)" fg:x="36984" fg:w="28"/><text x="55.2129%" y="815.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.04%)</title><rect x="54.9629%" y="789" width="0.0416%" height="15" fill="rgb(210,179,32)" fg:x="36984" fg:w="28"/><text x="55.2129%" y="799.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (28 samples, 0.04%)</title><rect x="54.9629%" y="773" width="0.0416%" height="15" fill="rgb(227,116,49)" fg:x="36984" fg:w="28"/><text x="55.2129%" y="783.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (23 samples, 0.03%)</title><rect x="54.9704%" y="757" width="0.0342%" height="15" fill="rgb(211,146,6)" fg:x="36989" fg:w="23"/><text x="55.2204%" y="767.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (23 samples, 0.03%)</title><rect x="54.9704%" y="741" width="0.0342%" height="15" fill="rgb(219,44,39)" fg:x="36989" fg:w="23"/><text x="55.2204%" y="751.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (23 samples, 0.03%)</title><rect x="54.9704%" y="725" width="0.0342%" height="15" fill="rgb(234,128,11)" fg:x="36989" fg:w="23"/><text x="55.2204%" y="735.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (38 samples, 0.06%)</title><rect x="54.9570%" y="853" width="0.0565%" height="15" fill="rgb(220,183,53)" fg:x="36980" fg:w="38"/><text x="55.2070%" y="863.50"></text></g><g><title>DataStream::read (16 samples, 0.02%)</title><rect x="55.0313%" y="837" width="0.0238%" height="15" fill="rgb(213,219,32)" fg:x="37030" fg:w="16"/><text x="55.2813%" y="847.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (9 samples, 0.01%)</title><rect x="55.0417%" y="821" width="0.0134%" height="15" fill="rgb(232,156,16)" fg:x="37037" fg:w="9"/><text x="55.2917%" y="831.50"></text></g><g><title>__lll_lock_wait_private (8 samples, 0.01%)</title><rect x="55.0729%" y="709" width="0.0119%" height="15" fill="rgb(246,135,34)" fg:x="37058" fg:w="8"/><text x="55.3229%" y="719.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="55.0729%" y="693" width="0.0119%" height="15" fill="rgb(241,99,0)" fg:x="37058" fg:w="8"/><text x="55.3229%" y="703.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="55.0729%" y="677" width="0.0119%" height="15" fill="rgb(222,103,45)" fg:x="37058" fg:w="8"/><text x="55.3229%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="55.0729%" y="661" width="0.0119%" height="15" fill="rgb(212,57,4)" fg:x="37058" fg:w="8"/><text x="55.3229%" y="671.50"></text></g><g><title>__lll_lock_wake_private (118 samples, 0.18%)</title><rect x="55.0848%" y="709" width="0.1754%" height="15" fill="rgb(215,68,47)" fg:x="37066" fg:w="118"/><text x="55.3348%" y="719.50"></text></g><g><title>[unknown] (118 samples, 0.18%)</title><rect x="55.0848%" y="693" width="0.1754%" height="15" fill="rgb(230,84,2)" fg:x="37066" fg:w="118"/><text x="55.3348%" y="703.50"></text></g><g><title>[unknown] (116 samples, 0.17%)</title><rect x="55.0878%" y="677" width="0.1724%" height="15" fill="rgb(220,102,14)" fg:x="37068" fg:w="116"/><text x="55.3378%" y="687.50"></text></g><g><title>[unknown] (116 samples, 0.17%)</title><rect x="55.0878%" y="661" width="0.1724%" height="15" fill="rgb(240,10,32)" fg:x="37068" fg:w="116"/><text x="55.3378%" y="671.50"></text></g><g><title>[unknown] (105 samples, 0.16%)</title><rect x="55.1041%" y="645" width="0.1560%" height="15" fill="rgb(215,47,27)" fg:x="37079" fg:w="105"/><text x="55.3541%" y="655.50"></text></g><g><title>[unknown] (102 samples, 0.15%)</title><rect x="55.1086%" y="629" width="0.1516%" height="15" fill="rgb(233,188,43)" fg:x="37082" fg:w="102"/><text x="55.3586%" y="639.50"></text></g><g><title>[unknown] (82 samples, 0.12%)</title><rect x="55.1383%" y="613" width="0.1219%" height="15" fill="rgb(253,190,1)" fg:x="37102" fg:w="82"/><text x="55.3883%" y="623.50"></text></g><g><title>[unknown] (80 samples, 0.12%)</title><rect x="55.1413%" y="597" width="0.1189%" height="15" fill="rgb(206,114,52)" fg:x="37104" fg:w="80"/><text x="55.3913%" y="607.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="55.2289%" y="581" width="0.0312%" height="15" fill="rgb(233,120,37)" fg:x="37163" fg:w="21"/><text x="55.4789%" y="591.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="55.2453%" y="565" width="0.0149%" height="15" fill="rgb(214,52,39)" fg:x="37174" fg:w="10"/><text x="55.4953%" y="575.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="55.7476%" y="693" width="0.0134%" height="15" fill="rgb(223,80,29)" fg:x="37512" fg:w="9"/><text x="55.9976%" y="703.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="55.7476%" y="677" width="0.0134%" height="15" fill="rgb(230,101,40)" fg:x="37512" fg:w="9"/><text x="55.9976%" y="687.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="55.7476%" y="661" width="0.0134%" height="15" fill="rgb(219,211,8)" fg:x="37512" fg:w="9"/><text x="55.9976%" y="671.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="55.7476%" y="645" width="0.0134%" height="15" fill="rgb(252,126,28)" fg:x="37512" fg:w="9"/><text x="55.9976%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="55.7491%" y="629" width="0.0119%" height="15" fill="rgb(215,56,38)" fg:x="37513" fg:w="8"/><text x="55.9991%" y="639.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="55.7491%" y="613" width="0.0119%" height="15" fill="rgb(249,55,44)" fg:x="37513" fg:w="8"/><text x="55.9991%" y="623.50"></text></g><g><title>malloc (928 samples, 1.38%)</title><rect x="55.0714%" y="725" width="1.3791%" height="15" fill="rgb(220,221,32)" fg:x="37057" fg:w="928"/><text x="55.3214%" y="735.50"></text></g><g><title>_int_malloc (801 samples, 1.19%)</title><rect x="55.2601%" y="709" width="1.1904%" height="15" fill="rgb(212,216,41)" fg:x="37184" fg:w="801"/><text x="55.5101%" y="719.50"></text></g><g><title>malloc_consolidate (464 samples, 0.69%)</title><rect x="55.7610%" y="693" width="0.6896%" height="15" fill="rgb(228,213,43)" fg:x="37521" fg:w="464"/><text x="56.0110%" y="703.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.4386%" y="677" width="0.0119%" height="15" fill="rgb(211,31,26)" fg:x="37977" fg:w="8"/><text x="56.6886%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.4386%" y="661" width="0.0119%" height="15" fill="rgb(229,202,19)" fg:x="37977" fg:w="8"/><text x="56.6886%" y="671.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.4386%" y="645" width="0.0119%" height="15" fill="rgb(229,105,46)" fg:x="37977" fg:w="8"/><text x="56.6886%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.4386%" y="629" width="0.0119%" height="15" fill="rgb(235,108,1)" fg:x="37977" fg:w="8"/><text x="56.6886%" y="639.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="56.4401%" y="613" width="0.0104%" height="15" fill="rgb(245,111,35)" fg:x="37978" fg:w="7"/><text x="56.6901%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="56.4401%" y="597" width="0.0104%" height="15" fill="rgb(219,185,31)" fg:x="37978" fg:w="7"/><text x="56.6901%" y="607.50"></text></g><g><title>operator new (933 samples, 1.39%)</title><rect x="55.0670%" y="741" width="1.3866%" height="15" fill="rgb(214,4,43)" fg:x="37054" fg:w="933"/><text x="55.3170%" y="751.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (937 samples, 1.39%)</title><rect x="55.0625%" y="821" width="1.3925%" height="15" fill="rgb(235,227,40)" fg:x="37051" fg:w="937"/><text x="55.3125%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (937 samples, 1.39%)</title><rect x="55.0625%" y="805" width="1.3925%" height="15" fill="rgb(230,88,30)" fg:x="37051" fg:w="937"/><text x="55.3125%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (937 samples, 1.39%)</title><rect x="55.0625%" y="789" width="1.3925%" height="15" fill="rgb(216,217,1)" fg:x="37051" fg:w="937"/><text x="55.3125%" y="799.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (937 samples, 1.39%)</title><rect x="55.0625%" y="773" width="1.3925%" height="15" fill="rgb(248,139,50)" fg:x="37051" fg:w="937"/><text x="55.3125%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (937 samples, 1.39%)</title><rect x="55.0625%" y="757" width="1.3925%" height="15" fill="rgb(233,1,21)" fg:x="37051" fg:w="937"/><text x="55.3125%" y="767.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (943 samples, 1.40%)</title><rect x="55.0595%" y="837" width="1.4014%" height="15" fill="rgb(215,183,12)" fg:x="37049" fg:w="943"/><text x="55.3095%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (10 samples, 0.01%)</title><rect x="56.4743%" y="725" width="0.0149%" height="15" fill="rgb(229,104,42)" fg:x="38001" fg:w="10"/><text x="56.7243%" y="735.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="56.4743%" y="709" width="0.0149%" height="15" fill="rgb(243,34,48)" fg:x="38001" fg:w="10"/><text x="56.7243%" y="719.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="56.4743%" y="693" width="0.0149%" height="15" fill="rgb(239,11,44)" fg:x="38001" fg:w="10"/><text x="56.7243%" y="703.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (10 samples, 0.01%)</title><rect x="56.4743%" y="677" width="0.0149%" height="15" fill="rgb(231,98,35)" fg:x="38001" fg:w="10"/><text x="56.7243%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (10 samples, 0.01%)</title><rect x="56.4743%" y="661" width="0.0149%" height="15" fill="rgb(233,28,25)" fg:x="38001" fg:w="10"/><text x="56.7243%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (10 samples, 0.01%)</title><rect x="56.4743%" y="645" width="0.0149%" height="15" fill="rgb(234,123,11)" fg:x="38001" fg:w="10"/><text x="56.7243%" y="655.50"></text></g><g><title>__lll_lock_wake_private (13 samples, 0.02%)</title><rect x="56.5159%" y="549" width="0.0193%" height="15" fill="rgb(220,69,3)" fg:x="38029" fg:w="13"/><text x="56.7659%" y="559.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="56.5159%" y="533" width="0.0193%" height="15" fill="rgb(214,64,36)" fg:x="38029" fg:w="13"/><text x="56.7659%" y="543.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="56.5189%" y="517" width="0.0163%" height="15" fill="rgb(211,138,32)" fg:x="38031" fg:w="11"/><text x="56.7689%" y="527.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="56.5189%" y="501" width="0.0163%" height="15" fill="rgb(213,118,47)" fg:x="38031" fg:w="11"/><text x="56.7689%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.5234%" y="485" width="0.0119%" height="15" fill="rgb(243,124,49)" fg:x="38034" fg:w="8"/><text x="56.7734%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="56.5248%" y="469" width="0.0104%" height="15" fill="rgb(221,30,28)" fg:x="38035" fg:w="7"/><text x="56.7748%" y="479.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (21 samples, 0.03%)</title><rect x="56.5100%" y="613" width="0.0312%" height="15" fill="rgb(246,37,13)" fg:x="38025" fg:w="21"/><text x="56.7600%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (20 samples, 0.03%)</title><rect x="56.5115%" y="597" width="0.0297%" height="15" fill="rgb(249,66,14)" fg:x="38026" fg:w="20"/><text x="56.7615%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (20 samples, 0.03%)</title><rect x="56.5115%" y="581" width="0.0297%" height="15" fill="rgb(213,166,5)" fg:x="38026" fg:w="20"/><text x="56.7615%" y="591.50"></text></g><g><title>malloc (20 samples, 0.03%)</title><rect x="56.5115%" y="565" width="0.0297%" height="15" fill="rgb(221,66,24)" fg:x="38026" fg:w="20"/><text x="56.7615%" y="575.50"></text></g><g><title>CTxIn&amp; std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::emplace_back&lt;&gt; (7 samples, 0.01%)</title><rect x="56.5486%" y="597" width="0.0104%" height="15" fill="rgb(210,132,17)" fg:x="38051" fg:w="7"/><text x="56.7986%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (50 samples, 0.07%)</title><rect x="56.4966%" y="629" width="0.0743%" height="15" fill="rgb(243,202,5)" fg:x="38016" fg:w="50"/><text x="56.7466%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (16 samples, 0.02%)</title><rect x="56.5471%" y="613" width="0.0238%" height="15" fill="rgb(233,70,48)" fg:x="38050" fg:w="16"/><text x="56.7971%" y="623.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (85 samples, 0.13%)</title><rect x="56.4684%" y="837" width="0.1263%" height="15" fill="rgb(238,41,26)" fg:x="37997" fg:w="85"/><text x="56.7184%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (85 samples, 0.13%)</title><rect x="56.4684%" y="821" width="0.1263%" height="15" fill="rgb(241,19,31)" fg:x="37997" fg:w="85"/><text x="56.7184%" y="831.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.13%)</title><rect x="56.4684%" y="805" width="0.1263%" height="15" fill="rgb(214,76,10)" fg:x="37997" fg:w="85"/><text x="56.7184%" y="815.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (85 samples, 0.13%)</title><rect x="56.4684%" y="789" width="0.1263%" height="15" fill="rgb(254,202,22)" fg:x="37997" fg:w="85"/><text x="56.7184%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (85 samples, 0.13%)</title><rect x="56.4684%" y="773" width="0.1263%" height="15" fill="rgb(214,72,24)" fg:x="37997" fg:w="85"/><text x="56.7184%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (85 samples, 0.13%)</title><rect x="56.4684%" y="757" width="0.1263%" height="15" fill="rgb(221,92,46)" fg:x="37997" fg:w="85"/><text x="56.7184%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (85 samples, 0.13%)</title><rect x="56.4684%" y="741" width="0.1263%" height="15" fill="rgb(246,13,50)" fg:x="37997" fg:w="85"/><text x="56.7184%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (71 samples, 0.11%)</title><rect x="56.4892%" y="725" width="0.1055%" height="15" fill="rgb(240,165,38)" fg:x="38011" fg:w="71"/><text x="56.7392%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.11%)</title><rect x="56.4892%" y="709" width="0.1055%" height="15" fill="rgb(241,24,51)" fg:x="38011" fg:w="71"/><text x="56.7392%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (71 samples, 0.11%)</title><rect x="56.4892%" y="693" width="0.1055%" height="15" fill="rgb(227,51,44)" fg:x="38011" fg:w="71"/><text x="56.7392%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (71 samples, 0.11%)</title><rect x="56.4892%" y="677" width="0.1055%" height="15" fill="rgb(231,121,3)" fg:x="38011" fg:w="71"/><text x="56.7392%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (71 samples, 0.11%)</title><rect x="56.4892%" y="661" width="0.1055%" height="15" fill="rgb(245,3,41)" fg:x="38011" fg:w="71"/><text x="56.7392%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (71 samples, 0.11%)</title><rect x="56.4892%" y="645" width="0.1055%" height="15" fill="rgb(214,13,26)" fg:x="38011" fg:w="71"/><text x="56.7392%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="56.5724%" y="629" width="0.0223%" height="15" fill="rgb(252,75,11)" fg:x="38067" fg:w="15"/><text x="56.8224%" y="639.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="56.5962%" y="693" width="0.0104%" height="15" fill="rgb(218,226,17)" fg:x="38083" fg:w="7"/><text x="56.8462%" y="703.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="56.5962%" y="677" width="0.0104%" height="15" fill="rgb(248,89,38)" fg:x="38083" fg:w="7"/><text x="56.8462%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.01%)</title><rect x="56.5947%" y="837" width="0.0134%" height="15" fill="rgb(237,73,46)" fg:x="38082" fg:w="9"/><text x="56.8447%" y="847.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="821" width="0.0119%" height="15" fill="rgb(242,78,33)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="831.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="805" width="0.0119%" height="15" fill="rgb(235,60,3)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="815.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="789" width="0.0119%" height="15" fill="rgb(216,172,19)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="799.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="773" width="0.0119%" height="15" fill="rgb(227,6,42)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="783.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="757" width="0.0119%" height="15" fill="rgb(223,207,42)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="767.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="741" width="0.0119%" height="15" fill="rgb(246,138,30)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="751.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="725" width="0.0119%" height="15" fill="rgb(251,199,47)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="735.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="56.5962%" y="709" width="0.0119%" height="15" fill="rgb(228,218,44)" fg:x="38083" fg:w="8"/><text x="56.8462%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1,077 samples, 1.60%)</title><rect x="55.0134%" y="853" width="1.6006%" height="15" fill="rgb(220,68,6)" fg:x="37018" fg:w="1077"/><text x="55.2634%" y="863.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (1,185 samples, 1.76%)</title><rect x="54.8619%" y="917" width="1.7611%" height="15" fill="rgb(240,60,26)" fg:x="36916" fg:w="1185"/><text x="55.1119%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1,185 samples, 1.76%)</title><rect x="54.8619%" y="901" width="1.7611%" height="15" fill="rgb(211,200,19)" fg:x="36916" fg:w="1185"/><text x="55.1119%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (1,185 samples, 1.76%)</title><rect x="54.8619%" y="885" width="1.7611%" height="15" fill="rgb(242,145,30)" fg:x="36916" fg:w="1185"/><text x="55.1119%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1,185 samples, 1.76%)</title><rect x="54.8619%" y="869" width="1.7611%" height="15" fill="rgb(225,64,13)" fg:x="36916" fg:w="1185"/><text x="55.1119%" y="879.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="56.6259%" y="853" width="0.0119%" height="15" fill="rgb(218,103,35)" fg:x="38103" fg:w="8"/><text x="56.8759%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (12 samples, 0.02%)</title><rect x="56.6378%" y="853" width="0.0178%" height="15" fill="rgb(216,93,46)" fg:x="38111" fg:w="12"/><text x="56.8878%" y="863.50"></text></g><g><title>CTxIn&amp; std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::emplace_back&lt;&gt; (7 samples, 0.01%)</title><rect x="56.6571%" y="837" width="0.0104%" height="15" fill="rgb(225,159,27)" fg:x="38124" fg:w="7"/><text x="56.9071%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (18 samples, 0.03%)</title><rect x="56.6556%" y="853" width="0.0268%" height="15" fill="rgb(225,204,11)" fg:x="38123" fg:w="18"/><text x="56.9056%" y="863.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="837" width="0.0134%" height="15" fill="rgb(205,56,4)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="821" width="0.0134%" height="15" fill="rgb(206,6,35)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="831.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="805" width="0.0134%" height="15" fill="rgb(247,73,52)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="815.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="789" width="0.0134%" height="15" fill="rgb(246,97,4)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="773" width="0.0134%" height="15" fill="rgb(212,37,15)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="757" width="0.0134%" height="15" fill="rgb(208,130,40)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="741" width="0.0134%" height="15" fill="rgb(236,55,29)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="725" width="0.0134%" height="15" fill="rgb(209,156,45)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="735.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="709" width="0.0134%" height="15" fill="rgb(249,107,4)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="719.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="693" width="0.0134%" height="15" fill="rgb(227,7,13)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="703.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="677" width="0.0134%" height="15" fill="rgb(250,129,14)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="661" width="0.0134%" height="15" fill="rgb(229,92,13)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (9 samples, 0.01%)</title><rect x="56.6690%" y="645" width="0.0134%" height="15" fill="rgb(245,98,39)" fg:x="38132" fg:w="9"/><text x="56.9190%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="56.6705%" y="629" width="0.0119%" height="15" fill="rgb(234,135,48)" fg:x="38133" fg:w="8"/><text x="56.9205%" y="639.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="56.6705%" y="613" width="0.0119%" height="15" fill="rgb(230,98,28)" fg:x="38133" fg:w="8"/><text x="56.9205%" y="623.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="56.6705%" y="597" width="0.0119%" height="15" fill="rgb(223,121,0)" fg:x="38133" fg:w="8"/><text x="56.9205%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (8 samples, 0.01%)</title><rect x="56.6705%" y="581" width="0.0119%" height="15" fill="rgb(234,173,33)" fg:x="38133" fg:w="8"/><text x="56.9205%" y="591.50"></text></g><g><title>DataStream::read (8 samples, 0.01%)</title><rect x="56.6705%" y="565" width="0.0119%" height="15" fill="rgb(245,47,8)" fg:x="38133" fg:w="8"/><text x="56.9205%" y="575.50"></text></g><g><title>__lll_lock_wake_private (124 samples, 0.18%)</title><rect x="56.7270%" y="709" width="0.1843%" height="15" fill="rgb(205,17,20)" fg:x="38171" fg:w="124"/><text x="56.9770%" y="719.50"></text></g><g><title>[unknown] (124 samples, 0.18%)</title><rect x="56.7270%" y="693" width="0.1843%" height="15" fill="rgb(232,151,16)" fg:x="38171" fg:w="124"/><text x="56.9770%" y="703.50"></text></g><g><title>[unknown] (122 samples, 0.18%)</title><rect x="56.7299%" y="677" width="0.1813%" height="15" fill="rgb(208,30,32)" fg:x="38173" fg:w="122"/><text x="56.9799%" y="687.50"></text></g><g><title>[unknown] (121 samples, 0.18%)</title><rect x="56.7314%" y="661" width="0.1798%" height="15" fill="rgb(254,26,3)" fg:x="38174" fg:w="121"/><text x="56.9814%" y="671.50"></text></g><g><title>[unknown] (115 samples, 0.17%)</title><rect x="56.7403%" y="645" width="0.1709%" height="15" fill="rgb(240,177,30)" fg:x="38180" fg:w="115"/><text x="56.9903%" y="655.50"></text></g><g><title>[unknown] (113 samples, 0.17%)</title><rect x="56.7433%" y="629" width="0.1679%" height="15" fill="rgb(248,76,44)" fg:x="38182" fg:w="113"/><text x="56.9933%" y="639.50"></text></g><g><title>[unknown] (102 samples, 0.15%)</title><rect x="56.7596%" y="613" width="0.1516%" height="15" fill="rgb(241,186,54)" fg:x="38193" fg:w="102"/><text x="57.0096%" y="623.50"></text></g><g><title>[unknown] (92 samples, 0.14%)</title><rect x="56.7745%" y="597" width="0.1367%" height="15" fill="rgb(249,171,29)" fg:x="38203" fg:w="92"/><text x="57.0245%" y="607.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="56.8771%" y="581" width="0.0342%" height="15" fill="rgb(237,151,44)" fg:x="38272" fg:w="23"/><text x="57.1271%" y="591.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="56.8919%" y="565" width="0.0193%" height="15" fill="rgb(228,174,30)" fg:x="38282" fg:w="13"/><text x="57.1419%" y="575.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="56.8993%" y="549" width="0.0119%" height="15" fill="rgb(252,14,37)" fg:x="38287" fg:w="8"/><text x="57.1493%" y="559.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (355 samples, 0.53%)</title><rect x="56.7106%" y="821" width="0.5276%" height="15" fill="rgb(207,111,40)" fg:x="38160" fg:w="355"/><text x="56.9606%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (355 samples, 0.53%)</title><rect x="56.7106%" y="805" width="0.5276%" height="15" fill="rgb(248,171,54)" fg:x="38160" fg:w="355"/><text x="56.9606%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (355 samples, 0.53%)</title><rect x="56.7106%" y="789" width="0.5276%" height="15" fill="rgb(211,127,2)" fg:x="38160" fg:w="355"/><text x="56.9606%" y="799.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (355 samples, 0.53%)</title><rect x="56.7106%" y="773" width="0.5276%" height="15" fill="rgb(236,87,47)" fg:x="38160" fg:w="355"/><text x="56.9606%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (355 samples, 0.53%)</title><rect x="56.7106%" y="757" width="0.5276%" height="15" fill="rgb(223,190,45)" fg:x="38160" fg:w="355"/><text x="56.9606%" y="767.50"></text></g><g><title>operator new (354 samples, 0.53%)</title><rect x="56.7121%" y="741" width="0.5261%" height="15" fill="rgb(215,5,16)" fg:x="38161" fg:w="354"/><text x="56.9621%" y="751.50"></text></g><g><title>malloc (353 samples, 0.52%)</title><rect x="56.7136%" y="725" width="0.5246%" height="15" fill="rgb(252,82,33)" fg:x="38162" fg:w="353"/><text x="56.9636%" y="735.50"></text></g><g><title>_int_malloc (220 samples, 0.33%)</title><rect x="56.9112%" y="709" width="0.3269%" height="15" fill="rgb(247,213,44)" fg:x="38295" fg:w="220"/><text x="57.1612%" y="719.50"></text></g><g><title>malloc_consolidate (99 samples, 0.15%)</title><rect x="57.0911%" y="693" width="0.1471%" height="15" fill="rgb(205,196,44)" fg:x="38416" fg:w="99"/><text x="57.3411%" y="703.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (357 samples, 0.53%)</title><rect x="56.7091%" y="837" width="0.5305%" height="15" fill="rgb(237,96,54)" fg:x="38159" fg:w="357"/><text x="56.9591%" y="847.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (21 samples, 0.03%)</title><rect x="57.2441%" y="629" width="0.0312%" height="15" fill="rgb(230,113,34)" fg:x="38519" fg:w="21"/><text x="57.4941%" y="639.50"></text></g><g><title>__lll_lock_wake_private (98 samples, 0.15%)</title><rect x="57.3244%" y="549" width="0.1456%" height="15" fill="rgb(221,224,12)" fg:x="38573" fg:w="98"/><text x="57.5744%" y="559.50"></text></g><g><title>[unknown] (98 samples, 0.15%)</title><rect x="57.3244%" y="533" width="0.1456%" height="15" fill="rgb(219,112,44)" fg:x="38573" fg:w="98"/><text x="57.5744%" y="543.50"></text></g><g><title>[unknown] (97 samples, 0.14%)</title><rect x="57.3259%" y="517" width="0.1442%" height="15" fill="rgb(210,31,13)" fg:x="38574" fg:w="97"/><text x="57.5759%" y="527.50"></text></g><g><title>[unknown] (96 samples, 0.14%)</title><rect x="57.3273%" y="501" width="0.1427%" height="15" fill="rgb(230,25,16)" fg:x="38575" fg:w="96"/><text x="57.5773%" y="511.50"></text></g><g><title>[unknown] (86 samples, 0.13%)</title><rect x="57.3422%" y="485" width="0.1278%" height="15" fill="rgb(246,108,53)" fg:x="38585" fg:w="86"/><text x="57.5922%" y="495.50"></text></g><g><title>[unknown] (83 samples, 0.12%)</title><rect x="57.3467%" y="469" width="0.1233%" height="15" fill="rgb(241,172,50)" fg:x="38588" fg:w="83"/><text x="57.5967%" y="479.50"></text></g><g><title>[unknown] (77 samples, 0.11%)</title><rect x="57.3556%" y="453" width="0.1144%" height="15" fill="rgb(235,141,10)" fg:x="38594" fg:w="77"/><text x="57.6056%" y="463.50"></text></g><g><title>[unknown] (74 samples, 0.11%)</title><rect x="57.3600%" y="437" width="0.1100%" height="15" fill="rgb(220,174,43)" fg:x="38597" fg:w="74"/><text x="57.6100%" y="447.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="57.4403%" y="421" width="0.0297%" height="15" fill="rgb(215,181,40)" fg:x="38651" fg:w="20"/><text x="57.6903%" y="431.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="57.4552%" y="405" width="0.0149%" height="15" fill="rgb(230,97,2)" fg:x="38661" fg:w="10"/><text x="57.7052%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="57.4596%" y="389" width="0.0104%" height="15" fill="rgb(211,25,27)" fg:x="38664" fg:w="7"/><text x="57.7096%" y="399.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (140 samples, 0.21%)</title><rect x="57.3184%" y="613" width="0.2081%" height="15" fill="rgb(230,87,26)" fg:x="38569" fg:w="140"/><text x="57.5684%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (138 samples, 0.21%)</title><rect x="57.3214%" y="597" width="0.2051%" height="15" fill="rgb(227,160,17)" fg:x="38571" fg:w="138"/><text x="57.5714%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (138 samples, 0.21%)</title><rect x="57.3214%" y="581" width="0.2051%" height="15" fill="rgb(244,85,34)" fg:x="38571" fg:w="138"/><text x="57.5714%" y="591.50"></text></g><g><title>malloc (137 samples, 0.20%)</title><rect x="57.3229%" y="565" width="0.2036%" height="15" fill="rgb(207,70,0)" fg:x="38572" fg:w="137"/><text x="57.5729%" y="575.50"></text></g><g><title>_int_malloc (38 samples, 0.06%)</title><rect x="57.4700%" y="549" width="0.0565%" height="15" fill="rgb(223,129,7)" fg:x="38671" fg:w="38"/><text x="57.7200%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (190 samples, 0.28%)</title><rect x="57.2753%" y="629" width="0.2824%" height="15" fill="rgb(246,105,7)" fg:x="38540" fg:w="190"/><text x="57.5253%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="57.5443%" y="613" width="0.0134%" height="15" fill="rgb(215,154,42)" fg:x="38721" fg:w="9"/><text x="57.7943%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="57.5607%" y="629" width="0.0104%" height="15" fill="rgb(220,215,30)" fg:x="38732" fg:w="7"/><text x="57.8107%" y="639.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (7 samples, 0.01%)</title><rect x="57.5889%" y="613" width="0.0104%" height="15" fill="rgb(228,81,51)" fg:x="38751" fg:w="7"/><text x="57.8389%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="57.6023%" y="501" width="0.0104%" height="15" fill="rgb(247,71,54)" fg:x="38760" fg:w="7"/><text x="57.8523%" y="511.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (255 samples, 0.38%)</title><rect x="57.2397%" y="837" width="0.3790%" height="15" fill="rgb(234,176,34)" fg:x="38516" fg:w="255"/><text x="57.4897%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (255 samples, 0.38%)</title><rect x="57.2397%" y="821" width="0.3790%" height="15" fill="rgb(241,103,54)" fg:x="38516" fg:w="255"/><text x="57.4897%" y="831.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (255 samples, 0.38%)</title><rect x="57.2397%" y="805" width="0.3790%" height="15" fill="rgb(228,22,34)" fg:x="38516" fg:w="255"/><text x="57.4897%" y="815.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (255 samples, 0.38%)</title><rect x="57.2397%" y="789" width="0.3790%" height="15" fill="rgb(241,179,48)" fg:x="38516" fg:w="255"/><text x="57.4897%" y="799.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (255 samples, 0.38%)</title><rect x="57.2397%" y="773" width="0.3790%" height="15" fill="rgb(235,167,37)" fg:x="38516" fg:w="255"/><text x="57.4897%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (255 samples, 0.38%)</title><rect x="57.2397%" y="757" width="0.3790%" height="15" fill="rgb(213,109,30)" fg:x="38516" fg:w="255"/><text x="57.4897%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (255 samples, 0.38%)</title><rect x="57.2397%" y="741" width="0.3790%" height="15" fill="rgb(222,172,16)" fg:x="38516" fg:w="255"/><text x="57.4897%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (253 samples, 0.38%)</title><rect x="57.2426%" y="725" width="0.3760%" height="15" fill="rgb(233,192,5)" fg:x="38518" fg:w="253"/><text x="57.4926%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (253 samples, 0.38%)</title><rect x="57.2426%" y="709" width="0.3760%" height="15" fill="rgb(247,189,41)" fg:x="38518" fg:w="253"/><text x="57.4926%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (253 samples, 0.38%)</title><rect x="57.2426%" y="693" width="0.3760%" height="15" fill="rgb(218,134,47)" fg:x="38518" fg:w="253"/><text x="57.4926%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (253 samples, 0.38%)</title><rect x="57.2426%" y="677" width="0.3760%" height="15" fill="rgb(216,29,3)" fg:x="38518" fg:w="253"/><text x="57.4926%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (253 samples, 0.38%)</title><rect x="57.2426%" y="661" width="0.3760%" height="15" fill="rgb(246,140,12)" fg:x="38518" fg:w="253"/><text x="57.4926%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (253 samples, 0.38%)</title><rect x="57.2426%" y="645" width="0.3760%" height="15" fill="rgb(230,136,11)" fg:x="38518" fg:w="253"/><text x="57.4926%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (32 samples, 0.05%)</title><rect x="57.5711%" y="629" width="0.0476%" height="15" fill="rgb(247,22,47)" fg:x="38739" fg:w="32"/><text x="57.8211%" y="639.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (11 samples, 0.02%)</title><rect x="57.6023%" y="613" width="0.0163%" height="15" fill="rgb(218,84,22)" fg:x="38760" fg:w="11"/><text x="57.8523%" y="623.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (11 samples, 0.02%)</title><rect x="57.6023%" y="597" width="0.0163%" height="15" fill="rgb(216,87,39)" fg:x="38760" fg:w="11"/><text x="57.8523%" y="607.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="57.6023%" y="581" width="0.0163%" height="15" fill="rgb(221,178,8)" fg:x="38760" fg:w="11"/><text x="57.8523%" y="591.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="57.6023%" y="565" width="0.0163%" height="15" fill="rgb(230,42,11)" fg:x="38760" fg:w="11"/><text x="57.8523%" y="575.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (11 samples, 0.02%)</title><rect x="57.6023%" y="549" width="0.0163%" height="15" fill="rgb(237,229,4)" fg:x="38760" fg:w="11"/><text x="57.8523%" y="559.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (11 samples, 0.02%)</title><rect x="57.6023%" y="533" width="0.0163%" height="15" fill="rgb(222,31,33)" fg:x="38760" fg:w="11"/><text x="57.8523%" y="543.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (11 samples, 0.02%)</title><rect x="57.6023%" y="517" width="0.0163%" height="15" fill="rgb(210,17,39)" fg:x="38760" fg:w="11"/><text x="57.8523%" y="527.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (675 samples, 1.00%)</title><rect x="56.6229%" y="917" width="1.0031%" height="15" fill="rgb(244,93,20)" fg:x="38101" fg:w="675"/><text x="56.8729%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (675 samples, 1.00%)</title><rect x="56.6229%" y="901" width="1.0031%" height="15" fill="rgb(210,40,47)" fg:x="38101" fg:w="675"/><text x="56.8729%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (675 samples, 1.00%)</title><rect x="56.6229%" y="885" width="1.0031%" height="15" fill="rgb(239,211,47)" fg:x="38101" fg:w="675"/><text x="56.8729%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (675 samples, 1.00%)</title><rect x="56.6229%" y="869" width="1.0031%" height="15" fill="rgb(251,223,49)" fg:x="38101" fg:w="675"/><text x="56.8729%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (635 samples, 0.94%)</title><rect x="56.6824%" y="853" width="0.9437%" height="15" fill="rgb(221,149,5)" fg:x="38141" fg:w="635"/><text x="56.9324%" y="863.50"></text></g><g><title>__lll_lock_wake_private (176 samples, 0.26%)</title><rect x="57.6944%" y="709" width="0.2616%" height="15" fill="rgb(219,224,51)" fg:x="38822" fg:w="176"/><text x="57.9444%" y="719.50"></text></g><g><title>[unknown] (176 samples, 0.26%)</title><rect x="57.6944%" y="693" width="0.2616%" height="15" fill="rgb(223,7,8)" fg:x="38822" fg:w="176"/><text x="57.9444%" y="703.50"></text></g><g><title>[unknown] (175 samples, 0.26%)</title><rect x="57.6959%" y="677" width="0.2601%" height="15" fill="rgb(241,217,22)" fg:x="38823" fg:w="175"/><text x="57.9459%" y="687.50"></text></g><g><title>[unknown] (175 samples, 0.26%)</title><rect x="57.6959%" y="661" width="0.2601%" height="15" fill="rgb(248,209,0)" fg:x="38823" fg:w="175"/><text x="57.9459%" y="671.50"></text></g><g><title>[unknown] (163 samples, 0.24%)</title><rect x="57.7137%" y="645" width="0.2422%" height="15" fill="rgb(217,205,4)" fg:x="38835" fg:w="163"/><text x="57.9637%" y="655.50"></text></g><g><title>[unknown] (157 samples, 0.23%)</title><rect x="57.7227%" y="629" width="0.2333%" height="15" fill="rgb(228,124,39)" fg:x="38841" fg:w="157"/><text x="57.9727%" y="639.50"></text></g><g><title>[unknown] (135 samples, 0.20%)</title><rect x="57.7554%" y="613" width="0.2006%" height="15" fill="rgb(250,116,42)" fg:x="38863" fg:w="135"/><text x="58.0054%" y="623.50"></text></g><g><title>[unknown] (129 samples, 0.19%)</title><rect x="57.7643%" y="597" width="0.1917%" height="15" fill="rgb(223,202,9)" fg:x="38869" fg:w="129"/><text x="58.0143%" y="607.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="57.9233%" y="581" width="0.0327%" height="15" fill="rgb(242,222,40)" fg:x="38976" fg:w="22"/><text x="58.1733%" y="591.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="57.9426%" y="565" width="0.0134%" height="15" fill="rgb(229,99,46)" fg:x="38989" fg:w="9"/><text x="58.1926%" y="575.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (372 samples, 0.55%)</title><rect x="57.6617%" y="821" width="0.5528%" height="15" fill="rgb(225,56,46)" fg:x="38800" fg:w="372"/><text x="57.9117%" y="831.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (372 samples, 0.55%)</title><rect x="57.6617%" y="805" width="0.5528%" height="15" fill="rgb(227,94,5)" fg:x="38800" fg:w="372"/><text x="57.9117%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (372 samples, 0.55%)</title><rect x="57.6617%" y="789" width="0.5528%" height="15" fill="rgb(205,112,38)" fg:x="38800" fg:w="372"/><text x="57.9117%" y="799.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (372 samples, 0.55%)</title><rect x="57.6617%" y="773" width="0.5528%" height="15" fill="rgb(231,133,46)" fg:x="38800" fg:w="372"/><text x="57.9117%" y="783.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (372 samples, 0.55%)</title><rect x="57.6617%" y="757" width="0.5528%" height="15" fill="rgb(217,16,9)" fg:x="38800" fg:w="372"/><text x="57.9117%" y="767.50"></text></g><g><title>operator new (368 samples, 0.55%)</title><rect x="57.6677%" y="741" width="0.5469%" height="15" fill="rgb(249,173,9)" fg:x="38804" fg:w="368"/><text x="57.9177%" y="751.50"></text></g><g><title>malloc (365 samples, 0.54%)</title><rect x="57.6721%" y="725" width="0.5424%" height="15" fill="rgb(205,163,53)" fg:x="38807" fg:w="365"/><text x="57.9221%" y="735.50"></text></g><g><title>_int_malloc (174 samples, 0.26%)</title><rect x="57.9560%" y="709" width="0.2586%" height="15" fill="rgb(217,54,41)" fg:x="38998" fg:w="174"/><text x="58.2060%" y="719.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (395 samples, 0.59%)</title><rect x="57.6379%" y="837" width="0.5870%" height="15" fill="rgb(228,216,12)" fg:x="38784" fg:w="395"/><text x="57.8879%" y="847.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (7 samples, 0.01%)</title><rect x="58.2250%" y="837" width="0.0104%" height="15" fill="rgb(244,228,15)" fg:x="39179" fg:w="7"/><text x="58.4750%" y="847.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (14 samples, 0.02%)</title><rect x="58.2354%" y="837" width="0.0208%" height="15" fill="rgb(221,176,53)" fg:x="39186" fg:w="14"/><text x="58.4854%" y="847.50"></text></g><g><title>__memmove_avx512_unaligned_erms (14 samples, 0.02%)</title><rect x="58.2814%" y="757" width="0.0208%" height="15" fill="rgb(205,94,34)" fg:x="39217" fg:w="14"/><text x="58.5314%" y="767.50"></text></g><g><title>DataStream::read (21 samples, 0.03%)</title><rect x="58.2725%" y="789" width="0.0312%" height="15" fill="rgb(213,110,48)" fg:x="39211" fg:w="21"/><text x="58.5225%" y="799.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="58.2814%" y="773" width="0.0223%" height="15" fill="rgb(236,142,28)" fg:x="39217" fg:w="15"/><text x="58.5314%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (22 samples, 0.03%)</title><rect x="58.2725%" y="805" width="0.0327%" height="15" fill="rgb(225,135,29)" fg:x="39211" fg:w="22"/><text x="58.5225%" y="815.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (8 samples, 0.01%)</title><rect x="58.3067%" y="805" width="0.0119%" height="15" fill="rgb(252,45,31)" fg:x="39234" fg:w="8"/><text x="58.5567%" y="815.50"></text></g><g><title>__lll_lock_wait_private (25 samples, 0.04%)</title><rect x="58.4107%" y="661" width="0.0372%" height="15" fill="rgb(211,187,50)" fg:x="39304" fg:w="25"/><text x="58.6607%" y="671.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="58.4122%" y="645" width="0.0357%" height="15" fill="rgb(229,109,7)" fg:x="39305" fg:w="24"/><text x="58.6622%" y="655.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="58.4122%" y="629" width="0.0357%" height="15" fill="rgb(251,131,51)" fg:x="39305" fg:w="24"/><text x="58.6622%" y="639.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="58.4137%" y="613" width="0.0342%" height="15" fill="rgb(251,180,35)" fg:x="39306" fg:w="23"/><text x="58.6637%" y="623.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="58.4182%" y="597" width="0.0297%" height="15" fill="rgb(211,46,32)" fg:x="39309" fg:w="20"/><text x="58.6682%" y="607.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="58.4182%" y="581" width="0.0297%" height="15" fill="rgb(248,123,17)" fg:x="39309" fg:w="20"/><text x="58.6682%" y="591.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="58.4241%" y="565" width="0.0238%" height="15" fill="rgb(227,141,18)" fg:x="39313" fg:w="16"/><text x="58.6741%" y="575.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="58.4271%" y="549" width="0.0208%" height="15" fill="rgb(216,102,9)" fg:x="39315" fg:w="14"/><text x="58.6771%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="58.4375%" y="533" width="0.0104%" height="15" fill="rgb(253,47,13)" fg:x="39322" fg:w="7"/><text x="58.6875%" y="543.50"></text></g><g><title>__lll_lock_wake_private (306 samples, 0.45%)</title><rect x="58.4479%" y="661" width="0.4548%" height="15" fill="rgb(226,93,23)" fg:x="39329" fg:w="306"/><text x="58.6979%" y="671.50"></text></g><g><title>[unknown] (305 samples, 0.45%)</title><rect x="58.4494%" y="645" width="0.4533%" height="15" fill="rgb(247,104,17)" fg:x="39330" fg:w="305"/><text x="58.6994%" y="655.50"></text></g><g><title>[unknown] (303 samples, 0.45%)</title><rect x="58.4523%" y="629" width="0.4503%" height="15" fill="rgb(233,203,26)" fg:x="39332" fg:w="303"/><text x="58.7023%" y="639.50"></text></g><g><title>[unknown] (300 samples, 0.45%)</title><rect x="58.4568%" y="613" width="0.4458%" height="15" fill="rgb(244,98,49)" fg:x="39335" fg:w="300"/><text x="58.7068%" y="623.50"></text></g><g><title>[unknown] (278 samples, 0.41%)</title><rect x="58.4895%" y="597" width="0.4131%" height="15" fill="rgb(235,134,22)" fg:x="39357" fg:w="278"/><text x="58.7395%" y="607.50"></text></g><g><title>[unknown] (270 samples, 0.40%)</title><rect x="58.5014%" y="581" width="0.4013%" height="15" fill="rgb(221,70,32)" fg:x="39365" fg:w="270"/><text x="58.7514%" y="591.50"></text></g><g><title>[unknown] (240 samples, 0.36%)</title><rect x="58.5460%" y="565" width="0.3567%" height="15" fill="rgb(238,15,50)" fg:x="39395" fg:w="240"/><text x="58.7960%" y="575.50"></text></g><g><title>[unknown] (230 samples, 0.34%)</title><rect x="58.5608%" y="549" width="0.3418%" height="15" fill="rgb(215,221,48)" fg:x="39405" fg:w="230"/><text x="58.8108%" y="559.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="58.8343%" y="533" width="0.0684%" height="15" fill="rgb(236,73,3)" fg:x="39589" fg:w="46"/><text x="59.0843%" y="543.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="58.8833%" y="517" width="0.0193%" height="15" fill="rgb(250,107,11)" fg:x="39622" fg:w="13"/><text x="59.1333%" y="527.50"></text></g><g><title>_int_malloc (218 samples, 0.32%)</title><rect x="58.9026%" y="661" width="0.3240%" height="15" fill="rgb(242,39,14)" fg:x="39635" fg:w="218"/><text x="59.1526%" y="671.50"></text></g><g><title>malloc_consolidate (36 samples, 0.05%)</title><rect x="59.1731%" y="645" width="0.0535%" height="15" fill="rgb(248,164,37)" fg:x="39817" fg:w="36"/><text x="59.4231%" y="655.50"></text></g><g><title>malloc (567 samples, 0.84%)</title><rect x="58.3855%" y="677" width="0.8426%" height="15" fill="rgb(217,60,12)" fg:x="39287" fg:w="567"/><text x="58.6355%" y="687.50"></text></g><g><title>operator new (575 samples, 0.85%)</title><rect x="58.3766%" y="693" width="0.8545%" height="15" fill="rgb(240,125,29)" fg:x="39281" fg:w="575"/><text x="58.6266%" y="703.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (580 samples, 0.86%)</title><rect x="58.3706%" y="773" width="0.8620%" height="15" fill="rgb(208,207,28)" fg:x="39277" fg:w="580"/><text x="58.6206%" y="783.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (580 samples, 0.86%)</title><rect x="58.3706%" y="757" width="0.8620%" height="15" fill="rgb(209,159,27)" fg:x="39277" fg:w="580"/><text x="58.6206%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (580 samples, 0.86%)</title><rect x="58.3706%" y="741" width="0.8620%" height="15" fill="rgb(251,176,53)" fg:x="39277" fg:w="580"/><text x="58.6206%" y="751.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (580 samples, 0.86%)</title><rect x="58.3706%" y="725" width="0.8620%" height="15" fill="rgb(211,85,7)" fg:x="39277" fg:w="580"/><text x="58.6206%" y="735.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (580 samples, 0.86%)</title><rect x="58.3706%" y="709" width="0.8620%" height="15" fill="rgb(216,64,54)" fg:x="39277" fg:w="580"/><text x="58.6206%" y="719.50"></text></g><g><title>__memset_avx512_unaligned_erms (12 samples, 0.02%)</title><rect x="59.2459%" y="645" width="0.0178%" height="15" fill="rgb(217,54,24)" fg:x="39866" fg:w="12"/><text x="59.4959%" y="655.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (17 samples, 0.03%)</title><rect x="59.2400%" y="709" width="0.0253%" height="15" fill="rgb(208,206,53)" fg:x="39862" fg:w="17"/><text x="59.4900%" y="719.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (17 samples, 0.03%)</title><rect x="59.2400%" y="693" width="0.0253%" height="15" fill="rgb(251,74,39)" fg:x="39862" fg:w="17"/><text x="59.4900%" y="703.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (16 samples, 0.02%)</title><rect x="59.2415%" y="677" width="0.0238%" height="15" fill="rgb(226,47,5)" fg:x="39863" fg:w="16"/><text x="59.4915%" y="687.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (16 samples, 0.02%)</title><rect x="59.2415%" y="661" width="0.0238%" height="15" fill="rgb(234,111,33)" fg:x="39863" fg:w="16"/><text x="59.4915%" y="671.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (637 samples, 0.95%)</title><rect x="58.3201%" y="789" width="0.9467%" height="15" fill="rgb(251,14,10)" fg:x="39243" fg:w="637"/><text x="58.5701%" y="799.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (18 samples, 0.03%)</title><rect x="59.2400%" y="773" width="0.0268%" height="15" fill="rgb(232,43,0)" fg:x="39862" fg:w="18"/><text x="59.4900%" y="783.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (18 samples, 0.03%)</title><rect x="59.2400%" y="757" width="0.0268%" height="15" fill="rgb(222,68,43)" fg:x="39862" fg:w="18"/><text x="59.4900%" y="767.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (18 samples, 0.03%)</title><rect x="59.2400%" y="741" width="0.0268%" height="15" fill="rgb(217,24,23)" fg:x="39862" fg:w="18"/><text x="59.4900%" y="751.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (18 samples, 0.03%)</title><rect x="59.2400%" y="725" width="0.0268%" height="15" fill="rgb(229,209,14)" fg:x="39862" fg:w="18"/><text x="59.4900%" y="735.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (8 samples, 0.01%)</title><rect x="59.3069%" y="725" width="0.0119%" height="15" fill="rgb(250,149,48)" fg:x="39907" fg:w="8"/><text x="59.5569%" y="735.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="59.2965%" y="773" width="0.0238%" height="15" fill="rgb(210,120,37)" fg:x="39900" fg:w="16"/><text x="59.5465%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (16 samples, 0.02%)</title><rect x="59.2965%" y="757" width="0.0238%" height="15" fill="rgb(210,21,8)" fg:x="39900" fg:w="16"/><text x="59.5465%" y="767.50"></text></g><g><title>DataStream::read (16 samples, 0.02%)</title><rect x="59.2965%" y="741" width="0.0238%" height="15" fill="rgb(243,145,7)" fg:x="39900" fg:w="16"/><text x="59.5465%" y="751.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (37 samples, 0.05%)</title><rect x="59.2667%" y="789" width="0.0550%" height="15" fill="rgb(238,178,32)" fg:x="39880" fg:w="37"/><text x="59.5167%" y="799.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (14 samples, 0.02%)</title><rect x="59.3217%" y="789" width="0.0208%" height="15" fill="rgb(222,4,10)" fg:x="39917" fg:w="14"/><text x="59.5717%" y="799.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (8 samples, 0.01%)</title><rect x="59.3559%" y="517" width="0.0119%" height="15" fill="rgb(239,7,37)" fg:x="39940" fg:w="8"/><text x="59.6059%" y="527.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (10 samples, 0.01%)</title><rect x="59.3916%" y="485" width="0.0149%" height="15" fill="rgb(215,31,37)" fg:x="39964" fg:w="10"/><text x="59.6416%" y="495.50"></text></g><g><title>DataStream::read (10 samples, 0.01%)</title><rect x="59.3916%" y="469" width="0.0149%" height="15" fill="rgb(224,83,33)" fg:x="39964" fg:w="10"/><text x="59.6416%" y="479.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (44 samples, 0.07%)</title><rect x="59.3500%" y="597" width="0.0654%" height="15" fill="rgb(239,55,3)" fg:x="39936" fg:w="44"/><text x="59.6000%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (44 samples, 0.07%)</title><rect x="59.3500%" y="581" width="0.0654%" height="15" fill="rgb(247,92,11)" fg:x="39936" fg:w="44"/><text x="59.6000%" y="591.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (44 samples, 0.07%)</title><rect x="59.3500%" y="565" width="0.0654%" height="15" fill="rgb(239,200,7)" fg:x="39936" fg:w="44"/><text x="59.6000%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.07%)</title><rect x="59.3500%" y="549" width="0.0654%" height="15" fill="rgb(227,115,8)" fg:x="39936" fg:w="44"/><text x="59.6000%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (44 samples, 0.07%)</title><rect x="59.3500%" y="533" width="0.0654%" height="15" fill="rgb(215,189,27)" fg:x="39936" fg:w="44"/><text x="59.6000%" y="543.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (24 samples, 0.04%)</title><rect x="59.3797%" y="517" width="0.0357%" height="15" fill="rgb(251,216,39)" fg:x="39956" fg:w="24"/><text x="59.6297%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (24 samples, 0.04%)</title><rect x="59.3797%" y="501" width="0.0357%" height="15" fill="rgb(207,29,47)" fg:x="39956" fg:w="24"/><text x="59.6297%" y="511.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="789" width="0.0803%" height="15" fill="rgb(210,71,34)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="799.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="773" width="0.0803%" height="15" fill="rgb(253,217,51)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="783.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="757" width="0.0803%" height="15" fill="rgb(222,117,46)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="767.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="741" width="0.0803%" height="15" fill="rgb(226,132,6)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="751.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="725" width="0.0803%" height="15" fill="rgb(254,145,51)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="735.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="709" width="0.0803%" height="15" fill="rgb(231,199,27)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="719.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="693" width="0.0803%" height="15" fill="rgb(245,158,14)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="703.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="677" width="0.0803%" height="15" fill="rgb(240,113,14)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="687.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="661" width="0.0803%" height="15" fill="rgb(210,20,13)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="671.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="645" width="0.0803%" height="15" fill="rgb(241,144,13)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="655.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="629" width="0.0803%" height="15" fill="rgb(235,43,34)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="639.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (54 samples, 0.08%)</title><rect x="59.3425%" y="613" width="0.0803%" height="15" fill="rgb(208,36,20)" fg:x="39931" fg:w="54"/><text x="59.5925%" y="623.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (749 samples, 1.11%)</title><rect x="58.3186%" y="805" width="1.1131%" height="15" fill="rgb(239,204,10)" fg:x="39242" fg:w="749"/><text x="58.5686%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (7 samples, 0.01%)</title><rect x="59.4391%" y="805" width="0.0104%" height="15" fill="rgb(217,84,43)" fg:x="39996" fg:w="7"/><text x="59.6891%" y="815.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (801 samples, 1.19%)</title><rect x="58.2636%" y="837" width="1.1904%" height="15" fill="rgb(241,170,50)" fg:x="39205" fg:w="801"/><text x="58.5136%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (801 samples, 1.19%)</title><rect x="58.2636%" y="821" width="1.1904%" height="15" fill="rgb(226,205,29)" fg:x="39205" fg:w="801"/><text x="58.5136%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (9 samples, 0.01%)</title><rect x="59.4540%" y="837" width="0.0134%" height="15" fill="rgb(233,113,1)" fg:x="40006" fg:w="9"/><text x="59.7040%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1,241 samples, 1.84%)</title><rect x="57.6261%" y="917" width="1.8443%" height="15" fill="rgb(253,98,13)" fg:x="38776" fg:w="1241"/><text x="57.8761%" y="927.50">P..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1,241 samples, 1.84%)</title><rect x="57.6261%" y="901" width="1.8443%" height="15" fill="rgb(211,115,12)" fg:x="38776" fg:w="1241"/><text x="57.8761%" y="911.50">v..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1,241 samples, 1.84%)</title><rect x="57.6261%" y="885" width="1.8443%" height="15" fill="rgb(208,12,16)" fg:x="38776" fg:w="1241"/><text x="57.8761%" y="895.50">v..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1,241 samples, 1.84%)</title><rect x="57.6261%" y="869" width="1.8443%" height="15" fill="rgb(237,193,54)" fg:x="38776" fg:w="1241"/><text x="57.8761%" y="879.50">v..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1,241 samples, 1.84%)</title><rect x="57.6261%" y="853" width="1.8443%" height="15" fill="rgb(243,22,42)" fg:x="38776" fg:w="1241"/><text x="57.8761%" y="863.50">v..</text></g><g><title>QuadRound (9 samples, 0.01%)</title><rect x="59.4867%" y="837" width="0.0134%" height="15" fill="rgb(233,151,36)" fg:x="40028" fg:w="9"/><text x="59.7367%" y="847.50"></text></g><g><title>ShiftMessageA (13 samples, 0.02%)</title><rect x="59.5001%" y="821" width="0.0193%" height="15" fill="rgb(237,57,45)" fg:x="40037" fg:w="13"/><text x="59.7501%" y="831.50"></text></g><g><title>_mm_sha256msg1_epu32 (13 samples, 0.02%)</title><rect x="59.5001%" y="805" width="0.0193%" height="15" fill="rgb(221,88,17)" fg:x="40037" fg:w="13"/><text x="59.7501%" y="815.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="59.5194%" y="805" width="0.0104%" height="15" fill="rgb(230,79,15)" fg:x="40050" fg:w="7"/><text x="59.7694%" y="815.50"></text></g><g><title>ShiftMessageB (26 samples, 0.04%)</title><rect x="59.5001%" y="837" width="0.0386%" height="15" fill="rgb(213,57,13)" fg:x="40037" fg:w="26"/><text x="59.7501%" y="847.50"></text></g><g><title>ShiftMessageC (13 samples, 0.02%)</title><rect x="59.5194%" y="821" width="0.0193%" height="15" fill="rgb(222,116,39)" fg:x="40050" fg:w="13"/><text x="59.7694%" y="831.50"></text></g><g><title>sha256_x86_shani::Transform (40 samples, 0.06%)</title><rect x="59.4837%" y="853" width="0.0594%" height="15" fill="rgb(245,107,2)" fg:x="40026" fg:w="40"/><text x="59.7337%" y="863.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (47 samples, 0.07%)</title><rect x="59.4748%" y="917" width="0.0698%" height="15" fill="rgb(238,1,10)" fg:x="40020" fg:w="47"/><text x="59.7248%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.07%)</title><rect x="59.4748%" y="901" width="0.0698%" height="15" fill="rgb(249,4,48)" fg:x="40020" fg:w="47"/><text x="59.7248%" y="911.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.07%)</title><rect x="59.4748%" y="885" width="0.0698%" height="15" fill="rgb(223,151,18)" fg:x="40020" fg:w="47"/><text x="59.7248%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (47 samples, 0.07%)</title><rect x="59.4748%" y="869" width="0.0698%" height="15" fill="rgb(227,65,43)" fg:x="40020" fg:w="47"/><text x="59.7248%" y="879.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3,155 samples, 4.69%)</title><rect x="54.8604%" y="965" width="4.6887%" height="15" fill="rgb(218,40,45)" fg:x="36915" fg:w="3155"/><text x="55.1104%" y="975.50">CMuta..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3,154 samples, 4.69%)</title><rect x="54.8619%" y="949" width="4.6872%" height="15" fill="rgb(252,121,31)" fg:x="36916" fg:w="3154"/><text x="55.1119%" y="959.50">void ..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (3,154 samples, 4.69%)</title><rect x="54.8619%" y="933" width="4.6872%" height="15" fill="rgb(219,158,43)" fg:x="36916" fg:w="3154"/><text x="55.1119%" y="943.50">void ..</text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="59.5506%" y="949" width="0.0163%" height="15" fill="rgb(231,162,42)" fg:x="40071" fg:w="11"/><text x="59.8006%" y="959.50"></text></g><g><title>CSHA256::Write (34 samples, 0.05%)</title><rect x="59.5669%" y="853" width="0.0505%" height="15" fill="rgb(217,179,25)" fg:x="40082" fg:w="34"/><text x="59.8169%" y="863.50"></text></g><g><title>CTransaction::ComputeHash (12 samples, 0.02%)</title><rect x="59.6190%" y="853" width="0.0178%" height="15" fill="rgb(206,212,31)" fg:x="40117" fg:w="12"/><text x="59.8690%" y="863.50"></text></g><g><title>QuadRound (7 samples, 0.01%)</title><rect x="59.6412%" y="837" width="0.0104%" height="15" fill="rgb(235,144,12)" fg:x="40132" fg:w="7"/><text x="59.8912%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (18 samples, 0.03%)</title><rect x="59.6383%" y="853" width="0.0268%" height="15" fill="rgb(213,51,10)" fg:x="40130" fg:w="18"/><text x="59.8883%" y="863.50"></text></g><g><title>CSHA256::Write (30 samples, 0.04%)</title><rect x="59.6918%" y="581" width="0.0446%" height="15" fill="rgb(231,145,14)" fg:x="40166" fg:w="30"/><text x="59.9418%" y="591.50"></text></g><g><title>QuadRound (13 samples, 0.02%)</title><rect x="59.7408%" y="565" width="0.0193%" height="15" fill="rgb(235,15,28)" fg:x="40199" fg:w="13"/><text x="59.9908%" y="575.50"></text></g><g><title>ShiftMessageA (7 samples, 0.01%)</title><rect x="59.7601%" y="549" width="0.0104%" height="15" fill="rgb(237,206,10)" fg:x="40212" fg:w="7"/><text x="60.0101%" y="559.50"></text></g><g><title>_mm_sha256msg1_epu32 (7 samples, 0.01%)</title><rect x="59.7601%" y="533" width="0.0104%" height="15" fill="rgb(236,227,27)" fg:x="40212" fg:w="7"/><text x="60.0101%" y="543.50"></text></g><g><title>ShiftMessageB (19 samples, 0.03%)</title><rect x="59.7601%" y="565" width="0.0282%" height="15" fill="rgb(246,83,35)" fg:x="40212" fg:w="19"/><text x="60.0101%" y="575.50"></text></g><g><title>ShiftMessageC (12 samples, 0.02%)</title><rect x="59.7705%" y="549" width="0.0178%" height="15" fill="rgb(220,136,24)" fg:x="40219" fg:w="12"/><text x="60.0205%" y="559.50"></text></g><g><title>sha256_x86_shani::Transform (38 samples, 0.06%)</title><rect x="59.7378%" y="581" width="0.0565%" height="15" fill="rgb(217,3,25)" fg:x="40197" fg:w="38"/><text x="59.9878%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (77 samples, 0.11%)</title><rect x="59.6903%" y="645" width="0.1144%" height="15" fill="rgb(239,24,14)" fg:x="40165" fg:w="77"/><text x="59.9403%" y="655.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (77 samples, 0.11%)</title><rect x="59.6903%" y="629" width="0.1144%" height="15" fill="rgb(244,16,53)" fg:x="40165" fg:w="77"/><text x="59.9403%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (77 samples, 0.11%)</title><rect x="59.6903%" y="613" width="0.1144%" height="15" fill="rgb(208,175,44)" fg:x="40165" fg:w="77"/><text x="59.9403%" y="623.50"></text></g><g><title>HashWriter::write (77 samples, 0.11%)</title><rect x="59.6903%" y="597" width="0.1144%" height="15" fill="rgb(252,18,48)" fg:x="40165" fg:w="77"/><text x="59.9403%" y="607.50"></text></g><g><title>CSHA256::Write (13 samples, 0.02%)</title><rect x="59.8062%" y="485" width="0.0193%" height="15" fill="rgb(234,199,32)" fg:x="40243" fg:w="13"/><text x="60.0562%" y="495.50"></text></g><g><title>sha256_x86_shani::Transform (12 samples, 0.02%)</title><rect x="59.8270%" y="485" width="0.0178%" height="15" fill="rgb(225,77,54)" fg:x="40257" fg:w="12"/><text x="60.0770%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.06%)</title><rect x="59.8047%" y="549" width="0.0565%" height="15" fill="rgb(225,42,25)" fg:x="40242" fg:w="38"/><text x="60.0547%" y="559.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.06%)</title><rect x="59.8047%" y="533" width="0.0565%" height="15" fill="rgb(242,227,46)" fg:x="40242" fg:w="38"/><text x="60.0547%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (38 samples, 0.06%)</title><rect x="59.8047%" y="517" width="0.0565%" height="15" fill="rgb(246,197,35)" fg:x="40242" fg:w="38"/><text x="60.0547%" y="527.50"></text></g><g><title>HashWriter::write (38 samples, 0.06%)</title><rect x="59.8047%" y="501" width="0.0565%" height="15" fill="rgb(215,159,26)" fg:x="40242" fg:w="38"/><text x="60.0547%" y="511.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="59.8448%" y="485" width="0.0163%" height="15" fill="rgb(212,194,50)" fg:x="40269" fg:w="11"/><text x="60.0948%" y="495.50"></text></g><g><title>CSHA256::CSHA256 (7 samples, 0.01%)</title><rect x="59.8627%" y="437" width="0.0104%" height="15" fill="rgb(246,132,1)" fg:x="40281" fg:w="7"/><text x="60.1127%" y="447.50"></text></g><g><title>CSHA256::Write (27 samples, 0.04%)</title><rect x="59.8761%" y="421" width="0.0401%" height="15" fill="rgb(217,71,7)" fg:x="40290" fg:w="27"/><text x="60.1261%" y="431.50"></text></g><g><title>QuadRound (10 samples, 0.01%)</title><rect x="59.9236%" y="405" width="0.0149%" height="15" fill="rgb(252,59,32)" fg:x="40322" fg:w="10"/><text x="60.1736%" y="415.50"></text></g><g><title>_mm_sha256rnds2_epu32 (7 samples, 0.01%)</title><rect x="59.9281%" y="389" width="0.0104%" height="15" fill="rgb(253,204,25)" fg:x="40325" fg:w="7"/><text x="60.1781%" y="399.50"></text></g><g><title>sha256_x86_shani::Transform (15 samples, 0.02%)</title><rect x="59.9206%" y="421" width="0.0223%" height="15" fill="rgb(232,21,16)" fg:x="40320" fg:w="15"/><text x="60.1706%" y="431.50"></text></g><g><title>CSHA256::Write (51 samples, 0.08%)</title><rect x="59.8731%" y="437" width="0.0758%" height="15" fill="rgb(248,90,29)" fg:x="40288" fg:w="51"/><text x="60.1231%" y="447.50"></text></g><g><title>CTransaction::ComputeHash (10 samples, 0.01%)</title><rect x="59.9489%" y="437" width="0.0149%" height="15" fill="rgb(249,223,7)" fg:x="40339" fg:w="10"/><text x="60.1989%" y="447.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="59.9637%" y="437" width="0.0104%" height="15" fill="rgb(231,119,42)" fg:x="40349" fg:w="7"/><text x="60.2137%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (122 samples, 0.18%)</title><rect x="59.8047%" y="645" width="0.1813%" height="15" fill="rgb(215,41,35)" fg:x="40242" fg:w="122"/><text x="60.0547%" y="655.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (122 samples, 0.18%)</title><rect x="59.8047%" y="629" width="0.1813%" height="15" fill="rgb(220,44,45)" fg:x="40242" fg:w="122"/><text x="60.0547%" y="639.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (122 samples, 0.18%)</title><rect x="59.8047%" y="613" width="0.1813%" height="15" fill="rgb(253,197,36)" fg:x="40242" fg:w="122"/><text x="60.0547%" y="623.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (122 samples, 0.18%)</title><rect x="59.8047%" y="597" width="0.1813%" height="15" fill="rgb(245,225,54)" fg:x="40242" fg:w="122"/><text x="60.0547%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (122 samples, 0.18%)</title><rect x="59.8047%" y="581" width="0.1813%" height="15" fill="rgb(239,94,37)" fg:x="40242" fg:w="122"/><text x="60.0547%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (122 samples, 0.18%)</title><rect x="59.8047%" y="565" width="0.1813%" height="15" fill="rgb(242,217,10)" fg:x="40242" fg:w="122"/><text x="60.0547%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (84 samples, 0.12%)</title><rect x="59.8612%" y="549" width="0.1248%" height="15" fill="rgb(250,193,7)" fg:x="40280" fg:w="84"/><text x="60.1112%" y="559.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.12%)</title><rect x="59.8612%" y="533" width="0.1248%" height="15" fill="rgb(230,104,19)" fg:x="40280" fg:w="84"/><text x="60.1112%" y="543.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (84 samples, 0.12%)</title><rect x="59.8612%" y="517" width="0.1248%" height="15" fill="rgb(230,181,4)" fg:x="40280" fg:w="84"/><text x="60.1112%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (84 samples, 0.12%)</title><rect x="59.8612%" y="501" width="0.1248%" height="15" fill="rgb(216,219,49)" fg:x="40280" fg:w="84"/><text x="60.1112%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (84 samples, 0.12%)</title><rect x="59.8612%" y="485" width="0.1248%" height="15" fill="rgb(254,144,0)" fg:x="40280" fg:w="84"/><text x="60.1112%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (84 samples, 0.12%)</title><rect x="59.8612%" y="469" width="0.1248%" height="15" fill="rgb(205,209,38)" fg:x="40280" fg:w="84"/><text x="60.1112%" y="479.50"></text></g><g><title>HashWriter::write (84 samples, 0.12%)</title><rect x="59.8612%" y="453" width="0.1248%" height="15" fill="rgb(240,21,42)" fg:x="40280" fg:w="84"/><text x="60.1112%" y="463.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="59.9741%" y="437" width="0.0119%" height="15" fill="rgb(241,132,3)" fg:x="40356" fg:w="8"/><text x="60.2241%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (8 samples, 0.01%)</title><rect x="59.9741%" y="421" width="0.0119%" height="15" fill="rgb(225,14,2)" fg:x="40356" fg:w="8"/><text x="60.2241%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="59.9741%" y="405" width="0.0119%" height="15" fill="rgb(210,141,35)" fg:x="40356" fg:w="8"/><text x="60.2241%" y="415.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="59.9741%" y="389" width="0.0119%" height="15" fill="rgb(251,14,44)" fg:x="40356" fg:w="8"/><text x="60.2241%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (8 samples, 0.01%)</title><rect x="59.9741%" y="373" width="0.0119%" height="15" fill="rgb(247,48,18)" fg:x="40356" fg:w="8"/><text x="60.2241%" y="383.50"></text></g><g><title>HashWriter::write (8 samples, 0.01%)</title><rect x="59.9741%" y="357" width="0.0119%" height="15" fill="rgb(225,0,40)" fg:x="40356" fg:w="8"/><text x="60.2241%" y="367.50"></text></g><g><title>CSHA256::Write (13 samples, 0.02%)</title><rect x="59.9875%" y="533" width="0.0193%" height="15" fill="rgb(221,31,33)" fg:x="40365" fg:w="13"/><text x="60.2375%" y="543.50"></text></g><g><title>CSHA256::Write (10 samples, 0.01%)</title><rect x="60.0217%" y="485" width="0.0149%" height="15" fill="rgb(237,42,40)" fg:x="40388" fg:w="10"/><text x="60.2717%" y="495.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.01%)</title><rect x="60.0395%" y="485" width="0.0134%" height="15" fill="rgb(233,51,29)" fg:x="40400" fg:w="9"/><text x="60.2895%" y="495.50"></text></g><g><title>CSHA256::Write (39 samples, 0.06%)</title><rect x="60.0068%" y="501" width="0.0580%" height="15" fill="rgb(226,58,20)" fg:x="40378" fg:w="39"/><text x="60.2568%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.01%)</title><rect x="60.0648%" y="501" width="0.0119%" height="15" fill="rgb(208,98,7)" fg:x="40417" fg:w="8"/><text x="60.3148%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (48 samples, 0.07%)</title><rect x="60.0068%" y="533" width="0.0713%" height="15" fill="rgb(228,143,44)" fg:x="40378" fg:w="48"/><text x="60.2568%" y="543.50"></text></g><g><title>HashWriter::write (48 samples, 0.07%)</title><rect x="60.0068%" y="517" width="0.0713%" height="15" fill="rgb(246,55,38)" fg:x="40378" fg:w="48"/><text x="60.2568%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (10 samples, 0.01%)</title><rect x="60.0811%" y="533" width="0.0149%" height="15" fill="rgb(247,87,16)" fg:x="40428" fg:w="10"/><text x="60.3311%" y="543.50"></text></g><g><title>CSHA256::Write (15 samples, 0.02%)</title><rect x="60.1049%" y="469" width="0.0223%" height="15" fill="rgb(234,129,42)" fg:x="40444" fg:w="15"/><text x="60.3549%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.01%)</title><rect x="60.1287%" y="469" width="0.0119%" height="15" fill="rgb(220,82,16)" fg:x="40460" fg:w="8"/><text x="60.3787%" y="479.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.01%)</title><rect x="60.1406%" y="469" width="0.0119%" height="15" fill="rgb(211,88,4)" fg:x="40468" fg:w="8"/><text x="60.3906%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="60.1406%" y="453" width="0.0119%" height="15" fill="rgb(248,151,21)" fg:x="40468" fg:w="8"/><text x="60.3906%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (8 samples, 0.01%)</title><rect x="60.1406%" y="437" width="0.0119%" height="15" fill="rgb(238,163,6)" fg:x="40468" fg:w="8"/><text x="60.3906%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="60.1406%" y="421" width="0.0119%" height="15" fill="rgb(209,183,11)" fg:x="40468" fg:w="8"/><text x="60.3906%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="60.1406%" y="405" width="0.0119%" height="15" fill="rgb(219,37,20)" fg:x="40468" fg:w="8"/><text x="60.3906%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="60.1406%" y="389" width="0.0119%" height="15" fill="rgb(210,158,4)" fg:x="40468" fg:w="8"/><text x="60.3906%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (318 samples, 0.47%)</title><rect x="59.6903%" y="757" width="0.4726%" height="15" fill="rgb(221,167,53)" fg:x="40165" fg:w="318"/><text x="59.9403%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (318 samples, 0.47%)</title><rect x="59.6903%" y="741" width="0.4726%" height="15" fill="rgb(237,151,45)" fg:x="40165" fg:w="318"/><text x="59.9403%" y="751.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (318 samples, 0.47%)</title><rect x="59.6903%" y="725" width="0.4726%" height="15" fill="rgb(231,39,3)" fg:x="40165" fg:w="318"/><text x="59.9403%" y="735.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (318 samples, 0.47%)</title><rect x="59.6903%" y="709" width="0.4726%" height="15" fill="rgb(212,167,28)" fg:x="40165" fg:w="318"/><text x="59.9403%" y="719.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (318 samples, 0.47%)</title><rect x="59.6903%" y="693" width="0.4726%" height="15" fill="rgb(232,178,8)" fg:x="40165" fg:w="318"/><text x="59.9403%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (318 samples, 0.47%)</title><rect x="59.6903%" y="677" width="0.4726%" height="15" fill="rgb(225,151,20)" fg:x="40165" fg:w="318"/><text x="59.9403%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (318 samples, 0.47%)</title><rect x="59.6903%" y="661" width="0.4726%" height="15" fill="rgb(238,3,37)" fg:x="40165" fg:w="318"/><text x="59.9403%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (119 samples, 0.18%)</title><rect x="59.9860%" y="645" width="0.1768%" height="15" fill="rgb(251,147,42)" fg:x="40364" fg:w="119"/><text x="60.2360%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (119 samples, 0.18%)</title><rect x="59.9860%" y="629" width="0.1768%" height="15" fill="rgb(208,173,10)" fg:x="40364" fg:w="119"/><text x="60.2360%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (119 samples, 0.18%)</title><rect x="59.9860%" y="613" width="0.1768%" height="15" fill="rgb(246,225,4)" fg:x="40364" fg:w="119"/><text x="60.2360%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (119 samples, 0.18%)</title><rect x="59.9860%" y="597" width="0.1768%" height="15" fill="rgb(248,102,6)" fg:x="40364" fg:w="119"/><text x="60.2360%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (119 samples, 0.18%)</title><rect x="59.9860%" y="581" width="0.1768%" height="15" fill="rgb(232,6,21)" fg:x="40364" fg:w="119"/><text x="60.2360%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (119 samples, 0.18%)</title><rect x="59.9860%" y="565" width="0.1768%" height="15" fill="rgb(221,179,22)" fg:x="40364" fg:w="119"/><text x="60.2360%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (119 samples, 0.18%)</title><rect x="59.9860%" y="549" width="0.1768%" height="15" fill="rgb(252,50,20)" fg:x="40364" fg:w="119"/><text x="60.2360%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (43 samples, 0.06%)</title><rect x="60.0990%" y="533" width="0.0639%" height="15" fill="rgb(222,56,38)" fg:x="40440" fg:w="43"/><text x="60.3490%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (39 samples, 0.06%)</title><rect x="60.1049%" y="517" width="0.0580%" height="15" fill="rgb(206,193,29)" fg:x="40444" fg:w="39"/><text x="60.3549%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (39 samples, 0.06%)</title><rect x="60.1049%" y="501" width="0.0580%" height="15" fill="rgb(239,192,45)" fg:x="40444" fg:w="39"/><text x="60.3549%" y="511.50"></text></g><g><title>HashWriter::write (39 samples, 0.06%)</title><rect x="60.1049%" y="485" width="0.0580%" height="15" fill="rgb(254,18,36)" fg:x="40444" fg:w="39"/><text x="60.3549%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="60.1525%" y="469" width="0.0104%" height="15" fill="rgb(221,127,11)" fg:x="40476" fg:w="7"/><text x="60.4025%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (335 samples, 0.50%)</title><rect x="59.6680%" y="837" width="0.4979%" height="15" fill="rgb(234,146,35)" fg:x="40150" fg:w="335"/><text x="59.9180%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (335 samples, 0.50%)</title><rect x="59.6680%" y="821" width="0.4979%" height="15" fill="rgb(254,201,37)" fg:x="40150" fg:w="335"/><text x="59.9180%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (335 samples, 0.50%)</title><rect x="59.6680%" y="805" width="0.4979%" height="15" fill="rgb(211,202,23)" fg:x="40150" fg:w="335"/><text x="59.9180%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (335 samples, 0.50%)</title><rect x="59.6680%" y="789" width="0.4979%" height="15" fill="rgb(237,91,2)" fg:x="40150" fg:w="335"/><text x="59.9180%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (335 samples, 0.50%)</title><rect x="59.6680%" y="773" width="0.4979%" height="15" fill="rgb(226,228,36)" fg:x="40150" fg:w="335"/><text x="59.9180%" y="783.50"></text></g><g><title>CSHA256::Write (11 samples, 0.02%)</title><rect x="60.2119%" y="565" width="0.0163%" height="15" fill="rgb(213,63,50)" fg:x="40516" fg:w="11"/><text x="60.4619%" y="575.50"></text></g><g><title>CSHA256::Write (38 samples, 0.06%)</title><rect x="60.1837%" y="581" width="0.0565%" height="15" fill="rgb(235,194,19)" fg:x="40497" fg:w="38"/><text x="60.4337%" y="591.50"></text></g><g><title>QuadRound (9 samples, 0.01%)</title><rect x="60.2402%" y="565" width="0.0134%" height="15" fill="rgb(207,204,18)" fg:x="40535" fg:w="9"/><text x="60.4902%" y="575.50"></text></g><g><title>ShiftMessageB (9 samples, 0.01%)</title><rect x="60.2535%" y="565" width="0.0134%" height="15" fill="rgb(248,8,7)" fg:x="40544" fg:w="9"/><text x="60.5035%" y="575.50"></text></g><g><title>sha256_x86_shani::Transform (19 samples, 0.03%)</title><rect x="60.2402%" y="581" width="0.0282%" height="15" fill="rgb(223,145,47)" fg:x="40535" fg:w="19"/><text x="60.4902%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (7 samples, 0.01%)</title><rect x="60.2684%" y="565" width="0.0104%" height="15" fill="rgb(228,84,11)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="549" width="0.0104%" height="15" fill="rgb(218,76,45)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="533" width="0.0104%" height="15" fill="rgb(223,80,15)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="517" width="0.0104%" height="15" fill="rgb(219,218,33)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="501" width="0.0104%" height="15" fill="rgb(208,51,11)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="485" width="0.0104%" height="15" fill="rgb(229,165,39)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="469" width="0.0104%" height="15" fill="rgb(241,100,24)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="479.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="453" width="0.0104%" height="15" fill="rgb(228,14,23)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="463.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="437" width="0.0104%" height="15" fill="rgb(247,116,52)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="447.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="421" width="0.0104%" height="15" fill="rgb(216,149,33)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="405" width="0.0104%" height="15" fill="rgb(238,142,29)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="415.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (7 samples, 0.01%)</title><rect x="60.2684%" y="389" width="0.0104%" height="15" fill="rgb(224,83,40)" fg:x="40554" fg:w="7"/><text x="60.5184%" y="399.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.01%)</title><rect x="60.2684%" y="581" width="0.0134%" height="15" fill="rgb(234,165,11)" fg:x="40554" fg:w="9"/><text x="60.5184%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (74 samples, 0.11%)</title><rect x="60.1807%" y="645" width="0.1100%" height="15" fill="rgb(215,96,23)" fg:x="40495" fg:w="74"/><text x="60.4307%" y="655.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (73 samples, 0.11%)</title><rect x="60.1822%" y="629" width="0.1085%" height="15" fill="rgb(233,179,26)" fg:x="40496" fg:w="73"/><text x="60.4322%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (73 samples, 0.11%)</title><rect x="60.1822%" y="613" width="0.1085%" height="15" fill="rgb(225,129,33)" fg:x="40496" fg:w="73"/><text x="60.4322%" y="623.50"></text></g><g><title>HashWriter::write (73 samples, 0.11%)</title><rect x="60.1822%" y="597" width="0.1085%" height="15" fill="rgb(237,49,13)" fg:x="40496" fg:w="73"/><text x="60.4322%" y="607.50"></text></g><g><title>CSHA256::Write (56 samples, 0.08%)</title><rect x="60.3278%" y="485" width="0.0832%" height="15" fill="rgb(211,3,31)" fg:x="40594" fg:w="56"/><text x="60.5778%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (14 samples, 0.02%)</title><rect x="60.4259%" y="485" width="0.0208%" height="15" fill="rgb(216,152,19)" fg:x="40660" fg:w="14"/><text x="60.6759%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (14 samples, 0.02%)</title><rect x="60.4259%" y="469" width="0.0208%" height="15" fill="rgb(251,121,35)" fg:x="40660" fg:w="14"/><text x="60.6759%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (14 samples, 0.02%)</title><rect x="60.4259%" y="453" width="0.0208%" height="15" fill="rgb(210,217,47)" fg:x="40660" fg:w="14"/><text x="60.6759%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.02%)</title><rect x="60.4259%" y="437" width="0.0208%" height="15" fill="rgb(244,116,22)" fg:x="40660" fg:w="14"/><text x="60.6759%" y="447.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="60.4259%" y="421" width="0.0208%" height="15" fill="rgb(228,17,21)" fg:x="40660" fg:w="14"/><text x="60.6759%" y="431.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="60.4259%" y="405" width="0.0208%" height="15" fill="rgb(240,149,34)" fg:x="40660" fg:w="14"/><text x="60.6759%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (12 samples, 0.02%)</title><rect x="60.4289%" y="389" width="0.0178%" height="15" fill="rgb(208,125,47)" fg:x="40662" fg:w="12"/><text x="60.6789%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (12 samples, 0.02%)</title><rect x="60.4289%" y="373" width="0.0178%" height="15" fill="rgb(249,186,39)" fg:x="40662" fg:w="12"/><text x="60.6789%" y="383.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="60.4289%" y="357" width="0.0178%" height="15" fill="rgb(240,220,33)" fg:x="40662" fg:w="12"/><text x="60.6789%" y="367.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="60.4289%" y="341" width="0.0178%" height="15" fill="rgb(243,110,23)" fg:x="40662" fg:w="12"/><text x="60.6789%" y="351.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (12 samples, 0.02%)</title><rect x="60.4289%" y="325" width="0.0178%" height="15" fill="rgb(219,163,46)" fg:x="40662" fg:w="12"/><text x="60.6789%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (12 samples, 0.02%)</title><rect x="60.4289%" y="309" width="0.0178%" height="15" fill="rgb(216,126,30)" fg:x="40662" fg:w="12"/><text x="60.6789%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (12 samples, 0.02%)</title><rect x="60.4289%" y="293" width="0.0178%" height="15" fill="rgb(208,139,11)" fg:x="40662" fg:w="12"/><text x="60.6789%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (11 samples, 0.02%)</title><rect x="60.4304%" y="277" width="0.0163%" height="15" fill="rgb(213,118,36)" fg:x="40663" fg:w="11"/><text x="60.6804%" y="287.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="60.4304%" y="261" width="0.0163%" height="15" fill="rgb(226,43,17)" fg:x="40663" fg:w="11"/><text x="60.6804%" y="271.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="60.4304%" y="245" width="0.0163%" height="15" fill="rgb(254,217,4)" fg:x="40663" fg:w="11"/><text x="60.6804%" y="255.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (11 samples, 0.02%)</title><rect x="60.4304%" y="229" width="0.0163%" height="15" fill="rgb(210,134,47)" fg:x="40663" fg:w="11"/><text x="60.6804%" y="239.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="60.4304%" y="213" width="0.0163%" height="15" fill="rgb(237,24,49)" fg:x="40663" fg:w="11"/><text x="60.6804%" y="223.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (11 samples, 0.02%)</title><rect x="60.4304%" y="197" width="0.0163%" height="15" fill="rgb(251,39,46)" fg:x="40663" fg:w="11"/><text x="60.6804%" y="207.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (11 samples, 0.02%)</title><rect x="60.4304%" y="181" width="0.0163%" height="15" fill="rgb(251,220,3)" fg:x="40663" fg:w="11"/><text x="60.6804%" y="191.50"></text></g><g><title>CSHA256::Write (114 samples, 0.17%)</title><rect x="60.2981%" y="501" width="0.1694%" height="15" fill="rgb(228,105,12)" fg:x="40574" fg:w="114"/><text x="60.5481%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="60.4467%" y="485" width="0.0208%" height="15" fill="rgb(215,196,1)" fg:x="40674" fg:w="14"/><text x="60.6967%" y="495.50"></text></g><g><title>_mm_add_epi32 (20 samples, 0.03%)</title><rect x="60.4779%" y="469" width="0.0297%" height="15" fill="rgb(214,33,39)" fg:x="40695" fg:w="20"/><text x="60.7279%" y="479.50"></text></g><g><title>_mm_sha256rnds2_epu32 (7 samples, 0.01%)</title><rect x="60.5077%" y="469" width="0.0104%" height="15" fill="rgb(220,19,52)" fg:x="40715" fg:w="7"/><text x="60.7577%" y="479.50"></text></g><g><title>QuadRound (33 samples, 0.05%)</title><rect x="60.4779%" y="485" width="0.0490%" height="15" fill="rgb(221,78,38)" fg:x="40695" fg:w="33"/><text x="60.7279%" y="495.50"></text></g><g><title>ShiftMessageA (18 samples, 0.03%)</title><rect x="60.5300%" y="469" width="0.0268%" height="15" fill="rgb(253,30,16)" fg:x="40730" fg:w="18"/><text x="60.7800%" y="479.50"></text></g><g><title>_mm_sha256msg1_epu32 (18 samples, 0.03%)</title><rect x="60.5300%" y="453" width="0.0268%" height="15" fill="rgb(242,65,0)" fg:x="40730" fg:w="18"/><text x="60.7800%" y="463.50"></text></g><g><title>_mm_add_epi32 (14 samples, 0.02%)</title><rect x="60.5567%" y="453" width="0.0208%" height="15" fill="rgb(235,201,12)" fg:x="40748" fg:w="14"/><text x="60.8067%" y="463.50"></text></g><g><title>ShiftMessageB (61 samples, 0.09%)</title><rect x="60.5300%" y="485" width="0.0907%" height="15" fill="rgb(233,161,9)" fg:x="40730" fg:w="61"/><text x="60.7800%" y="495.50"></text></g><g><title>ShiftMessageC (43 samples, 0.06%)</title><rect x="60.5567%" y="469" width="0.0639%" height="15" fill="rgb(241,207,41)" fg:x="40748" fg:w="43"/><text x="60.8067%" y="479.50"></text></g><g><title>_mm_sha256msg2_epu32 (25 samples, 0.04%)</title><rect x="60.5835%" y="453" width="0.0372%" height="15" fill="rgb(212,69,46)" fg:x="40766" fg:w="25"/><text x="60.8335%" y="463.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="60.6206%" y="469" width="0.0104%" height="15" fill="rgb(239,69,45)" fg:x="40791" fg:w="7"/><text x="60.8706%" y="479.50"></text></g><g><title>ShiftMessageC (15 samples, 0.02%)</title><rect x="60.6206%" y="485" width="0.0223%" height="15" fill="rgb(242,117,48)" fg:x="40791" fg:w="15"/><text x="60.8706%" y="495.50"></text></g><g><title>sha256_x86_shani::Transform (122 samples, 0.18%)</title><rect x="60.4675%" y="501" width="0.1813%" height="15" fill="rgb(228,41,36)" fg:x="40688" fg:w="122"/><text x="60.7175%" y="511.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.01%)</title><rect x="60.6488%" y="501" width="0.0149%" height="15" fill="rgb(212,3,32)" fg:x="40810" fg:w="10"/><text x="60.8988%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="60.6518%" y="485" width="0.0119%" height="15" fill="rgb(233,41,49)" fg:x="40812" fg:w="8"/><text x="60.9018%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (8 samples, 0.01%)</title><rect x="60.6518%" y="469" width="0.0119%" height="15" fill="rgb(252,170,49)" fg:x="40812" fg:w="8"/><text x="60.9018%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="60.6518%" y="453" width="0.0119%" height="15" fill="rgb(229,53,26)" fg:x="40812" fg:w="8"/><text x="60.9018%" y="463.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="60.6518%" y="437" width="0.0119%" height="15" fill="rgb(217,157,12)" fg:x="40812" fg:w="8"/><text x="60.9018%" y="447.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="60.6518%" y="421" width="0.0119%" height="15" fill="rgb(227,17,9)" fg:x="40812" fg:w="8"/><text x="60.9018%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (252 samples, 0.37%)</title><rect x="60.2981%" y="533" width="0.3745%" height="15" fill="rgb(218,84,12)" fg:x="40574" fg:w="252"/><text x="60.5481%" y="543.50"></text></g><g><title>HashWriter::write (252 samples, 0.37%)</title><rect x="60.2981%" y="517" width="0.3745%" height="15" fill="rgb(212,79,24)" fg:x="40574" fg:w="252"/><text x="60.5481%" y="527.50"></text></g><g><title>CSHA256::Write (12 samples, 0.02%)</title><rect x="60.6801%" y="469" width="0.0178%" height="15" fill="rgb(217,222,37)" fg:x="40831" fg:w="12"/><text x="60.9301%" y="479.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (353 samples, 0.52%)</title><rect x="60.1807%" y="757" width="0.5246%" height="15" fill="rgb(246,208,8)" fg:x="40495" fg:w="353"/><text x="60.4307%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (353 samples, 0.52%)</title><rect x="60.1807%" y="741" width="0.5246%" height="15" fill="rgb(244,133,10)" fg:x="40495" fg:w="353"/><text x="60.4307%" y="751.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (353 samples, 0.52%)</title><rect x="60.1807%" y="725" width="0.5246%" height="15" fill="rgb(209,219,41)" fg:x="40495" fg:w="353"/><text x="60.4307%" y="735.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (353 samples, 0.52%)</title><rect x="60.1807%" y="709" width="0.5246%" height="15" fill="rgb(253,175,45)" fg:x="40495" fg:w="353"/><text x="60.4307%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (353 samples, 0.52%)</title><rect x="60.1807%" y="693" width="0.5246%" height="15" fill="rgb(235,100,37)" fg:x="40495" fg:w="353"/><text x="60.4307%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (353 samples, 0.52%)</title><rect x="60.1807%" y="677" width="0.5246%" height="15" fill="rgb(225,87,19)" fg:x="40495" fg:w="353"/><text x="60.4307%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (353 samples, 0.52%)</title><rect x="60.1807%" y="661" width="0.5246%" height="15" fill="rgb(217,152,17)" fg:x="40495" fg:w="353"/><text x="60.4307%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (279 samples, 0.41%)</title><rect x="60.2907%" y="645" width="0.4146%" height="15" fill="rgb(235,72,13)" fg:x="40569" fg:w="279"/><text x="60.5407%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (279 samples, 0.41%)</title><rect x="60.2907%" y="629" width="0.4146%" height="15" fill="rgb(233,140,18)" fg:x="40569" fg:w="279"/><text x="60.5407%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (279 samples, 0.41%)</title><rect x="60.2907%" y="613" width="0.4146%" height="15" fill="rgb(207,212,28)" fg:x="40569" fg:w="279"/><text x="60.5407%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (279 samples, 0.41%)</title><rect x="60.2907%" y="597" width="0.4146%" height="15" fill="rgb(220,130,25)" fg:x="40569" fg:w="279"/><text x="60.5407%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (279 samples, 0.41%)</title><rect x="60.2907%" y="581" width="0.4146%" height="15" fill="rgb(205,55,34)" fg:x="40569" fg:w="279"/><text x="60.5407%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (279 samples, 0.41%)</title><rect x="60.2907%" y="565" width="0.4146%" height="15" fill="rgb(237,54,35)" fg:x="40569" fg:w="279"/><text x="60.5407%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (279 samples, 0.41%)</title><rect x="60.2907%" y="549" width="0.4146%" height="15" fill="rgb(208,67,23)" fg:x="40569" fg:w="279"/><text x="60.5407%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.03%)</title><rect x="60.6801%" y="533" width="0.0253%" height="15" fill="rgb(206,207,50)" fg:x="40831" fg:w="17"/><text x="60.9301%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.03%)</title><rect x="60.6801%" y="517" width="0.0253%" height="15" fill="rgb(213,211,42)" fg:x="40831" fg:w="17"/><text x="60.9301%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (17 samples, 0.03%)</title><rect x="60.6801%" y="501" width="0.0253%" height="15" fill="rgb(252,197,50)" fg:x="40831" fg:w="17"/><text x="60.9301%" y="511.50"></text></g><g><title>HashWriter::write (17 samples, 0.03%)</title><rect x="60.6801%" y="485" width="0.0253%" height="15" fill="rgb(251,211,41)" fg:x="40831" fg:w="17"/><text x="60.9301%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (371 samples, 0.55%)</title><rect x="60.1659%" y="837" width="0.5514%" height="15" fill="rgb(229,211,5)" fg:x="40485" fg:w="371"/><text x="60.4159%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (371 samples, 0.55%)</title><rect x="60.1659%" y="821" width="0.5514%" height="15" fill="rgb(239,36,31)" fg:x="40485" fg:w="371"/><text x="60.4159%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (371 samples, 0.55%)</title><rect x="60.1659%" y="805" width="0.5514%" height="15" fill="rgb(248,67,31)" fg:x="40485" fg:w="371"/><text x="60.4159%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (371 samples, 0.55%)</title><rect x="60.1659%" y="789" width="0.5514%" height="15" fill="rgb(249,55,44)" fg:x="40485" fg:w="371"/><text x="60.4159%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (371 samples, 0.55%)</title><rect x="60.1659%" y="773" width="0.5514%" height="15" fill="rgb(216,82,12)" fg:x="40485" fg:w="371"/><text x="60.4159%" y="783.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="60.7068%" y="757" width="0.0104%" height="15" fill="rgb(242,174,1)" fg:x="40849" fg:w="7"/><text x="60.9568%" y="767.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="60.7068%" y="741" width="0.0104%" height="15" fill="rgb(208,120,29)" fg:x="40849" fg:w="7"/><text x="60.9568%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (7 samples, 0.01%)</title><rect x="60.7068%" y="725" width="0.0104%" height="15" fill="rgb(221,105,43)" fg:x="40849" fg:w="7"/><text x="60.9568%" y="735.50"></text></g><g><title>HashWriter::write (7 samples, 0.01%)</title><rect x="60.7068%" y="709" width="0.0104%" height="15" fill="rgb(234,124,22)" fg:x="40849" fg:w="7"/><text x="60.9568%" y="719.50"></text></g><g><title>CSHA256::Write (7 samples, 0.01%)</title><rect x="60.7172%" y="757" width="0.0104%" height="15" fill="rgb(212,23,30)" fg:x="40856" fg:w="7"/><text x="60.9672%" y="767.50"></text></g><g><title>CTransaction::CTransaction (22 samples, 0.03%)</title><rect x="60.7276%" y="757" width="0.0327%" height="15" fill="rgb(219,122,53)" fg:x="40863" fg:w="22"/><text x="60.9776%" y="767.50"></text></g><g><title>CTransaction::ComputeHasWitness (9 samples, 0.01%)</title><rect x="60.7603%" y="757" width="0.0134%" height="15" fill="rgb(248,84,24)" fg:x="40885" fg:w="9"/><text x="61.0103%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (13 samples, 0.02%)</title><rect x="60.7737%" y="757" width="0.0193%" height="15" fill="rgb(245,115,18)" fg:x="40894" fg:w="13"/><text x="61.0237%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (762 samples, 1.13%)</title><rect x="59.6650%" y="853" width="1.1324%" height="15" fill="rgb(227,176,51)" fg:x="40148" fg:w="762"/><text x="59.9150%" y="863.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (54 samples, 0.08%)</title><rect x="60.7172%" y="837" width="0.0803%" height="15" fill="rgb(229,63,42)" fg:x="40856" fg:w="54"/><text x="60.9672%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="60.7172%" y="821" width="0.0803%" height="15" fill="rgb(247,202,24)" fg:x="40856" fg:w="54"/><text x="60.9672%" y="831.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (54 samples, 0.08%)</title><rect x="60.7172%" y="805" width="0.0803%" height="15" fill="rgb(244,173,20)" fg:x="40856" fg:w="54"/><text x="60.9672%" y="815.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (54 samples, 0.08%)</title><rect x="60.7172%" y="789" width="0.0803%" height="15" fill="rgb(242,81,47)" fg:x="40856" fg:w="54"/><text x="60.9672%" y="799.50"></text></g><g><title>HashWriter::write (54 samples, 0.08%)</title><rect x="60.7172%" y="773" width="0.0803%" height="15" fill="rgb(231,185,54)" fg:x="40856" fg:w="54"/><text x="60.9672%" y="783.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (836 samples, 1.24%)</title><rect x="59.5669%" y="933" width="1.2424%" height="15" fill="rgb(243,55,32)" fg:x="40082" fg:w="836"/><text x="59.8169%" y="943.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (836 samples, 1.24%)</title><rect x="59.5669%" y="917" width="1.2424%" height="15" fill="rgb(208,167,19)" fg:x="40082" fg:w="836"/><text x="59.8169%" y="927.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (836 samples, 1.24%)</title><rect x="59.5669%" y="901" width="1.2424%" height="15" fill="rgb(231,72,35)" fg:x="40082" fg:w="836"/><text x="59.8169%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (836 samples, 1.24%)</title><rect x="59.5669%" y="885" width="1.2424%" height="15" fill="rgb(250,173,51)" fg:x="40082" fg:w="836"/><text x="59.8169%" y="895.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (836 samples, 1.24%)</title><rect x="59.5669%" y="869" width="1.2424%" height="15" fill="rgb(209,5,22)" fg:x="40082" fg:w="836"/><text x="59.8169%" y="879.50"></text></g><g><title>CSHA256::Finalize (37 samples, 0.05%)</title><rect x="60.8495%" y="885" width="0.0550%" height="15" fill="rgb(250,174,19)" fg:x="40945" fg:w="37"/><text x="61.0995%" y="895.50"></text></g><g><title>CSHA256::Write (69 samples, 0.10%)</title><rect x="60.9119%" y="885" width="0.1025%" height="15" fill="rgb(217,3,49)" fg:x="40987" fg:w="69"/><text x="61.1619%" y="895.50"></text></g><g><title>memcpy (9 samples, 0.01%)</title><rect x="61.0011%" y="869" width="0.0134%" height="15" fill="rgb(218,225,5)" fg:x="41047" fg:w="9"/><text x="61.2511%" y="879.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.02%)</title><rect x="61.0382%" y="853" width="0.0178%" height="15" fill="rgb(236,89,11)" fg:x="41072" fg:w="12"/><text x="61.2882%" y="863.50"></text></g><g><title>QuadRound (27 samples, 0.04%)</title><rect x="61.0382%" y="869" width="0.0401%" height="15" fill="rgb(206,33,28)" fg:x="41072" fg:w="27"/><text x="61.2882%" y="879.50"></text></g><g><title>_mm_shuffle_epi32 (10 samples, 0.01%)</title><rect x="61.0635%" y="853" width="0.0149%" height="15" fill="rgb(241,56,42)" fg:x="41089" fg:w="10"/><text x="61.3135%" y="863.50"></text></g><g><title>ShiftMessageA (11 samples, 0.02%)</title><rect x="61.0798%" y="853" width="0.0163%" height="15" fill="rgb(222,44,11)" fg:x="41100" fg:w="11"/><text x="61.3298%" y="863.50"></text></g><g><title>_mm_sha256msg1_epu32 (11 samples, 0.02%)</title><rect x="61.0798%" y="837" width="0.0163%" height="15" fill="rgb(234,111,20)" fg:x="41100" fg:w="11"/><text x="61.3298%" y="847.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="61.0962%" y="837" width="0.0104%" height="15" fill="rgb(237,77,6)" fg:x="41111" fg:w="7"/><text x="61.3462%" y="847.50"></text></g><g><title>ShiftMessageB (34 samples, 0.05%)</title><rect x="61.0798%" y="869" width="0.0505%" height="15" fill="rgb(235,111,23)" fg:x="41100" fg:w="34"/><text x="61.3298%" y="879.50"></text></g><g><title>ShiftMessageC (23 samples, 0.03%)</title><rect x="61.0962%" y="853" width="0.0342%" height="15" fill="rgb(251,135,29)" fg:x="41111" fg:w="23"/><text x="61.3462%" y="863.50"></text></g><g><title>_mm_sha256msg2_epu32 (14 samples, 0.02%)</title><rect x="61.1095%" y="837" width="0.0208%" height="15" fill="rgb(217,57,1)" fg:x="41120" fg:w="14"/><text x="61.3595%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (70 samples, 0.10%)</title><rect x="61.0323%" y="885" width="0.1040%" height="15" fill="rgb(249,119,31)" fg:x="41068" fg:w="70"/><text x="61.2823%" y="895.50"></text></g><g><title>CSHA256::Write (230 samples, 0.34%)</title><rect x="60.8168%" y="901" width="0.3418%" height="15" fill="rgb(233,164,33)" fg:x="40923" fg:w="230"/><text x="61.0668%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (15 samples, 0.02%)</title><rect x="61.1363%" y="885" width="0.0223%" height="15" fill="rgb(250,217,43)" fg:x="41138" fg:w="15"/><text x="61.3863%" y="895.50"></text></g><g><title>_mm_add_epi32 (21 samples, 0.03%)</title><rect x="61.1690%" y="869" width="0.0312%" height="15" fill="rgb(232,154,50)" fg:x="41160" fg:w="21"/><text x="61.4190%" y="879.50"></text></g><g><title>QuadRound (29 samples, 0.04%)</title><rect x="61.1690%" y="885" width="0.0431%" height="15" fill="rgb(227,190,8)" fg:x="41160" fg:w="29"/><text x="61.4190%" y="895.50"></text></g><g><title>ShiftMessageA (8 samples, 0.01%)</title><rect x="61.2165%" y="869" width="0.0119%" height="15" fill="rgb(209,217,32)" fg:x="41192" fg:w="8"/><text x="61.4665%" y="879.50"></text></g><g><title>_mm_sha256msg1_epu32 (8 samples, 0.01%)</title><rect x="61.2165%" y="853" width="0.0119%" height="15" fill="rgb(243,203,50)" fg:x="41192" fg:w="8"/><text x="61.4665%" y="863.50"></text></g><g><title>_mm_add_epi32 (8 samples, 0.01%)</title><rect x="61.2284%" y="853" width="0.0119%" height="15" fill="rgb(232,152,27)" fg:x="41200" fg:w="8"/><text x="61.4784%" y="863.50"></text></g><g><title>_mm_alignr_epi8 (9 samples, 0.01%)</title><rect x="61.2403%" y="853" width="0.0134%" height="15" fill="rgb(240,34,29)" fg:x="41208" fg:w="9"/><text x="61.4903%" y="863.50"></text></g><g><title>ShiftMessageB (43 samples, 0.06%)</title><rect x="61.2165%" y="885" width="0.0639%" height="15" fill="rgb(215,185,52)" fg:x="41192" fg:w="43"/><text x="61.4665%" y="895.50"></text></g><g><title>ShiftMessageC (35 samples, 0.05%)</title><rect x="61.2284%" y="869" width="0.0520%" height="15" fill="rgb(240,89,49)" fg:x="41200" fg:w="35"/><text x="61.4784%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (18 samples, 0.03%)</title><rect x="61.2537%" y="853" width="0.0268%" height="15" fill="rgb(225,12,52)" fg:x="41217" fg:w="18"/><text x="61.5037%" y="863.50"></text></g><g><title>ShiftMessageC (9 samples, 0.01%)</title><rect x="61.2804%" y="885" width="0.0134%" height="15" fill="rgb(239,128,45)" fg:x="41235" fg:w="9"/><text x="61.5304%" y="895.50"></text></g><g><title>sha256_x86_shani::Transform (92 samples, 0.14%)</title><rect x="61.1586%" y="901" width="0.1367%" height="15" fill="rgb(211,78,47)" fg:x="41153" fg:w="92"/><text x="61.4086%" y="911.50"></text></g><g><title>CSHA256::Finalize (339 samples, 0.50%)</title><rect x="60.8093%" y="917" width="0.5038%" height="15" fill="rgb(232,31,21)" fg:x="40918" fg:w="339"/><text x="61.0593%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="61.2983%" y="901" width="0.0149%" height="15" fill="rgb(222,168,14)" fg:x="41247" fg:w="10"/><text x="61.5483%" y="911.50"></text></g><g><title>CSHA256::Write (10 samples, 0.01%)</title><rect x="61.3131%" y="917" width="0.0149%" height="15" fill="rgb(209,128,24)" fg:x="41257" fg:w="10"/><text x="61.5631%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.01%)</title><rect x="61.3280%" y="917" width="0.0119%" height="15" fill="rgb(249,35,13)" fg:x="41267" fg:w="8"/><text x="61.5780%" y="927.50"></text></g><g><title>CTransaction::ComputeHash (1,195 samples, 1.78%)</title><rect x="59.5669%" y="949" width="1.7759%" height="15" fill="rgb(218,7,2)" fg:x="40082" fg:w="1195"/><text x="59.8169%" y="959.50">C..</text></g><g><title>HashWriter::GetHash (359 samples, 0.53%)</title><rect x="60.8093%" y="933" width="0.5335%" height="15" fill="rgb(238,107,27)" fg:x="40918" fg:w="359"/><text x="61.0593%" y="943.50"></text></g><g><title>CSHA256::CSHA256 (8 samples, 0.01%)</title><rect x="61.3444%" y="837" width="0.0119%" height="15" fill="rgb(217,88,38)" fg:x="41278" fg:w="8"/><text x="61.5944%" y="847.50"></text></g><g><title>CSHA256::Write (51 samples, 0.08%)</title><rect x="61.3562%" y="837" width="0.0758%" height="15" fill="rgb(230,207,0)" fg:x="41286" fg:w="51"/><text x="61.6062%" y="847.50"></text></g><g><title>QuadRound (9 samples, 0.01%)</title><rect x="61.4439%" y="821" width="0.0134%" height="15" fill="rgb(249,64,54)" fg:x="41345" fg:w="9"/><text x="61.6939%" y="831.50"></text></g><g><title>ShiftMessageB (12 samples, 0.02%)</title><rect x="61.4588%" y="821" width="0.0178%" height="15" fill="rgb(231,7,11)" fg:x="41355" fg:w="12"/><text x="61.7088%" y="831.50"></text></g><g><title>ShiftMessageC (9 samples, 0.01%)</title><rect x="61.4632%" y="805" width="0.0134%" height="15" fill="rgb(205,149,21)" fg:x="41358" fg:w="9"/><text x="61.7132%" y="815.50"></text></g><g><title>ShiftMessageC (7 samples, 0.01%)</title><rect x="61.4766%" y="821" width="0.0104%" height="15" fill="rgb(215,126,34)" fg:x="41367" fg:w="7"/><text x="61.7266%" y="831.50"></text></g><g><title>sha256_x86_shani::Transform (36 samples, 0.05%)</title><rect x="61.4395%" y="837" width="0.0535%" height="15" fill="rgb(241,132,45)" fg:x="41342" fg:w="36"/><text x="61.6895%" y="847.50"></text></g><g><title>CSHA256::Write (41 samples, 0.06%)</title><rect x="61.5301%" y="565" width="0.0609%" height="15" fill="rgb(252,69,32)" fg:x="41403" fg:w="41"/><text x="61.7801%" y="575.50"></text></g><g><title>memcpy (11 samples, 0.02%)</title><rect x="61.5747%" y="549" width="0.0163%" height="15" fill="rgb(232,204,19)" fg:x="41433" fg:w="11"/><text x="61.8247%" y="559.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="61.5955%" y="533" width="0.0104%" height="15" fill="rgb(249,15,47)" fg:x="41447" fg:w="7"/><text x="61.8455%" y="543.50"></text></g><g><title>QuadRound (12 samples, 0.02%)</title><rect x="61.5955%" y="549" width="0.0178%" height="15" fill="rgb(209,227,23)" fg:x="41447" fg:w="12"/><text x="61.8455%" y="559.50"></text></g><g><title>ShiftMessageB (12 samples, 0.02%)</title><rect x="61.6133%" y="549" width="0.0178%" height="15" fill="rgb(248,92,24)" fg:x="41459" fg:w="12"/><text x="61.8633%" y="559.50"></text></g><g><title>ShiftMessageC (9 samples, 0.01%)</title><rect x="61.6178%" y="533" width="0.0134%" height="15" fill="rgb(247,59,2)" fg:x="41462" fg:w="9"/><text x="61.8678%" y="543.50"></text></g><g><title>sha256_x86_shani::Transform (29 samples, 0.04%)</title><rect x="61.5925%" y="565" width="0.0431%" height="15" fill="rgb(221,30,5)" fg:x="41445" fg:w="29"/><text x="61.8425%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (78 samples, 0.12%)</title><rect x="61.5286%" y="629" width="0.1159%" height="15" fill="rgb(208,108,53)" fg:x="41402" fg:w="78"/><text x="61.7786%" y="639.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (78 samples, 0.12%)</title><rect x="61.5286%" y="613" width="0.1159%" height="15" fill="rgb(211,183,26)" fg:x="41402" fg:w="78"/><text x="61.7786%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (78 samples, 0.12%)</title><rect x="61.5286%" y="597" width="0.1159%" height="15" fill="rgb(232,132,4)" fg:x="41402" fg:w="78"/><text x="61.7786%" y="607.50"></text></g><g><title>HashWriter::write (78 samples, 0.12%)</title><rect x="61.5286%" y="581" width="0.1159%" height="15" fill="rgb(253,128,37)" fg:x="41402" fg:w="78"/><text x="61.7786%" y="591.50"></text></g><g><title>CSHA256::Write (12 samples, 0.02%)</title><rect x="61.6460%" y="469" width="0.0178%" height="15" fill="rgb(221,58,24)" fg:x="41481" fg:w="12"/><text x="61.8960%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.04%)</title><rect x="61.6460%" y="533" width="0.0386%" height="15" fill="rgb(230,54,45)" fg:x="41481" fg:w="26"/><text x="61.8960%" y="543.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.04%)</title><rect x="61.6460%" y="517" width="0.0386%" height="15" fill="rgb(254,21,18)" fg:x="41481" fg:w="26"/><text x="61.8960%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (26 samples, 0.04%)</title><rect x="61.6460%" y="501" width="0.0386%" height="15" fill="rgb(221,108,0)" fg:x="41481" fg:w="26"/><text x="61.8960%" y="511.50"></text></g><g><title>HashWriter::write (26 samples, 0.04%)</title><rect x="61.6460%" y="485" width="0.0386%" height="15" fill="rgb(206,95,1)" fg:x="41481" fg:w="26"/><text x="61.8960%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="61.6743%" y="469" width="0.0104%" height="15" fill="rgb(237,52,5)" fg:x="41500" fg:w="7"/><text x="61.9243%" y="479.50"></text></g><g><title>CSHA256::Write (20 samples, 0.03%)</title><rect x="61.6966%" y="405" width="0.0297%" height="15" fill="rgb(218,150,34)" fg:x="41515" fg:w="20"/><text x="61.9466%" y="415.50"></text></g><g><title>CSHA256::Write (34 samples, 0.05%)</title><rect x="61.6847%" y="421" width="0.0505%" height="15" fill="rgb(235,194,28)" fg:x="41507" fg:w="34"/><text x="61.9347%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (65 samples, 0.10%)</title><rect x="61.6445%" y="629" width="0.0966%" height="15" fill="rgb(245,92,18)" fg:x="41480" fg:w="65"/><text x="61.8945%" y="639.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (65 samples, 0.10%)</title><rect x="61.6445%" y="613" width="0.0966%" height="15" fill="rgb(253,203,53)" fg:x="41480" fg:w="65"/><text x="61.8945%" y="623.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (65 samples, 0.10%)</title><rect x="61.6445%" y="597" width="0.0966%" height="15" fill="rgb(249,185,47)" fg:x="41480" fg:w="65"/><text x="61.8945%" y="607.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (65 samples, 0.10%)</title><rect x="61.6445%" y="581" width="0.0966%" height="15" fill="rgb(252,194,52)" fg:x="41480" fg:w="65"/><text x="61.8945%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (65 samples, 0.10%)</title><rect x="61.6445%" y="565" width="0.0966%" height="15" fill="rgb(210,53,36)" fg:x="41480" fg:w="65"/><text x="61.8945%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (65 samples, 0.10%)</title><rect x="61.6445%" y="549" width="0.0966%" height="15" fill="rgb(237,37,25)" fg:x="41480" fg:w="65"/><text x="61.8945%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (38 samples, 0.06%)</title><rect x="61.6847%" y="533" width="0.0565%" height="15" fill="rgb(242,116,27)" fg:x="41507" fg:w="38"/><text x="61.9347%" y="543.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.06%)</title><rect x="61.6847%" y="517" width="0.0565%" height="15" fill="rgb(213,185,26)" fg:x="41507" fg:w="38"/><text x="61.9347%" y="527.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.06%)</title><rect x="61.6847%" y="501" width="0.0565%" height="15" fill="rgb(225,204,8)" fg:x="41507" fg:w="38"/><text x="61.9347%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (38 samples, 0.06%)</title><rect x="61.6847%" y="485" width="0.0565%" height="15" fill="rgb(254,111,37)" fg:x="41507" fg:w="38"/><text x="61.9347%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (38 samples, 0.06%)</title><rect x="61.6847%" y="469" width="0.0565%" height="15" fill="rgb(242,35,9)" fg:x="41507" fg:w="38"/><text x="61.9347%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (38 samples, 0.06%)</title><rect x="61.6847%" y="453" width="0.0565%" height="15" fill="rgb(232,138,49)" fg:x="41507" fg:w="38"/><text x="61.9347%" y="463.50"></text></g><g><title>HashWriter::write (38 samples, 0.06%)</title><rect x="61.6847%" y="437" width="0.0565%" height="15" fill="rgb(247,56,4)" fg:x="41507" fg:w="38"/><text x="61.9347%" y="447.50"></text></g><g><title>CSHA256::Write (10 samples, 0.01%)</title><rect x="61.7411%" y="517" width="0.0149%" height="15" fill="rgb(226,179,17)" fg:x="41545" fg:w="10"/><text x="61.9911%" y="527.50"></text></g><g><title>CSHA256::Write (15 samples, 0.02%)</title><rect x="61.7560%" y="485" width="0.0223%" height="15" fill="rgb(216,163,45)" fg:x="41555" fg:w="15"/><text x="62.0060%" y="495.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="61.7783%" y="485" width="0.0104%" height="15" fill="rgb(211,157,3)" fg:x="41570" fg:w="7"/><text x="62.0283%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (23 samples, 0.03%)</title><rect x="61.7560%" y="517" width="0.0342%" height="15" fill="rgb(234,44,20)" fg:x="41555" fg:w="23"/><text x="62.0060%" y="527.50"></text></g><g><title>HashWriter::write (23 samples, 0.03%)</title><rect x="61.7560%" y="501" width="0.0342%" height="15" fill="rgb(254,138,23)" fg:x="41555" fg:w="23"/><text x="62.0060%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (11 samples, 0.02%)</title><rect x="61.7917%" y="517" width="0.0163%" height="15" fill="rgb(206,119,39)" fg:x="41579" fg:w="11"/><text x="62.0417%" y="527.50"></text></g><g><title>CSHA256::Write (23 samples, 0.03%)</title><rect x="61.8169%" y="453" width="0.0342%" height="15" fill="rgb(231,105,52)" fg:x="41596" fg:w="23"/><text x="62.0669%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.01%)</title><rect x="61.8541%" y="453" width="0.0104%" height="15" fill="rgb(250,20,5)" fg:x="41621" fg:w="7"/><text x="62.1041%" y="463.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="61.8645%" y="453" width="0.0104%" height="15" fill="rgb(215,198,30)" fg:x="41628" fg:w="7"/><text x="62.1145%" y="463.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (238 samples, 0.35%)</title><rect x="61.5286%" y="741" width="0.3537%" height="15" fill="rgb(246,142,8)" fg:x="41402" fg:w="238"/><text x="61.7786%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (238 samples, 0.35%)</title><rect x="61.5286%" y="725" width="0.3537%" height="15" fill="rgb(243,26,38)" fg:x="41402" fg:w="238"/><text x="61.7786%" y="735.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (238 samples, 0.35%)</title><rect x="61.5286%" y="709" width="0.3537%" height="15" fill="rgb(205,133,28)" fg:x="41402" fg:w="238"/><text x="61.7786%" y="719.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (238 samples, 0.35%)</title><rect x="61.5286%" y="693" width="0.3537%" height="15" fill="rgb(212,34,0)" fg:x="41402" fg:w="238"/><text x="61.7786%" y="703.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (238 samples, 0.35%)</title><rect x="61.5286%" y="677" width="0.3537%" height="15" fill="rgb(251,226,22)" fg:x="41402" fg:w="238"/><text x="61.7786%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (238 samples, 0.35%)</title><rect x="61.5286%" y="661" width="0.3537%" height="15" fill="rgb(252,119,9)" fg:x="41402" fg:w="238"/><text x="61.7786%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (238 samples, 0.35%)</title><rect x="61.5286%" y="645" width="0.3537%" height="15" fill="rgb(213,150,50)" fg:x="41402" fg:w="238"/><text x="61.7786%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (95 samples, 0.14%)</title><rect x="61.7411%" y="629" width="0.1412%" height="15" fill="rgb(212,24,39)" fg:x="41545" fg:w="95"/><text x="61.9911%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (95 samples, 0.14%)</title><rect x="61.7411%" y="613" width="0.1412%" height="15" fill="rgb(213,46,39)" fg:x="41545" fg:w="95"/><text x="61.9911%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (95 samples, 0.14%)</title><rect x="61.7411%" y="597" width="0.1412%" height="15" fill="rgb(239,106,12)" fg:x="41545" fg:w="95"/><text x="61.9911%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (95 samples, 0.14%)</title><rect x="61.7411%" y="581" width="0.1412%" height="15" fill="rgb(249,229,21)" fg:x="41545" fg:w="95"/><text x="61.9911%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (95 samples, 0.14%)</title><rect x="61.7411%" y="565" width="0.1412%" height="15" fill="rgb(212,158,3)" fg:x="41545" fg:w="95"/><text x="61.9911%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (95 samples, 0.14%)</title><rect x="61.7411%" y="549" width="0.1412%" height="15" fill="rgb(253,26,48)" fg:x="41545" fg:w="95"/><text x="61.9911%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (95 samples, 0.14%)</title><rect x="61.7411%" y="533" width="0.1412%" height="15" fill="rgb(238,178,20)" fg:x="41545" fg:w="95"/><text x="61.9911%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.07%)</title><rect x="61.8125%" y="517" width="0.0698%" height="15" fill="rgb(208,86,15)" fg:x="41593" fg:w="47"/><text x="62.0625%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.07%)</title><rect x="61.8169%" y="501" width="0.0654%" height="15" fill="rgb(239,42,53)" fg:x="41596" fg:w="44"/><text x="62.0669%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (44 samples, 0.07%)</title><rect x="61.8169%" y="485" width="0.0654%" height="15" fill="rgb(245,226,8)" fg:x="41596" fg:w="44"/><text x="62.0669%" y="495.50"></text></g><g><title>HashWriter::write (44 samples, 0.07%)</title><rect x="61.8169%" y="469" width="0.0654%" height="15" fill="rgb(216,176,32)" fg:x="41596" fg:w="44"/><text x="62.0669%" y="479.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (13 samples, 0.02%)</title><rect x="61.8823%" y="741" width="0.0193%" height="15" fill="rgb(231,186,21)" fg:x="41640" fg:w="13"/><text x="62.1323%" y="751.50"></text></g><g><title>CSHA256::Write (17 samples, 0.03%)</title><rect x="61.9031%" y="677" width="0.0253%" height="15" fill="rgb(205,95,49)" fg:x="41654" fg:w="17"/><text x="62.1531%" y="687.50"></text></g><g><title>CTransaction::ComputeWitnessHash (25 samples, 0.04%)</title><rect x="61.9329%" y="677" width="0.0372%" height="15" fill="rgb(217,145,8)" fg:x="41674" fg:w="25"/><text x="62.1829%" y="687.50"></text></g><g><title>CTransaction::ComputeWitnessHash (19 samples, 0.03%)</title><rect x="61.9418%" y="661" width="0.0282%" height="15" fill="rgb(239,144,48)" fg:x="41680" fg:w="19"/><text x="62.1918%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (323 samples, 0.48%)</title><rect x="61.5004%" y="821" width="0.4800%" height="15" fill="rgb(214,189,23)" fg:x="41383" fg:w="323"/><text x="61.7504%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (323 samples, 0.48%)</title><rect x="61.5004%" y="805" width="0.4800%" height="15" fill="rgb(229,157,17)" fg:x="41383" fg:w="323"/><text x="61.7504%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (323 samples, 0.48%)</title><rect x="61.5004%" y="789" width="0.4800%" height="15" fill="rgb(230,5,48)" fg:x="41383" fg:w="323"/><text x="61.7504%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (323 samples, 0.48%)</title><rect x="61.5004%" y="773" width="0.4800%" height="15" fill="rgb(224,156,48)" fg:x="41383" fg:w="323"/><text x="61.7504%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (323 samples, 0.48%)</title><rect x="61.5004%" y="757" width="0.4800%" height="15" fill="rgb(223,14,29)" fg:x="41383" fg:w="323"/><text x="61.7504%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (53 samples, 0.08%)</title><rect x="61.9016%" y="741" width="0.0788%" height="15" fill="rgb(229,96,36)" fg:x="41653" fg:w="53"/><text x="62.1516%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (53 samples, 0.08%)</title><rect x="61.9016%" y="725" width="0.0788%" height="15" fill="rgb(231,102,53)" fg:x="41653" fg:w="53"/><text x="62.1516%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (53 samples, 0.08%)</title><rect x="61.9016%" y="709" width="0.0788%" height="15" fill="rgb(210,77,38)" fg:x="41653" fg:w="53"/><text x="62.1516%" y="719.50"></text></g><g><title>HashWriter::write (53 samples, 0.08%)</title><rect x="61.9016%" y="693" width="0.0788%" height="15" fill="rgb(235,131,6)" fg:x="41653" fg:w="53"/><text x="62.1516%" y="703.50"></text></g><g><title>CSHA256::Write (8 samples, 0.01%)</title><rect x="62.0131%" y="549" width="0.0119%" height="15" fill="rgb(252,55,38)" fg:x="41728" fg:w="8"/><text x="62.2631%" y="559.50"></text></g><g><title>CSHA256::Write (28 samples, 0.04%)</title><rect x="61.9893%" y="565" width="0.0416%" height="15" fill="rgb(246,38,14)" fg:x="41712" fg:w="28"/><text x="62.2393%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.06%)</title><rect x="61.9893%" y="629" width="0.0565%" height="15" fill="rgb(242,27,5)" fg:x="41712" fg:w="38"/><text x="62.2393%" y="639.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.06%)</title><rect x="61.9893%" y="613" width="0.0565%" height="15" fill="rgb(228,65,35)" fg:x="41712" fg:w="38"/><text x="62.2393%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (38 samples, 0.06%)</title><rect x="61.9893%" y="597" width="0.0565%" height="15" fill="rgb(245,93,11)" fg:x="41712" fg:w="38"/><text x="62.2393%" y="607.50"></text></g><g><title>HashWriter::write (38 samples, 0.06%)</title><rect x="61.9893%" y="581" width="0.0565%" height="15" fill="rgb(213,1,31)" fg:x="41712" fg:w="38"/><text x="62.2393%" y="591.50"></text></g><g><title>CSHA256::Write (53 samples, 0.08%)</title><rect x="62.0993%" y="469" width="0.0788%" height="15" fill="rgb(237,205,14)" fg:x="41786" fg:w="53"/><text x="62.3493%" y="479.50"></text></g><g><title>memcpy (10 samples, 0.01%)</title><rect x="62.1632%" y="453" width="0.0149%" height="15" fill="rgb(232,118,45)" fg:x="41829" fg:w="10"/><text x="62.4132%" y="463.50"></text></g><g><title>CSHA256::Write (104 samples, 0.15%)</title><rect x="62.0577%" y="485" width="0.1546%" height="15" fill="rgb(218,5,6)" fg:x="41758" fg:w="104"/><text x="62.3077%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="62.1959%" y="469" width="0.0163%" height="15" fill="rgb(251,87,51)" fg:x="41851" fg:w="11"/><text x="62.4459%" y="479.50"></text></g><g><title>_mm_add_epi32 (21 samples, 0.03%)</title><rect x="62.2227%" y="453" width="0.0312%" height="15" fill="rgb(207,225,20)" fg:x="41869" fg:w="21"/><text x="62.4727%" y="463.50"></text></g><g><title>_mm_sha256rnds2_epu32 (13 samples, 0.02%)</title><rect x="62.2539%" y="453" width="0.0193%" height="15" fill="rgb(222,78,54)" fg:x="41890" fg:w="13"/><text x="62.5039%" y="463.50"></text></g><g><title>QuadRound (39 samples, 0.06%)</title><rect x="62.2227%" y="469" width="0.0580%" height="15" fill="rgb(232,85,16)" fg:x="41869" fg:w="39"/><text x="62.4727%" y="479.50"></text></g><g><title>ShiftMessageA (27 samples, 0.04%)</title><rect x="62.2806%" y="453" width="0.0401%" height="15" fill="rgb(244,25,33)" fg:x="41908" fg:w="27"/><text x="62.5306%" y="463.50"></text></g><g><title>_mm_sha256msg1_epu32 (27 samples, 0.04%)</title><rect x="62.2806%" y="437" width="0.0401%" height="15" fill="rgb(233,24,36)" fg:x="41908" fg:w="27"/><text x="62.5306%" y="447.50"></text></g><g><title>_mm_add_epi32 (7 samples, 0.01%)</title><rect x="62.3207%" y="437" width="0.0104%" height="15" fill="rgb(253,49,54)" fg:x="41935" fg:w="7"/><text x="62.5707%" y="447.50"></text></g><g><title>ShiftMessageB (58 samples, 0.09%)</title><rect x="62.2806%" y="469" width="0.0862%" height="15" fill="rgb(245,12,22)" fg:x="41908" fg:w="58"/><text x="62.5306%" y="479.50"></text></g><g><title>ShiftMessageC (31 samples, 0.05%)</title><rect x="62.3207%" y="453" width="0.0461%" height="15" fill="rgb(253,141,28)" fg:x="41935" fg:w="31"/><text x="62.5707%" y="463.50"></text></g><g><title>_mm_sha256msg2_epu32 (18 samples, 0.03%)</title><rect x="62.3401%" y="437" width="0.0268%" height="15" fill="rgb(225,207,27)" fg:x="41948" fg:w="18"/><text x="62.5901%" y="447.50"></text></g><g><title>_mm_add_epi32 (8 samples, 0.01%)</title><rect x="62.3668%" y="453" width="0.0119%" height="15" fill="rgb(220,84,2)" fg:x="41966" fg:w="8"/><text x="62.6168%" y="463.50"></text></g><g><title>ShiftMessageC (11 samples, 0.02%)</title><rect x="62.3668%" y="469" width="0.0163%" height="15" fill="rgb(224,37,37)" fg:x="41966" fg:w="11"/><text x="62.6168%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (117 samples, 0.17%)</title><rect x="62.2137%" y="485" width="0.1739%" height="15" fill="rgb(220,143,18)" fg:x="41863" fg:w="117"/><text x="62.4637%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.01%)</title><rect x="62.3876%" y="485" width="0.0134%" height="15" fill="rgb(210,88,33)" fg:x="41980" fg:w="9"/><text x="62.6376%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (8 samples, 0.01%)</title><rect x="62.3891%" y="469" width="0.0119%" height="15" fill="rgb(219,87,51)" fg:x="41981" fg:w="8"/><text x="62.6391%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (8 samples, 0.01%)</title><rect x="62.3891%" y="453" width="0.0119%" height="15" fill="rgb(211,7,35)" fg:x="41981" fg:w="8"/><text x="62.6391%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.01%)</title><rect x="62.3891%" y="437" width="0.0119%" height="15" fill="rgb(232,77,2)" fg:x="41981" fg:w="8"/><text x="62.6391%" y="447.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="62.3891%" y="421" width="0.0119%" height="15" fill="rgb(249,94,25)" fg:x="41981" fg:w="8"/><text x="62.6391%" y="431.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="62.3891%" y="405" width="0.0119%" height="15" fill="rgb(215,112,2)" fg:x="41981" fg:w="8"/><text x="62.6391%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (238 samples, 0.35%)</title><rect x="62.0562%" y="517" width="0.3537%" height="15" fill="rgb(226,115,48)" fg:x="41757" fg:w="238"/><text x="62.3062%" y="527.50"></text></g><g><title>HashWriter::write (238 samples, 0.35%)</title><rect x="62.0562%" y="501" width="0.3537%" height="15" fill="rgb(249,196,10)" fg:x="41757" fg:w="238"/><text x="62.3062%" y="511.50"></text></g><g><title>CSHA256::Write (14 samples, 0.02%)</title><rect x="62.4248%" y="453" width="0.0208%" height="15" fill="rgb(237,109,14)" fg:x="42005" fg:w="14"/><text x="62.6748%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.01%)</title><rect x="62.4500%" y="453" width="0.0119%" height="15" fill="rgb(217,103,53)" fg:x="42022" fg:w="8"/><text x="62.7000%" y="463.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (321 samples, 0.48%)</title><rect x="61.9893%" y="741" width="0.4770%" height="15" fill="rgb(244,137,9)" fg:x="41712" fg:w="321"/><text x="62.2393%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (321 samples, 0.48%)</title><rect x="61.9893%" y="725" width="0.4770%" height="15" fill="rgb(227,201,3)" fg:x="41712" fg:w="321"/><text x="62.2393%" y="735.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (321 samples, 0.48%)</title><rect x="61.9893%" y="709" width="0.4770%" height="15" fill="rgb(243,94,6)" fg:x="41712" fg:w="321"/><text x="62.2393%" y="719.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (321 samples, 0.48%)</title><rect x="61.9893%" y="693" width="0.4770%" height="15" fill="rgb(235,118,5)" fg:x="41712" fg:w="321"/><text x="62.2393%" y="703.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (321 samples, 0.48%)</title><rect x="61.9893%" y="677" width="0.4770%" height="15" fill="rgb(247,10,30)" fg:x="41712" fg:w="321"/><text x="62.2393%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (321 samples, 0.48%)</title><rect x="61.9893%" y="661" width="0.4770%" height="15" fill="rgb(205,26,28)" fg:x="41712" fg:w="321"/><text x="62.2393%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (321 samples, 0.48%)</title><rect x="61.9893%" y="645" width="0.4770%" height="15" fill="rgb(206,99,35)" fg:x="41712" fg:w="321"/><text x="62.2393%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (283 samples, 0.42%)</title><rect x="62.0458%" y="629" width="0.4206%" height="15" fill="rgb(238,130,40)" fg:x="41750" fg:w="283"/><text x="62.2958%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (283 samples, 0.42%)</title><rect x="62.0458%" y="613" width="0.4206%" height="15" fill="rgb(224,126,31)" fg:x="41750" fg:w="283"/><text x="62.2958%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (283 samples, 0.42%)</title><rect x="62.0458%" y="597" width="0.4206%" height="15" fill="rgb(254,105,17)" fg:x="41750" fg:w="283"/><text x="62.2958%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (283 samples, 0.42%)</title><rect x="62.0458%" y="581" width="0.4206%" height="15" fill="rgb(216,87,36)" fg:x="41750" fg:w="283"/><text x="62.2958%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (283 samples, 0.42%)</title><rect x="62.0458%" y="565" width="0.4206%" height="15" fill="rgb(240,21,12)" fg:x="41750" fg:w="283"/><text x="62.2958%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (283 samples, 0.42%)</title><rect x="62.0458%" y="549" width="0.4206%" height="15" fill="rgb(245,192,34)" fg:x="41750" fg:w="283"/><text x="62.2958%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (283 samples, 0.42%)</title><rect x="62.0458%" y="533" width="0.4206%" height="15" fill="rgb(226,100,49)" fg:x="41750" fg:w="283"/><text x="62.2958%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.05%)</title><rect x="62.4203%" y="517" width="0.0461%" height="15" fill="rgb(245,188,27)" fg:x="42002" fg:w="31"/><text x="62.6703%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.04%)</title><rect x="62.4218%" y="501" width="0.0446%" height="15" fill="rgb(212,170,8)" fg:x="42003" fg:w="30"/><text x="62.6718%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (30 samples, 0.04%)</title><rect x="62.4218%" y="485" width="0.0446%" height="15" fill="rgb(217,113,29)" fg:x="42003" fg:w="30"/><text x="62.6718%" y="495.50"></text></g><g><title>HashWriter::write (30 samples, 0.04%)</title><rect x="62.4218%" y="469" width="0.0446%" height="15" fill="rgb(237,30,3)" fg:x="42003" fg:w="30"/><text x="62.6718%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (330 samples, 0.49%)</title><rect x="61.9804%" y="821" width="0.4904%" height="15" fill="rgb(227,19,28)" fg:x="41706" fg:w="330"/><text x="62.2304%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (330 samples, 0.49%)</title><rect x="61.9804%" y="805" width="0.4904%" height="15" fill="rgb(239,172,45)" fg:x="41706" fg:w="330"/><text x="62.2304%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (330 samples, 0.49%)</title><rect x="61.9804%" y="789" width="0.4904%" height="15" fill="rgb(254,55,39)" fg:x="41706" fg:w="330"/><text x="62.2304%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (330 samples, 0.49%)</title><rect x="61.9804%" y="773" width="0.4904%" height="15" fill="rgb(249,208,12)" fg:x="41706" fg:w="330"/><text x="62.2304%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (330 samples, 0.49%)</title><rect x="61.9804%" y="757" width="0.4904%" height="15" fill="rgb(240,52,13)" fg:x="41706" fg:w="330"/><text x="62.2304%" y="767.50"></text></g><g><title>CSHA256::Write (117 samples, 0.17%)</title><rect x="62.5095%" y="661" width="0.1739%" height="15" fill="rgb(252,149,13)" fg:x="42062" fg:w="117"/><text x="62.7595%" y="671.50"></text></g><g><title>memcpy (21 samples, 0.03%)</title><rect x="62.6521%" y="645" width="0.0312%" height="15" fill="rgb(232,81,48)" fg:x="42158" fg:w="21"/><text x="62.9021%" y="655.50"></text></g><g><title>_mm_add_epi32 (29 samples, 0.04%)</title><rect x="62.7027%" y="629" width="0.0431%" height="15" fill="rgb(222,144,2)" fg:x="42192" fg:w="29"/><text x="62.9527%" y="639.50"></text></g><g><title>_mm_sha256rnds2_epu32 (14 samples, 0.02%)</title><rect x="62.7458%" y="629" width="0.0208%" height="15" fill="rgb(216,81,32)" fg:x="42221" fg:w="14"/><text x="62.9958%" y="639.50"></text></g><g><title>QuadRound (53 samples, 0.08%)</title><rect x="62.7027%" y="645" width="0.0788%" height="15" fill="rgb(244,78,51)" fg:x="42192" fg:w="53"/><text x="62.9527%" y="655.50"></text></g><g><title>_mm_shuffle_epi32 (10 samples, 0.01%)</title><rect x="62.7666%" y="629" width="0.0149%" height="15" fill="rgb(217,66,21)" fg:x="42235" fg:w="10"/><text x="63.0166%" y="639.50"></text></g><g><title>ShiftMessageA (26 samples, 0.04%)</title><rect x="62.7829%" y="629" width="0.0386%" height="15" fill="rgb(247,101,42)" fg:x="42246" fg:w="26"/><text x="63.0329%" y="639.50"></text></g><g><title>_mm_sha256msg1_epu32 (26 samples, 0.04%)</title><rect x="62.7829%" y="613" width="0.0386%" height="15" fill="rgb(227,81,39)" fg:x="42246" fg:w="26"/><text x="63.0329%" y="623.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.02%)</title><rect x="62.8216%" y="613" width="0.0238%" height="15" fill="rgb(220,223,44)" fg:x="42272" fg:w="16"/><text x="63.0716%" y="623.50"></text></g><g><title>_mm_alignr_epi8 (17 samples, 0.03%)</title><rect x="62.8453%" y="613" width="0.0253%" height="15" fill="rgb(205,218,2)" fg:x="42288" fg:w="17"/><text x="63.0953%" y="623.50"></text></g><g><title>ShiftMessageB (86 samples, 0.13%)</title><rect x="62.7829%" y="645" width="0.1278%" height="15" fill="rgb(212,207,28)" fg:x="42246" fg:w="86"/><text x="63.0329%" y="655.50"></text></g><g><title>ShiftMessageC (60 samples, 0.09%)</title><rect x="62.8216%" y="629" width="0.0892%" height="15" fill="rgb(224,12,41)" fg:x="42272" fg:w="60"/><text x="63.0716%" y="639.50"></text></g><g><title>_mm_sha256msg2_epu32 (27 samples, 0.04%)</title><rect x="62.8706%" y="613" width="0.0401%" height="15" fill="rgb(216,118,12)" fg:x="42305" fg:w="27"/><text x="63.1206%" y="623.50"></text></g><g><title>_mm_add_epi32 (8 samples, 0.01%)</title><rect x="62.9107%" y="629" width="0.0119%" height="15" fill="rgb(252,97,46)" fg:x="42332" fg:w="8"/><text x="63.1607%" y="639.50"></text></g><g><title>ShiftMessageC (12 samples, 0.02%)</title><rect x="62.9107%" y="645" width="0.0178%" height="15" fill="rgb(244,206,19)" fg:x="42332" fg:w="12"/><text x="63.1607%" y="655.50"></text></g><g><title>sha256_x86_shani::Transform (166 samples, 0.25%)</title><rect x="62.6863%" y="661" width="0.2467%" height="15" fill="rgb(231,84,31)" fg:x="42181" fg:w="166"/><text x="62.9363%" y="671.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (15 samples, 0.02%)</title><rect x="62.9494%" y="645" width="0.0223%" height="15" fill="rgb(244,133,0)" fg:x="42358" fg:w="15"/><text x="63.1994%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="62.9494%" y="629" width="0.0223%" height="15" fill="rgb(223,15,50)" fg:x="42358" fg:w="15"/><text x="63.1994%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (15 samples, 0.02%)</title><rect x="62.9494%" y="613" width="0.0223%" height="15" fill="rgb(250,118,49)" fg:x="42358" fg:w="15"/><text x="63.1994%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.02%)</title><rect x="62.9494%" y="597" width="0.0223%" height="15" fill="rgb(248,25,38)" fg:x="42358" fg:w="15"/><text x="63.1994%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="62.9494%" y="581" width="0.0223%" height="15" fill="rgb(215,70,14)" fg:x="42358" fg:w="15"/><text x="63.1994%" y="591.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (29 samples, 0.04%)</title><rect x="62.9330%" y="661" width="0.0431%" height="15" fill="rgb(215,28,15)" fg:x="42347" fg:w="29"/><text x="63.1830%" y="671.50"></text></g><g><title>CSHA256::Write (359 samples, 0.53%)</title><rect x="62.4902%" y="677" width="0.5335%" height="15" fill="rgb(243,6,28)" fg:x="42049" fg:w="359"/><text x="62.7402%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.05%)</title><rect x="62.9761%" y="661" width="0.0476%" height="15" fill="rgb(222,130,1)" fg:x="42376" fg:w="32"/><text x="63.2261%" y="671.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.02%)</title><rect x="63.0044%" y="645" width="0.0193%" height="15" fill="rgb(236,166,44)" fg:x="42395" fg:w="13"/><text x="63.2544%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (8 samples, 0.01%)</title><rect x="63.0118%" y="629" width="0.0119%" height="15" fill="rgb(221,108,14)" fg:x="42400" fg:w="8"/><text x="63.2618%" y="639.50"></text></g><g><title>HashWriter::write (8 samples, 0.01%)</title><rect x="63.0118%" y="613" width="0.0119%" height="15" fill="rgb(252,3,45)" fg:x="42400" fg:w="8"/><text x="63.2618%" y="623.50"></text></g><g><title>_mm_add_epi32 (17 samples, 0.03%)</title><rect x="63.0326%" y="645" width="0.0253%" height="15" fill="rgb(237,68,30)" fg:x="42414" fg:w="17"/><text x="63.2826%" y="655.50"></text></g><g><title>_mm_sha256rnds2_epu32 (7 samples, 0.01%)</title><rect x="63.0579%" y="645" width="0.0104%" height="15" fill="rgb(211,79,22)" fg:x="42431" fg:w="7"/><text x="63.3079%" y="655.50"></text></g><g><title>QuadRound (30 samples, 0.04%)</title><rect x="63.0326%" y="661" width="0.0446%" height="15" fill="rgb(252,185,21)" fg:x="42414" fg:w="30"/><text x="63.2826%" y="671.50"></text></g><g><title>ShiftMessageA (15 samples, 0.02%)</title><rect x="63.0772%" y="645" width="0.0223%" height="15" fill="rgb(225,189,26)" fg:x="42444" fg:w="15"/><text x="63.3272%" y="655.50"></text></g><g><title>_mm_sha256msg1_epu32 (15 samples, 0.02%)</title><rect x="63.0772%" y="629" width="0.0223%" height="15" fill="rgb(241,30,40)" fg:x="42444" fg:w="15"/><text x="63.3272%" y="639.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.02%)</title><rect x="63.0995%" y="629" width="0.0178%" height="15" fill="rgb(235,215,44)" fg:x="42459" fg:w="12"/><text x="63.3495%" y="639.50"></text></g><g><title>ShiftMessageB (39 samples, 0.06%)</title><rect x="63.0772%" y="661" width="0.0580%" height="15" fill="rgb(205,8,29)" fg:x="42444" fg:w="39"/><text x="63.3272%" y="671.50"></text></g><g><title>ShiftMessageC (24 samples, 0.04%)</title><rect x="63.0995%" y="645" width="0.0357%" height="15" fill="rgb(241,137,42)" fg:x="42459" fg:w="24"/><text x="63.3495%" y="655.50"></text></g><g><title>_mm_sha256msg2_epu32 (7 samples, 0.01%)</title><rect x="63.1247%" y="629" width="0.0104%" height="15" fill="rgb(237,155,2)" fg:x="42476" fg:w="7"/><text x="63.3747%" y="639.50"></text></g><g><title>ShiftMessageC (9 samples, 0.01%)</title><rect x="63.1351%" y="661" width="0.0134%" height="15" fill="rgb(245,29,42)" fg:x="42483" fg:w="9"/><text x="63.3851%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (88 samples, 0.13%)</title><rect x="63.0237%" y="677" width="0.1308%" height="15" fill="rgb(234,101,35)" fg:x="42408" fg:w="88"/><text x="63.2737%" y="687.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (450 samples, 0.67%)</title><rect x="62.4902%" y="709" width="0.6688%" height="15" fill="rgb(228,64,37)" fg:x="42049" fg:w="450"/><text x="62.7402%" y="719.50"></text></g><g><title>HashWriter::write (450 samples, 0.67%)</title><rect x="62.4902%" y="693" width="0.6688%" height="15" fill="rgb(217,214,36)" fg:x="42049" fg:w="450"/><text x="62.7402%" y="703.50"></text></g><g><title>CSHA256::Write (29 samples, 0.04%)</title><rect x="63.1663%" y="645" width="0.0431%" height="15" fill="rgb(243,70,3)" fg:x="42504" fg:w="29"/><text x="63.4163%" y="655.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.01%)</title><rect x="63.2184%" y="645" width="0.0104%" height="15" fill="rgb(253,158,52)" fg:x="42539" fg:w="7"/><text x="63.4684%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (508 samples, 0.75%)</title><rect x="62.4857%" y="741" width="0.7550%" height="15" fill="rgb(234,111,54)" fg:x="42046" fg:w="508"/><text x="62.7357%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (508 samples, 0.75%)</title><rect x="62.4857%" y="725" width="0.7550%" height="15" fill="rgb(217,70,32)" fg:x="42046" fg:w="508"/><text x="62.7357%" y="735.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="63.1663%" y="709" width="0.0743%" height="15" fill="rgb(234,18,33)" fg:x="42504" fg:w="50"/><text x="63.4163%" y="719.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="63.1663%" y="693" width="0.0743%" height="15" fill="rgb(234,12,49)" fg:x="42504" fg:w="50"/><text x="63.4163%" y="703.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (50 samples, 0.07%)</title><rect x="63.1663%" y="677" width="0.0743%" height="15" fill="rgb(236,10,21)" fg:x="42504" fg:w="50"/><text x="63.4163%" y="687.50"></text></g><g><title>HashWriter::write (50 samples, 0.07%)</title><rect x="63.1663%" y="661" width="0.0743%" height="15" fill="rgb(248,182,45)" fg:x="42504" fg:w="50"/><text x="63.4163%" y="671.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="63.2288%" y="645" width="0.0119%" height="15" fill="rgb(217,95,36)" fg:x="42546" fg:w="8"/><text x="63.4788%" y="655.50"></text></g><g><title>CSHA256::Write (8 samples, 0.01%)</title><rect x="63.2421%" y="677" width="0.0119%" height="15" fill="rgb(212,110,31)" fg:x="42555" fg:w="8"/><text x="63.4921%" y="687.50"></text></g><g><title>QuadRound (10 samples, 0.01%)</title><rect x="63.2585%" y="661" width="0.0149%" height="15" fill="rgb(206,32,53)" fg:x="42566" fg:w="10"/><text x="63.5085%" y="671.50"></text></g><g><title>ShiftMessageB (15 samples, 0.02%)</title><rect x="63.2733%" y="661" width="0.0223%" height="15" fill="rgb(246,141,37)" fg:x="42576" fg:w="15"/><text x="63.5233%" y="671.50"></text></g><g><title>ShiftMessageC (9 samples, 0.01%)</title><rect x="63.2823%" y="645" width="0.0134%" height="15" fill="rgb(219,16,7)" fg:x="42582" fg:w="9"/><text x="63.5323%" y="655.50"></text></g><g><title>sha256_x86_shani::Transform (29 samples, 0.04%)</title><rect x="63.2540%" y="677" width="0.0431%" height="15" fill="rgb(230,205,45)" fg:x="42563" fg:w="29"/><text x="63.5040%" y="687.50"></text></g><g><title>HashWriter::write (38 samples, 0.06%)</title><rect x="63.2421%" y="693" width="0.0565%" height="15" fill="rgb(231,43,49)" fg:x="42555" fg:w="38"/><text x="63.4921%" y="703.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (558 samples, 0.83%)</title><rect x="62.4708%" y="821" width="0.8293%" height="15" fill="rgb(212,106,34)" fg:x="42036" fg:w="558"/><text x="62.7208%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (558 samples, 0.83%)</title><rect x="62.4708%" y="805" width="0.8293%" height="15" fill="rgb(206,83,17)" fg:x="42036" fg:w="558"/><text x="62.7208%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (558 samples, 0.83%)</title><rect x="62.4708%" y="789" width="0.8293%" height="15" fill="rgb(244,154,49)" fg:x="42036" fg:w="558"/><text x="62.7208%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (558 samples, 0.83%)</title><rect x="62.4708%" y="773" width="0.8293%" height="15" fill="rgb(244,149,49)" fg:x="42036" fg:w="558"/><text x="62.7208%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (558 samples, 0.83%)</title><rect x="62.4708%" y="757" width="0.8293%" height="15" fill="rgb(227,134,18)" fg:x="42036" fg:w="558"/><text x="62.7208%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="63.2406%" y="741" width="0.0594%" height="15" fill="rgb(237,116,36)" fg:x="42554" fg:w="40"/><text x="63.4906%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (39 samples, 0.06%)</title><rect x="63.2421%" y="725" width="0.0580%" height="15" fill="rgb(205,129,40)" fg:x="42555" fg:w="39"/><text x="63.4921%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (39 samples, 0.06%)</title><rect x="63.2421%" y="709" width="0.0580%" height="15" fill="rgb(236,178,4)" fg:x="42555" fg:w="39"/><text x="63.4921%" y="719.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (16 samples, 0.02%)</title><rect x="63.3001%" y="821" width="0.0238%" height="15" fill="rgb(251,76,53)" fg:x="42594" fg:w="16"/><text x="63.5501%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="63.3001%" y="805" width="0.0238%" height="15" fill="rgb(242,92,40)" fg:x="42594" fg:w="16"/><text x="63.5501%" y="815.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="63.3001%" y="789" width="0.0238%" height="15" fill="rgb(209,45,30)" fg:x="42594" fg:w="16"/><text x="63.5501%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (16 samples, 0.02%)</title><rect x="63.3001%" y="773" width="0.0238%" height="15" fill="rgb(218,157,36)" fg:x="42594" fg:w="16"/><text x="63.5501%" y="783.50"></text></g><g><title>HashWriter::write (16 samples, 0.02%)</title><rect x="63.3001%" y="757" width="0.0238%" height="15" fill="rgb(222,186,16)" fg:x="42594" fg:w="16"/><text x="63.5501%" y="767.50"></text></g><g><title>CTransaction::ComputeWitnessHash (16 samples, 0.02%)</title><rect x="63.3001%" y="741" width="0.0238%" height="15" fill="rgb(254,72,35)" fg:x="42594" fg:w="16"/><text x="63.5501%" y="751.50"></text></g><g><title>CTransaction::ComputeWitnessHash (16 samples, 0.02%)</title><rect x="63.3001%" y="725" width="0.0238%" height="15" fill="rgb(224,25,35)" fg:x="42594" fg:w="16"/><text x="63.5501%" y="735.50"></text></g><g><title>CSHA256::Finalize (9 samples, 0.01%)</title><rect x="63.3268%" y="741" width="0.0134%" height="15" fill="rgb(206,135,52)" fg:x="42612" fg:w="9"/><text x="63.5768%" y="751.50"></text></g><g><title>WriteBE32 (8 samples, 0.01%)</title><rect x="63.3283%" y="725" width="0.0119%" height="15" fill="rgb(229,174,47)" fg:x="42613" fg:w="8"/><text x="63.5783%" y="735.50"></text></g><g><title>CSHA256::Write (13 samples, 0.02%)</title><rect x="63.3402%" y="741" width="0.0193%" height="15" fill="rgb(242,184,21)" fg:x="42621" fg:w="13"/><text x="63.5902%" y="751.50"></text></g><g><title>_mm_add_epi32 (16 samples, 0.02%)</title><rect x="63.3774%" y="709" width="0.0238%" height="15" fill="rgb(213,22,45)" fg:x="42646" fg:w="16"/><text x="63.6274%" y="719.50"></text></g><g><title>_mm_sha256rnds2_epu32 (8 samples, 0.01%)</title><rect x="63.4012%" y="709" width="0.0119%" height="15" fill="rgb(237,81,54)" fg:x="42662" fg:w="8"/><text x="63.6512%" y="719.50"></text></g><g><title>QuadRound (30 samples, 0.04%)</title><rect x="63.3774%" y="725" width="0.0446%" height="15" fill="rgb(248,177,18)" fg:x="42646" fg:w="30"/><text x="63.6274%" y="735.50"></text></g><g><title>ShiftMessageA (25 samples, 0.04%)</title><rect x="63.4220%" y="709" width="0.0372%" height="15" fill="rgb(254,31,16)" fg:x="42676" fg:w="25"/><text x="63.6720%" y="719.50"></text></g><g><title>_mm_sha256msg1_epu32 (25 samples, 0.04%)</title><rect x="63.4220%" y="693" width="0.0372%" height="15" fill="rgb(235,20,31)" fg:x="42676" fg:w="25"/><text x="63.6720%" y="703.50"></text></g><g><title>_mm_add_epi32 (8 samples, 0.01%)</title><rect x="63.4591%" y="693" width="0.0119%" height="15" fill="rgb(240,56,43)" fg:x="42701" fg:w="8"/><text x="63.7091%" y="703.50"></text></g><g><title>_mm_alignr_epi8 (13 samples, 0.02%)</title><rect x="63.4710%" y="693" width="0.0193%" height="15" fill="rgb(237,197,51)" fg:x="42709" fg:w="13"/><text x="63.7210%" y="703.50"></text></g><g><title>ShiftMessageB (64 samples, 0.10%)</title><rect x="63.4220%" y="725" width="0.0951%" height="15" fill="rgb(241,162,44)" fg:x="42676" fg:w="64"/><text x="63.6720%" y="735.50"></text></g><g><title>ShiftMessageC (39 samples, 0.06%)</title><rect x="63.4591%" y="709" width="0.0580%" height="15" fill="rgb(224,23,20)" fg:x="42701" fg:w="39"/><text x="63.7091%" y="719.50"></text></g><g><title>_mm_sha256msg2_epu32 (18 samples, 0.03%)</title><rect x="63.4903%" y="693" width="0.0268%" height="15" fill="rgb(250,109,34)" fg:x="42722" fg:w="18"/><text x="63.7403%" y="703.50"></text></g><g><title>ShiftMessageC (12 samples, 0.02%)</title><rect x="63.5171%" y="725" width="0.0178%" height="15" fill="rgb(214,175,50)" fg:x="42740" fg:w="12"/><text x="63.7671%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (148 samples, 0.22%)</title><rect x="63.3239%" y="821" width="0.2199%" height="15" fill="rgb(213,182,5)" fg:x="42610" fg:w="148"/><text x="63.5739%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (148 samples, 0.22%)</title><rect x="63.3239%" y="805" width="0.2199%" height="15" fill="rgb(209,199,19)" fg:x="42610" fg:w="148"/><text x="63.5739%" y="815.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (148 samples, 0.22%)</title><rect x="63.3239%" y="789" width="0.2199%" height="15" fill="rgb(236,224,42)" fg:x="42610" fg:w="148"/><text x="63.5739%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (148 samples, 0.22%)</title><rect x="63.3239%" y="773" width="0.2199%" height="15" fill="rgb(246,226,29)" fg:x="42610" fg:w="148"/><text x="63.5739%" y="783.50"></text></g><g><title>HashWriter::write (148 samples, 0.22%)</title><rect x="63.3239%" y="757" width="0.2199%" height="15" fill="rgb(227,223,11)" fg:x="42610" fg:w="148"/><text x="63.5739%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (123 samples, 0.18%)</title><rect x="63.3610%" y="741" width="0.1828%" height="15" fill="rgb(219,7,51)" fg:x="42635" fg:w="123"/><text x="63.6110%" y="751.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,381 samples, 2.05%)</title><rect x="61.4930%" y="837" width="2.0523%" height="15" fill="rgb(245,167,10)" fg:x="41378" fg:w="1381"/><text x="61.7430%" y="847.50">v..</text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1,492 samples, 2.22%)</title><rect x="61.3429%" y="917" width="2.2173%" height="15" fill="rgb(237,224,16)" fg:x="41277" fg:w="1492"/><text x="61.5929%" y="927.50">H..</text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1,492 samples, 2.22%)</title><rect x="61.3429%" y="901" width="2.2173%" height="15" fill="rgb(226,132,13)" fg:x="41277" fg:w="1492"/><text x="61.5929%" y="911.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1,492 samples, 2.22%)</title><rect x="61.3429%" y="885" width="2.2173%" height="15" fill="rgb(214,140,3)" fg:x="41277" fg:w="1492"/><text x="61.5929%" y="895.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1,491 samples, 2.22%)</title><rect x="61.3444%" y="869" width="2.2158%" height="15" fill="rgb(221,177,4)" fg:x="41278" fg:w="1491"/><text x="61.5944%" y="879.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1,491 samples, 2.22%)</title><rect x="61.3444%" y="853" width="2.2158%" height="15" fill="rgb(238,139,3)" fg:x="41278" fg:w="1491"/><text x="61.5944%" y="863.50">v..</text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.01%)</title><rect x="63.5453%" y="837" width="0.0149%" height="15" fill="rgb(216,17,39)" fg:x="42759" fg:w="10"/><text x="63.7953%" y="847.50"></text></g><g><title>CSHA256::Finalize (22 samples, 0.03%)</title><rect x="63.5854%" y="869" width="0.0327%" height="15" fill="rgb(238,120,9)" fg:x="42786" fg:w="22"/><text x="63.8354%" y="879.50"></text></g><g><title>CSHA256::Write (98 samples, 0.15%)</title><rect x="63.6270%" y="869" width="0.1456%" height="15" fill="rgb(244,92,53)" fg:x="42814" fg:w="98"/><text x="63.8770%" y="879.50"></text></g><g><title>memcpy (9 samples, 0.01%)</title><rect x="63.7593%" y="853" width="0.0134%" height="15" fill="rgb(224,148,33)" fg:x="42903" fg:w="9"/><text x="64.0093%" y="863.50"></text></g><g><title>CTransaction::ComputeWitnessHash (8 samples, 0.01%)</title><rect x="63.7727%" y="869" width="0.0119%" height="15" fill="rgb(243,6,36)" fg:x="42912" fg:w="8"/><text x="64.0227%" y="879.50"></text></g><g><title>CTransaction::ComputeWitnessHash (8 samples, 0.01%)</title><rect x="63.7727%" y="853" width="0.0119%" height="15" fill="rgb(230,102,11)" fg:x="42912" fg:w="8"/><text x="64.0227%" y="863.50"></text></g><g><title>HashWriter::GetHash (8 samples, 0.01%)</title><rect x="63.7727%" y="837" width="0.0119%" height="15" fill="rgb(234,148,36)" fg:x="42912" fg:w="8"/><text x="64.0227%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (12 samples, 0.02%)</title><rect x="63.7920%" y="869" width="0.0178%" height="15" fill="rgb(251,153,25)" fg:x="42925" fg:w="12"/><text x="64.0420%" y="879.50"></text></g><g><title>CSHA256::Write (184 samples, 0.27%)</title><rect x="63.5646%" y="885" width="0.2734%" height="15" fill="rgb(215,129,8)" fg:x="42772" fg:w="184"/><text x="63.8146%" y="895.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.03%)</title><rect x="63.8098%" y="869" width="0.0282%" height="15" fill="rgb(224,128,35)" fg:x="42937" fg:w="19"/><text x="64.0598%" y="879.50"></text></g><g><title>_mm_add_epi32 (36 samples, 0.05%)</title><rect x="63.8693%" y="853" width="0.0535%" height="15" fill="rgb(237,56,52)" fg:x="42977" fg:w="36"/><text x="64.1193%" y="863.50"></text></g><g><title>_mm_sha256rnds2_epu32 (24 samples, 0.04%)</title><rect x="63.9228%" y="853" width="0.0357%" height="15" fill="rgb(234,213,19)" fg:x="43013" fg:w="24"/><text x="64.1728%" y="863.50"></text></g><g><title>QuadRound (66 samples, 0.10%)</title><rect x="63.8693%" y="869" width="0.0981%" height="15" fill="rgb(252,82,23)" fg:x="42977" fg:w="66"/><text x="64.1193%" y="879.50"></text></g><g><title>ShiftMessageA (23 samples, 0.03%)</title><rect x="63.9733%" y="853" width="0.0342%" height="15" fill="rgb(254,201,21)" fg:x="43047" fg:w="23"/><text x="64.2233%" y="863.50"></text></g><g><title>_mm_sha256msg1_epu32 (23 samples, 0.03%)</title><rect x="63.9733%" y="837" width="0.0342%" height="15" fill="rgb(250,186,11)" fg:x="43047" fg:w="23"/><text x="64.2233%" y="847.50"></text></g><g><title>_mm_add_epi32 (25 samples, 0.04%)</title><rect x="64.0075%" y="837" width="0.0372%" height="15" fill="rgb(211,174,5)" fg:x="43070" fg:w="25"/><text x="64.2575%" y="847.50"></text></g><g><title>_mm_alignr_epi8 (10 samples, 0.01%)</title><rect x="64.0446%" y="837" width="0.0149%" height="15" fill="rgb(214,121,10)" fg:x="43095" fg:w="10"/><text x="64.2946%" y="847.50"></text></g><g><title>ShiftMessageB (88 samples, 0.13%)</title><rect x="63.9733%" y="869" width="0.1308%" height="15" fill="rgb(241,66,2)" fg:x="43047" fg:w="88"/><text x="64.2233%" y="879.50"></text></g><g><title>ShiftMessageC (65 samples, 0.10%)</title><rect x="64.0075%" y="853" width="0.0966%" height="15" fill="rgb(220,167,19)" fg:x="43070" fg:w="65"/><text x="64.2575%" y="863.50"></text></g><g><title>_mm_sha256msg2_epu32 (30 samples, 0.04%)</title><rect x="64.0595%" y="837" width="0.0446%" height="15" fill="rgb(231,54,50)" fg:x="43105" fg:w="30"/><text x="64.3095%" y="847.50"></text></g><g><title>_mm_add_epi32 (12 samples, 0.02%)</title><rect x="64.1041%" y="853" width="0.0178%" height="15" fill="rgb(239,217,53)" fg:x="43135" fg:w="12"/><text x="64.3541%" y="863.50"></text></g><g><title>ShiftMessageC (19 samples, 0.03%)</title><rect x="64.1041%" y="869" width="0.0282%" height="15" fill="rgb(248,8,0)" fg:x="43135" fg:w="19"/><text x="64.3541%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (7 samples, 0.01%)</title><rect x="64.1219%" y="853" width="0.0104%" height="15" fill="rgb(229,118,37)" fg:x="43147" fg:w="7"/><text x="64.3719%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (198 samples, 0.29%)</title><rect x="63.8455%" y="885" width="0.2943%" height="15" fill="rgb(253,223,43)" fg:x="42961" fg:w="198"/><text x="64.0955%" y="895.50"></text></g><g><title>CSHA256::Finalize (391 samples, 0.58%)</title><rect x="63.5602%" y="901" width="0.5811%" height="15" fill="rgb(211,77,36)" fg:x="42769" fg:w="391"/><text x="63.8102%" y="911.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1,903 samples, 2.83%)</title><rect x="61.3429%" y="949" width="2.8281%" height="15" fill="rgb(219,3,53)" fg:x="41277" fg:w="1903"/><text x="61.5929%" y="959.50">CT..</text></g><g><title>CTransaction::ComputeWitnessHash (1,903 samples, 2.83%)</title><rect x="61.3429%" y="933" width="2.8281%" height="15" fill="rgb(244,45,42)" fg:x="41277" fg:w="1903"/><text x="61.5929%" y="943.50">CT..</text></g><g><title>HashWriter::GetHash (411 samples, 0.61%)</title><rect x="63.5602%" y="917" width="0.6108%" height="15" fill="rgb(225,95,27)" fg:x="42769" fg:w="411"/><text x="63.8102%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (16 samples, 0.02%)</title><rect x="64.1472%" y="901" width="0.0238%" height="15" fill="rgb(207,74,8)" fg:x="43164" fg:w="16"/><text x="64.3972%" y="911.50"></text></g><g><title>DataStream::read (8 samples, 0.01%)</title><rect x="64.1710%" y="949" width="0.0119%" height="15" fill="rgb(243,63,36)" fg:x="43180" fg:w="8"/><text x="64.4210%" y="959.50"></text></g><g><title>sha256_x86_shani::Transform (14 samples, 0.02%)</title><rect x="64.1858%" y="949" width="0.0208%" height="15" fill="rgb(211,180,12)" fg:x="43190" fg:w="14"/><text x="64.4358%" y="959.50"></text></g><g><title>ShiftMessageB (8 samples, 0.01%)</title><rect x="64.1947%" y="933" width="0.0119%" height="15" fill="rgb(254,166,49)" fg:x="43196" fg:w="8"/><text x="64.4447%" y="943.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (14 samples, 0.02%)</title><rect x="64.2215%" y="757" width="0.0208%" height="15" fill="rgb(205,19,0)" fg:x="43214" fg:w="14"/><text x="64.4715%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="64.2215%" y="741" width="0.0208%" height="15" fill="rgb(224,172,32)" fg:x="43214" fg:w="14"/><text x="64.4715%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (14 samples, 0.02%)</title><rect x="64.2215%" y="725" width="0.0208%" height="15" fill="rgb(254,136,30)" fg:x="43214" fg:w="14"/><text x="64.4715%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (14 samples, 0.02%)</title><rect x="64.2215%" y="709" width="0.0208%" height="15" fill="rgb(246,19,35)" fg:x="43214" fg:w="14"/><text x="64.4715%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (14 samples, 0.02%)</title><rect x="64.2215%" y="693" width="0.0208%" height="15" fill="rgb(219,24,36)" fg:x="43214" fg:w="14"/><text x="64.4715%" y="703.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="64.2319%" y="677" width="0.0104%" height="15" fill="rgb(251,55,1)" fg:x="43221" fg:w="7"/><text x="64.4819%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (7 samples, 0.01%)</title><rect x="64.2319%" y="661" width="0.0104%" height="15" fill="rgb(218,117,39)" fg:x="43221" fg:w="7"/><text x="64.4819%" y="671.50"></text></g><g><title>CTransaction::CTransaction (3,163 samples, 4.70%)</title><rect x="59.5506%" y="965" width="4.7006%" height="15" fill="rgb(248,169,11)" fg:x="40071" fg:w="3163"/><text x="59.8006%" y="975.50">CTran..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="949" width="0.0372%" height="15" fill="rgb(244,40,44)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="933" width="0.0372%" height="15" fill="rgb(234,62,37)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="943.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="917" width="0.0372%" height="15" fill="rgb(207,117,42)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="927.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="901" width="0.0372%" height="15" fill="rgb(213,43,2)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="911.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="885" width="0.0372%" height="15" fill="rgb(244,202,51)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="895.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="869" width="0.0372%" height="15" fill="rgb(253,174,46)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="853" width="0.0372%" height="15" fill="rgb(251,23,1)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="863.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="837" width="0.0372%" height="15" fill="rgb(253,26,1)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="847.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="821" width="0.0372%" height="15" fill="rgb(216,89,31)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="831.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="805" width="0.0372%" height="15" fill="rgb(209,109,5)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="815.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="789" width="0.0372%" height="15" fill="rgb(229,63,13)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="799.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (25 samples, 0.04%)</title><rect x="64.2141%" y="773" width="0.0372%" height="15" fill="rgb(238,137,54)" fg:x="43209" fg:w="25"/><text x="64.4641%" y="783.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (32 samples, 0.05%)</title><rect x="64.2557%" y="965" width="0.0476%" height="15" fill="rgb(228,1,9)" fg:x="43237" fg:w="32"/><text x="64.5057%" y="975.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.03%)</title><rect x="64.3032%" y="965" width="0.0253%" height="15" fill="rgb(249,120,48)" fg:x="43269" fg:w="17"/><text x="64.5532%" y="975.50"></text></g><g><title>DataStream::read (8 samples, 0.01%)</title><rect x="64.3701%" y="645" width="0.0119%" height="15" fill="rgb(209,72,36)" fg:x="43314" fg:w="8"/><text x="64.6201%" y="655.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (9 samples, 0.01%)</title><rect x="64.3701%" y="661" width="0.0134%" height="15" fill="rgb(247,98,49)" fg:x="43314" fg:w="9"/><text x="64.6201%" y="671.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (30 samples, 0.04%)</title><rect x="64.3404%" y="773" width="0.0446%" height="15" fill="rgb(233,75,36)" fg:x="43294" fg:w="30"/><text x="64.5904%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (30 samples, 0.04%)</title><rect x="64.3404%" y="757" width="0.0446%" height="15" fill="rgb(225,14,24)" fg:x="43294" fg:w="30"/><text x="64.5904%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (30 samples, 0.04%)</title><rect x="64.3404%" y="741" width="0.0446%" height="15" fill="rgb(237,193,20)" fg:x="43294" fg:w="30"/><text x="64.5904%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.04%)</title><rect x="64.3404%" y="725" width="0.0446%" height="15" fill="rgb(239,122,19)" fg:x="43294" fg:w="30"/><text x="64.5904%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (30 samples, 0.04%)</title><rect x="64.3404%" y="709" width="0.0446%" height="15" fill="rgb(231,220,10)" fg:x="43294" fg:w="30"/><text x="64.5904%" y="719.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (24 samples, 0.04%)</title><rect x="64.3493%" y="693" width="0.0357%" height="15" fill="rgb(220,66,15)" fg:x="43300" fg:w="24"/><text x="64.5993%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (24 samples, 0.04%)</title><rect x="64.3493%" y="677" width="0.0357%" height="15" fill="rgb(215,171,52)" fg:x="43300" fg:w="24"/><text x="64.5993%" y="687.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,413 samples, 9.53%)</title><rect x="54.8604%" y="1029" width="9.5305%" height="15" fill="rgb(241,169,50)" fg:x="36915" fg:w="6413"/><text x="55.1104%" y="1039.50">std::_Sp_count..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,413 samples, 9.53%)</title><rect x="54.8604%" y="1013" width="9.5305%" height="15" fill="rgb(236,189,0)" fg:x="36915" fg:w="6413"/><text x="55.1104%" y="1023.50">void std::allo..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,413 samples, 9.53%)</title><rect x="54.8604%" y="997" width="9.5305%" height="15" fill="rgb(217,147,20)" fg:x="36915" fg:w="6413"/><text x="55.1104%" y="1007.50">void std::_Con..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,413 samples, 9.53%)</title><rect x="54.8604%" y="981" width="9.5305%" height="15" fill="rgb(206,188,39)" fg:x="36915" fg:w="6413"/><text x="55.1104%" y="991.50">CTransaction::..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="965" width="0.0594%" height="15" fill="rgb(227,118,25)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="975.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="949" width="0.0594%" height="15" fill="rgb(248,171,40)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="933" width="0.0594%" height="15" fill="rgb(251,90,54)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="943.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="917" width="0.0594%" height="15" fill="rgb(234,11,46)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="927.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="901" width="0.0594%" height="15" fill="rgb(229,134,13)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="911.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="885" width="0.0594%" height="15" fill="rgb(223,129,3)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="895.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="869" width="0.0594%" height="15" fill="rgb(221,124,13)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="879.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="853" width="0.0594%" height="15" fill="rgb(234,3,18)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="863.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="837" width="0.0594%" height="15" fill="rgb(249,199,20)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="847.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="821" width="0.0594%" height="15" fill="rgb(224,134,6)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="831.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="805" width="0.0594%" height="15" fill="rgb(254,83,26)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="815.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (40 samples, 0.06%)</title><rect x="64.3315%" y="789" width="0.0594%" height="15" fill="rgb(217,88,9)" fg:x="43288" fg:w="40"/><text x="64.5815%" y="799.50"></text></g><g><title>__lll_lock_wait_private (8 samples, 0.01%)</title><rect x="64.3939%" y="933" width="0.0119%" height="15" fill="rgb(225,73,2)" fg:x="43330" fg:w="8"/><text x="64.6439%" y="943.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="64.3954%" y="917" width="0.0104%" height="15" fill="rgb(226,44,39)" fg:x="43331" fg:w="7"/><text x="64.6454%" y="927.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="64.3954%" y="901" width="0.0104%" height="15" fill="rgb(228,53,17)" fg:x="43331" fg:w="7"/><text x="64.6454%" y="911.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="64.3954%" y="885" width="0.0104%" height="15" fill="rgb(212,27,27)" fg:x="43331" fg:w="7"/><text x="64.6454%" y="895.50"></text></g><g><title>__lll_lock_wake_private (35 samples, 0.05%)</title><rect x="64.4058%" y="933" width="0.0520%" height="15" fill="rgb(241,50,6)" fg:x="43338" fg:w="35"/><text x="64.6558%" y="943.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="64.4073%" y="917" width="0.0505%" height="15" fill="rgb(225,28,51)" fg:x="43339" fg:w="34"/><text x="64.6573%" y="927.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="64.4073%" y="901" width="0.0505%" height="15" fill="rgb(215,33,16)" fg:x="43339" fg:w="34"/><text x="64.6573%" y="911.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="64.4087%" y="885" width="0.0490%" height="15" fill="rgb(243,40,39)" fg:x="43340" fg:w="33"/><text x="64.6587%" y="895.50"></text></g><g><title>[unknown] (29 samples, 0.04%)</title><rect x="64.4147%" y="869" width="0.0431%" height="15" fill="rgb(225,11,42)" fg:x="43344" fg:w="29"/><text x="64.6647%" y="879.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="64.4191%" y="853" width="0.0386%" height="15" fill="rgb(241,220,38)" fg:x="43347" fg:w="26"/><text x="64.6691%" y="863.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="64.4281%" y="837" width="0.0297%" height="15" fill="rgb(244,52,35)" fg:x="43353" fg:w="20"/><text x="64.6781%" y="847.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="64.4310%" y="821" width="0.0268%" height="15" fill="rgb(246,42,46)" fg:x="43355" fg:w="18"/><text x="64.6810%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (6,486 samples, 9.64%)</title><rect x="54.8559%" y="1109" width="9.6390%" height="15" fill="rgb(205,184,13)" fg:x="36912" fg:w="6486"/><text x="55.1059%" y="1119.50">void Unseriali..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,483 samples, 9.63%)</title><rect x="54.8604%" y="1093" width="9.6346%" height="15" fill="rgb(209,48,36)" fg:x="36915" fg:w="6483"/><text x="55.1104%" y="1103.50">std::shared_pt..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,483 samples, 9.63%)</title><rect x="54.8604%" y="1077" width="9.6346%" height="15" fill="rgb(244,34,51)" fg:x="36915" fg:w="6483"/><text x="55.1104%" y="1087.50">std::shared_pt..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,483 samples, 9.63%)</title><rect x="54.8604%" y="1061" width="9.6346%" height="15" fill="rgb(221,107,33)" fg:x="36915" fg:w="6483"/><text x="55.1104%" y="1071.50">std::__shared_..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (6,483 samples, 9.63%)</title><rect x="54.8604%" y="1045" width="9.6346%" height="15" fill="rgb(224,203,12)" fg:x="36915" fg:w="6483"/><text x="55.1104%" y="1055.50">std::__shared_..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (70 samples, 0.10%)</title><rect x="64.3909%" y="1029" width="0.1040%" height="15" fill="rgb(230,215,18)" fg:x="43328" fg:w="70"/><text x="64.6409%" y="1039.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (70 samples, 0.10%)</title><rect x="64.3909%" y="1013" width="0.1040%" height="15" fill="rgb(206,185,35)" fg:x="43328" fg:w="70"/><text x="64.6409%" y="1023.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (70 samples, 0.10%)</title><rect x="64.3909%" y="997" width="0.1040%" height="15" fill="rgb(228,140,34)" fg:x="43328" fg:w="70"/><text x="64.6409%" y="1007.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (70 samples, 0.10%)</title><rect x="64.3909%" y="981" width="0.1040%" height="15" fill="rgb(208,93,13)" fg:x="43328" fg:w="70"/><text x="64.6409%" y="991.50"></text></g><g><title>operator new (68 samples, 0.10%)</title><rect x="64.3939%" y="965" width="0.1011%" height="15" fill="rgb(221,193,39)" fg:x="43330" fg:w="68"/><text x="64.6439%" y="975.50"></text></g><g><title>malloc (68 samples, 0.10%)</title><rect x="64.3939%" y="949" width="0.1011%" height="15" fill="rgb(241,132,34)" fg:x="43330" fg:w="68"/><text x="64.6439%" y="959.50"></text></g><g><title>_int_malloc (25 samples, 0.04%)</title><rect x="64.4578%" y="933" width="0.0372%" height="15" fill="rgb(221,141,10)" fg:x="43373" fg:w="25"/><text x="64.7078%" y="943.50"></text></g><g><title>CTxOut&amp; std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::emplace_back&lt;&gt; (7 samples, 0.01%)</title><rect x="64.4994%" y="1093" width="0.0104%" height="15" fill="rgb(226,90,31)" fg:x="43401" fg:w="7"/><text x="64.7494%" y="1103.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1333" width="9.8486%" height="15" fill="rgb(243,75,5)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1343.50">DataStream&amp; Da..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1317" width="9.8486%" height="15" fill="rgb(227,156,21)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1327.50">void Unseriali..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1301" width="9.8486%" height="15" fill="rgb(250,195,8)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1311.50">void ParamsWra..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1285" width="9.8486%" height="15" fill="rgb(220,134,5)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1295.50">void Unseriali..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1269" width="9.8486%" height="15" fill="rgb(246,106,34)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1279.50">void CBlock::U..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1253" width="9.8486%" height="15" fill="rgb(205,1,4)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1263.50">void CBlock::U..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1237" width="9.8486%" height="15" fill="rgb(224,151,29)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1247.50">void CBlock::S..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1221" width="9.8486%" height="15" fill="rgb(251,196,0)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1231.50">void ActionUns..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1205" width="9.8486%" height="15" fill="rgb(212,127,0)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1215.50">void Unseriali..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1189" width="9.8486%" height="15" fill="rgb(236,71,53)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1199.50">void Unseriali..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1173" width="9.8486%" height="15" fill="rgb(227,99,0)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1183.50">void Unseriali..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6,627 samples, 9.85%)</title><rect x="54.6702%" y="1157" width="9.8486%" height="15" fill="rgb(239,89,21)" fg:x="36787" fg:w="6627"/><text x="54.9202%" y="1167.50">void Wrapper&lt;V..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6,621 samples, 9.84%)</title><rect x="54.6791%" y="1141" width="9.8396%" height="15" fill="rgb(243,122,19)" fg:x="36793" fg:w="6621"/><text x="54.9291%" y="1151.50">void VectorFor..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (6,597 samples, 9.80%)</title><rect x="54.7147%" y="1125" width="9.8040%" height="15" fill="rgb(229,192,45)" fg:x="36817" fg:w="6597"/><text x="54.9647%" y="1135.50">void DefaultFo..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (15 samples, 0.02%)</title><rect x="64.4964%" y="1109" width="0.0223%" height="15" fill="rgb(235,165,35)" fg:x="43399" fg:w="15"/><text x="64.7464%" y="1119.50"></text></g><g><title>_mm_add_epi32 (27 samples, 0.04%)</title><rect x="64.5633%" y="1221" width="0.0401%" height="15" fill="rgb(253,202,0)" fg:x="43444" fg:w="27"/><text x="64.8133%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (65 samples, 0.10%)</title><rect x="64.6034%" y="1221" width="0.0966%" height="15" fill="rgb(235,51,20)" fg:x="43471" fg:w="65"/><text x="64.8534%" y="1231.50"></text></g><g><title>QuadRound (114 samples, 0.17%)</title><rect x="64.5633%" y="1237" width="0.1694%" height="15" fill="rgb(218,95,46)" fg:x="43444" fg:w="114"/><text x="64.8133%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (22 samples, 0.03%)</title><rect x="64.7000%" y="1221" width="0.0327%" height="15" fill="rgb(212,81,10)" fg:x="43536" fg:w="22"/><text x="64.9500%" y="1231.50"></text></g><g><title>ShiftMessageA (27 samples, 0.04%)</title><rect x="64.7431%" y="1221" width="0.0401%" height="15" fill="rgb(240,59,0)" fg:x="43565" fg:w="27"/><text x="64.9931%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (27 samples, 0.04%)</title><rect x="64.7431%" y="1205" width="0.0401%" height="15" fill="rgb(212,191,42)" fg:x="43565" fg:w="27"/><text x="64.9931%" y="1215.50"></text></g><g><title>_mm_add_epi32 (11 samples, 0.02%)</title><rect x="64.7832%" y="1205" width="0.0163%" height="15" fill="rgb(233,140,3)" fg:x="43592" fg:w="11"/><text x="65.0332%" y="1215.50"></text></g><g><title>_mm_alignr_epi8 (16 samples, 0.02%)</title><rect x="64.7996%" y="1205" width="0.0238%" height="15" fill="rgb(215,69,23)" fg:x="43603" fg:w="16"/><text x="65.0496%" y="1215.50"></text></g><g><title>ShiftMessageB (104 samples, 0.15%)</title><rect x="64.7431%" y="1237" width="0.1546%" height="15" fill="rgb(240,202,20)" fg:x="43565" fg:w="104"/><text x="64.9931%" y="1247.50"></text></g><g><title>ShiftMessageC (77 samples, 0.11%)</title><rect x="64.7832%" y="1221" width="0.1144%" height="15" fill="rgb(209,146,50)" fg:x="43592" fg:w="77"/><text x="65.0332%" y="1231.50"></text></g><g><title>_mm_sha256msg2_epu32 (50 samples, 0.07%)</title><rect x="64.8234%" y="1205" width="0.0743%" height="15" fill="rgb(253,102,54)" fg:x="43619" fg:w="50"/><text x="65.0734%" y="1215.50"></text></g><g><title>ShiftMessageC (17 samples, 0.03%)</title><rect x="64.8977%" y="1237" width="0.0253%" height="15" fill="rgb(250,173,47)" fg:x="43669" fg:w="17"/><text x="65.1477%" y="1247.50"></text></g><g><title>_mm_sha256msg2_epu32 (10 samples, 0.01%)</title><rect x="64.9081%" y="1221" width="0.0149%" height="15" fill="rgb(232,142,7)" fg:x="43676" fg:w="10"/><text x="65.1581%" y="1231.50"></text></g><g><title>Unshuffle (9 samples, 0.01%)</title><rect x="64.9229%" y="1237" width="0.0134%" height="15" fill="rgb(230,157,47)" fg:x="43686" fg:w="9"/><text x="65.1729%" y="1247.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (256 samples, 0.38%)</title><rect x="64.5588%" y="1253" width="0.3804%" height="15" fill="rgb(214,177,35)" fg:x="43441" fg:w="256"/><text x="64.8088%" y="1263.50"></text></g><g><title>SHA256D64 (260 samples, 0.39%)</title><rect x="64.5544%" y="1269" width="0.3864%" height="15" fill="rgb(234,119,46)" fg:x="43438" fg:w="260"/><text x="64.8044%" y="1279.50"></text></g><g><title>ComputeMerkleRoot (270 samples, 0.40%)</title><rect x="64.5499%" y="1285" width="0.4013%" height="15" fill="rgb(241,180,50)" fg:x="43435" fg:w="270"/><text x="64.7999%" y="1295.50"></text></g><g><title>CheckMerkleRoot (296 samples, 0.44%)</title><rect x="64.5232%" y="1317" width="0.4399%" height="15" fill="rgb(221,54,25)" fg:x="43417" fg:w="296"/><text x="64.7732%" y="1327.50"></text></g><g><title>BlockMerkleRoot (296 samples, 0.44%)</title><rect x="64.5232%" y="1301" width="0.4399%" height="15" fill="rgb(209,157,44)" fg:x="43417" fg:w="296"/><text x="64.7732%" y="1311.50"></text></g><g><title>_mm_add_epi32 (41 samples, 0.06%)</title><rect x="64.9824%" y="1221" width="0.0609%" height="15" fill="rgb(246,115,41)" fg:x="43726" fg:w="41"/><text x="65.2324%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (71 samples, 0.11%)</title><rect x="65.0433%" y="1221" width="0.1055%" height="15" fill="rgb(229,86,1)" fg:x="43767" fg:w="71"/><text x="65.2933%" y="1231.50"></text></g><g><title>QuadRound (133 samples, 0.20%)</title><rect x="64.9824%" y="1237" width="0.1977%" height="15" fill="rgb(240,108,53)" fg:x="43726" fg:w="133"/><text x="65.2324%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (21 samples, 0.03%)</title><rect x="65.1488%" y="1221" width="0.0312%" height="15" fill="rgb(227,134,2)" fg:x="43838" fg:w="21"/><text x="65.3988%" y="1231.50"></text></g><g><title>ShiftMessageA (8 samples, 0.01%)</title><rect x="65.1815%" y="1237" width="0.0119%" height="15" fill="rgb(213,129,25)" fg:x="43860" fg:w="8"/><text x="65.4315%" y="1247.50"></text></g><g><title>_mm_sha256msg1_epu32 (8 samples, 0.01%)</title><rect x="65.1815%" y="1221" width="0.0119%" height="15" fill="rgb(226,35,21)" fg:x="43860" fg:w="8"/><text x="65.4315%" y="1231.50"></text></g><g><title>ShiftMessageA (26 samples, 0.04%)</title><rect x="65.1934%" y="1221" width="0.0386%" height="15" fill="rgb(208,129,26)" fg:x="43868" fg:w="26"/><text x="65.4434%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (26 samples, 0.04%)</title><rect x="65.1934%" y="1205" width="0.0386%" height="15" fill="rgb(224,83,6)" fg:x="43868" fg:w="26"/><text x="65.4434%" y="1215.50"></text></g><g><title>_mm_add_epi32 (19 samples, 0.03%)</title><rect x="65.2321%" y="1205" width="0.0282%" height="15" fill="rgb(227,52,39)" fg:x="43894" fg:w="19"/><text x="65.4821%" y="1215.50"></text></g><g><title>_mm_alignr_epi8 (23 samples, 0.03%)</title><rect x="65.2603%" y="1205" width="0.0342%" height="15" fill="rgb(241,30,17)" fg:x="43913" fg:w="23"/><text x="65.5103%" y="1215.50"></text></g><g><title>ShiftMessageB (117 samples, 0.17%)</title><rect x="65.1934%" y="1237" width="0.1739%" height="15" fill="rgb(246,186,42)" fg:x="43868" fg:w="117"/><text x="65.4434%" y="1247.50"></text></g><g><title>ShiftMessageC (91 samples, 0.14%)</title><rect x="65.2321%" y="1221" width="0.1352%" height="15" fill="rgb(221,169,15)" fg:x="43894" fg:w="91"/><text x="65.4821%" y="1231.50"></text></g><g><title>_mm_sha256msg2_epu32 (49 samples, 0.07%)</title><rect x="65.2945%" y="1205" width="0.0728%" height="15" fill="rgb(235,108,21)" fg:x="43936" fg:w="49"/><text x="65.5445%" y="1215.50"></text></g><g><title>ShiftMessageC (16 samples, 0.02%)</title><rect x="65.3673%" y="1237" width="0.0238%" height="15" fill="rgb(219,148,30)" fg:x="43985" fg:w="16"/><text x="65.6173%" y="1247.50"></text></g><g><title>_mm_sha256msg2_epu32 (10 samples, 0.01%)</title><rect x="65.3762%" y="1221" width="0.0149%" height="15" fill="rgb(220,109,5)" fg:x="43991" fg:w="10"/><text x="65.6262%" y="1231.50"></text></g><g><title>Unshuffle (10 samples, 0.01%)</title><rect x="65.3911%" y="1237" width="0.0149%" height="15" fill="rgb(213,203,48)" fg:x="44001" fg:w="10"/><text x="65.6411%" y="1247.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (292 samples, 0.43%)</title><rect x="64.9794%" y="1253" width="0.4339%" height="15" fill="rgb(244,71,33)" fg:x="43724" fg:w="292"/><text x="65.2294%" y="1263.50"></text></g><g><title>SHA256D64 (294 samples, 0.44%)</title><rect x="64.9779%" y="1269" width="0.4369%" height="15" fill="rgb(209,23,2)" fg:x="43723" fg:w="294"/><text x="65.2279%" y="1279.50"></text></g><g><title>ComputeMerkleRoot (295 samples, 0.44%)</title><rect x="64.9779%" y="1285" width="0.4384%" height="15" fill="rgb(219,97,7)" fg:x="43723" fg:w="295"/><text x="65.2279%" y="1295.50"></text></g><g><title>IsBlockMutated (608 samples, 0.90%)</title><rect x="64.5232%" y="1333" width="0.9036%" height="15" fill="rgb(216,161,23)" fg:x="43417" fg:w="608"/><text x="64.7732%" y="1343.50"></text></g><g><title>CheckWitnessMalleation (312 samples, 0.46%)</title><rect x="64.9631%" y="1317" width="0.4637%" height="15" fill="rgb(207,45,42)" fg:x="43713" fg:w="312"/><text x="65.2131%" y="1327.50"></text></g><g><title>BlockWitnessMerkleRoot (312 samples, 0.46%)</title><rect x="64.9631%" y="1301" width="0.4637%" height="15" fill="rgb(241,61,4)" fg:x="43713" fg:w="312"/><text x="65.2131%" y="1311.50"></text></g><g><title>CBlockIndex::GetAncestor (24 samples, 0.04%)</title><rect x="65.4327%" y="1317" width="0.0357%" height="15" fill="rgb(236,170,1)" fg:x="44029" fg:w="24"/><text x="65.6827%" y="1327.50"></text></g><g><title>LastCommonAncestor (26 samples, 0.04%)</title><rect x="65.4312%" y="1333" width="0.0386%" height="15" fill="rgb(239,72,5)" fg:x="44028" fg:w="26"/><text x="65.6812%" y="1343.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (7 samples, 0.01%)</title><rect x="65.4743%" y="1333" width="0.0104%" height="15" fill="rgb(214,13,50)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1343.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (7 samples, 0.01%)</title><rect x="65.4743%" y="1317" width="0.0104%" height="15" fill="rgb(224,88,9)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1327.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (7 samples, 0.01%)</title><rect x="65.4743%" y="1301" width="0.0104%" height="15" fill="rgb(238,192,34)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1311.50"></text></g><g><title>std::mutex::lock (7 samples, 0.01%)</title><rect x="65.4743%" y="1285" width="0.0104%" height="15" fill="rgb(217,203,50)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1295.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (7 samples, 0.01%)</title><rect x="65.4743%" y="1269" width="0.0104%" height="15" fill="rgb(241,123,32)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1279.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="65.4743%" y="1253" width="0.0104%" height="15" fill="rgb(248,151,39)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1263.50"></text></g><g><title>__GI___lll_lock_wait (7 samples, 0.01%)</title><rect x="65.4743%" y="1237" width="0.0104%" height="15" fill="rgb(208,89,6)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1247.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="65.4743%" y="1221" width="0.0104%" height="15" fill="rgb(254,43,26)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="65.4743%" y="1205" width="0.0104%" height="15" fill="rgb(216,158,13)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="65.4743%" y="1189" width="0.0104%" height="15" fill="rgb(212,47,37)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="65.4743%" y="1173" width="0.0104%" height="15" fill="rgb(254,16,10)" fg:x="44057" fg:w="7"/><text x="65.7243%" y="1183.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (68 samples, 0.10%)</title><rect x="65.4951%" y="1333" width="0.1011%" height="15" fill="rgb(223,228,16)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1343.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (68 samples, 0.10%)</title><rect x="65.4951%" y="1317" width="0.1011%" height="15" fill="rgb(249,108,50)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1327.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (68 samples, 0.10%)</title><rect x="65.4951%" y="1301" width="0.1011%" height="15" fill="rgb(208,220,5)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1311.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (68 samples, 0.10%)</title><rect x="65.4951%" y="1285" width="0.1011%" height="15" fill="rgb(217,89,48)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1295.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (68 samples, 0.10%)</title><rect x="65.4951%" y="1269" width="0.1011%" height="15" fill="rgb(212,113,41)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1279.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (68 samples, 0.10%)</title><rect x="65.4951%" y="1253" width="0.1011%" height="15" fill="rgb(231,127,5)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1263.50"></text></g><g><title>CNetMessage::~CNetMessage (68 samples, 0.10%)</title><rect x="65.4951%" y="1237" width="0.1011%" height="15" fill="rgb(217,141,17)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1247.50"></text></g><g><title>DataStream::~DataStream (68 samples, 0.10%)</title><rect x="65.4951%" y="1221" width="0.1011%" height="15" fill="rgb(245,125,54)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (68 samples, 0.10%)</title><rect x="65.4951%" y="1205" width="0.1011%" height="15" fill="rgb(248,125,3)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (68 samples, 0.10%)</title><rect x="65.4951%" y="1189" width="0.1011%" height="15" fill="rgb(236,119,51)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (68 samples, 0.10%)</title><rect x="65.4951%" y="1173" width="0.1011%" height="15" fill="rgb(239,99,8)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (68 samples, 0.10%)</title><rect x="65.4951%" y="1157" width="0.1011%" height="15" fill="rgb(224,228,4)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1167.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (68 samples, 0.10%)</title><rect x="65.4951%" y="1141" width="0.1011%" height="15" fill="rgb(220,131,45)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1151.50"></text></g><g><title>memory_cleanse (68 samples, 0.10%)</title><rect x="65.4951%" y="1125" width="0.1011%" height="15" fill="rgb(215,62,5)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1135.50"></text></g><g><title>memory_cleanse (68 samples, 0.10%)</title><rect x="65.4951%" y="1109" width="0.1011%" height="15" fill="rgb(253,12,24)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1119.50"></text></g><g><title>__memset_avx512_unaligned_erms (68 samples, 0.10%)</title><rect x="65.4951%" y="1093" width="0.1011%" height="15" fill="rgb(248,120,50)" fg:x="44071" fg:w="68"/><text x="65.7451%" y="1103.50"></text></g><g><title>CConnman::PushMessage (21 samples, 0.03%)</title><rect x="65.5976%" y="1317" width="0.0312%" height="15" fill="rgb(245,194,10)" fg:x="44140" fg:w="21"/><text x="65.8476%" y="1327.50"></text></g><g><title>CConnman::SocketSendData (19 samples, 0.03%)</title><rect x="65.6006%" y="1301" width="0.0282%" height="15" fill="rgb(241,149,38)" fg:x="44142" fg:w="19"/><text x="65.8506%" y="1311.50"></text></g><g><title>__send (16 samples, 0.02%)</title><rect x="65.6051%" y="1285" width="0.0238%" height="15" fill="rgb(219,215,7)" fg:x="44145" fg:w="16"/><text x="65.8551%" y="1295.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="65.6051%" y="1269" width="0.0238%" height="15" fill="rgb(208,120,31)" fg:x="44145" fg:w="16"/><text x="65.8551%" y="1279.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="65.6051%" y="1253" width="0.0238%" height="15" fill="rgb(244,30,8)" fg:x="44145" fg:w="16"/><text x="65.8551%" y="1263.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="65.6051%" y="1237" width="0.0238%" height="15" fill="rgb(238,35,44)" fg:x="44145" fg:w="16"/><text x="65.8551%" y="1247.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="65.6051%" y="1221" width="0.0238%" height="15" fill="rgb(243,218,37)" fg:x="44145" fg:w="16"/><text x="65.8551%" y="1231.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="65.6051%" y="1205" width="0.0238%" height="15" fill="rgb(218,169,10)" fg:x="44145" fg:w="16"/><text x="65.8551%" y="1215.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="65.6051%" y="1189" width="0.0238%" height="15" fill="rgb(221,144,10)" fg:x="44145" fg:w="16"/><text x="65.8551%" y="1199.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="65.6066%" y="1173" width="0.0223%" height="15" fill="rgb(226,41,38)" fg:x="44146" fg:w="15"/><text x="65.8566%" y="1183.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="65.6066%" y="1157" width="0.0223%" height="15" fill="rgb(228,3,1)" fg:x="44146" fg:w="15"/><text x="65.8566%" y="1167.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="65.6066%" y="1141" width="0.0223%" height="15" fill="rgb(209,129,12)" fg:x="44146" fg:w="15"/><text x="65.8566%" y="1151.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="65.6095%" y="1125" width="0.0193%" height="15" fill="rgb(213,136,33)" fg:x="44148" fg:w="13"/><text x="65.8595%" y="1135.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="65.6140%" y="1109" width="0.0149%" height="15" fill="rgb(209,181,29)" fg:x="44151" fg:w="10"/><text x="65.8640%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="65.6155%" y="1093" width="0.0134%" height="15" fill="rgb(234,173,18)" fg:x="44152" fg:w="9"/><text x="65.8655%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="65.6185%" y="1077" width="0.0104%" height="15" fill="rgb(227,73,47)" fg:x="44154" fg:w="7"/><text x="65.8685%" y="1087.50"></text></g><g><title>CConnman::ThreadMessageHandler (34,170 samples, 50.78%)</title><rect x="14.8494%" y="1349" width="50.7810%" height="15" fill="rgb(234,9,34)" fg:x="9992" fg:w="34170"/><text x="15.0994%" y="1359.50">CConnman::ThreadMessageHandler</text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (22 samples, 0.03%)</title><rect x="65.5976%" y="1333" width="0.0327%" height="15" fill="rgb(235,172,15)" fg:x="44140" fg:w="22"/><text x="65.8476%" y="1343.50"></text></g><g><title>__clone (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1509" width="50.7824%" height="15" fill="rgb(245,61,2)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1519.50">__clone</text></g><g><title>start_thread (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1493" width="50.7824%" height="15" fill="rgb(238,39,47)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1503.50">start_thread</text></g><g><title>execute_native_thread_routine (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1477" width="50.7824%" height="15" fill="rgb(234,37,24)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1487.50">execute_native_thread_routine</text></g><g><title>_M_run (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1461" width="50.7824%" height="15" fill="rgb(248,223,24)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1471.50">_M_run</text></g><g><title>operator (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1445" width="50.7824%" height="15" fill="rgb(223,12,15)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1429" width="50.7824%" height="15" fill="rgb(249,6,3)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1439.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1413" width="50.7824%" height="15" fill="rgb(237,105,33)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1423.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*,..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1397" width="50.7824%" height="15" fill="rgb(252,208,35)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1407.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string..</text></g><g><title>util::TraceThread (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1381" width="50.7824%" height="15" fill="rgb(215,181,35)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1391.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (34,171 samples, 50.78%)</title><rect x="14.8494%" y="1365" width="50.7824%" height="15" fill="rgb(246,212,3)" fg:x="9992" fg:w="34171"/><text x="15.0994%" y="1375.50">std::function&lt;void ()&gt;::operator</text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="65.6333%" y="1493" width="0.0104%" height="15" fill="rgb(247,156,24)" fg:x="44164" fg:w="7"/><text x="65.8833%" y="1503.50"></text></g><g><title>__io_vtables (12 samples, 0.02%)</title><rect x="65.6318%" y="1509" width="0.0178%" height="15" fill="rgb(248,9,31)" fg:x="44163" fg:w="12"/><text x="65.8818%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (21 samples, 0.03%)</title><rect x="65.6541%" y="1509" width="0.0312%" height="15" fill="rgb(234,26,45)" fg:x="44178" fg:w="21"/><text x="65.9041%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (19 samples, 0.03%)</title><rect x="65.6853%" y="1509" width="0.0282%" height="15" fill="rgb(249,11,32)" fg:x="44199" fg:w="19"/><text x="65.9353%" y="1519.50"></text></g><g><title>__memset_avx512_unaligned_erms (7 samples, 0.01%)</title><rect x="65.7225%" y="1509" width="0.0104%" height="15" fill="rgb(249,162,33)" fg:x="44224" fg:w="7"/><text x="65.9725%" y="1519.50"></text></g><g><title>_int_free (32 samples, 0.05%)</title><rect x="65.7344%" y="1509" width="0.0476%" height="15" fill="rgb(232,4,32)" fg:x="44232" fg:w="32"/><text x="65.9844%" y="1519.50"></text></g><g><title>_int_malloc (123 samples, 0.18%)</title><rect x="65.7864%" y="1509" width="0.1828%" height="15" fill="rgb(212,5,45)" fg:x="44267" fg:w="123"/><text x="66.0364%" y="1519.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="65.9573%" y="1493" width="0.0119%" height="15" fill="rgb(227,95,13)" fg:x="44382" fg:w="8"/><text x="66.2073%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.02%)</title><rect x="65.9721%" y="1509" width="0.0193%" height="15" fill="rgb(223,205,10)" fg:x="44392" fg:w="13"/><text x="66.2221%" y="1519.50"></text></g><g><title>_mm_crc32_u64 (32 samples, 0.05%)</title><rect x="66.0673%" y="1493" width="0.0476%" height="15" fill="rgb(222,178,8)" fg:x="44456" fg:w="32"/><text x="66.3173%" y="1503.50"></text></g><g><title>crc32c::ExtendSse42 (85 samples, 0.13%)</title><rect x="65.9915%" y="1509" width="0.1263%" height="15" fill="rgb(216,13,22)" fg:x="44405" fg:w="85"/><text x="66.2415%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.01%)</title><rect x="66.1401%" y="1477" width="0.0149%" height="15" fill="rgb(240,167,12)" fg:x="44505" fg:w="10"/><text x="66.3901%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (27 samples, 0.04%)</title><rect x="66.1237%" y="1509" width="0.0401%" height="15" fill="rgb(235,68,35)" fg:x="44494" fg:w="27"/><text x="66.3737%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (19 samples, 0.03%)</title><rect x="66.1356%" y="1493" width="0.0282%" height="15" fill="rgb(253,40,27)" fg:x="44502" fg:w="19"/><text x="66.3856%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (8 samples, 0.01%)</title><rect x="66.1639%" y="1509" width="0.0119%" height="15" fill="rgb(214,19,28)" fg:x="44521" fg:w="8"/><text x="66.4139%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::Seek (8 samples, 0.01%)</title><rect x="66.1787%" y="1509" width="0.0119%" height="15" fill="rgb(210,167,45)" fg:x="44531" fg:w="8"/><text x="66.4287%" y="1519.50"></text></g><g><title>leveldb::Table::InternalGet (12 samples, 0.02%)</title><rect x="66.2411%" y="1509" width="0.0178%" height="15" fill="rgb(232,97,40)" fg:x="44573" fg:w="12"/><text x="66.4911%" y="1519.50"></text></g><g><title>malloc (30 samples, 0.04%)</title><rect x="66.2634%" y="1509" width="0.0446%" height="15" fill="rgb(250,35,23)" fg:x="44588" fg:w="30"/><text x="66.5134%" y="1519.50"></text></g><g><title>malloc_consolidate (14 samples, 0.02%)</title><rect x="66.3154%" y="1509" width="0.0208%" height="15" fill="rgb(248,47,53)" fg:x="44623" fg:w="14"/><text x="66.5654%" y="1519.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (43 samples, 0.06%)</title><rect x="66.3823%" y="1045" width="0.0639%" height="15" fill="rgb(226,58,50)" fg:x="44668" fg:w="43"/><text x="66.6323%" y="1055.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (43 samples, 0.06%)</title><rect x="66.3823%" y="1029" width="0.0639%" height="15" fill="rgb(217,105,26)" fg:x="44668" fg:w="43"/><text x="66.6323%" y="1039.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (43 samples, 0.06%)</title><rect x="66.3823%" y="1013" width="0.0639%" height="15" fill="rgb(208,64,1)" fg:x="44668" fg:w="43"/><text x="66.6323%" y="1023.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (40 samples, 0.06%)</title><rect x="66.3868%" y="997" width="0.0594%" height="15" fill="rgb(214,80,1)" fg:x="44671" fg:w="40"/><text x="66.6368%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (40 samples, 0.06%)</title><rect x="66.3868%" y="981" width="0.0594%" height="15" fill="rgb(206,175,26)" fg:x="44671" fg:w="40"/><text x="66.6368%" y="991.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (40 samples, 0.06%)</title><rect x="66.3868%" y="965" width="0.0594%" height="15" fill="rgb(235,156,37)" fg:x="44671" fg:w="40"/><text x="66.6368%" y="975.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (40 samples, 0.06%)</title><rect x="66.3868%" y="949" width="0.0594%" height="15" fill="rgb(213,100,9)" fg:x="44671" fg:w="40"/><text x="66.6368%" y="959.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (40 samples, 0.06%)</title><rect x="66.3868%" y="933" width="0.0594%" height="15" fill="rgb(241,15,13)" fg:x="44671" fg:w="40"/><text x="66.6368%" y="943.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (7 samples, 0.01%)</title><rect x="66.4358%" y="917" width="0.0104%" height="15" fill="rgb(205,97,43)" fg:x="44704" fg:w="7"/><text x="66.6858%" y="927.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (70 samples, 0.10%)</title><rect x="66.3808%" y="1141" width="0.1040%" height="15" fill="rgb(216,106,32)" fg:x="44667" fg:w="70"/><text x="66.6308%" y="1151.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (70 samples, 0.10%)</title><rect x="66.3808%" y="1125" width="0.1040%" height="15" fill="rgb(226,200,8)" fg:x="44667" fg:w="70"/><text x="66.6308%" y="1135.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (70 samples, 0.10%)</title><rect x="66.3808%" y="1109" width="0.1040%" height="15" fill="rgb(244,54,29)" fg:x="44667" fg:w="70"/><text x="66.6308%" y="1119.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (70 samples, 0.10%)</title><rect x="66.3808%" y="1093" width="0.1040%" height="15" fill="rgb(252,169,12)" fg:x="44667" fg:w="70"/><text x="66.6308%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (69 samples, 0.10%)</title><rect x="66.3823%" y="1077" width="0.1025%" height="15" fill="rgb(231,199,11)" fg:x="44668" fg:w="69"/><text x="66.6323%" y="1087.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (69 samples, 0.10%)</title><rect x="66.3823%" y="1061" width="0.1025%" height="15" fill="rgb(233,191,18)" fg:x="44668" fg:w="69"/><text x="66.6323%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (26 samples, 0.04%)</title><rect x="66.4462%" y="1045" width="0.0386%" height="15" fill="rgb(215,83,47)" fg:x="44711" fg:w="26"/><text x="66.6962%" y="1055.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (26 samples, 0.04%)</title><rect x="66.4462%" y="1029" width="0.0386%" height="15" fill="rgb(251,67,19)" fg:x="44711" fg:w="26"/><text x="66.6962%" y="1039.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (26 samples, 0.04%)</title><rect x="66.4462%" y="1013" width="0.0386%" height="15" fill="rgb(240,7,20)" fg:x="44711" fg:w="26"/><text x="66.6962%" y="1023.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (96 samples, 0.14%)</title><rect x="66.3571%" y="1493" width="0.1427%" height="15" fill="rgb(210,150,26)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1503.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1477" width="0.1427%" height="15" fill="rgb(228,75,42)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1487.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1461" width="0.1427%" height="15" fill="rgb(237,134,48)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1471.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1445" width="0.1427%" height="15" fill="rgb(205,80,50)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1455.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1429" width="0.1427%" height="15" fill="rgb(217,74,48)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1439.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1413" width="0.1427%" height="15" fill="rgb(205,82,50)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1423.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1397" width="0.1427%" height="15" fill="rgb(228,1,33)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1381" width="0.1427%" height="15" fill="rgb(214,50,23)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1391.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1365" width="0.1427%" height="15" fill="rgb(210,62,9)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1375.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1349" width="0.1427%" height="15" fill="rgb(210,104,37)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1359.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (96 samples, 0.14%)</title><rect x="66.3571%" y="1333" width="0.1427%" height="15" fill="rgb(232,104,43)" fg:x="44651" fg:w="96"/><text x="66.6071%" y="1343.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1317" width="0.1397%" height="15" fill="rgb(244,52,6)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1301" width="0.1397%" height="15" fill="rgb(211,174,52)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1311.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1285" width="0.1397%" height="15" fill="rgb(229,48,4)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1295.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1269" width="0.1397%" height="15" fill="rgb(205,155,16)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1279.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1253" width="0.1397%" height="15" fill="rgb(211,141,53)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1237" width="0.1397%" height="15" fill="rgb(240,148,11)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1247.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1221" width="0.1397%" height="15" fill="rgb(214,45,23)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1205" width="0.1397%" height="15" fill="rgb(248,74,26)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1215.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1189" width="0.1397%" height="15" fill="rgb(218,121,16)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1199.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (94 samples, 0.14%)</title><rect x="66.3600%" y="1173" width="0.1397%" height="15" fill="rgb(218,10,47)" fg:x="44653" fg:w="94"/><text x="66.6100%" y="1183.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (84 samples, 0.12%)</title><rect x="66.3749%" y="1157" width="0.1248%" height="15" fill="rgb(227,99,14)" fg:x="44663" fg:w="84"/><text x="66.6249%" y="1167.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (98 samples, 0.15%)</title><rect x="66.3571%" y="1509" width="0.1456%" height="15" fill="rgb(229,83,46)" fg:x="44651" fg:w="98"/><text x="66.6071%" y="1519.50"></text></g><g><title>operator new (10 samples, 0.01%)</title><rect x="66.5086%" y="1509" width="0.0149%" height="15" fill="rgb(228,25,1)" fg:x="44753" fg:w="10"/><text x="66.7586%" y="1519.50"></text></g><g><title>QuadRound (9 samples, 0.01%)</title><rect x="66.5294%" y="1493" width="0.0134%" height="15" fill="rgb(252,190,15)" fg:x="44767" fg:w="9"/><text x="66.7794%" y="1503.50"></text></g><g><title>ShiftMessageB (13 samples, 0.02%)</title><rect x="66.5428%" y="1493" width="0.0193%" height="15" fill="rgb(213,103,51)" fg:x="44776" fg:w="13"/><text x="66.7928%" y="1503.50"></text></g><g><title>ShiftMessageC (8 samples, 0.01%)</title><rect x="66.5503%" y="1477" width="0.0119%" height="15" fill="rgb(220,38,44)" fg:x="44781" fg:w="8"/><text x="66.8003%" y="1487.50"></text></g><g><title>sha256_x86_shani::Transform (28 samples, 0.04%)</title><rect x="66.5280%" y="1509" width="0.0416%" height="15" fill="rgb(210,45,26)" fg:x="44766" fg:w="28"/><text x="66.7780%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.03%)</title><rect x="66.5770%" y="1509" width="0.0342%" height="15" fill="rgb(205,95,48)" fg:x="44799" fg:w="23"/><text x="66.8270%" y="1519.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (10 samples, 0.01%)</title><rect x="66.6246%" y="1509" width="0.0149%" height="15" fill="rgb(225,179,37)" fg:x="44831" fg:w="10"/><text x="66.8746%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (8 samples, 0.01%)</title><rect x="66.6394%" y="1509" width="0.0119%" height="15" fill="rgb(230,209,3)" fg:x="44841" fg:w="8"/><text x="66.8894%" y="1519.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (11 samples, 0.02%)</title><rect x="66.6677%" y="1509" width="0.0163%" height="15" fill="rgb(248,12,46)" fg:x="44860" fg:w="11"/><text x="66.9177%" y="1519.50"></text></g><g><title>_IO_fwrite (10 samples, 0.01%)</title><rect x="66.6691%" y="1493" width="0.0149%" height="15" fill="rgb(234,18,0)" fg:x="44861" fg:w="10"/><text x="66.9191%" y="1503.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (7 samples, 0.01%)</title><rect x="66.6989%" y="1413" width="0.0104%" height="15" fill="rgb(238,197,14)" fg:x="44881" fg:w="7"/><text x="66.9489%" y="1423.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (15 samples, 0.02%)</title><rect x="66.6885%" y="1493" width="0.0223%" height="15" fill="rgb(251,162,48)" fg:x="44874" fg:w="15"/><text x="66.9385%" y="1503.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (8 samples, 0.01%)</title><rect x="66.6989%" y="1477" width="0.0119%" height="15" fill="rgb(237,73,42)" fg:x="44881" fg:w="8"/><text x="66.9489%" y="1487.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (8 samples, 0.01%)</title><rect x="66.6989%" y="1461" width="0.0119%" height="15" fill="rgb(211,108,8)" fg:x="44881" fg:w="8"/><text x="66.9489%" y="1471.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (8 samples, 0.01%)</title><rect x="66.6989%" y="1445" width="0.0119%" height="15" fill="rgb(213,45,22)" fg:x="44881" fg:w="8"/><text x="66.9489%" y="1455.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (8 samples, 0.01%)</title><rect x="66.6989%" y="1429" width="0.0119%" height="15" fill="rgb(252,154,5)" fg:x="44881" fg:w="8"/><text x="66.9489%" y="1439.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (19 samples, 0.03%)</title><rect x="66.6840%" y="1509" width="0.0282%" height="15" fill="rgb(221,79,52)" fg:x="44871" fg:w="19"/><text x="66.9340%" y="1519.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (9 samples, 0.01%)</title><rect x="66.7301%" y="1493" width="0.0134%" height="15" fill="rgb(229,220,36)" fg:x="44902" fg:w="9"/><text x="66.9801%" y="1503.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (9 samples, 0.01%)</title><rect x="66.7301%" y="1477" width="0.0134%" height="15" fill="rgb(211,17,16)" fg:x="44902" fg:w="9"/><text x="66.9801%" y="1487.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (9 samples, 0.01%)</title><rect x="66.7301%" y="1461" width="0.0134%" height="15" fill="rgb(222,55,31)" fg:x="44902" fg:w="9"/><text x="66.9801%" y="1471.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (9 samples, 0.01%)</title><rect x="66.7301%" y="1445" width="0.0134%" height="15" fill="rgb(221,221,31)" fg:x="44902" fg:w="9"/><text x="66.9801%" y="1455.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (9 samples, 0.01%)</title><rect x="66.7301%" y="1429" width="0.0134%" height="15" fill="rgb(227,168,26)" fg:x="44902" fg:w="9"/><text x="66.9801%" y="1439.50"></text></g><g><title>operator new (8 samples, 0.01%)</title><rect x="66.7316%" y="1413" width="0.0119%" height="15" fill="rgb(224,139,9)" fg:x="44903" fg:w="8"/><text x="66.9816%" y="1423.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (26 samples, 0.04%)</title><rect x="66.7152%" y="1509" width="0.0386%" height="15" fill="rgb(254,172,0)" fg:x="44892" fg:w="26"/><text x="66.9652%" y="1519.50"></text></g><g><title>unlink_chunk.isra.0 (10 samples, 0.01%)</title><rect x="66.7568%" y="1509" width="0.0149%" height="15" fill="rgb(235,203,1)" fg:x="44920" fg:w="10"/><text x="67.0068%" y="1519.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="66.8192%" y="1493" width="0.0119%" height="15" fill="rgb(216,205,24)" fg:x="44962" fg:w="8"/><text x="67.0692%" y="1503.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (8 samples, 0.01%)</title><rect x="66.8192%" y="1477" width="0.0119%" height="15" fill="rgb(233,24,6)" fg:x="44962" fg:w="8"/><text x="67.0692%" y="1487.50"></text></g><g><title>DataStream::read (8 samples, 0.01%)</title><rect x="66.8192%" y="1461" width="0.0119%" height="15" fill="rgb(244,110,9)" fg:x="44962" fg:w="8"/><text x="67.0692%" y="1471.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (39 samples, 0.06%)</title><rect x="66.7747%" y="1509" width="0.0580%" height="15" fill="rgb(239,222,42)" fg:x="44932" fg:w="39"/><text x="67.0247%" y="1519.50"></text></g><g><title>void ScriptCompression::Unser&lt;DataStream&gt; (17 samples, 0.03%)</title><rect x="66.8386%" y="1509" width="0.0253%" height="15" fill="rgb(218,145,13)" fg:x="44975" fg:w="17"/><text x="67.0886%" y="1519.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (25 samples, 0.04%)</title><rect x="66.8727%" y="1349" width="0.0372%" height="15" fill="rgb(207,69,11)" fg:x="44998" fg:w="25"/><text x="67.1227%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (25 samples, 0.04%)</title><rect x="66.8727%" y="1333" width="0.0372%" height="15" fill="rgb(220,223,22)" fg:x="44998" fg:w="25"/><text x="67.1227%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (25 samples, 0.04%)</title><rect x="66.8727%" y="1317" width="0.0372%" height="15" fill="rgb(245,102,5)" fg:x="44998" fg:w="25"/><text x="67.1227%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.04%)</title><rect x="66.8727%" y="1301" width="0.0372%" height="15" fill="rgb(211,148,2)" fg:x="44998" fg:w="25"/><text x="67.1227%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (25 samples, 0.04%)</title><rect x="66.8727%" y="1285" width="0.0372%" height="15" fill="rgb(241,13,44)" fg:x="44998" fg:w="25"/><text x="67.1227%" y="1295.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (16 samples, 0.02%)</title><rect x="66.8861%" y="1269" width="0.0238%" height="15" fill="rgb(219,137,21)" fg:x="45007" fg:w="16"/><text x="67.1361%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (16 samples, 0.02%)</title><rect x="66.8861%" y="1253" width="0.0238%" height="15" fill="rgb(242,206,5)" fg:x="45007" fg:w="16"/><text x="67.1361%" y="1263.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="66.8861%" y="1237" width="0.0238%" height="15" fill="rgb(217,114,22)" fg:x="45007" fg:w="16"/><text x="67.1361%" y="1247.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="66.8861%" y="1221" width="0.0238%" height="15" fill="rgb(253,206,42)" fg:x="45007" fg:w="16"/><text x="67.1361%" y="1231.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (16 samples, 0.02%)</title><rect x="66.8861%" y="1205" width="0.0238%" height="15" fill="rgb(236,102,18)" fg:x="45007" fg:w="16"/><text x="67.1361%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (16 samples, 0.02%)</title><rect x="66.8861%" y="1189" width="0.0238%" height="15" fill="rgb(208,59,49)" fg:x="45007" fg:w="16"/><text x="67.1361%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (16 samples, 0.02%)</title><rect x="66.8861%" y="1173" width="0.0238%" height="15" fill="rgb(215,194,28)" fg:x="45007" fg:w="16"/><text x="67.1361%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (8 samples, 0.01%)</title><rect x="66.8980%" y="1157" width="0.0119%" height="15" fill="rgb(243,207,11)" fg:x="45015" fg:w="8"/><text x="67.1480%" y="1167.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="66.8980%" y="1141" width="0.0119%" height="15" fill="rgb(254,179,35)" fg:x="45015" fg:w="8"/><text x="67.1480%" y="1151.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="66.8980%" y="1125" width="0.0119%" height="15" fill="rgb(235,97,3)" fg:x="45015" fg:w="8"/><text x="67.1480%" y="1135.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (8 samples, 0.01%)</title><rect x="66.8980%" y="1109" width="0.0119%" height="15" fill="rgb(215,155,33)" fg:x="45015" fg:w="8"/><text x="67.1480%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="66.8980%" y="1093" width="0.0119%" height="15" fill="rgb(223,128,12)" fg:x="45015" fg:w="8"/><text x="67.1480%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.01%)</title><rect x="66.8980%" y="1077" width="0.0119%" height="15" fill="rgb(208,157,18)" fg:x="45015" fg:w="8"/><text x="67.1480%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (8 samples, 0.01%)</title><rect x="66.8980%" y="1061" width="0.0119%" height="15" fill="rgb(249,70,54)" fg:x="45015" fg:w="8"/><text x="67.1480%" y="1071.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (21 samples, 0.03%)</title><rect x="66.9099%" y="1349" width="0.0312%" height="15" fill="rgb(244,118,24)" fg:x="45023" fg:w="21"/><text x="67.1599%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (21 samples, 0.03%)</title><rect x="66.9099%" y="1333" width="0.0312%" height="15" fill="rgb(211,54,0)" fg:x="45023" fg:w="21"/><text x="67.1599%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (21 samples, 0.03%)</title><rect x="66.9099%" y="1317" width="0.0312%" height="15" fill="rgb(245,137,45)" fg:x="45023" fg:w="21"/><text x="67.1599%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (21 samples, 0.03%)</title><rect x="66.9099%" y="1301" width="0.0312%" height="15" fill="rgb(232,154,31)" fg:x="45023" fg:w="21"/><text x="67.1599%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (21 samples, 0.03%)</title><rect x="66.9099%" y="1285" width="0.0312%" height="15" fill="rgb(253,6,39)" fg:x="45023" fg:w="21"/><text x="67.1599%" y="1295.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (19 samples, 0.03%)</title><rect x="66.9129%" y="1269" width="0.0282%" height="15" fill="rgb(234,183,24)" fg:x="45025" fg:w="19"/><text x="67.1629%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (19 samples, 0.03%)</title><rect x="66.9129%" y="1253" width="0.0282%" height="15" fill="rgb(252,84,40)" fg:x="45025" fg:w="19"/><text x="67.1629%" y="1263.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="66.9129%" y="1237" width="0.0282%" height="15" fill="rgb(224,65,2)" fg:x="45025" fg:w="19"/><text x="67.1629%" y="1247.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.03%)</title><rect x="66.9129%" y="1221" width="0.0282%" height="15" fill="rgb(229,38,24)" fg:x="45025" fg:w="19"/><text x="67.1629%" y="1231.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (19 samples, 0.03%)</title><rect x="66.9129%" y="1205" width="0.0282%" height="15" fill="rgb(218,131,50)" fg:x="45025" fg:w="19"/><text x="67.1629%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (19 samples, 0.03%)</title><rect x="66.9129%" y="1189" width="0.0282%" height="15" fill="rgb(233,106,18)" fg:x="45025" fg:w="19"/><text x="67.1629%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (19 samples, 0.03%)</title><rect x="66.9129%" y="1173" width="0.0282%" height="15" fill="rgb(220,216,11)" fg:x="45025" fg:w="19"/><text x="67.1629%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (16 samples, 0.02%)</title><rect x="66.9173%" y="1157" width="0.0238%" height="15" fill="rgb(251,100,45)" fg:x="45028" fg:w="16"/><text x="67.1673%" y="1167.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="66.9173%" y="1141" width="0.0238%" height="15" fill="rgb(235,143,32)" fg:x="45028" fg:w="16"/><text x="67.1673%" y="1151.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.02%)</title><rect x="66.9173%" y="1125" width="0.0238%" height="15" fill="rgb(248,124,34)" fg:x="45028" fg:w="16"/><text x="67.1673%" y="1135.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (16 samples, 0.02%)</title><rect x="66.9173%" y="1109" width="0.0238%" height="15" fill="rgb(225,221,4)" fg:x="45028" fg:w="16"/><text x="67.1673%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.02%)</title><rect x="66.9173%" y="1093" width="0.0238%" height="15" fill="rgb(242,27,43)" fg:x="45028" fg:w="16"/><text x="67.1673%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (16 samples, 0.02%)</title><rect x="66.9173%" y="1077" width="0.0238%" height="15" fill="rgb(227,54,8)" fg:x="45028" fg:w="16"/><text x="67.1673%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (16 samples, 0.02%)</title><rect x="66.9173%" y="1061" width="0.0238%" height="15" fill="rgb(253,139,49)" fg:x="45028" fg:w="16"/><text x="67.1673%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (8 samples, 0.01%)</title><rect x="66.9292%" y="1045" width="0.0119%" height="15" fill="rgb(231,26,43)" fg:x="45036" fg:w="8"/><text x="67.1792%" y="1055.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (33 samples, 0.05%)</title><rect x="66.9411%" y="1349" width="0.0490%" height="15" fill="rgb(207,121,39)" fg:x="45044" fg:w="33"/><text x="67.1911%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (33 samples, 0.05%)</title><rect x="66.9411%" y="1333" width="0.0490%" height="15" fill="rgb(223,101,35)" fg:x="45044" fg:w="33"/><text x="67.1911%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (33 samples, 0.05%)</title><rect x="66.9411%" y="1317" width="0.0490%" height="15" fill="rgb(232,87,23)" fg:x="45044" fg:w="33"/><text x="67.1911%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (33 samples, 0.05%)</title><rect x="66.9411%" y="1301" width="0.0490%" height="15" fill="rgb(225,180,29)" fg:x="45044" fg:w="33"/><text x="67.1911%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (33 samples, 0.05%)</title><rect x="66.9411%" y="1285" width="0.0490%" height="15" fill="rgb(225,25,17)" fg:x="45044" fg:w="33"/><text x="67.1911%" y="1295.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="66.9723%" y="1269" width="0.0178%" height="15" fill="rgb(223,8,52)" fg:x="45065" fg:w="12"/><text x="67.2223%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (12 samples, 0.02%)</title><rect x="66.9723%" y="1253" width="0.0178%" height="15" fill="rgb(246,42,21)" fg:x="45065" fg:w="12"/><text x="67.2223%" y="1263.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1509" width="0.1323%" height="15" fill="rgb(205,64,43)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1519.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1493" width="0.1323%" height="15" fill="rgb(221,160,13)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1503.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1477" width="0.1323%" height="15" fill="rgb(239,58,35)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1487.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1461" width="0.1323%" height="15" fill="rgb(251,26,40)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1471.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1445" width="0.1323%" height="15" fill="rgb(247,0,4)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1455.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1429" width="0.1323%" height="15" fill="rgb(218,130,10)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1413" width="0.1323%" height="15" fill="rgb(239,32,7)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1397" width="0.1323%" height="15" fill="rgb(210,192,24)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1407.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1381" width="0.1323%" height="15" fill="rgb(226,212,17)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1391.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (89 samples, 0.13%)</title><rect x="66.8638%" y="1365" width="0.1323%" height="15" fill="rgb(219,201,28)" fg:x="44992" fg:w="89"/><text x="67.1138%" y="1375.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (9 samples, 0.01%)</title><rect x="67.0005%" y="1509" width="0.0134%" height="15" fill="rgb(235,207,41)" fg:x="45084" fg:w="9"/><text x="67.2505%" y="1519.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (11 samples, 0.02%)</title><rect x="67.0139%" y="1509" width="0.0163%" height="15" fill="rgb(241,95,54)" fg:x="45093" fg:w="11"/><text x="67.2639%" y="1519.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (29 samples, 0.04%)</title><rect x="67.0303%" y="1509" width="0.0431%" height="15" fill="rgb(248,12,23)" fg:x="45104" fg:w="29"/><text x="67.2803%" y="1519.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (12 samples, 0.02%)</title><rect x="67.1105%" y="1237" width="0.0178%" height="15" fill="rgb(228,173,4)" fg:x="45158" fg:w="12"/><text x="67.3605%" y="1247.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (9 samples, 0.01%)</title><rect x="67.1284%" y="1237" width="0.0134%" height="15" fill="rgb(254,99,5)" fg:x="45170" fg:w="9"/><text x="67.3784%" y="1247.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (10 samples, 0.01%)</title><rect x="67.1566%" y="1205" width="0.0149%" height="15" fill="rgb(212,184,17)" fg:x="45189" fg:w="10"/><text x="67.4066%" y="1215.50"></text></g><g><title>DataStream::read (10 samples, 0.01%)</title><rect x="67.1566%" y="1189" width="0.0149%" height="15" fill="rgb(252,174,1)" fg:x="45189" fg:w="10"/><text x="67.4066%" y="1199.50"></text></g><g><title>_int_malloc (18 samples, 0.03%)</title><rect x="67.1744%" y="1189" width="0.0268%" height="15" fill="rgb(241,118,51)" fg:x="45201" fg:w="18"/><text x="67.4244%" y="1199.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (21 samples, 0.03%)</title><rect x="67.1715%" y="1205" width="0.0312%" height="15" fill="rgb(227,94,47)" fg:x="45199" fg:w="21"/><text x="67.4215%" y="1215.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (74 samples, 0.11%)</title><rect x="67.0942%" y="1317" width="0.1100%" height="15" fill="rgb(229,104,2)" fg:x="45147" fg:w="74"/><text x="67.3442%" y="1327.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (74 samples, 0.11%)</title><rect x="67.0942%" y="1301" width="0.1100%" height="15" fill="rgb(219,28,31)" fg:x="45147" fg:w="74"/><text x="67.3442%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (74 samples, 0.11%)</title><rect x="67.0942%" y="1285" width="0.1100%" height="15" fill="rgb(233,109,36)" fg:x="45147" fg:w="74"/><text x="67.3442%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (74 samples, 0.11%)</title><rect x="67.0942%" y="1269" width="0.1100%" height="15" fill="rgb(246,88,11)" fg:x="45147" fg:w="74"/><text x="67.3442%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (74 samples, 0.11%)</title><rect x="67.0942%" y="1253" width="0.1100%" height="15" fill="rgb(209,212,17)" fg:x="45147" fg:w="74"/><text x="67.3442%" y="1263.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (38 samples, 0.06%)</title><rect x="67.1477%" y="1237" width="0.0565%" height="15" fill="rgb(243,59,29)" fg:x="45183" fg:w="38"/><text x="67.3977%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (38 samples, 0.06%)</title><rect x="67.1477%" y="1221" width="0.0565%" height="15" fill="rgb(244,205,48)" fg:x="45183" fg:w="38"/><text x="67.3977%" y="1231.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (88 samples, 0.13%)</title><rect x="67.0853%" y="1365" width="0.1308%" height="15" fill="rgb(227,30,6)" fg:x="45141" fg:w="88"/><text x="67.3353%" y="1375.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (88 samples, 0.13%)</title><rect x="67.0853%" y="1349" width="0.1308%" height="15" fill="rgb(220,205,48)" fg:x="45141" fg:w="88"/><text x="67.3353%" y="1359.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (88 samples, 0.13%)</title><rect x="67.0853%" y="1333" width="0.1308%" height="15" fill="rgb(250,94,14)" fg:x="45141" fg:w="88"/><text x="67.3353%" y="1343.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (125 samples, 0.19%)</title><rect x="67.0734%" y="1509" width="0.1858%" height="15" fill="rgb(216,119,42)" fg:x="45133" fg:w="125"/><text x="67.3234%" y="1519.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1493" width="0.1739%" height="15" fill="rgb(232,155,0)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1503.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1477" width="0.1739%" height="15" fill="rgb(212,24,32)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1487.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1461" width="0.1739%" height="15" fill="rgb(216,69,20)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1471.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1445" width="0.1739%" height="15" fill="rgb(229,73,31)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1455.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1429" width="0.1739%" height="15" fill="rgb(224,219,20)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1439.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1413" width="0.1739%" height="15" fill="rgb(215,146,41)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1423.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1397" width="0.1739%" height="15" fill="rgb(244,71,31)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1407.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (117 samples, 0.17%)</title><rect x="67.0853%" y="1381" width="0.1739%" height="15" fill="rgb(224,24,11)" fg:x="45141" fg:w="117"/><text x="67.3353%" y="1391.50"></text></g><g><title>malloc (28 samples, 0.04%)</title><rect x="67.2175%" y="1365" width="0.0416%" height="15" fill="rgb(229,76,15)" fg:x="45230" fg:w="28"/><text x="67.4675%" y="1375.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (8 samples, 0.01%)</title><rect x="67.2889%" y="1381" width="0.0119%" height="15" fill="rgb(209,93,2)" fg:x="45278" fg:w="8"/><text x="67.5389%" y="1391.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="67.2889%" y="1365" width="0.0119%" height="15" fill="rgb(216,200,50)" fg:x="45278" fg:w="8"/><text x="67.5389%" y="1375.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.01%)</title><rect x="67.2889%" y="1349" width="0.0119%" height="15" fill="rgb(211,67,34)" fg:x="45278" fg:w="8"/><text x="67.5389%" y="1359.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (8 samples, 0.01%)</title><rect x="67.2889%" y="1333" width="0.0119%" height="15" fill="rgb(225,87,47)" fg:x="45278" fg:w="8"/><text x="67.5389%" y="1343.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (8 samples, 0.01%)</title><rect x="67.2889%" y="1317" width="0.0119%" height="15" fill="rgb(217,185,16)" fg:x="45278" fg:w="8"/><text x="67.5389%" y="1327.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (8 samples, 0.01%)</title><rect x="67.2889%" y="1301" width="0.0119%" height="15" fill="rgb(205,0,0)" fg:x="45278" fg:w="8"/><text x="67.5389%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (29 samples, 0.04%)</title><rect x="67.2591%" y="1509" width="0.0431%" height="15" fill="rgb(207,116,45)" fg:x="45258" fg:w="29"/><text x="67.5091%" y="1519.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (12 samples, 0.02%)</title><rect x="67.2844%" y="1493" width="0.0178%" height="15" fill="rgb(221,156,26)" fg:x="45275" fg:w="12"/><text x="67.5344%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (12 samples, 0.02%)</title><rect x="67.2844%" y="1477" width="0.0178%" height="15" fill="rgb(213,140,4)" fg:x="45275" fg:w="12"/><text x="67.5344%" y="1487.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="67.2844%" y="1461" width="0.0178%" height="15" fill="rgb(231,224,15)" fg:x="45275" fg:w="12"/><text x="67.5344%" y="1471.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.02%)</title><rect x="67.2844%" y="1445" width="0.0178%" height="15" fill="rgb(244,76,20)" fg:x="45275" fg:w="12"/><text x="67.5344%" y="1455.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (12 samples, 0.02%)</title><rect x="67.2844%" y="1429" width="0.0178%" height="15" fill="rgb(238,117,7)" fg:x="45275" fg:w="12"/><text x="67.5344%" y="1439.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (12 samples, 0.02%)</title><rect x="67.2844%" y="1413" width="0.0178%" height="15" fill="rgb(235,1,10)" fg:x="45275" fg:w="12"/><text x="67.5344%" y="1423.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (12 samples, 0.02%)</title><rect x="67.2844%" y="1397" width="0.0178%" height="15" fill="rgb(216,165,6)" fg:x="45275" fg:w="12"/><text x="67.5344%" y="1407.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (30 samples, 0.04%)</title><rect x="67.3022%" y="1509" width="0.0446%" height="15" fill="rgb(246,91,35)" fg:x="45287" fg:w="30"/><text x="67.5522%" y="1519.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (7 samples, 0.01%)</title><rect x="67.3513%" y="1509" width="0.0104%" height="15" fill="rgb(228,96,24)" fg:x="45320" fg:w="7"/><text x="67.6013%" y="1519.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (50 samples, 0.07%)</title><rect x="67.3617%" y="1509" width="0.0743%" height="15" fill="rgb(254,217,53)" fg:x="45327" fg:w="50"/><text x="67.6117%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.02%)</title><rect x="67.4196%" y="1493" width="0.0163%" height="15" fill="rgb(209,60,0)" fg:x="45366" fg:w="11"/><text x="67.6696%" y="1503.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (9 samples, 0.01%)</title><rect x="67.4226%" y="1477" width="0.0134%" height="15" fill="rgb(250,93,26)" fg:x="45368" fg:w="9"/><text x="67.6726%" y="1487.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="67.4360%" y="1509" width="0.0104%" height="15" fill="rgb(211,9,40)" fg:x="45377" fg:w="7"/><text x="67.6860%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.01%)</title><rect x="67.4360%" y="1493" width="0.0104%" height="15" fill="rgb(242,57,20)" fg:x="45377" fg:w="7"/><text x="67.6860%" y="1503.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (7 samples, 0.01%)</title><rect x="67.4360%" y="1477" width="0.0104%" height="15" fill="rgb(248,85,48)" fg:x="45377" fg:w="7"/><text x="67.6860%" y="1487.50"></text></g><g><title>HashWriter::write (7 samples, 0.01%)</title><rect x="67.4360%" y="1461" width="0.0104%" height="15" fill="rgb(212,117,2)" fg:x="45377" fg:w="7"/><text x="67.6860%" y="1471.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (47 samples, 0.07%)</title><rect x="67.4464%" y="1509" width="0.0698%" height="15" fill="rgb(243,19,3)" fg:x="45384" fg:w="47"/><text x="67.6964%" y="1519.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (54 samples, 0.08%)</title><rect x="67.5162%" y="1509" width="0.0803%" height="15" fill="rgb(232,217,24)" fg:x="45431" fg:w="54"/><text x="67.7662%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (12 samples, 0.02%)</title><rect x="67.5787%" y="1493" width="0.0178%" height="15" fill="rgb(224,175,40)" fg:x="45473" fg:w="12"/><text x="67.8287%" y="1503.50"></text></g><g><title>b-msghand (45,489 samples, 67.60%)</title><rect x="0.0059%" y="1525" width="67.6024%" height="15" fill="rgb(212,162,32)" fg:x="4" fg:w="45489"/><text x="0.2559%" y="1535.50">b-msghand</text></g><g><title>DataStream::resize (305 samples, 0.45%)</title><rect x="67.6099%" y="1461" width="0.4533%" height="15" fill="rgb(215,9,4)" fg:x="45494" fg:w="305"/><text x="67.8599%" y="1471.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (305 samples, 0.45%)</title><rect x="67.6099%" y="1445" width="0.4533%" height="15" fill="rgb(242,42,7)" fg:x="45494" fg:w="305"/><text x="67.8599%" y="1455.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (305 samples, 0.45%)</title><rect x="67.6099%" y="1429" width="0.4533%" height="15" fill="rgb(242,184,45)" fg:x="45494" fg:w="305"/><text x="67.8599%" y="1439.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (305 samples, 0.45%)</title><rect x="67.6099%" y="1413" width="0.4533%" height="15" fill="rgb(228,111,51)" fg:x="45494" fg:w="305"/><text x="67.8599%" y="1423.50"></text></g><g><title>decltype  (150 samples, 0.22%)</title><rect x="67.8402%" y="1397" width="0.2229%" height="15" fill="rgb(236,147,17)" fg:x="45649" fg:w="150"/><text x="68.0902%" y="1407.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (150 samples, 0.22%)</title><rect x="67.8402%" y="1381" width="0.2229%" height="15" fill="rgb(210,75,22)" fg:x="45649" fg:w="150"/><text x="68.0902%" y="1391.50"></text></g><g><title>decltype (150 samples, 0.22%)</title><rect x="67.8402%" y="1365" width="0.2229%" height="15" fill="rgb(217,159,45)" fg:x="45649" fg:w="150"/><text x="68.0902%" y="1375.50"></text></g><g><title>V2Transport::GetReceivedMessage (359 samples, 0.53%)</title><rect x="67.6099%" y="1477" width="0.5335%" height="15" fill="rgb(245,165,53)" fg:x="45494" fg:w="359"/><text x="67.8599%" y="1487.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (54 samples, 0.08%)</title><rect x="68.0631%" y="1461" width="0.0803%" height="15" fill="rgb(251,190,50)" fg:x="45799" fg:w="54"/><text x="68.3131%" y="1471.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (54 samples, 0.08%)</title><rect x="68.0631%" y="1445" width="0.0803%" height="15" fill="rgb(208,203,29)" fg:x="45799" fg:w="54"/><text x="68.3131%" y="1455.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (54 samples, 0.08%)</title><rect x="68.0631%" y="1429" width="0.0803%" height="15" fill="rgb(207,209,35)" fg:x="45799" fg:w="54"/><text x="68.3131%" y="1439.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (54 samples, 0.08%)</title><rect x="68.0631%" y="1413" width="0.0803%" height="15" fill="rgb(230,144,49)" fg:x="45799" fg:w="54"/><text x="68.3131%" y="1423.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (54 samples, 0.08%)</title><rect x="68.0631%" y="1397" width="0.0803%" height="15" fill="rgb(229,31,6)" fg:x="45799" fg:w="54"/><text x="68.3131%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (54 samples, 0.08%)</title><rect x="68.0631%" y="1381" width="0.0803%" height="15" fill="rgb(251,129,24)" fg:x="45799" fg:w="54"/><text x="68.3131%" y="1391.50"></text></g><g><title>WriteLE32 (22 samples, 0.03%)</title><rect x="70.8377%" y="1365" width="0.0327%" height="15" fill="rgb(235,105,15)" fg:x="47666" fg:w="22"/><text x="71.0877%" y="1375.50"></text></g><g><title>ChaCha20Aligned::Crypt (22 samples, 0.03%)</title><rect x="70.8377%" y="1349" width="0.0327%" height="15" fill="rgb(216,52,43)" fg:x="47666" fg:w="22"/><text x="71.0877%" y="1359.50"></text></g><g><title>[[igc]] (9 samples, 0.01%)</title><rect x="70.8779%" y="1269" width="0.0134%" height="15" fill="rgb(238,144,41)" fg:x="47693" fg:w="9"/><text x="71.1279%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="70.8808%" y="1253" width="0.0104%" height="15" fill="rgb(243,63,9)" fg:x="47695" fg:w="7"/><text x="71.1308%" y="1263.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="70.8704%" y="1365" width="0.0401%" height="15" fill="rgb(246,208,1)" fg:x="47688" fg:w="27"/><text x="71.1204%" y="1375.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="70.8719%" y="1349" width="0.0386%" height="15" fill="rgb(233,182,18)" fg:x="47689" fg:w="26"/><text x="71.1219%" y="1359.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="70.8749%" y="1333" width="0.0357%" height="15" fill="rgb(242,224,8)" fg:x="47691" fg:w="24"/><text x="71.1249%" y="1343.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="70.8749%" y="1317" width="0.0357%" height="15" fill="rgb(243,54,37)" fg:x="47691" fg:w="24"/><text x="71.1249%" y="1327.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="70.8749%" y="1301" width="0.0357%" height="15" fill="rgb(233,192,12)" fg:x="47691" fg:w="24"/><text x="71.1249%" y="1311.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="70.8779%" y="1285" width="0.0327%" height="15" fill="rgb(251,192,53)" fg:x="47693" fg:w="22"/><text x="71.1279%" y="1295.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="70.8912%" y="1269" width="0.0193%" height="15" fill="rgb(246,141,26)" fg:x="47702" fg:w="13"/><text x="71.1412%" y="1279.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="70.8927%" y="1253" width="0.0178%" height="15" fill="rgb(239,195,19)" fg:x="47703" fg:w="12"/><text x="71.1427%" y="1263.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="70.8927%" y="1237" width="0.0178%" height="15" fill="rgb(241,16,39)" fg:x="47703" fg:w="12"/><text x="71.1427%" y="1247.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="70.8927%" y="1221" width="0.0178%" height="15" fill="rgb(223,13,53)" fg:x="47703" fg:w="12"/><text x="71.1427%" y="1231.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="70.8942%" y="1205" width="0.0163%" height="15" fill="rgb(214,227,0)" fg:x="47704" fg:w="11"/><text x="71.1442%" y="1215.50"></text></g><g><title>ChaCha20::Crypt (2,683 samples, 3.99%)</title><rect x="68.1434%" y="1397" width="3.9873%" height="15" fill="rgb(228,103,26)" fg:x="45853" fg:w="2683"/><text x="68.3934%" y="1407.50">ChaC..</text></g><g><title>ChaCha20Aligned::Crypt (2,683 samples, 3.99%)</title><rect x="68.1434%" y="1381" width="3.9873%" height="15" fill="rgb(254,177,53)" fg:x="45853" fg:w="2683"/><text x="68.3934%" y="1391.50">ChaC..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (821 samples, 1.22%)</title><rect x="70.9106%" y="1365" width="1.2201%" height="15" fill="rgb(208,201,34)" fg:x="47715" fg:w="821"/><text x="71.1606%" y="1375.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (821 samples, 1.22%)</title><rect x="70.9106%" y="1349" width="1.2201%" height="15" fill="rgb(212,39,5)" fg:x="47715" fg:w="821"/><text x="71.1606%" y="1359.50"></text></g><g><title>BIP324Cipher::Decrypt (3,891 samples, 5.78%)</title><rect x="68.1434%" y="1445" width="5.7825%" height="15" fill="rgb(246,117,3)" fg:x="45853" fg:w="3891"/><text x="68.3934%" y="1455.50">BIP324C..</text></g><g><title>FSChaCha20Poly1305::Decrypt (3,891 samples, 5.78%)</title><rect x="68.1434%" y="1429" width="5.7825%" height="15" fill="rgb(244,118,39)" fg:x="45853" fg:w="3891"/><text x="68.3934%" y="1439.50">FSChaCh..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (3,891 samples, 5.78%)</title><rect x="68.1434%" y="1413" width="5.7825%" height="15" fill="rgb(241,64,10)" fg:x="45853" fg:w="3891"/><text x="68.3934%" y="1423.50">AEADCha..</text></g><g><title>ComputeTag (1,208 samples, 1.80%)</title><rect x="72.1307%" y="1397" width="1.7952%" height="15" fill="rgb(229,39,44)" fg:x="48536" fg:w="1208"/><text x="72.3807%" y="1407.50">C..</text></g><g><title>Poly1305::Update (1,208 samples, 1.80%)</title><rect x="72.1307%" y="1381" width="1.7952%" height="15" fill="rgb(230,226,3)" fg:x="48536" fg:w="1208"/><text x="72.3807%" y="1391.50">P..</text></g><g><title>poly1305_donna::poly1305_update (1,208 samples, 1.80%)</title><rect x="72.1307%" y="1365" width="1.7952%" height="15" fill="rgb(222,13,42)" fg:x="48536" fg:w="1208"/><text x="72.3807%" y="1375.50">p..</text></g><g><title>poly1305_donna::poly1305_blocks (1,208 samples, 1.80%)</title><rect x="72.1307%" y="1349" width="1.7952%" height="15" fill="rgb(247,180,54)" fg:x="48536" fg:w="1208"/><text x="72.3807%" y="1359.50">p..</text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="73.9155%" y="1333" width="0.0104%" height="15" fill="rgb(205,96,16)" fg:x="49737" fg:w="7"/><text x="74.1655%" y="1343.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="73.9155%" y="1317" width="0.0104%" height="15" fill="rgb(205,100,21)" fg:x="49737" fg:w="7"/><text x="74.1655%" y="1327.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="73.9155%" y="1301" width="0.0104%" height="15" fill="rgb(248,51,4)" fg:x="49737" fg:w="7"/><text x="74.1655%" y="1311.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (3,938 samples, 5.85%)</title><rect x="68.1434%" y="1461" width="5.8524%" height="15" fill="rgb(217,197,30)" fg:x="45853" fg:w="3938"/><text x="68.3934%" y="1471.50">V2Trans..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (47 samples, 0.07%)</title><rect x="73.9259%" y="1445" width="0.0698%" height="15" fill="rgb(240,179,40)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1455.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (47 samples, 0.07%)</title><rect x="73.9259%" y="1429" width="0.0698%" height="15" fill="rgb(212,185,35)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1439.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1413" width="0.0698%" height="15" fill="rgb(251,222,31)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1397" width="0.0698%" height="15" fill="rgb(208,140,36)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1407.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1381" width="0.0698%" height="15" fill="rgb(220,148,1)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1391.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1365" width="0.0698%" height="15" fill="rgb(254,4,28)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1375.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1349" width="0.0698%" height="15" fill="rgb(222,185,44)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1359.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1333" width="0.0698%" height="15" fill="rgb(215,74,39)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1343.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1317" width="0.0698%" height="15" fill="rgb(247,86,4)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1327.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (47 samples, 0.07%)</title><rect x="73.9259%" y="1301" width="0.0698%" height="15" fill="rgb(231,105,32)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1311.50"></text></g><g><title>__memset_avx512_unaligned_erms (47 samples, 0.07%)</title><rect x="73.9259%" y="1285" width="0.0698%" height="15" fill="rgb(222,65,35)" fg:x="49744" fg:w="47"/><text x="74.1759%" y="1295.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (86 samples, 0.13%)</title><rect x="73.9957%" y="1461" width="0.1278%" height="15" fill="rgb(218,145,35)" fg:x="49791" fg:w="86"/><text x="74.2457%" y="1471.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1445" width="0.1263%" height="15" fill="rgb(208,7,15)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1429" width="0.1263%" height="15" fill="rgb(209,83,13)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1439.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1413" width="0.1263%" height="15" fill="rgb(218,3,10)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1397" width="0.1263%" height="15" fill="rgb(211,219,4)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1407.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1381" width="0.1263%" height="15" fill="rgb(228,194,12)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1365" width="0.1263%" height="15" fill="rgb(210,175,7)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1349" width="0.1263%" height="15" fill="rgb(243,132,6)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1333" width="0.1263%" height="15" fill="rgb(207,72,18)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (85 samples, 0.13%)</title><rect x="73.9972%" y="1317" width="0.1263%" height="15" fill="rgb(236,1,18)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (85 samples, 0.13%)</title><rect x="73.9972%" y="1301" width="0.1263%" height="15" fill="rgb(227,0,18)" fg:x="49792" fg:w="85"/><text x="74.2472%" y="1311.50"></text></g><g><title>V2Transport::ReceivedBytes (4,216 samples, 6.27%)</title><rect x="68.1434%" y="1477" width="6.2655%" height="15" fill="rgb(247,37,5)" fg:x="45853" fg:w="4216"/><text x="68.3934%" y="1487.50">V2Transp..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (192 samples, 0.29%)</title><rect x="74.1236%" y="1461" width="0.2853%" height="15" fill="rgb(237,179,24)" fg:x="49877" fg:w="192"/><text x="74.3736%" y="1471.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (192 samples, 0.29%)</title><rect x="74.1236%" y="1445" width="0.2853%" height="15" fill="rgb(226,53,20)" fg:x="49877" fg:w="192"/><text x="74.3736%" y="1455.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (192 samples, 0.29%)</title><rect x="74.1236%" y="1429" width="0.2853%" height="15" fill="rgb(247,75,7)" fg:x="49877" fg:w="192"/><text x="74.3736%" y="1439.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (192 samples, 0.29%)</title><rect x="74.1236%" y="1413" width="0.2853%" height="15" fill="rgb(233,96,12)" fg:x="49877" fg:w="192"/><text x="74.3736%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (192 samples, 0.29%)</title><rect x="74.1236%" y="1397" width="0.2853%" height="15" fill="rgb(224,125,0)" fg:x="49877" fg:w="192"/><text x="74.3736%" y="1407.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="74.3985%" y="1381" width="0.0104%" height="15" fill="rgb(224,92,25)" fg:x="50062" fg:w="7"/><text x="74.6485%" y="1391.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="74.3985%" y="1365" width="0.0104%" height="15" fill="rgb(224,42,24)" fg:x="50062" fg:w="7"/><text x="74.6485%" y="1375.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="74.3985%" y="1349" width="0.0104%" height="15" fill="rgb(234,132,49)" fg:x="50062" fg:w="7"/><text x="74.6485%" y="1359.50"></text></g><g><title>CNode::ReceiveMsgBytes (4,577 samples, 6.80%)</title><rect x="67.6084%" y="1493" width="6.8020%" height="15" fill="rgb(248,100,35)" fg:x="45493" fg:w="4577"/><text x="67.8584%" y="1503.50">CNode::Re..</text></g><g><title>[[igc]] (12 samples, 0.02%)</title><rect x="75.1505%" y="1253" width="0.0178%" height="15" fill="rgb(239,94,40)" fg:x="50568" fg:w="12"/><text x="75.4005%" y="1263.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="75.1549%" y="1237" width="0.0134%" height="15" fill="rgb(235,139,28)" fg:x="50571" fg:w="9"/><text x="75.4049%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="75.1564%" y="1221" width="0.0119%" height="15" fill="rgb(217,144,7)" fg:x="50572" fg:w="8"/><text x="75.4064%" y="1231.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="75.1564%" y="1205" width="0.0119%" height="15" fill="rgb(227,55,4)" fg:x="50572" fg:w="8"/><text x="75.4064%" y="1215.50"></text></g><g><title>__libc_recv (536 samples, 0.80%)</title><rect x="74.4134%" y="1493" width="0.7966%" height="15" fill="rgb(252,82,54)" fg:x="50072" fg:w="536"/><text x="74.6634%" y="1503.50"></text></g><g><title>[unknown] (533 samples, 0.79%)</title><rect x="74.4178%" y="1477" width="0.7921%" height="15" fill="rgb(245,172,4)" fg:x="50075" fg:w="533"/><text x="74.6678%" y="1487.50"></text></g><g><title>[unknown] (531 samples, 0.79%)</title><rect x="74.4208%" y="1461" width="0.7891%" height="15" fill="rgb(207,26,27)" fg:x="50077" fg:w="531"/><text x="74.6708%" y="1471.50"></text></g><g><title>[unknown] (530 samples, 0.79%)</title><rect x="74.4223%" y="1445" width="0.7876%" height="15" fill="rgb(252,98,18)" fg:x="50078" fg:w="530"/><text x="74.6723%" y="1455.50"></text></g><g><title>[unknown] (527 samples, 0.78%)</title><rect x="74.4267%" y="1429" width="0.7832%" height="15" fill="rgb(244,8,26)" fg:x="50081" fg:w="527"/><text x="74.6767%" y="1439.50"></text></g><g><title>[unknown] (527 samples, 0.78%)</title><rect x="74.4267%" y="1413" width="0.7832%" height="15" fill="rgb(237,173,45)" fg:x="50081" fg:w="527"/><text x="74.6767%" y="1423.50"></text></g><g><title>[unknown] (522 samples, 0.78%)</title><rect x="74.4342%" y="1397" width="0.7758%" height="15" fill="rgb(208,213,49)" fg:x="50086" fg:w="522"/><text x="74.6842%" y="1407.50"></text></g><g><title>[unknown] (520 samples, 0.77%)</title><rect x="74.4371%" y="1381" width="0.7728%" height="15" fill="rgb(212,122,37)" fg:x="50088" fg:w="520"/><text x="74.6871%" y="1391.50"></text></g><g><title>[unknown] (518 samples, 0.77%)</title><rect x="74.4401%" y="1365" width="0.7698%" height="15" fill="rgb(213,80,17)" fg:x="50090" fg:w="518"/><text x="74.6901%" y="1375.50"></text></g><g><title>[unknown] (509 samples, 0.76%)</title><rect x="74.4535%" y="1349" width="0.7564%" height="15" fill="rgb(206,210,43)" fg:x="50099" fg:w="509"/><text x="74.7035%" y="1359.50"></text></g><g><title>[unknown] (488 samples, 0.73%)</title><rect x="74.4847%" y="1333" width="0.7252%" height="15" fill="rgb(229,214,3)" fg:x="50120" fg:w="488"/><text x="74.7347%" y="1343.50"></text></g><g><title>[unknown] (456 samples, 0.68%)</title><rect x="74.5322%" y="1317" width="0.6777%" height="15" fill="rgb(235,213,29)" fg:x="50152" fg:w="456"/><text x="74.7822%" y="1327.50"></text></g><g><title>[unknown] (439 samples, 0.65%)</title><rect x="74.5575%" y="1301" width="0.6524%" height="15" fill="rgb(248,135,26)" fg:x="50169" fg:w="439"/><text x="74.8075%" y="1311.50"></text></g><g><title>[unknown] (168 samples, 0.25%)</title><rect x="74.9602%" y="1285" width="0.2497%" height="15" fill="rgb(242,188,12)" fg:x="50440" fg:w="168"/><text x="75.2102%" y="1295.50"></text></g><g><title>[unknown] (53 samples, 0.08%)</title><rect x="75.1312%" y="1269" width="0.0788%" height="15" fill="rgb(245,38,12)" fg:x="50555" fg:w="53"/><text x="75.3812%" y="1279.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="75.1683%" y="1253" width="0.0416%" height="15" fill="rgb(218,42,13)" fg:x="50580" fg:w="28"/><text x="75.4183%" y="1263.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="75.1847%" y="1237" width="0.0253%" height="15" fill="rgb(238,132,49)" fg:x="50591" fg:w="17"/><text x="75.4347%" y="1247.50"></text></g><g><title>CConnman::SocketHandlerConnected (5,117 samples, 7.60%)</title><rect x="67.6084%" y="1509" width="7.6045%" height="15" fill="rgb(209,196,19)" fg:x="45493" fg:w="5117"/><text x="67.8584%" y="1519.50">CConnman::..</text></g><g><title>[anon] (12 samples, 0.02%)</title><rect x="75.2263%" y="1509" width="0.0178%" height="15" fill="rgb(244,131,22)" fg:x="50619" fg:w="12"/><text x="75.4763%" y="1519.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="75.2441%" y="1509" width="0.0104%" height="15" fill="rgb(223,18,34)" fg:x="50631" fg:w="7"/><text x="75.4941%" y="1519.50"></text></g><g><title>CThreadInterrupt::sleep_for (10 samples, 0.01%)</title><rect x="75.2664%" y="1317" width="0.0149%" height="15" fill="rgb(252,124,54)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1327.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (10 samples, 0.01%)</title><rect x="75.2664%" y="1301" width="0.0149%" height="15" fill="rgb(229,106,42)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1311.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (10 samples, 0.01%)</title><rect x="75.2664%" y="1285" width="0.0149%" height="15" fill="rgb(221,129,1)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="75.2664%" y="1269" width="0.0149%" height="15" fill="rgb(229,74,15)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1279.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="75.2664%" y="1253" width="0.0149%" height="15" fill="rgb(210,206,50)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1263.50"></text></g><g><title>std::__condvar::wait_until (10 samples, 0.01%)</title><rect x="75.2664%" y="1237" width="0.0149%" height="15" fill="rgb(251,114,31)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1247.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (10 samples, 0.01%)</title><rect x="75.2664%" y="1221" width="0.0149%" height="15" fill="rgb(215,225,28)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1231.50"></text></g><g><title>__futex_abstimed_wait_common (10 samples, 0.01%)</title><rect x="75.2664%" y="1205" width="0.0149%" height="15" fill="rgb(237,109,14)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1215.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="75.2664%" y="1189" width="0.0149%" height="15" fill="rgb(230,13,37)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1199.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="75.2664%" y="1173" width="0.0149%" height="15" fill="rgb(231,40,28)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1183.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="75.2664%" y="1157" width="0.0149%" height="15" fill="rgb(231,202,18)" fg:x="50646" fg:w="10"/><text x="75.5164%" y="1167.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="75.2679%" y="1141" width="0.0134%" height="15" fill="rgb(225,33,18)" fg:x="50647" fg:w="9"/><text x="75.5179%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="75.2708%" y="1125" width="0.0104%" height="15" fill="rgb(223,64,47)" fg:x="50649" fg:w="7"/><text x="75.5208%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="75.2708%" y="1109" width="0.0104%" height="15" fill="rgb(234,114,13)" fg:x="50649" fg:w="7"/><text x="75.5208%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="75.2708%" y="1093" width="0.0104%" height="15" fill="rgb(248,56,40)" fg:x="50649" fg:w="7"/><text x="75.5208%" y="1103.50"></text></g><g><title>Sock::WaitMany (74 samples, 0.11%)</title><rect x="75.2827%" y="1301" width="0.1100%" height="15" fill="rgb(221,194,21)" fg:x="50657" fg:w="74"/><text x="75.5327%" y="1311.50"></text></g><g><title>__poll (74 samples, 0.11%)</title><rect x="75.2827%" y="1285" width="0.1100%" height="15" fill="rgb(242,108,46)" fg:x="50657" fg:w="74"/><text x="75.5327%" y="1295.50"></text></g><g><title>[unknown] (73 samples, 0.11%)</title><rect x="75.2842%" y="1269" width="0.1085%" height="15" fill="rgb(220,106,10)" fg:x="50658" fg:w="73"/><text x="75.5342%" y="1279.50"></text></g><g><title>[unknown] (72 samples, 0.11%)</title><rect x="75.2857%" y="1253" width="0.1070%" height="15" fill="rgb(211,88,4)" fg:x="50659" fg:w="72"/><text x="75.5357%" y="1263.50"></text></g><g><title>[unknown] (71 samples, 0.11%)</title><rect x="75.2872%" y="1237" width="0.1055%" height="15" fill="rgb(214,95,34)" fg:x="50660" fg:w="71"/><text x="75.5372%" y="1247.50"></text></g><g><title>[unknown] (68 samples, 0.10%)</title><rect x="75.2917%" y="1221" width="0.1011%" height="15" fill="rgb(250,160,33)" fg:x="50663" fg:w="68"/><text x="75.5417%" y="1231.50"></text></g><g><title>[unknown] (60 samples, 0.09%)</title><rect x="75.3035%" y="1205" width="0.0892%" height="15" fill="rgb(225,29,10)" fg:x="50671" fg:w="60"/><text x="75.5535%" y="1215.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="75.3243%" y="1189" width="0.0684%" height="15" fill="rgb(224,28,30)" fg:x="50685" fg:w="46"/><text x="75.5743%" y="1199.50"></text></g><g><title>[unknown] (38 samples, 0.06%)</title><rect x="75.3362%" y="1173" width="0.0565%" height="15" fill="rgb(231,77,4)" fg:x="50693" fg:w="38"/><text x="75.5862%" y="1183.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="75.3437%" y="1157" width="0.0490%" height="15" fill="rgb(209,63,21)" fg:x="50698" fg:w="33"/><text x="75.5937%" y="1167.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="75.3541%" y="1141" width="0.0386%" height="15" fill="rgb(226,22,11)" fg:x="50705" fg:w="26"/><text x="75.6041%" y="1151.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="75.3674%" y="1125" width="0.0253%" height="15" fill="rgb(216,82,30)" fg:x="50714" fg:w="17"/><text x="75.6174%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="75.3808%" y="1109" width="0.0119%" height="15" fill="rgb(246,227,38)" fg:x="50723" fg:w="8"/><text x="75.6308%" y="1119.50"></text></g><g><title>Sock::WaitMany (76 samples, 0.11%)</title><rect x="75.2812%" y="1317" width="0.1129%" height="15" fill="rgb(251,203,53)" fg:x="50656" fg:w="76"/><text x="75.5312%" y="1327.50"></text></g><g><title>CConnman::SocketHandler (95 samples, 0.14%)</title><rect x="75.2575%" y="1333" width="0.1412%" height="15" fill="rgb(254,101,1)" fg:x="50640" fg:w="95"/><text x="75.5075%" y="1343.50"></text></g><g><title>__clone (98 samples, 0.15%)</title><rect x="75.2545%" y="1509" width="0.1456%" height="15" fill="rgb(241,180,5)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1519.50"></text></g><g><title>start_thread (98 samples, 0.15%)</title><rect x="75.2545%" y="1493" width="0.1456%" height="15" fill="rgb(218,168,4)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1503.50"></text></g><g><title>execute_native_thread_routine (98 samples, 0.15%)</title><rect x="75.2545%" y="1477" width="0.1456%" height="15" fill="rgb(224,223,32)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1487.50"></text></g><g><title>_M_run (98 samples, 0.15%)</title><rect x="75.2545%" y="1461" width="0.1456%" height="15" fill="rgb(236,106,22)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1471.50"></text></g><g><title>operator (98 samples, 0.15%)</title><rect x="75.2545%" y="1445" width="0.1456%" height="15" fill="rgb(206,121,5)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (98 samples, 0.15%)</title><rect x="75.2545%" y="1429" width="0.1456%" height="15" fill="rgb(233,87,28)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (98 samples, 0.15%)</title><rect x="75.2545%" y="1413" width="0.1456%" height="15" fill="rgb(236,137,17)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (98 samples, 0.15%)</title><rect x="75.2545%" y="1397" width="0.1456%" height="15" fill="rgb(209,183,38)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1407.50"></text></g><g><title>util::TraceThread (98 samples, 0.15%)</title><rect x="75.2545%" y="1381" width="0.1456%" height="15" fill="rgb(206,162,44)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (98 samples, 0.15%)</title><rect x="75.2545%" y="1365" width="0.1456%" height="15" fill="rgb(237,70,39)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1375.50"></text></g><g><title>CConnman::ThreadSocketHandler (98 samples, 0.15%)</title><rect x="75.2545%" y="1349" width="0.1456%" height="15" fill="rgb(212,176,5)" fg:x="50638" fg:w="98"/><text x="75.5045%" y="1359.50"></text></g><g><title>b-net (5,246 samples, 7.80%)</title><rect x="67.6084%" y="1525" width="7.7962%" height="15" fill="rgb(232,95,16)" fg:x="45493" fg:w="5246"/><text x="67.8584%" y="1535.50">b-net</text></g><g><title>MurmurHash3 (31 samples, 0.05%)</title><rect x="75.4209%" y="1509" width="0.0461%" height="15" fill="rgb(219,115,35)" fg:x="50750" fg:w="31"/><text x="75.6709%" y="1519.50"></text></g><g><title>CRollingBloomFilter::insert (7 samples, 0.01%)</title><rect x="75.4685%" y="1493" width="0.0104%" height="15" fill="rgb(251,67,27)" fg:x="50782" fg:w="7"/><text x="75.7185%" y="1503.50"></text></g><g><title>MurmurHash3 (53 samples, 0.08%)</title><rect x="75.4789%" y="1493" width="0.0788%" height="15" fill="rgb(222,95,40)" fg:x="50789" fg:w="53"/><text x="75.7289%" y="1503.50"></text></g><g><title>[[heap]] (71 samples, 0.11%)</title><rect x="75.4685%" y="1509" width="0.1055%" height="15" fill="rgb(250,35,16)" fg:x="50782" fg:w="71"/><text x="75.7185%" y="1519.50"></text></g><g><title>_int_free (403 samples, 0.60%)</title><rect x="75.5889%" y="1493" width="0.5989%" height="15" fill="rgb(224,86,44)" fg:x="50863" fg:w="403"/><text x="75.8389%" y="1503.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="76.1759%" y="1477" width="0.0119%" height="15" fill="rgb(237,53,53)" fg:x="51258" fg:w="8"/><text x="76.4259%" y="1487.50"></text></g><g><title>_int_free_merge_chunk (18 samples, 0.03%)</title><rect x="76.1967%" y="1493" width="0.0268%" height="15" fill="rgb(208,171,33)" fg:x="51272" fg:w="18"/><text x="76.4467%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (271 samples, 0.40%)</title><rect x="76.2235%" y="1493" width="0.4027%" height="15" fill="rgb(222,64,27)" fg:x="51290" fg:w="271"/><text x="76.4735%" y="1503.50"></text></g><g><title>free@plt (14 samples, 0.02%)</title><rect x="76.6262%" y="1493" width="0.0208%" height="15" fill="rgb(221,121,35)" fg:x="51561" fg:w="14"/><text x="76.8762%" y="1503.50"></text></g><g><title>operator delete (45 samples, 0.07%)</title><rect x="76.6559%" y="1493" width="0.0669%" height="15" fill="rgb(228,137,42)" fg:x="51581" fg:w="45"/><text x="76.9059%" y="1503.50"></text></g><g><title>[anon] (776 samples, 1.15%)</title><rect x="75.5740%" y="1509" width="1.1532%" height="15" fill="rgb(227,54,21)" fg:x="50853" fg:w="776"/><text x="75.8240%" y="1519.50"></text></g><g><title>MurmurHash3 (64 samples, 0.10%)</title><rect x="76.7332%" y="1493" width="0.0951%" height="15" fill="rgb(240,168,33)" fg:x="51633" fg:w="64"/><text x="76.9832%" y="1503.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="76.8283%" y="1493" width="0.0476%" height="15" fill="rgb(243,159,6)" fg:x="51697" fg:w="32"/><text x="77.0783%" y="1503.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="76.8283%" y="1477" width="0.0476%" height="15" fill="rgb(205,211,41)" fg:x="51697" fg:w="32"/><text x="77.0783%" y="1487.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="76.8372%" y="1461" width="0.0386%" height="15" fill="rgb(253,30,1)" fg:x="51703" fg:w="26"/><text x="77.0872%" y="1471.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="76.8447%" y="1445" width="0.0312%" height="15" fill="rgb(226,80,18)" fg:x="51708" fg:w="21"/><text x="77.0947%" y="1455.50"></text></g><g><title>_int_free (82 samples, 0.12%)</title><rect x="76.8848%" y="1493" width="0.1219%" height="15" fill="rgb(253,156,46)" fg:x="51735" fg:w="82"/><text x="77.1348%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (63 samples, 0.09%)</title><rect x="77.0126%" y="1493" width="0.0936%" height="15" fill="rgb(248,87,27)" fg:x="51821" fg:w="63"/><text x="77.2626%" y="1503.50"></text></g><g><title>free@plt (7 samples, 0.01%)</title><rect x="77.1062%" y="1493" width="0.0104%" height="15" fill="rgb(227,122,2)" fg:x="51884" fg:w="7"/><text x="77.3562%" y="1503.50"></text></g><g><title>operator delete (17 samples, 0.03%)</title><rect x="77.1196%" y="1493" width="0.0253%" height="15" fill="rgb(229,94,39)" fg:x="51893" fg:w="17"/><text x="77.3696%" y="1503.50"></text></g><g><title>[unknown] (286 samples, 0.43%)</title><rect x="76.7273%" y="1509" width="0.4250%" height="15" fill="rgb(225,173,31)" fg:x="51629" fg:w="286"/><text x="76.9773%" y="1519.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (20 samples, 0.03%)</title><rect x="77.1582%" y="1333" width="0.0297%" height="15" fill="rgb(239,176,30)" fg:x="51919" fg:w="20"/><text x="77.4082%" y="1343.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (20 samples, 0.03%)</title><rect x="77.1582%" y="1317" width="0.0297%" height="15" fill="rgb(212,104,21)" fg:x="51919" fg:w="20"/><text x="77.4082%" y="1327.50"></text></g><g><title>std::__condvar::wait_until (20 samples, 0.03%)</title><rect x="77.1582%" y="1301" width="0.0297%" height="15" fill="rgb(240,209,40)" fg:x="51919" fg:w="20"/><text x="77.4082%" y="1311.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (20 samples, 0.03%)</title><rect x="77.1582%" y="1285" width="0.0297%" height="15" fill="rgb(234,195,5)" fg:x="51919" fg:w="20"/><text x="77.4082%" y="1295.50"></text></g><g><title>__futex_abstimed_wait_common (19 samples, 0.03%)</title><rect x="77.1597%" y="1269" width="0.0282%" height="15" fill="rgb(238,213,1)" fg:x="51920" fg:w="19"/><text x="77.4097%" y="1279.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="77.1597%" y="1253" width="0.0282%" height="15" fill="rgb(235,182,54)" fg:x="51920" fg:w="19"/><text x="77.4097%" y="1263.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="77.1612%" y="1237" width="0.0268%" height="15" fill="rgb(229,50,46)" fg:x="51921" fg:w="18"/><text x="77.4112%" y="1247.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="77.1612%" y="1221" width="0.0268%" height="15" fill="rgb(219,145,13)" fg:x="51921" fg:w="18"/><text x="77.4112%" y="1231.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="77.1612%" y="1205" width="0.0268%" height="15" fill="rgb(220,226,10)" fg:x="51921" fg:w="18"/><text x="77.4112%" y="1215.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="77.1627%" y="1189" width="0.0253%" height="15" fill="rgb(248,47,30)" fg:x="51922" fg:w="17"/><text x="77.4127%" y="1199.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="77.1642%" y="1173" width="0.0238%" height="15" fill="rgb(231,209,44)" fg:x="51923" fg:w="16"/><text x="77.4142%" y="1183.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="77.1657%" y="1157" width="0.0223%" height="15" fill="rgb(209,80,30)" fg:x="51924" fg:w="15"/><text x="77.4157%" y="1167.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="77.1671%" y="1141" width="0.0208%" height="15" fill="rgb(232,9,14)" fg:x="51925" fg:w="14"/><text x="77.4171%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="77.1746%" y="1125" width="0.0134%" height="15" fill="rgb(243,91,43)" fg:x="51930" fg:w="9"/><text x="77.4246%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="77.1761%" y="1109" width="0.0119%" height="15" fill="rgb(231,90,52)" fg:x="51931" fg:w="8"/><text x="77.4261%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="77.1775%" y="1093" width="0.0104%" height="15" fill="rgb(253,192,44)" fg:x="51932" fg:w="7"/><text x="77.4275%" y="1103.50"></text></g><g><title>MurmurHash3 (9 samples, 0.01%)</title><rect x="77.1984%" y="1173" width="0.0134%" height="15" fill="rgb(241,66,31)" fg:x="51946" fg:w="9"/><text x="77.4484%" y="1183.50"></text></g><g><title>CRollingBloomFilter::insert (53 samples, 0.08%)</title><rect x="78.3219%" y="1109" width="0.0788%" height="15" fill="rgb(235,81,37)" fg:x="52702" fg:w="53"/><text x="78.5719%" y="1119.50"></text></g><g><title>FastRange32 (67 samples, 0.10%)</title><rect x="78.4006%" y="1109" width="0.0996%" height="15" fill="rgb(223,221,9)" fg:x="52755" fg:w="67"/><text x="78.6506%" y="1119.50"></text></g><g><title>RollingBloomHash (34 samples, 0.05%)</title><rect x="78.5002%" y="1109" width="0.0505%" height="15" fill="rgb(242,180,7)" fg:x="52822" fg:w="34"/><text x="78.7502%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (70 samples, 0.10%)</title><rect x="78.5507%" y="1109" width="0.1040%" height="15" fill="rgb(243,78,19)" fg:x="52856" fg:w="70"/><text x="78.8007%" y="1119.50"></text></g><g><title>CRollingBloomFilter::insert (606 samples, 0.90%)</title><rect x="77.7854%" y="1125" width="0.9006%" height="15" fill="rgb(233,23,17)" fg:x="52341" fg:w="606"/><text x="78.0354%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (21 samples, 0.03%)</title><rect x="78.6548%" y="1109" width="0.0312%" height="15" fill="rgb(252,122,45)" fg:x="52926" fg:w="21"/><text x="78.9048%" y="1119.50"></text></g><g><title>[[igc]] (22 samples, 0.03%)</title><rect x="79.8333%" y="1013" width="0.0327%" height="15" fill="rgb(247,108,20)" fg:x="53719" fg:w="22"/><text x="80.0833%" y="1023.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="79.8466%" y="997" width="0.0193%" height="15" fill="rgb(235,84,21)" fg:x="53728" fg:w="13"/><text x="80.0966%" y="1007.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="79.8481%" y="981" width="0.0178%" height="15" fill="rgb(247,129,10)" fg:x="53729" fg:w="12"/><text x="80.0981%" y="991.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="79.8511%" y="965" width="0.0149%" height="15" fill="rgb(208,173,14)" fg:x="53731" fg:w="10"/><text x="80.1011%" y="975.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="79.8541%" y="949" width="0.0119%" height="15" fill="rgb(236,31,38)" fg:x="53733" fg:w="8"/><text x="80.1041%" y="959.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="79.8318%" y="1109" width="0.0476%" height="15" fill="rgb(232,65,17)" fg:x="53718" fg:w="32"/><text x="80.0818%" y="1119.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="79.8318%" y="1093" width="0.0476%" height="15" fill="rgb(224,45,49)" fg:x="53718" fg:w="32"/><text x="80.0818%" y="1103.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="79.8318%" y="1077" width="0.0476%" height="15" fill="rgb(225,2,53)" fg:x="53718" fg:w="32"/><text x="80.0818%" y="1087.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="79.8318%" y="1061" width="0.0476%" height="15" fill="rgb(248,210,53)" fg:x="53718" fg:w="32"/><text x="80.0818%" y="1071.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="79.8318%" y="1045" width="0.0476%" height="15" fill="rgb(211,1,30)" fg:x="53718" fg:w="32"/><text x="80.0818%" y="1055.50"></text></g><g><title>[unknown] (31 samples, 0.05%)</title><rect x="79.8333%" y="1029" width="0.0461%" height="15" fill="rgb(224,96,15)" fg:x="53719" fg:w="31"/><text x="80.0833%" y="1039.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="79.8674%" y="1013" width="0.0119%" height="15" fill="rgb(252,45,11)" fg:x="53742" fg:w="8"/><text x="80.1174%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="79.8674%" y="997" width="0.0119%" height="15" fill="rgb(220,125,38)" fg:x="53742" fg:w="8"/><text x="80.1174%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="79.8689%" y="981" width="0.0104%" height="15" fill="rgb(243,161,33)" fg:x="53743" fg:w="7"/><text x="80.1189%" y="991.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="79.8689%" y="965" width="0.0104%" height="15" fill="rgb(248,197,34)" fg:x="53743" fg:w="7"/><text x="80.1189%" y="975.50"></text></g><g><title>MurmurHash3 (922 samples, 1.37%)</title><rect x="78.6860%" y="1125" width="1.3702%" height="15" fill="rgb(228,165,23)" fg:x="52947" fg:w="922"/><text x="78.9360%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (119 samples, 0.18%)</title><rect x="79.8793%" y="1109" width="0.1768%" height="15" fill="rgb(236,94,38)" fg:x="53750" fg:w="119"/><text x="80.1293%" y="1119.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (119 samples, 0.18%)</title><rect x="79.8793%" y="1093" width="0.1768%" height="15" fill="rgb(220,13,23)" fg:x="53750" fg:w="119"/><text x="80.1293%" y="1103.50"></text></g><g><title>TxRequestTracker::ForgetTxHash (7 samples, 0.01%)</title><rect x="80.0562%" y="1125" width="0.0104%" height="15" fill="rgb(234,26,39)" fg:x="53869" fg:w="7"/><text x="80.3062%" y="1135.50"></text></g><g><title>CRollingBloomFilter::insert (1,612 samples, 2.40%)</title><rect x="77.6769%" y="1141" width="2.3956%" height="15" fill="rgb(205,117,44)" fg:x="52268" fg:w="1612"/><text x="77.9269%" y="1151.50">CR..</text></g><g><title>FastRange32 (88 samples, 0.13%)</title><rect x="80.0725%" y="1141" width="0.1308%" height="15" fill="rgb(250,42,2)" fg:x="53880" fg:w="88"/><text x="80.3225%" y="1151.50"></text></g><g><title>RollingBloomHash (23 samples, 0.03%)</title><rect x="80.2033%" y="1141" width="0.0342%" height="15" fill="rgb(223,83,14)" fg:x="53968" fg:w="23"/><text x="80.4533%" y="1151.50"></text></g><g><title>[[igc]] (15 samples, 0.02%)</title><rect x="80.2434%" y="1045" width="0.0223%" height="15" fill="rgb(241,147,50)" fg:x="53995" fg:w="15"/><text x="80.4934%" y="1055.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="80.2494%" y="1029" width="0.0163%" height="15" fill="rgb(218,90,6)" fg:x="53999" fg:w="11"/><text x="80.4994%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="80.2509%" y="1013" width="0.0149%" height="15" fill="rgb(210,191,5)" fg:x="54000" fg:w="10"/><text x="80.5009%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="80.2538%" y="997" width="0.0119%" height="15" fill="rgb(225,139,19)" fg:x="54002" fg:w="8"/><text x="80.5038%" y="1007.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="80.2375%" y="1141" width="0.0386%" height="15" fill="rgb(210,1,33)" fg:x="53991" fg:w="26"/><text x="80.4875%" y="1151.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="80.2375%" y="1125" width="0.0386%" height="15" fill="rgb(213,50,3)" fg:x="53991" fg:w="26"/><text x="80.4875%" y="1135.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="80.2375%" y="1109" width="0.0386%" height="15" fill="rgb(234,227,4)" fg:x="53991" fg:w="26"/><text x="80.4875%" y="1119.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="80.2405%" y="1093" width="0.0357%" height="15" fill="rgb(246,63,5)" fg:x="53993" fg:w="24"/><text x="80.4905%" y="1103.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="80.2419%" y="1077" width="0.0342%" height="15" fill="rgb(245,136,27)" fg:x="53994" fg:w="23"/><text x="80.4919%" y="1087.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="80.2434%" y="1061" width="0.0327%" height="15" fill="rgb(247,199,27)" fg:x="53995" fg:w="22"/><text x="80.4934%" y="1071.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (91 samples, 0.14%)</title><rect x="80.2761%" y="1141" width="0.1352%" height="15" fill="rgb(252,158,49)" fg:x="54017" fg:w="91"/><text x="80.5261%" y="1151.50"></text></g><g><title>CRollingBloomFilter::insert (2,174 samples, 3.23%)</title><rect x="77.2147%" y="1157" width="3.2308%" height="15" fill="rgb(254,73,1)" fg:x="51957" fg:w="2174"/><text x="77.4647%" y="1167.50">CRo..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (23 samples, 0.03%)</title><rect x="80.4114%" y="1141" width="0.0342%" height="15" fill="rgb(248,93,19)" fg:x="54108" fg:w="23"/><text x="80.6614%" y="1151.50"></text></g><g><title>MurmurHash3 (942 samples, 1.40%)</title><rect x="80.4455%" y="1157" width="1.3999%" height="15" fill="rgb(206,67,5)" fg:x="54131" fg:w="942"/><text x="80.6955%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (129 samples, 0.19%)</title><rect x="81.6538%" y="1141" width="0.1917%" height="15" fill="rgb(209,210,4)" fg:x="54944" fg:w="129"/><text x="81.9038%" y="1151.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (129 samples, 0.19%)</title><rect x="81.6538%" y="1125" width="0.1917%" height="15" fill="rgb(214,185,36)" fg:x="54944" fg:w="129"/><text x="81.9038%" y="1135.50"></text></g><g><title>TxOrphanage::EraseForBlock (11 samples, 0.02%)</title><rect x="81.9228%" y="1125" width="0.0163%" height="15" fill="rgb(233,191,26)" fg:x="55125" fg:w="11"/><text x="82.1728%" y="1135.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (27 samples, 0.04%)</title><rect x="81.9064%" y="1141" width="0.0401%" height="15" fill="rgb(248,94,17)" fg:x="55114" fg:w="27"/><text x="82.1564%" y="1151.50"></text></g><g><title>TxOrphanage::EraseForBlock (72 samples, 0.11%)</title><rect x="81.8455%" y="1157" width="0.1070%" height="15" fill="rgb(250,64,4)" fg:x="55073" fg:w="72"/><text x="82.0955%" y="1167.50"></text></g><g><title>TxRequestTracker::ForgetTxHash (9 samples, 0.01%)</title><rect x="81.9525%" y="1157" width="0.0134%" height="15" fill="rgb(218,41,53)" fg:x="55145" fg:w="9"/><text x="82.2025%" y="1167.50"></text></g><g><title>operator (3,228 samples, 4.80%)</title><rect x="77.1909%" y="1237" width="4.7972%" height="15" fill="rgb(251,176,28)" fg:x="51941" fg:w="3228"/><text x="77.4409%" y="1247.50">operat..</text></g><g><title>operator (3,227 samples, 4.80%)</title><rect x="77.1924%" y="1221" width="4.7957%" height="15" fill="rgb(247,22,9)" fg:x="51942" fg:w="3227"/><text x="77.4424%" y="1231.50">operat..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (3,227 samples, 4.80%)</title><rect x="77.1924%" y="1205" width="4.7957%" height="15" fill="rgb(218,201,14)" fg:x="51942" fg:w="3227"/><text x="77.4424%" y="1215.50">Iterat..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (3,227 samples, 4.80%)</title><rect x="77.1924%" y="1189" width="4.7957%" height="15" fill="rgb(218,94,10)" fg:x="51942" fg:w="3227"/><text x="77.4424%" y="1199.50">std::_..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (3,212 samples, 4.77%)</title><rect x="77.2147%" y="1173" width="4.7734%" height="15" fill="rgb(222,183,52)" fg:x="51957" fg:w="3212"/><text x="77.4647%" y="1183.50">node::..</text></g><g><title>std::_Rb_tree&lt;COutPoint, std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (11 samples, 0.02%)</title><rect x="81.9718%" y="1157" width="0.0163%" height="15" fill="rgb(242,140,25)" fg:x="55158" fg:w="11"/><text x="82.2218%" y="1167.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,230 samples, 4.80%)</title><rect x="77.1909%" y="1269" width="4.8002%" height="15" fill="rgb(235,197,38)" fg:x="51941" fg:w="3230"/><text x="77.4409%" y="1279.50">__invo..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (3,230 samples, 4.80%)</title><rect x="77.1909%" y="1253" width="4.8002%" height="15" fill="rgb(237,136,15)" fg:x="51941" fg:w="3230"/><text x="77.4409%" y="1263.50">__invo..</text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (15 samples, 0.02%)</title><rect x="82.0520%" y="1141" width="0.0223%" height="15" fill="rgb(223,44,49)" fg:x="55212" fg:w="15"/><text x="82.3020%" y="1151.50"></text></g><g><title>operator (64 samples, 0.10%)</title><rect x="81.9911%" y="1221" width="0.0951%" height="15" fill="rgb(227,71,15)" fg:x="55171" fg:w="64"/><text x="82.2411%" y="1231.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (64 samples, 0.10%)</title><rect x="81.9911%" y="1205" width="0.0951%" height="15" fill="rgb(225,153,20)" fg:x="55171" fg:w="64"/><text x="82.2411%" y="1215.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (64 samples, 0.10%)</title><rect x="81.9911%" y="1189" width="0.0951%" height="15" fill="rgb(210,190,26)" fg:x="55171" fg:w="64"/><text x="82.2411%" y="1199.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (64 samples, 0.10%)</title><rect x="81.9911%" y="1173" width="0.0951%" height="15" fill="rgb(223,147,5)" fg:x="55171" fg:w="64"/><text x="82.2411%" y="1183.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (63 samples, 0.09%)</title><rect x="81.9926%" y="1157" width="0.0936%" height="15" fill="rgb(207,14,23)" fg:x="55172" fg:w="63"/><text x="82.2426%" y="1167.50"></text></g><g><title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::operator[] (8 samples, 0.01%)</title><rect x="82.0743%" y="1141" width="0.0119%" height="15" fill="rgb(211,195,53)" fg:x="55227" fg:w="8"/><text x="82.3243%" y="1151.50"></text></g><g><title>operator (65 samples, 0.10%)</title><rect x="81.9911%" y="1237" width="0.0966%" height="15" fill="rgb(237,75,46)" fg:x="55171" fg:w="65"/><text x="82.2411%" y="1247.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (69 samples, 0.10%)</title><rect x="81.9911%" y="1269" width="0.1025%" height="15" fill="rgb(254,55,14)" fg:x="55171" fg:w="69"/><text x="82.2411%" y="1279.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (69 samples, 0.10%)</title><rect x="81.9911%" y="1253" width="0.1025%" height="15" fill="rgb(230,185,30)" fg:x="55171" fg:w="69"/><text x="82.2411%" y="1263.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (3,304 samples, 4.91%)</title><rect x="77.1894%" y="1301" width="4.9102%" height="15" fill="rgb(220,14,11)" fg:x="51940" fg:w="3304"/><text x="77.4394%" y="1311.50">std::f..</text></g><g><title>_M_invoke (3,303 samples, 4.91%)</title><rect x="77.1909%" y="1285" width="4.9087%" height="15" fill="rgb(215,169,44)" fg:x="51941" fg:w="3303"/><text x="77.4409%" y="1295.50">_M_inv..</text></g><g><title>cfree@GLIBC_2.2.5 (28 samples, 0.04%)</title><rect x="82.1011%" y="1125" width="0.0416%" height="15" fill="rgb(253,203,20)" fg:x="55245" fg:w="28"/><text x="82.3511%" y="1135.50"></text></g><g><title>_int_free (28 samples, 0.04%)</title><rect x="82.1011%" y="1109" width="0.0416%" height="15" fill="rgb(229,225,17)" fg:x="55245" fg:w="28"/><text x="82.3511%" y="1119.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (28 samples, 0.04%)</title><rect x="82.1011%" y="1093" width="0.0416%" height="15" fill="rgb(236,76,26)" fg:x="55245" fg:w="28"/><text x="82.3511%" y="1103.50"></text></g><g><title>malloc_consolidate (28 samples, 0.04%)</title><rect x="82.1011%" y="1077" width="0.0416%" height="15" fill="rgb(234,15,30)" fg:x="55245" fg:w="28"/><text x="82.3511%" y="1087.50"></text></g><g><title>__lll_lock_wait_private (8 samples, 0.01%)</title><rect x="82.1917%" y="853" width="0.0119%" height="15" fill="rgb(211,113,48)" fg:x="55306" fg:w="8"/><text x="82.4417%" y="863.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="82.1917%" y="837" width="0.0119%" height="15" fill="rgb(221,31,36)" fg:x="55306" fg:w="8"/><text x="82.4417%" y="847.50"></text></g><g><title>__lll_lock_wake_private (148 samples, 0.22%)</title><rect x="82.2036%" y="853" width="0.2199%" height="15" fill="rgb(215,118,52)" fg:x="55314" fg:w="148"/><text x="82.4536%" y="863.50"></text></g><g><title>[unknown] (147 samples, 0.22%)</title><rect x="82.2051%" y="837" width="0.2185%" height="15" fill="rgb(241,151,27)" fg:x="55315" fg:w="147"/><text x="82.4551%" y="847.50"></text></g><g><title>[unknown] (137 samples, 0.20%)</title><rect x="82.2200%" y="821" width="0.2036%" height="15" fill="rgb(253,51,3)" fg:x="55325" fg:w="137"/><text x="82.4700%" y="831.50"></text></g><g><title>[unknown] (126 samples, 0.19%)</title><rect x="82.2363%" y="805" width="0.1873%" height="15" fill="rgb(216,201,24)" fg:x="55336" fg:w="126"/><text x="82.4863%" y="815.50"></text></g><g><title>[unknown] (87 samples, 0.13%)</title><rect x="82.2943%" y="789" width="0.1293%" height="15" fill="rgb(231,107,4)" fg:x="55375" fg:w="87"/><text x="82.5443%" y="799.50"></text></g><g><title>[unknown] (68 samples, 0.10%)</title><rect x="82.3225%" y="773" width="0.1011%" height="15" fill="rgb(243,97,54)" fg:x="55394" fg:w="68"/><text x="82.5725%" y="783.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="82.3983%" y="757" width="0.0253%" height="15" fill="rgb(221,32,51)" fg:x="55445" fg:w="17"/><text x="82.6483%" y="767.50"></text></g><g><title>__lll_lock_wait_private (874 samples, 1.30%)</title><rect x="82.6316%" y="837" width="1.2989%" height="15" fill="rgb(218,171,35)" fg:x="55602" fg:w="874"/><text x="82.8816%" y="847.50"></text></g><g><title>[unknown] (858 samples, 1.28%)</title><rect x="82.6554%" y="821" width="1.2751%" height="15" fill="rgb(214,20,53)" fg:x="55618" fg:w="858"/><text x="82.9054%" y="831.50"></text></g><g><title>[unknown] (841 samples, 1.25%)</title><rect x="82.6807%" y="805" width="1.2498%" height="15" fill="rgb(239,9,52)" fg:x="55635" fg:w="841"/><text x="82.9307%" y="815.50"></text></g><g><title>[unknown] (825 samples, 1.23%)</title><rect x="82.7045%" y="789" width="1.2261%" height="15" fill="rgb(215,114,45)" fg:x="55651" fg:w="825"/><text x="82.9545%" y="799.50"></text></g><g><title>[unknown] (781 samples, 1.16%)</title><rect x="82.7698%" y="773" width="1.1607%" height="15" fill="rgb(208,118,9)" fg:x="55695" fg:w="781"/><text x="83.0198%" y="783.50"></text></g><g><title>[unknown] (745 samples, 1.11%)</title><rect x="82.8233%" y="757" width="1.1072%" height="15" fill="rgb(235,7,39)" fg:x="55731" fg:w="745"/><text x="83.0733%" y="767.50"></text></g><g><title>[unknown] (647 samples, 0.96%)</title><rect x="82.9690%" y="741" width="0.9615%" height="15" fill="rgb(243,225,15)" fg:x="55829" fg:w="647"/><text x="83.2190%" y="751.50"></text></g><g><title>[unknown] (600 samples, 0.89%)</title><rect x="83.0388%" y="725" width="0.8917%" height="15" fill="rgb(225,216,18)" fg:x="55876" fg:w="600"/><text x="83.2888%" y="735.50"></text></g><g><title>[unknown] (558 samples, 0.83%)</title><rect x="83.1012%" y="709" width="0.8293%" height="15" fill="rgb(233,36,38)" fg:x="55918" fg:w="558"/><text x="83.3512%" y="719.50"></text></g><g><title>[unknown] (503 samples, 0.75%)</title><rect x="83.1830%" y="693" width="0.7475%" height="15" fill="rgb(239,88,23)" fg:x="55973" fg:w="503"/><text x="83.4330%" y="703.50"></text></g><g><title>[unknown] (402 samples, 0.60%)</title><rect x="83.3331%" y="677" width="0.5974%" height="15" fill="rgb(219,181,35)" fg:x="56074" fg:w="402"/><text x="83.5831%" y="687.50"></text></g><g><title>[unknown] (228 samples, 0.34%)</title><rect x="83.5917%" y="661" width="0.3388%" height="15" fill="rgb(215,18,46)" fg:x="56248" fg:w="228"/><text x="83.8417%" y="671.50"></text></g><g><title>[unknown] (141 samples, 0.21%)</title><rect x="83.7210%" y="645" width="0.2095%" height="15" fill="rgb(241,38,11)" fg:x="56335" fg:w="141"/><text x="83.9710%" y="655.50"></text></g><g><title>[unknown] (76 samples, 0.11%)</title><rect x="83.8176%" y="629" width="0.1129%" height="15" fill="rgb(248,169,45)" fg:x="56400" fg:w="76"/><text x="84.0676%" y="639.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="83.8785%" y="613" width="0.0520%" height="15" fill="rgb(239,50,49)" fg:x="56441" fg:w="35"/><text x="84.1285%" y="623.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="83.8919%" y="597" width="0.0386%" height="15" fill="rgb(231,96,31)" fg:x="56450" fg:w="26"/><text x="84.1419%" y="607.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="83.9156%" y="581" width="0.0149%" height="15" fill="rgb(224,193,37)" fg:x="56466" fg:w="10"/><text x="84.1656%" y="591.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (45 samples, 0.07%)</title><rect x="83.9320%" y="837" width="0.0669%" height="15" fill="rgb(227,153,50)" fg:x="56477" fg:w="45"/><text x="84.1820%" y="847.50"></text></g><g><title>malloc_consolidate (45 samples, 0.07%)</title><rect x="83.9320%" y="821" width="0.0669%" height="15" fill="rgb(249,228,3)" fg:x="56477" fg:w="45"/><text x="84.1820%" y="831.50"></text></g><g><title>_int_free_merge_chunk (12 samples, 0.02%)</title><rect x="83.9989%" y="837" width="0.0178%" height="15" fill="rgb(219,164,43)" fg:x="56522" fg:w="12"/><text x="84.2489%" y="847.50"></text></g><g><title>_int_free (1,075 samples, 1.60%)</title><rect x="82.4236%" y="853" width="1.5976%" height="15" fill="rgb(216,45,41)" fg:x="55462" fg:w="1075"/><text x="82.6736%" y="863.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,251 samples, 1.86%)</title><rect x="82.1665%" y="869" width="1.8591%" height="15" fill="rgb(210,226,51)" fg:x="55289" fg:w="1251"/><text x="82.4165%" y="879.50">c..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (10 samples, 0.01%)</title><rect x="84.0316%" y="869" width="0.0149%" height="15" fill="rgb(209,117,49)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (10 samples, 0.01%)</title><rect x="84.0316%" y="853" width="0.0149%" height="15" fill="rgb(206,196,24)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="863.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (10 samples, 0.01%)</title><rect x="84.0316%" y="837" width="0.0149%" height="15" fill="rgb(253,218,3)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="847.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (10 samples, 0.01%)</title><rect x="84.0316%" y="821" width="0.0149%" height="15" fill="rgb(252,166,2)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="831.50"></text></g><g><title>CBlock::~CBlock (10 samples, 0.01%)</title><rect x="84.0316%" y="805" width="0.0149%" height="15" fill="rgb(236,218,26)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="815.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (10 samples, 0.01%)</title><rect x="84.0316%" y="789" width="0.0149%" height="15" fill="rgb(254,84,19)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="799.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (10 samples, 0.01%)</title><rect x="84.0316%" y="773" width="0.0149%" height="15" fill="rgb(219,137,29)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="783.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (10 samples, 0.01%)</title><rect x="84.0316%" y="757" width="0.0149%" height="15" fill="rgb(227,47,52)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (10 samples, 0.01%)</title><rect x="84.0316%" y="741" width="0.0149%" height="15" fill="rgb(229,167,24)" fg:x="56544" fg:w="10"/><text x="84.2816%" y="751.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="84.0360%" y="725" width="0.0104%" height="15" fill="rgb(233,164,1)" fg:x="56547" fg:w="7"/><text x="84.2860%" y="735.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (7 samples, 0.01%)</title><rect x="84.0360%" y="709" width="0.0104%" height="15" fill="rgb(218,88,48)" fg:x="56547" fg:w="7"/><text x="84.2860%" y="719.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (7 samples, 0.01%)</title><rect x="84.0360%" y="693" width="0.0104%" height="15" fill="rgb(226,214,24)" fg:x="56547" fg:w="7"/><text x="84.2860%" y="703.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (7 samples, 0.01%)</title><rect x="84.0360%" y="677" width="0.0104%" height="15" fill="rgb(233,29,12)" fg:x="56547" fg:w="7"/><text x="84.2860%" y="687.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (7 samples, 0.01%)</title><rect x="84.0360%" y="661" width="0.0104%" height="15" fill="rgb(219,120,34)" fg:x="56547" fg:w="7"/><text x="84.2860%" y="671.50"></text></g><g><title>_int_free (24 samples, 0.04%)</title><rect x="84.0613%" y="629" width="0.0357%" height="15" fill="rgb(226,78,44)" fg:x="56564" fg:w="24"/><text x="84.3113%" y="639.50"></text></g><g><title>__lll_lock_wait_private (14 samples, 0.02%)</title><rect x="84.0761%" y="613" width="0.0208%" height="15" fill="rgb(240,15,48)" fg:x="56574" fg:w="14"/><text x="84.3261%" y="623.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="84.0761%" y="597" width="0.0208%" height="15" fill="rgb(253,176,7)" fg:x="56574" fg:w="14"/><text x="84.3261%" y="607.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="84.0776%" y="581" width="0.0193%" height="15" fill="rgb(206,166,28)" fg:x="56575" fg:w="13"/><text x="84.3276%" y="591.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="84.0776%" y="565" width="0.0193%" height="15" fill="rgb(241,53,51)" fg:x="56575" fg:w="13"/><text x="84.3276%" y="575.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="84.0791%" y="549" width="0.0178%" height="15" fill="rgb(249,112,30)" fg:x="56576" fg:w="12"/><text x="84.3291%" y="559.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="84.0806%" y="533" width="0.0163%" height="15" fill="rgb(217,85,30)" fg:x="56577" fg:w="11"/><text x="84.3306%" y="543.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="84.0821%" y="517" width="0.0149%" height="15" fill="rgb(233,49,7)" fg:x="56578" fg:w="10"/><text x="84.3321%" y="527.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="84.0836%" y="501" width="0.0134%" height="15" fill="rgb(234,109,9)" fg:x="56579" fg:w="9"/><text x="84.3336%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="84.0851%" y="485" width="0.0119%" height="15" fill="rgb(253,95,22)" fg:x="56580" fg:w="8"/><text x="84.3351%" y="495.50"></text></g><g><title>CScript::~CScript (31 samples, 0.05%)</title><rect x="84.0568%" y="677" width="0.0461%" height="15" fill="rgb(233,176,25)" fg:x="56561" fg:w="31"/><text x="84.3068%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (31 samples, 0.05%)</title><rect x="84.0568%" y="661" width="0.0461%" height="15" fill="rgb(236,33,39)" fg:x="56561" fg:w="31"/><text x="84.3068%" y="671.50"></text></g><g><title>cfree@GLIBC_2.2.5 (30 samples, 0.04%)</title><rect x="84.0583%" y="645" width="0.0446%" height="15" fill="rgb(223,226,42)" fg:x="56562" fg:w="30"/><text x="84.3083%" y="655.50"></text></g><g><title>_int_free (115 samples, 0.17%)</title><rect x="84.1296%" y="549" width="0.1709%" height="15" fill="rgb(216,99,33)" fg:x="56610" fg:w="115"/><text x="84.3796%" y="559.50"></text></g><g><title>cfree@GLIBC_2.2.5 (139 samples, 0.21%)</title><rect x="84.1133%" y="565" width="0.2066%" height="15" fill="rgb(235,84,23)" fg:x="56599" fg:w="139"/><text x="84.3633%" y="575.50"></text></g><g><title>operator delete (7 samples, 0.01%)</title><rect x="84.3095%" y="549" width="0.0104%" height="15" fill="rgb(232,2,27)" fg:x="56731" fg:w="7"/><text x="84.5595%" y="559.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (146 samples, 0.22%)</title><rect x="84.1074%" y="645" width="0.2170%" height="15" fill="rgb(241,23,22)" fg:x="56595" fg:w="146"/><text x="84.3574%" y="655.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (143 samples, 0.21%)</title><rect x="84.1118%" y="629" width="0.2125%" height="15" fill="rgb(211,73,27)" fg:x="56598" fg:w="143"/><text x="84.3618%" y="639.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (143 samples, 0.21%)</title><rect x="84.1118%" y="613" width="0.2125%" height="15" fill="rgb(235,109,49)" fg:x="56598" fg:w="143"/><text x="84.3618%" y="623.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (143 samples, 0.21%)</title><rect x="84.1118%" y="597" width="0.2125%" height="15" fill="rgb(230,99,29)" fg:x="56598" fg:w="143"/><text x="84.3618%" y="607.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (143 samples, 0.21%)</title><rect x="84.1118%" y="581" width="0.2125%" height="15" fill="rgb(245,199,7)" fg:x="56598" fg:w="143"/><text x="84.3618%" y="591.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.01%)</title><rect x="84.4076%" y="453" width="0.0104%" height="15" fill="rgb(217,179,10)" fg:x="56797" fg:w="7"/><text x="84.6576%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="84.4076%" y="437" width="0.0104%" height="15" fill="rgb(254,99,47)" fg:x="56797" fg:w="7"/><text x="84.6576%" y="447.50"></text></g><g><title>__lll_lock_wait_private (35 samples, 0.05%)</title><rect x="84.5591%" y="437" width="0.0520%" height="15" fill="rgb(251,121,7)" fg:x="56899" fg:w="35"/><text x="84.8091%" y="447.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="84.5606%" y="421" width="0.0505%" height="15" fill="rgb(250,177,26)" fg:x="56900" fg:w="34"/><text x="84.8106%" y="431.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="84.5606%" y="405" width="0.0505%" height="15" fill="rgb(232,88,15)" fg:x="56900" fg:w="34"/><text x="84.8106%" y="415.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="84.5621%" y="389" width="0.0490%" height="15" fill="rgb(251,54,54)" fg:x="56901" fg:w="33"/><text x="84.8121%" y="399.50"></text></g><g><title>[unknown] (31 samples, 0.05%)</title><rect x="84.5651%" y="373" width="0.0461%" height="15" fill="rgb(208,177,15)" fg:x="56903" fg:w="31"/><text x="84.8151%" y="383.50"></text></g><g><title>[unknown] (31 samples, 0.05%)</title><rect x="84.5651%" y="357" width="0.0461%" height="15" fill="rgb(205,97,32)" fg:x="56903" fg:w="31"/><text x="84.8151%" y="367.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="84.5710%" y="341" width="0.0401%" height="15" fill="rgb(217,192,13)" fg:x="56907" fg:w="27"/><text x="84.8210%" y="351.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="84.5710%" y="325" width="0.0401%" height="15" fill="rgb(215,163,41)" fg:x="56907" fg:w="27"/><text x="84.8210%" y="335.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="84.5725%" y="309" width="0.0386%" height="15" fill="rgb(246,83,29)" fg:x="56908" fg:w="26"/><text x="84.8225%" y="319.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="84.5755%" y="293" width="0.0357%" height="15" fill="rgb(219,2,45)" fg:x="56910" fg:w="24"/><text x="84.8255%" y="303.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="84.5799%" y="277" width="0.0312%" height="15" fill="rgb(242,215,33)" fg:x="56913" fg:w="21"/><text x="84.8299%" y="287.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="84.5889%" y="261" width="0.0223%" height="15" fill="rgb(217,1,6)" fg:x="56919" fg:w="15"/><text x="84.8389%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="84.6008%" y="245" width="0.0104%" height="15" fill="rgb(207,85,52)" fg:x="56927" fg:w="7"/><text x="84.8508%" y="255.50"></text></g><g><title>_int_free (136 samples, 0.20%)</title><rect x="84.4180%" y="453" width="0.2021%" height="15" fill="rgb(231,171,19)" fg:x="56804" fg:w="136"/><text x="84.6680%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 0.01%)</title><rect x="84.6275%" y="453" width="0.0104%" height="15" fill="rgb(207,128,4)" fg:x="56945" fg:w="7"/><text x="84.8775%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (201 samples, 0.30%)</title><rect x="84.3570%" y="469" width="0.2987%" height="15" fill="rgb(219,208,4)" fg:x="56763" fg:w="201"/><text x="84.6070%" y="479.50"></text></g><g><title>operator delete (8 samples, 0.01%)</title><rect x="84.6438%" y="453" width="0.0119%" height="15" fill="rgb(235,161,42)" fg:x="56956" fg:w="8"/><text x="84.8938%" y="463.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (418 samples, 0.62%)</title><rect x="84.0509%" y="789" width="0.6212%" height="15" fill="rgb(247,218,18)" fg:x="56557" fg:w="418"/><text x="84.3009%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (416 samples, 0.62%)</title><rect x="84.0539%" y="773" width="0.6182%" height="15" fill="rgb(232,114,51)" fg:x="56559" fg:w="416"/><text x="84.3039%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (416 samples, 0.62%)</title><rect x="84.0539%" y="757" width="0.6182%" height="15" fill="rgb(222,95,3)" fg:x="56559" fg:w="416"/><text x="84.3039%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (416 samples, 0.62%)</title><rect x="84.0539%" y="741" width="0.6182%" height="15" fill="rgb(240,65,29)" fg:x="56559" fg:w="416"/><text x="84.3039%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (414 samples, 0.62%)</title><rect x="84.0568%" y="725" width="0.6153%" height="15" fill="rgb(249,209,20)" fg:x="56561" fg:w="414"/><text x="84.3068%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (414 samples, 0.62%)</title><rect x="84.0568%" y="709" width="0.6153%" height="15" fill="rgb(241,48,37)" fg:x="56561" fg:w="414"/><text x="84.3068%" y="719.50"></text></g><g><title>CTxIn::~CTxIn (414 samples, 0.62%)</title><rect x="84.0568%" y="693" width="0.6153%" height="15" fill="rgb(230,140,42)" fg:x="56561" fg:w="414"/><text x="84.3068%" y="703.50"></text></g><g><title>CScriptWitness::~CScriptWitness (383 samples, 0.57%)</title><rect x="84.1029%" y="677" width="0.5692%" height="15" fill="rgb(230,176,45)" fg:x="56592" fg:w="383"/><text x="84.3529%" y="687.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (383 samples, 0.57%)</title><rect x="84.1029%" y="661" width="0.5692%" height="15" fill="rgb(245,112,21)" fg:x="56592" fg:w="383"/><text x="84.3529%" y="671.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (234 samples, 0.35%)</title><rect x="84.3243%" y="645" width="0.3478%" height="15" fill="rgb(207,183,35)" fg:x="56741" fg:w="234"/><text x="84.5743%" y="655.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (234 samples, 0.35%)</title><rect x="84.3243%" y="629" width="0.3478%" height="15" fill="rgb(227,44,33)" fg:x="56741" fg:w="234"/><text x="84.5743%" y="639.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (234 samples, 0.35%)</title><rect x="84.3243%" y="613" width="0.3478%" height="15" fill="rgb(246,120,21)" fg:x="56741" fg:w="234"/><text x="84.5743%" y="623.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (230 samples, 0.34%)</title><rect x="84.3303%" y="597" width="0.3418%" height="15" fill="rgb(235,57,52)" fg:x="56745" fg:w="230"/><text x="84.5803%" y="607.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (230 samples, 0.34%)</title><rect x="84.3303%" y="581" width="0.3418%" height="15" fill="rgb(238,84,10)" fg:x="56745" fg:w="230"/><text x="84.5803%" y="591.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (230 samples, 0.34%)</title><rect x="84.3303%" y="565" width="0.3418%" height="15" fill="rgb(251,200,32)" fg:x="56745" fg:w="230"/><text x="84.5803%" y="575.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (230 samples, 0.34%)</title><rect x="84.3303%" y="549" width="0.3418%" height="15" fill="rgb(247,159,13)" fg:x="56745" fg:w="230"/><text x="84.5803%" y="559.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (225 samples, 0.33%)</title><rect x="84.3377%" y="533" width="0.3344%" height="15" fill="rgb(238,64,4)" fg:x="56750" fg:w="225"/><text x="84.5877%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (215 samples, 0.32%)</title><rect x="84.3526%" y="517" width="0.3195%" height="15" fill="rgb(221,131,51)" fg:x="56760" fg:w="215"/><text x="84.6026%" y="527.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (215 samples, 0.32%)</title><rect x="84.3526%" y="501" width="0.3195%" height="15" fill="rgb(242,5,29)" fg:x="56760" fg:w="215"/><text x="84.6026%" y="511.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (215 samples, 0.32%)</title><rect x="84.3526%" y="485" width="0.3195%" height="15" fill="rgb(214,130,32)" fg:x="56760" fg:w="215"/><text x="84.6026%" y="495.50"></text></g><g><title>__lll_lock_wait_private (45 samples, 0.07%)</title><rect x="84.7375%" y="661" width="0.0669%" height="15" fill="rgb(244,210,16)" fg:x="57019" fg:w="45"/><text x="84.9875%" y="671.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="84.7390%" y="645" width="0.0654%" height="15" fill="rgb(234,48,26)" fg:x="57020" fg:w="44"/><text x="84.9890%" y="655.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="84.7390%" y="629" width="0.0654%" height="15" fill="rgb(231,82,38)" fg:x="57020" fg:w="44"/><text x="84.9890%" y="639.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="84.7390%" y="613" width="0.0654%" height="15" fill="rgb(254,128,41)" fg:x="57020" fg:w="44"/><text x="84.9890%" y="623.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="84.7390%" y="597" width="0.0654%" height="15" fill="rgb(212,73,49)" fg:x="57020" fg:w="44"/><text x="84.9890%" y="607.50"></text></g><g><title>[unknown] (41 samples, 0.06%)</title><rect x="84.7434%" y="581" width="0.0609%" height="15" fill="rgb(205,62,54)" fg:x="57023" fg:w="41"/><text x="84.9934%" y="591.50"></text></g><g><title>[unknown] (38 samples, 0.06%)</title><rect x="84.7479%" y="565" width="0.0565%" height="15" fill="rgb(228,0,8)" fg:x="57026" fg:w="38"/><text x="84.9979%" y="575.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="84.7538%" y="549" width="0.0505%" height="15" fill="rgb(251,28,17)" fg:x="57030" fg:w="34"/><text x="85.0038%" y="559.50"></text></g><g><title>[unknown] (32 samples, 0.05%)</title><rect x="84.7568%" y="533" width="0.0476%" height="15" fill="rgb(238,105,27)" fg:x="57032" fg:w="32"/><text x="85.0068%" y="543.50"></text></g><g><title>[unknown] (29 samples, 0.04%)</title><rect x="84.7613%" y="517" width="0.0431%" height="15" fill="rgb(237,216,33)" fg:x="57035" fg:w="29"/><text x="85.0113%" y="527.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="84.7687%" y="501" width="0.0357%" height="15" fill="rgb(229,228,25)" fg:x="57040" fg:w="24"/><text x="85.0187%" y="511.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="84.7806%" y="485" width="0.0238%" height="15" fill="rgb(233,75,23)" fg:x="57048" fg:w="16"/><text x="85.0306%" y="495.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="84.7865%" y="469" width="0.0178%" height="15" fill="rgb(231,207,16)" fg:x="57052" fg:w="12"/><text x="85.0365%" y="479.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="84.7910%" y="453" width="0.0134%" height="15" fill="rgb(231,191,45)" fg:x="57055" fg:w="9"/><text x="85.0410%" y="463.50"></text></g><g><title>_int_free (78 samples, 0.12%)</title><rect x="84.6974%" y="677" width="0.1159%" height="15" fill="rgb(224,133,17)" fg:x="56992" fg:w="78"/><text x="84.9474%" y="687.50"></text></g><g><title>cfree@GLIBC_2.2.5 (90 samples, 0.13%)</title><rect x="84.6869%" y="693" width="0.1338%" height="15" fill="rgb(209,178,27)" fg:x="56985" fg:w="90"/><text x="84.9369%" y="703.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (103 samples, 0.15%)</title><rect x="84.6721%" y="773" width="0.1531%" height="15" fill="rgb(218,37,11)" fg:x="56975" fg:w="103"/><text x="84.9221%" y="783.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (99 samples, 0.15%)</title><rect x="84.6780%" y="757" width="0.1471%" height="15" fill="rgb(251,226,25)" fg:x="56979" fg:w="99"/><text x="84.9280%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (97 samples, 0.14%)</title><rect x="84.6810%" y="741" width="0.1442%" height="15" fill="rgb(209,222,27)" fg:x="56981" fg:w="97"/><text x="84.9310%" y="751.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (97 samples, 0.14%)</title><rect x="84.6810%" y="725" width="0.1442%" height="15" fill="rgb(238,22,21)" fg:x="56981" fg:w="97"/><text x="84.9310%" y="735.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (97 samples, 0.14%)</title><rect x="84.6810%" y="709" width="0.1442%" height="15" fill="rgb(233,161,25)" fg:x="56981" fg:w="97"/><text x="84.9310%" y="719.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="84.9054%" y="629" width="0.0178%" height="15" fill="rgb(226,122,53)" fg:x="57132" fg:w="12"/><text x="85.1554%" y="639.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1125" width="2.7835%" height="15" fill="rgb(220,123,17)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1135.50">st..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1109" width="2.7835%" height="15" fill="rgb(230,224,35)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1119.50">vo..</text></g><g><title>void std::_Destroy&lt;CBlock&gt; (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1093" width="2.7835%" height="15" fill="rgb(246,83,8)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1103.50">vo..</text></g><g><title>void std::destroy_at&lt;CBlock&gt; (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1077" width="2.7835%" height="15" fill="rgb(230,214,17)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1087.50">vo..</text></g><g><title>CBlock::~CBlock (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1061" width="2.7835%" height="15" fill="rgb(222,97,18)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1071.50">CB..</text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1045" width="2.7835%" height="15" fill="rgb(206,79,1)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1055.50">st..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1029" width="2.7835%" height="15" fill="rgb(214,121,34)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1039.50">vo..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (1,873 samples, 2.78%)</title><rect x="82.1427%" y="1013" width="2.7835%" height="15" fill="rgb(249,199,46)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1023.50">vo..</text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (1,873 samples, 2.78%)</title><rect x="82.1427%" y="997" width="2.7835%" height="15" fill="rgb(214,222,46)" fg:x="55273" fg:w="1873"/><text x="82.3927%" y="1007.50">vo..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (1,870 samples, 2.78%)</title><rect x="82.1472%" y="981" width="2.7791%" height="15" fill="rgb(248,168,30)" fg:x="55276" fg:w="1870"/><text x="82.3972%" y="991.50">vo..</text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (1,870 samples, 2.78%)</title><rect x="82.1472%" y="965" width="2.7791%" height="15" fill="rgb(226,14,28)" fg:x="55276" fg:w="1870"/><text x="82.3972%" y="975.50">vo..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (1,870 samples, 2.78%)</title><rect x="82.1472%" y="949" width="2.7791%" height="15" fill="rgb(253,123,1)" fg:x="55276" fg:w="1870"/><text x="82.3972%" y="959.50">st..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1,870 samples, 2.78%)</title><rect x="82.1472%" y="933" width="2.7791%" height="15" fill="rgb(225,24,42)" fg:x="55276" fg:w="1870"/><text x="82.3972%" y="943.50">st..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1,870 samples, 2.78%)</title><rect x="82.1472%" y="917" width="2.7791%" height="15" fill="rgb(216,161,37)" fg:x="55276" fg:w="1870"/><text x="82.3972%" y="927.50">st..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,868 samples, 2.78%)</title><rect x="82.1501%" y="901" width="2.7761%" height="15" fill="rgb(251,164,26)" fg:x="55278" fg:w="1868"/><text x="82.4001%" y="911.50">st..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,858 samples, 2.76%)</title><rect x="82.1650%" y="885" width="2.7612%" height="15" fill="rgb(219,177,3)" fg:x="55288" fg:w="1858"/><text x="82.4150%" y="895.50">st..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (592 samples, 0.88%)</title><rect x="84.0464%" y="869" width="0.8798%" height="15" fill="rgb(222,65,0)" fg:x="56554" fg:w="592"/><text x="84.2964%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (589 samples, 0.88%)</title><rect x="84.0509%" y="853" width="0.8753%" height="15" fill="rgb(223,69,54)" fg:x="56557" fg:w="589"/><text x="84.3009%" y="863.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (589 samples, 0.88%)</title><rect x="84.0509%" y="837" width="0.8753%" height="15" fill="rgb(235,30,27)" fg:x="56557" fg:w="589"/><text x="84.3009%" y="847.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (589 samples, 0.88%)</title><rect x="84.0509%" y="821" width="0.8753%" height="15" fill="rgb(220,183,50)" fg:x="56557" fg:w="589"/><text x="84.3009%" y="831.50"></text></g><g><title>CTransaction::~CTransaction (589 samples, 0.88%)</title><rect x="84.0509%" y="805" width="0.8753%" height="15" fill="rgb(248,198,15)" fg:x="56557" fg:w="589"/><text x="84.3009%" y="815.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (171 samples, 0.25%)</title><rect x="84.6721%" y="789" width="0.2541%" height="15" fill="rgb(222,211,4)" fg:x="56975" fg:w="171"/><text x="84.9221%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (68 samples, 0.10%)</title><rect x="84.8252%" y="773" width="0.1011%" height="15" fill="rgb(214,102,34)" fg:x="57078" fg:w="68"/><text x="85.0752%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (68 samples, 0.10%)</title><rect x="84.8252%" y="757" width="0.1011%" height="15" fill="rgb(245,92,5)" fg:x="57078" fg:w="68"/><text x="85.0752%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (68 samples, 0.10%)</title><rect x="84.8252%" y="741" width="0.1011%" height="15" fill="rgb(252,72,51)" fg:x="57078" fg:w="68"/><text x="85.0752%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (51 samples, 0.08%)</title><rect x="84.8504%" y="725" width="0.0758%" height="15" fill="rgb(252,208,19)" fg:x="57095" fg:w="51"/><text x="85.1004%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (51 samples, 0.08%)</title><rect x="84.8504%" y="709" width="0.0758%" height="15" fill="rgb(211,69,7)" fg:x="57095" fg:w="51"/><text x="85.1004%" y="719.50"></text></g><g><title>CTxOut::~CTxOut (51 samples, 0.08%)</title><rect x="84.8504%" y="693" width="0.0758%" height="15" fill="rgb(211,27,16)" fg:x="57095" fg:w="51"/><text x="85.1004%" y="703.50"></text></g><g><title>CScript::~CScript (51 samples, 0.08%)</title><rect x="84.8504%" y="677" width="0.0758%" height="15" fill="rgb(219,216,14)" fg:x="57095" fg:w="51"/><text x="85.1004%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (51 samples, 0.08%)</title><rect x="84.8504%" y="661" width="0.0758%" height="15" fill="rgb(219,71,8)" fg:x="57095" fg:w="51"/><text x="85.1004%" y="671.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18 samples, 0.03%)</title><rect x="84.8995%" y="645" width="0.0268%" height="15" fill="rgb(223,170,53)" fg:x="57128" fg:w="18"/><text x="85.1495%" y="655.50"></text></g><g><title>SerialTaskRunner::ProcessQueue (5,209 samples, 7.74%)</title><rect x="77.1880%" y="1317" width="7.7412%" height="15" fill="rgb(246,21,26)" fg:x="51939" fg:w="5209"/><text x="77.4380%" y="1327.50">SerialTaskR..</text></g><g><title>std::function&lt;void ()&gt;::~function (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1301" width="2.8296%" height="15" fill="rgb(248,20,46)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1311.50">st..</text></g><g><title>std::_Function_base::~_Function_base (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1285" width="2.8296%" height="15" fill="rgb(252,94,11)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1295.50">st..</text></g><g><title>_M_manager (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1269" width="2.8296%" height="15" fill="rgb(236,163,8)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1279.50">_M..</text></g><g><title>_M_manager (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1253" width="2.8296%" height="15" fill="rgb(217,221,45)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1263.50">_M..</text></g><g><title>_M_destroy (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1237" width="2.8296%" height="15" fill="rgb(238,38,17)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1247.50">_M..</text></g><g><title>~&lt;lambda&gt; (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1221" width="2.8296%" height="15" fill="rgb(242,210,23)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1231.50">~&lt;..</text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1205" width="2.8296%" height="15" fill="rgb(250,86,53)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1215.50">st..</text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1189" width="2.8296%" height="15" fill="rgb(223,168,25)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1199.50">st..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1173" width="2.8296%" height="15" fill="rgb(251,189,4)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1183.50">st..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,904 samples, 2.83%)</title><rect x="82.0996%" y="1157" width="2.8296%" height="15" fill="rgb(245,19,28)" fg:x="55244" fg:w="1904"/><text x="82.3496%" y="1167.50">st..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1,903 samples, 2.83%)</title><rect x="82.1011%" y="1141" width="2.8281%" height="15" fill="rgb(207,10,34)" fg:x="55245" fg:w="1903"/><text x="82.3511%" y="1151.50">st..</text></g><g><title>__clone (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1509" width="7.7903%" height="15" fill="rgb(235,153,31)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1519.50">__clone</text></g><g><title>start_thread (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1493" width="7.7903%" height="15" fill="rgb(228,72,37)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1503.50">start_thread</text></g><g><title>execute_native_thread_routine (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1477" width="7.7903%" height="15" fill="rgb(215,15,16)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1487.50">execute_nat..</text></g><g><title>_M_run (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1461" width="7.7903%" height="15" fill="rgb(250,119,29)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1471.50">_M_run</text></g><g><title>operator (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1445" width="7.7903%" height="15" fill="rgb(214,59,1)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1429" width="7.7903%" height="15" fill="rgb(223,109,25)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1439.50">_M_invoke&lt;0..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1413" width="7.7903%" height="15" fill="rgb(230,198,22)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1423.50">__invoke&lt;vo..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1397" width="7.7903%" height="15" fill="rgb(245,184,46)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1407.50">std::thread..</text></g><g><title>util::TraceThread (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1381" width="7.7903%" height="15" fill="rgb(253,73,16)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1391.50">util::Trace..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1365" width="7.7903%" height="15" fill="rgb(206,94,45)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1375.50">std::functi..</text></g><g><title>CScheduler::serviceQueue (5,242 samples, 7.79%)</title><rect x="77.1523%" y="1349" width="7.7903%" height="15" fill="rgb(236,83,27)" fg:x="51915" fg:w="5242"/><text x="77.4023%" y="1359.50">CScheduler:..</text></g><g><title>std::function&lt;void ()&gt;::operator (5,218 samples, 7.75%)</title><rect x="77.1880%" y="1333" width="7.7546%" height="15" fill="rgb(220,196,8)" fg:x="51939" fg:w="5218"/><text x="77.4380%" y="1343.50">std::functi..</text></g><g><title>_M_invoke (9 samples, 0.01%)</title><rect x="84.9292%" y="1317" width="0.0134%" height="15" fill="rgb(254,185,14)" fg:x="57148" fg:w="9"/><text x="85.1792%" y="1327.50"></text></g><g><title>__invoke_r&lt;void, Repeat(CScheduler&amp;, CScheduler::Function, std::chrono::milliseconds)::&lt;lambda()&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="84.9307%" y="1301" width="0.0119%" height="15" fill="rgb(226,50,22)" fg:x="57149" fg:w="8"/><text x="85.1807%" y="1311.50"></text></g><g><title>__invoke_impl&lt;void, Repeat(CScheduler&amp;, CScheduler::Function, std::chrono::milliseconds)::&lt;lambda()&gt;&amp;&gt; (8 samples, 0.01%)</title><rect x="84.9307%" y="1285" width="0.0119%" height="15" fill="rgb(253,147,0)" fg:x="57149" fg:w="8"/><text x="85.1807%" y="1295.50"></text></g><g><title>std::_Function_handler&lt;void (), Repeat(CScheduler&amp;, std::function&lt;void ()&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;)::{lambda()#1}&gt;::_M_invoke (8 samples, 0.01%)</title><rect x="84.9307%" y="1269" width="0.0119%" height="15" fill="rgb(252,46,33)" fg:x="57149" fg:w="8"/><text x="85.1807%" y="1279.50"></text></g><g><title>Repeat (8 samples, 0.01%)</title><rect x="84.9307%" y="1253" width="0.0119%" height="15" fill="rgb(242,22,54)" fg:x="57149" fg:w="8"/><text x="85.1807%" y="1263.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (8 samples, 0.01%)</title><rect x="84.9307%" y="1237" width="0.0119%" height="15" fill="rgb(223,178,32)" fg:x="57149" fg:w="8"/><text x="85.1807%" y="1247.50"></text></g><g><title>_int_free (53 samples, 0.08%)</title><rect x="84.9426%" y="1509" width="0.0788%" height="15" fill="rgb(214,106,53)" fg:x="57157" fg:w="53"/><text x="85.1926%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (220 samples, 0.33%)</title><rect x="85.0288%" y="1509" width="0.3269%" height="15" fill="rgb(232,65,50)" fg:x="57215" fg:w="220"/><text x="85.2788%" y="1519.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (113 samples, 0.17%)</title><rect x="85.3631%" y="1509" width="0.1679%" height="15" fill="rgb(231,110,28)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (113 samples, 0.17%)</title><rect x="85.3631%" y="1493" width="0.1679%" height="15" fill="rgb(216,71,40)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (113 samples, 0.17%)</title><rect x="85.3631%" y="1477" width="0.1679%" height="15" fill="rgb(229,89,53)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (113 samples, 0.17%)</title><rect x="85.3631%" y="1461" width="0.1679%" height="15" fill="rgb(210,124,14)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1471.50"></text></g><g><title>CBlock::~CBlock (113 samples, 0.17%)</title><rect x="85.3631%" y="1445" width="0.1679%" height="15" fill="rgb(236,213,6)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1455.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (113 samples, 0.17%)</title><rect x="85.3631%" y="1429" width="0.1679%" height="15" fill="rgb(228,41,5)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (113 samples, 0.17%)</title><rect x="85.3631%" y="1413" width="0.1679%" height="15" fill="rgb(221,167,25)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (113 samples, 0.17%)</title><rect x="85.3631%" y="1397" width="0.1679%" height="15" fill="rgb(228,144,37)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (113 samples, 0.17%)</title><rect x="85.3631%" y="1381" width="0.1679%" height="15" fill="rgb(227,189,38)" fg:x="57440" fg:w="113"/><text x="85.6131%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (111 samples, 0.16%)</title><rect x="85.3661%" y="1365" width="0.1650%" height="15" fill="rgb(218,8,2)" fg:x="57442" fg:w="111"/><text x="85.6161%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (111 samples, 0.16%)</title><rect x="85.3661%" y="1349" width="0.1650%" height="15" fill="rgb(209,61,28)" fg:x="57442" fg:w="111"/><text x="85.6161%" y="1359.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (111 samples, 0.16%)</title><rect x="85.3661%" y="1333" width="0.1650%" height="15" fill="rgb(233,140,39)" fg:x="57442" fg:w="111"/><text x="85.6161%" y="1343.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (111 samples, 0.16%)</title><rect x="85.3661%" y="1317" width="0.1650%" height="15" fill="rgb(251,66,48)" fg:x="57442" fg:w="111"/><text x="85.6161%" y="1327.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (111 samples, 0.16%)</title><rect x="85.3661%" y="1301" width="0.1650%" height="15" fill="rgb(210,44,45)" fg:x="57442" fg:w="111"/><text x="85.6161%" y="1311.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (109 samples, 0.16%)</title><rect x="85.3691%" y="1285" width="0.1620%" height="15" fill="rgb(214,136,46)" fg:x="57444" fg:w="109"/><text x="85.6191%" y="1295.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (106 samples, 0.16%)</title><rect x="85.3735%" y="1269" width="0.1575%" height="15" fill="rgb(207,130,50)" fg:x="57447" fg:w="106"/><text x="85.6235%" y="1279.50"></text></g><g><title>_int_free (102 samples, 0.15%)</title><rect x="85.3795%" y="1253" width="0.1516%" height="15" fill="rgb(228,102,49)" fg:x="57451" fg:w="102"/><text x="85.6295%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (13 samples, 0.02%)</title><rect x="85.5757%" y="1285" width="0.0193%" height="15" fill="rgb(253,55,1)" fg:x="57583" fg:w="13"/><text x="85.8257%" y="1295.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (8 samples, 0.01%)</title><rect x="85.5831%" y="1269" width="0.0119%" height="15" fill="rgb(238,222,9)" fg:x="57588" fg:w="8"/><text x="85.8331%" y="1279.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (66 samples, 0.10%)</title><rect x="85.5444%" y="1429" width="0.0981%" height="15" fill="rgb(246,99,6)" fg:x="57562" fg:w="66"/><text x="85.7944%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (57 samples, 0.08%)</title><rect x="85.5578%" y="1413" width="0.0847%" height="15" fill="rgb(219,110,26)" fg:x="57571" fg:w="57"/><text x="85.8078%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (57 samples, 0.08%)</title><rect x="85.5578%" y="1397" width="0.0847%" height="15" fill="rgb(239,160,33)" fg:x="57571" fg:w="57"/><text x="85.8078%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (57 samples, 0.08%)</title><rect x="85.5578%" y="1381" width="0.0847%" height="15" fill="rgb(220,202,23)" fg:x="57571" fg:w="57"/><text x="85.8078%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (52 samples, 0.08%)</title><rect x="85.5652%" y="1365" width="0.0773%" height="15" fill="rgb(208,80,26)" fg:x="57576" fg:w="52"/><text x="85.8152%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (52 samples, 0.08%)</title><rect x="85.5652%" y="1349" width="0.0773%" height="15" fill="rgb(243,85,7)" fg:x="57576" fg:w="52"/><text x="85.8152%" y="1359.50"></text></g><g><title>CTxIn::~CTxIn (52 samples, 0.08%)</title><rect x="85.5652%" y="1333" width="0.0773%" height="15" fill="rgb(228,77,47)" fg:x="57576" fg:w="52"/><text x="85.8152%" y="1343.50"></text></g><g><title>CScriptWitness::~CScriptWitness (47 samples, 0.07%)</title><rect x="85.5727%" y="1317" width="0.0698%" height="15" fill="rgb(212,226,8)" fg:x="57581" fg:w="47"/><text x="85.8227%" y="1327.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (47 samples, 0.07%)</title><rect x="85.5727%" y="1301" width="0.0698%" height="15" fill="rgb(241,120,54)" fg:x="57581" fg:w="47"/><text x="85.8227%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (32 samples, 0.05%)</title><rect x="85.5950%" y="1285" width="0.0476%" height="15" fill="rgb(226,80,16)" fg:x="57596" fg:w="32"/><text x="85.8450%" y="1295.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (32 samples, 0.05%)</title><rect x="85.5950%" y="1269" width="0.0476%" height="15" fill="rgb(240,76,13)" fg:x="57596" fg:w="32"/><text x="85.8450%" y="1279.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (32 samples, 0.05%)</title><rect x="85.5950%" y="1253" width="0.0476%" height="15" fill="rgb(252,74,8)" fg:x="57596" fg:w="32"/><text x="85.8450%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (26 samples, 0.04%)</title><rect x="85.6039%" y="1237" width="0.0386%" height="15" fill="rgb(244,155,2)" fg:x="57602" fg:w="26"/><text x="85.8539%" y="1247.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (26 samples, 0.04%)</title><rect x="85.6039%" y="1221" width="0.0386%" height="15" fill="rgb(215,81,35)" fg:x="57602" fg:w="26"/><text x="85.8539%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (26 samples, 0.04%)</title><rect x="85.6039%" y="1205" width="0.0386%" height="15" fill="rgb(206,55,2)" fg:x="57602" fg:w="26"/><text x="85.8539%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (26 samples, 0.04%)</title><rect x="85.6039%" y="1189" width="0.0386%" height="15" fill="rgb(231,2,34)" fg:x="57602" fg:w="26"/><text x="85.8539%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (17 samples, 0.03%)</title><rect x="85.6173%" y="1173" width="0.0253%" height="15" fill="rgb(242,176,48)" fg:x="57611" fg:w="17"/><text x="85.8673%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (13 samples, 0.02%)</title><rect x="85.6232%" y="1157" width="0.0193%" height="15" fill="rgb(249,31,36)" fg:x="57615" fg:w="13"/><text x="85.8732%" y="1167.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (13 samples, 0.02%)</title><rect x="85.6232%" y="1141" width="0.0193%" height="15" fill="rgb(205,18,17)" fg:x="57615" fg:w="13"/><text x="85.8732%" y="1151.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (13 samples, 0.02%)</title><rect x="85.6232%" y="1125" width="0.0193%" height="15" fill="rgb(254,130,5)" fg:x="57615" fg:w="13"/><text x="85.8732%" y="1135.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (102 samples, 0.15%)</title><rect x="85.5340%" y="1509" width="0.1516%" height="15" fill="rgb(229,42,45)" fg:x="57555" fg:w="102"/><text x="85.7840%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (95 samples, 0.14%)</title><rect x="85.5444%" y="1493" width="0.1412%" height="15" fill="rgb(245,95,25)" fg:x="57562" fg:w="95"/><text x="85.7944%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (95 samples, 0.14%)</title><rect x="85.5444%" y="1477" width="0.1412%" height="15" fill="rgb(249,193,38)" fg:x="57562" fg:w="95"/><text x="85.7944%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (95 samples, 0.14%)</title><rect x="85.5444%" y="1461" width="0.1412%" height="15" fill="rgb(241,140,43)" fg:x="57562" fg:w="95"/><text x="85.7944%" y="1471.50"></text></g><g><title>CTransaction::~CTransaction (95 samples, 0.14%)</title><rect x="85.5444%" y="1445" width="0.1412%" height="15" fill="rgb(245,78,48)" fg:x="57562" fg:w="95"/><text x="85.7944%" y="1455.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (29 samples, 0.04%)</title><rect x="85.6425%" y="1429" width="0.0431%" height="15" fill="rgb(214,92,39)" fg:x="57628" fg:w="29"/><text x="85.8925%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (24 samples, 0.04%)</title><rect x="85.6500%" y="1413" width="0.0357%" height="15" fill="rgb(211,189,14)" fg:x="57633" fg:w="24"/><text x="85.9000%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (24 samples, 0.04%)</title><rect x="85.6500%" y="1397" width="0.0357%" height="15" fill="rgb(218,7,24)" fg:x="57633" fg:w="24"/><text x="85.9000%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (24 samples, 0.04%)</title><rect x="85.6500%" y="1381" width="0.0357%" height="15" fill="rgb(224,200,49)" fg:x="57633" fg:w="24"/><text x="85.9000%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (17 samples, 0.03%)</title><rect x="85.6604%" y="1365" width="0.0253%" height="15" fill="rgb(218,210,14)" fg:x="57640" fg:w="17"/><text x="85.9104%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (17 samples, 0.03%)</title><rect x="85.6604%" y="1349" width="0.0253%" height="15" fill="rgb(234,142,31)" fg:x="57640" fg:w="17"/><text x="85.9104%" y="1359.50"></text></g><g><title>CTxOut::~CTxOut (17 samples, 0.03%)</title><rect x="85.6604%" y="1333" width="0.0253%" height="15" fill="rgb(227,165,2)" fg:x="57640" fg:w="17"/><text x="85.9104%" y="1343.50"></text></g><g><title>CScript::~CScript (17 samples, 0.03%)</title><rect x="85.6604%" y="1317" width="0.0253%" height="15" fill="rgb(232,44,46)" fg:x="57640" fg:w="17"/><text x="85.9104%" y="1327.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (17 samples, 0.03%)</title><rect x="85.6604%" y="1301" width="0.0253%" height="15" fill="rgb(236,149,47)" fg:x="57640" fg:w="17"/><text x="85.9104%" y="1311.50"></text></g><g><title>b-scheduler (6,913 samples, 10.27%)</title><rect x="75.4135%" y="1525" width="10.2736%" height="15" fill="rgb(227,45,31)" fg:x="50745" fg:w="6913"/><text x="75.6635%" y="1535.50">b-scheduler</text></g><g><title>__memcmp_evex_movbe (14 samples, 0.02%)</title><rect x="85.7258%" y="1493" width="0.0208%" height="15" fill="rgb(240,176,51)" fg:x="57684" fg:w="14"/><text x="85.9758%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (8 samples, 0.01%)</title><rect x="85.7466%" y="1493" width="0.0119%" height="15" fill="rgb(249,146,41)" fg:x="57698" fg:w="8"/><text x="85.9966%" y="1503.50"></text></g><g><title>_int_free (32 samples, 0.05%)</title><rect x="85.7584%" y="1493" width="0.0476%" height="15" fill="rgb(213,208,4)" fg:x="57706" fg:w="32"/><text x="86.0084%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.01%)</title><rect x="85.8090%" y="1493" width="0.0134%" height="15" fill="rgb(245,84,36)" fg:x="57740" fg:w="9"/><text x="86.0590%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.01%)</title><rect x="85.8223%" y="1493" width="0.0149%" height="15" fill="rgb(254,84,18)" fg:x="57749" fg:w="10"/><text x="86.0723%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (18 samples, 0.03%)</title><rect x="85.8417%" y="1493" width="0.0268%" height="15" fill="rgb(225,38,54)" fg:x="57762" fg:w="18"/><text x="86.0917%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (11 samples, 0.02%)</title><rect x="85.8684%" y="1493" width="0.0163%" height="15" fill="rgb(246,50,30)" fg:x="57780" fg:w="11"/><text x="86.1184%" y="1503.50"></text></g><g><title>[[heap]] (158 samples, 0.23%)</title><rect x="85.7258%" y="1509" width="0.2348%" height="15" fill="rgb(246,148,9)" fg:x="57684" fg:w="158"/><text x="85.9758%" y="1519.50"></text></g><g><title>malloc_consolidate (50 samples, 0.07%)</title><rect x="85.8863%" y="1493" width="0.0743%" height="15" fill="rgb(223,75,4)" fg:x="57792" fg:w="50"/><text x="86.1363%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (78 samples, 0.12%)</title><rect x="85.9650%" y="1493" width="0.1159%" height="15" fill="rgb(239,148,41)" fg:x="57845" fg:w="78"/><text x="86.2150%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (7 samples, 0.01%)</title><rect x="86.0809%" y="1493" width="0.0104%" height="15" fill="rgb(205,195,3)" fg:x="57923" fg:w="7"/><text x="86.3309%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (71 samples, 0.11%)</title><rect x="86.0958%" y="1493" width="0.1055%" height="15" fill="rgb(254,161,1)" fg:x="57933" fg:w="71"/><text x="86.3458%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (115 samples, 0.17%)</title><rect x="86.2162%" y="1493" width="0.1709%" height="15" fill="rgb(211,229,8)" fg:x="58014" fg:w="115"/><text x="86.4662%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (36 samples, 0.05%)</title><rect x="86.3871%" y="1493" width="0.0535%" height="15" fill="rgb(220,97,9)" fg:x="58129" fg:w="36"/><text x="86.6371%" y="1503.50"></text></g><g><title>memcmp@plt (20 samples, 0.03%)</title><rect x="86.4540%" y="1493" width="0.0297%" height="15" fill="rgb(240,218,8)" fg:x="58174" fg:w="20"/><text x="86.7040%" y="1503.50"></text></g><g><title>[[stack]] (360 samples, 0.54%)</title><rect x="85.9606%" y="1509" width="0.5350%" height="15" fill="rgb(250,44,0)" fg:x="57842" fg:w="360"/><text x="86.2106%" y="1519.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (7 samples, 0.01%)</title><rect x="86.4852%" y="1493" width="0.0104%" height="15" fill="rgb(236,41,53)" fg:x="58195" fg:w="7"/><text x="86.7352%" y="1503.50"></text></g><g><title>[anon] (9 samples, 0.01%)</title><rect x="86.4956%" y="1509" width="0.0134%" height="15" fill="rgb(218,227,13)" fg:x="58202" fg:w="9"/><text x="86.7456%" y="1519.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1493" width="0.0401%" height="15" fill="rgb(217,94,32)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1503.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1477" width="0.0401%" height="15" fill="rgb(213,217,12)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1487.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1461" width="0.0401%" height="15" fill="rgb(229,13,46)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1471.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1445" width="0.0401%" height="15" fill="rgb(243,139,5)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1455.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1429" width="0.0401%" height="15" fill="rgb(249,38,45)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1439.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1413" width="0.0401%" height="15" fill="rgb(216,70,11)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1423.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1397" width="0.0401%" height="15" fill="rgb(253,101,25)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1407.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="86.5104%" y="1381" width="0.0401%" height="15" fill="rgb(207,197,30)" fg:x="58212" fg:w="27"/><text x="86.7604%" y="1391.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="86.5149%" y="1365" width="0.0357%" height="15" fill="rgb(238,87,13)" fg:x="58215" fg:w="24"/><text x="86.7649%" y="1375.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="86.5179%" y="1349" width="0.0327%" height="15" fill="rgb(215,155,8)" fg:x="58217" fg:w="22"/><text x="86.7679%" y="1359.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="86.5253%" y="1333" width="0.0253%" height="15" fill="rgb(239,166,38)" fg:x="58222" fg:w="17"/><text x="86.7753%" y="1343.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="86.5357%" y="1317" width="0.0149%" height="15" fill="rgb(240,194,35)" fg:x="58229" fg:w="10"/><text x="86.7857%" y="1327.50"></text></g><g><title>__memcmp_evex_movbe (10 samples, 0.01%)</title><rect x="86.5506%" y="1493" width="0.0149%" height="15" fill="rgb(219,10,44)" fg:x="58239" fg:w="10"/><text x="86.8006%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (12 samples, 0.02%)</title><rect x="86.5803%" y="1493" width="0.0178%" height="15" fill="rgb(251,220,35)" fg:x="58259" fg:w="12"/><text x="86.8303%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (21 samples, 0.03%)</title><rect x="86.6055%" y="1493" width="0.0312%" height="15" fill="rgb(218,117,13)" fg:x="58276" fg:w="21"/><text x="86.8555%" y="1503.50"></text></g><g><title>[unknown] (115 samples, 0.17%)</title><rect x="86.5089%" y="1509" width="0.1709%" height="15" fill="rgb(221,213,40)" fg:x="58211" fg:w="115"/><text x="86.7589%" y="1519.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (58 samples, 0.09%)</title><rect x="86.6873%" y="1365" width="0.0862%" height="15" fill="rgb(251,224,35)" fg:x="58331" fg:w="58"/><text x="86.9373%" y="1375.50"></text></g><g><title>cfree@GLIBC_2.2.5 (58 samples, 0.09%)</title><rect x="86.6873%" y="1349" width="0.0862%" height="15" fill="rgb(241,33,39)" fg:x="58331" fg:w="58"/><text x="86.9373%" y="1359.50"></text></g><g><title>_int_free (58 samples, 0.09%)</title><rect x="86.6873%" y="1333" width="0.0862%" height="15" fill="rgb(222,74,17)" fg:x="58331" fg:w="58"/><text x="86.9373%" y="1343.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (58 samples, 0.09%)</title><rect x="86.6873%" y="1317" width="0.0862%" height="15" fill="rgb(225,103,0)" fg:x="58331" fg:w="58"/><text x="86.9373%" y="1327.50"></text></g><g><title>malloc_consolidate (58 samples, 0.09%)</title><rect x="86.6873%" y="1301" width="0.0862%" height="15" fill="rgb(240,0,12)" fg:x="58331" fg:w="58"/><text x="86.9373%" y="1311.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="86.7631%" y="1285" width="0.0104%" height="15" fill="rgb(233,213,37)" fg:x="58382" fg:w="7"/><text x="87.0131%" y="1295.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (61 samples, 0.09%)</title><rect x="86.6873%" y="1381" width="0.0907%" height="15" fill="rgb(225,84,52)" fg:x="58331" fg:w="61"/><text x="86.9373%" y="1391.50"></text></g><g><title>leveldb::PutVarint32 (7 samples, 0.01%)</title><rect x="86.7839%" y="1317" width="0.0104%" height="15" fill="rgb(247,160,51)" fg:x="58396" fg:w="7"/><text x="87.0339%" y="1327.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (7 samples, 0.01%)</title><rect x="86.7839%" y="1301" width="0.0104%" height="15" fill="rgb(244,60,51)" fg:x="58396" fg:w="7"/><text x="87.0339%" y="1311.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (25 samples, 0.04%)</title><rect x="86.7839%" y="1333" width="0.0372%" height="15" fill="rgb(233,114,7)" fg:x="58396" fg:w="25"/><text x="87.0339%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (14 samples, 0.02%)</title><rect x="86.8002%" y="1317" width="0.0208%" height="15" fill="rgb(246,136,16)" fg:x="58407" fg:w="14"/><text x="87.0502%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (14 samples, 0.02%)</title><rect x="86.8002%" y="1301" width="0.0208%" height="15" fill="rgb(243,114,45)" fg:x="58407" fg:w="14"/><text x="87.0502%" y="1311.50"></text></g><g><title>leveldb::WriteBatch::Delete (31 samples, 0.05%)</title><rect x="86.8210%" y="1333" width="0.0461%" height="15" fill="rgb(247,183,43)" fg:x="58421" fg:w="31"/><text x="87.0710%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (31 samples, 0.05%)</title><rect x="86.8210%" y="1317" width="0.0461%" height="15" fill="rgb(251,210,42)" fg:x="58421" fg:w="31"/><text x="87.0710%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (28 samples, 0.04%)</title><rect x="86.8255%" y="1301" width="0.0416%" height="15" fill="rgb(221,88,35)" fg:x="58424" fg:w="28"/><text x="87.0755%" y="1311.50"></text></g><g><title>decltype  (21 samples, 0.03%)</title><rect x="86.8359%" y="1285" width="0.0312%" height="15" fill="rgb(242,21,20)" fg:x="58431" fg:w="21"/><text x="87.0859%" y="1295.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (21 samples, 0.03%)</title><rect x="86.8359%" y="1269" width="0.0312%" height="15" fill="rgb(233,226,36)" fg:x="58431" fg:w="21"/><text x="87.0859%" y="1279.50"></text></g><g><title>decltype (21 samples, 0.03%)</title><rect x="86.8359%" y="1253" width="0.0312%" height="15" fill="rgb(243,189,34)" fg:x="58431" fg:w="21"/><text x="87.0859%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (35 samples, 0.05%)</title><rect x="86.8730%" y="1317" width="0.0520%" height="15" fill="rgb(207,145,50)" fg:x="58456" fg:w="35"/><text x="87.1230%" y="1327.50"></text></g><g><title>decltype  (30 samples, 0.04%)</title><rect x="86.8805%" y="1301" width="0.0446%" height="15" fill="rgb(242,1,50)" fg:x="58461" fg:w="30"/><text x="87.1305%" y="1311.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (30 samples, 0.04%)</title><rect x="86.8805%" y="1285" width="0.0446%" height="15" fill="rgb(231,65,32)" fg:x="58461" fg:w="30"/><text x="87.1305%" y="1295.50"></text></g><g><title>decltype (30 samples, 0.04%)</title><rect x="86.8805%" y="1269" width="0.0446%" height="15" fill="rgb(208,68,49)" fg:x="58461" fg:w="30"/><text x="87.1305%" y="1279.50"></text></g><g><title>CDBBatch::EraseImpl (99 samples, 0.15%)</title><rect x="86.7794%" y="1349" width="0.1471%" height="15" fill="rgb(253,54,49)" fg:x="58393" fg:w="99"/><text x="87.0294%" y="1359.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (38 samples, 0.06%)</title><rect x="86.8701%" y="1333" width="0.0565%" height="15" fill="rgb(245,186,24)" fg:x="58454" fg:w="38"/><text x="87.1201%" y="1343.50"></text></g><g><title>DataStream::Xor (16 samples, 0.02%)</title><rect x="86.9340%" y="1301" width="0.0238%" height="15" fill="rgb(209,2,41)" fg:x="58497" fg:w="16"/><text x="87.1840%" y="1311.50"></text></g><g><title>util::Xor (16 samples, 0.02%)</title><rect x="86.9340%" y="1285" width="0.0238%" height="15" fill="rgb(242,208,54)" fg:x="58497" fg:w="16"/><text x="87.1840%" y="1295.50"></text></g><g><title>CDBBatch::WriteImpl (21 samples, 0.03%)</title><rect x="86.9310%" y="1317" width="0.0312%" height="15" fill="rgb(225,9,51)" fg:x="58495" fg:w="21"/><text x="87.1810%" y="1327.50"></text></g><g><title>leveldb::PutVarint32 (16 samples, 0.02%)</title><rect x="86.9622%" y="1317" width="0.0238%" height="15" fill="rgb(207,207,25)" fg:x="58516" fg:w="16"/><text x="87.2122%" y="1327.50"></text></g><g><title>CDBBatch::WriteImpl (16 samples, 0.02%)</title><rect x="86.9622%" y="1301" width="0.0238%" height="15" fill="rgb(253,96,18)" fg:x="58516" fg:w="16"/><text x="87.2122%" y="1311.50"></text></g><g><title>DataStream::Xor (16 samples, 0.02%)</title><rect x="86.9622%" y="1285" width="0.0238%" height="15" fill="rgb(252,215,20)" fg:x="58516" fg:w="16"/><text x="87.2122%" y="1295.50"></text></g><g><title>util::Xor (16 samples, 0.02%)</title><rect x="86.9622%" y="1269" width="0.0238%" height="15" fill="rgb(245,227,26)" fg:x="58516" fg:w="16"/><text x="87.2122%" y="1279.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (45 samples, 0.07%)</title><rect x="86.9310%" y="1333" width="0.0669%" height="15" fill="rgb(241,208,0)" fg:x="58495" fg:w="45"/><text x="87.1810%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7 samples, 0.01%)</title><rect x="86.9875%" y="1317" width="0.0104%" height="15" fill="rgb(224,130,10)" fg:x="58533" fg:w="7"/><text x="87.2375%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (7 samples, 0.01%)</title><rect x="86.9875%" y="1301" width="0.0104%" height="15" fill="rgb(237,29,0)" fg:x="58533" fg:w="7"/><text x="87.2375%" y="1311.50"></text></g><g><title>CDBBatch::WriteImpl (7 samples, 0.01%)</title><rect x="86.9994%" y="1317" width="0.0104%" height="15" fill="rgb(219,27,41)" fg:x="58541" fg:w="7"/><text x="87.2494%" y="1327.50"></text></g><g><title>DataStream::Xor (7 samples, 0.01%)</title><rect x="86.9994%" y="1301" width="0.0104%" height="15" fill="rgb(245,101,19)" fg:x="58541" fg:w="7"/><text x="87.2494%" y="1311.50"></text></g><g><title>util::Xor (7 samples, 0.01%)</title><rect x="86.9994%" y="1285" width="0.0104%" height="15" fill="rgb(243,44,37)" fg:x="58541" fg:w="7"/><text x="87.2494%" y="1295.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (10 samples, 0.01%)</title><rect x="87.0098%" y="1317" width="0.0149%" height="15" fill="rgb(228,213,43)" fg:x="58548" fg:w="10"/><text x="87.2598%" y="1327.50"></text></g><g><title>leveldb::WriteBatch::Put (29 samples, 0.04%)</title><rect x="86.9979%" y="1333" width="0.0431%" height="15" fill="rgb(219,163,21)" fg:x="58540" fg:w="29"/><text x="87.2479%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (10 samples, 0.01%)</title><rect x="87.0261%" y="1317" width="0.0149%" height="15" fill="rgb(234,86,24)" fg:x="58559" fg:w="10"/><text x="87.2761%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (10 samples, 0.01%)</title><rect x="87.0261%" y="1301" width="0.0149%" height="15" fill="rgb(225,10,24)" fg:x="58559" fg:w="10"/><text x="87.2761%" y="1311.50"></text></g><g><title>CDBBatch::WriteImpl (90 samples, 0.13%)</title><rect x="86.9265%" y="1349" width="0.1338%" height="15" fill="rgb(218,109,7)" fg:x="58492" fg:w="90"/><text x="87.1765%" y="1359.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (10 samples, 0.01%)</title><rect x="87.0454%" y="1333" width="0.0149%" height="15" fill="rgb(210,20,26)" fg:x="58572" fg:w="10"/><text x="87.2954%" y="1343.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (7 samples, 0.01%)</title><rect x="87.0499%" y="1317" width="0.0104%" height="15" fill="rgb(216,18,1)" fg:x="58575" fg:w="7"/><text x="87.2999%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (90 samples, 0.13%)</title><rect x="87.0707%" y="1333" width="0.1338%" height="15" fill="rgb(206,163,23)" fg:x="58589" fg:w="90"/><text x="87.3207%" y="1343.50"></text></g><g><title>decltype  (10 samples, 0.01%)</title><rect x="87.1896%" y="1317" width="0.0149%" height="15" fill="rgb(229,150,31)" fg:x="58669" fg:w="10"/><text x="87.4396%" y="1327.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (10 samples, 0.01%)</title><rect x="87.1896%" y="1301" width="0.0149%" height="15" fill="rgb(231,10,5)" fg:x="58669" fg:w="10"/><text x="87.4396%" y="1311.50"></text></g><g><title>decltype (10 samples, 0.01%)</title><rect x="87.1896%" y="1285" width="0.0149%" height="15" fill="rgb(250,40,50)" fg:x="58669" fg:w="10"/><text x="87.4396%" y="1295.50"></text></g><g><title>CCoinsViewDB::BatchWrite (287 samples, 0.43%)</title><rect x="86.7794%" y="1365" width="0.4265%" height="15" fill="rgb(217,119,7)" fg:x="58393" fg:w="287"/><text x="87.0294%" y="1375.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (94 samples, 0.14%)</title><rect x="87.0662%" y="1349" width="0.1397%" height="15" fill="rgb(245,214,40)" fg:x="58586" fg:w="94"/><text x="87.3162%" y="1359.50"></text></g><g><title>GetLengthPrefixedSlice (10 samples, 0.01%)</title><rect x="87.2802%" y="1301" width="0.0149%" height="15" fill="rgb(216,187,1)" fg:x="58730" fg:w="10"/><text x="87.5302%" y="1311.50"></text></g><g><title>leveldb::GetVarint32Ptr (9 samples, 0.01%)</title><rect x="87.2817%" y="1285" width="0.0134%" height="15" fill="rgb(237,146,21)" fg:x="58731" fg:w="9"/><text x="87.5317%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (57 samples, 0.08%)</title><rect x="87.2119%" y="1317" width="0.0847%" height="15" fill="rgb(210,174,47)" fg:x="58684" fg:w="57"/><text x="87.4619%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (9 samples, 0.01%)</title><rect x="87.3159%" y="1285" width="0.0134%" height="15" fill="rgb(218,111,39)" fg:x="58754" fg:w="9"/><text x="87.5659%" y="1295.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (10 samples, 0.01%)</title><rect x="87.3293%" y="1285" width="0.0149%" height="15" fill="rgb(224,95,19)" fg:x="58763" fg:w="10"/><text x="87.5793%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (14 samples, 0.02%)</title><rect x="87.3441%" y="1285" width="0.0208%" height="15" fill="rgb(234,15,38)" fg:x="58773" fg:w="14"/><text x="87.5941%" y="1295.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (13 samples, 0.02%)</title><rect x="87.3649%" y="1285" width="0.0193%" height="15" fill="rgb(246,56,12)" fg:x="58787" fg:w="13"/><text x="87.6149%" y="1295.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (54 samples, 0.08%)</title><rect x="87.3129%" y="1301" width="0.0803%" height="15" fill="rgb(247,16,17)" fg:x="58752" fg:w="54"/><text x="87.5629%" y="1311.50"></text></g><g><title>GetLengthPrefixedSlice (12 samples, 0.02%)</title><rect x="87.4615%" y="1285" width="0.0178%" height="15" fill="rgb(215,151,11)" fg:x="58852" fg:w="12"/><text x="87.7115%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (56 samples, 0.08%)</title><rect x="87.3976%" y="1301" width="0.0832%" height="15" fill="rgb(225,16,24)" fg:x="58809" fg:w="56"/><text x="87.6476%" y="1311.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="87.5136%" y="1157" width="0.0178%" height="15" fill="rgb(217,117,5)" fg:x="58887" fg:w="12"/><text x="87.7636%" y="1167.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="87.5150%" y="1141" width="0.0163%" height="15" fill="rgb(246,187,53)" fg:x="58888" fg:w="11"/><text x="87.7650%" y="1151.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="87.5150%" y="1125" width="0.0163%" height="15" fill="rgb(241,71,40)" fg:x="58888" fg:w="11"/><text x="87.7650%" y="1135.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="87.5150%" y="1109" width="0.0163%" height="15" fill="rgb(231,67,39)" fg:x="58888" fg:w="11"/><text x="87.7650%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="87.5195%" y="1093" width="0.0119%" height="15" fill="rgb(222,120,24)" fg:x="58891" fg:w="8"/><text x="87.7695%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="87.5195%" y="1077" width="0.0119%" height="15" fill="rgb(248,3,3)" fg:x="58891" fg:w="8"/><text x="87.7695%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="87.5210%" y="1061" width="0.0104%" height="15" fill="rgb(228,218,5)" fg:x="58892" fg:w="7"/><text x="87.7710%" y="1071.50"></text></g><g><title>leveldb::Arena::Allocate (15 samples, 0.02%)</title><rect x="87.5121%" y="1269" width="0.0223%" height="15" fill="rgb(212,202,43)" fg:x="58886" fg:w="15"/><text x="87.7621%" y="1279.50"></text></g><g><title>leveldb::Arena::AllocateFallback (15 samples, 0.02%)</title><rect x="87.5121%" y="1253" width="0.0223%" height="15" fill="rgb(235,183,2)" fg:x="58886" fg:w="15"/><text x="87.7621%" y="1263.50"></text></g><g><title>leveldb::Arena::AllocateFallback (15 samples, 0.02%)</title><rect x="87.5121%" y="1237" width="0.0223%" height="15" fill="rgb(230,165,10)" fg:x="58886" fg:w="15"/><text x="87.7621%" y="1247.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (15 samples, 0.02%)</title><rect x="87.5121%" y="1221" width="0.0223%" height="15" fill="rgb(219,54,40)" fg:x="58886" fg:w="15"/><text x="87.7621%" y="1231.50"></text></g><g><title>operator new (15 samples, 0.02%)</title><rect x="87.5121%" y="1205" width="0.0223%" height="15" fill="rgb(244,73,9)" fg:x="58886" fg:w="15"/><text x="87.7621%" y="1215.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="87.5121%" y="1189" width="0.0223%" height="15" fill="rgb(212,32,45)" fg:x="58886" fg:w="15"/><text x="87.7621%" y="1199.50"></text></g><g><title>_int_malloc (15 samples, 0.02%)</title><rect x="87.5121%" y="1173" width="0.0223%" height="15" fill="rgb(205,58,31)" fg:x="58886" fg:w="15"/><text x="87.7621%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.01%)</title><rect x="87.5359%" y="1269" width="0.0119%" height="15" fill="rgb(250,120,43)" fg:x="58902" fg:w="8"/><text x="87.7859%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (43 samples, 0.06%)</title><rect x="87.5507%" y="1269" width="0.0639%" height="15" fill="rgb(235,13,10)" fg:x="58912" fg:w="43"/><text x="87.8007%" y="1279.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (8 samples, 0.01%)</title><rect x="87.6146%" y="1269" width="0.0119%" height="15" fill="rgb(232,219,31)" fg:x="58955" fg:w="8"/><text x="87.8646%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (85 samples, 0.13%)</title><rect x="87.6354%" y="1253" width="0.1263%" height="15" fill="rgb(218,157,51)" fg:x="58969" fg:w="85"/><text x="87.8854%" y="1263.50"></text></g><g><title>leveldb::Slice::compare (29 samples, 0.04%)</title><rect x="87.7186%" y="1237" width="0.0431%" height="15" fill="rgb(211,91,52)" fg:x="59025" fg:w="29"/><text x="87.9686%" y="1247.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (8 samples, 0.01%)</title><rect x="87.7647%" y="1253" width="0.0119%" height="15" fill="rgb(240,173,1)" fg:x="59056" fg:w="8"/><text x="88.0147%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (103 samples, 0.15%)</title><rect x="87.7811%" y="1253" width="0.1531%" height="15" fill="rgb(248,20,47)" fg:x="59067" fg:w="103"/><text x="88.0311%" y="1263.50"></text></g><g><title>leveldb::ExtractUserKey (22 samples, 0.03%)</title><rect x="87.9014%" y="1237" width="0.0327%" height="15" fill="rgb(217,221,40)" fg:x="59148" fg:w="22"/><text x="88.1514%" y="1247.50"></text></g><g><title>GetLengthPrefixedSlice (337 samples, 0.50%)</title><rect x="89.2271%" y="1237" width="0.5008%" height="15" fill="rgb(226,149,51)" fg:x="60040" fg:w="337"/><text x="89.4771%" y="1247.50"></text></g><g><title>leveldb::GetVarint32Ptr (259 samples, 0.38%)</title><rect x="89.3430%" y="1221" width="0.3849%" height="15" fill="rgb(252,193,7)" fg:x="60118" fg:w="259"/><text x="89.5930%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1,212 samples, 1.80%)</title><rect x="87.9386%" y="1253" width="1.8012%" height="15" fill="rgb(205,123,0)" fg:x="59173" fg:w="1212"/><text x="88.1886%" y="1263.50">l..</text></g><g><title>leveldb::MemTable::KeyComparator::operator (8 samples, 0.01%)</title><rect x="89.7279%" y="1237" width="0.0119%" height="15" fill="rgb(233,173,25)" fg:x="60377" fg:w="8"/><text x="89.9779%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (16 samples, 0.02%)</title><rect x="89.7621%" y="1221" width="0.0238%" height="15" fill="rgb(216,63,32)" fg:x="60400" fg:w="16"/><text x="90.0121%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (16 samples, 0.02%)</title><rect x="89.8126%" y="1205" width="0.0238%" height="15" fill="rgb(209,56,45)" fg:x="60434" fg:w="16"/><text x="90.0626%" y="1215.50"></text></g><g><title>leveldb::GetVarint32Ptr (15 samples, 0.02%)</title><rect x="89.8141%" y="1189" width="0.0223%" height="15" fill="rgb(226,111,49)" fg:x="60435" fg:w="15"/><text x="90.0641%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (64 samples, 0.10%)</title><rect x="89.7428%" y="1237" width="0.0951%" height="15" fill="rgb(244,181,21)" fg:x="60387" fg:w="64"/><text x="89.9928%" y="1247.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (35 samples, 0.05%)</title><rect x="89.7858%" y="1221" width="0.0520%" height="15" fill="rgb(222,126,15)" fg:x="60416" fg:w="35"/><text x="90.0358%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (68 samples, 0.10%)</title><rect x="89.7398%" y="1253" width="0.1011%" height="15" fill="rgb(222,95,17)" fg:x="60385" fg:w="68"/><text x="89.9898%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (46 samples, 0.07%)</title><rect x="89.9493%" y="1221" width="0.0684%" height="15" fill="rgb(254,46,5)" fg:x="60526" fg:w="46"/><text x="90.1993%" y="1231.50"></text></g><g><title>leveldb::Slice::compare (17 samples, 0.03%)</title><rect x="89.9924%" y="1205" width="0.0253%" height="15" fill="rgb(236,216,35)" fg:x="60555" fg:w="17"/><text x="90.2424%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (60 samples, 0.09%)</title><rect x="90.0236%" y="1221" width="0.0892%" height="15" fill="rgb(217,187,26)" fg:x="60576" fg:w="60"/><text x="90.2736%" y="1231.50"></text></g><g><title>leveldb::ExtractUserKey (13 samples, 0.02%)</title><rect x="90.0935%" y="1205" width="0.0193%" height="15" fill="rgb(207,192,25)" fg:x="60623" fg:w="13"/><text x="90.3435%" y="1215.50"></text></g><g><title>GetLengthPrefixedSlice (64 samples, 0.10%)</title><rect x="90.5319%" y="1205" width="0.0951%" height="15" fill="rgb(253,135,27)" fg:x="60918" fg:w="64"/><text x="90.7819%" y="1215.50"></text></g><g><title>leveldb::GetVarint32Ptr (52 samples, 0.08%)</title><rect x="90.5497%" y="1189" width="0.0773%" height="15" fill="rgb(211,122,29)" fg:x="60930" fg:w="52"/><text x="90.7997%" y="1199.50"></text></g><g><title>__memcmp_evex_movbe (9 samples, 0.01%)</title><rect x="90.6285%" y="1205" width="0.0134%" height="15" fill="rgb(233,162,40)" fg:x="60983" fg:w="9"/><text x="90.8785%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (17 samples, 0.03%)</title><rect x="90.6433%" y="1205" width="0.0253%" height="15" fill="rgb(222,184,47)" fg:x="60993" fg:w="17"/><text x="90.8933%" y="1215.50"></text></g><g><title>__memcmp_evex_movbe (15 samples, 0.02%)</title><rect x="90.8276%" y="1157" width="0.0223%" height="15" fill="rgb(249,99,23)" fg:x="61117" fg:w="15"/><text x="91.0776%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (77 samples, 0.11%)</title><rect x="90.7518%" y="1189" width="0.1144%" height="15" fill="rgb(214,60,12)" fg:x="61066" fg:w="77"/><text x="91.0018%" y="1199.50"></text></g><g><title>leveldb::Slice::compare (46 samples, 0.07%)</title><rect x="90.7979%" y="1173" width="0.0684%" height="15" fill="rgb(250,229,36)" fg:x="61097" fg:w="46"/><text x="91.0479%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (103 samples, 0.15%)</title><rect x="90.8737%" y="1189" width="0.1531%" height="15" fill="rgb(232,195,10)" fg:x="61148" fg:w="103"/><text x="91.1237%" y="1199.50"></text></g><g><title>leveldb::ExtractUserKey (18 samples, 0.03%)</title><rect x="91.0000%" y="1173" width="0.0268%" height="15" fill="rgb(205,213,31)" fg:x="61233" fg:w="18"/><text x="91.2500%" y="1183.50"></text></g><g><title>GetLengthPrefixedSlice (58 samples, 0.09%)</title><rect x="91.1828%" y="1173" width="0.0862%" height="15" fill="rgb(237,43,8)" fg:x="61356" fg:w="58"/><text x="91.4328%" y="1183.50"></text></g><g><title>leveldb::GetVarint32Ptr (46 samples, 0.07%)</title><rect x="91.2006%" y="1157" width="0.0684%" height="15" fill="rgb(216,208,3)" fg:x="61368" fg:w="46"/><text x="91.4506%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (169 samples, 0.25%)</title><rect x="91.0283%" y="1189" width="0.2512%" height="15" fill="rgb(228,179,44)" fg:x="61252" fg:w="169"/><text x="91.2783%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (7 samples, 0.01%)</title><rect x="91.2690%" y="1173" width="0.0104%" height="15" fill="rgb(230,192,27)" fg:x="61414" fg:w="7"/><text x="91.5190%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (9 samples, 0.01%)</title><rect x="91.3091%" y="1173" width="0.0134%" height="15" fill="rgb(251,30,38)" fg:x="61441" fg:w="9"/><text x="91.5591%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (34 samples, 0.05%)</title><rect x="91.2794%" y="1189" width="0.0505%" height="15" fill="rgb(246,55,52)" fg:x="61421" fg:w="34"/><text x="91.5294%" y="1199.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (444 samples, 0.66%)</title><rect x="90.6746%" y="1205" width="0.6598%" height="15" fill="rgb(249,79,26)" fg:x="61014" fg:w="444"/><text x="90.9246%" y="1215.50"></text></g><g><title>GetLengthPrefixedSlice (124 samples, 0.18%)</title><rect x="91.5425%" y="1189" width="0.1843%" height="15" fill="rgb(220,202,16)" fg:x="61598" fg:w="124"/><text x="91.7925%" y="1199.50"></text></g><g><title>leveldb::GetVarint32Ptr (104 samples, 0.15%)</title><rect x="91.5722%" y="1173" width="0.1546%" height="15" fill="rgb(250,170,23)" fg:x="61618" fg:w="104"/><text x="91.8222%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (272 samples, 0.40%)</title><rect x="91.3433%" y="1205" width="0.4042%" height="15" fill="rgb(230,7,37)" fg:x="61464" fg:w="272"/><text x="91.5933%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (14 samples, 0.02%)</title><rect x="91.7267%" y="1189" width="0.0208%" height="15" fill="rgb(213,71,1)" fg:x="61722" fg:w="14"/><text x="91.9767%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (18 samples, 0.03%)</title><rect x="91.7683%" y="1189" width="0.0268%" height="15" fill="rgb(227,87,39)" fg:x="61750" fg:w="18"/><text x="92.0183%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1,134 samples, 1.69%)</title><rect x="90.1202%" y="1221" width="1.6853%" height="15" fill="rgb(210,41,29)" fg:x="60641" fg:w="1134"/><text x="90.3702%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (39 samples, 0.06%)</title><rect x="91.7475%" y="1205" width="0.0580%" height="15" fill="rgb(206,191,31)" fg:x="61736" fg:w="39"/><text x="91.9975%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (7 samples, 0.01%)</title><rect x="91.7951%" y="1189" width="0.0104%" height="15" fill="rgb(247,75,54)" fg:x="61768" fg:w="7"/><text x="92.0451%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (49 samples, 0.07%)</title><rect x="91.8961%" y="1205" width="0.0728%" height="15" fill="rgb(208,54,50)" fg:x="61836" fg:w="49"/><text x="92.1461%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (127 samples, 0.19%)</title><rect x="91.8055%" y="1221" width="0.1887%" height="15" fill="rgb(214,90,37)" fg:x="61775" fg:w="127"/><text x="92.0555%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (17 samples, 0.03%)</title><rect x="91.9690%" y="1205" width="0.0253%" height="15" fill="rgb(220,132,6)" fg:x="61885" fg:w="17"/><text x="92.2190%" y="1215.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (15 samples, 0.02%)</title><rect x="91.9719%" y="1189" width="0.0223%" height="15" fill="rgb(213,167,7)" fg:x="61887" fg:w="15"/><text x="92.2219%" y="1199.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (15 samples, 0.02%)</title><rect x="91.9719%" y="1173" width="0.0223%" height="15" fill="rgb(243,36,27)" fg:x="61887" fg:w="15"/><text x="92.2219%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,413 samples, 2.10%)</title><rect x="89.9033%" y="1237" width="2.0999%" height="15" fill="rgb(235,147,12)" fg:x="60495" fg:w="1413"/><text x="90.1533%" y="1247.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,485 samples, 2.21%)</title><rect x="89.8408%" y="1253" width="2.2069%" height="15" fill="rgb(212,198,44)" fg:x="60453" fg:w="1485"/><text x="90.0908%" y="1263.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (30 samples, 0.04%)</title><rect x="92.0032%" y="1237" width="0.0446%" height="15" fill="rgb(218,68,50)" fg:x="61908" fg:w="30"/><text x="92.2532%" y="1247.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (29 samples, 0.04%)</title><rect x="92.0046%" y="1221" width="0.0431%" height="15" fill="rgb(224,79,48)" fg:x="61909" fg:w="29"/><text x="92.2546%" y="1231.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (29 samples, 0.04%)</title><rect x="92.0046%" y="1205" width="0.0431%" height="15" fill="rgb(213,191,50)" fg:x="61909" fg:w="29"/><text x="92.2546%" y="1215.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="92.0329%" y="1189" width="0.0149%" height="15" fill="rgb(254,146,10)" fg:x="61928" fg:w="10"/><text x="92.2829%" y="1199.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="92.0344%" y="1173" width="0.0134%" height="15" fill="rgb(215,175,11)" fg:x="61929" fg:w="9"/><text x="92.2844%" y="1183.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="92.0344%" y="1157" width="0.0134%" height="15" fill="rgb(207,49,7)" fg:x="61929" fg:w="9"/><text x="92.2844%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="92.0358%" y="1141" width="0.0119%" height="15" fill="rgb(234,144,29)" fg:x="61930" fg:w="8"/><text x="92.2858%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="92.0373%" y="1125" width="0.0104%" height="15" fill="rgb(213,222,48)" fg:x="61931" fg:w="7"/><text x="92.2873%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="92.0373%" y="1109" width="0.0104%" height="15" fill="rgb(222,8,6)" fg:x="61931" fg:w="7"/><text x="92.2873%" y="1119.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (17 samples, 0.03%)</title><rect x="92.0552%" y="1237" width="0.0253%" height="15" fill="rgb(221,114,49)" fg:x="61943" fg:w="17"/><text x="92.3052%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (23 samples, 0.03%)</title><rect x="92.0492%" y="1253" width="0.0342%" height="15" fill="rgb(250,140,42)" fg:x="61939" fg:w="23"/><text x="92.2992%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (3,002 samples, 4.46%)</title><rect x="87.6265%" y="1269" width="4.4614%" height="15" fill="rgb(250,150,27)" fg:x="58963" fg:w="3002"/><text x="87.8765%" y="1279.50">level..</text></g><g><title>leveldb::MemTable::Add (3,089 samples, 4.59%)</title><rect x="87.5046%" y="1285" width="4.5906%" height="15" fill="rgb(252,159,3)" fg:x="58881" fg:w="3089"/><text x="87.7546%" y="1295.50">level..</text></g><g><title>leveldb::MemTable::KeyComparator::operator (11 samples, 0.02%)</title><rect x="92.0953%" y="1285" width="0.0163%" height="15" fill="rgb(241,182,3)" fg:x="61970" fg:w="11"/><text x="92.3453%" y="1295.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (7 samples, 0.01%)</title><rect x="92.1116%" y="1285" width="0.0104%" height="15" fill="rgb(236,3,9)" fg:x="61981" fg:w="7"/><text x="92.3616%" y="1295.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (3,309 samples, 4.92%)</title><rect x="87.2074%" y="1333" width="4.9176%" height="15" fill="rgb(223,227,51)" fg:x="58681" fg:w="3309"/><text x="87.4574%" y="1343.50">leveld..</text></g><g><title>leveldb::WriteBatch::Iterate (3,244 samples, 4.82%)</title><rect x="87.3040%" y="1317" width="4.8210%" height="15" fill="rgb(232,133,30)" fg:x="58746" fg:w="3244"/><text x="87.5540%" y="1327.50">leveld..</text></g><g><title>leveldb::WriteBatch::Iterate (3,119 samples, 4.64%)</title><rect x="87.4898%" y="1301" width="4.6352%" height="15" fill="rgb(209,93,27)" fg:x="58871" fg:w="3119"/><text x="87.7398%" y="1311.50">level..</text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="92.1339%" y="1093" width="0.0178%" height="15" fill="rgb(208,108,34)" fg:x="61996" fg:w="12"/><text x="92.3839%" y="1103.50"></text></g><g><title>[[ext4]] (16 samples, 0.02%)</title><rect x="92.1310%" y="1109" width="0.0238%" height="15" fill="rgb(215,189,13)" fg:x="61994" fg:w="16"/><text x="92.3810%" y="1119.50"></text></g><g><title>[[ext4]] (29 samples, 0.04%)</title><rect x="92.1295%" y="1125" width="0.0431%" height="15" fill="rgb(206,88,23)" fg:x="61993" fg:w="29"/><text x="92.3795%" y="1135.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="92.1547%" y="1109" width="0.0178%" height="15" fill="rgb(240,173,0)" fg:x="62010" fg:w="12"/><text x="92.4047%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="92.1592%" y="1093" width="0.0134%" height="15" fill="rgb(223,106,52)" fg:x="62013" fg:w="9"/><text x="92.4092%" y="1103.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="92.1592%" y="1077" width="0.0134%" height="15" fill="rgb(206,130,16)" fg:x="62013" fg:w="9"/><text x="92.4092%" y="1087.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="92.1592%" y="1061" width="0.0134%" height="15" fill="rgb(220,54,25)" fg:x="62013" fg:w="9"/><text x="92.4092%" y="1071.50"></text></g><g><title>[[ext4]] (77 samples, 0.11%)</title><rect x="92.1280%" y="1141" width="0.1144%" height="15" fill="rgb(210,4,38)" fg:x="61992" fg:w="77"/><text x="92.3780%" y="1151.50"></text></g><g><title>[unknown] (47 samples, 0.07%)</title><rect x="92.1726%" y="1125" width="0.0698%" height="15" fill="rgb(238,94,39)" fg:x="62022" fg:w="47"/><text x="92.4226%" y="1135.50"></text></g><g><title>[unknown] (43 samples, 0.06%)</title><rect x="92.1785%" y="1109" width="0.0639%" height="15" fill="rgb(234,124,34)" fg:x="62026" fg:w="43"/><text x="92.4285%" y="1119.50"></text></g><g><title>[unknown] (42 samples, 0.06%)</title><rect x="92.1800%" y="1093" width="0.0624%" height="15" fill="rgb(221,91,40)" fg:x="62027" fg:w="42"/><text x="92.4300%" y="1103.50"></text></g><g><title>[unknown] (31 samples, 0.05%)</title><rect x="92.1963%" y="1077" width="0.0461%" height="15" fill="rgb(246,53,28)" fg:x="62038" fg:w="31"/><text x="92.4463%" y="1087.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="92.2097%" y="1061" width="0.0327%" height="15" fill="rgb(229,109,7)" fg:x="62047" fg:w="22"/><text x="92.4597%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="92.2320%" y="1045" width="0.0104%" height="15" fill="rgb(249,117,8)" fg:x="62062" fg:w="7"/><text x="92.4820%" y="1055.50"></text></g><g><title>[[ext4]] (88 samples, 0.13%)</title><rect x="92.1265%" y="1173" width="0.1308%" height="15" fill="rgb(210,181,1)" fg:x="61991" fg:w="88"/><text x="92.3765%" y="1183.50"></text></g><g><title>[unknown] (87 samples, 0.13%)</title><rect x="92.1280%" y="1157" width="0.1293%" height="15" fill="rgb(211,66,1)" fg:x="61992" fg:w="87"/><text x="92.3780%" y="1167.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="92.2424%" y="1141" width="0.0149%" height="15" fill="rgb(221,90,14)" fg:x="62069" fg:w="10"/><text x="92.4924%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="92.2454%" y="1125" width="0.0119%" height="15" fill="rgb(219,222,44)" fg:x="62071" fg:w="8"/><text x="92.4954%" y="1135.50"></text></g><g><title>Flush (89 samples, 0.13%)</title><rect x="92.1265%" y="1301" width="0.1323%" height="15" fill="rgb(246,34,33)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1311.50"></text></g><g><title>FlushBuffer (89 samples, 0.13%)</title><rect x="92.1265%" y="1285" width="0.1323%" height="15" fill="rgb(227,135,41)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (89 samples, 0.13%)</title><rect x="92.1265%" y="1269" width="0.1323%" height="15" fill="rgb(226,15,14)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1279.50"></text></g><g><title>__GI___libc_write (89 samples, 0.13%)</title><rect x="92.1265%" y="1253" width="0.1323%" height="15" fill="rgb(236,148,47)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1263.50"></text></g><g><title>[unknown] (89 samples, 0.13%)</title><rect x="92.1265%" y="1237" width="0.1323%" height="15" fill="rgb(233,162,52)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1247.50"></text></g><g><title>[unknown] (89 samples, 0.13%)</title><rect x="92.1265%" y="1221" width="0.1323%" height="15" fill="rgb(244,35,28)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1231.50"></text></g><g><title>[unknown] (89 samples, 0.13%)</title><rect x="92.1265%" y="1205" width="0.1323%" height="15" fill="rgb(205,121,10)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1215.50"></text></g><g><title>[unknown] (89 samples, 0.13%)</title><rect x="92.1265%" y="1189" width="0.1323%" height="15" fill="rgb(250,58,18)" fg:x="61991" fg:w="89"/><text x="92.3765%" y="1199.50"></text></g><g><title>_mm_crc32_u64 (12 samples, 0.02%)</title><rect x="92.2617%" y="1285" width="0.0178%" height="15" fill="rgb(216,37,13)" fg:x="62082" fg:w="12"/><text x="92.5117%" y="1295.50"></text></g><g><title>crc32c::ExtendSse42 (15 samples, 0.02%)</title><rect x="92.2588%" y="1301" width="0.0223%" height="15" fill="rgb(221,215,42)" fg:x="62080" fg:w="15"/><text x="92.5088%" y="1311.50"></text></g><g><title>CDBWrapper::WriteBatch (3,415 samples, 5.08%)</title><rect x="87.2074%" y="1365" width="5.0751%" height="15" fill="rgb(217,214,19)" fg:x="58681" fg:w="3415"/><text x="87.4574%" y="1375.50">CDBWra..</text></g><g><title>leveldb::DBImpl::Write (3,415 samples, 5.08%)</title><rect x="87.2074%" y="1349" width="5.0751%" height="15" fill="rgb(233,139,13)" fg:x="58681" fg:w="3415"/><text x="87.4574%" y="1359.50">leveld..</text></g><g><title>leveldb::log::Writer::AddRecord (106 samples, 0.16%)</title><rect x="92.1250%" y="1333" width="0.1575%" height="15" fill="rgb(247,168,23)" fg:x="61990" fg:w="106"/><text x="92.3750%" y="1343.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (106 samples, 0.16%)</title><rect x="92.1250%" y="1317" width="0.1575%" height="15" fill="rgb(207,202,1)" fg:x="61990" fg:w="106"/><text x="92.3750%" y="1327.50"></text></g><g><title>CCoinsViewDB::BatchWrite (12 samples, 0.02%)</title><rect x="92.2915%" y="1125" width="0.0178%" height="15" fill="rgb(220,155,48)" fg:x="62102" fg:w="12"/><text x="92.5415%" y="1135.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (11 samples, 0.02%)</title><rect x="92.2929%" y="1109" width="0.0163%" height="15" fill="rgb(250,43,26)" fg:x="62103" fg:w="11"/><text x="92.5429%" y="1119.50"></text></g><g><title>DataStream::reserve (11 samples, 0.02%)</title><rect x="92.2929%" y="1093" width="0.0163%" height="15" fill="rgb(212,190,23)" fg:x="62103" fg:w="11"/><text x="92.5429%" y="1103.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (11 samples, 0.02%)</title><rect x="92.2929%" y="1077" width="0.0163%" height="15" fill="rgb(216,39,24)" fg:x="62103" fg:w="11"/><text x="92.5429%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (18 samples, 0.03%)</title><rect x="92.2915%" y="1237" width="0.0268%" height="15" fill="rgb(252,113,16)" fg:x="62102" fg:w="18"/><text x="92.5415%" y="1247.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (18 samples, 0.03%)</title><rect x="92.2915%" y="1221" width="0.0268%" height="15" fill="rgb(208,113,19)" fg:x="62102" fg:w="18"/><text x="92.5415%" y="1231.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (18 samples, 0.03%)</title><rect x="92.2915%" y="1205" width="0.0268%" height="15" fill="rgb(234,107,25)" fg:x="62102" fg:w="18"/><text x="92.5415%" y="1215.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (18 samples, 0.03%)</title><rect x="92.2915%" y="1189" width="0.0268%" height="15" fill="rgb(234,217,51)" fg:x="62102" fg:w="18"/><text x="92.5415%" y="1199.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (18 samples, 0.03%)</title><rect x="92.2915%" y="1173" width="0.0268%" height="15" fill="rgb(251,29,42)" fg:x="62102" fg:w="18"/><text x="92.5415%" y="1183.50"></text></g><g><title>DataStream::write (18 samples, 0.03%)</title><rect x="92.2915%" y="1157" width="0.0268%" height="15" fill="rgb(221,62,51)" fg:x="62102" fg:w="18"/><text x="92.5415%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (18 samples, 0.03%)</title><rect x="92.2915%" y="1141" width="0.0268%" height="15" fill="rgb(240,192,43)" fg:x="62102" fg:w="18"/><text x="92.5415%" y="1151.50"></text></g><g><title>Erase&lt;(anonymous namespace)::CoinEntry&gt; (26 samples, 0.04%)</title><rect x="92.2840%" y="1365" width="0.0386%" height="15" fill="rgb(224,157,47)" fg:x="62097" fg:w="26"/><text x="92.5340%" y="1375.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (22 samples, 0.03%)</title><rect x="92.2900%" y="1349" width="0.0327%" height="15" fill="rgb(226,84,45)" fg:x="62101" fg:w="22"/><text x="92.5400%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (22 samples, 0.03%)</title><rect x="92.2900%" y="1333" width="0.0327%" height="15" fill="rgb(208,207,23)" fg:x="62101" fg:w="22"/><text x="92.5400%" y="1343.50"></text></g><g><title>Serialize&lt;DataStream&gt; (22 samples, 0.03%)</title><rect x="92.2900%" y="1317" width="0.0327%" height="15" fill="rgb(253,34,51)" fg:x="62101" fg:w="22"/><text x="92.5400%" y="1327.50"></text></g><g><title>Ser&lt;DataStream&gt; (22 samples, 0.03%)</title><rect x="92.2900%" y="1301" width="0.0327%" height="15" fill="rgb(227,26,34)" fg:x="62101" fg:w="22"/><text x="92.5400%" y="1311.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (22 samples, 0.03%)</title><rect x="92.2900%" y="1285" width="0.0327%" height="15" fill="rgb(245,75,19)" fg:x="62101" fg:w="22"/><text x="92.5400%" y="1295.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (22 samples, 0.03%)</title><rect x="92.2900%" y="1269" width="0.0327%" height="15" fill="rgb(250,191,31)" fg:x="62101" fg:w="22"/><text x="92.5400%" y="1279.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (22 samples, 0.03%)</title><rect x="92.2900%" y="1253" width="0.0327%" height="15" fill="rgb(224,11,50)" fg:x="62101" fg:w="22"/><text x="92.5400%" y="1263.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (19 samples, 0.03%)</title><rect x="92.3227%" y="1157" width="0.0282%" height="15" fill="rgb(231,171,7)" fg:x="62123" fg:w="19"/><text x="92.5727%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (19 samples, 0.03%)</title><rect x="92.3227%" y="1141" width="0.0282%" height="15" fill="rgb(252,214,10)" fg:x="62123" fg:w="19"/><text x="92.5727%" y="1151.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (19 samples, 0.03%)</title><rect x="92.3227%" y="1125" width="0.0282%" height="15" fill="rgb(249,45,46)" fg:x="62123" fg:w="19"/><text x="92.5727%" y="1135.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (19 samples, 0.03%)</title><rect x="92.3227%" y="1109" width="0.0282%" height="15" fill="rgb(240,173,7)" fg:x="62123" fg:w="19"/><text x="92.5727%" y="1119.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (19 samples, 0.03%)</title><rect x="92.3227%" y="1093" width="0.0282%" height="15" fill="rgb(235,214,13)" fg:x="62123" fg:w="19"/><text x="92.5727%" y="1103.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (17 samples, 0.03%)</title><rect x="92.3256%" y="1077" width="0.0253%" height="15" fill="rgb(245,156,8)" fg:x="62125" fg:w="17"/><text x="92.5756%" y="1087.50"></text></g><g><title>DataStream::write (17 samples, 0.03%)</title><rect x="92.3256%" y="1061" width="0.0253%" height="15" fill="rgb(235,46,12)" fg:x="62125" fg:w="17"/><text x="92.5756%" y="1071.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (17 samples, 0.03%)</title><rect x="92.3256%" y="1045" width="0.0253%" height="15" fill="rgb(221,81,14)" fg:x="62125" fg:w="17"/><text x="92.5756%" y="1055.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (12 samples, 0.02%)</title><rect x="92.3331%" y="1029" width="0.0178%" height="15" fill="rgb(238,207,9)" fg:x="62130" fg:w="12"/><text x="92.5831%" y="1039.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (23 samples, 0.03%)</title><rect x="92.3227%" y="1205" width="0.0342%" height="15" fill="rgb(224,129,35)" fg:x="62123" fg:w="23"/><text x="92.5727%" y="1215.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (23 samples, 0.03%)</title><rect x="92.3227%" y="1189" width="0.0342%" height="15" fill="rgb(243,218,34)" fg:x="62123" fg:w="23"/><text x="92.5727%" y="1199.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (23 samples, 0.03%)</title><rect x="92.3227%" y="1173" width="0.0342%" height="15" fill="rgb(220,166,13)" fg:x="62123" fg:w="23"/><text x="92.5727%" y="1183.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (23 samples, 0.03%)</title><rect x="92.3687%" y="1157" width="0.0342%" height="15" fill="rgb(227,167,49)" fg:x="62154" fg:w="23"/><text x="92.6187%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (23 samples, 0.03%)</title><rect x="92.3687%" y="1141" width="0.0342%" height="15" fill="rgb(234,142,12)" fg:x="62154" fg:w="23"/><text x="92.6187%" y="1151.50"></text></g><g><title>DataStream::write (23 samples, 0.03%)</title><rect x="92.3687%" y="1125" width="0.0342%" height="15" fill="rgb(207,100,48)" fg:x="62154" fg:w="23"/><text x="92.6187%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (23 samples, 0.03%)</title><rect x="92.3687%" y="1109" width="0.0342%" height="15" fill="rgb(210,25,14)" fg:x="62154" fg:w="23"/><text x="92.6187%" y="1119.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (13 samples, 0.02%)</title><rect x="92.3836%" y="1093" width="0.0193%" height="15" fill="rgb(246,116,27)" fg:x="62164" fg:w="13"/><text x="92.6336%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (67 samples, 0.10%)</title><rect x="92.3227%" y="1301" width="0.0996%" height="15" fill="rgb(214,193,42)" fg:x="62123" fg:w="67"/><text x="92.5727%" y="1311.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (67 samples, 0.10%)</title><rect x="92.3227%" y="1285" width="0.0996%" height="15" fill="rgb(214,122,8)" fg:x="62123" fg:w="67"/><text x="92.5727%" y="1295.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (67 samples, 0.10%)</title><rect x="92.3227%" y="1269" width="0.0996%" height="15" fill="rgb(244,173,18)" fg:x="62123" fg:w="67"/><text x="92.5727%" y="1279.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (67 samples, 0.10%)</title><rect x="92.3227%" y="1253" width="0.0996%" height="15" fill="rgb(232,68,19)" fg:x="62123" fg:w="67"/><text x="92.5727%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (67 samples, 0.10%)</title><rect x="92.3227%" y="1237" width="0.0996%" height="15" fill="rgb(236,224,1)" fg:x="62123" fg:w="67"/><text x="92.5727%" y="1247.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (67 samples, 0.10%)</title><rect x="92.3227%" y="1221" width="0.0996%" height="15" fill="rgb(240,11,8)" fg:x="62123" fg:w="67"/><text x="92.5727%" y="1231.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (44 samples, 0.07%)</title><rect x="92.3568%" y="1205" width="0.0654%" height="15" fill="rgb(244,159,20)" fg:x="62146" fg:w="44"/><text x="92.6068%" y="1215.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (44 samples, 0.07%)</title><rect x="92.3568%" y="1189" width="0.0654%" height="15" fill="rgb(240,223,54)" fg:x="62146" fg:w="44"/><text x="92.6068%" y="1199.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (44 samples, 0.07%)</title><rect x="92.3568%" y="1173" width="0.0654%" height="15" fill="rgb(237,146,5)" fg:x="62146" fg:w="44"/><text x="92.6068%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (8 samples, 0.01%)</title><rect x="92.4103%" y="1157" width="0.0119%" height="15" fill="rgb(218,221,32)" fg:x="62182" fg:w="8"/><text x="92.6603%" y="1167.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (122 samples, 0.18%)</title><rect x="92.4549%" y="1173" width="0.1813%" height="15" fill="rgb(244,96,26)" fg:x="62212" fg:w="122"/><text x="92.7049%" y="1183.50"></text></g><g><title>decltype  (98 samples, 0.15%)</title><rect x="92.4906%" y="1157" width="0.1456%" height="15" fill="rgb(245,184,37)" fg:x="62236" fg:w="98"/><text x="92.7406%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (98 samples, 0.15%)</title><rect x="92.4906%" y="1141" width="0.1456%" height="15" fill="rgb(248,91,47)" fg:x="62236" fg:w="98"/><text x="92.7406%" y="1151.50"></text></g><g><title>decltype (98 samples, 0.15%)</title><rect x="92.4906%" y="1125" width="0.1456%" height="15" fill="rgb(243,199,8)" fg:x="62236" fg:w="98"/><text x="92.7406%" y="1135.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (143 samples, 0.21%)</title><rect x="92.4282%" y="1253" width="0.2125%" height="15" fill="rgb(249,12,15)" fg:x="62194" fg:w="143"/><text x="92.6782%" y="1263.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (140 samples, 0.21%)</title><rect x="92.4326%" y="1237" width="0.2081%" height="15" fill="rgb(245,97,12)" fg:x="62197" fg:w="140"/><text x="92.6826%" y="1247.50"></text></g><g><title>DataStream::write (140 samples, 0.21%)</title><rect x="92.4326%" y="1221" width="0.2081%" height="15" fill="rgb(244,61,1)" fg:x="62197" fg:w="140"/><text x="92.6826%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (140 samples, 0.21%)</title><rect x="92.4326%" y="1205" width="0.2081%" height="15" fill="rgb(222,194,10)" fg:x="62197" fg:w="140"/><text x="92.6826%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (134 samples, 0.20%)</title><rect x="92.4416%" y="1189" width="0.1991%" height="15" fill="rgb(226,178,8)" fg:x="62203" fg:w="134"/><text x="92.6916%" y="1199.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (309 samples, 0.46%)</title><rect x="92.3227%" y="1349" width="0.4592%" height="15" fill="rgb(241,32,34)" fg:x="62123" fg:w="309"/><text x="92.5727%" y="1359.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (309 samples, 0.46%)</title><rect x="92.3227%" y="1333" width="0.4592%" height="15" fill="rgb(254,26,6)" fg:x="62123" fg:w="309"/><text x="92.5727%" y="1343.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (309 samples, 0.46%)</title><rect x="92.3227%" y="1317" width="0.4592%" height="15" fill="rgb(249,71,11)" fg:x="62123" fg:w="309"/><text x="92.5727%" y="1327.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (242 samples, 0.36%)</title><rect x="92.4222%" y="1301" width="0.3596%" height="15" fill="rgb(232,170,27)" fg:x="62190" fg:w="242"/><text x="92.6722%" y="1311.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (242 samples, 0.36%)</title><rect x="92.4222%" y="1285" width="0.3596%" height="15" fill="rgb(214,223,17)" fg:x="62190" fg:w="242"/><text x="92.6722%" y="1295.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (242 samples, 0.36%)</title><rect x="92.4222%" y="1269" width="0.3596%" height="15" fill="rgb(250,18,15)" fg:x="62190" fg:w="242"/><text x="92.6722%" y="1279.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (95 samples, 0.14%)</title><rect x="92.6407%" y="1253" width="0.1412%" height="15" fill="rgb(212,153,51)" fg:x="62337" fg:w="95"/><text x="92.8907%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (94 samples, 0.14%)</title><rect x="92.6422%" y="1237" width="0.1397%" height="15" fill="rgb(219,194,12)" fg:x="62338" fg:w="94"/><text x="92.8922%" y="1247.50"></text></g><g><title>decltype  (75 samples, 0.11%)</title><rect x="92.6704%" y="1221" width="0.1115%" height="15" fill="rgb(212,58,17)" fg:x="62357" fg:w="75"/><text x="92.9204%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (75 samples, 0.11%)</title><rect x="92.6704%" y="1205" width="0.1115%" height="15" fill="rgb(254,5,10)" fg:x="62357" fg:w="75"/><text x="92.9204%" y="1215.50"></text></g><g><title>decltype (75 samples, 0.11%)</title><rect x="92.6704%" y="1189" width="0.1115%" height="15" fill="rgb(246,91,7)" fg:x="62357" fg:w="75"/><text x="92.9204%" y="1199.50"></text></g><g><title>CCoinsViewDB::BatchWrite (23 samples, 0.03%)</title><rect x="92.7834%" y="1125" width="0.0342%" height="15" fill="rgb(218,108,49)" fg:x="62433" fg:w="23"/><text x="93.0334%" y="1135.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (20 samples, 0.03%)</title><rect x="92.7878%" y="1109" width="0.0297%" height="15" fill="rgb(238,123,20)" fg:x="62436" fg:w="20"/><text x="93.0378%" y="1119.50"></text></g><g><title>DataStream::reserve (19 samples, 0.03%)</title><rect x="92.7893%" y="1093" width="0.0282%" height="15" fill="rgb(231,69,23)" fg:x="62437" fg:w="19"/><text x="93.0393%" y="1103.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (19 samples, 0.03%)</title><rect x="92.7893%" y="1077" width="0.0282%" height="15" fill="rgb(230,209,3)" fg:x="62437" fg:w="19"/><text x="93.0393%" y="1087.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::capacity (7 samples, 0.01%)</title><rect x="92.8071%" y="1061" width="0.0104%" height="15" fill="rgb(231,19,0)" fg:x="62449" fg:w="7"/><text x="93.0571%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (28 samples, 0.04%)</title><rect x="92.7834%" y="1237" width="0.0416%" height="15" fill="rgb(226,192,25)" fg:x="62433" fg:w="28"/><text x="93.0334%" y="1247.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (28 samples, 0.04%)</title><rect x="92.7834%" y="1221" width="0.0416%" height="15" fill="rgb(223,175,53)" fg:x="62433" fg:w="28"/><text x="93.0334%" y="1231.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (28 samples, 0.04%)</title><rect x="92.7834%" y="1205" width="0.0416%" height="15" fill="rgb(248,35,51)" fg:x="62433" fg:w="28"/><text x="93.0334%" y="1215.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (28 samples, 0.04%)</title><rect x="92.7834%" y="1189" width="0.0416%" height="15" fill="rgb(230,37,26)" fg:x="62433" fg:w="28"/><text x="93.0334%" y="1199.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (28 samples, 0.04%)</title><rect x="92.7834%" y="1173" width="0.0416%" height="15" fill="rgb(206,120,22)" fg:x="62433" fg:w="28"/><text x="93.0334%" y="1183.50"></text></g><g><title>DataStream::write (28 samples, 0.04%)</title><rect x="92.7834%" y="1157" width="0.0416%" height="15" fill="rgb(207,165,28)" fg:x="62433" fg:w="28"/><text x="93.0334%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (28 samples, 0.04%)</title><rect x="92.7834%" y="1141" width="0.0416%" height="15" fill="rgb(226,23,46)" fg:x="62433" fg:w="28"/><text x="93.0334%" y="1151.50"></text></g><g><title>CCoinsViewDB::BatchWrite (4,070 samples, 6.05%)</title><rect x="86.7779%" y="1381" width="6.0485%" height="15" fill="rgb(208,130,44)" fg:x="58392" fg:w="4070"/><text x="87.0279%" y="1391.50">CCoinsVi..</text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (339 samples, 0.50%)</title><rect x="92.3227%" y="1365" width="0.5038%" height="15" fill="rgb(231,67,8)" fg:x="62123" fg:w="339"/><text x="92.5727%" y="1375.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (29 samples, 0.04%)</title><rect x="92.7834%" y="1349" width="0.0431%" height="15" fill="rgb(205,183,22)" fg:x="62433" fg:w="29"/><text x="93.0334%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (29 samples, 0.04%)</title><rect x="92.7834%" y="1333" width="0.0431%" height="15" fill="rgb(224,47,9)" fg:x="62433" fg:w="29"/><text x="93.0334%" y="1343.50"></text></g><g><title>Serialize&lt;DataStream&gt; (29 samples, 0.04%)</title><rect x="92.7834%" y="1317" width="0.0431%" height="15" fill="rgb(250,183,49)" fg:x="62433" fg:w="29"/><text x="93.0334%" y="1327.50"></text></g><g><title>Ser&lt;DataStream&gt; (29 samples, 0.04%)</title><rect x="92.7834%" y="1301" width="0.0431%" height="15" fill="rgb(220,151,39)" fg:x="62433" fg:w="29"/><text x="93.0334%" y="1311.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (29 samples, 0.04%)</title><rect x="92.7834%" y="1285" width="0.0431%" height="15" fill="rgb(220,118,20)" fg:x="62433" fg:w="29"/><text x="93.0334%" y="1295.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (29 samples, 0.04%)</title><rect x="92.7834%" y="1269" width="0.0431%" height="15" fill="rgb(231,65,51)" fg:x="62433" fg:w="29"/><text x="93.0334%" y="1279.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (29 samples, 0.04%)</title><rect x="92.7834%" y="1253" width="0.0431%" height="15" fill="rgb(253,125,37)" fg:x="62433" fg:w="29"/><text x="93.0334%" y="1263.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (9 samples, 0.01%)</title><rect x="92.8294%" y="1381" width="0.0134%" height="15" fill="rgb(232,102,6)" fg:x="62464" fg:w="9"/><text x="93.0794%" y="1391.50"></text></g><g><title>leveldb::PutVarint32 (11 samples, 0.02%)</title><rect x="92.8428%" y="1381" width="0.0163%" height="15" fill="rgb(251,105,13)" fg:x="62473" fg:w="11"/><text x="93.0928%" y="1391.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (27 samples, 0.04%)</title><rect x="92.9008%" y="1333" width="0.0401%" height="15" fill="rgb(222,179,29)" fg:x="62512" fg:w="27"/><text x="93.1508%" y="1343.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (66 samples, 0.10%)</title><rect x="92.9409%" y="1317" width="0.0981%" height="15" fill="rgb(229,180,53)" fg:x="62539" fg:w="66"/><text x="93.1909%" y="1327.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (66 samples, 0.10%)</title><rect x="92.9409%" y="1301" width="0.0981%" height="15" fill="rgb(238,104,13)" fg:x="62539" fg:w="66"/><text x="93.1909%" y="1311.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (66 samples, 0.10%)</title><rect x="92.9409%" y="1285" width="0.0981%" height="15" fill="rgb(210,130,5)" fg:x="62539" fg:w="66"/><text x="93.1909%" y="1295.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (50 samples, 0.07%)</title><rect x="92.9647%" y="1269" width="0.0743%" height="15" fill="rgb(233,87,49)" fg:x="62555" fg:w="50"/><text x="93.2147%" y="1279.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (50 samples, 0.07%)</title><rect x="92.9647%" y="1253" width="0.0743%" height="15" fill="rgb(243,34,9)" fg:x="62555" fg:w="50"/><text x="93.2147%" y="1263.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (50 samples, 0.07%)</title><rect x="92.9647%" y="1237" width="0.0743%" height="15" fill="rgb(235,225,10)" fg:x="62555" fg:w="50"/><text x="93.2147%" y="1247.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (17 samples, 0.03%)</title><rect x="93.0137%" y="1221" width="0.0253%" height="15" fill="rgb(212,0,30)" fg:x="62588" fg:w="17"/><text x="93.2637%" y="1231.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (69 samples, 0.10%)</title><rect x="93.0717%" y="1205" width="0.1025%" height="15" fill="rgb(211,177,0)" fg:x="62627" fg:w="69"/><text x="93.3217%" y="1215.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (92 samples, 0.14%)</title><rect x="93.0390%" y="1221" width="0.1367%" height="15" fill="rgb(225,220,11)" fg:x="62605" fg:w="92"/><text x="93.2890%" y="1231.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (344 samples, 0.51%)</title><rect x="92.8666%" y="1381" width="0.5112%" height="15" fill="rgb(215,10,13)" fg:x="62489" fg:w="344"/><text x="93.1166%" y="1391.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (344 samples, 0.51%)</title><rect x="92.8666%" y="1365" width="0.5112%" height="15" fill="rgb(240,177,14)" fg:x="62489" fg:w="344"/><text x="93.1166%" y="1375.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (342 samples, 0.51%)</title><rect x="92.8696%" y="1349" width="0.5083%" height="15" fill="rgb(243,7,39)" fg:x="62491" fg:w="342"/><text x="93.1196%" y="1359.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (294 samples, 0.44%)</title><rect x="92.9409%" y="1333" width="0.4369%" height="15" fill="rgb(212,99,0)" fg:x="62539" fg:w="294"/><text x="93.1909%" y="1343.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (228 samples, 0.34%)</title><rect x="93.0390%" y="1317" width="0.3388%" height="15" fill="rgb(225,162,48)" fg:x="62605" fg:w="228"/><text x="93.2890%" y="1327.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (228 samples, 0.34%)</title><rect x="93.0390%" y="1301" width="0.3388%" height="15" fill="rgb(246,16,25)" fg:x="62605" fg:w="228"/><text x="93.2890%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (228 samples, 0.34%)</title><rect x="93.0390%" y="1285" width="0.3388%" height="15" fill="rgb(220,150,2)" fg:x="62605" fg:w="228"/><text x="93.2890%" y="1295.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (228 samples, 0.34%)</title><rect x="93.0390%" y="1269" width="0.3388%" height="15" fill="rgb(237,113,11)" fg:x="62605" fg:w="228"/><text x="93.2890%" y="1279.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (228 samples, 0.34%)</title><rect x="93.0390%" y="1253" width="0.3388%" height="15" fill="rgb(236,70,20)" fg:x="62605" fg:w="228"/><text x="93.2890%" y="1263.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (228 samples, 0.34%)</title><rect x="93.0390%" y="1237" width="0.3388%" height="15" fill="rgb(234,94,7)" fg:x="62605" fg:w="228"/><text x="93.2890%" y="1247.50"></text></g><g><title>Coin::~Coin (136 samples, 0.20%)</title><rect x="93.1757%" y="1221" width="0.2021%" height="15" fill="rgb(250,221,0)" fg:x="62697" fg:w="136"/><text x="93.4257%" y="1231.50"></text></g><g><title>CTxOut::~CTxOut (136 samples, 0.20%)</title><rect x="93.1757%" y="1205" width="0.2021%" height="15" fill="rgb(245,149,46)" fg:x="62697" fg:w="136"/><text x="93.4257%" y="1215.50"></text></g><g><title>CScript::~CScript (136 samples, 0.20%)</title><rect x="93.1757%" y="1189" width="0.2021%" height="15" fill="rgb(215,37,27)" fg:x="62697" fg:w="136"/><text x="93.4257%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (136 samples, 0.20%)</title><rect x="93.1757%" y="1173" width="0.2021%" height="15" fill="rgb(232,65,3)" fg:x="62697" fg:w="136"/><text x="93.4257%" y="1183.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (7 samples, 0.01%)</title><rect x="93.3778%" y="1381" width="0.0104%" height="15" fill="rgb(214,2,16)" fg:x="62833" fg:w="7"/><text x="93.6278%" y="1391.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (16 samples, 0.02%)</title><rect x="93.4031%" y="1365" width="0.0238%" height="15" fill="rgb(227,131,50)" fg:x="62850" fg:w="16"/><text x="93.6531%" y="1375.50"></text></g><g><title>decltype  (11 samples, 0.02%)</title><rect x="93.4105%" y="1349" width="0.0163%" height="15" fill="rgb(247,131,45)" fg:x="62855" fg:w="11"/><text x="93.6605%" y="1359.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (11 samples, 0.02%)</title><rect x="93.4105%" y="1333" width="0.0163%" height="15" fill="rgb(215,97,47)" fg:x="62855" fg:w="11"/><text x="93.6605%" y="1343.50"></text></g><g><title>decltype (11 samples, 0.02%)</title><rect x="93.4105%" y="1317" width="0.0163%" height="15" fill="rgb(233,143,12)" fg:x="62855" fg:w="11"/><text x="93.6605%" y="1327.50"></text></g><g><title>CCoinsViewCache::Flush (4,536 samples, 6.74%)</title><rect x="86.6873%" y="1397" width="6.7411%" height="15" fill="rgb(222,57,17)" fg:x="58331" fg:w="4536"/><text x="86.9373%" y="1407.50">CCoinsVie..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (27 samples, 0.04%)</title><rect x="93.3882%" y="1381" width="0.0401%" height="15" fill="rgb(214,119,38)" fg:x="62840" fg:w="27"/><text x="93.6382%" y="1391.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (4,544 samples, 6.75%)</title><rect x="86.6873%" y="1429" width="6.7530%" height="15" fill="rgb(217,28,47)" fg:x="58331" fg:w="4544"/><text x="86.9373%" y="1439.50">Chainstat..</text></g><g><title>Chainstate::FlushStateToDisk (4,544 samples, 6.75%)</title><rect x="86.6873%" y="1413" width="6.7530%" height="15" fill="rgb(231,14,52)" fg:x="58331" fg:w="4544"/><text x="86.9373%" y="1423.50">Chainstat..</text></g><g><title>Chainstate::ResetCoinsViews (23 samples, 0.03%)</title><rect x="93.4402%" y="1429" width="0.0342%" height="15" fill="rgb(220,158,18)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1439.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.03%)</title><rect x="93.4402%" y="1413" width="0.0342%" height="15" fill="rgb(222,143,46)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1423.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.03%)</title><rect x="93.4402%" y="1397" width="0.0342%" height="15" fill="rgb(227,165,5)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1407.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.03%)</title><rect x="93.4402%" y="1381" width="0.0342%" height="15" fill="rgb(216,222,49)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1391.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.03%)</title><rect x="93.4402%" y="1365" width="0.0342%" height="15" fill="rgb(238,73,39)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1375.50"></text></g><g><title>CoinsViews::~CoinsViews (23 samples, 0.03%)</title><rect x="93.4402%" y="1349" width="0.0342%" height="15" fill="rgb(252,115,9)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1359.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (23 samples, 0.03%)</title><rect x="93.4402%" y="1333" width="0.0342%" height="15" fill="rgb(238,202,4)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1343.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (23 samples, 0.03%)</title><rect x="93.4402%" y="1317" width="0.0342%" height="15" fill="rgb(252,153,44)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1327.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.03%)</title><rect x="93.4402%" y="1301" width="0.0342%" height="15" fill="rgb(235,128,27)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1311.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.03%)</title><rect x="93.4402%" y="1285" width="0.0342%" height="15" fill="rgb(221,121,47)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1295.50"></text></g><g><title>CDBWrapper::~CDBWrapper (23 samples, 0.03%)</title><rect x="93.4402%" y="1269" width="0.0342%" height="15" fill="rgb(247,211,47)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1279.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.03%)</title><rect x="93.4402%" y="1253" width="0.0342%" height="15" fill="rgb(252,47,49)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1263.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.03%)</title><rect x="93.4402%" y="1237" width="0.0342%" height="15" fill="rgb(219,119,53)" fg:x="62875" fg:w="23"/><text x="93.6902%" y="1247.50"></text></g><g><title>leveldb::TableCache::~TableCache (22 samples, 0.03%)</title><rect x="93.4417%" y="1221" width="0.0327%" height="15" fill="rgb(243,165,53)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1231.50"></text></g><g><title>~ShardedLRUCache (22 samples, 0.03%)</title><rect x="93.4417%" y="1205" width="0.0327%" height="15" fill="rgb(230,12,35)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (22 samples, 0.03%)</title><rect x="93.4417%" y="1189" width="0.0327%" height="15" fill="rgb(239,57,49)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1199.50"></text></g><g><title>~LRUCache (22 samples, 0.03%)</title><rect x="93.4417%" y="1173" width="0.0327%" height="15" fill="rgb(231,154,7)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (22 samples, 0.03%)</title><rect x="93.4417%" y="1157" width="0.0327%" height="15" fill="rgb(248,81,34)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1167.50"></text></g><g><title>leveldb::DeleteEntry (22 samples, 0.03%)</title><rect x="93.4417%" y="1141" width="0.0327%" height="15" fill="rgb(247,9,5)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1151.50"></text></g><g><title>~PosixMmapReadableFile (22 samples, 0.03%)</title><rect x="93.4417%" y="1125" width="0.0327%" height="15" fill="rgb(228,172,27)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (22 samples, 0.03%)</title><rect x="93.4417%" y="1109" width="0.0327%" height="15" fill="rgb(230,57,44)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1119.50"></text></g><g><title>__munmap (22 samples, 0.03%)</title><rect x="93.4417%" y="1093" width="0.0327%" height="15" fill="rgb(249,35,22)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1103.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="1077" width="0.0327%" height="15" fill="rgb(250,137,27)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1087.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="1061" width="0.0327%" height="15" fill="rgb(251,57,31)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1071.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="1045" width="0.0327%" height="15" fill="rgb(238,60,0)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1055.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="1029" width="0.0327%" height="15" fill="rgb(242,185,39)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1039.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="1013" width="0.0327%" height="15" fill="rgb(240,63,43)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1023.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="997" width="0.0327%" height="15" fill="rgb(236,155,6)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="1007.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="981" width="0.0327%" height="15" fill="rgb(215,11,29)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="991.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="965" width="0.0327%" height="15" fill="rgb(228,180,48)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="975.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="93.4417%" y="949" width="0.0327%" height="15" fill="rgb(241,102,12)" fg:x="62876" fg:w="22"/><text x="93.6917%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="93.4536%" y="933" width="0.0208%" height="15" fill="rgb(246,213,4)" fg:x="62884" fg:w="14"/><text x="93.7036%" y="943.50"></text></g><g><title>_start (4,569 samples, 6.79%)</title><rect x="86.6873%" y="1509" width="6.7901%" height="15" fill="rgb(218,134,35)" fg:x="58331" fg:w="4569"/><text x="86.9373%" y="1519.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (4,569 samples, 6.79%)</title><rect x="86.6873%" y="1493" width="6.7901%" height="15" fill="rgb(251,117,35)" fg:x="58331" fg:w="4569"/><text x="86.9373%" y="1503.50">__libc_st..</text></g><g><title>__libc_start_call_main (4,569 samples, 6.79%)</title><rect x="86.6873%" y="1477" width="6.7901%" height="15" fill="rgb(206,156,45)" fg:x="58331" fg:w="4569"/><text x="86.9373%" y="1487.50">__libc_st..</text></g><g><title>main (4,569 samples, 6.79%)</title><rect x="86.6873%" y="1461" width="6.7901%" height="15" fill="rgb(218,52,27)" fg:x="58331" fg:w="4569"/><text x="86.9373%" y="1471.50">main</text></g><g><title>Shutdown (4,569 samples, 6.79%)</title><rect x="86.6873%" y="1445" width="6.7901%" height="15" fill="rgb(238,83,36)" fg:x="58331" fg:w="4569"/><text x="86.9373%" y="1455.50">Shutdown</text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20 samples, 0.03%)</title><rect x="93.4774%" y="1477" width="0.0297%" height="15" fill="rgb(218,53,43)" fg:x="62900" fg:w="20"/><text x="93.7274%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (34 samples, 0.05%)</title><rect x="93.4774%" y="1509" width="0.0505%" height="15" fill="rgb(239,54,39)" fg:x="62900" fg:w="34"/><text x="93.7274%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (34 samples, 0.05%)</title><rect x="93.4774%" y="1493" width="0.0505%" height="15" fill="rgb(212,198,13)" fg:x="62900" fg:w="34"/><text x="93.7274%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (8 samples, 0.01%)</title><rect x="93.5160%" y="1477" width="0.0119%" height="15" fill="rgb(234,54,46)" fg:x="62926" fg:w="8"/><text x="93.7660%" y="1487.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (11 samples, 0.02%)</title><rect x="93.5413%" y="1509" width="0.0163%" height="15" fill="rgb(217,120,7)" fg:x="62943" fg:w="11"/><text x="93.7913%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (34 samples, 0.05%)</title><rect x="93.5710%" y="1509" width="0.0505%" height="15" fill="rgb(246,39,15)" fg:x="62963" fg:w="34"/><text x="93.8210%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (34 samples, 0.05%)</title><rect x="93.5710%" y="1493" width="0.0505%" height="15" fill="rgb(242,143,31)" fg:x="62963" fg:w="34"/><text x="93.8210%" y="1503.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (32 samples, 0.05%)</title><rect x="93.5740%" y="1477" width="0.0476%" height="15" fill="rgb(252,60,24)" fg:x="62965" fg:w="32"/><text x="93.8240%" y="1487.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (32 samples, 0.05%)</title><rect x="93.5740%" y="1461" width="0.0476%" height="15" fill="rgb(249,220,7)" fg:x="62965" fg:w="32"/><text x="93.8240%" y="1471.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (32 samples, 0.05%)</title><rect x="93.5740%" y="1445" width="0.0476%" height="15" fill="rgb(236,67,13)" fg:x="62965" fg:w="32"/><text x="93.8240%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (32 samples, 0.05%)</title><rect x="93.5740%" y="1429" width="0.0476%" height="15" fill="rgb(210,62,39)" fg:x="62965" fg:w="32"/><text x="93.8240%" y="1439.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (32 samples, 0.05%)</title><rect x="93.5740%" y="1413" width="0.0476%" height="15" fill="rgb(219,122,53)" fg:x="62965" fg:w="32"/><text x="93.8240%" y="1423.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (32 samples, 0.05%)</title><rect x="93.5740%" y="1397" width="0.0476%" height="15" fill="rgb(218,87,25)" fg:x="62965" fg:w="32"/><text x="93.8240%" y="1407.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (32 samples, 0.05%)</title><rect x="93.5740%" y="1381" width="0.0476%" height="15" fill="rgb(234,179,48)" fg:x="62965" fg:w="32"/><text x="93.8240%" y="1391.50"></text></g><g><title>Coin::~Coin (31 samples, 0.05%)</title><rect x="93.5755%" y="1365" width="0.0461%" height="15" fill="rgb(248,90,0)" fg:x="62966" fg:w="31"/><text x="93.8255%" y="1375.50"></text></g><g><title>CTxOut::~CTxOut (31 samples, 0.05%)</title><rect x="93.5755%" y="1349" width="0.0461%" height="15" fill="rgb(207,228,37)" fg:x="62966" fg:w="31"/><text x="93.8255%" y="1359.50"></text></g><g><title>CScript::~CScript (31 samples, 0.05%)</title><rect x="93.5755%" y="1333" width="0.0461%" height="15" fill="rgb(235,214,15)" fg:x="62966" fg:w="31"/><text x="93.8255%" y="1343.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (31 samples, 0.05%)</title><rect x="93.5755%" y="1317" width="0.0461%" height="15" fill="rgb(210,144,39)" fg:x="62966" fg:w="31"/><text x="93.8255%" y="1327.50"></text></g><g><title>unlink_chunk.isra.0 (7 samples, 0.01%)</title><rect x="93.6215%" y="1509" width="0.0104%" height="15" fill="rgb(222,67,41)" fg:x="62997" fg:w="7"/><text x="93.8715%" y="1519.50"></text></g><g><title>b-shutoff (5,327 samples, 7.92%)</title><rect x="85.7168%" y="1525" width="7.9166%" height="15" fill="rgb(205,35,37)" fg:x="57678" fg:w="5327"/><text x="85.9668%" y="1535.50">b-shutoff</text></g><g><title>[000538.ldb] (7 samples, 0.01%)</title><rect x="93.6572%" y="1509" width="0.0104%" height="15" fill="rgb(216,125,40)" fg:x="63021" fg:w="7"/><text x="93.9072%" y="1519.50"></text></g><g><title>__clone (78 samples, 0.12%)</title><rect x="93.6795%" y="1493" width="0.1159%" height="15" fill="rgb(228,227,20)" fg:x="63036" fg:w="78"/><text x="93.9295%" y="1503.50"></text></g><g><title>[unknown] (78 samples, 0.12%)</title><rect x="93.6795%" y="1477" width="0.1159%" height="15" fill="rgb(242,173,45)" fg:x="63036" fg:w="78"/><text x="93.9295%" y="1487.50"></text></g><g><title>[unknown] (73 samples, 0.11%)</title><rect x="93.6869%" y="1461" width="0.1085%" height="15" fill="rgb(215,79,24)" fg:x="63041" fg:w="73"/><text x="93.9369%" y="1471.50"></text></g><g><title>[unknown] (71 samples, 0.11%)</title><rect x="93.6899%" y="1445" width="0.1055%" height="15" fill="rgb(238,164,38)" fg:x="63043" fg:w="71"/><text x="93.9399%" y="1455.50"></text></g><g><title>[unknown] (70 samples, 0.10%)</title><rect x="93.6914%" y="1429" width="0.1040%" height="15" fill="rgb(245,196,38)" fg:x="63044" fg:w="70"/><text x="93.9414%" y="1439.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="93.6929%" y="1413" width="0.1025%" height="15" fill="rgb(231,217,29)" fg:x="63045" fg:w="69"/><text x="93.9429%" y="1423.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="93.6929%" y="1397" width="0.1025%" height="15" fill="rgb(245,6,4)" fg:x="63045" fg:w="69"/><text x="93.9429%" y="1407.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="93.6929%" y="1381" width="0.1025%" height="15" fill="rgb(214,76,49)" fg:x="63045" fg:w="69"/><text x="93.9429%" y="1391.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="93.6929%" y="1365" width="0.1025%" height="15" fill="rgb(205,96,12)" fg:x="63045" fg:w="69"/><text x="93.9429%" y="1375.50"></text></g><g><title>[unknown] (60 samples, 0.09%)</title><rect x="93.7063%" y="1349" width="0.0892%" height="15" fill="rgb(243,131,4)" fg:x="63054" fg:w="60"/><text x="93.9563%" y="1359.50"></text></g><g><title>[unknown] (30 samples, 0.04%)</title><rect x="93.7508%" y="1333" width="0.0446%" height="15" fill="rgb(214,114,4)" fg:x="63084" fg:w="30"/><text x="94.0008%" y="1343.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="93.7687%" y="1317" width="0.0268%" height="15" fill="rgb(234,215,15)" fg:x="63096" fg:w="18"/><text x="94.0187%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (46 samples, 0.07%)</title><rect x="93.8147%" y="1493" width="0.0684%" height="15" fill="rgb(250,216,45)" fg:x="63127" fg:w="46"/><text x="94.0647%" y="1503.50"></text></g><g><title>[[heap]] (151 samples, 0.22%)</title><rect x="93.6750%" y="1509" width="0.2244%" height="15" fill="rgb(236,128,4)" fg:x="63033" fg:w="151"/><text x="93.9250%" y="1519.50"></text></g><g><title>[[stack]] (14 samples, 0.02%)</title><rect x="93.8994%" y="1509" width="0.0208%" height="15" fill="rgb(234,50,33)" fg:x="63184" fg:w="14"/><text x="94.1494%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (41 samples, 0.06%)</title><rect x="93.9247%" y="1493" width="0.0609%" height="15" fill="rgb(253,131,37)" fg:x="63201" fg:w="41"/><text x="94.1747%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (81 samples, 0.12%)</title><rect x="93.9856%" y="1493" width="0.1204%" height="15" fill="rgb(218,55,27)" fg:x="63242" fg:w="81"/><text x="94.2356%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (31 samples, 0.05%)</title><rect x="94.1209%" y="1493" width="0.0461%" height="15" fill="rgb(241,220,28)" fg:x="63333" fg:w="31"/><text x="94.3709%" y="1503.50"></text></g><g><title>leveldb::BlockBuilder::Add (8 samples, 0.01%)</title><rect x="94.2086%" y="1493" width="0.0119%" height="15" fill="rgb(241,90,48)" fg:x="63392" fg:w="8"/><text x="94.4586%" y="1503.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (7 samples, 0.01%)</title><rect x="94.2234%" y="1493" width="0.0104%" height="15" fill="rgb(216,43,37)" fg:x="63402" fg:w="7"/><text x="94.4734%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (7 samples, 0.01%)</title><rect x="94.2338%" y="1493" width="0.0104%" height="15" fill="rgb(207,173,9)" fg:x="63409" fg:w="7"/><text x="94.4838%" y="1503.50"></text></g><g><title>leveldb::Hash (14 samples, 0.02%)</title><rect x="94.2517%" y="1493" width="0.0208%" height="15" fill="rgb(240,126,30)" fg:x="63421" fg:w="14"/><text x="94.5017%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (67 samples, 0.10%)</title><rect x="94.2725%" y="1493" width="0.0996%" height="15" fill="rgb(228,178,53)" fg:x="63435" fg:w="67"/><text x="94.5225%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::Add (7 samples, 0.01%)</title><rect x="94.3750%" y="1493" width="0.0104%" height="15" fill="rgb(217,33,4)" fg:x="63504" fg:w="7"/><text x="94.6250%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::status (11 samples, 0.02%)</title><rect x="94.3988%" y="1493" width="0.0163%" height="15" fill="rgb(206,124,34)" fg:x="63520" fg:w="11"/><text x="94.6488%" y="1503.50"></text></g><g><title>memcmp@plt (14 samples, 0.02%)</title><rect x="94.4226%" y="1493" width="0.0208%" height="15" fill="rgb(208,122,53)" fg:x="63536" fg:w="14"/><text x="94.6726%" y="1503.50"></text></g><g><title>memcpy@plt (11 samples, 0.02%)</title><rect x="94.4434%" y="1493" width="0.0163%" height="15" fill="rgb(215,202,26)" fg:x="63550" fg:w="11"/><text x="94.6934%" y="1503.50"></text></g><g><title>[anon] (374 samples, 0.56%)</title><rect x="93.9203%" y="1509" width="0.5558%" height="15" fill="rgb(232,198,31)" fg:x="63198" fg:w="374"/><text x="94.1703%" y="1519.50"></text></g><g><title>__memcmp_evex_movbe (12 samples, 0.02%)</title><rect x="94.4894%" y="1493" width="0.0178%" height="15" fill="rgb(222,23,35)" fg:x="63581" fg:w="12"/><text x="94.7394%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (11 samples, 0.02%)</title><rect x="94.5073%" y="1493" width="0.0163%" height="15" fill="rgb(242,27,53)" fg:x="63593" fg:w="11"/><text x="94.7573%" y="1503.50"></text></g><g><title>_int_malloc (7 samples, 0.01%)</title><rect x="94.5266%" y="1493" width="0.0104%" height="15" fill="rgb(210,216,42)" fg:x="63606" fg:w="7"/><text x="94.7766%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (7 samples, 0.01%)</title><rect x="94.5370%" y="1493" width="0.0104%" height="15" fill="rgb(234,39,38)" fg:x="63613" fg:w="7"/><text x="94.7870%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.01%)</title><rect x="94.5519%" y="1493" width="0.0149%" height="15" fill="rgb(235,126,54)" fg:x="63623" fg:w="10"/><text x="94.8019%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.02%)</title><rect x="94.6083%" y="1493" width="0.0223%" height="15" fill="rgb(235,150,33)" fg:x="63661" fg:w="15"/><text x="94.8583%" y="1503.50"></text></g><g><title>[unknown] (115 samples, 0.17%)</title><rect x="94.4761%" y="1509" width="0.1709%" height="15" fill="rgb(249,49,53)" fg:x="63572" fg:w="115"/><text x="94.7261%" y="1519.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="94.6529%" y="1477" width="0.0104%" height="15" fill="rgb(238,60,50)" fg:x="63691" fg:w="7"/><text x="94.9029%" y="1487.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="94.6529%" y="1461" width="0.0104%" height="15" fill="rgb(210,5,2)" fg:x="63691" fg:w="7"/><text x="94.9029%" y="1471.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="94.6529%" y="1445" width="0.0104%" height="15" fill="rgb(214,207,24)" fg:x="63691" fg:w="7"/><text x="94.9029%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (16 samples, 0.02%)</title><rect x="94.6648%" y="1397" width="0.0238%" height="15" fill="rgb(228,173,2)" fg:x="63699" fg:w="16"/><text x="94.9148%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (14 samples, 0.02%)</title><rect x="94.6886%" y="1397" width="0.0208%" height="15" fill="rgb(244,26,8)" fg:x="63715" fg:w="14"/><text x="94.9386%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (16 samples, 0.02%)</title><rect x="94.7332%" y="1397" width="0.0238%" height="15" fill="rgb(249,153,35)" fg:x="63745" fg:w="16"/><text x="94.9832%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (76 samples, 0.11%)</title><rect x="94.7763%" y="1381" width="0.1129%" height="15" fill="rgb(221,215,40)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1391.50"></text></g><g><title>__unlink (76 samples, 0.11%)</title><rect x="94.7763%" y="1365" width="0.1129%" height="15" fill="rgb(238,106,35)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1375.50"></text></g><g><title>[unknown] (76 samples, 0.11%)</title><rect x="94.7763%" y="1349" width="0.1129%" height="15" fill="rgb(207,195,21)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1359.50"></text></g><g><title>[unknown] (76 samples, 0.11%)</title><rect x="94.7763%" y="1333" width="0.1129%" height="15" fill="rgb(205,43,29)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1343.50"></text></g><g><title>[unknown] (76 samples, 0.11%)</title><rect x="94.7763%" y="1317" width="0.1129%" height="15" fill="rgb(236,35,21)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1327.50"></text></g><g><title>[unknown] (76 samples, 0.11%)</title><rect x="94.7763%" y="1301" width="0.1129%" height="15" fill="rgb(244,74,8)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1311.50"></text></g><g><title>[unknown] (76 samples, 0.11%)</title><rect x="94.7763%" y="1285" width="0.1129%" height="15" fill="rgb(241,229,7)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1295.50"></text></g><g><title>[[ext4]] (76 samples, 0.11%)</title><rect x="94.7763%" y="1269" width="0.1129%" height="15" fill="rgb(212,223,25)" fg:x="63774" fg:w="76"/><text x="95.0263%" y="1279.50"></text></g><g><title>[unknown] (75 samples, 0.11%)</title><rect x="94.7777%" y="1253" width="0.1115%" height="15" fill="rgb(234,58,53)" fg:x="63775" fg:w="75"/><text x="95.0277%" y="1263.50"></text></g><g><title>[unknown] (74 samples, 0.11%)</title><rect x="94.7792%" y="1237" width="0.1100%" height="15" fill="rgb(244,36,1)" fg:x="63776" fg:w="74"/><text x="95.0292%" y="1247.50"></text></g><g><title>[unknown] (67 samples, 0.10%)</title><rect x="94.7896%" y="1221" width="0.0996%" height="15" fill="rgb(222,40,54)" fg:x="63783" fg:w="67"/><text x="95.0396%" y="1231.50"></text></g><g><title>[unknown] (55 samples, 0.08%)</title><rect x="94.8075%" y="1205" width="0.0817%" height="15" fill="rgb(210,207,39)" fg:x="63795" fg:w="55"/><text x="95.0575%" y="1215.50"></text></g><g><title>[unknown] (38 samples, 0.06%)</title><rect x="94.8327%" y="1189" width="0.0565%" height="15" fill="rgb(234,52,14)" fg:x="63812" fg:w="38"/><text x="95.0827%" y="1199.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="94.8639%" y="1173" width="0.0253%" height="15" fill="rgb(239,108,46)" fg:x="63833" fg:w="17"/><text x="95.1139%" y="1183.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (94 samples, 0.14%)</title><rect x="94.7763%" y="1397" width="0.1397%" height="15" fill="rgb(252,223,5)" fg:x="63774" fg:w="94"/><text x="95.0263%" y="1407.50"></text></g><g><title>leveldb::TableCache::Evict (18 samples, 0.03%)</title><rect x="94.8892%" y="1381" width="0.0268%" height="15" fill="rgb(227,181,11)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1391.50"></text></g><g><title>Erase (18 samples, 0.03%)</title><rect x="94.8892%" y="1365" width="0.0268%" height="15" fill="rgb(248,126,40)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (18 samples, 0.03%)</title><rect x="94.8892%" y="1349" width="0.0268%" height="15" fill="rgb(243,1,18)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (18 samples, 0.03%)</title><rect x="94.8892%" y="1333" width="0.0268%" height="15" fill="rgb(214,145,23)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (18 samples, 0.03%)</title><rect x="94.8892%" y="1317" width="0.0268%" height="15" fill="rgb(241,218,11)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1327.50"></text></g><g><title>leveldb::DeleteEntry (18 samples, 0.03%)</title><rect x="94.8892%" y="1301" width="0.0268%" height="15" fill="rgb(214,219,24)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1311.50"></text></g><g><title>~PosixMmapReadableFile (18 samples, 0.03%)</title><rect x="94.8892%" y="1285" width="0.0268%" height="15" fill="rgb(235,32,7)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (18 samples, 0.03%)</title><rect x="94.8892%" y="1269" width="0.0268%" height="15" fill="rgb(227,121,28)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1279.50"></text></g><g><title>__munmap (18 samples, 0.03%)</title><rect x="94.8892%" y="1253" width="0.0268%" height="15" fill="rgb(216,129,49)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1263.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1237" width="0.0268%" height="15" fill="rgb(207,194,50)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1247.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1221" width="0.0268%" height="15" fill="rgb(207,4,18)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1231.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1205" width="0.0268%" height="15" fill="rgb(213,50,30)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1215.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1189" width="0.0268%" height="15" fill="rgb(208,77,22)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1199.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1173" width="0.0268%" height="15" fill="rgb(244,204,34)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1183.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1157" width="0.0268%" height="15" fill="rgb(230,20,17)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1167.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1141" width="0.0268%" height="15" fill="rgb(237,83,15)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1151.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1125" width="0.0268%" height="15" fill="rgb(221,109,25)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1135.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="94.8892%" y="1109" width="0.0268%" height="15" fill="rgb(205,194,52)" fg:x="63850" fg:w="18"/><text x="95.1392%" y="1119.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="94.9026%" y="1093" width="0.0134%" height="15" fill="rgb(244,173,54)" fg:x="63859" fg:w="9"/><text x="95.1526%" y="1103.50"></text></g><g><title>leveldb::BlockBuilder::Add (8 samples, 0.01%)</title><rect x="94.9442%" y="1285" width="0.0119%" height="15" fill="rgb(227,181,18)" fg:x="63887" fg:w="8"/><text x="95.1942%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (8 samples, 0.01%)</title><rect x="94.9620%" y="1253" width="0.0119%" height="15" fill="rgb(238,36,30)" fg:x="63899" fg:w="8"/><text x="95.2120%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (16 samples, 0.02%)</title><rect x="94.9561%" y="1285" width="0.0238%" height="15" fill="rgb(254,85,0)" fg:x="63895" fg:w="16"/><text x="95.2061%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (14 samples, 0.02%)</title><rect x="94.9591%" y="1269" width="0.0208%" height="15" fill="rgb(247,63,33)" fg:x="63897" fg:w="14"/><text x="95.2091%" y="1279.50"></text></g><g><title>Next (27 samples, 0.04%)</title><rect x="94.9412%" y="1317" width="0.0401%" height="15" fill="rgb(220,7,54)" fg:x="63885" fg:w="27"/><text x="95.1912%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (27 samples, 0.04%)</title><rect x="94.9412%" y="1301" width="0.0401%" height="15" fill="rgb(238,227,21)" fg:x="63885" fg:w="27"/><text x="95.1912%" y="1311.50"></text></g><g><title>leveldb::crc32c::Unmask (16 samples, 0.02%)</title><rect x="95.0096%" y="1237" width="0.0238%" height="15" fill="rgb(237,29,31)" fg:x="63931" fg:w="16"/><text x="95.2596%" y="1247.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.0111%" y="1221" width="0.0223%" height="15" fill="rgb(211,21,50)" fg:x="63932" fg:w="15"/><text x="95.2611%" y="1231.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.0111%" y="1205" width="0.0223%" height="15" fill="rgb(239,119,2)" fg:x="63932" fg:w="15"/><text x="95.2611%" y="1215.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.0111%" y="1189" width="0.0223%" height="15" fill="rgb(250,2,39)" fg:x="63932" fg:w="15"/><text x="95.2611%" y="1199.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="95.0126%" y="1173" width="0.0208%" height="15" fill="rgb(244,46,53)" fg:x="63933" fg:w="14"/><text x="95.2626%" y="1183.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="95.0126%" y="1157" width="0.0208%" height="15" fill="rgb(209,21,19)" fg:x="63933" fg:w="14"/><text x="95.2626%" y="1167.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="95.0140%" y="1141" width="0.0193%" height="15" fill="rgb(236,145,4)" fg:x="63934" fg:w="13"/><text x="95.2640%" y="1151.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="95.0170%" y="1125" width="0.0163%" height="15" fill="rgb(220,133,36)" fg:x="63936" fg:w="11"/><text x="95.2670%" y="1135.50"></text></g><g><title>crc32c::ExtendSse42 (60 samples, 0.09%)</title><rect x="95.0334%" y="1221" width="0.0892%" height="15" fill="rgb(244,18,3)" fg:x="63947" fg:w="60"/><text x="95.2834%" y="1231.50"></text></g><g><title>_mm_crc32_u64 (40 samples, 0.06%)</title><rect x="95.0631%" y="1205" width="0.0594%" height="15" fill="rgb(232,171,48)" fg:x="63967" fg:w="40"/><text x="95.3131%" y="1215.50"></text></g><g><title>leveldb::crc32c::Value (62 samples, 0.09%)</title><rect x="95.0334%" y="1237" width="0.0921%" height="15" fill="rgb(223,223,53)" fg:x="63947" fg:w="62"/><text x="95.2834%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (98 samples, 0.15%)</title><rect x="94.9813%" y="1285" width="0.1456%" height="15" fill="rgb(246,92,13)" fg:x="63912" fg:w="98"/><text x="95.2313%" y="1295.50"></text></g><g><title>leveldb::Table::BlockReader (92 samples, 0.14%)</title><rect x="94.9903%" y="1269" width="0.1367%" height="15" fill="rgb(229,171,10)" fg:x="63918" fg:w="92"/><text x="95.2403%" y="1279.50"></text></g><g><title>leveldb::ReadBlock (82 samples, 0.12%)</title><rect x="95.0051%" y="1253" width="0.1219%" height="15" fill="rgb(213,131,26)" fg:x="63928" fg:w="82"/><text x="95.2551%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (100 samples, 0.15%)</title><rect x="94.9813%" y="1301" width="0.1486%" height="15" fill="rgb(242,87,54)" fg:x="63912" fg:w="100"/><text x="95.2313%" y="1311.50"></text></g><g><title>SkipEmptyDataBlocksForward (104 samples, 0.15%)</title><rect x="94.9813%" y="1317" width="0.1546%" height="15" fill="rgb(237,21,35)" fg:x="63912" fg:w="104"/><text x="95.2313%" y="1327.50"></text></g><g><title>Next (164 samples, 0.24%)</title><rect x="94.9397%" y="1349" width="0.2437%" height="15" fill="rgb(253,13,47)" fg:x="63884" fg:w="164"/><text x="95.1897%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (164 samples, 0.24%)</title><rect x="94.9397%" y="1333" width="0.2437%" height="15" fill="rgb(215,122,49)" fg:x="63884" fg:w="164"/><text x="95.1897%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (8 samples, 0.01%)</title><rect x="95.1716%" y="1317" width="0.0119%" height="15" fill="rgb(209,179,30)" fg:x="64040" fg:w="8"/><text x="95.4216%" y="1327.50"></text></g><g><title>leveldb::ReadBlock (24 samples, 0.04%)</title><rect x="95.1894%" y="1285" width="0.0357%" height="15" fill="rgb(235,100,24)" fg:x="64052" fg:w="24"/><text x="95.4394%" y="1295.50"></text></g><g><title>leveldb::crc32c::Value (20 samples, 0.03%)</title><rect x="95.1954%" y="1269" width="0.0297%" height="15" fill="rgb(209,67,24)" fg:x="64056" fg:w="20"/><text x="95.4454%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (20 samples, 0.03%)</title><rect x="95.1954%" y="1253" width="0.0297%" height="15" fill="rgb(206,74,32)" fg:x="64056" fg:w="20"/><text x="95.4454%" y="1263.50"></text></g><g><title>_mm_crc32_u64 (8 samples, 0.01%)</title><rect x="95.2132%" y="1237" width="0.0119%" height="15" fill="rgb(212,45,25)" fg:x="64068" fg:w="8"/><text x="95.4632%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (29 samples, 0.04%)</title><rect x="95.1835%" y="1317" width="0.0431%" height="15" fill="rgb(239,26,3)" fg:x="64048" fg:w="29"/><text x="95.4335%" y="1327.50"></text></g><g><title>leveldb::Table::BlockReader (27 samples, 0.04%)</title><rect x="95.1864%" y="1301" width="0.0401%" height="15" fill="rgb(218,36,15)" fg:x="64050" fg:w="27"/><text x="95.4364%" y="1311.50"></text></g><g><title>SkipEmptyDataBlocksForward (30 samples, 0.04%)</title><rect x="95.1835%" y="1349" width="0.0446%" height="15" fill="rgb(206,108,24)" fg:x="64048" fg:w="30"/><text x="95.4335%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (30 samples, 0.04%)</title><rect x="95.1835%" y="1333" width="0.0446%" height="15" fill="rgb(234,204,42)" fg:x="64048" fg:w="30"/><text x="95.4335%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (11 samples, 0.02%)</title><rect x="95.2295%" y="1349" width="0.0163%" height="15" fill="rgb(229,2,11)" fg:x="64079" fg:w="11"/><text x="95.4795%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (16 samples, 0.02%)</title><rect x="95.2652%" y="1349" width="0.0238%" height="15" fill="rgb(221,20,48)" fg:x="64103" fg:w="16"/><text x="95.5152%" y="1359.50"></text></g><g><title>Next (244 samples, 0.36%)</title><rect x="94.9397%" y="1381" width="0.3626%" height="15" fill="rgb(244,164,10)" fg:x="63884" fg:w="244"/><text x="95.1897%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (244 samples, 0.36%)</title><rect x="94.9397%" y="1365" width="0.3626%" height="15" fill="rgb(243,229,2)" fg:x="63884" fg:w="244"/><text x="95.1897%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::FileSize (7 samples, 0.01%)</title><rect x="95.2919%" y="1349" width="0.0104%" height="15" fill="rgb(232,131,37)" fg:x="64121" fg:w="7"/><text x="95.5419%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (34 samples, 0.05%)</title><rect x="95.3083%" y="1381" width="0.0505%" height="15" fill="rgb(217,156,11)" fg:x="64132" fg:w="34"/><text x="95.5583%" y="1391.50"></text></g><g><title>leveldb::Slice::compare (8 samples, 0.01%)</title><rect x="95.3469%" y="1365" width="0.0119%" height="15" fill="rgb(239,99,48)" fg:x="64158" fg:w="8"/><text x="95.5969%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (21 samples, 0.03%)</title><rect x="95.3588%" y="1381" width="0.0312%" height="15" fill="rgb(231,209,9)" fg:x="64166" fg:w="21"/><text x="95.6088%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (22 samples, 0.03%)</title><rect x="95.4227%" y="1349" width="0.0327%" height="15" fill="rgb(254,97,27)" fg:x="64209" fg:w="22"/><text x="95.6727%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::Valid (7 samples, 0.01%)</title><rect x="95.4554%" y="1349" width="0.0104%" height="15" fill="rgb(223,151,38)" fg:x="64231" fg:w="7"/><text x="95.7054%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (8 samples, 0.01%)</title><rect x="95.4941%" y="1333" width="0.0119%" height="15" fill="rgb(219,206,35)" fg:x="64257" fg:w="8"/><text x="95.7441%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (7 samples, 0.01%)</title><rect x="95.4955%" y="1317" width="0.0104%" height="15" fill="rgb(216,130,31)" fg:x="64258" fg:w="7"/><text x="95.7455%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (7 samples, 0.01%)</title><rect x="95.4955%" y="1301" width="0.0104%" height="15" fill="rgb(251,97,34)" fg:x="64258" fg:w="7"/><text x="95.7455%" y="1311.50"></text></g><g><title>leveldb::Block::Iter::key (7 samples, 0.01%)</title><rect x="95.5238%" y="1333" width="0.0104%" height="15" fill="rgb(246,159,47)" fg:x="64277" fg:w="7"/><text x="95.7738%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (97 samples, 0.14%)</title><rect x="95.3975%" y="1365" width="0.1442%" height="15" fill="rgb(232,87,10)" fg:x="64192" fg:w="97"/><text x="95.6475%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (50 samples, 0.07%)</title><rect x="95.4673%" y="1349" width="0.0743%" height="15" fill="rgb(249,1,37)" fg:x="64239" fg:w="50"/><text x="95.7173%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (7 samples, 0.01%)</title><rect x="95.5743%" y="1333" width="0.0104%" height="15" fill="rgb(239,135,14)" fg:x="64311" fg:w="7"/><text x="95.8243%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (8 samples, 0.01%)</title><rect x="95.5743%" y="1349" width="0.0119%" height="15" fill="rgb(253,116,46)" fg:x="64311" fg:w="8"/><text x="95.8243%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (21 samples, 0.03%)</title><rect x="95.5565%" y="1365" width="0.0312%" height="15" fill="rgb(222,217,37)" fg:x="64299" fg:w="21"/><text x="95.8065%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (161 samples, 0.24%)</title><rect x="95.3900%" y="1381" width="0.2393%" height="15" fill="rgb(252,96,8)" fg:x="64187" fg:w="161"/><text x="95.6400%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (25 samples, 0.04%)</title><rect x="95.5921%" y="1365" width="0.0372%" height="15" fill="rgb(254,103,41)" fg:x="64323" fg:w="25"/><text x="95.8421%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (25 samples, 0.04%)</title><rect x="95.5921%" y="1349" width="0.0372%" height="15" fill="rgb(218,213,19)" fg:x="64323" fg:w="25"/><text x="95.8421%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (13 samples, 0.02%)</title><rect x="95.6100%" y="1333" width="0.0193%" height="15" fill="rgb(253,95,21)" fg:x="64335" fg:w="13"/><text x="95.8600%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (7 samples, 0.01%)</title><rect x="95.6352%" y="1381" width="0.0104%" height="15" fill="rgb(229,26,28)" fg:x="64352" fg:w="7"/><text x="95.8852%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (11 samples, 0.02%)</title><rect x="95.6531%" y="1381" width="0.0163%" height="15" fill="rgb(230,129,16)" fg:x="64364" fg:w="11"/><text x="95.9031%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (12 samples, 0.02%)</title><rect x="95.6724%" y="1381" width="0.0178%" height="15" fill="rgb(236,126,17)" fg:x="64377" fg:w="12"/><text x="95.9224%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.01%)</title><rect x="95.7155%" y="1365" width="0.0149%" height="15" fill="rgb(209,33,33)" fg:x="64406" fg:w="10"/><text x="95.9655%" y="1375.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (8 samples, 0.01%)</title><rect x="95.7304%" y="1365" width="0.0119%" height="15" fill="rgb(227,85,29)" fg:x="64416" fg:w="8"/><text x="95.9804%" y="1375.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (39 samples, 0.06%)</title><rect x="95.7006%" y="1381" width="0.0580%" height="15" fill="rgb(241,53,46)" fg:x="64396" fg:w="39"/><text x="95.9506%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (18 samples, 0.03%)</title><rect x="95.8076%" y="1349" width="0.0268%" height="15" fill="rgb(228,167,53)" fg:x="64468" fg:w="18"/><text x="96.0576%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (35 samples, 0.05%)</title><rect x="95.8032%" y="1365" width="0.0520%" height="15" fill="rgb(238,195,45)" fg:x="64465" fg:w="35"/><text x="96.0532%" y="1375.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (66 samples, 0.10%)</title><rect x="95.7586%" y="1381" width="0.0981%" height="15" fill="rgb(252,124,45)" fg:x="64435" fg:w="66"/><text x="96.0086%" y="1391.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (15 samples, 0.02%)</title><rect x="95.8567%" y="1365" width="0.0223%" height="15" fill="rgb(251,38,35)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (15 samples, 0.02%)</title><rect x="95.8567%" y="1349" width="0.0223%" height="15" fill="rgb(227,33,2)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1359.50"></text></g><g><title>__unlink (15 samples, 0.02%)</title><rect x="95.8567%" y="1333" width="0.0223%" height="15" fill="rgb(223,157,46)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1343.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.8567%" y="1317" width="0.0223%" height="15" fill="rgb(222,78,41)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1327.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.8567%" y="1301" width="0.0223%" height="15" fill="rgb(248,176,11)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1311.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.8567%" y="1285" width="0.0223%" height="15" fill="rgb(241,221,18)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1295.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.8567%" y="1269" width="0.0223%" height="15" fill="rgb(218,85,22)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1279.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.8567%" y="1253" width="0.0223%" height="15" fill="rgb(222,223,7)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1263.50"></text></g><g><title>[[ext4]] (15 samples, 0.02%)</title><rect x="95.8567%" y="1237" width="0.0223%" height="15" fill="rgb(254,59,39)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1247.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.8567%" y="1221" width="0.0223%" height="15" fill="rgb(247,100,27)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1231.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="95.8567%" y="1205" width="0.0223%" height="15" fill="rgb(237,207,10)" fg:x="64501" fg:w="15"/><text x="96.1067%" y="1215.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="95.8611%" y="1189" width="0.0178%" height="15" fill="rgb(220,121,28)" fg:x="64504" fg:w="12"/><text x="96.1111%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="95.8671%" y="1173" width="0.0119%" height="15" fill="rgb(213,223,20)" fg:x="64508" fg:w="8"/><text x="96.1171%" y="1183.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="95.8849%" y="1093" width="0.0104%" height="15" fill="rgb(205,121,27)" fg:x="64520" fg:w="7"/><text x="96.1349%" y="1103.50"></text></g><g><title>[[ext4]] (9 samples, 0.01%)</title><rect x="95.8849%" y="1109" width="0.0134%" height="15" fill="rgb(253,24,53)" fg:x="64520" fg:w="9"/><text x="96.1349%" y="1119.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="95.8790%" y="1157" width="0.0208%" height="15" fill="rgb(224,224,47)" fg:x="64516" fg:w="14"/><text x="96.1290%" y="1167.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="95.8790%" y="1141" width="0.0208%" height="15" fill="rgb(250,125,36)" fg:x="64516" fg:w="14"/><text x="96.1290%" y="1151.50"></text></g><g><title>[[ext4]] (14 samples, 0.02%)</title><rect x="95.8790%" y="1125" width="0.0208%" height="15" fill="rgb(240,144,38)" fg:x="64516" fg:w="14"/><text x="96.1290%" y="1135.50"></text></g><g><title>Sync (17 samples, 0.03%)</title><rect x="95.8790%" y="1333" width="0.0253%" height="15" fill="rgb(250,15,50)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (17 samples, 0.03%)</title><rect x="95.8790%" y="1317" width="0.0253%" height="15" fill="rgb(210,24,26)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1327.50"></text></g><g><title>fdatasync (17 samples, 0.03%)</title><rect x="95.8790%" y="1301" width="0.0253%" height="15" fill="rgb(234,53,53)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1311.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="95.8790%" y="1285" width="0.0253%" height="15" fill="rgb(208,108,28)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1295.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="95.8790%" y="1269" width="0.0253%" height="15" fill="rgb(227,143,7)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1279.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="95.8790%" y="1253" width="0.0253%" height="15" fill="rgb(238,189,38)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1263.50"></text></g><g><title>[[ext4]] (17 samples, 0.03%)</title><rect x="95.8790%" y="1237" width="0.0253%" height="15" fill="rgb(222,69,15)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1247.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="95.8790%" y="1221" width="0.0253%" height="15" fill="rgb(213,169,7)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1231.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="95.8790%" y="1205" width="0.0253%" height="15" fill="rgb(251,219,4)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1215.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="95.8790%" y="1189" width="0.0253%" height="15" fill="rgb(241,55,40)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1199.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="95.8790%" y="1173" width="0.0253%" height="15" fill="rgb(243,57,30)" fg:x="64516" fg:w="17"/><text x="96.1290%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (170 samples, 0.25%)</title><rect x="95.9458%" y="1301" width="0.2526%" height="15" fill="rgb(234,50,30)" fg:x="64561" fg:w="170"/><text x="96.1958%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (68 samples, 0.10%)</title><rect x="96.0974%" y="1285" width="0.1011%" height="15" fill="rgb(239,23,42)" fg:x="64663" fg:w="68"/><text x="96.3474%" y="1295.50"></text></g><g><title>leveldb::PutVarint32 (8 samples, 0.01%)</title><rect x="96.1985%" y="1301" width="0.0119%" height="15" fill="rgb(217,38,19)" fg:x="64731" fg:w="8"/><text x="96.4485%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.01%)</title><rect x="96.2267%" y="1285" width="0.0134%" height="15" fill="rgb(215,179,16)" fg:x="64750" fg:w="9"/><text x="96.4767%" y="1295.50"></text></g><g><title>leveldb::operator== (13 samples, 0.02%)</title><rect x="96.2267%" y="1301" width="0.0193%" height="15" fill="rgb(254,21,37)" fg:x="64750" fg:w="13"/><text x="96.4767%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (11 samples, 0.02%)</title><rect x="96.2460%" y="1285" width="0.0163%" height="15" fill="rgb(219,207,48)" fg:x="64763" fg:w="11"/><text x="96.4960%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (16 samples, 0.02%)</title><rect x="96.2460%" y="1301" width="0.0238%" height="15" fill="rgb(227,225,41)" fg:x="64763" fg:w="16"/><text x="96.4960%" y="1311.50"></text></g><g><title>leveldb::BlockBuilder::Add (235 samples, 0.35%)</title><rect x="95.9236%" y="1317" width="0.3492%" height="15" fill="rgb(223,130,1)" fg:x="64546" fg:w="235"/><text x="96.1736%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (11 samples, 0.02%)</title><rect x="96.2951%" y="1253" width="0.0163%" height="15" fill="rgb(249,54,42)" fg:x="64796" fg:w="11"/><text x="96.5451%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (22 samples, 0.03%)</title><rect x="96.2832%" y="1285" width="0.0327%" height="15" fill="rgb(248,69,25)" fg:x="64788" fg:w="22"/><text x="96.5332%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (14 samples, 0.02%)</title><rect x="96.2951%" y="1269" width="0.0208%" height="15" fill="rgb(234,21,32)" fg:x="64796" fg:w="14"/><text x="96.5451%" y="1279.50"></text></g><g><title>leveldb::Hash (7 samples, 0.01%)</title><rect x="96.3159%" y="1285" width="0.0104%" height="15" fill="rgb(252,136,6)" fg:x="64810" fg:w="7"/><text x="96.5659%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (34 samples, 0.05%)</title><rect x="96.2817%" y="1317" width="0.0505%" height="15" fill="rgb(245,87,12)" fg:x="64787" fg:w="34"/><text x="96.5317%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (33 samples, 0.05%)</title><rect x="96.2832%" y="1301" width="0.0490%" height="15" fill="rgb(208,12,15)" fg:x="64788" fg:w="33"/><text x="96.5332%" y="1311.50"></text></g><g><title>leveldb::MemTableIterator::value (7 samples, 0.01%)</title><rect x="96.3456%" y="1317" width="0.0104%" height="15" fill="rgb(250,98,2)" fg:x="64830" fg:w="7"/><text x="96.5956%" y="1327.50"></text></g><g><title>leveldb::PutVarint32 (13 samples, 0.02%)</title><rect x="96.3560%" y="1317" width="0.0193%" height="15" fill="rgb(205,213,15)" fg:x="64837" fg:w="13"/><text x="96.6060%" y="1327.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="96.3991%" y="1109" width="0.0178%" height="15" fill="rgb(248,192,44)" fg:x="64866" fg:w="12"/><text x="96.6491%" y="1119.50"></text></g><g><title>[[ext4]] (21 samples, 0.03%)</title><rect x="96.3976%" y="1125" width="0.0312%" height="15" fill="rgb(221,89,17)" fg:x="64865" fg:w="21"/><text x="96.6476%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="96.4169%" y="1109" width="0.0119%" height="15" fill="rgb(209,55,3)" fg:x="64878" fg:w="8"/><text x="96.6669%" y="1119.50"></text></g><g><title>[[ext4]] (61 samples, 0.09%)</title><rect x="96.3932%" y="1141" width="0.0907%" height="15" fill="rgb(247,23,45)" fg:x="64862" fg:w="61"/><text x="96.6432%" y="1151.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="96.4288%" y="1125" width="0.0550%" height="15" fill="rgb(235,152,23)" fg:x="64886" fg:w="37"/><text x="96.6788%" y="1135.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="96.4318%" y="1109" width="0.0520%" height="15" fill="rgb(244,63,13)" fg:x="64888" fg:w="35"/><text x="96.6818%" y="1119.50"></text></g><g><title>[unknown] (24 samples, 0.04%)</title><rect x="96.4482%" y="1093" width="0.0357%" height="15" fill="rgb(227,30,37)" fg:x="64899" fg:w="24"/><text x="96.6982%" y="1103.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="96.4556%" y="1077" width="0.0282%" height="15" fill="rgb(224,49,42)" fg:x="64904" fg:w="19"/><text x="96.7056%" y="1087.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="96.4630%" y="1061" width="0.0208%" height="15" fill="rgb(218,129,5)" fg:x="64909" fg:w="14"/><text x="96.7130%" y="1071.50"></text></g><g><title>[[ext4]] (73 samples, 0.11%)</title><rect x="96.3843%" y="1173" width="0.1085%" height="15" fill="rgb(240,199,54)" fg:x="64856" fg:w="73"/><text x="96.6343%" y="1183.50"></text></g><g><title>[unknown] (69 samples, 0.10%)</title><rect x="96.3902%" y="1157" width="0.1025%" height="15" fill="rgb(234,31,13)" fg:x="64860" fg:w="69"/><text x="96.6402%" y="1167.50"></text></g><g><title>Flush (80 samples, 0.12%)</title><rect x="96.3798%" y="1301" width="0.1189%" height="15" fill="rgb(219,73,54)" fg:x="64853" fg:w="80"/><text x="96.6298%" y="1311.50"></text></g><g><title>FlushBuffer (80 samples, 0.12%)</title><rect x="96.3798%" y="1285" width="0.1189%" height="15" fill="rgb(251,162,10)" fg:x="64853" fg:w="80"/><text x="96.6298%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (80 samples, 0.12%)</title><rect x="96.3798%" y="1269" width="0.1189%" height="15" fill="rgb(240,138,47)" fg:x="64853" fg:w="80"/><text x="96.6298%" y="1279.50"></text></g><g><title>__GI___libc_write (80 samples, 0.12%)</title><rect x="96.3798%" y="1253" width="0.1189%" height="15" fill="rgb(216,138,26)" fg:x="64853" fg:w="80"/><text x="96.6298%" y="1263.50"></text></g><g><title>[unknown] (80 samples, 0.12%)</title><rect x="96.3798%" y="1237" width="0.1189%" height="15" fill="rgb(243,17,35)" fg:x="64853" fg:w="80"/><text x="96.6298%" y="1247.50"></text></g><g><title>[unknown] (80 samples, 0.12%)</title><rect x="96.3798%" y="1221" width="0.1189%" height="15" fill="rgb(241,60,18)" fg:x="64853" fg:w="80"/><text x="96.6298%" y="1231.50"></text></g><g><title>[unknown] (79 samples, 0.12%)</title><rect x="96.3813%" y="1205" width="0.1174%" height="15" fill="rgb(234,2,44)" fg:x="64854" fg:w="79"/><text x="96.6313%" y="1215.50"></text></g><g><title>[unknown] (78 samples, 0.12%)</title><rect x="96.3828%" y="1189" width="0.1159%" height="15" fill="rgb(225,225,33)" fg:x="64855" fg:w="78"/><text x="96.6328%" y="1199.50"></text></g><g><title>leveldb::TableBuilder::Flush (86 samples, 0.13%)</title><rect x="96.3798%" y="1317" width="0.1278%" height="15" fill="rgb(234,50,31)" fg:x="64853" fg:w="86"/><text x="96.6298%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (401 samples, 0.60%)</title><rect x="95.9191%" y="1333" width="0.5959%" height="15" fill="rgb(249,6,25)" fg:x="64543" fg:w="401"/><text x="96.1691%" y="1343.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (447 samples, 0.66%)</title><rect x="95.8567%" y="1381" width="0.6643%" height="15" fill="rgb(241,5,17)" fg:x="64501" fg:w="447"/><text x="96.1067%" y="1391.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (432 samples, 0.64%)</title><rect x="95.8790%" y="1365" width="0.6420%" height="15" fill="rgb(207,116,10)" fg:x="64516" fg:w="432"/><text x="96.1290%" y="1375.50"></text></g><g><title>leveldb::BuildTable (432 samples, 0.64%)</title><rect x="95.8790%" y="1349" width="0.6420%" height="15" fill="rgb(222,128,18)" fg:x="64516" fg:w="432"/><text x="96.1290%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (38 samples, 0.06%)</title><rect x="96.5210%" y="1381" width="0.0565%" height="15" fill="rgb(229,109,25)" fg:x="64948" fg:w="38"/><text x="96.7710%" y="1391.50"></text></g><g><title>[[ext4]] (39 samples, 0.06%)</title><rect x="96.5968%" y="1125" width="0.0580%" height="15" fill="rgb(222,102,25)" fg:x="64999" fg:w="39"/><text x="96.8468%" y="1135.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="96.6057%" y="1109" width="0.0490%" height="15" fill="rgb(239,211,5)" fg:x="65005" fg:w="33"/><text x="96.8557%" y="1119.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="96.6354%" y="1093" width="0.0193%" height="15" fill="rgb(223,136,26)" fg:x="65025" fg:w="13"/><text x="96.8854%" y="1103.50"></text></g><g><title>[[ext4]] (50 samples, 0.07%)</title><rect x="96.5938%" y="1141" width="0.0743%" height="15" fill="rgb(227,30,15)" fg:x="64997" fg:w="50"/><text x="96.8438%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="96.6547%" y="1125" width="0.0134%" height="15" fill="rgb(247,76,4)" fg:x="65038" fg:w="9"/><text x="96.9047%" y="1135.50"></text></g><g><title>[[ext4]] (71 samples, 0.11%)</title><rect x="96.5879%" y="1157" width="0.1055%" height="15" fill="rgb(245,38,48)" fg:x="64993" fg:w="71"/><text x="96.8379%" y="1167.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="96.6681%" y="1141" width="0.0253%" height="15" fill="rgb(210,220,14)" fg:x="65047" fg:w="17"/><text x="96.9181%" y="1151.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="96.6755%" y="1125" width="0.0178%" height="15" fill="rgb(224,60,51)" fg:x="65052" fg:w="12"/><text x="96.9255%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="96.6815%" y="1109" width="0.0119%" height="15" fill="rgb(212,133,49)" fg:x="65056" fg:w="8"/><text x="96.9315%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="96.6815%" y="1093" width="0.0119%" height="15" fill="rgb(231,39,22)" fg:x="65056" fg:w="8"/><text x="96.9315%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="96.6830%" y="1077" width="0.0104%" height="15" fill="rgb(236,173,22)" fg:x="65057" fg:w="7"/><text x="96.9330%" y="1087.50"></text></g><g><title>[[ext4]] (72 samples, 0.11%)</title><rect x="96.5879%" y="1189" width="0.1070%" height="15" fill="rgb(210,70,0)" fg:x="64993" fg:w="72"/><text x="96.8379%" y="1199.50"></text></g><g><title>[[ext4]] (72 samples, 0.11%)</title><rect x="96.5879%" y="1173" width="0.1070%" height="15" fill="rgb(215,170,11)" fg:x="64993" fg:w="72"/><text x="96.8379%" y="1183.50"></text></g><g><title>Sync (99 samples, 0.15%)</title><rect x="96.5774%" y="1365" width="0.1471%" height="15" fill="rgb(220,154,28)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (99 samples, 0.15%)</title><rect x="96.5774%" y="1349" width="0.1471%" height="15" fill="rgb(240,160,41)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1359.50"></text></g><g><title>fdatasync (99 samples, 0.15%)</title><rect x="96.5774%" y="1333" width="0.1471%" height="15" fill="rgb(243,215,41)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1343.50"></text></g><g><title>[unknown] (99 samples, 0.15%)</title><rect x="96.5774%" y="1317" width="0.1471%" height="15" fill="rgb(214,208,31)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1327.50"></text></g><g><title>[unknown] (99 samples, 0.15%)</title><rect x="96.5774%" y="1301" width="0.1471%" height="15" fill="rgb(247,57,22)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1311.50"></text></g><g><title>[unknown] (99 samples, 0.15%)</title><rect x="96.5774%" y="1285" width="0.1471%" height="15" fill="rgb(228,73,52)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1295.50"></text></g><g><title>[[ext4]] (99 samples, 0.15%)</title><rect x="96.5774%" y="1269" width="0.1471%" height="15" fill="rgb(252,60,9)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1279.50"></text></g><g><title>[unknown] (99 samples, 0.15%)</title><rect x="96.5774%" y="1253" width="0.1471%" height="15" fill="rgb(233,9,51)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1263.50"></text></g><g><title>[unknown] (99 samples, 0.15%)</title><rect x="96.5774%" y="1237" width="0.1471%" height="15" fill="rgb(223,67,14)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1247.50"></text></g><g><title>[unknown] (99 samples, 0.15%)</title><rect x="96.5774%" y="1221" width="0.1471%" height="15" fill="rgb(222,86,2)" fg:x="64986" fg:w="99"/><text x="96.8274%" y="1231.50"></text></g><g><title>[unknown] (94 samples, 0.14%)</title><rect x="96.5849%" y="1205" width="0.1397%" height="15" fill="rgb(243,58,54)" fg:x="64991" fg:w="94"/><text x="96.8349%" y="1215.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="96.6949%" y="1189" width="0.0297%" height="15" fill="rgb(210,200,39)" fg:x="65065" fg:w="20"/><text x="96.9449%" y="1199.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="96.6963%" y="1173" width="0.0282%" height="15" fill="rgb(238,135,9)" fg:x="65066" fg:w="19"/><text x="96.9463%" y="1183.50"></text></g><g><title>[unknown] (19 samples, 0.03%)</title><rect x="96.6963%" y="1157" width="0.0282%" height="15" fill="rgb(232,179,7)" fg:x="65066" fg:w="19"/><text x="96.9463%" y="1167.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="96.6993%" y="1141" width="0.0253%" height="15" fill="rgb(245,65,41)" fg:x="65068" fg:w="17"/><text x="96.9493%" y="1151.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="96.7008%" y="1125" width="0.0238%" height="15" fill="rgb(227,43,8)" fg:x="65069" fg:w="16"/><text x="96.9508%" y="1135.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="96.7067%" y="1109" width="0.0178%" height="15" fill="rgb(235,91,14)" fg:x="65073" fg:w="12"/><text x="96.9567%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="96.7142%" y="1093" width="0.0104%" height="15" fill="rgb(235,219,31)" fg:x="65078" fg:w="7"/><text x="96.9642%" y="1103.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="96.7305%" y="1189" width="0.0119%" height="15" fill="rgb(227,121,25)" fg:x="65089" fg:w="8"/><text x="96.9805%" y="1199.50"></text></g><g><title>leveldb::TableBuilder::Finish (14 samples, 0.02%)</title><rect x="96.7246%" y="1365" width="0.0208%" height="15" fill="rgb(254,129,24)" fg:x="65085" fg:w="14"/><text x="96.9746%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (10 samples, 0.01%)</title><rect x="96.7305%" y="1349" width="0.0149%" height="15" fill="rgb(226,144,49)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1359.50"></text></g><g><title>Append (10 samples, 0.01%)</title><rect x="96.7305%" y="1333" width="0.0149%" height="15" fill="rgb(214,187,32)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (10 samples, 0.01%)</title><rect x="96.7305%" y="1317" width="0.0149%" height="15" fill="rgb(243,129,46)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1327.50"></text></g><g><title>__GI___libc_write (10 samples, 0.01%)</title><rect x="96.7305%" y="1301" width="0.0149%" height="15" fill="rgb(221,185,35)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1311.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="96.7305%" y="1285" width="0.0149%" height="15" fill="rgb(205,0,32)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1295.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="96.7305%" y="1269" width="0.0149%" height="15" fill="rgb(229,179,12)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1279.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="96.7305%" y="1253" width="0.0149%" height="15" fill="rgb(252,107,19)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1263.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="96.7305%" y="1237" width="0.0149%" height="15" fill="rgb(220,95,27)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1247.50"></text></g><g><title>[[ext4]] (10 samples, 0.01%)</title><rect x="96.7305%" y="1221" width="0.0149%" height="15" fill="rgb(240,113,40)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1231.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="96.7305%" y="1205" width="0.0149%" height="15" fill="rgb(208,4,43)" fg:x="65089" fg:w="10"/><text x="96.9805%" y="1215.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (118 samples, 0.18%)</title><rect x="96.5774%" y="1381" width="0.1754%" height="15" fill="rgb(247,189,30)" fg:x="64986" fg:w="118"/><text x="96.8274%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (20 samples, 0.03%)</title><rect x="96.7558%" y="1381" width="0.0297%" height="15" fill="rgb(231,157,17)" fg:x="65106" fg:w="20"/><text x="97.0058%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (22 samples, 0.03%)</title><rect x="96.8048%" y="1365" width="0.0327%" height="15" fill="rgb(224,139,6)" fg:x="65139" fg:w="22"/><text x="97.0548%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (8 samples, 0.01%)</title><rect x="96.8375%" y="1365" width="0.0119%" height="15" fill="rgb(223,83,16)" fg:x="65161" fg:w="8"/><text x="97.0875%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::value (7 samples, 0.01%)</title><rect x="96.8390%" y="1349" width="0.0104%" height="15" fill="rgb(232,211,20)" fg:x="65162" fg:w="7"/><text x="97.0890%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (10 samples, 0.01%)</title><rect x="96.8494%" y="1365" width="0.0149%" height="15" fill="rgb(225,203,35)" fg:x="65169" fg:w="10"/><text x="97.0994%" y="1375.50"></text></g><g><title>leveldb::BlockBuilder::Add (13 samples, 0.02%)</title><rect x="97.0099%" y="1349" width="0.0193%" height="15" fill="rgb(215,211,44)" fg:x="65277" fg:w="13"/><text x="97.2599%" y="1359.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (8 samples, 0.01%)</title><rect x="97.0307%" y="1349" width="0.0119%" height="15" fill="rgb(248,213,26)" fg:x="65291" fg:w="8"/><text x="97.2807%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (26 samples, 0.04%)</title><rect x="97.0575%" y="1333" width="0.0386%" height="15" fill="rgb(214,23,52)" fg:x="65309" fg:w="26"/><text x="97.3075%" y="1343.50"></text></g><g><title>leveldb::Slice::compare (11 samples, 0.02%)</title><rect x="97.0798%" y="1317" width="0.0163%" height="15" fill="rgb(225,173,50)" fg:x="65324" fg:w="11"/><text x="97.3298%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (9 samples, 0.01%)</title><rect x="97.1006%" y="1333" width="0.0134%" height="15" fill="rgb(206,150,22)" fg:x="65338" fg:w="9"/><text x="97.3506%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (33 samples, 0.05%)</title><rect x="97.1139%" y="1333" width="0.0490%" height="15" fill="rgb(239,64,23)" fg:x="65347" fg:w="33"/><text x="97.3639%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (84 samples, 0.12%)</title><rect x="97.0426%" y="1349" width="0.1248%" height="15" fill="rgb(242,50,38)" fg:x="65299" fg:w="84"/><text x="97.2926%" y="1359.50"></text></g><g><title>leveldb::BlockBuilder::Add (9 samples, 0.01%)</title><rect x="97.1719%" y="1333" width="0.0134%" height="15" fill="rgb(217,91,15)" fg:x="65386" fg:w="9"/><text x="97.4219%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (11 samples, 0.02%)</title><rect x="97.1853%" y="1333" width="0.0163%" height="15" fill="rgb(230,172,6)" fg:x="65395" fg:w="11"/><text x="97.4353%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (10 samples, 0.01%)</title><rect x="97.2016%" y="1333" width="0.0149%" height="15" fill="rgb(221,98,26)" fg:x="65406" fg:w="10"/><text x="97.4516%" y="1343.50"></text></g><g><title>leveldb::PutVarint32 (34 samples, 0.05%)</title><rect x="97.1674%" y="1349" width="0.0505%" height="15" fill="rgb(227,210,45)" fg:x="65383" fg:w="34"/><text x="97.4174%" y="1359.50"></text></g><g><title>leveldb::Slice::operator[] (44 samples, 0.07%)</title><rect x="97.2195%" y="1349" width="0.0654%" height="15" fill="rgb(206,8,30)" fg:x="65418" fg:w="44"/><text x="97.4695%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (22 samples, 0.03%)</title><rect x="97.2908%" y="1349" width="0.0327%" height="15" fill="rgb(241,219,17)" fg:x="65466" fg:w="22"/><text x="97.5408%" y="1359.50"></text></g><g><title>__memmove_avx512_unaligned_erms (24 samples, 0.04%)</title><rect x="97.3324%" y="1333" width="0.0357%" height="15" fill="rgb(247,121,29)" fg:x="65494" fg:w="24"/><text x="97.5824%" y="1343.50"></text></g><g><title>leveldb::operator== (32 samples, 0.05%)</title><rect x="97.3324%" y="1349" width="0.0476%" height="15" fill="rgb(219,169,49)" fg:x="65494" fg:w="32"/><text x="97.5824%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (34 samples, 0.05%)</title><rect x="97.4008%" y="1317" width="0.0505%" height="15" fill="rgb(253,49,49)" fg:x="65540" fg:w="34"/><text x="97.6508%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (31 samples, 0.05%)</title><rect x="97.4052%" y="1301" width="0.0461%" height="15" fill="rgb(217,178,3)" fg:x="65543" fg:w="31"/><text x="97.6552%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (27 samples, 0.04%)</title><rect x="97.4112%" y="1285" width="0.0401%" height="15" fill="rgb(234,73,37)" fg:x="65547" fg:w="27"/><text x="97.6612%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (55 samples, 0.08%)</title><rect x="97.3800%" y="1333" width="0.0817%" height="15" fill="rgb(250,98,22)" fg:x="65526" fg:w="55"/><text x="97.6300%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (7 samples, 0.01%)</title><rect x="97.4513%" y="1317" width="0.0104%" height="15" fill="rgb(220,108,37)" fg:x="65574" fg:w="7"/><text x="97.7013%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (7 samples, 0.01%)</title><rect x="97.4513%" y="1301" width="0.0104%" height="15" fill="rgb(225,168,10)" fg:x="65574" fg:w="7"/><text x="97.7013%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (60 samples, 0.09%)</title><rect x="97.3800%" y="1349" width="0.0892%" height="15" fill="rgb(247,215,21)" fg:x="65526" fg:w="60"/><text x="97.6300%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (12 samples, 0.02%)</title><rect x="97.4691%" y="1349" width="0.0178%" height="15" fill="rgb(253,189,31)" fg:x="65586" fg:w="12"/><text x="97.7191%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (12 samples, 0.02%)</title><rect x="97.4691%" y="1333" width="0.0178%" height="15" fill="rgb(241,54,22)" fg:x="65586" fg:w="12"/><text x="97.7191%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (7 samples, 0.01%)</title><rect x="97.4766%" y="1317" width="0.0104%" height="15" fill="rgb(211,87,4)" fg:x="65591" fg:w="7"/><text x="97.7266%" y="1327.50"></text></g><g><title>leveldb::BlockBuilder::Add (420 samples, 0.62%)</title><rect x="96.8702%" y="1365" width="0.6242%" height="15" fill="rgb(245,112,24)" fg:x="65183" fg:w="420"/><text x="97.1202%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (8 samples, 0.01%)</title><rect x="97.5301%" y="1285" width="0.0119%" height="15" fill="rgb(235,190,41)" fg:x="65627" fg:w="8"/><text x="97.7801%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (11 samples, 0.02%)</title><rect x="97.5301%" y="1301" width="0.0163%" height="15" fill="rgb(214,89,8)" fg:x="65627" fg:w="11"/><text x="97.7801%" y="1311.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (15 samples, 0.02%)</title><rect x="97.5271%" y="1349" width="0.0223%" height="15" fill="rgb(249,155,35)" fg:x="65625" fg:w="15"/><text x="97.7771%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (15 samples, 0.02%)</title><rect x="97.5271%" y="1333" width="0.0223%" height="15" fill="rgb(249,88,26)" fg:x="65625" fg:w="15"/><text x="97.7771%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (15 samples, 0.02%)</title><rect x="97.5271%" y="1317" width="0.0223%" height="15" fill="rgb(232,56,8)" fg:x="65625" fg:w="15"/><text x="97.7771%" y="1327.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (33 samples, 0.05%)</title><rect x="97.5093%" y="1365" width="0.0490%" height="15" fill="rgb(240,95,3)" fg:x="65613" fg:w="33"/><text x="97.7593%" y="1375.50"></text></g><g><title>leveldb::EncodeVarint32 (14 samples, 0.02%)</title><rect x="97.5583%" y="1365" width="0.0208%" height="15" fill="rgb(222,44,28)" fg:x="65646" fg:w="14"/><text x="97.8083%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (10 samples, 0.01%)</title><rect x="97.5836%" y="1349" width="0.0149%" height="15" fill="rgb(234,16,30)" fg:x="65663" fg:w="10"/><text x="97.8336%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (10 samples, 0.01%)</title><rect x="97.5836%" y="1333" width="0.0149%" height="15" fill="rgb(223,26,17)" fg:x="65663" fg:w="10"/><text x="97.8336%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (14 samples, 0.02%)</title><rect x="97.5791%" y="1365" width="0.0208%" height="15" fill="rgb(239,187,47)" fg:x="65660" fg:w="14"/><text x="97.8291%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (40 samples, 0.06%)</title><rect x="97.6935%" y="1301" width="0.0594%" height="15" fill="rgb(247,102,50)" fg:x="65737" fg:w="40"/><text x="97.9435%" y="1311.50"></text></g><g><title>leveldb::Hash (18 samples, 0.03%)</title><rect x="97.7530%" y="1301" width="0.0268%" height="15" fill="rgb(231,216,22)" fg:x="65777" fg:w="18"/><text x="98.0030%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (60 samples, 0.09%)</title><rect x="97.6935%" y="1317" width="0.0892%" height="15" fill="rgb(216,201,26)" fg:x="65737" fg:w="60"/><text x="97.9435%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (127 samples, 0.19%)</title><rect x="97.5999%" y="1333" width="0.1887%" height="15" fill="rgb(214,186,23)" fg:x="65674" fg:w="127"/><text x="97.8499%" y="1343.50"></text></g><g><title>leveldb::Hash (65 samples, 0.10%)</title><rect x="97.7961%" y="1333" width="0.0966%" height="15" fill="rgb(235,184,4)" fg:x="65806" fg:w="65"/><text x="98.0461%" y="1343.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (8 samples, 0.01%)</title><rect x="97.8956%" y="1333" width="0.0119%" height="15" fill="rgb(244,46,17)" fg:x="65873" fg:w="8"/><text x="98.1456%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (208 samples, 0.31%)</title><rect x="97.5999%" y="1349" width="0.3091%" height="15" fill="rgb(248,74,46)" fg:x="65674" fg:w="208"/><text x="97.8499%" y="1359.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (212 samples, 0.32%)</title><rect x="97.5999%" y="1365" width="0.3151%" height="15" fill="rgb(243,79,5)" fg:x="65674" fg:w="212"/><text x="97.8499%" y="1375.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (7 samples, 0.01%)</title><rect x="97.9610%" y="1333" width="0.0104%" height="15" fill="rgb(213,148,1)" fg:x="65917" fg:w="7"/><text x="98.2110%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (7 samples, 0.01%)</title><rect x="97.9610%" y="1317" width="0.0104%" height="15" fill="rgb(221,30,0)" fg:x="65917" fg:w="7"/><text x="98.2110%" y="1327.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (17 samples, 0.03%)</title><rect x="97.9491%" y="1349" width="0.0253%" height="15" fill="rgb(207,85,29)" fg:x="65909" fg:w="17"/><text x="98.1991%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (43 samples, 0.06%)</title><rect x="97.9150%" y="1365" width="0.0639%" height="15" fill="rgb(239,31,46)" fg:x="65886" fg:w="43"/><text x="98.1650%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (8 samples, 0.01%)</title><rect x="98.0591%" y="1317" width="0.0119%" height="15" fill="rgb(219,6,1)" fg:x="65983" fg:w="8"/><text x="98.3091%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (20 samples, 0.03%)</title><rect x="98.0561%" y="1333" width="0.0297%" height="15" fill="rgb(229,90,29)" fg:x="65981" fg:w="20"/><text x="98.3061%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (7 samples, 0.01%)</title><rect x="98.0755%" y="1317" width="0.0104%" height="15" fill="rgb(242,201,42)" fg:x="65994" fg:w="7"/><text x="98.3255%" y="1327.50"></text></g><g><title>leveldb::PutVarint32 (73 samples, 0.11%)</title><rect x="97.9878%" y="1365" width="0.1085%" height="15" fill="rgb(243,80,54)" fg:x="65935" fg:w="73"/><text x="98.2378%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (27 samples, 0.04%)</title><rect x="98.0561%" y="1349" width="0.0401%" height="15" fill="rgb(223,166,15)" fg:x="65981" fg:w="27"/><text x="98.3061%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (7 samples, 0.01%)</title><rect x="98.0859%" y="1333" width="0.0104%" height="15" fill="rgb(238,78,27)" fg:x="66001" fg:w="7"/><text x="98.3359%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (10 samples, 0.01%)</title><rect x="98.0963%" y="1365" width="0.0149%" height="15" fill="rgb(235,28,43)" fg:x="66008" fg:w="10"/><text x="98.3463%" y="1375.50"></text></g><g><title>[[ext4]] (17 samples, 0.03%)</title><rect x="98.2404%" y="1125" width="0.0253%" height="15" fill="rgb(240,210,28)" fg:x="66105" fg:w="17"/><text x="98.4904%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="98.2553%" y="1109" width="0.0104%" height="15" fill="rgb(253,6,46)" fg:x="66115" fg:w="7"/><text x="98.5053%" y="1119.50"></text></g><g><title>[[ext4]] (45 samples, 0.07%)</title><rect x="98.2241%" y="1141" width="0.0669%" height="15" fill="rgb(250,159,47)" fg:x="66094" fg:w="45"/><text x="98.4741%" y="1151.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="98.2657%" y="1125" width="0.0253%" height="15" fill="rgb(216,139,2)" fg:x="66122" fg:w="17"/><text x="98.5157%" y="1135.50"></text></g><g><title>[[ext4]] (63 samples, 0.09%)</title><rect x="98.2122%" y="1157" width="0.0936%" height="15" fill="rgb(221,124,44)" fg:x="66086" fg:w="63"/><text x="98.4622%" y="1167.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="98.2910%" y="1141" width="0.0149%" height="15" fill="rgb(205,37,22)" fg:x="66139" fg:w="10"/><text x="98.5410%" y="1151.50"></text></g><g><title>[[ext4]] (103 samples, 0.15%)</title><rect x="98.2048%" y="1173" width="0.1531%" height="15" fill="rgb(250,55,8)" fg:x="66081" fg:w="103"/><text x="98.4548%" y="1183.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="98.3058%" y="1157" width="0.0520%" height="15" fill="rgb(215,83,48)" fg:x="66149" fg:w="35"/><text x="98.5558%" y="1167.50"></text></g><g><title>[unknown] (26 samples, 0.04%)</title><rect x="98.3192%" y="1141" width="0.0386%" height="15" fill="rgb(253,2,32)" fg:x="66158" fg:w="26"/><text x="98.5692%" y="1151.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="98.3341%" y="1125" width="0.0238%" height="15" fill="rgb(236,67,28)" fg:x="66168" fg:w="16"/><text x="98.5841%" y="1135.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="98.3355%" y="1109" width="0.0223%" height="15" fill="rgb(252,55,15)" fg:x="66169" fg:w="15"/><text x="98.5855%" y="1119.50"></text></g><g><title>[[ext4]] (349 samples, 0.52%)</title><rect x="98.1810%" y="1189" width="0.5187%" height="15" fill="rgb(243,173,17)" fg:x="66065" fg:w="349"/><text x="98.4310%" y="1199.50"></text></g><g><title>[unknown] (230 samples, 0.34%)</title><rect x="98.3578%" y="1173" width="0.3418%" height="15" fill="rgb(215,212,13)" fg:x="66184" fg:w="230"/><text x="98.6078%" y="1183.50"></text></g><g><title>[unknown] (219 samples, 0.33%)</title><rect x="98.3742%" y="1157" width="0.3255%" height="15" fill="rgb(253,176,6)" fg:x="66195" fg:w="219"/><text x="98.6242%" y="1167.50"></text></g><g><title>[unknown] (170 samples, 0.25%)</title><rect x="98.4470%" y="1141" width="0.2526%" height="15" fill="rgb(236,105,26)" fg:x="66244" fg:w="170"/><text x="98.6970%" y="1151.50"></text></g><g><title>[unknown] (134 samples, 0.20%)</title><rect x="98.5005%" y="1125" width="0.1991%" height="15" fill="rgb(239,226,32)" fg:x="66280" fg:w="134"/><text x="98.7505%" y="1135.50"></text></g><g><title>[unknown] (95 samples, 0.14%)</title><rect x="98.5585%" y="1109" width="0.1412%" height="15" fill="rgb(236,104,51)" fg:x="66319" fg:w="95"/><text x="98.8085%" y="1119.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="98.6580%" y="1093" width="0.0416%" height="15" fill="rgb(220,172,33)" fg:x="66386" fg:w="28"/><text x="98.9080%" y="1103.50"></text></g><g><title>[[ext4]] (424 samples, 0.63%)</title><rect x="98.1572%" y="1221" width="0.6301%" height="15" fill="rgb(224,182,25)" fg:x="66049" fg:w="424"/><text x="98.4072%" y="1231.50"></text></g><g><title>[unknown] (417 samples, 0.62%)</title><rect x="98.1676%" y="1205" width="0.6197%" height="15" fill="rgb(236,184,24)" fg:x="66056" fg:w="417"/><text x="98.4176%" y="1215.50"></text></g><g><title>[unknown] (59 samples, 0.09%)</title><rect x="98.6996%" y="1189" width="0.0877%" height="15" fill="rgb(241,221,14)" fg:x="66414" fg:w="59"/><text x="98.9496%" y="1199.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="98.7219%" y="1173" width="0.0654%" height="15" fill="rgb(227,146,5)" fg:x="66429" fg:w="44"/><text x="98.9719%" y="1183.50"></text></g><g><title>Flush (473 samples, 0.70%)</title><rect x="98.1111%" y="1349" width="0.7029%" height="15" fill="rgb(214,15,23)" fg:x="66018" fg:w="473"/><text x="98.3611%" y="1359.50"></text></g><g><title>FlushBuffer (473 samples, 0.70%)</title><rect x="98.1111%" y="1333" width="0.7029%" height="15" fill="rgb(233,157,31)" fg:x="66018" fg:w="473"/><text x="98.3611%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (473 samples, 0.70%)</title><rect x="98.1111%" y="1317" width="0.7029%" height="15" fill="rgb(211,27,52)" fg:x="66018" fg:w="473"/><text x="98.3611%" y="1327.50"></text></g><g><title>__GI___libc_write (473 samples, 0.70%)</title><rect x="98.1111%" y="1301" width="0.7029%" height="15" fill="rgb(212,223,15)" fg:x="66018" fg:w="473"/><text x="98.3611%" y="1311.50"></text></g><g><title>[unknown] (472 samples, 0.70%)</title><rect x="98.1126%" y="1285" width="0.7015%" height="15" fill="rgb(254,211,0)" fg:x="66019" fg:w="472"/><text x="98.3626%" y="1295.50"></text></g><g><title>[unknown] (466 samples, 0.69%)</title><rect x="98.1215%" y="1269" width="0.6925%" height="15" fill="rgb(205,43,38)" fg:x="66025" fg:w="466"/><text x="98.3715%" y="1279.50"></text></g><g><title>[unknown] (464 samples, 0.69%)</title><rect x="98.1245%" y="1253" width="0.6896%" height="15" fill="rgb(242,206,46)" fg:x="66027" fg:w="464"/><text x="98.3745%" y="1263.50"></text></g><g><title>[unknown] (455 samples, 0.68%)</title><rect x="98.1379%" y="1237" width="0.6762%" height="15" fill="rgb(220,221,12)" fg:x="66036" fg:w="455"/><text x="98.3879%" y="1247.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="98.7873%" y="1221" width="0.0268%" height="15" fill="rgb(217,156,35)" fg:x="66473" fg:w="18"/><text x="99.0373%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Flush (511 samples, 0.76%)</title><rect x="98.1111%" y="1365" width="0.7594%" height="15" fill="rgb(207,181,49)" fg:x="66018" fg:w="511"/><text x="98.3611%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (35 samples, 0.05%)</title><rect x="98.8185%" y="1349" width="0.0520%" height="15" fill="rgb(235,103,47)" fg:x="66494" fg:w="35"/><text x="99.0685%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (28 samples, 0.04%)</title><rect x="98.8289%" y="1333" width="0.0416%" height="15" fill="rgb(222,63,28)" fg:x="66501" fg:w="28"/><text x="99.0789%" y="1343.50"></text></g><g><title>leveldb::crc32c::Value (18 samples, 0.03%)</title><rect x="98.8438%" y="1317" width="0.0268%" height="15" fill="rgb(244,137,21)" fg:x="66511" fg:w="18"/><text x="99.0938%" y="1327.50"></text></g><g><title>crc32c::ExtendSse42 (18 samples, 0.03%)</title><rect x="98.8438%" y="1301" width="0.0268%" height="15" fill="rgb(228,35,27)" fg:x="66511" fg:w="18"/><text x="99.0938%" y="1311.50"></text></g><g><title>_mm_crc32_u64 (10 samples, 0.01%)</title><rect x="98.8557%" y="1285" width="0.0149%" height="15" fill="rgb(226,191,41)" fg:x="66519" fg:w="10"/><text x="99.1057%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.01%)</title><rect x="98.8750%" y="1349" width="0.0104%" height="15" fill="rgb(210,154,3)" fg:x="66532" fg:w="7"/><text x="99.1250%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (9 samples, 0.01%)</title><rect x="98.8958%" y="1349" width="0.0134%" height="15" fill="rgb(216,60,49)" fg:x="66546" fg:w="9"/><text x="99.1458%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::ok (28 samples, 0.04%)</title><rect x="98.8705%" y="1365" width="0.0416%" height="15" fill="rgb(226,17,20)" fg:x="66529" fg:w="28"/><text x="99.1205%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Add (1,431 samples, 2.13%)</title><rect x="96.7885%" y="1381" width="2.1266%" height="15" fill="rgb(206,115,35)" fg:x="65128" fg:w="1431"/><text x="97.0385%" y="1391.50">l..</text></g><g><title>leveldb::DBImpl::DoCompactionWork (2,697 samples, 4.01%)</title><rect x="94.9160%" y="1397" width="4.0081%" height="15" fill="rgb(227,88,1)" fg:x="63868" fg:w="2697"/><text x="95.1660%" y="1407.50">leve..</text></g><g><title>leveldb::DBImpl::BackgroundCompaction (2,882 samples, 4.28%)</title><rect x="94.6633%" y="1413" width="4.2830%" height="15" fill="rgb(230,222,24)" fg:x="63698" fg:w="2882"/><text x="94.9133%" y="1423.50">level..</text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.02%)</title><rect x="98.9240%" y="1397" width="0.0223%" height="15" fill="rgb(214,124,32)" fg:x="66565" fg:w="15"/><text x="99.1740%" y="1407.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (13 samples, 0.02%)</title><rect x="98.9463%" y="1397" width="0.0193%" height="15" fill="rgb(240,41,36)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (13 samples, 0.02%)</title><rect x="98.9463%" y="1381" width="0.0193%" height="15" fill="rgb(221,17,52)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1391.50"></text></g><g><title>__unlink (13 samples, 0.02%)</title><rect x="98.9463%" y="1365" width="0.0193%" height="15" fill="rgb(252,70,16)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1375.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.9463%" y="1349" width="0.0193%" height="15" fill="rgb(250,177,4)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1359.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.9463%" y="1333" width="0.0193%" height="15" fill="rgb(240,188,47)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1343.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.9463%" y="1317" width="0.0193%" height="15" fill="rgb(215,92,12)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1327.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.9463%" y="1301" width="0.0193%" height="15" fill="rgb(242,110,29)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1311.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.9463%" y="1285" width="0.0193%" height="15" fill="rgb(208,211,26)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1295.50"></text></g><g><title>[[ext4]] (13 samples, 0.02%)</title><rect x="98.9463%" y="1269" width="0.0193%" height="15" fill="rgb(244,147,6)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1279.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.9463%" y="1253" width="0.0193%" height="15" fill="rgb(211,130,42)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1263.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="98.9463%" y="1237" width="0.0193%" height="15" fill="rgb(220,63,1)" fg:x="66580" fg:w="13"/><text x="99.1963%" y="1247.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="98.9523%" y="1221" width="0.0134%" height="15" fill="rgb(241,212,30)" fg:x="66584" fg:w="9"/><text x="99.2023%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="98.9553%" y="1205" width="0.0104%" height="15" fill="rgb(233,153,17)" fg:x="66586" fg:w="7"/><text x="99.2053%" y="1215.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="98.9686%" y="1189" width="0.0104%" height="15" fill="rgb(236,3,10)" fg:x="66595" fg:w="7"/><text x="99.2186%" y="1199.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="98.9686%" y="1173" width="0.0104%" height="15" fill="rgb(232,41,21)" fg:x="66595" fg:w="7"/><text x="99.2186%" y="1183.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="98.9686%" y="1157" width="0.0104%" height="15" fill="rgb(206,63,51)" fg:x="66595" fg:w="7"/><text x="99.2186%" y="1167.50"></text></g><g><title>[[ext4]] (7 samples, 0.01%)</title><rect x="98.9686%" y="1141" width="0.0104%" height="15" fill="rgb(250,214,3)" fg:x="66595" fg:w="7"/><text x="99.2186%" y="1151.50"></text></g><g><title>Sync (11 samples, 0.02%)</title><rect x="98.9657%" y="1365" width="0.0163%" height="15" fill="rgb(254,89,27)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (11 samples, 0.02%)</title><rect x="98.9657%" y="1349" width="0.0163%" height="15" fill="rgb(249,41,14)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1359.50"></text></g><g><title>fdatasync (11 samples, 0.02%)</title><rect x="98.9657%" y="1333" width="0.0163%" height="15" fill="rgb(221,196,51)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1343.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="98.9657%" y="1317" width="0.0163%" height="15" fill="rgb(214,116,26)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1327.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="98.9657%" y="1301" width="0.0163%" height="15" fill="rgb(236,67,7)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1311.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="98.9657%" y="1285" width="0.0163%" height="15" fill="rgb(253,179,32)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1295.50"></text></g><g><title>[[ext4]] (11 samples, 0.02%)</title><rect x="98.9657%" y="1269" width="0.0163%" height="15" fill="rgb(218,33,15)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1279.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="98.9657%" y="1253" width="0.0163%" height="15" fill="rgb(217,202,41)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1263.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="98.9657%" y="1237" width="0.0163%" height="15" fill="rgb(234,133,5)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1247.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="98.9657%" y="1221" width="0.0163%" height="15" fill="rgb(240,47,40)" fg:x="66593" fg:w="11"/><text x="99.2157%" y="1231.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="98.9671%" y="1205" width="0.0149%" height="15" fill="rgb(234,166,26)" fg:x="66594" fg:w="10"/><text x="99.2171%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (43 samples, 0.06%)</title><rect x="99.0964%" y="1317" width="0.0639%" height="15" fill="rgb(244,125,51)" fg:x="66681" fg:w="43"/><text x="99.3464%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (97 samples, 0.14%)</title><rect x="99.0177%" y="1333" width="0.1442%" height="15" fill="rgb(229,171,11)" fg:x="66628" fg:w="97"/><text x="99.2677%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Add (136 samples, 0.20%)</title><rect x="98.9998%" y="1349" width="0.2021%" height="15" fill="rgb(224,38,45)" fg:x="66616" fg:w="136"/><text x="99.2498%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7 samples, 0.01%)</title><rect x="99.1915%" y="1333" width="0.0104%" height="15" fill="rgb(237,27,7)" fg:x="66745" fg:w="7"/><text x="99.4415%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (7 samples, 0.01%)</title><rect x="99.1915%" y="1317" width="0.0104%" height="15" fill="rgb(216,52,7)" fg:x="66745" fg:w="7"/><text x="99.4415%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (19 samples, 0.03%)</title><rect x="99.2228%" y="1317" width="0.0282%" height="15" fill="rgb(243,11,11)" fg:x="66766" fg:w="19"/><text x="99.4728%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (7 samples, 0.01%)</title><rect x="99.2406%" y="1301" width="0.0104%" height="15" fill="rgb(253,167,20)" fg:x="66778" fg:w="7"/><text x="99.4906%" y="1311.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (27 samples, 0.04%)</title><rect x="99.2213%" y="1333" width="0.0401%" height="15" fill="rgb(215,207,5)" fg:x="66765" fg:w="27"/><text x="99.4713%" y="1343.50"></text></g><g><title>leveldb::Hash (7 samples, 0.01%)</title><rect x="99.2510%" y="1317" width="0.0104%" height="15" fill="rgb(252,127,31)" fg:x="66785" fg:w="7"/><text x="99.5010%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (29 samples, 0.04%)</title><rect x="99.2213%" y="1349" width="0.0431%" height="15" fill="rgb(209,106,27)" fg:x="66765" fg:w="29"/><text x="99.4713%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.01%)</title><rect x="99.2644%" y="1349" width="0.0119%" height="15" fill="rgb(214,220,18)" fg:x="66794" fg:w="8"/><text x="99.5144%" y="1359.50"></text></g><g><title>leveldb::PutVarint32 (12 samples, 0.02%)</title><rect x="99.2867%" y="1349" width="0.0178%" height="15" fill="rgb(237,89,12)" fg:x="66809" fg:w="12"/><text x="99.5367%" y="1359.50"></text></g><g><title>[[ext4]] (8 samples, 0.01%)</title><rect x="99.3253%" y="1141" width="0.0119%" height="15" fill="rgb(209,167,36)" fg:x="66835" fg:w="8"/><text x="99.5753%" y="1151.50"></text></g><g><title>[[ext4]] (12 samples, 0.02%)</title><rect x="99.3253%" y="1157" width="0.0178%" height="15" fill="rgb(243,45,22)" fg:x="66835" fg:w="12"/><text x="99.5753%" y="1167.50"></text></g><g><title>[[ext4]] (29 samples, 0.04%)</title><rect x="99.3223%" y="1173" width="0.0431%" height="15" fill="rgb(239,2,46)" fg:x="66833" fg:w="29"/><text x="99.5723%" y="1183.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="99.3431%" y="1157" width="0.0223%" height="15" fill="rgb(241,101,0)" fg:x="66847" fg:w="15"/><text x="99.5931%" y="1167.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="99.3431%" y="1141" width="0.0223%" height="15" fill="rgb(244,34,31)" fg:x="66847" fg:w="15"/><text x="99.5931%" y="1151.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="99.3491%" y="1125" width="0.0163%" height="15" fill="rgb(248,23,22)" fg:x="66851" fg:w="11"/><text x="99.5991%" y="1135.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="99.3520%" y="1109" width="0.0134%" height="15" fill="rgb(218,27,48)" fg:x="66853" fg:w="9"/><text x="99.6020%" y="1119.50"></text></g><g><title>[[ext4]] (39 samples, 0.06%)</title><rect x="99.3164%" y="1205" width="0.0580%" height="15" fill="rgb(232,78,1)" fg:x="66829" fg:w="39"/><text x="99.5664%" y="1215.50"></text></g><g><title>[unknown] (38 samples, 0.06%)</title><rect x="99.3179%" y="1189" width="0.0565%" height="15" fill="rgb(233,169,12)" fg:x="66830" fg:w="38"/><text x="99.5679%" y="1199.50"></text></g><g><title>Flush (48 samples, 0.07%)</title><rect x="99.3075%" y="1333" width="0.0713%" height="15" fill="rgb(225,222,54)" fg:x="66823" fg:w="48"/><text x="99.5575%" y="1343.50"></text></g><g><title>FlushBuffer (48 samples, 0.07%)</title><rect x="99.3075%" y="1317" width="0.0713%" height="15" fill="rgb(245,126,29)" fg:x="66823" fg:w="48"/><text x="99.5575%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (48 samples, 0.07%)</title><rect x="99.3075%" y="1301" width="0.0713%" height="15" fill="rgb(241,63,48)" fg:x="66823" fg:w="48"/><text x="99.5575%" y="1311.50"></text></g><g><title>__GI___libc_write (48 samples, 0.07%)</title><rect x="99.3075%" y="1285" width="0.0713%" height="15" fill="rgb(235,126,38)" fg:x="66823" fg:w="48"/><text x="99.5575%" y="1295.50"></text></g><g><title>[unknown] (48 samples, 0.07%)</title><rect x="99.3075%" y="1269" width="0.0713%" height="15" fill="rgb(232,96,49)" fg:x="66823" fg:w="48"/><text x="99.5575%" y="1279.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="99.3104%" y="1253" width="0.0684%" height="15" fill="rgb(211,146,40)" fg:x="66825" fg:w="46"/><text x="99.5604%" y="1263.50"></text></g><g><title>[unknown] (46 samples, 0.07%)</title><rect x="99.3104%" y="1237" width="0.0684%" height="15" fill="rgb(247,93,44)" fg:x="66825" fg:w="46"/><text x="99.5604%" y="1247.50"></text></g><g><title>[unknown] (44 samples, 0.07%)</title><rect x="99.3134%" y="1221" width="0.0654%" height="15" fill="rgb(251,41,49)" fg:x="66827" fg:w="44"/><text x="99.5634%" y="1231.50"></text></g><g><title>leveldb::TableBuilder::Flush (52 samples, 0.08%)</title><rect x="99.3075%" y="1349" width="0.0773%" height="15" fill="rgb(218,155,12)" fg:x="66823" fg:w="52"/><text x="99.5575%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (267 samples, 0.40%)</title><rect x="98.9939%" y="1365" width="0.3968%" height="15" fill="rgb(221,161,30)" fg:x="66612" fg:w="267"/><text x="99.2439%" y="1375.50"></text></g><g><title>__clone (3,193 samples, 4.75%)</title><rect x="94.6499%" y="1509" width="4.7452%" height="15" fill="rgb(221,179,11)" fg:x="63689" fg:w="3193"/><text x="94.8999%" y="1519.50">__clone</text></g><g><title>start_thread (3,193 samples, 4.75%)</title><rect x="94.6499%" y="1493" width="4.7452%" height="15" fill="rgb(224,170,48)" fg:x="63689" fg:w="3193"/><text x="94.8999%" y="1503.50">start_..</text></g><g><title>execute_native_thread_routine (3,184 samples, 4.73%)</title><rect x="94.6633%" y="1477" width="4.7318%" height="15" fill="rgb(223,117,5)" fg:x="63698" fg:w="3184"/><text x="94.9133%" y="1487.50">execut..</text></g><g><title>BackgroundThreadEntryPoint (3,184 samples, 4.73%)</title><rect x="94.6633%" y="1461" width="4.7318%" height="15" fill="rgb(209,52,20)" fg:x="63698" fg:w="3184"/><text x="94.9133%" y="1471.50">Backgr..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (3,184 samples, 4.73%)</title><rect x="94.6633%" y="1445" width="4.7318%" height="15" fill="rgb(209,19,41)" fg:x="63698" fg:w="3184"/><text x="94.9133%" y="1455.50">leveld..</text></g><g><title>leveldb::DBImpl::BackgroundCall (3,184 samples, 4.73%)</title><rect x="94.6633%" y="1429" width="4.7318%" height="15" fill="rgb(210,177,12)" fg:x="63698" fg:w="3184"/><text x="94.9133%" y="1439.50">leveld..</text></g><g><title>leveldb::DBImpl::CompactMemTable (302 samples, 0.45%)</title><rect x="98.9463%" y="1413" width="0.4488%" height="15" fill="rgb(211,159,37)" fg:x="66580" fg:w="302"/><text x="99.1963%" y="1423.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (289 samples, 0.43%)</title><rect x="98.9657%" y="1397" width="0.4295%" height="15" fill="rgb(209,20,2)" fg:x="66593" fg:w="289"/><text x="99.2157%" y="1407.50"></text></g><g><title>leveldb::BuildTable (289 samples, 0.43%)</title><rect x="98.9657%" y="1381" width="0.4295%" height="15" fill="rgb(244,3,46)" fg:x="66593" fg:w="289"/><text x="99.2157%" y="1391.50"></text></g><g><title>__libc_start_call_main (7 samples, 0.01%)</title><rect x="99.3951%" y="1509" width="0.0104%" height="15" fill="rgb(220,94,38)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1519.50"></text></g><g><title>main (7 samples, 0.01%)</title><rect x="99.3951%" y="1493" width="0.0104%" height="15" fill="rgb(253,14,31)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1503.50"></text></g><g><title>main (7 samples, 0.01%)</title><rect x="99.3951%" y="1477" width="0.0104%" height="15" fill="rgb(234,176,13)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1487.50"></text></g><g><title>AppInitMain (7 samples, 0.01%)</title><rect x="99.3951%" y="1461" width="0.0104%" height="15" fill="rgb(218,62,25)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1471.50"></text></g><g><title>InitAndLoadChainstate (7 samples, 0.01%)</title><rect x="99.3951%" y="1445" width="0.0104%" height="15" fill="rgb(216,124,40)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1455.50"></text></g><g><title>operator (7 samples, 0.01%)</title><rect x="99.3951%" y="1429" width="0.0104%" height="15" fill="rgb(228,170,12)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1439.50"></text></g><g><title>InitAndLoadChainstate (7 samples, 0.01%)</title><rect x="99.3951%" y="1413" width="0.0104%" height="15" fill="rgb(231,226,5)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1423.50"></text></g><g><title>node::LoadChainstate (7 samples, 0.01%)</title><rect x="99.3951%" y="1397" width="0.0104%" height="15" fill="rgb(237,122,22)" fg:x="66882" fg:w="7"/><text x="99.6451%" y="1407.50"></text></g><g><title>AppInit (11 samples, 0.02%)</title><rect x="99.4204%" y="1445" width="0.0163%" height="15" fill="rgb(209,185,25)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1455.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (11 samples, 0.02%)</title><rect x="99.4204%" y="1429" width="0.0163%" height="15" fill="rgb(228,200,32)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1439.50"></text></g><g><title>kernel::Context::Context (11 samples, 0.02%)</title><rect x="99.4204%" y="1413" width="0.0163%" height="15" fill="rgb(217,140,10)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1423.50"></text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 0.02%)</title><rect x="99.4204%" y="1397" width="0.0163%" height="15" fill="rgb(253,17,24)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1407.50"></text></g><g><title>kernel::Context::Context (11 samples, 0.02%)</title><rect x="99.4204%" y="1381" width="0.0163%" height="15" fill="rgb(212,61,6)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1391.50"></text></g><g><title>__pthread_once_slow (11 samples, 0.02%)</title><rect x="99.4204%" y="1365" width="0.0163%" height="15" fill="rgb(205,14,25)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1375.50"></text></g><g><title>_FUN (11 samples, 0.02%)</title><rect x="99.4204%" y="1349" width="0.0163%" height="15" fill="rgb(232,69,41)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1359.50"></text></g><g><title>operator (11 samples, 0.02%)</title><rect x="99.4204%" y="1333" width="0.0163%" height="15" fill="rgb(241,106,47)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1343.50"></text></g><g><title>operator (11 samples, 0.02%)</title><rect x="99.4204%" y="1317" width="0.0163%" height="15" fill="rgb(210,213,53)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1327.50"></text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 0.02%)</title><rect x="99.4204%" y="1301" width="0.0163%" height="15" fill="rgb(253,175,27)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1311.50"></text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 0.02%)</title><rect x="99.4204%" y="1285" width="0.0163%" height="15" fill="rgb(211,171,24)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1295.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (11 samples, 0.02%)</title><rect x="99.4204%" y="1269" width="0.0163%" height="15" fill="rgb(229,80,7)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1279.50"></text></g><g><title>RandomInit (11 samples, 0.02%)</title><rect x="99.4204%" y="1253" width="0.0163%" height="15" fill="rgb(212,46,39)" fg:x="66899" fg:w="11"/><text x="99.6704%" y="1263.50"></text></g><g><title>CSHA512::Finalize (10 samples, 0.01%)</title><rect x="99.4219%" y="1237" width="0.0149%" height="15" fill="rgb(240,80,45)" fg:x="66900" fg:w="10"/><text x="99.6719%" y="1247.50"></text></g><g><title>CSHA512::Write (9 samples, 0.01%)</title><rect x="99.4234%" y="1221" width="0.0134%" height="15" fill="rgb(253,177,40)" fg:x="66901" fg:w="9"/><text x="99.6734%" y="1231.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.01%)</title><rect x="99.4516%" y="1317" width="0.0104%" height="15" fill="rgb(249,200,15)" fg:x="66920" fg:w="7"/><text x="99.7016%" y="1327.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (8 samples, 0.01%)</title><rect x="99.4858%" y="1221" width="0.0119%" height="15" fill="rgb(217,78,26)" fg:x="66943" fg:w="8"/><text x="99.7358%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (9 samples, 0.01%)</title><rect x="99.4858%" y="1237" width="0.0134%" height="15" fill="rgb(254,151,32)" fg:x="66943" fg:w="9"/><text x="99.7358%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (27 samples, 0.04%)</title><rect x="99.4992%" y="1237" width="0.0401%" height="15" fill="rgb(226,165,27)" fg:x="66952" fg:w="27"/><text x="99.7492%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (43 samples, 0.06%)</title><rect x="99.4769%" y="1253" width="0.0639%" height="15" fill="rgb(250,206,4)" fg:x="66937" fg:w="43"/><text x="99.7269%" y="1263.50"></text></g><g><title>GetBlockProof (68 samples, 0.10%)</title><rect x="99.4769%" y="1285" width="0.1011%" height="15" fill="rgb(231,229,27)" fg:x="66937" fg:w="68"/><text x="99.7269%" y="1295.50"></text></g><g><title>operator/ (68 samples, 0.10%)</title><rect x="99.4769%" y="1269" width="0.1011%" height="15" fill="rgb(239,217,8)" fg:x="66937" fg:w="68"/><text x="99.7269%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (24 samples, 0.04%)</title><rect x="99.5423%" y="1253" width="0.0357%" height="15" fill="rgb(225,204,27)" fg:x="66981" fg:w="24"/><text x="99.7923%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (10 samples, 0.01%)</title><rect x="99.5794%" y="1285" width="0.0149%" height="15" fill="rgb(230,56,32)" fg:x="67006" fg:w="10"/><text x="99.8294%" y="1295.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (7 samples, 0.01%)</title><rect x="99.6181%" y="1269" width="0.0104%" height="15" fill="rgb(222,56,27)" fg:x="67032" fg:w="7"/><text x="99.8681%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (8 samples, 0.01%)</title><rect x="99.6344%" y="1205" width="0.0119%" height="15" fill="rgb(253,108,27)" fg:x="67043" fg:w="8"/><text x="99.8844%" y="1215.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (45 samples, 0.07%)</title><rect x="99.5958%" y="1285" width="0.0669%" height="15" fill="rgb(212,87,36)" fg:x="67017" fg:w="45"/><text x="99.8458%" y="1295.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (19 samples, 0.03%)</title><rect x="99.6344%" y="1269" width="0.0282%" height="15" fill="rgb(247,82,36)" fg:x="67043" fg:w="19"/><text x="99.8844%" y="1279.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (19 samples, 0.03%)</title><rect x="99.6344%" y="1253" width="0.0282%" height="15" fill="rgb(222,143,9)" fg:x="67043" fg:w="19"/><text x="99.8844%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (19 samples, 0.03%)</title><rect x="99.6344%" y="1237" width="0.0282%" height="15" fill="rgb(238,162,48)" fg:x="67043" fg:w="19"/><text x="99.8844%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (19 samples, 0.03%)</title><rect x="99.6344%" y="1221" width="0.0282%" height="15" fill="rgb(221,59,43)" fg:x="67043" fg:w="19"/><text x="99.8844%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (11 samples, 0.02%)</title><rect x="99.6463%" y="1205" width="0.0163%" height="15" fill="rgb(205,166,41)" fg:x="67051" fg:w="11"/><text x="99.8963%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (11 samples, 0.02%)</title><rect x="99.6463%" y="1189" width="0.0163%" height="15" fill="rgb(241,186,40)" fg:x="67051" fg:w="11"/><text x="99.8963%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (11 samples, 0.02%)</title><rect x="99.6463%" y="1173" width="0.0163%" height="15" fill="rgb(216,119,35)" fg:x="67051" fg:w="11"/><text x="99.8963%" y="1183.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (148 samples, 0.22%)</title><rect x="99.4739%" y="1301" width="0.2199%" height="15" fill="rgb(208,68,38)" fg:x="66935" fg:w="148"/><text x="99.7239%" y="1311.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (13 samples, 0.02%)</title><rect x="99.6745%" y="1285" width="0.0193%" height="15" fill="rgb(217,113,1)" fg:x="67070" fg:w="13"/><text x="99.9245%" y="1295.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (13 samples, 0.02%)</title><rect x="99.6745%" y="1269" width="0.0193%" height="15" fill="rgb(242,153,3)" fg:x="67070" fg:w="13"/><text x="99.9245%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (8 samples, 0.01%)</title><rect x="99.6820%" y="1253" width="0.0119%" height="15" fill="rgb(229,76,35)" fg:x="67075" fg:w="8"/><text x="99.9320%" y="1263.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (160 samples, 0.24%)</title><rect x="99.4620%" y="1317" width="0.2378%" height="15" fill="rgb(229,125,34)" fg:x="66927" fg:w="160"/><text x="99.7120%" y="1327.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (185 samples, 0.27%)</title><rect x="99.4486%" y="1333" width="0.2749%" height="15" fill="rgb(238,179,36)" fg:x="66918" fg:w="185"/><text x="99.6986%" y="1343.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (15 samples, 0.02%)</title><rect x="99.7013%" y="1317" width="0.0223%" height="15" fill="rgb(244,183,19)" fg:x="67088" fg:w="15"/><text x="99.9513%" y="1327.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (15 samples, 0.02%)</title><rect x="99.7013%" y="1301" width="0.0223%" height="15" fill="rgb(216,85,49)" fg:x="67088" fg:w="15"/><text x="99.9513%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (10 samples, 0.01%)</title><rect x="99.7087%" y="1285" width="0.0149%" height="15" fill="rgb(208,161,47)" fg:x="67093" fg:w="10"/><text x="99.9587%" y="1295.50"></text></g><g><title>operator (199 samples, 0.30%)</title><rect x="99.4368%" y="1397" width="0.2957%" height="15" fill="rgb(233,210,18)" fg:x="66910" fg:w="199"/><text x="99.6868%" y="1407.50"></text></g><g><title>InitAndLoadChainstate (199 samples, 0.30%)</title><rect x="99.4368%" y="1381" width="0.2957%" height="15" fill="rgb(205,104,42)" fg:x="66910" fg:w="199"/><text x="99.6868%" y="1391.50"></text></g><g><title>node::LoadChainstate (199 samples, 0.30%)</title><rect x="99.4368%" y="1365" width="0.2957%" height="15" fill="rgb(248,90,43)" fg:x="66910" fg:w="199"/><text x="99.6868%" y="1375.50"></text></g><g><title>node::CompleteChainstateInitialization (198 samples, 0.29%)</title><rect x="99.4382%" y="1349" width="0.2943%" height="15" fill="rgb(206,198,11)" fg:x="66911" fg:w="198"/><text x="99.6882%" y="1359.50"></text></g><g><title>_start (211 samples, 0.31%)</title><rect x="99.4204%" y="1509" width="0.3136%" height="15" fill="rgb(239,165,27)" fg:x="66899" fg:w="211"/><text x="99.6704%" y="1519.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (211 samples, 0.31%)</title><rect x="99.4204%" y="1493" width="0.3136%" height="15" fill="rgb(246,44,32)" fg:x="66899" fg:w="211"/><text x="99.6704%" y="1503.50"></text></g><g><title>__libc_start_call_main (211 samples, 0.31%)</title><rect x="99.4204%" y="1477" width="0.3136%" height="15" fill="rgb(252,65,42)" fg:x="66899" fg:w="211"/><text x="99.6704%" y="1487.50"></text></g><g><title>main (211 samples, 0.31%)</title><rect x="99.4204%" y="1461" width="0.3136%" height="15" fill="rgb(246,197,18)" fg:x="66899" fg:w="211"/><text x="99.6704%" y="1471.50"></text></g><g><title>main (200 samples, 0.30%)</title><rect x="99.4368%" y="1445" width="0.2972%" height="15" fill="rgb(216,192,4)" fg:x="66910" fg:w="200"/><text x="99.6868%" y="1455.50"></text></g><g><title>AppInitMain (200 samples, 0.30%)</title><rect x="99.4368%" y="1429" width="0.2972%" height="15" fill="rgb(208,117,10)" fg:x="66910" fg:w="200"/><text x="99.6868%" y="1439.50"></text></g><g><title>InitAndLoadChainstate (200 samples, 0.30%)</title><rect x="99.4368%" y="1413" width="0.2972%" height="15" fill="rgb(240,61,47)" fg:x="66910" fg:w="200"/><text x="99.6868%" y="1423.50"></text></g><g><title>crc32c::ExtendSse42 (13 samples, 0.02%)</title><rect x="99.7370%" y="1509" width="0.0193%" height="15" fill="rgb(228,178,21)" fg:x="67112" fg:w="13"/><text x="99.9870%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.01%)</title><rect x="99.7592%" y="1509" width="0.0104%" height="15" fill="rgb(219,96,54)" fg:x="67127" fg:w="7"/><text x="100.0092%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (7 samples, 0.01%)</title><rect x="99.7592%" y="1493" width="0.0104%" height="15" fill="rgb(250,177,24)" fg:x="67127" fg:w="7"/><text x="100.0092%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (12 samples, 0.02%)</title><rect x="99.7741%" y="1477" width="0.0178%" height="15" fill="rgb(242,154,46)" fg:x="67137" fg:w="12"/><text x="100.0241%" y="1487.50"></text></g><g><title>leveldb::operator== (26 samples, 0.04%)</title><rect x="99.7726%" y="1493" width="0.0386%" height="15" fill="rgb(226,176,29)" fg:x="67136" fg:w="26"/><text x="100.0226%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (13 samples, 0.02%)</title><rect x="99.7919%" y="1477" width="0.0193%" height="15" fill="rgb(226,29,2)" fg:x="67149" fg:w="13"/><text x="100.0419%" y="1487.50"></text></g><g><title>leveldb::BlockBuilder::Add (34 samples, 0.05%)</title><rect x="99.7726%" y="1509" width="0.0505%" height="15" fill="rgb(237,104,14)" fg:x="67136" fg:w="34"/><text x="100.0226%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (8 samples, 0.01%)</title><rect x="99.8113%" y="1493" width="0.0119%" height="15" fill="rgb(245,207,31)" fg:x="67162" fg:w="8"/><text x="100.0613%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (8 samples, 0.01%)</title><rect x="99.8113%" y="1477" width="0.0119%" height="15" fill="rgb(229,211,45)" fg:x="67162" fg:w="8"/><text x="100.0613%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (8 samples, 0.01%)</title><rect x="99.8113%" y="1461" width="0.0119%" height="15" fill="rgb(229,113,15)" fg:x="67162" fg:w="8"/><text x="100.0613%" y="1471.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (8 samples, 0.01%)</title><rect x="99.8113%" y="1445" width="0.0119%" height="15" fill="rgb(237,147,15)" fg:x="67162" fg:w="8"/><text x="100.0613%" y="1455.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (8 samples, 0.01%)</title><rect x="99.8113%" y="1429" width="0.0119%" height="15" fill="rgb(244,120,12)" fg:x="67162" fg:w="8"/><text x="100.0613%" y="1439.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (9 samples, 0.01%)</title><rect x="99.8246%" y="1509" width="0.0134%" height="15" fill="rgb(205,120,12)" fg:x="67171" fg:w="9"/><text x="100.0746%" y="1519.50"></text></g><g><title>leveldb::TableBuilder::Add (12 samples, 0.02%)</title><rect x="99.8603%" y="1253" width="0.0178%" height="15" fill="rgb(231,26,45)" fg:x="67195" fg:w="12"/><text x="100.1103%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Flush (7 samples, 0.01%)</title><rect x="99.8677%" y="1237" width="0.0104%" height="15" fill="rgb(246,98,1)" fg:x="67200" fg:w="7"/><text x="100.1177%" y="1247.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (18 samples, 0.03%)</title><rect x="99.8529%" y="1285" width="0.0268%" height="15" fill="rgb(207,68,45)" fg:x="67190" fg:w="18"/><text x="100.1029%" y="1295.50"></text></g><g><title>leveldb::BuildTable (18 samples, 0.03%)</title><rect x="99.8529%" y="1269" width="0.0268%" height="15" fill="rgb(231,27,38)" fg:x="67190" fg:w="18"/><text x="100.1029%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (14 samples, 0.02%)</title><rect x="99.9123%" y="1157" width="0.0208%" height="15" fill="rgb(214,223,3)" fg:x="67230" fg:w="14"/><text x="100.1623%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (27 samples, 0.04%)</title><rect x="99.9019%" y="1173" width="0.0401%" height="15" fill="rgb(228,195,46)" fg:x="67223" fg:w="27"/><text x="100.1519%" y="1183.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (43 samples, 0.06%)</title><rect x="99.8796%" y="1285" width="0.0639%" height="15" fill="rgb(231,100,42)" fg:x="67208" fg:w="43"/><text x="100.1296%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Iterate (43 samples, 0.06%)</title><rect x="99.8796%" y="1269" width="0.0639%" height="15" fill="rgb(236,53,4)" fg:x="67208" fg:w="43"/><text x="100.1296%" y="1279.50"></text></g><g><title>leveldb::WriteBatch::Iterate (39 samples, 0.06%)</title><rect x="99.8856%" y="1253" width="0.0580%" height="15" fill="rgb(230,152,12)" fg:x="67212" fg:w="39"/><text x="100.1356%" y="1263.50"></text></g><g><title>leveldb::MemTable::Add (39 samples, 0.06%)</title><rect x="99.8856%" y="1237" width="0.0580%" height="15" fill="rgb(226,101,19)" fg:x="67212" fg:w="39"/><text x="100.1356%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (34 samples, 0.05%)</title><rect x="99.8930%" y="1221" width="0.0505%" height="15" fill="rgb(250,149,32)" fg:x="67217" fg:w="34"/><text x="100.1430%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (28 samples, 0.04%)</title><rect x="99.9019%" y="1205" width="0.0416%" height="15" fill="rgb(232,178,12)" fg:x="67223" fg:w="28"/><text x="100.1519%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (28 samples, 0.04%)</title><rect x="99.9019%" y="1189" width="0.0416%" height="15" fill="rgb(246,151,17)" fg:x="67223" fg:w="28"/><text x="100.1519%" y="1199.50"></text></g><g><title>CompleteChainstateInitialization (73 samples, 0.11%)</title><rect x="99.8529%" y="1397" width="0.1085%" height="15" fill="rgb(252,17,51)" fg:x="67190" fg:w="73"/><text x="100.1029%" y="1407.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (73 samples, 0.11%)</title><rect x="99.8529%" y="1381" width="0.1085%" height="15" fill="rgb(250,207,23)" fg:x="67190" fg:w="73"/><text x="100.1029%" y="1391.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (73 samples, 0.11%)</title><rect x="99.8529%" y="1365" width="0.1085%" height="15" fill="rgb(205,27,5)" fg:x="67190" fg:w="73"/><text x="100.1029%" y="1375.50"></text></g><g><title>CDBWrapper::CDBWrapper (73 samples, 0.11%)</title><rect x="99.8529%" y="1349" width="0.1085%" height="15" fill="rgb(224,32,19)" fg:x="67190" fg:w="73"/><text x="100.1029%" y="1359.50"></text></g><g><title>leveldb::DB::Open (73 samples, 0.11%)</title><rect x="99.8529%" y="1333" width="0.1085%" height="15" fill="rgb(247,214,40)" fg:x="67190" fg:w="73"/><text x="100.1029%" y="1343.50"></text></g><g><title>leveldb::DBImpl::Recover (73 samples, 0.11%)</title><rect x="99.8529%" y="1317" width="0.1085%" height="15" fill="rgb(239,199,17)" fg:x="67190" fg:w="73"/><text x="100.1029%" y="1327.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (73 samples, 0.11%)</title><rect x="99.8529%" y="1301" width="0.1085%" height="15" fill="rgb(251,159,9)" fg:x="67190" fg:w="73"/><text x="100.1029%" y="1311.50"></text></g><g><title>leveldb::log::Reader::ReadRecord (9 samples, 0.01%)</title><rect x="99.9480%" y="1285" width="0.0134%" height="15" fill="rgb(225,78,32)" fg:x="67254" fg:w="9"/><text x="100.1980%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (9 samples, 0.01%)</title><rect x="99.9480%" y="1269" width="0.0134%" height="15" fill="rgb(206,97,47)" fg:x="67254" fg:w="9"/><text x="100.1980%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (9 samples, 0.01%)</title><rect x="99.9480%" y="1253" width="0.0134%" height="15" fill="rgb(227,107,4)" fg:x="67254" fg:w="9"/><text x="100.1980%" y="1263.50"></text></g><g><title>main (80 samples, 0.12%)</title><rect x="99.8529%" y="1509" width="0.1189%" height="15" fill="rgb(241,146,50)" fg:x="67190" fg:w="80"/><text x="100.1029%" y="1519.50"></text></g><g><title>main (80 samples, 0.12%)</title><rect x="99.8529%" y="1493" width="0.1189%" height="15" fill="rgb(232,92,30)" fg:x="67190" fg:w="80"/><text x="100.1029%" y="1503.50"></text></g><g><title>AppInitMain (80 samples, 0.12%)</title><rect x="99.8529%" y="1477" width="0.1189%" height="15" fill="rgb(222,0,40)" fg:x="67190" fg:w="80"/><text x="100.1029%" y="1487.50"></text></g><g><title>InitAndLoadChainstate (80 samples, 0.12%)</title><rect x="99.8529%" y="1461" width="0.1189%" height="15" fill="rgb(219,54,33)" fg:x="67190" fg:w="80"/><text x="100.1029%" y="1471.50"></text></g><g><title>operator (80 samples, 0.12%)</title><rect x="99.8529%" y="1445" width="0.1189%" height="15" fill="rgb(226,209,28)" fg:x="67190" fg:w="80"/><text x="100.1029%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (80 samples, 0.12%)</title><rect x="99.8529%" y="1429" width="0.1189%" height="15" fill="rgb(254,205,35)" fg:x="67190" fg:w="80"/><text x="100.1029%" y="1439.50"></text></g><g><title>node::LoadChainstate (80 samples, 0.12%)</title><rect x="99.8529%" y="1413" width="0.1189%" height="15" fill="rgb(230,159,3)" fg:x="67190" fg:w="80"/><text x="100.1029%" y="1423.50"></text></g><g><title>node::CompleteChainstateInitialization (7 samples, 0.01%)</title><rect x="99.9614%" y="1397" width="0.0104%" height="15" fill="rgb(232,190,24)" fg:x="67263" fg:w="7"/><text x="100.2114%" y="1407.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (7 samples, 0.01%)</title><rect x="99.9614%" y="1381" width="0.0104%" height="15" fill="rgb(217,227,44)" fg:x="67263" fg:w="7"/><text x="100.2114%" y="1391.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (7 samples, 0.01%)</title><rect x="99.9614%" y="1365" width="0.0104%" height="15" fill="rgb(236,211,1)" fg:x="67263" fg:w="7"/><text x="100.2114%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (7 samples, 0.01%)</title><rect x="99.9614%" y="1349" width="0.0104%" height="15" fill="rgb(250,127,46)" fg:x="67263" fg:w="7"/><text x="100.2114%" y="1359.50"></text></g><g><title>bitcoind-head (4,272 samples, 6.35%)</title><rect x="93.6334%" y="1525" width="6.3487%" height="15" fill="rgb(229,213,6)" fg:x="63005" fg:w="4272"/><text x="93.8834%" y="1535.50">bitcoind..</text></g><g><title>all (67,289 samples, 100%)</title><rect x="0.0000%" y="1541" width="100.0000%" height="15" fill="rgb(237,15,36)" fg:x="0" fg:w="67289"/><text x="0.2500%" y="1551.50"></text></g><g><title>taskset (8 samples, 0.01%)</title><rect x="99.9881%" y="1525" width="0.0119%" height="15" fill="rgb(213,131,41)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1535.50"></text></g><g><title>_start (8 samples, 0.01%)</title><rect x="99.9881%" y="1509" width="0.0119%" height="15" fill="rgb(225,82,44)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1519.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (8 samples, 0.01%)</title><rect x="99.9881%" y="1493" width="0.0119%" height="15" fill="rgb(249,42,11)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1503.50"></text></g><g><title>__libc_start_call_main (8 samples, 0.01%)</title><rect x="99.9881%" y="1477" width="0.0119%" height="15" fill="rgb(253,11,29)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1487.50"></text></g><g><title>main (8 samples, 0.01%)</title><rect x="99.9881%" y="1461" width="0.0119%" height="15" fill="rgb(206,8,54)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1471.50"></text></g><g><title>do_taskset (8 samples, 0.01%)</title><rect x="99.9881%" y="1445" width="0.0119%" height="15" fill="rgb(222,186,2)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1455.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (8 samples, 0.01%)</title><rect x="99.9881%" y="1429" width="0.0119%" height="15" fill="rgb(221,206,53)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1439.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1413" width="0.0119%" height="15" fill="rgb(230,150,21)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1423.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1397" width="0.0119%" height="15" fill="rgb(253,202,10)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1407.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1381" width="0.0119%" height="15" fill="rgb(238,109,40)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1391.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1365" width="0.0119%" height="15" fill="rgb(247,120,22)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1375.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1349" width="0.0119%" height="15" fill="rgb(207,43,30)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1333" width="0.0119%" height="15" fill="rgb(213,211,24)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1317" width="0.0119%" height="15" fill="rgb(239,73,39)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1327.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1301" width="0.0119%" height="15" fill="rgb(245,182,19)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1311.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9881%" y="1285" width="0.0119%" height="15" fill="rgb(247,143,26)" fg:x="67281" fg:w="8"/><text x="100.2381%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="99.9896%" y="1269" width="0.0104%" height="15" fill="rgb(228,191,23)" fg:x="67282" fg:w="7"/><text x="100.2396%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="99.9896%" y="1253" width="0.0104%" height="15" fill="rgb(253,165,31)" fg:x="67282" fg:w="7"/><text x="100.2396%" y="1263.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="99.9896%" y="1237" width="0.0104%" height="15" fill="rgb(234,138,20)" fg:x="67282" fg:w="7"/><text x="100.2396%" y="1247.50"></text></g></svg></svg>