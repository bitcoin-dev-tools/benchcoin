<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="291"><g><title>b-addcon (4 samples, 1.37%)</title><rect x="0.0000%" y="725" width="1.3746%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="735.50"></text></g><g><title>__clone (4 samples, 1.37%)</title><rect x="0.0000%" y="709" width="1.3746%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="719.50"></text></g><g><title>start_thread (4 samples, 1.37%)</title><rect x="0.0000%" y="693" width="1.3746%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="703.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.37%)</title><rect x="0.0000%" y="677" width="1.3746%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="687.50"></text></g><g><title>_M_run (4 samples, 1.37%)</title><rect x="0.0000%" y="661" width="1.3746%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="671.50"></text></g><g><title>operator (4 samples, 1.37%)</title><rect x="0.0000%" y="645" width="1.3746%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="655.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (4 samples, 1.37%)</title><rect x="0.0000%" y="629" width="1.3746%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="639.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (4 samples, 1.37%)</title><rect x="0.0000%" y="613" width="1.3746%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="623.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#3}&gt; &gt; &gt;::_M_run (4 samples, 1.37%)</title><rect x="0.0000%" y="597" width="1.3746%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="607.50"></text></g><g><title>util::TraceThread (4 samples, 1.37%)</title><rect x="0.0000%" y="581" width="1.3746%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="591.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (4 samples, 1.37%)</title><rect x="0.0000%" y="565" width="1.3746%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="575.50"></text></g><g><title>CConnman::ThreadOpenAddedConnections (4 samples, 1.37%)</title><rect x="0.0000%" y="549" width="1.3746%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="559.50"></text></g><g><title>CThreadInterrupt::sleep_for (4 samples, 1.37%)</title><rect x="0.0000%" y="533" width="1.3746%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 1.37%)</title><rect x="0.0000%" y="517" width="1.3746%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="527.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 1.37%)</title><rect x="0.0000%" y="501" width="1.3746%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="511.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 1.37%)</title><rect x="0.0000%" y="485" width="1.3746%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="495.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 1.37%)</title><rect x="0.0000%" y="469" width="1.3746%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="479.50"></text></g><g><title>std::__condvar::wait_until (4 samples, 1.37%)</title><rect x="0.0000%" y="453" width="1.3746%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="463.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (4 samples, 1.37%)</title><rect x="0.0000%" y="437" width="1.3746%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="447.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.37%)</title><rect x="0.0000%" y="421" width="1.3746%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="4"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="0.0000%" y="405" width="1.3746%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="415.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="0.0000%" y="389" width="1.3746%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="399.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="0.0000%" y="373" width="1.3746%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="383.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="0.0000%" y="357" width="1.3746%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="367.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="0.0000%" y="341" width="1.3746%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="4"/><text x="0.2500%" y="351.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="0.0000%" y="325" width="1.3746%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="4"/><text x="0.2500%" y="335.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="309" width="1.0309%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="3"/><text x="0.5936%" y="319.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="293" width="1.0309%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="3"/><text x="0.5936%" y="303.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="277" width="1.0309%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="3"/><text x="0.5936%" y="287.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="261" width="1.0309%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="3"/><text x="0.5936%" y="271.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="245" width="1.0309%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="3"/><text x="0.5936%" y="255.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="229" width="1.0309%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="3"/><text x="0.5936%" y="239.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="213" width="1.0309%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="3"/><text x="0.5936%" y="223.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="197" width="1.0309%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="3"/><text x="0.5936%" y="207.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="181" width="1.0309%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="3"/><text x="0.5936%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="0.3436%" y="165" width="1.0309%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="3"/><text x="0.5936%" y="175.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.34%)</title><rect x="1.3746%" y="453" width="0.3436%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="1.6246%" y="463.50"></text></g><g><title>secp256k1_fe_impl_mul (2 samples, 0.69%)</title><rect x="1.3746%" y="485" width="0.6873%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="2"/><text x="1.6246%" y="495.50"></text></g><g><title>secp256k1_fe_sqr_inner (2 samples, 0.69%)</title><rect x="1.3746%" y="469" width="0.6873%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="2"/><text x="1.6246%" y="479.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.34%)</title><rect x="1.7182%" y="453" width="0.3436%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="1.9682%" y="463.50"></text></g><g><title>secp256k1_gej_add_ge_var (3 samples, 1.03%)</title><rect x="1.3746%" y="501" width="1.0309%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="3"/><text x="1.6246%" y="511.50"></text></g><g><title>secp256k1_fe_impl_sqr (1 samples, 0.34%)</title><rect x="2.0619%" y="485" width="0.3436%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="2.3119%" y="495.50"></text></g><g><title>secp256k1_fe_mul_inner (1 samples, 0.34%)</title><rect x="2.0619%" y="469" width="0.3436%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="2.3119%" y="479.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.34%)</title><rect x="2.0619%" y="453" width="0.3436%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="1"/><text x="2.3119%" y="463.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (4 samples, 1.37%)</title><rect x="1.3746%" y="709" width="1.3746%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="4"/><text x="1.6246%" y="719.50"></text></g><g><title>CheckBlock (4 samples, 1.37%)</title><rect x="1.3746%" y="693" width="1.3746%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="4"/><text x="1.6246%" y="703.50"></text></g><g><title>CheckSignetBlockSolution (4 samples, 1.37%)</title><rect x="1.3746%" y="677" width="1.3746%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="4"/><text x="1.6246%" y="687.50"></text></g><g><title>VerifyScript (4 samples, 1.37%)</title><rect x="1.3746%" y="661" width="1.3746%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="4"/><text x="1.6246%" y="671.50"></text></g><g><title>EvalScript (4 samples, 1.37%)</title><rect x="1.3746%" y="645" width="1.3746%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="4"/><text x="1.6246%" y="655.50"></text></g><g><title>EvalScript (4 samples, 1.37%)</title><rect x="1.3746%" y="629" width="1.3746%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="4"/><text x="1.6246%" y="639.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::CheckECDSASignature (4 samples, 1.37%)</title><rect x="1.3746%" y="613" width="1.3746%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="4"/><text x="1.6246%" y="623.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::VerifyECDSASignature (4 samples, 1.37%)</title><rect x="1.3746%" y="597" width="1.3746%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="4"/><text x="1.6246%" y="607.50"></text></g><g><title>CPubKey::Verify (4 samples, 1.37%)</title><rect x="1.3746%" y="581" width="1.3746%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="4"/><text x="1.6246%" y="591.50"></text></g><g><title>secp256k1_ecdsa_verify (4 samples, 1.37%)</title><rect x="1.3746%" y="565" width="1.3746%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="4"/><text x="1.6246%" y="575.50"></text></g><g><title>secp256k1_ecdsa_sig_verify (4 samples, 1.37%)</title><rect x="1.3746%" y="549" width="1.3746%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="4"/><text x="1.6246%" y="559.50"></text></g><g><title>secp256k1_ecmult (4 samples, 1.37%)</title><rect x="1.3746%" y="533" width="1.3746%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="4"/><text x="1.6246%" y="543.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (4 samples, 1.37%)</title><rect x="1.3746%" y="517" width="1.3746%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="4"/><text x="1.6246%" y="527.50"></text></g><g><title>secp256k1_gej_double_var (1 samples, 0.34%)</title><rect x="2.4055%" y="501" width="0.3436%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="1"/><text x="2.6555%" y="511.50"></text></g><g><title>secp256k1_gej_double (1 samples, 0.34%)</title><rect x="2.4055%" y="485" width="0.3436%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="1"/><text x="2.6555%" y="495.50"></text></g><g><title>secp256k1_fe_impl_sqr (1 samples, 0.34%)</title><rect x="2.4055%" y="469" width="0.3436%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="1"/><text x="2.6555%" y="479.50"></text></g><g><title>secp256k1_fe_sqr_inner (1 samples, 0.34%)</title><rect x="2.4055%" y="453" width="0.3436%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="1"/><text x="2.6555%" y="463.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.34%)</title><rect x="2.4055%" y="437" width="0.3436%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="1"/><text x="2.6555%" y="447.50"></text></g><g><title>memory_cleanse (1 samples, 0.34%)</title><rect x="2.7491%" y="693" width="0.3436%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="1"/><text x="2.9991%" y="703.50"></text></g><g><title>[anon] (2 samples, 0.69%)</title><rect x="2.7491%" y="709" width="0.6873%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="2"/><text x="2.9991%" y="719.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.34%)</title><rect x="3.0928%" y="693" width="0.3436%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="3.3428%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="3.4364%" y="709" width="0.3436%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="1"/><text x="3.6864%" y="719.50"></text></g><g><title>std::__pad&lt;char, std::char_traits&lt;char&gt; &gt;::_S_pad (1 samples, 0.34%)</title><rect x="3.4364%" y="693" width="0.3436%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="1"/><text x="3.6864%" y="703.50"></text></g><g><title>CalculateClaimedHeadersWork (1 samples, 0.34%)</title><rect x="3.7801%" y="533" width="0.3436%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="4.0301%" y="543.50"></text></g><g><title>GetBlockProof (1 samples, 0.34%)</title><rect x="3.7801%" y="517" width="0.3436%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="4.0301%" y="527.50"></text></g><g><title>operator/ (1 samples, 0.34%)</title><rect x="3.7801%" y="501" width="0.3436%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="4.0301%" y="511.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.34%)</title><rect x="3.7801%" y="485" width="0.3436%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="4.0301%" y="495.50"></text></g><g><title>CalculateSequenceLocks (1 samples, 0.34%)</title><rect x="4.1237%" y="469" width="0.3436%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="1"/><text x="4.3737%" y="479.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.34%)</title><rect x="4.1237%" y="453" width="0.3436%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="4.3737%" y="463.50"></text></g><g><title>AddCoins (1 samples, 0.34%)</title><rect x="4.4674%" y="453" width="0.3436%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="1"/><text x="4.7174%" y="463.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.34%)</title><rect x="4.4674%" y="437" width="0.3436%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="4.7174%" y="447.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.34%)</title><rect x="4.4674%" y="421" width="0.3436%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="4.7174%" y="431.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.34%)</title><rect x="4.4674%" y="405" width="0.3436%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="4.7174%" y="415.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.34%)</title><rect x="4.4674%" y="389" width="0.3436%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="4.7174%" y="399.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.34%)</title><rect x="4.4674%" y="373" width="0.3436%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="1"/><text x="4.7174%" y="383.50"></text></g><g><title>CScript::IsUnspendable (1 samples, 0.34%)</title><rect x="4.4674%" y="357" width="0.3436%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="1"/><text x="4.7174%" y="367.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.34%)</title><rect x="4.4674%" y="341" width="0.3436%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="4.7174%" y="351.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.34%)</title><rect x="4.4674%" y="325" width="0.3436%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="4.7174%" y="335.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (1 samples, 0.34%)</title><rect x="4.8110%" y="453" width="0.3436%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="1"/><text x="5.0610%" y="463.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.34%)</title><rect x="4.8110%" y="437" width="0.3436%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="1"/><text x="5.0610%" y="447.50"></text></g><g><title>node::BlockManager::OpenUndoFile (1 samples, 0.34%)</title><rect x="4.8110%" y="421" width="0.3436%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="1"/><text x="5.0610%" y="431.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.34%)</title><rect x="4.8110%" y="405" width="0.3436%" height="15" fill="rgb(237,122,38)" fg:x="14" fg:w="1"/><text x="5.0610%" y="415.50"></text></g><g><title>std::filesystem::__cxx11::path::parent_path (1 samples, 0.34%)</title><rect x="4.8110%" y="389" width="0.3436%" height="15" fill="rgb(244,218,35)" fg:x="14" fg:w="1"/><text x="5.0610%" y="399.50"></text></g><g><title>std::filesystem::__cxx11::path::_M_split_cmpts (1 samples, 0.34%)</title><rect x="4.8110%" y="373" width="0.3436%" height="15" fill="rgb(240,68,47)" fg:x="14" fg:w="1"/><text x="5.0610%" y="383.50"></text></g><g><title>Chainstate::ConnectBlock (3 samples, 1.03%)</title><rect x="4.4674%" y="469" width="1.0309%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="3"/><text x="4.7174%" y="479.50"></text></g><g><title>void LogPrintFormatInternal&lt;int, double, double, double, double&gt; (1 samples, 0.34%)</title><rect x="5.1546%" y="453" width="0.3436%" height="15" fill="rgb(235,124,12)" fg:x="15" fg:w="1"/><text x="5.4046%" y="463.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.34%)</title><rect x="5.1546%" y="437" width="0.3436%" height="15" fill="rgb(224,169,11)" fg:x="15" fg:w="1"/><text x="5.4046%" y="447.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="5.1546%" y="421" width="0.3436%" height="15" fill="rgb(250,166,2)" fg:x="15" fg:w="1"/><text x="5.4046%" y="431.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="5.1546%" y="405" width="0.3436%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="1"/><text x="5.4046%" y="415.50"></text></g><g><title>_IO_fwrite (1 samples, 0.34%)</title><rect x="5.1546%" y="389" width="0.3436%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="1"/><text x="5.4046%" y="399.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="5.1546%" y="373" width="0.3436%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="1"/><text x="5.4046%" y="383.50"></text></g><g><title>new_do_write (1 samples, 0.34%)</title><rect x="5.1546%" y="357" width="0.3436%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="1"/><text x="5.4046%" y="367.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="5.1546%" y="341" width="0.3436%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="5.4046%" y="351.50"></text></g><g><title>__GI___libc_write (1 samples, 0.34%)</title><rect x="5.1546%" y="325" width="0.3436%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="5.4046%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="309" width="0.3436%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="5.4046%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="293" width="0.3436%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="5.4046%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="277" width="0.3436%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="5.4046%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="261" width="0.3436%" height="15" fill="rgb(242,17,10)" fg:x="15" fg:w="1"/><text x="5.4046%" y="271.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="5.1546%" y="245" width="0.3436%" height="15" fill="rgb(242,107,0)" fg:x="15" fg:w="1"/><text x="5.4046%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="229" width="0.3436%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="1"/><text x="5.4046%" y="239.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="5.1546%" y="213" width="0.3436%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="1"/><text x="5.4046%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="197" width="0.3436%" height="15" fill="rgb(215,21,27)" fg:x="15" fg:w="1"/><text x="5.4046%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="181" width="0.3436%" height="15" fill="rgb(232,23,21)" fg:x="15" fg:w="1"/><text x="5.4046%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="165" width="0.3436%" height="15" fill="rgb(244,5,23)" fg:x="15" fg:w="1"/><text x="5.4046%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="149" width="0.3436%" height="15" fill="rgb(226,81,46)" fg:x="15" fg:w="1"/><text x="5.4046%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.1546%" y="133" width="0.3436%" height="15" fill="rgb(247,70,30)" fg:x="15" fg:w="1"/><text x="5.4046%" y="143.50"></text></g><g><title>ValidationSignals::BlockChecked (1 samples, 0.34%)</title><rect x="5.4983%" y="469" width="0.3436%" height="15" fill="rgb(212,68,19)" fg:x="16" fg:w="1"/><text x="5.7483%" y="479.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [13], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.34%)</title><rect x="5.4983%" y="453" width="0.3436%" height="15" fill="rgb(240,187,13)" fg:x="16" fg:w="1"/><text x="5.7483%" y="463.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.34%)</title><rect x="5.4983%" y="437" width="0.3436%" height="15" fill="rgb(223,113,26)" fg:x="16" fg:w="1"/><text x="5.7483%" y="447.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="5.4983%" y="421" width="0.3436%" height="15" fill="rgb(206,192,2)" fg:x="16" fg:w="1"/><text x="5.7483%" y="431.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (1 samples, 0.34%)</title><rect x="5.4983%" y="405" width="0.3436%" height="15" fill="rgb(241,108,4)" fg:x="16" fg:w="1"/><text x="5.7483%" y="415.50"></text></g><g><title>Chainstate::ActivateBestChainStep (6 samples, 2.06%)</title><rect x="4.1237%" y="501" width="2.0619%" height="15" fill="rgb(247,173,49)" fg:x="12" fg:w="6"/><text x="4.3737%" y="511.50">C..</text></g><g><title>Chainstate::ConnectTip (6 samples, 2.06%)</title><rect x="4.1237%" y="485" width="2.0619%" height="15" fill="rgb(224,114,35)" fg:x="12" fg:w="6"/><text x="4.3737%" y="495.50">C..</text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (1 samples, 0.34%)</title><rect x="5.8419%" y="469" width="0.3436%" height="15" fill="rgb(245,159,27)" fg:x="17" fg:w="1"/><text x="6.0919%" y="479.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.34%)</title><rect x="5.8419%" y="453" width="0.3436%" height="15" fill="rgb(245,172,44)" fg:x="17" fg:w="1"/><text x="6.0919%" y="463.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="5.8419%" y="437" width="0.3436%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="1"/><text x="6.0919%" y="447.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="5.8419%" y="421" width="0.3436%" height="15" fill="rgb(205,117,38)" fg:x="17" fg:w="1"/><text x="6.0919%" y="431.50"></text></g><g><title>_IO_fwrite (1 samples, 0.34%)</title><rect x="5.8419%" y="405" width="0.3436%" height="15" fill="rgb(237,72,25)" fg:x="17" fg:w="1"/><text x="6.0919%" y="415.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="5.8419%" y="389" width="0.3436%" height="15" fill="rgb(244,70,9)" fg:x="17" fg:w="1"/><text x="6.0919%" y="399.50"></text></g><g><title>new_do_write (1 samples, 0.34%)</title><rect x="5.8419%" y="373" width="0.3436%" height="15" fill="rgb(217,125,39)" fg:x="17" fg:w="1"/><text x="6.0919%" y="383.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="5.8419%" y="357" width="0.3436%" height="15" fill="rgb(235,36,10)" fg:x="17" fg:w="1"/><text x="6.0919%" y="367.50"></text></g><g><title>__GI___libc_write (1 samples, 0.34%)</title><rect x="5.8419%" y="341" width="0.3436%" height="15" fill="rgb(251,123,47)" fg:x="17" fg:w="1"/><text x="6.0919%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.8419%" y="325" width="0.3436%" height="15" fill="rgb(221,13,13)" fg:x="17" fg:w="1"/><text x="6.0919%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.8419%" y="309" width="0.3436%" height="15" fill="rgb(238,131,9)" fg:x="17" fg:w="1"/><text x="6.0919%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.8419%" y="293" width="0.3436%" height="15" fill="rgb(211,50,8)" fg:x="17" fg:w="1"/><text x="6.0919%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.8419%" y="277" width="0.3436%" height="15" fill="rgb(245,182,24)" fg:x="17" fg:w="1"/><text x="6.0919%" y="287.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="5.8419%" y="261" width="0.3436%" height="15" fill="rgb(242,14,37)" fg:x="17" fg:w="1"/><text x="6.0919%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.8419%" y="245" width="0.3436%" height="15" fill="rgb(246,228,12)" fg:x="17" fg:w="1"/><text x="6.0919%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="5.8419%" y="229" width="0.3436%" height="15" fill="rgb(213,55,15)" fg:x="17" fg:w="1"/><text x="6.0919%" y="239.50"></text></g><g><title>Chainstate::ActivateBestChain (7 samples, 2.41%)</title><rect x="4.1237%" y="517" width="2.4055%" height="15" fill="rgb(209,9,3)" fg:x="12" fg:w="7"/><text x="4.3737%" y="527.50">Ch..</text></g><g><title>ValidationSignals::ActiveTipChange (1 samples, 0.34%)</title><rect x="6.1856%" y="501" width="0.3436%" height="15" fill="rgb(230,59,30)" fg:x="18" fg:w="1"/><text x="6.4356%" y="511.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [16], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; (1 samples, 0.34%)</title><rect x="6.1856%" y="485" width="0.3436%" height="15" fill="rgb(209,121,21)" fg:x="18" fg:w="1"/><text x="6.4356%" y="495.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.34%)</title><rect x="6.1856%" y="469" width="0.3436%" height="15" fill="rgb(220,109,13)" fg:x="18" fg:w="1"/><text x="6.4356%" y="479.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="6.1856%" y="453" width="0.3436%" height="15" fill="rgb(232,18,1)" fg:x="18" fg:w="1"/><text x="6.4356%" y="463.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="6.1856%" y="437" width="0.3436%" height="15" fill="rgb(215,41,42)" fg:x="18" fg:w="1"/><text x="6.4356%" y="447.50"></text></g><g><title>_IO_fwrite (1 samples, 0.34%)</title><rect x="6.1856%" y="421" width="0.3436%" height="15" fill="rgb(224,123,36)" fg:x="18" fg:w="1"/><text x="6.4356%" y="431.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="6.1856%" y="405" width="0.3436%" height="15" fill="rgb(240,125,3)" fg:x="18" fg:w="1"/><text x="6.4356%" y="415.50"></text></g><g><title>new_do_write (1 samples, 0.34%)</title><rect x="6.1856%" y="389" width="0.3436%" height="15" fill="rgb(205,98,50)" fg:x="18" fg:w="1"/><text x="6.4356%" y="399.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="6.1856%" y="373" width="0.3436%" height="15" fill="rgb(205,185,37)" fg:x="18" fg:w="1"/><text x="6.4356%" y="383.50"></text></g><g><title>__GI___libc_write (1 samples, 0.34%)</title><rect x="6.1856%" y="357" width="0.3436%" height="15" fill="rgb(238,207,15)" fg:x="18" fg:w="1"/><text x="6.4356%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.1856%" y="341" width="0.3436%" height="15" fill="rgb(213,199,42)" fg:x="18" fg:w="1"/><text x="6.4356%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.1856%" y="325" width="0.3436%" height="15" fill="rgb(235,201,11)" fg:x="18" fg:w="1"/><text x="6.4356%" y="335.50"></text></g><g><title>AutoFile::~AutoFile (1 samples, 0.34%)</title><rect x="6.5292%" y="469" width="0.3436%" height="15" fill="rgb(207,46,11)" fg:x="19" fg:w="1"/><text x="6.7792%" y="479.50"></text></g><g><title>AutoFile::fclose (1 samples, 0.34%)</title><rect x="6.5292%" y="453" width="0.3436%" height="15" fill="rgb(241,35,35)" fg:x="19" fg:w="1"/><text x="6.7792%" y="463.50"></text></g><g><title>fclose@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="6.5292%" y="437" width="0.3436%" height="15" fill="rgb(243,32,47)" fg:x="19" fg:w="1"/><text x="6.7792%" y="447.50"></text></g><g><title>_IO_file_close_it@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="6.5292%" y="421" width="0.3436%" height="15" fill="rgb(247,202,23)" fg:x="19" fg:w="1"/><text x="6.7792%" y="431.50"></text></g><g><title>__close_nocancel (1 samples, 0.34%)</title><rect x="6.5292%" y="405" width="0.3436%" height="15" fill="rgb(219,102,11)" fg:x="19" fg:w="1"/><text x="6.7792%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.5292%" y="389" width="0.3436%" height="15" fill="rgb(243,110,44)" fg:x="19" fg:w="1"/><text x="6.7792%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.5292%" y="373" width="0.3436%" height="15" fill="rgb(222,74,54)" fg:x="19" fg:w="1"/><text x="6.7792%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.5292%" y="357" width="0.3436%" height="15" fill="rgb(216,99,12)" fg:x="19" fg:w="1"/><text x="6.7792%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.5292%" y="341" width="0.3436%" height="15" fill="rgb(226,22,26)" fg:x="19" fg:w="1"/><text x="6.7792%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.5292%" y="325" width="0.3436%" height="15" fill="rgb(217,163,10)" fg:x="19" fg:w="1"/><text x="6.7792%" y="335.50"></text></g><g><title>ChainstateManager::AcceptBlock (2 samples, 0.69%)</title><rect x="6.5292%" y="517" width="0.6873%" height="15" fill="rgb(213,25,53)" fg:x="19" fg:w="2"/><text x="6.7792%" y="527.50"></text></g><g><title>node::BlockManager::SaveBlockToDisk (2 samples, 0.69%)</title><rect x="6.5292%" y="501" width="0.6873%" height="15" fill="rgb(252,105,26)" fg:x="19" fg:w="2"/><text x="6.7792%" y="511.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (2 samples, 0.69%)</title><rect x="6.5292%" y="485" width="0.6873%" height="15" fill="rgb(220,39,43)" fg:x="19" fg:w="2"/><text x="6.7792%" y="495.50"></text></g><g><title>node::BlockManager::OpenBlockFile (1 samples, 0.34%)</title><rect x="6.8729%" y="469" width="0.3436%" height="15" fill="rgb(229,68,48)" fg:x="20" fg:w="1"/><text x="7.1229%" y="479.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.34%)</title><rect x="6.8729%" y="453" width="0.3436%" height="15" fill="rgb(252,8,32)" fg:x="20" fg:w="1"/><text x="7.1229%" y="463.50"></text></g><g><title>__fopen_internal (1 samples, 0.34%)</title><rect x="6.8729%" y="437" width="0.3436%" height="15" fill="rgb(223,20,43)" fg:x="20" fg:w="1"/><text x="7.1229%" y="447.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="6.8729%" y="421" width="0.3436%" height="15" fill="rgb(229,81,49)" fg:x="20" fg:w="1"/><text x="7.1229%" y="431.50"></text></g><g><title>_IO_file_open (1 samples, 0.34%)</title><rect x="6.8729%" y="405" width="0.3436%" height="15" fill="rgb(236,28,36)" fg:x="20" fg:w="1"/><text x="7.1229%" y="415.50"></text></g><g><title>__GI___libc_open (1 samples, 0.34%)</title><rect x="6.8729%" y="389" width="0.3436%" height="15" fill="rgb(249,185,26)" fg:x="20" fg:w="1"/><text x="7.1229%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.8729%" y="373" width="0.3436%" height="15" fill="rgb(249,174,33)" fg:x="20" fg:w="1"/><text x="7.1229%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.8729%" y="357" width="0.3436%" height="15" fill="rgb(233,201,37)" fg:x="20" fg:w="1"/><text x="7.1229%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.8729%" y="341" width="0.3436%" height="15" fill="rgb(221,78,26)" fg:x="20" fg:w="1"/><text x="7.1229%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.8729%" y="325" width="0.3436%" height="15" fill="rgb(250,127,30)" fg:x="20" fg:w="1"/><text x="7.1229%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="6.8729%" y="309" width="0.3436%" height="15" fill="rgb(230,49,44)" fg:x="20" fg:w="1"/><text x="7.1229%" y="319.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (10 samples, 3.44%)</title><rect x="4.1237%" y="533" width="3.4364%" height="15" fill="rgb(229,67,23)" fg:x="12" fg:w="10"/><text x="4.3737%" y="543.50">Cha..</text></g><g><title>CheckBlock (1 samples, 0.34%)</title><rect x="7.2165%" y="517" width="0.3436%" height="15" fill="rgb(249,83,47)" fg:x="21" fg:w="1"/><text x="7.4665%" y="527.50"></text></g><g><title>CheckSignetBlockSolution (1 samples, 0.34%)</title><rect x="7.2165%" y="501" width="0.3436%" height="15" fill="rgb(215,43,3)" fg:x="21" fg:w="1"/><text x="7.4665%" y="511.50"></text></g><g><title>VerifyScript (1 samples, 0.34%)</title><rect x="7.2165%" y="485" width="0.3436%" height="15" fill="rgb(238,154,13)" fg:x="21" fg:w="1"/><text x="7.4665%" y="495.50"></text></g><g><title>EvalScript (1 samples, 0.34%)</title><rect x="7.2165%" y="469" width="0.3436%" height="15" fill="rgb(219,56,2)" fg:x="21" fg:w="1"/><text x="7.4665%" y="479.50"></text></g><g><title>EvalScript (1 samples, 0.34%)</title><rect x="7.2165%" y="453" width="0.3436%" height="15" fill="rgb(233,0,4)" fg:x="21" fg:w="1"/><text x="7.4665%" y="463.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::CheckECDSASignature (1 samples, 0.34%)</title><rect x="7.2165%" y="437" width="0.3436%" height="15" fill="rgb(235,30,7)" fg:x="21" fg:w="1"/><text x="7.4665%" y="447.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::VerifyECDSASignature (1 samples, 0.34%)</title><rect x="7.2165%" y="421" width="0.3436%" height="15" fill="rgb(250,79,13)" fg:x="21" fg:w="1"/><text x="7.4665%" y="431.50"></text></g><g><title>CPubKey::Verify (1 samples, 0.34%)</title><rect x="7.2165%" y="405" width="0.3436%" height="15" fill="rgb(211,146,34)" fg:x="21" fg:w="1"/><text x="7.4665%" y="415.50"></text></g><g><title>secp256k1_ec_pubkey_parse (1 samples, 0.34%)</title><rect x="7.2165%" y="389" width="0.3436%" height="15" fill="rgb(228,22,38)" fg:x="21" fg:w="1"/><text x="7.4665%" y="399.50"></text></g><g><title>secp256k1_eckey_pubkey_parse (1 samples, 0.34%)</title><rect x="7.2165%" y="373" width="0.3436%" height="15" fill="rgb(235,168,5)" fg:x="21" fg:w="1"/><text x="7.4665%" y="383.50"></text></g><g><title>secp256k1_ge_set_xo_var (1 samples, 0.34%)</title><rect x="7.2165%" y="357" width="0.3436%" height="15" fill="rgb(221,155,16)" fg:x="21" fg:w="1"/><text x="7.4665%" y="367.50"></text></g><g><title>secp256k1_fe_sqrt (1 samples, 0.34%)</title><rect x="7.2165%" y="341" width="0.3436%" height="15" fill="rgb(215,215,53)" fg:x="21" fg:w="1"/><text x="7.4665%" y="351.50"></text></g><g><title>secp256k1_fe_impl_sqr (1 samples, 0.34%)</title><rect x="7.2165%" y="325" width="0.3436%" height="15" fill="rgb(223,4,10)" fg:x="21" fg:w="1"/><text x="7.4665%" y="335.50"></text></g><g><title>secp256k1_fe_sqr_inner (1 samples, 0.34%)</title><rect x="7.2165%" y="309" width="0.3436%" height="15" fill="rgb(234,103,6)" fg:x="21" fg:w="1"/><text x="7.4665%" y="319.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.34%)</title><rect x="7.2165%" y="293" width="0.3436%" height="15" fill="rgb(227,97,0)" fg:x="21" fg:w="1"/><text x="7.4665%" y="303.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.34%)</title><rect x="7.5601%" y="501" width="0.3436%" height="15" fill="rgb(234,150,53)" fg:x="22" fg:w="1"/><text x="7.8101%" y="511.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.34%)</title><rect x="7.5601%" y="485" width="0.3436%" height="15" fill="rgb(228,201,54)" fg:x="22" fg:w="1"/><text x="7.8101%" y="495.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.34%)</title><rect x="7.5601%" y="469" width="0.3436%" height="15" fill="rgb(222,22,37)" fg:x="22" fg:w="1"/><text x="7.8101%" y="479.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.34%)</title><rect x="7.5601%" y="453" width="0.3436%" height="15" fill="rgb(237,53,32)" fg:x="22" fg:w="1"/><text x="7.8101%" y="463.50"></text></g><g><title>ShiftMessageC (1 samples, 0.34%)</title><rect x="7.5601%" y="437" width="0.3436%" height="15" fill="rgb(233,25,53)" fg:x="22" fg:w="1"/><text x="7.8101%" y="447.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.34%)</title><rect x="7.5601%" y="421" width="0.3436%" height="15" fill="rgb(210,40,34)" fg:x="22" fg:w="1"/><text x="7.8101%" y="431.50"></text></g><g><title>__clone (13 samples, 4.47%)</title><rect x="3.7801%" y="709" width="4.4674%" height="15" fill="rgb(241,220,44)" fg:x="11" fg:w="13"/><text x="4.0301%" y="719.50">__clo..</text></g><g><title>start_thread (13 samples, 4.47%)</title><rect x="3.7801%" y="693" width="4.4674%" height="15" fill="rgb(235,28,35)" fg:x="11" fg:w="13"/><text x="4.0301%" y="703.50">start..</text></g><g><title>execute_native_thread_routine (13 samples, 4.47%)</title><rect x="3.7801%" y="677" width="4.4674%" height="15" fill="rgb(210,56,17)" fg:x="11" fg:w="13"/><text x="4.0301%" y="687.50">execu..</text></g><g><title>_M_run (13 samples, 4.47%)</title><rect x="3.7801%" y="661" width="4.4674%" height="15" fill="rgb(224,130,29)" fg:x="11" fg:w="13"/><text x="4.0301%" y="671.50">_M_run</text></g><g><title>operator (13 samples, 4.47%)</title><rect x="3.7801%" y="645" width="4.4674%" height="15" fill="rgb(235,212,8)" fg:x="11" fg:w="13"/><text x="4.0301%" y="655.50">opera..</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (13 samples, 4.47%)</title><rect x="3.7801%" y="629" width="4.4674%" height="15" fill="rgb(223,33,50)" fg:x="11" fg:w="13"/><text x="4.0301%" y="639.50">_M_in..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (13 samples, 4.47%)</title><rect x="3.7801%" y="613" width="4.4674%" height="15" fill="rgb(219,149,13)" fg:x="11" fg:w="13"/><text x="4.0301%" y="623.50">__inv..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (13 samples, 4.47%)</title><rect x="3.7801%" y="597" width="4.4674%" height="15" fill="rgb(250,156,29)" fg:x="11" fg:w="13"/><text x="4.0301%" y="607.50">std::..</text></g><g><title>util::TraceThread (13 samples, 4.47%)</title><rect x="3.7801%" y="581" width="4.4674%" height="15" fill="rgb(216,193,19)" fg:x="11" fg:w="13"/><text x="4.0301%" y="591.50">util:..</text></g><g><title>std::function&lt;void ()&gt;::operator (13 samples, 4.47%)</title><rect x="3.7801%" y="565" width="4.4674%" height="15" fill="rgb(216,135,14)" fg:x="11" fg:w="13"/><text x="4.0301%" y="575.50">std::..</text></g><g><title>CConnman::ThreadMessageHandler (13 samples, 4.47%)</title><rect x="3.7801%" y="549" width="4.4674%" height="15" fill="rgb(241,47,5)" fg:x="11" fg:w="13"/><text x="4.0301%" y="559.50">CConn..</text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (2 samples, 0.69%)</title><rect x="7.5601%" y="533" width="0.6873%" height="15" fill="rgb(233,42,35)" fg:x="22" fg:w="2"/><text x="7.8101%" y="543.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (2 samples, 0.69%)</title><rect x="7.5601%" y="517" width="0.6873%" height="15" fill="rgb(231,13,6)" fg:x="22" fg:w="2"/><text x="7.8101%" y="527.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.34%)</title><rect x="7.9038%" y="501" width="0.3436%" height="15" fill="rgb(207,181,40)" fg:x="23" fg:w="1"/><text x="8.1538%" y="511.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.34%)</title><rect x="7.9038%" y="485" width="0.3436%" height="15" fill="rgb(254,173,49)" fg:x="23" fg:w="1"/><text x="8.1538%" y="495.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="7.9038%" y="469" width="0.3436%" height="15" fill="rgb(221,1,38)" fg:x="23" fg:w="1"/><text x="8.1538%" y="479.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.34%)</title><rect x="7.9038%" y="453" width="0.3436%" height="15" fill="rgb(206,124,46)" fg:x="23" fg:w="1"/><text x="8.1538%" y="463.50"></text></g><g><title>_IO_fwrite (1 samples, 0.34%)</title><rect x="7.9038%" y="437" width="0.3436%" height="15" fill="rgb(249,21,11)" fg:x="23" fg:w="1"/><text x="8.1538%" y="447.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="7.9038%" y="421" width="0.3436%" height="15" fill="rgb(222,201,40)" fg:x="23" fg:w="1"/><text x="8.1538%" y="431.50"></text></g><g><title>new_do_write (1 samples, 0.34%)</title><rect x="7.9038%" y="405" width="0.3436%" height="15" fill="rgb(235,61,29)" fg:x="23" fg:w="1"/><text x="8.1538%" y="415.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="7.9038%" y="389" width="0.3436%" height="15" fill="rgb(219,207,3)" fg:x="23" fg:w="1"/><text x="8.1538%" y="399.50"></text></g><g><title>__GI___libc_write (1 samples, 0.34%)</title><rect x="7.9038%" y="373" width="0.3436%" height="15" fill="rgb(222,56,46)" fg:x="23" fg:w="1"/><text x="8.1538%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="357" width="0.3436%" height="15" fill="rgb(239,76,54)" fg:x="23" fg:w="1"/><text x="8.1538%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="341" width="0.3436%" height="15" fill="rgb(231,124,27)" fg:x="23" fg:w="1"/><text x="8.1538%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="325" width="0.3436%" height="15" fill="rgb(249,195,6)" fg:x="23" fg:w="1"/><text x="8.1538%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="309" width="0.3436%" height="15" fill="rgb(237,174,47)" fg:x="23" fg:w="1"/><text x="8.1538%" y="319.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="7.9038%" y="293" width="0.3436%" height="15" fill="rgb(206,201,31)" fg:x="23" fg:w="1"/><text x="8.1538%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="277" width="0.3436%" height="15" fill="rgb(231,57,52)" fg:x="23" fg:w="1"/><text x="8.1538%" y="287.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="7.9038%" y="261" width="0.3436%" height="15" fill="rgb(248,177,22)" fg:x="23" fg:w="1"/><text x="8.1538%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="245" width="0.3436%" height="15" fill="rgb(215,211,37)" fg:x="23" fg:w="1"/><text x="8.1538%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="229" width="0.3436%" height="15" fill="rgb(241,128,51)" fg:x="23" fg:w="1"/><text x="8.1538%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="7.9038%" y="213" width="0.3436%" height="15" fill="rgb(227,165,31)" fg:x="23" fg:w="1"/><text x="8.1538%" y="223.50"></text></g><g><title>b-msghand (21 samples, 7.22%)</title><rect x="1.3746%" y="725" width="7.2165%" height="15" fill="rgb(228,167,24)" fg:x="4" fg:w="21"/><text x="1.6246%" y="735.50">b-msghand</text></g><g><title>void tinyformat::detail::FormatArg::formatImpl&lt;int&gt; (1 samples, 0.34%)</title><rect x="8.2474%" y="709" width="0.3436%" height="15" fill="rgb(228,143,12)" fg:x="24" fg:w="1"/><text x="8.4974%" y="719.50"></text></g><g><title>b-net (1 samples, 0.34%)</title><rect x="8.5911%" y="725" width="0.3436%" height="15" fill="rgb(249,149,8)" fg:x="25" fg:w="1"/><text x="8.8411%" y="735.50"></text></g><g><title>CConnman::SocketHandlerConnected (1 samples, 0.34%)</title><rect x="8.5911%" y="709" width="0.3436%" height="15" fill="rgb(243,35,44)" fg:x="25" fg:w="1"/><text x="8.8411%" y="719.50"></text></g><g><title>__libc_recv (1 samples, 0.34%)</title><rect x="8.5911%" y="693" width="0.3436%" height="15" fill="rgb(246,89,9)" fg:x="25" fg:w="1"/><text x="8.8411%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="677" width="0.3436%" height="15" fill="rgb(233,213,13)" fg:x="25" fg:w="1"/><text x="8.8411%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="661" width="0.3436%" height="15" fill="rgb(233,141,41)" fg:x="25" fg:w="1"/><text x="8.8411%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="645" width="0.3436%" height="15" fill="rgb(239,167,4)" fg:x="25" fg:w="1"/><text x="8.8411%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="629" width="0.3436%" height="15" fill="rgb(209,217,16)" fg:x="25" fg:w="1"/><text x="8.8411%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="613" width="0.3436%" height="15" fill="rgb(219,88,35)" fg:x="25" fg:w="1"/><text x="8.8411%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="597" width="0.3436%" height="15" fill="rgb(220,193,23)" fg:x="25" fg:w="1"/><text x="8.8411%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="581" width="0.3436%" height="15" fill="rgb(230,90,52)" fg:x="25" fg:w="1"/><text x="8.8411%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="565" width="0.3436%" height="15" fill="rgb(252,106,19)" fg:x="25" fg:w="1"/><text x="8.8411%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="549" width="0.3436%" height="15" fill="rgb(206,74,20)" fg:x="25" fg:w="1"/><text x="8.8411%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="533" width="0.3436%" height="15" fill="rgb(230,138,44)" fg:x="25" fg:w="1"/><text x="8.8411%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="517" width="0.3436%" height="15" fill="rgb(235,182,43)" fg:x="25" fg:w="1"/><text x="8.8411%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="501" width="0.3436%" height="15" fill="rgb(242,16,51)" fg:x="25" fg:w="1"/><text x="8.8411%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="485" width="0.3436%" height="15" fill="rgb(248,9,4)" fg:x="25" fg:w="1"/><text x="8.8411%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="469" width="0.3436%" height="15" fill="rgb(210,31,22)" fg:x="25" fg:w="1"/><text x="8.8411%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="453" width="0.3436%" height="15" fill="rgb(239,54,39)" fg:x="25" fg:w="1"/><text x="8.8411%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.5911%" y="437" width="0.3436%" height="15" fill="rgb(230,99,41)" fg:x="25" fg:w="1"/><text x="8.8411%" y="447.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.34%)</title><rect x="8.9347%" y="533" width="0.3436%" height="15" fill="rgb(253,106,12)" fg:x="26" fg:w="1"/><text x="9.1847%" y="543.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.34%)</title><rect x="8.9347%" y="517" width="0.3436%" height="15" fill="rgb(213,46,41)" fg:x="26" fg:w="1"/><text x="9.1847%" y="527.50"></text></g><g><title>std::__condvar::wait_until (1 samples, 0.34%)</title><rect x="8.9347%" y="501" width="0.3436%" height="15" fill="rgb(215,133,35)" fg:x="26" fg:w="1"/><text x="9.1847%" y="511.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.34%)</title><rect x="8.9347%" y="485" width="0.3436%" height="15" fill="rgb(213,28,5)" fg:x="26" fg:w="1"/><text x="9.1847%" y="495.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.34%)</title><rect x="8.9347%" y="469" width="0.3436%" height="15" fill="rgb(215,77,49)" fg:x="26" fg:w="1"/><text x="9.1847%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.9347%" y="453" width="0.3436%" height="15" fill="rgb(248,100,22)" fg:x="26" fg:w="1"/><text x="9.1847%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.9347%" y="437" width="0.3436%" height="15" fill="rgb(208,67,9)" fg:x="26" fg:w="1"/><text x="9.1847%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.9347%" y="421" width="0.3436%" height="15" fill="rgb(219,133,21)" fg:x="26" fg:w="1"/><text x="9.1847%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="8.9347%" y="405" width="0.3436%" height="15" fill="rgb(246,46,29)" fg:x="26" fg:w="1"/><text x="9.1847%" y="415.50"></text></g><g><title>CRollingBloomFilter::insert (4 samples, 1.37%)</title><rect x="9.2784%" y="357" width="1.3746%" height="15" fill="rgb(246,185,52)" fg:x="27" fg:w="4"/><text x="9.5284%" y="367.50"></text></g><g><title>CRollingBloomFilter::insert (4 samples, 1.37%)</title><rect x="9.2784%" y="341" width="1.3746%" height="15" fill="rgb(252,136,11)" fg:x="27" fg:w="4"/><text x="9.5284%" y="351.50"></text></g><g><title>MurmurHash3 (4 samples, 1.37%)</title><rect x="9.2784%" y="325" width="1.3746%" height="15" fill="rgb(219,138,53)" fg:x="27" fg:w="4"/><text x="9.5284%" y="335.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="9.2784%" y="309" width="1.3746%" height="15" fill="rgb(211,51,23)" fg:x="27" fg:w="4"/><text x="9.5284%" y="319.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="9.2784%" y="293" width="1.3746%" height="15" fill="rgb(247,221,28)" fg:x="27" fg:w="4"/><text x="9.5284%" y="303.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="9.2784%" y="277" width="1.3746%" height="15" fill="rgb(251,222,45)" fg:x="27" fg:w="4"/><text x="9.5284%" y="287.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="9.2784%" y="261" width="1.3746%" height="15" fill="rgb(217,162,53)" fg:x="27" fg:w="4"/><text x="9.5284%" y="271.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="245" width="1.0309%" height="15" fill="rgb(229,93,14)" fg:x="28" fg:w="3"/><text x="9.8720%" y="255.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="229" width="1.0309%" height="15" fill="rgb(209,67,49)" fg:x="28" fg:w="3"/><text x="9.8720%" y="239.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="213" width="1.0309%" height="15" fill="rgb(213,87,29)" fg:x="28" fg:w="3"/><text x="9.8720%" y="223.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="197" width="1.0309%" height="15" fill="rgb(205,151,52)" fg:x="28" fg:w="3"/><text x="9.8720%" y="207.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="181" width="1.0309%" height="15" fill="rgb(253,215,39)" fg:x="28" fg:w="3"/><text x="9.8720%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="165" width="1.0309%" height="15" fill="rgb(221,220,41)" fg:x="28" fg:w="3"/><text x="9.8720%" y="175.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="149" width="1.0309%" height="15" fill="rgb(218,133,21)" fg:x="28" fg:w="3"/><text x="9.8720%" y="159.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="9.6220%" y="133" width="1.0309%" height="15" fill="rgb(221,193,43)" fg:x="28" fg:w="3"/><text x="9.8720%" y="143.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (5 samples, 1.72%)</title><rect x="9.2784%" y="469" width="1.7182%" height="15" fill="rgb(240,128,52)" fg:x="27" fg:w="5"/><text x="9.5284%" y="479.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (5 samples, 1.72%)</title><rect x="9.2784%" y="453" width="1.7182%" height="15" fill="rgb(253,114,12)" fg:x="27" fg:w="5"/><text x="9.5284%" y="463.50"></text></g><g><title>operator (5 samples, 1.72%)</title><rect x="9.2784%" y="437" width="1.7182%" height="15" fill="rgb(215,223,47)" fg:x="27" fg:w="5"/><text x="9.5284%" y="447.50"></text></g><g><title>operator (5 samples, 1.72%)</title><rect x="9.2784%" y="421" width="1.7182%" height="15" fill="rgb(248,225,23)" fg:x="27" fg:w="5"/><text x="9.5284%" y="431.50"></text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (5 samples, 1.72%)</title><rect x="9.2784%" y="405" width="1.7182%" height="15" fill="rgb(250,108,0)" fg:x="27" fg:w="5"/><text x="9.5284%" y="415.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (5 samples, 1.72%)</title><rect x="9.2784%" y="389" width="1.7182%" height="15" fill="rgb(228,208,7)" fg:x="27" fg:w="5"/><text x="9.5284%" y="399.50"></text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (5 samples, 1.72%)</title><rect x="9.2784%" y="373" width="1.7182%" height="15" fill="rgb(244,45,10)" fg:x="27" fg:w="5"/><text x="9.5284%" y="383.50"></text></g><g><title>node::TxDownloadManagerImpl::RecentConfirmedTransactionsFilter (1 samples, 0.34%)</title><rect x="10.6529%" y="357" width="0.3436%" height="15" fill="rgb(207,125,25)" fg:x="31" fg:w="1"/><text x="10.9029%" y="367.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CRollingBloomFilter&gt;::__single_object std::make_unique&lt;CRollingBloomFilter, int, double&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="341" width="0.3436%" height="15" fill="rgb(210,195,18)" fg:x="31" fg:w="1"/><text x="10.9029%" y="351.50"></text></g><g><title>CRollingBloomFilter::CRollingBloomFilter (1 samples, 0.34%)</title><rect x="10.6529%" y="325" width="0.3436%" height="15" fill="rgb(249,80,12)" fg:x="31" fg:w="1"/><text x="10.9029%" y="335.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.34%)</title><rect x="10.6529%" y="309" width="0.3436%" height="15" fill="rgb(221,65,9)" fg:x="31" fg:w="1"/><text x="10.9029%" y="319.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.34%)</title><rect x="10.6529%" y="293" width="0.3436%" height="15" fill="rgb(235,49,36)" fg:x="31" fg:w="1"/><text x="10.9029%" y="303.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="277" width="0.3436%" height="15" fill="rgb(225,32,20)" fg:x="31" fg:w="1"/><text x="10.9029%" y="287.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="261" width="0.3436%" height="15" fill="rgb(215,141,46)" fg:x="31" fg:w="1"/><text x="10.9029%" y="271.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="245" width="0.3436%" height="15" fill="rgb(250,160,47)" fg:x="31" fg:w="1"/><text x="10.9029%" y="255.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="229" width="0.3436%" height="15" fill="rgb(216,222,40)" fg:x="31" fg:w="1"/><text x="10.9029%" y="239.50"></text></g><g><title>unsigned long* std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="213" width="0.3436%" height="15" fill="rgb(234,217,39)" fg:x="31" fg:w="1"/><text x="10.9029%" y="223.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="197" width="0.3436%" height="15" fill="rgb(207,178,40)" fg:x="31" fg:w="1"/><text x="10.9029%" y="207.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="181" width="0.3436%" height="15" fill="rgb(221,136,13)" fg:x="31" fg:w="1"/><text x="10.9029%" y="191.50"></text></g><g><title>void std::__fill_a&lt;unsigned long*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="165" width="0.3436%" height="15" fill="rgb(249,199,10)" fg:x="31" fg:w="1"/><text x="10.9029%" y="175.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;unsigned long&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned long*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="10.6529%" y="149" width="0.3436%" height="15" fill="rgb(249,222,13)" fg:x="31" fg:w="1"/><text x="10.9029%" y="159.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.34%)</title><rect x="10.6529%" y="133" width="0.3436%" height="15" fill="rgb(244,185,38)" fg:x="31" fg:w="1"/><text x="10.9029%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="10.6529%" y="117" width="0.3436%" height="15" fill="rgb(236,202,9)" fg:x="31" fg:w="1"/><text x="10.9029%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="10.6529%" y="101" width="0.3436%" height="15" fill="rgb(250,229,37)" fg:x="31" fg:w="1"/><text x="10.9029%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="10.6529%" y="85" width="0.3436%" height="15" fill="rgb(206,174,23)" fg:x="31" fg:w="1"/><text x="10.9029%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="10.6529%" y="69" width="0.3436%" height="15" fill="rgb(211,33,43)" fg:x="31" fg:w="1"/><text x="10.9029%" y="79.50"></text></g><g><title>CScheduler::serviceQueue (10 samples, 3.44%)</title><rect x="8.9347%" y="549" width="3.4364%" height="15" fill="rgb(245,58,50)" fg:x="26" fg:w="10"/><text x="9.1847%" y="559.50">CSc..</text></g><g><title>std::function&lt;void ()&gt;::operator (9 samples, 3.09%)</title><rect x="9.2784%" y="533" width="3.0928%" height="15" fill="rgb(244,68,36)" fg:x="27" fg:w="9"/><text x="9.5284%" y="543.50">std..</text></g><g><title>SerialTaskRunner::ProcessQueue (9 samples, 3.09%)</title><rect x="9.2784%" y="517" width="3.0928%" height="15" fill="rgb(232,229,15)" fg:x="27" fg:w="9"/><text x="9.5284%" y="527.50">Ser..</text></g><g><title>std::function&lt;void ()&gt;::operator (9 samples, 3.09%)</title><rect x="9.2784%" y="501" width="3.0928%" height="15" fill="rgb(254,30,23)" fg:x="27" fg:w="9"/><text x="9.5284%" y="511.50">std..</text></g><g><title>_M_invoke (9 samples, 3.09%)</title><rect x="9.2784%" y="485" width="3.0928%" height="15" fill="rgb(235,160,14)" fg:x="27" fg:w="9"/><text x="9.5284%" y="495.50">_M_..</text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (4 samples, 1.37%)</title><rect x="10.9966%" y="469" width="1.3746%" height="15" fill="rgb(212,155,44)" fg:x="32" fg:w="4"/><text x="11.2466%" y="479.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (4 samples, 1.37%)</title><rect x="10.9966%" y="453" width="1.3746%" height="15" fill="rgb(226,2,50)" fg:x="32" fg:w="4"/><text x="11.2466%" y="463.50"></text></g><g><title>operator (4 samples, 1.37%)</title><rect x="10.9966%" y="437" width="1.3746%" height="15" fill="rgb(234,177,6)" fg:x="32" fg:w="4"/><text x="11.2466%" y="447.50"></text></g><g><title>operator (4 samples, 1.37%)</title><rect x="10.9966%" y="421" width="1.3746%" height="15" fill="rgb(217,24,9)" fg:x="32" fg:w="4"/><text x="11.2466%" y="431.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (4 samples, 1.37%)</title><rect x="10.9966%" y="405" width="1.3746%" height="15" fill="rgb(220,13,46)" fg:x="32" fg:w="4"/><text x="11.2466%" y="415.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (4 samples, 1.37%)</title><rect x="10.9966%" y="389" width="1.3746%" height="15" fill="rgb(239,221,27)" fg:x="32" fg:w="4"/><text x="11.2466%" y="399.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (4 samples, 1.37%)</title><rect x="10.9966%" y="373" width="1.3746%" height="15" fill="rgb(222,198,25)" fg:x="32" fg:w="4"/><text x="11.2466%" y="383.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (4 samples, 1.37%)</title><rect x="10.9966%" y="357" width="1.3746%" height="15" fill="rgb(211,99,13)" fg:x="32" fg:w="4"/><text x="11.2466%" y="367.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="10.9966%" y="341" width="1.3746%" height="15" fill="rgb(232,111,31)" fg:x="32" fg:w="4"/><text x="11.2466%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="325" width="1.0309%" height="15" fill="rgb(245,82,37)" fg:x="33" fg:w="3"/><text x="11.5902%" y="335.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="309" width="1.0309%" height="15" fill="rgb(227,149,46)" fg:x="33" fg:w="3"/><text x="11.5902%" y="319.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="293" width="1.0309%" height="15" fill="rgb(218,36,50)" fg:x="33" fg:w="3"/><text x="11.5902%" y="303.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="277" width="1.0309%" height="15" fill="rgb(226,80,48)" fg:x="33" fg:w="3"/><text x="11.5902%" y="287.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="261" width="1.0309%" height="15" fill="rgb(238,224,15)" fg:x="33" fg:w="3"/><text x="11.5902%" y="271.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="245" width="1.0309%" height="15" fill="rgb(241,136,10)" fg:x="33" fg:w="3"/><text x="11.5902%" y="255.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="229" width="1.0309%" height="15" fill="rgb(208,32,45)" fg:x="33" fg:w="3"/><text x="11.5902%" y="239.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="213" width="1.0309%" height="15" fill="rgb(207,135,9)" fg:x="33" fg:w="3"/><text x="11.5902%" y="223.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="197" width="1.0309%" height="15" fill="rgb(206,86,44)" fg:x="33" fg:w="3"/><text x="11.5902%" y="207.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="181" width="1.0309%" height="15" fill="rgb(245,177,15)" fg:x="33" fg:w="3"/><text x="11.5902%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="11.3402%" y="165" width="1.0309%" height="15" fill="rgb(206,64,50)" fg:x="33" fg:w="3"/><text x="11.5902%" y="175.50"></text></g><g><title>b-scheduler (11 samples, 3.78%)</title><rect x="8.9347%" y="725" width="3.7801%" height="15" fill="rgb(234,36,40)" fg:x="26" fg:w="11"/><text x="9.1847%" y="735.50">b-sc..</text></g><g><title>__clone (11 samples, 3.78%)</title><rect x="8.9347%" y="709" width="3.7801%" height="15" fill="rgb(213,64,8)" fg:x="26" fg:w="11"/><text x="9.1847%" y="719.50">__cl..</text></g><g><title>start_thread (11 samples, 3.78%)</title><rect x="8.9347%" y="693" width="3.7801%" height="15" fill="rgb(210,75,36)" fg:x="26" fg:w="11"/><text x="9.1847%" y="703.50">star..</text></g><g><title>execute_native_thread_routine (11 samples, 3.78%)</title><rect x="8.9347%" y="677" width="3.7801%" height="15" fill="rgb(229,88,21)" fg:x="26" fg:w="11"/><text x="9.1847%" y="687.50">exec..</text></g><g><title>_M_run (11 samples, 3.78%)</title><rect x="8.9347%" y="661" width="3.7801%" height="15" fill="rgb(252,204,47)" fg:x="26" fg:w="11"/><text x="9.1847%" y="671.50">_M_r..</text></g><g><title>operator (11 samples, 3.78%)</title><rect x="8.9347%" y="645" width="3.7801%" height="15" fill="rgb(208,77,27)" fg:x="26" fg:w="11"/><text x="9.1847%" y="655.50">oper..</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (11 samples, 3.78%)</title><rect x="8.9347%" y="629" width="3.7801%" height="15" fill="rgb(221,76,26)" fg:x="26" fg:w="11"/><text x="9.1847%" y="639.50">_M_i..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (11 samples, 3.78%)</title><rect x="8.9347%" y="613" width="3.7801%" height="15" fill="rgb(225,139,18)" fg:x="26" fg:w="11"/><text x="9.1847%" y="623.50">__in..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (11 samples, 3.78%)</title><rect x="8.9347%" y="597" width="3.7801%" height="15" fill="rgb(230,137,11)" fg:x="26" fg:w="11"/><text x="9.1847%" y="607.50">std:..</text></g><g><title>util::TraceThread (11 samples, 3.78%)</title><rect x="8.9347%" y="581" width="3.7801%" height="15" fill="rgb(212,28,1)" fg:x="26" fg:w="11"/><text x="9.1847%" y="591.50">util..</text></g><g><title>std::function&lt;void ()&gt;::operator (11 samples, 3.78%)</title><rect x="8.9347%" y="565" width="3.7801%" height="15" fill="rgb(248,164,17)" fg:x="26" fg:w="11"/><text x="9.1847%" y="575.50">std:..</text></g><g><title>__vdso_clock_gettime (1 samples, 0.34%)</title><rect x="12.3711%" y="549" width="0.3436%" height="15" fill="rgb(222,171,42)" fg:x="36" fg:w="1"/><text x="12.6211%" y="559.50"></text></g><g><title>b-scriptch.10 (4 samples, 1.37%)</title><rect x="12.7148%" y="725" width="1.3746%" height="15" fill="rgb(243,84,45)" fg:x="37" fg:w="4"/><text x="12.9648%" y="735.50"></text></g><g><title>__clone (4 samples, 1.37%)</title><rect x="12.7148%" y="709" width="1.3746%" height="15" fill="rgb(252,49,23)" fg:x="37" fg:w="4"/><text x="12.9648%" y="719.50"></text></g><g><title>start_thread (4 samples, 1.37%)</title><rect x="12.7148%" y="693" width="1.3746%" height="15" fill="rgb(215,19,7)" fg:x="37" fg:w="4"/><text x="12.9648%" y="703.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.37%)</title><rect x="12.7148%" y="677" width="1.3746%" height="15" fill="rgb(238,81,41)" fg:x="37" fg:w="4"/><text x="12.9648%" y="687.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.37%)</title><rect x="12.7148%" y="661" width="1.3746%" height="15" fill="rgb(210,199,37)" fg:x="37" fg:w="4"/><text x="12.9648%" y="671.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.37%)</title><rect x="12.7148%" y="645" width="1.3746%" height="15" fill="rgb(244,192,49)" fg:x="37" fg:w="4"/><text x="12.9648%" y="655.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.37%)</title><rect x="12.7148%" y="629" width="1.3746%" height="15" fill="rgb(226,211,11)" fg:x="37" fg:w="4"/><text x="12.9648%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="613" width="1.3746%" height="15" fill="rgb(236,162,54)" fg:x="37" fg:w="4"/><text x="12.9648%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="597" width="1.3746%" height="15" fill="rgb(220,229,9)" fg:x="37" fg:w="4"/><text x="12.9648%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="581" width="1.3746%" height="15" fill="rgb(250,87,22)" fg:x="37" fg:w="4"/><text x="12.9648%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="565" width="1.3746%" height="15" fill="rgb(239,43,17)" fg:x="37" fg:w="4"/><text x="12.9648%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="549" width="1.3746%" height="15" fill="rgb(231,177,25)" fg:x="37" fg:w="4"/><text x="12.9648%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="533" width="1.3746%" height="15" fill="rgb(219,179,1)" fg:x="37" fg:w="4"/><text x="12.9648%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="517" width="1.3746%" height="15" fill="rgb(238,219,53)" fg:x="37" fg:w="4"/><text x="12.9648%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="501" width="1.3746%" height="15" fill="rgb(232,167,36)" fg:x="37" fg:w="4"/><text x="12.9648%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="485" width="1.3746%" height="15" fill="rgb(244,19,51)" fg:x="37" fg:w="4"/><text x="12.9648%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="469" width="1.3746%" height="15" fill="rgb(224,6,22)" fg:x="37" fg:w="4"/><text x="12.9648%" y="479.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="453" width="1.3746%" height="15" fill="rgb(224,145,5)" fg:x="37" fg:w="4"/><text x="12.9648%" y="463.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="437" width="1.3746%" height="15" fill="rgb(234,130,49)" fg:x="37" fg:w="4"/><text x="12.9648%" y="447.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="12.7148%" y="421" width="1.3746%" height="15" fill="rgb(254,6,2)" fg:x="37" fg:w="4"/><text x="12.9648%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="13.0584%" y="405" width="1.0309%" height="15" fill="rgb(208,96,46)" fg:x="38" fg:w="3"/><text x="13.3084%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="13.0584%" y="389" width="1.0309%" height="15" fill="rgb(239,3,39)" fg:x="38" fg:w="3"/><text x="13.3084%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="13.0584%" y="373" width="1.0309%" height="15" fill="rgb(233,210,1)" fg:x="38" fg:w="3"/><text x="13.3084%" y="383.50"></text></g><g><title>b-scriptch.11 (4 samples, 1.37%)</title><rect x="14.0893%" y="725" width="1.3746%" height="15" fill="rgb(244,137,37)" fg:x="41" fg:w="4"/><text x="14.3393%" y="735.50"></text></g><g><title>__clone (4 samples, 1.37%)</title><rect x="14.0893%" y="709" width="1.3746%" height="15" fill="rgb(240,136,2)" fg:x="41" fg:w="4"/><text x="14.3393%" y="719.50"></text></g><g><title>start_thread (4 samples, 1.37%)</title><rect x="14.0893%" y="693" width="1.3746%" height="15" fill="rgb(239,18,37)" fg:x="41" fg:w="4"/><text x="14.3393%" y="703.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.37%)</title><rect x="14.0893%" y="677" width="1.3746%" height="15" fill="rgb(218,185,22)" fg:x="41" fg:w="4"/><text x="14.3393%" y="687.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.37%)</title><rect x="14.0893%" y="661" width="1.3746%" height="15" fill="rgb(225,218,4)" fg:x="41" fg:w="4"/><text x="14.3393%" y="671.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.37%)</title><rect x="14.0893%" y="645" width="1.3746%" height="15" fill="rgb(230,182,32)" fg:x="41" fg:w="4"/><text x="14.3393%" y="655.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.37%)</title><rect x="14.0893%" y="629" width="1.3746%" height="15" fill="rgb(242,56,43)" fg:x="41" fg:w="4"/><text x="14.3393%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="613" width="1.3746%" height="15" fill="rgb(233,99,24)" fg:x="41" fg:w="4"/><text x="14.3393%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="597" width="1.3746%" height="15" fill="rgb(234,209,42)" fg:x="41" fg:w="4"/><text x="14.3393%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="581" width="1.3746%" height="15" fill="rgb(227,7,12)" fg:x="41" fg:w="4"/><text x="14.3393%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="565" width="1.3746%" height="15" fill="rgb(245,203,43)" fg:x="41" fg:w="4"/><text x="14.3393%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="549" width="1.3746%" height="15" fill="rgb(238,205,33)" fg:x="41" fg:w="4"/><text x="14.3393%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="533" width="1.3746%" height="15" fill="rgb(231,56,7)" fg:x="41" fg:w="4"/><text x="14.3393%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="517" width="1.3746%" height="15" fill="rgb(244,186,29)" fg:x="41" fg:w="4"/><text x="14.3393%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="501" width="1.3746%" height="15" fill="rgb(234,111,31)" fg:x="41" fg:w="4"/><text x="14.3393%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="485" width="1.3746%" height="15" fill="rgb(241,149,10)" fg:x="41" fg:w="4"/><text x="14.3393%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="469" width="1.3746%" height="15" fill="rgb(249,206,44)" fg:x="41" fg:w="4"/><text x="14.3393%" y="479.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="453" width="1.3746%" height="15" fill="rgb(251,153,30)" fg:x="41" fg:w="4"/><text x="14.3393%" y="463.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="437" width="1.3746%" height="15" fill="rgb(239,152,38)" fg:x="41" fg:w="4"/><text x="14.3393%" y="447.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="421" width="1.3746%" height="15" fill="rgb(249,139,47)" fg:x="41" fg:w="4"/><text x="14.3393%" y="431.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="14.0893%" y="405" width="1.3746%" height="15" fill="rgb(244,64,35)" fg:x="41" fg:w="4"/><text x="14.3393%" y="415.50"></text></g><g><title>b-scriptch.12 (4 samples, 1.37%)</title><rect x="15.4639%" y="725" width="1.3746%" height="15" fill="rgb(216,46,15)" fg:x="45" fg:w="4"/><text x="15.7139%" y="735.50"></text></g><g><title>__clone (4 samples, 1.37%)</title><rect x="15.4639%" y="709" width="1.3746%" height="15" fill="rgb(250,74,19)" fg:x="45" fg:w="4"/><text x="15.7139%" y="719.50"></text></g><g><title>start_thread (4 samples, 1.37%)</title><rect x="15.4639%" y="693" width="1.3746%" height="15" fill="rgb(249,42,33)" fg:x="45" fg:w="4"/><text x="15.7139%" y="703.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.37%)</title><rect x="15.4639%" y="677" width="1.3746%" height="15" fill="rgb(242,149,17)" fg:x="45" fg:w="4"/><text x="15.7139%" y="687.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.37%)</title><rect x="15.4639%" y="661" width="1.3746%" height="15" fill="rgb(244,29,21)" fg:x="45" fg:w="4"/><text x="15.7139%" y="671.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.37%)</title><rect x="15.4639%" y="645" width="1.3746%" height="15" fill="rgb(220,130,37)" fg:x="45" fg:w="4"/><text x="15.7139%" y="655.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.37%)</title><rect x="15.4639%" y="629" width="1.3746%" height="15" fill="rgb(211,67,2)" fg:x="45" fg:w="4"/><text x="15.7139%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="613" width="1.3746%" height="15" fill="rgb(235,68,52)" fg:x="45" fg:w="4"/><text x="15.7139%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="597" width="1.3746%" height="15" fill="rgb(246,142,3)" fg:x="45" fg:w="4"/><text x="15.7139%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="581" width="1.3746%" height="15" fill="rgb(241,25,7)" fg:x="45" fg:w="4"/><text x="15.7139%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="565" width="1.3746%" height="15" fill="rgb(242,119,39)" fg:x="45" fg:w="4"/><text x="15.7139%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="549" width="1.3746%" height="15" fill="rgb(241,98,45)" fg:x="45" fg:w="4"/><text x="15.7139%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="533" width="1.3746%" height="15" fill="rgb(254,28,30)" fg:x="45" fg:w="4"/><text x="15.7139%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="517" width="1.3746%" height="15" fill="rgb(241,142,54)" fg:x="45" fg:w="4"/><text x="15.7139%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="501" width="1.3746%" height="15" fill="rgb(222,85,15)" fg:x="45" fg:w="4"/><text x="15.7139%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="15.4639%" y="485" width="1.3746%" height="15" fill="rgb(210,85,47)" fg:x="45" fg:w="4"/><text x="15.7139%" y="495.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="15.8076%" y="469" width="1.0309%" height="15" fill="rgb(224,206,25)" fg:x="46" fg:w="3"/><text x="16.0576%" y="479.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="15.8076%" y="453" width="1.0309%" height="15" fill="rgb(243,201,19)" fg:x="46" fg:w="3"/><text x="16.0576%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="15.8076%" y="437" width="1.0309%" height="15" fill="rgb(236,59,4)" fg:x="46" fg:w="3"/><text x="16.0576%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="15.8076%" y="421" width="1.0309%" height="15" fill="rgb(254,179,45)" fg:x="46" fg:w="3"/><text x="16.0576%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="15.8076%" y="405" width="1.0309%" height="15" fill="rgb(226,14,10)" fg:x="46" fg:w="3"/><text x="16.0576%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="15.8076%" y="389" width="1.0309%" height="15" fill="rgb(244,27,41)" fg:x="46" fg:w="3"/><text x="16.0576%" y="399.50"></text></g><g><title>b-scriptch.14 (8 samples, 2.75%)</title><rect x="16.8385%" y="725" width="2.7491%" height="15" fill="rgb(235,35,32)" fg:x="49" fg:w="8"/><text x="17.0885%" y="735.50">b-..</text></g><g><title>__clone (8 samples, 2.75%)</title><rect x="16.8385%" y="709" width="2.7491%" height="15" fill="rgb(218,68,31)" fg:x="49" fg:w="8"/><text x="17.0885%" y="719.50">__..</text></g><g><title>start_thread (8 samples, 2.75%)</title><rect x="16.8385%" y="693" width="2.7491%" height="15" fill="rgb(207,120,37)" fg:x="49" fg:w="8"/><text x="17.0885%" y="703.50">st..</text></g><g><title>execute_native_thread_routine (8 samples, 2.75%)</title><rect x="16.8385%" y="677" width="2.7491%" height="15" fill="rgb(227,98,0)" fg:x="49" fg:w="8"/><text x="17.0885%" y="687.50">ex..</text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (8 samples, 2.75%)</title><rect x="16.8385%" y="661" width="2.7491%" height="15" fill="rgb(207,7,3)" fg:x="49" fg:w="8"/><text x="17.0885%" y="671.50">CC..</text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (8 samples, 2.75%)</title><rect x="16.8385%" y="645" width="2.7491%" height="15" fill="rgb(206,98,19)" fg:x="49" fg:w="8"/><text x="17.0885%" y="655.50">pt..</text></g><g><title>__futex_abstimed_wait_common (8 samples, 2.75%)</title><rect x="16.8385%" y="629" width="2.7491%" height="15" fill="rgb(217,5,26)" fg:x="49" fg:w="8"/><text x="17.0885%" y="639.50">__..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="613" width="2.7491%" height="15" fill="rgb(235,190,38)" fg:x="49" fg:w="8"/><text x="17.0885%" y="623.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="597" width="2.7491%" height="15" fill="rgb(247,86,24)" fg:x="49" fg:w="8"/><text x="17.0885%" y="607.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="581" width="2.7491%" height="15" fill="rgb(205,101,16)" fg:x="49" fg:w="8"/><text x="17.0885%" y="591.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="565" width="2.7491%" height="15" fill="rgb(246,168,33)" fg:x="49" fg:w="8"/><text x="17.0885%" y="575.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="549" width="2.7491%" height="15" fill="rgb(231,114,1)" fg:x="49" fg:w="8"/><text x="17.0885%" y="559.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="533" width="2.7491%" height="15" fill="rgb(207,184,53)" fg:x="49" fg:w="8"/><text x="17.0885%" y="543.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="517" width="2.7491%" height="15" fill="rgb(224,95,51)" fg:x="49" fg:w="8"/><text x="17.0885%" y="527.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="501" width="2.7491%" height="15" fill="rgb(212,188,45)" fg:x="49" fg:w="8"/><text x="17.0885%" y="511.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="485" width="2.7491%" height="15" fill="rgb(223,154,38)" fg:x="49" fg:w="8"/><text x="17.0885%" y="495.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="469" width="2.7491%" height="15" fill="rgb(251,22,52)" fg:x="49" fg:w="8"/><text x="17.0885%" y="479.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="453" width="2.7491%" height="15" fill="rgb(229,209,22)" fg:x="49" fg:w="8"/><text x="17.0885%" y="463.50">[u..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="16.8385%" y="437" width="2.7491%" height="15" fill="rgb(234,138,34)" fg:x="49" fg:w="8"/><text x="17.0885%" y="447.50">[u..</text></g><g><title>[unknown] (7 samples, 2.41%)</title><rect x="17.1821%" y="421" width="2.4055%" height="15" fill="rgb(212,95,11)" fg:x="50" fg:w="7"/><text x="17.4321%" y="431.50">[u..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="17.5258%" y="405" width="2.0619%" height="15" fill="rgb(240,179,47)" fg:x="51" fg:w="6"/><text x="17.7758%" y="415.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="17.5258%" y="389" width="2.0619%" height="15" fill="rgb(240,163,11)" fg:x="51" fg:w="6"/><text x="17.7758%" y="399.50">[..</text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="18.5567%" y="373" width="1.0309%" height="15" fill="rgb(236,37,12)" fg:x="54" fg:w="3"/><text x="18.8067%" y="383.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="18.5567%" y="357" width="1.0309%" height="15" fill="rgb(232,164,16)" fg:x="54" fg:w="3"/><text x="18.8067%" y="367.50"></text></g><g><title>b-scriptch.7 (4 samples, 1.37%)</title><rect x="19.5876%" y="725" width="1.3746%" height="15" fill="rgb(244,205,15)" fg:x="57" fg:w="4"/><text x="19.8376%" y="735.50"></text></g><g><title>__clone (4 samples, 1.37%)</title><rect x="19.5876%" y="709" width="1.3746%" height="15" fill="rgb(223,117,47)" fg:x="57" fg:w="4"/><text x="19.8376%" y="719.50"></text></g><g><title>start_thread (4 samples, 1.37%)</title><rect x="19.5876%" y="693" width="1.3746%" height="15" fill="rgb(244,107,35)" fg:x="57" fg:w="4"/><text x="19.8376%" y="703.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.37%)</title><rect x="19.5876%" y="677" width="1.3746%" height="15" fill="rgb(205,140,8)" fg:x="57" fg:w="4"/><text x="19.8376%" y="687.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.37%)</title><rect x="19.5876%" y="661" width="1.3746%" height="15" fill="rgb(228,84,46)" fg:x="57" fg:w="4"/><text x="19.8376%" y="671.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.37%)</title><rect x="19.5876%" y="645" width="1.3746%" height="15" fill="rgb(254,188,9)" fg:x="57" fg:w="4"/><text x="19.8376%" y="655.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.37%)</title><rect x="19.5876%" y="629" width="1.3746%" height="15" fill="rgb(206,112,54)" fg:x="57" fg:w="4"/><text x="19.8376%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="613" width="1.3746%" height="15" fill="rgb(216,84,49)" fg:x="57" fg:w="4"/><text x="19.8376%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="597" width="1.3746%" height="15" fill="rgb(214,194,35)" fg:x="57" fg:w="4"/><text x="19.8376%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="581" width="1.3746%" height="15" fill="rgb(249,28,3)" fg:x="57" fg:w="4"/><text x="19.8376%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="565" width="1.3746%" height="15" fill="rgb(222,56,52)" fg:x="57" fg:w="4"/><text x="19.8376%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="549" width="1.3746%" height="15" fill="rgb(245,217,50)" fg:x="57" fg:w="4"/><text x="19.8376%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="533" width="1.3746%" height="15" fill="rgb(213,201,24)" fg:x="57" fg:w="4"/><text x="19.8376%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="517" width="1.3746%" height="15" fill="rgb(248,116,28)" fg:x="57" fg:w="4"/><text x="19.8376%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="501" width="1.3746%" height="15" fill="rgb(219,72,43)" fg:x="57" fg:w="4"/><text x="19.8376%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="485" width="1.3746%" height="15" fill="rgb(209,138,14)" fg:x="57" fg:w="4"/><text x="19.8376%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="19.5876%" y="469" width="1.3746%" height="15" fill="rgb(222,18,33)" fg:x="57" fg:w="4"/><text x="19.8376%" y="479.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="19.9313%" y="453" width="1.0309%" height="15" fill="rgb(213,199,7)" fg:x="58" fg:w="3"/><text x="20.1813%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="19.9313%" y="437" width="1.0309%" height="15" fill="rgb(250,110,10)" fg:x="58" fg:w="3"/><text x="20.1813%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="19.9313%" y="421" width="1.0309%" height="15" fill="rgb(248,123,6)" fg:x="58" fg:w="3"/><text x="20.1813%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="19.9313%" y="405" width="1.0309%" height="15" fill="rgb(206,91,31)" fg:x="58" fg:w="3"/><text x="20.1813%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="19.9313%" y="389" width="1.0309%" height="15" fill="rgb(211,154,13)" fg:x="58" fg:w="3"/><text x="20.1813%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="19.9313%" y="373" width="1.0309%" height="15" fill="rgb(225,148,7)" fg:x="58" fg:w="3"/><text x="20.1813%" y="383.50"></text></g><g><title>b-scriptch.8 (4 samples, 1.37%)</title><rect x="20.9622%" y="725" width="1.3746%" height="15" fill="rgb(220,160,43)" fg:x="61" fg:w="4"/><text x="21.2122%" y="735.50"></text></g><g><title>__clone (4 samples, 1.37%)</title><rect x="20.9622%" y="709" width="1.3746%" height="15" fill="rgb(213,52,39)" fg:x="61" fg:w="4"/><text x="21.2122%" y="719.50"></text></g><g><title>start_thread (4 samples, 1.37%)</title><rect x="20.9622%" y="693" width="1.3746%" height="15" fill="rgb(243,137,7)" fg:x="61" fg:w="4"/><text x="21.2122%" y="703.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.37%)</title><rect x="20.9622%" y="677" width="1.3746%" height="15" fill="rgb(230,79,13)" fg:x="61" fg:w="4"/><text x="21.2122%" y="687.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.37%)</title><rect x="20.9622%" y="661" width="1.3746%" height="15" fill="rgb(247,105,23)" fg:x="61" fg:w="4"/><text x="21.2122%" y="671.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.37%)</title><rect x="20.9622%" y="645" width="1.3746%" height="15" fill="rgb(223,179,41)" fg:x="61" fg:w="4"/><text x="21.2122%" y="655.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.37%)</title><rect x="20.9622%" y="629" width="1.3746%" height="15" fill="rgb(218,9,34)" fg:x="61" fg:w="4"/><text x="21.2122%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="613" width="1.3746%" height="15" fill="rgb(222,106,8)" fg:x="61" fg:w="4"/><text x="21.2122%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="597" width="1.3746%" height="15" fill="rgb(211,220,0)" fg:x="61" fg:w="4"/><text x="21.2122%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="581" width="1.3746%" height="15" fill="rgb(229,52,16)" fg:x="61" fg:w="4"/><text x="21.2122%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="565" width="1.3746%" height="15" fill="rgb(212,155,18)" fg:x="61" fg:w="4"/><text x="21.2122%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="549" width="1.3746%" height="15" fill="rgb(242,21,14)" fg:x="61" fg:w="4"/><text x="21.2122%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="533" width="1.3746%" height="15" fill="rgb(222,19,48)" fg:x="61" fg:w="4"/><text x="21.2122%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="517" width="1.3746%" height="15" fill="rgb(232,45,27)" fg:x="61" fg:w="4"/><text x="21.2122%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="501" width="1.3746%" height="15" fill="rgb(249,103,42)" fg:x="61" fg:w="4"/><text x="21.2122%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="485" width="1.3746%" height="15" fill="rgb(246,81,33)" fg:x="61" fg:w="4"/><text x="21.2122%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="469" width="1.3746%" height="15" fill="rgb(252,33,42)" fg:x="61" fg:w="4"/><text x="21.2122%" y="479.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="453" width="1.3746%" height="15" fill="rgb(209,212,41)" fg:x="61" fg:w="4"/><text x="21.2122%" y="463.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="20.9622%" y="437" width="1.3746%" height="15" fill="rgb(207,154,6)" fg:x="61" fg:w="4"/><text x="21.2122%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="21.3058%" y="421" width="1.0309%" height="15" fill="rgb(223,64,47)" fg:x="62" fg:w="3"/><text x="21.5558%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="21.3058%" y="405" width="1.0309%" height="15" fill="rgb(211,161,38)" fg:x="62" fg:w="3"/><text x="21.5558%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="21.3058%" y="389" width="1.0309%" height="15" fill="rgb(219,138,40)" fg:x="62" fg:w="3"/><text x="21.5558%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="21.3058%" y="373" width="1.0309%" height="15" fill="rgb(241,228,46)" fg:x="62" fg:w="3"/><text x="21.5558%" y="383.50"></text></g><g><title>b-scriptch.9 (4 samples, 1.37%)</title><rect x="22.3368%" y="725" width="1.3746%" height="15" fill="rgb(223,209,38)" fg:x="65" fg:w="4"/><text x="22.5868%" y="735.50"></text></g><g><title>__clone (4 samples, 1.37%)</title><rect x="22.3368%" y="709" width="1.3746%" height="15" fill="rgb(236,164,45)" fg:x="65" fg:w="4"/><text x="22.5868%" y="719.50"></text></g><g><title>start_thread (4 samples, 1.37%)</title><rect x="22.3368%" y="693" width="1.3746%" height="15" fill="rgb(231,15,5)" fg:x="65" fg:w="4"/><text x="22.5868%" y="703.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.37%)</title><rect x="22.3368%" y="677" width="1.3746%" height="15" fill="rgb(252,35,15)" fg:x="65" fg:w="4"/><text x="22.5868%" y="687.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.37%)</title><rect x="22.3368%" y="661" width="1.3746%" height="15" fill="rgb(248,181,18)" fg:x="65" fg:w="4"/><text x="22.5868%" y="671.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.37%)</title><rect x="22.3368%" y="645" width="1.3746%" height="15" fill="rgb(233,39,42)" fg:x="65" fg:w="4"/><text x="22.5868%" y="655.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.37%)</title><rect x="22.3368%" y="629" width="1.3746%" height="15" fill="rgb(238,110,33)" fg:x="65" fg:w="4"/><text x="22.5868%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="613" width="1.3746%" height="15" fill="rgb(233,195,10)" fg:x="65" fg:w="4"/><text x="22.5868%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="597" width="1.3746%" height="15" fill="rgb(254,105,3)" fg:x="65" fg:w="4"/><text x="22.5868%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="581" width="1.3746%" height="15" fill="rgb(221,225,9)" fg:x="65" fg:w="4"/><text x="22.5868%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="565" width="1.3746%" height="15" fill="rgb(224,227,45)" fg:x="65" fg:w="4"/><text x="22.5868%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="549" width="1.3746%" height="15" fill="rgb(229,198,43)" fg:x="65" fg:w="4"/><text x="22.5868%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="533" width="1.3746%" height="15" fill="rgb(206,209,35)" fg:x="65" fg:w="4"/><text x="22.5868%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="517" width="1.3746%" height="15" fill="rgb(245,195,53)" fg:x="65" fg:w="4"/><text x="22.5868%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="501" width="1.3746%" height="15" fill="rgb(240,92,26)" fg:x="65" fg:w="4"/><text x="22.5868%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="485" width="1.3746%" height="15" fill="rgb(207,40,23)" fg:x="65" fg:w="4"/><text x="22.5868%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="469" width="1.3746%" height="15" fill="rgb(223,111,35)" fg:x="65" fg:w="4"/><text x="22.5868%" y="479.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="22.3368%" y="453" width="1.3746%" height="15" fill="rgb(229,147,28)" fg:x="65" fg:w="4"/><text x="22.5868%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="22.6804%" y="437" width="1.0309%" height="15" fill="rgb(211,29,28)" fg:x="66" fg:w="3"/><text x="22.9304%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="22.6804%" y="421" width="1.0309%" height="15" fill="rgb(228,72,33)" fg:x="66" fg:w="3"/><text x="22.9304%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="22.6804%" y="405" width="1.0309%" height="15" fill="rgb(205,214,31)" fg:x="66" fg:w="3"/><text x="22.9304%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="22.6804%" y="389" width="1.0309%" height="15" fill="rgb(224,111,15)" fg:x="66" fg:w="3"/><text x="22.9304%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="22.6804%" y="373" width="1.0309%" height="15" fill="rgb(253,21,26)" fg:x="66" fg:w="3"/><text x="22.9304%" y="383.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.34%)</title><rect x="23.7113%" y="693" width="0.3436%" height="15" fill="rgb(245,139,43)" fg:x="69" fg:w="1"/><text x="23.9613%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="23.7113%" y="709" width="0.6873%" height="15" fill="rgb(252,170,7)" fg:x="69" fg:w="2"/><text x="23.9613%" y="719.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="24.0550%" y="693" width="0.3436%" height="15" fill="rgb(231,118,14)" fg:x="70" fg:w="1"/><text x="24.3050%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int const&amp;&gt; &gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="469" width="1.3746%" height="15" fill="rgb(238,83,0)" fg:x="71" fg:w="4"/><text x="24.6486%" y="479.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int const&amp;&gt; &gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="453" width="1.3746%" height="15" fill="rgb(221,39,39)" fg:x="71" fg:w="4"/><text x="24.6486%" y="463.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int const&amp;&gt; &gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="437" width="1.3746%" height="15" fill="rgb(222,119,46)" fg:x="71" fg:w="4"/><text x="24.6486%" y="447.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int const&amp;&gt;::Serialize&lt;DataStream&gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="421" width="1.3746%" height="15" fill="rgb(222,165,49)" fg:x="71" fg:w="4"/><text x="24.6486%" y="431.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="405" width="1.3746%" height="15" fill="rgb(219,113,52)" fg:x="71" fg:w="4"/><text x="24.6486%" y="415.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="389" width="1.3746%" height="15" fill="rgb(214,7,15)" fg:x="71" fg:w="4"/><text x="24.6486%" y="399.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="373" width="1.3746%" height="15" fill="rgb(235,32,4)" fg:x="71" fg:w="4"/><text x="24.6486%" y="383.50"></text></g><g><title>DataStream::write (4 samples, 1.37%)</title><rect x="24.3986%" y="357" width="1.3746%" height="15" fill="rgb(238,90,54)" fg:x="71" fg:w="4"/><text x="24.6486%" y="367.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="341" width="1.3746%" height="15" fill="rgb(213,208,19)" fg:x="71" fg:w="4"/><text x="24.6486%" y="351.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="325" width="1.3746%" height="15" fill="rgb(233,156,4)" fg:x="71" fg:w="4"/><text x="24.6486%" y="335.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="309" width="1.3746%" height="15" fill="rgb(207,194,5)" fg:x="71" fg:w="4"/><text x="24.6486%" y="319.50"></text></g><g><title>decltype  (4 samples, 1.37%)</title><rect x="24.3986%" y="293" width="1.3746%" height="15" fill="rgb(206,111,30)" fg:x="71" fg:w="4"/><text x="24.6486%" y="303.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (4 samples, 1.37%)</title><rect x="24.3986%" y="277" width="1.3746%" height="15" fill="rgb(243,70,54)" fg:x="71" fg:w="4"/><text x="24.6486%" y="287.50"></text></g><g><title>decltype  (4 samples, 1.37%)</title><rect x="24.3986%" y="261" width="1.3746%" height="15" fill="rgb(242,28,8)" fg:x="71" fg:w="4"/><text x="24.6486%" y="271.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="24.3986%" y="245" width="1.3746%" height="15" fill="rgb(219,106,18)" fg:x="71" fg:w="4"/><text x="24.6486%" y="255.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="24.3986%" y="229" width="1.3746%" height="15" fill="rgb(244,222,10)" fg:x="71" fg:w="4"/><text x="24.6486%" y="239.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="24.3986%" y="213" width="1.3746%" height="15" fill="rgb(236,179,52)" fg:x="71" fg:w="4"/><text x="24.6486%" y="223.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="24.3986%" y="197" width="1.3746%" height="15" fill="rgb(213,23,39)" fg:x="71" fg:w="4"/><text x="24.6486%" y="207.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="24.3986%" y="181" width="1.3746%" height="15" fill="rgb(238,48,10)" fg:x="71" fg:w="4"/><text x="24.6486%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="165" width="1.0309%" height="15" fill="rgb(251,196,23)" fg:x="72" fg:w="3"/><text x="24.9923%" y="175.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="149" width="1.0309%" height="15" fill="rgb(250,152,24)" fg:x="72" fg:w="3"/><text x="24.9923%" y="159.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="133" width="1.0309%" height="15" fill="rgb(209,150,17)" fg:x="72" fg:w="3"/><text x="24.9923%" y="143.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="117" width="1.0309%" height="15" fill="rgb(234,202,34)" fg:x="72" fg:w="3"/><text x="24.9923%" y="127.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="101" width="1.0309%" height="15" fill="rgb(253,148,53)" fg:x="72" fg:w="3"/><text x="24.9923%" y="111.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="85" width="1.0309%" height="15" fill="rgb(218,129,16)" fg:x="72" fg:w="3"/><text x="24.9923%" y="95.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="69" width="1.0309%" height="15" fill="rgb(216,85,19)" fg:x="72" fg:w="3"/><text x="24.9923%" y="79.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="53" width="1.0309%" height="15" fill="rgb(235,228,7)" fg:x="72" fg:w="3"/><text x="24.9923%" y="63.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="24.7423%" y="37" width="1.0309%" height="15" fill="rgb(245,175,0)" fg:x="72" fg:w="3"/><text x="24.9923%" y="47.50"></text></g><g><title>kernel::BlockTreeDB::WriteBatchSync (9 samples, 3.09%)</title><rect x="24.3986%" y="581" width="3.0928%" height="15" fill="rgb(208,168,36)" fg:x="71" fg:w="9"/><text x="24.6486%" y="591.50">ker..</text></g><g><title>void CDBBatch::Write&lt;std::pair&lt;unsigned char, uint256&gt;, CDiskBlockIndex&gt; (9 samples, 3.09%)</title><rect x="24.3986%" y="565" width="3.0928%" height="15" fill="rgb(246,171,24)" fg:x="71" fg:w="9"/><text x="24.6486%" y="575.50">voi..</text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;CDiskBlockIndex&gt;(CDiskBlockIndex const&amp;) (9 samples, 3.09%)</title><rect x="24.3986%" y="549" width="3.0928%" height="15" fill="rgb(215,142,24)" fg:x="71" fg:w="9"/><text x="24.6486%" y="559.50">Dat..</text></g><g><title>void Serialize&lt;DataStream, CDiskBlockIndex&gt; (9 samples, 3.09%)</title><rect x="24.3986%" y="533" width="3.0928%" height="15" fill="rgb(250,187,7)" fg:x="71" fg:w="9"/><text x="24.6486%" y="543.50">voi..</text></g><g><title>void CDiskBlockIndex::Serialize&lt;DataStream&gt; (9 samples, 3.09%)</title><rect x="24.3986%" y="517" width="3.0928%" height="15" fill="rgb(228,66,33)" fg:x="71" fg:w="9"/><text x="24.6486%" y="527.50">voi..</text></g><g><title>void CDiskBlockIndex::Ser&lt;DataStream&gt; (9 samples, 3.09%)</title><rect x="24.3986%" y="501" width="3.0928%" height="15" fill="rgb(234,215,21)" fg:x="71" fg:w="9"/><text x="24.6486%" y="511.50">voi..</text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex const, ActionSerialize&gt; (9 samples, 3.09%)</title><rect x="24.3986%" y="485" width="3.0928%" height="15" fill="rgb(222,191,20)" fg:x="71" fg:w="9"/><text x="24.6486%" y="495.50">voi..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, uint256&gt; (5 samples, 1.72%)</title><rect x="25.7732%" y="469" width="1.7182%" height="15" fill="rgb(245,79,54)" fg:x="75" fg:w="5"/><text x="26.0232%" y="479.50"></text></g><g><title>void SerializeMany&lt;DataStream, uint256&gt; (5 samples, 1.72%)</title><rect x="25.7732%" y="453" width="1.7182%" height="15" fill="rgb(240,10,37)" fg:x="75" fg:w="5"/><text x="26.0232%" y="463.50"></text></g><g><title>void Serialize&lt;DataStream, uint256&gt; (5 samples, 1.72%)</title><rect x="25.7732%" y="437" width="1.7182%" height="15" fill="rgb(214,192,32)" fg:x="75" fg:w="5"/><text x="26.0232%" y="447.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (5 samples, 1.72%)</title><rect x="25.7732%" y="421" width="1.7182%" height="15" fill="rgb(209,36,54)" fg:x="75" fg:w="5"/><text x="26.0232%" y="431.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (5 samples, 1.72%)</title><rect x="25.7732%" y="405" width="1.7182%" height="15" fill="rgb(220,10,11)" fg:x="75" fg:w="5"/><text x="26.0232%" y="415.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (5 samples, 1.72%)</title><rect x="25.7732%" y="389" width="1.7182%" height="15" fill="rgb(221,106,17)" fg:x="75" fg:w="5"/><text x="26.0232%" y="399.50"></text></g><g><title>DataStream::write (5 samples, 1.72%)</title><rect x="25.7732%" y="373" width="1.7182%" height="15" fill="rgb(251,142,44)" fg:x="75" fg:w="5"/><text x="26.0232%" y="383.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (5 samples, 1.72%)</title><rect x="25.7732%" y="357" width="1.7182%" height="15" fill="rgb(238,13,15)" fg:x="75" fg:w="5"/><text x="26.0232%" y="367.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (5 samples, 1.72%)</title><rect x="25.7732%" y="341" width="1.7182%" height="15" fill="rgb(208,107,27)" fg:x="75" fg:w="5"/><text x="26.0232%" y="351.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (4 samples, 1.37%)</title><rect x="26.1168%" y="325" width="1.3746%" height="15" fill="rgb(205,136,37)" fg:x="76" fg:w="4"/><text x="26.3668%" y="335.50"></text></g><g><title>decltype  (4 samples, 1.37%)</title><rect x="26.1168%" y="309" width="1.3746%" height="15" fill="rgb(250,205,27)" fg:x="76" fg:w="4"/><text x="26.3668%" y="319.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (4 samples, 1.37%)</title><rect x="26.1168%" y="293" width="1.3746%" height="15" fill="rgb(210,80,43)" fg:x="76" fg:w="4"/><text x="26.3668%" y="303.50"></text></g><g><title>decltype  (4 samples, 1.37%)</title><rect x="26.1168%" y="277" width="1.3746%" height="15" fill="rgb(247,160,36)" fg:x="76" fg:w="4"/><text x="26.3668%" y="287.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="26.1168%" y="261" width="1.3746%" height="15" fill="rgb(234,13,49)" fg:x="76" fg:w="4"/><text x="26.3668%" y="271.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="26.1168%" y="245" width="1.3746%" height="15" fill="rgb(234,122,0)" fg:x="76" fg:w="4"/><text x="26.3668%" y="255.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="26.1168%" y="229" width="1.3746%" height="15" fill="rgb(207,146,38)" fg:x="76" fg:w="4"/><text x="26.3668%" y="239.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="26.1168%" y="213" width="1.3746%" height="15" fill="rgb(207,177,25)" fg:x="76" fg:w="4"/><text x="26.3668%" y="223.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="197" width="1.0309%" height="15" fill="rgb(211,178,42)" fg:x="77" fg:w="3"/><text x="26.7105%" y="207.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="181" width="1.0309%" height="15" fill="rgb(230,69,54)" fg:x="77" fg:w="3"/><text x="26.7105%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="165" width="1.0309%" height="15" fill="rgb(214,135,41)" fg:x="77" fg:w="3"/><text x="26.7105%" y="175.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="149" width="1.0309%" height="15" fill="rgb(237,67,25)" fg:x="77" fg:w="3"/><text x="26.7105%" y="159.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="133" width="1.0309%" height="15" fill="rgb(222,189,50)" fg:x="77" fg:w="3"/><text x="26.7105%" y="143.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="117" width="1.0309%" height="15" fill="rgb(245,148,34)" fg:x="77" fg:w="3"/><text x="26.7105%" y="127.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="101" width="1.0309%" height="15" fill="rgb(222,29,6)" fg:x="77" fg:w="3"/><text x="26.7105%" y="111.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="85" width="1.0309%" height="15" fill="rgb(221,189,43)" fg:x="77" fg:w="3"/><text x="26.7105%" y="95.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="69" width="1.0309%" height="15" fill="rgb(207,36,27)" fg:x="77" fg:w="3"/><text x="26.7105%" y="79.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="53" width="1.0309%" height="15" fill="rgb(217,90,24)" fg:x="77" fg:w="3"/><text x="26.7105%" y="63.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="26.4605%" y="37" width="1.0309%" height="15" fill="rgb(224,66,35)" fg:x="77" fg:w="3"/><text x="26.7105%" y="47.50"></text></g><g><title>b-shutoff (12 samples, 4.12%)</title><rect x="23.7113%" y="725" width="4.1237%" height="15" fill="rgb(221,13,50)" fg:x="69" fg:w="12"/><text x="23.9613%" y="735.50">b-sh..</text></g><g><title>_start (10 samples, 3.44%)</title><rect x="24.3986%" y="709" width="3.4364%" height="15" fill="rgb(236,68,49)" fg:x="71" fg:w="10"/><text x="24.6486%" y="719.50">_st..</text></g><g><title>__libc_start_main@@GLIBC_2.34 (10 samples, 3.44%)</title><rect x="24.3986%" y="693" width="3.4364%" height="15" fill="rgb(229,146,28)" fg:x="71" fg:w="10"/><text x="24.6486%" y="703.50">__l..</text></g><g><title>__libc_start_call_main (10 samples, 3.44%)</title><rect x="24.3986%" y="677" width="3.4364%" height="15" fill="rgb(225,31,38)" fg:x="71" fg:w="10"/><text x="24.6486%" y="687.50">__l..</text></g><g><title>main (10 samples, 3.44%)</title><rect x="24.3986%" y="661" width="3.4364%" height="15" fill="rgb(250,208,3)" fg:x="71" fg:w="10"/><text x="24.6486%" y="671.50">main</text></g><g><title>Shutdown (10 samples, 3.44%)</title><rect x="24.3986%" y="645" width="3.4364%" height="15" fill="rgb(246,54,23)" fg:x="71" fg:w="10"/><text x="24.6486%" y="655.50">Shu..</text></g><g><title>Chainstate::ForceFlushStateToDisk (10 samples, 3.44%)</title><rect x="24.3986%" y="629" width="3.4364%" height="15" fill="rgb(243,76,11)" fg:x="71" fg:w="10"/><text x="24.6486%" y="639.50">Cha..</text></g><g><title>Chainstate::FlushStateToDisk (10 samples, 3.44%)</title><rect x="24.3986%" y="613" width="3.4364%" height="15" fill="rgb(245,21,50)" fg:x="71" fg:w="10"/><text x="24.6486%" y="623.50">Cha..</text></g><g><title>node::BlockManager::WriteBlockIndexDB (10 samples, 3.44%)</title><rect x="24.3986%" y="597" width="3.4364%" height="15" fill="rgb(228,9,43)" fg:x="71" fg:w="10"/><text x="24.6486%" y="607.50">nod..</text></g><g><title>leveldb::PutVarint32 (1 samples, 0.34%)</title><rect x="27.4914%" y="581" width="0.3436%" height="15" fill="rgb(208,100,47)" fg:x="80" fg:w="1"/><text x="27.7414%" y="591.50"></text></g><g><title>AppInitMain (1 samples, 0.34%)</title><rect x="27.8351%" y="709" width="0.3436%" height="15" fill="rgb(232,26,8)" fg:x="81" fg:w="1"/><text x="28.0851%" y="719.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.34%)</title><rect x="27.8351%" y="693" width="0.3436%" height="15" fill="rgb(216,166,38)" fg:x="81" fg:w="1"/><text x="28.0851%" y="703.50"></text></g><g><title>operator (1 samples, 0.34%)</title><rect x="27.8351%" y="677" width="0.3436%" height="15" fill="rgb(251,202,51)" fg:x="81" fg:w="1"/><text x="28.0851%" y="687.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.34%)</title><rect x="27.8351%" y="661" width="0.3436%" height="15" fill="rgb(254,216,34)" fg:x="81" fg:w="1"/><text x="28.0851%" y="671.50"></text></g><g><title>node::LoadChainstate (1 samples, 0.34%)</title><rect x="27.8351%" y="645" width="0.3436%" height="15" fill="rgb(251,32,27)" fg:x="81" fg:w="1"/><text x="28.0851%" y="655.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.34%)</title><rect x="27.8351%" y="629" width="0.3436%" height="15" fill="rgb(208,127,28)" fg:x="81" fg:w="1"/><text x="28.0851%" y="639.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.34%)</title><rect x="27.8351%" y="613" width="0.3436%" height="15" fill="rgb(224,137,22)" fg:x="81" fg:w="1"/><text x="28.0851%" y="623.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.34%)</title><rect x="27.8351%" y="597" width="0.3436%" height="15" fill="rgb(254,70,32)" fg:x="81" fg:w="1"/><text x="28.0851%" y="607.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.34%)</title><rect x="27.8351%" y="581" width="0.3436%" height="15" fill="rgb(229,75,37)" fg:x="81" fg:w="1"/><text x="28.0851%" y="591.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.34%)</title><rect x="27.8351%" y="565" width="0.3436%" height="15" fill="rgb(252,64,23)" fg:x="81" fg:w="1"/><text x="28.0851%" y="575.50"></text></g><g><title>leveldb::DBImpl::Recover (1 samples, 0.34%)</title><rect x="27.8351%" y="549" width="0.3436%" height="15" fill="rgb(232,162,48)" fg:x="81" fg:w="1"/><text x="28.0851%" y="559.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (1 samples, 0.34%)</title><rect x="27.8351%" y="533" width="0.3436%" height="15" fill="rgb(246,160,12)" fg:x="81" fg:w="1"/><text x="28.0851%" y="543.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (1 samples, 0.34%)</title><rect x="27.8351%" y="517" width="0.3436%" height="15" fill="rgb(247,166,0)" fg:x="81" fg:w="1"/><text x="28.0851%" y="527.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.34%)</title><rect x="27.8351%" y="501" width="0.3436%" height="15" fill="rgb(249,219,21)" fg:x="81" fg:w="1"/><text x="28.0851%" y="511.50"></text></g><g><title>leveldb::TableCache::NewIterator (1 samples, 0.34%)</title><rect x="27.8351%" y="485" width="0.3436%" height="15" fill="rgb(205,209,3)" fg:x="81" fg:w="1"/><text x="28.0851%" y="495.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.34%)</title><rect x="27.8351%" y="469" width="0.3436%" height="15" fill="rgb(243,44,1)" fg:x="81" fg:w="1"/><text x="28.0851%" y="479.50"></text></g><g><title>leveldb::Table::Open (1 samples, 0.34%)</title><rect x="27.8351%" y="453" width="0.3436%" height="15" fill="rgb(206,159,16)" fg:x="81" fg:w="1"/><text x="28.0851%" y="463.50"></text></g><g><title>leveldb::Table::ReadMeta (1 samples, 0.34%)</title><rect x="27.8351%" y="437" width="0.3436%" height="15" fill="rgb(244,77,30)" fg:x="81" fg:w="1"/><text x="28.0851%" y="447.50"></text></g><g><title>leveldb::Table::ReadFilter (1 samples, 0.34%)</title><rect x="27.8351%" y="421" width="0.3436%" height="15" fill="rgb(218,69,12)" fg:x="81" fg:w="1"/><text x="28.0851%" y="431.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.34%)</title><rect x="27.8351%" y="405" width="0.3436%" height="15" fill="rgb(212,87,7)" fg:x="81" fg:w="1"/><text x="28.0851%" y="415.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.34%)</title><rect x="27.8351%" y="389" width="0.3436%" height="15" fill="rgb(245,114,25)" fg:x="81" fg:w="1"/><text x="28.0851%" y="399.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.34%)</title><rect x="27.8351%" y="373" width="0.3436%" height="15" fill="rgb(210,61,42)" fg:x="81" fg:w="1"/><text x="28.0851%" y="383.50"></text></g><g><title>crc32c::RequestPrefetch (1 samples, 0.34%)</title><rect x="27.8351%" y="357" width="0.3436%" height="15" fill="rgb(211,52,33)" fg:x="81" fg:w="1"/><text x="28.0851%" y="367.50"></text></g><g><title>__clone (73 samples, 25.09%)</title><rect x="28.1787%" y="693" width="25.0859%" height="15" fill="rgb(234,58,33)" fg:x="82" fg:w="73"/><text x="28.4287%" y="703.50">__clone</text></g><g><title>[unknown] (73 samples, 25.09%)</title><rect x="28.1787%" y="677" width="25.0859%" height="15" fill="rgb(220,115,36)" fg:x="82" fg:w="73"/><text x="28.4287%" y="687.50">[unknown]</text></g><g><title>[unknown] (68 samples, 23.37%)</title><rect x="29.8969%" y="661" width="23.3677%" height="15" fill="rgb(243,153,54)" fg:x="87" fg:w="68"/><text x="30.1469%" y="671.50">[unknown]</text></g><g><title>[unknown] (66 samples, 22.68%)</title><rect x="30.5842%" y="645" width="22.6804%" height="15" fill="rgb(251,47,18)" fg:x="89" fg:w="66"/><text x="30.8342%" y="655.50">[unknown]</text></g><g><title>[unknown] (65 samples, 22.34%)</title><rect x="30.9278%" y="629" width="22.3368%" height="15" fill="rgb(242,102,42)" fg:x="90" fg:w="65"/><text x="31.1778%" y="639.50">[unknown]</text></g><g><title>[unknown] (64 samples, 21.99%)</title><rect x="31.2715%" y="613" width="21.9931%" height="15" fill="rgb(234,31,38)" fg:x="91" fg:w="64"/><text x="31.5215%" y="623.50">[unknown]</text></g><g><title>[unknown] (64 samples, 21.99%)</title><rect x="31.2715%" y="597" width="21.9931%" height="15" fill="rgb(221,117,51)" fg:x="91" fg:w="64"/><text x="31.5215%" y="607.50">[unknown]</text></g><g><title>[unknown] (64 samples, 21.99%)</title><rect x="31.2715%" y="581" width="21.9931%" height="15" fill="rgb(212,20,18)" fg:x="91" fg:w="64"/><text x="31.5215%" y="591.50">[unknown]</text></g><g><title>[unknown] (64 samples, 21.99%)</title><rect x="31.2715%" y="565" width="21.9931%" height="15" fill="rgb(245,133,36)" fg:x="91" fg:w="64"/><text x="31.5215%" y="575.50">[unknown]</text></g><g><title>[unknown] (64 samples, 21.99%)</title><rect x="31.2715%" y="549" width="21.9931%" height="15" fill="rgb(212,6,19)" fg:x="91" fg:w="64"/><text x="31.5215%" y="559.50">[unknown]</text></g><g><title>[unknown] (22 samples, 7.56%)</title><rect x="45.7045%" y="533" width="7.5601%" height="15" fill="rgb(218,1,36)" fg:x="133" fg:w="22"/><text x="45.9545%" y="543.50">[unknown]</text></g><g><title>[unknown] (7 samples, 2.41%)</title><rect x="50.8591%" y="517" width="2.4055%" height="15" fill="rgb(246,84,54)" fg:x="148" fg:w="7"/><text x="51.1091%" y="527.50">[u..</text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="52.9210%" y="501" width="0.3436%" height="15" fill="rgb(242,110,6)" fg:x="154" fg:w="1"/><text x="53.1710%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="52.9210%" y="485" width="0.3436%" height="15" fill="rgb(214,47,5)" fg:x="154" fg:w="1"/><text x="53.1710%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="52.9210%" y="469" width="0.3436%" height="15" fill="rgb(218,159,25)" fg:x="154" fg:w="1"/><text x="53.1710%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="52.9210%" y="453" width="0.3436%" height="15" fill="rgb(215,211,28)" fg:x="154" fg:w="1"/><text x="53.1710%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.34%)</title><rect x="53.2646%" y="693" width="0.3436%" height="15" fill="rgb(238,59,32)" fg:x="155" fg:w="1"/><text x="53.5146%" y="703.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="53.6082%" y="693" width="0.3436%" height="15" fill="rgb(226,82,3)" fg:x="156" fg:w="1"/><text x="53.8582%" y="703.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.34%)</title><rect x="53.9519%" y="693" width="0.3436%" height="15" fill="rgb(240,164,32)" fg:x="157" fg:w="1"/><text x="54.2019%" y="703.50"></text></g><g><title>[[heap]] (77 samples, 26.46%)</title><rect x="28.1787%" y="709" width="26.4605%" height="15" fill="rgb(232,46,7)" fg:x="82" fg:w="77"/><text x="28.4287%" y="719.50">[[heap]]</text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.34%)</title><rect x="54.2955%" y="693" width="0.3436%" height="15" fill="rgb(229,129,53)" fg:x="158" fg:w="1"/><text x="54.5455%" y="703.50"></text></g><g><title>_int_malloc (1 samples, 0.34%)</title><rect x="54.6392%" y="693" width="0.3436%" height="15" fill="rgb(234,188,29)" fg:x="159" fg:w="1"/><text x="54.8892%" y="703.50"></text></g><g><title>[[stack]] (2 samples, 0.69%)</title><rect x="54.6392%" y="709" width="0.6873%" height="15" fill="rgb(246,141,4)" fg:x="159" fg:w="2"/><text x="54.8892%" y="719.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.34%)</title><rect x="54.9828%" y="693" width="0.3436%" height="15" fill="rgb(229,23,39)" fg:x="160" fg:w="1"/><text x="55.2328%" y="703.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.34%)</title><rect x="55.3265%" y="693" width="0.3436%" height="15" fill="rgb(206,12,3)" fg:x="161" fg:w="1"/><text x="55.5765%" y="703.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.69%)</title><rect x="55.6701%" y="693" width="0.6873%" height="15" fill="rgb(252,226,20)" fg:x="162" fg:w="2"/><text x="55.9201%" y="703.50"></text></g><g><title>[anon] (4 samples, 1.37%)</title><rect x="55.3265%" y="709" width="1.3746%" height="15" fill="rgb(216,123,35)" fg:x="161" fg:w="4"/><text x="55.5765%" y="719.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.34%)</title><rect x="56.3574%" y="693" width="0.3436%" height="15" fill="rgb(212,68,40)" fg:x="164" fg:w="1"/><text x="56.6074%" y="703.50"></text></g><g><title>[bitcoind-base] (1 samples, 0.34%)</title><rect x="56.7010%" y="709" width="0.3436%" height="15" fill="rgb(254,125,32)" fg:x="165" fg:w="1"/><text x="56.9510%" y="719.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.34%)</title><rect x="56.7010%" y="693" width="0.3436%" height="15" fill="rgb(253,97,22)" fg:x="165" fg:w="1"/><text x="56.9510%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="693" width="0.3436%" height="15" fill="rgb(241,101,14)" fg:x="166" fg:w="1"/><text x="57.2947%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="677" width="0.3436%" height="15" fill="rgb(238,103,29)" fg:x="166" fg:w="1"/><text x="57.2947%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="661" width="0.3436%" height="15" fill="rgb(233,195,47)" fg:x="166" fg:w="1"/><text x="57.2947%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="645" width="0.3436%" height="15" fill="rgb(246,218,30)" fg:x="166" fg:w="1"/><text x="57.2947%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="629" width="0.3436%" height="15" fill="rgb(219,145,47)" fg:x="166" fg:w="1"/><text x="57.2947%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="613" width="0.3436%" height="15" fill="rgb(243,12,26)" fg:x="166" fg:w="1"/><text x="57.2947%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="597" width="0.3436%" height="15" fill="rgb(214,87,16)" fg:x="166" fg:w="1"/><text x="57.2947%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="581" width="0.3436%" height="15" fill="rgb(208,99,42)" fg:x="166" fg:w="1"/><text x="57.2947%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="565" width="0.3436%" height="15" fill="rgb(253,99,2)" fg:x="166" fg:w="1"/><text x="57.2947%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="549" width="0.3436%" height="15" fill="rgb(220,168,23)" fg:x="166" fg:w="1"/><text x="57.2947%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="533" width="0.3436%" height="15" fill="rgb(242,38,24)" fg:x="166" fg:w="1"/><text x="57.2947%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="57.0447%" y="517" width="0.3436%" height="15" fill="rgb(225,182,9)" fg:x="166" fg:w="1"/><text x="57.2947%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="57.0447%" y="709" width="0.6873%" height="15" fill="rgb(243,178,37)" fg:x="166" fg:w="2"/><text x="57.2947%" y="719.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.34%)</title><rect x="57.3883%" y="693" width="0.3436%" height="15" fill="rgb(232,139,19)" fg:x="167" fg:w="1"/><text x="57.6383%" y="703.50"></text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="58.0756%" y="677" width="2.7491%" height="15" fill="rgb(225,201,24)" fg:x="169" fg:w="8"/><text x="58.3256%" y="687.50">[u..</text></g><g><title>[unknown] (7 samples, 2.41%)</title><rect x="58.4192%" y="661" width="2.4055%" height="15" fill="rgb(221,47,46)" fg:x="170" fg:w="7"/><text x="58.6692%" y="671.50">[u..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="58.7629%" y="645" width="2.0619%" height="15" fill="rgb(249,23,13)" fg:x="171" fg:w="6"/><text x="59.0129%" y="655.50">[..</text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="59.7938%" y="629" width="1.0309%" height="15" fill="rgb(219,9,5)" fg:x="174" fg:w="3"/><text x="60.0438%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="60.4811%" y="613" width="0.3436%" height="15" fill="rgb(254,171,16)" fg:x="176" fg:w="1"/><text x="60.7311%" y="623.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.34%)</title><rect x="60.8247%" y="597" width="0.3436%" height="15" fill="rgb(230,171,20)" fg:x="177" fg:w="1"/><text x="61.0747%" y="607.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.34%)</title><rect x="60.8247%" y="581" width="0.3436%" height="15" fill="rgb(210,71,41)" fg:x="177" fg:w="1"/><text x="61.0747%" y="591.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.34%)</title><rect x="60.8247%" y="565" width="0.3436%" height="15" fill="rgb(206,173,20)" fg:x="177" fg:w="1"/><text x="61.0747%" y="575.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.34%)</title><rect x="61.1684%" y="597" width="0.3436%" height="15" fill="rgb(233,88,34)" fg:x="178" fg:w="1"/><text x="61.4184%" y="607.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1 samples, 0.34%)</title><rect x="61.5120%" y="597" width="0.3436%" height="15" fill="rgb(223,209,46)" fg:x="179" fg:w="1"/><text x="61.7620%" y="607.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1 samples, 0.34%)</title><rect x="61.5120%" y="581" width="0.3436%" height="15" fill="rgb(250,43,18)" fg:x="179" fg:w="1"/><text x="61.7620%" y="591.50"></text></g><g><title>__unlink (1 samples, 0.34%)</title><rect x="61.5120%" y="565" width="0.3436%" height="15" fill="rgb(208,13,10)" fg:x="179" fg:w="1"/><text x="61.7620%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="549" width="0.3436%" height="15" fill="rgb(212,200,36)" fg:x="179" fg:w="1"/><text x="61.7620%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="533" width="0.3436%" height="15" fill="rgb(225,90,30)" fg:x="179" fg:w="1"/><text x="61.7620%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="517" width="0.3436%" height="15" fill="rgb(236,182,39)" fg:x="179" fg:w="1"/><text x="61.7620%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="501" width="0.3436%" height="15" fill="rgb(212,144,35)" fg:x="179" fg:w="1"/><text x="61.7620%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="485" width="0.3436%" height="15" fill="rgb(228,63,44)" fg:x="179" fg:w="1"/><text x="61.7620%" y="495.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="61.5120%" y="469" width="0.3436%" height="15" fill="rgb(228,109,6)" fg:x="179" fg:w="1"/><text x="61.7620%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="453" width="0.3436%" height="15" fill="rgb(238,117,24)" fg:x="179" fg:w="1"/><text x="61.7620%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="437" width="0.3436%" height="15" fill="rgb(242,26,26)" fg:x="179" fg:w="1"/><text x="61.7620%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="421" width="0.3436%" height="15" fill="rgb(221,92,48)" fg:x="179" fg:w="1"/><text x="61.7620%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="405" width="0.3436%" height="15" fill="rgb(209,209,32)" fg:x="179" fg:w="1"/><text x="61.7620%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="389" width="0.3436%" height="15" fill="rgb(221,70,22)" fg:x="179" fg:w="1"/><text x="61.7620%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="373" width="0.3436%" height="15" fill="rgb(248,145,5)" fg:x="179" fg:w="1"/><text x="61.7620%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="61.5120%" y="357" width="0.3436%" height="15" fill="rgb(226,116,26)" fg:x="179" fg:w="1"/><text x="61.7620%" y="367.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.34%)</title><rect x="61.8557%" y="565" width="0.3436%" height="15" fill="rgb(244,5,17)" fg:x="180" fg:w="1"/><text x="62.1057%" y="575.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.34%)</title><rect x="61.8557%" y="549" width="0.3436%" height="15" fill="rgb(252,159,33)" fg:x="180" fg:w="1"/><text x="62.1057%" y="559.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="62.1993%" y="437" width="0.3436%" height="15" fill="rgb(206,71,0)" fg:x="181" fg:w="1"/><text x="62.4493%" y="447.50"></text></g><g><title>_int_free (1 samples, 0.34%)</title><rect x="62.1993%" y="421" width="0.3436%" height="15" fill="rgb(233,118,54)" fg:x="181" fg:w="1"/><text x="62.4493%" y="431.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (3 samples, 1.03%)</title><rect x="61.8557%" y="581" width="1.0309%" height="15" fill="rgb(234,83,48)" fg:x="180" fg:w="3"/><text x="62.1057%" y="591.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.69%)</title><rect x="62.1993%" y="565" width="0.6873%" height="15" fill="rgb(228,3,54)" fg:x="181" fg:w="2"/><text x="62.4493%" y="575.50"></text></g><g><title>Next (2 samples, 0.69%)</title><rect x="62.1993%" y="549" width="0.6873%" height="15" fill="rgb(226,155,13)" fg:x="181" fg:w="2"/><text x="62.4493%" y="559.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.69%)</title><rect x="62.1993%" y="533" width="0.6873%" height="15" fill="rgb(241,28,37)" fg:x="181" fg:w="2"/><text x="62.4493%" y="543.50"></text></g><g><title>SkipEmptyDataBlocksForward (2 samples, 0.69%)</title><rect x="62.1993%" y="517" width="0.6873%" height="15" fill="rgb(233,93,10)" fg:x="181" fg:w="2"/><text x="62.4493%" y="527.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (2 samples, 0.69%)</title><rect x="62.1993%" y="501" width="0.6873%" height="15" fill="rgb(225,113,19)" fg:x="181" fg:w="2"/><text x="62.4493%" y="511.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (2 samples, 0.69%)</title><rect x="62.1993%" y="485" width="0.6873%" height="15" fill="rgb(241,2,18)" fg:x="181" fg:w="2"/><text x="62.4493%" y="495.50"></text></g><g><title>leveldb::Table::BlockReader (2 samples, 0.69%)</title><rect x="62.1993%" y="469" width="0.6873%" height="15" fill="rgb(228,207,21)" fg:x="181" fg:w="2"/><text x="62.4493%" y="479.50"></text></g><g><title>leveldb::ReadBlock (2 samples, 0.69%)</title><rect x="62.1993%" y="453" width="0.6873%" height="15" fill="rgb(213,211,35)" fg:x="181" fg:w="2"/><text x="62.4493%" y="463.50"></text></g><g><title>leveldb::crc32c::Unmask (1 samples, 0.34%)</title><rect x="62.5430%" y="437" width="0.3436%" height="15" fill="rgb(209,83,10)" fg:x="182" fg:w="1"/><text x="62.7930%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="421" width="0.3436%" height="15" fill="rgb(209,164,1)" fg:x="182" fg:w="1"/><text x="62.7930%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="405" width="0.3436%" height="15" fill="rgb(213,184,43)" fg:x="182" fg:w="1"/><text x="62.7930%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="389" width="0.3436%" height="15" fill="rgb(231,61,34)" fg:x="182" fg:w="1"/><text x="62.7930%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="373" width="0.3436%" height="15" fill="rgb(235,75,3)" fg:x="182" fg:w="1"/><text x="62.7930%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="357" width="0.3436%" height="15" fill="rgb(220,106,47)" fg:x="182" fg:w="1"/><text x="62.7930%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="341" width="0.3436%" height="15" fill="rgb(210,196,33)" fg:x="182" fg:w="1"/><text x="62.7930%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="325" width="0.3436%" height="15" fill="rgb(229,154,42)" fg:x="182" fg:w="1"/><text x="62.7930%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="62.5430%" y="309" width="0.3436%" height="15" fill="rgb(228,114,26)" fg:x="182" fg:w="1"/><text x="62.7930%" y="319.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (5 samples, 1.72%)</title><rect x="62.8866%" y="581" width="1.7182%" height="15" fill="rgb(208,144,1)" fg:x="183" fg:w="5"/><text x="63.1366%" y="591.50"></text></g><g><title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (4 samples, 1.37%)</title><rect x="63.2302%" y="565" width="1.3746%" height="15" fill="rgb(239,112,37)" fg:x="184" fg:w="4"/><text x="63.4802%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="63.2302%" y="549" width="1.3746%" height="15" fill="rgb(210,96,50)" fg:x="184" fg:w="4"/><text x="63.4802%" y="559.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="533" width="1.0309%" height="15" fill="rgb(222,178,2)" fg:x="185" fg:w="3"/><text x="63.8239%" y="543.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="517" width="1.0309%" height="15" fill="rgb(226,74,18)" fg:x="185" fg:w="3"/><text x="63.8239%" y="527.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="501" width="1.0309%" height="15" fill="rgb(225,67,54)" fg:x="185" fg:w="3"/><text x="63.8239%" y="511.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="485" width="1.0309%" height="15" fill="rgb(251,92,32)" fg:x="185" fg:w="3"/><text x="63.8239%" y="495.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="469" width="1.0309%" height="15" fill="rgb(228,149,22)" fg:x="185" fg:w="3"/><text x="63.8239%" y="479.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="453" width="1.0309%" height="15" fill="rgb(243,54,13)" fg:x="185" fg:w="3"/><text x="63.8239%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="437" width="1.0309%" height="15" fill="rgb(243,180,28)" fg:x="185" fg:w="3"/><text x="63.8239%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="421" width="1.0309%" height="15" fill="rgb(208,167,24)" fg:x="185" fg:w="3"/><text x="63.8239%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="405" width="1.0309%" height="15" fill="rgb(245,73,45)" fg:x="185" fg:w="3"/><text x="63.8239%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="63.5739%" y="389" width="1.0309%" height="15" fill="rgb(237,203,48)" fg:x="185" fg:w="3"/><text x="63.8239%" y="399.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (3 samples, 1.03%)</title><rect x="64.6048%" y="581" width="1.0309%" height="15" fill="rgb(211,197,16)" fg:x="188" fg:w="3"/><text x="64.8548%" y="591.50"></text></g><g><title>Sync (3 samples, 1.03%)</title><rect x="64.6048%" y="565" width="1.0309%" height="15" fill="rgb(243,99,51)" fg:x="188" fg:w="3"/><text x="64.8548%" y="575.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (3 samples, 1.03%)</title><rect x="64.6048%" y="549" width="1.0309%" height="15" fill="rgb(215,123,29)" fg:x="188" fg:w="3"/><text x="64.8548%" y="559.50"></text></g><g><title>fdatasync (3 samples, 1.03%)</title><rect x="64.6048%" y="533" width="1.0309%" height="15" fill="rgb(239,186,37)" fg:x="188" fg:w="3"/><text x="64.8548%" y="543.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="64.6048%" y="517" width="1.0309%" height="15" fill="rgb(252,136,39)" fg:x="188" fg:w="3"/><text x="64.8548%" y="527.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="64.6048%" y="501" width="1.0309%" height="15" fill="rgb(223,213,32)" fg:x="188" fg:w="3"/><text x="64.8548%" y="511.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="64.6048%" y="485" width="1.0309%" height="15" fill="rgb(233,115,5)" fg:x="188" fg:w="3"/><text x="64.8548%" y="495.50"></text></g><g><title>[[ext4]] (3 samples, 1.03%)</title><rect x="64.6048%" y="469" width="1.0309%" height="15" fill="rgb(207,226,44)" fg:x="188" fg:w="3"/><text x="64.8548%" y="479.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="64.6048%" y="453" width="1.0309%" height="15" fill="rgb(208,126,0)" fg:x="188" fg:w="3"/><text x="64.8548%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="64.6048%" y="437" width="1.0309%" height="15" fill="rgb(244,66,21)" fg:x="188" fg:w="3"/><text x="64.8548%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="64.6048%" y="421" width="1.0309%" height="15" fill="rgb(222,97,12)" fg:x="188" fg:w="3"/><text x="64.8548%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="64.6048%" y="405" width="1.0309%" height="15" fill="rgb(219,213,19)" fg:x="188" fg:w="3"/><text x="64.8548%" y="415.50"></text></g><g><title>[[ext4]] (3 samples, 1.03%)</title><rect x="64.6048%" y="389" width="1.0309%" height="15" fill="rgb(252,169,30)" fg:x="188" fg:w="3"/><text x="64.8548%" y="399.50"></text></g><g><title>[[ext4]] (3 samples, 1.03%)</title><rect x="64.6048%" y="373" width="1.0309%" height="15" fill="rgb(206,32,51)" fg:x="188" fg:w="3"/><text x="64.8548%" y="383.50"></text></g><g><title>[[ext4]] (3 samples, 1.03%)</title><rect x="64.6048%" y="357" width="1.0309%" height="15" fill="rgb(250,172,42)" fg:x="188" fg:w="3"/><text x="64.8548%" y="367.50"></text></g><g><title>[[ext4]] (2 samples, 0.69%)</title><rect x="64.9485%" y="341" width="0.6873%" height="15" fill="rgb(209,34,43)" fg:x="189" fg:w="2"/><text x="65.1985%" y="351.50"></text></g><g><title>[[ext4]] (2 samples, 0.69%)</title><rect x="64.9485%" y="325" width="0.6873%" height="15" fill="rgb(223,11,35)" fg:x="189" fg:w="2"/><text x="65.1985%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="64.9485%" y="309" width="0.6873%" height="15" fill="rgb(251,219,26)" fg:x="189" fg:w="2"/><text x="65.1985%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="65.2921%" y="293" width="0.3436%" height="15" fill="rgb(231,119,3)" fg:x="190" fg:w="1"/><text x="65.5421%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="65.2921%" y="277" width="0.3436%" height="15" fill="rgb(216,97,11)" fg:x="190" fg:w="1"/><text x="65.5421%" y="287.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.34%)</title><rect x="65.6357%" y="581" width="0.3436%" height="15" fill="rgb(223,59,9)" fg:x="191" fg:w="1"/><text x="65.8857%" y="591.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.34%)</title><rect x="65.6357%" y="565" width="0.3436%" height="15" fill="rgb(233,93,31)" fg:x="191" fg:w="1"/><text x="65.8857%" y="575.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.34%)</title><rect x="65.9794%" y="549" width="0.3436%" height="15" fill="rgb(239,81,33)" fg:x="192" fg:w="1"/><text x="66.2294%" y="559.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.34%)</title><rect x="65.9794%" y="533" width="0.3436%" height="15" fill="rgb(213,120,34)" fg:x="192" fg:w="1"/><text x="66.2294%" y="543.50"></text></g><g><title>leveldb::BlockBuilder::Add (6 samples, 2.06%)</title><rect x="65.9794%" y="565" width="2.0619%" height="15" fill="rgb(243,49,53)" fg:x="192" fg:w="6"/><text x="66.2294%" y="575.50">l..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (5 samples, 1.72%)</title><rect x="66.3230%" y="549" width="1.7182%" height="15" fill="rgb(247,216,33)" fg:x="193" fg:w="5"/><text x="66.5730%" y="559.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (5 samples, 1.72%)</title><rect x="66.3230%" y="533" width="1.7182%" height="15" fill="rgb(226,26,14)" fg:x="193" fg:w="5"/><text x="66.5730%" y="543.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (5 samples, 1.72%)</title><rect x="66.3230%" y="517" width="1.7182%" height="15" fill="rgb(215,49,53)" fg:x="193" fg:w="5"/><text x="66.5730%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (5 samples, 1.72%)</title><rect x="66.3230%" y="501" width="1.7182%" height="15" fill="rgb(245,162,40)" fg:x="193" fg:w="5"/><text x="66.5730%" y="511.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (5 samples, 1.72%)</title><rect x="66.3230%" y="485" width="1.7182%" height="15" fill="rgb(229,68,17)" fg:x="193" fg:w="5"/><text x="66.5730%" y="495.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 1.72%)</title><rect x="66.3230%" y="469" width="1.7182%" height="15" fill="rgb(213,182,10)" fg:x="193" fg:w="5"/><text x="66.5730%" y="479.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="66.6667%" y="453" width="1.3746%" height="15" fill="rgb(245,125,30)" fg:x="194" fg:w="4"/><text x="66.9167%" y="463.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="66.6667%" y="437" width="1.3746%" height="15" fill="rgb(232,202,2)" fg:x="194" fg:w="4"/><text x="66.9167%" y="447.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="66.6667%" y="421" width="1.3746%" height="15" fill="rgb(237,140,51)" fg:x="194" fg:w="4"/><text x="66.9167%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="405" width="1.0309%" height="15" fill="rgb(236,157,25)" fg:x="195" fg:w="3"/><text x="67.2603%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="389" width="1.0309%" height="15" fill="rgb(219,209,0)" fg:x="195" fg:w="3"/><text x="67.2603%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="373" width="1.0309%" height="15" fill="rgb(240,116,54)" fg:x="195" fg:w="3"/><text x="67.2603%" y="383.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="357" width="1.0309%" height="15" fill="rgb(216,10,36)" fg:x="195" fg:w="3"/><text x="67.2603%" y="367.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="341" width="1.0309%" height="15" fill="rgb(222,72,44)" fg:x="195" fg:w="3"/><text x="67.2603%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="325" width="1.0309%" height="15" fill="rgb(232,159,9)" fg:x="195" fg:w="3"/><text x="67.2603%" y="335.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="309" width="1.0309%" height="15" fill="rgb(210,39,32)" fg:x="195" fg:w="3"/><text x="67.2603%" y="319.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="67.0103%" y="293" width="1.0309%" height="15" fill="rgb(216,194,45)" fg:x="195" fg:w="3"/><text x="67.2603%" y="303.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.34%)</title><rect x="68.0412%" y="565" width="0.3436%" height="15" fill="rgb(218,18,35)" fg:x="198" fg:w="1"/><text x="68.2912%" y="575.50"></text></g><g><title>CreateFilter (1 samples, 0.34%)</title><rect x="68.3849%" y="533" width="0.3436%" height="15" fill="rgb(207,83,51)" fg:x="199" fg:w="1"/><text x="68.6349%" y="543.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.34%)</title><rect x="68.3849%" y="517" width="0.3436%" height="15" fill="rgb(225,63,43)" fg:x="199" fg:w="1"/><text x="68.6349%" y="527.50"></text></g><g><title>leveldb::Hash (1 samples, 0.34%)</title><rect x="68.3849%" y="501" width="0.3436%" height="15" fill="rgb(207,57,36)" fg:x="199" fg:w="1"/><text x="68.6349%" y="511.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (2 samples, 0.69%)</title><rect x="68.3849%" y="549" width="0.6873%" height="15" fill="rgb(216,99,33)" fg:x="199" fg:w="2"/><text x="68.6349%" y="559.50"></text></g><g><title>leveldb::Hash (1 samples, 0.34%)</title><rect x="68.7285%" y="533" width="0.3436%" height="15" fill="rgb(225,42,16)" fg:x="200" fg:w="1"/><text x="68.9785%" y="543.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (3 samples, 1.03%)</title><rect x="68.3849%" y="565" width="1.0309%" height="15" fill="rgb(220,201,45)" fg:x="199" fg:w="3"/><text x="68.6349%" y="575.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (1 samples, 0.34%)</title><rect x="69.0722%" y="549" width="0.3436%" height="15" fill="rgb(225,33,4)" fg:x="201" fg:w="1"/><text x="69.3222%" y="559.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (1 samples, 0.34%)</title><rect x="69.0722%" y="533" width="0.3436%" height="15" fill="rgb(224,33,50)" fg:x="201" fg:w="1"/><text x="69.3222%" y="543.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="69.0722%" y="517" width="0.3436%" height="15" fill="rgb(246,198,51)" fg:x="201" fg:w="1"/><text x="69.3222%" y="527.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="69.0722%" y="501" width="0.3436%" height="15" fill="rgb(205,22,4)" fg:x="201" fg:w="1"/><text x="69.3222%" y="511.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (1 samples, 0.34%)</title><rect x="69.0722%" y="485" width="0.3436%" height="15" fill="rgb(206,3,8)" fg:x="201" fg:w="1"/><text x="69.3222%" y="495.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.34%)</title><rect x="69.0722%" y="469" width="0.3436%" height="15" fill="rgb(251,23,15)" fg:x="201" fg:w="1"/><text x="69.3222%" y="479.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.34%)</title><rect x="69.4158%" y="565" width="0.3436%" height="15" fill="rgb(252,88,28)" fg:x="202" fg:w="1"/><text x="69.6658%" y="575.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.34%)</title><rect x="69.4158%" y="549" width="0.3436%" height="15" fill="rgb(212,127,14)" fg:x="202" fg:w="1"/><text x="69.6658%" y="559.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="70.1031%" y="357" width="0.3436%" height="15" fill="rgb(247,145,37)" fg:x="204" fg:w="1"/><text x="70.3531%" y="367.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="70.1031%" y="341" width="0.3436%" height="15" fill="rgb(209,117,53)" fg:x="204" fg:w="1"/><text x="70.3531%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="70.1031%" y="325" width="0.3436%" height="15" fill="rgb(212,90,42)" fg:x="204" fg:w="1"/><text x="70.3531%" y="335.50"></text></g><g><title>[[ext4]] (2 samples, 0.69%)</title><rect x="70.1031%" y="373" width="0.6873%" height="15" fill="rgb(218,164,37)" fg:x="204" fg:w="2"/><text x="70.3531%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="70.4467%" y="357" width="0.3436%" height="15" fill="rgb(246,65,34)" fg:x="205" fg:w="1"/><text x="70.6967%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="70.4467%" y="341" width="0.3436%" height="15" fill="rgb(231,100,33)" fg:x="205" fg:w="1"/><text x="70.6967%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="70.4467%" y="325" width="0.3436%" height="15" fill="rgb(228,126,14)" fg:x="205" fg:w="1"/><text x="70.6967%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="70.4467%" y="309" width="0.3436%" height="15" fill="rgb(215,173,21)" fg:x="205" fg:w="1"/><text x="70.6967%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="70.4467%" y="293" width="0.3436%" height="15" fill="rgb(210,6,40)" fg:x="205" fg:w="1"/><text x="70.6967%" y="303.50"></text></g><g><title>leveldb::TableBuilder::Flush (6 samples, 2.06%)</title><rect x="69.7595%" y="565" width="2.0619%" height="15" fill="rgb(212,48,18)" fg:x="203" fg:w="6"/><text x="70.0095%" y="575.50">l..</text></g><g><title>Flush (6 samples, 2.06%)</title><rect x="69.7595%" y="549" width="2.0619%" height="15" fill="rgb(230,214,11)" fg:x="203" fg:w="6"/><text x="70.0095%" y="559.50">F..</text></g><g><title>FlushBuffer (6 samples, 2.06%)</title><rect x="69.7595%" y="533" width="2.0619%" height="15" fill="rgb(254,105,39)" fg:x="203" fg:w="6"/><text x="70.0095%" y="543.50">F..</text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (6 samples, 2.06%)</title><rect x="69.7595%" y="517" width="2.0619%" height="15" fill="rgb(245,158,5)" fg:x="203" fg:w="6"/><text x="70.0095%" y="527.50">l..</text></g><g><title>__GI___libc_write (6 samples, 2.06%)</title><rect x="69.7595%" y="501" width="2.0619%" height="15" fill="rgb(249,208,11)" fg:x="203" fg:w="6"/><text x="70.0095%" y="511.50">_..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="69.7595%" y="485" width="2.0619%" height="15" fill="rgb(210,39,28)" fg:x="203" fg:w="6"/><text x="70.0095%" y="495.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="69.7595%" y="469" width="2.0619%" height="15" fill="rgb(211,56,53)" fg:x="203" fg:w="6"/><text x="70.0095%" y="479.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="69.7595%" y="453" width="2.0619%" height="15" fill="rgb(226,201,30)" fg:x="203" fg:w="6"/><text x="70.0095%" y="463.50">[..</text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="70.1031%" y="437" width="1.7182%" height="15" fill="rgb(239,101,34)" fg:x="204" fg:w="5"/><text x="70.3531%" y="447.50"></text></g><g><title>[[ext4]] (5 samples, 1.72%)</title><rect x="70.1031%" y="421" width="1.7182%" height="15" fill="rgb(226,209,5)" fg:x="204" fg:w="5"/><text x="70.3531%" y="431.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="70.1031%" y="405" width="1.7182%" height="15" fill="rgb(250,105,47)" fg:x="204" fg:w="5"/><text x="70.3531%" y="415.50"></text></g><g><title>[[ext4]] (5 samples, 1.72%)</title><rect x="70.1031%" y="389" width="1.7182%" height="15" fill="rgb(230,72,3)" fg:x="204" fg:w="5"/><text x="70.3531%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="70.7904%" y="373" width="1.0309%" height="15" fill="rgb(232,218,39)" fg:x="206" fg:w="3"/><text x="71.0404%" y="383.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="70.7904%" y="357" width="1.0309%" height="15" fill="rgb(248,166,6)" fg:x="206" fg:w="3"/><text x="71.0404%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="71.1340%" y="341" width="0.6873%" height="15" fill="rgb(247,89,20)" fg:x="207" fg:w="2"/><text x="71.3840%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="71.1340%" y="325" width="0.6873%" height="15" fill="rgb(248,130,54)" fg:x="207" fg:w="2"/><text x="71.3840%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="71.4777%" y="309" width="0.3436%" height="15" fill="rgb(234,196,4)" fg:x="208" fg:w="1"/><text x="71.7277%" y="319.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (30 samples, 10.31%)</title><rect x="61.8557%" y="597" width="10.3093%" height="15" fill="rgb(250,143,31)" fg:x="180" fg:w="30"/><text x="62.1057%" y="607.50">leveldb::DBImpl..</text></g><g><title>leveldb::TableBuilder::Add (18 samples, 6.19%)</title><rect x="65.9794%" y="581" width="6.1856%" height="15" fill="rgb(211,110,34)" fg:x="192" fg:w="18"/><text x="66.2294%" y="591.50">leveldb:..</text></g><g><title>leveldb::TableBuilder::ok (1 samples, 0.34%)</title><rect x="71.8213%" y="565" width="0.3436%" height="15" fill="rgb(215,124,48)" fg:x="209" fg:w="1"/><text x="72.0713%" y="575.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.34%)</title><rect x="71.8213%" y="549" width="0.3436%" height="15" fill="rgb(216,46,13)" fg:x="209" fg:w="1"/><text x="72.0713%" y="559.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (34 samples, 11.68%)</title><rect x="60.8247%" y="613" width="11.6838%" height="15" fill="rgb(205,184,25)" fg:x="177" fg:w="34"/><text x="61.0747%" y="623.50">leveldb::DBImpl::..</text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.34%)</title><rect x="72.1649%" y="597" width="0.3436%" height="15" fill="rgb(228,1,10)" fg:x="210" fg:w="1"/><text x="72.4149%" y="607.50"></text></g><g><title>execute_native_thread_routine (35 samples, 12.03%)</title><rect x="60.8247%" y="677" width="12.0275%" height="15" fill="rgb(213,116,27)" fg:x="177" fg:w="35"/><text x="61.0747%" y="687.50">execute_native_thr..</text></g><g><title>BackgroundThreadEntryPoint (35 samples, 12.03%)</title><rect x="60.8247%" y="661" width="12.0275%" height="15" fill="rgb(241,95,50)" fg:x="177" fg:w="35"/><text x="61.0747%" y="671.50">BackgroundThreadEn..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (35 samples, 12.03%)</title><rect x="60.8247%" y="645" width="12.0275%" height="15" fill="rgb(238,48,32)" fg:x="177" fg:w="35"/><text x="61.0747%" y="655.50">leveldb::(anonymou..</text></g><g><title>leveldb::DBImpl::BackgroundCall (35 samples, 12.03%)</title><rect x="60.8247%" y="629" width="12.0275%" height="15" fill="rgb(235,113,49)" fg:x="177" fg:w="35"/><text x="61.0747%" y="639.50">leveldb::DBImpl::B..</text></g><g><title>leveldb::DBImpl::CompactMemTable (1 samples, 0.34%)</title><rect x="72.5086%" y="613" width="0.3436%" height="15" fill="rgb(205,127,43)" fg:x="211" fg:w="1"/><text x="72.7586%" y="623.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (1 samples, 0.34%)</title><rect x="72.5086%" y="597" width="0.3436%" height="15" fill="rgb(250,162,2)" fg:x="211" fg:w="1"/><text x="72.7586%" y="607.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.34%)</title><rect x="72.5086%" y="581" width="0.3436%" height="15" fill="rgb(220,13,41)" fg:x="211" fg:w="1"/><text x="72.7586%" y="591.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.34%)</title><rect x="72.5086%" y="565" width="0.3436%" height="15" fill="rgb(249,221,25)" fg:x="211" fg:w="1"/><text x="72.7586%" y="575.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (1 samples, 0.34%)</title><rect x="72.5086%" y="549" width="0.3436%" height="15" fill="rgb(215,208,19)" fg:x="211" fg:w="1"/><text x="72.7586%" y="559.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (1 samples, 0.34%)</title><rect x="72.5086%" y="533" width="0.3436%" height="15" fill="rgb(236,175,2)" fg:x="211" fg:w="1"/><text x="72.7586%" y="543.50"></text></g><g><title>leveldb::Hash (1 samples, 0.34%)</title><rect x="72.5086%" y="517" width="0.3436%" height="15" fill="rgb(241,52,2)" fg:x="211" fg:w="1"/><text x="72.7586%" y="527.50"></text></g><g><title>__clone (45 samples, 15.46%)</title><rect x="57.7320%" y="709" width="15.4639%" height="15" fill="rgb(248,140,14)" fg:x="168" fg:w="45"/><text x="57.9820%" y="719.50">__clone</text></g><g><title>start_thread (45 samples, 15.46%)</title><rect x="57.7320%" y="693" width="15.4639%" height="15" fill="rgb(253,22,42)" fg:x="168" fg:w="45"/><text x="57.9820%" y="703.50">start_thread</text></g><g><title>name_stack_maps (1 samples, 0.34%)</title><rect x="72.8522%" y="677" width="0.3436%" height="15" fill="rgb(234,61,47)" fg:x="212" fg:w="1"/><text x="73.1022%" y="687.50"></text></g><g><title>__GI___snprintf (1 samples, 0.34%)</title><rect x="72.8522%" y="661" width="0.3436%" height="15" fill="rgb(208,226,15)" fg:x="212" fg:w="1"/><text x="73.1022%" y="671.50"></text></g><g><title>__vsnprintf_internal (1 samples, 0.34%)</title><rect x="72.8522%" y="645" width="0.3436%" height="15" fill="rgb(217,221,4)" fg:x="212" fg:w="1"/><text x="73.1022%" y="655.50"></text></g><g><title>__printf_buffer (1 samples, 0.34%)</title><rect x="72.8522%" y="629" width="0.3436%" height="15" fill="rgb(212,174,34)" fg:x="212" fg:w="1"/><text x="73.1022%" y="639.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.34%)</title><rect x="73.1959%" y="709" width="0.3436%" height="15" fill="rgb(253,83,4)" fg:x="213" fg:w="1"/><text x="73.4459%" y="719.50"></text></g><g><title>main (1 samples, 0.34%)</title><rect x="73.1959%" y="693" width="0.3436%" height="15" fill="rgb(250,195,49)" fg:x="213" fg:w="1"/><text x="73.4459%" y="703.50"></text></g><g><title>main (1 samples, 0.34%)</title><rect x="73.1959%" y="677" width="0.3436%" height="15" fill="rgb(241,192,25)" fg:x="213" fg:w="1"/><text x="73.4459%" y="687.50"></text></g><g><title>AppInitMain (1 samples, 0.34%)</title><rect x="73.1959%" y="661" width="0.3436%" height="15" fill="rgb(208,124,10)" fg:x="213" fg:w="1"/><text x="73.4459%" y="671.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.34%)</title><rect x="73.1959%" y="645" width="0.3436%" height="15" fill="rgb(222,33,0)" fg:x="213" fg:w="1"/><text x="73.4459%" y="655.50"></text></g><g><title>operator (1 samples, 0.34%)</title><rect x="73.1959%" y="629" width="0.3436%" height="15" fill="rgb(234,209,28)" fg:x="213" fg:w="1"/><text x="73.4459%" y="639.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.34%)</title><rect x="73.1959%" y="613" width="0.3436%" height="15" fill="rgb(224,11,23)" fg:x="213" fg:w="1"/><text x="73.4459%" y="623.50"></text></g><g><title>node::LoadChainstate (1 samples, 0.34%)</title><rect x="73.1959%" y="597" width="0.3436%" height="15" fill="rgb(232,99,1)" fg:x="213" fg:w="1"/><text x="73.4459%" y="607.50"></text></g><g><title>node::CompleteChainstateInitialization (1 samples, 0.34%)</title><rect x="73.1959%" y="581" width="0.3436%" height="15" fill="rgb(237,95,45)" fg:x="213" fg:w="1"/><text x="73.4459%" y="591.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.34%)</title><rect x="73.1959%" y="565" width="0.3436%" height="15" fill="rgb(208,109,11)" fg:x="213" fg:w="1"/><text x="73.4459%" y="575.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (1 samples, 0.34%)</title><rect x="73.1959%" y="549" width="0.3436%" height="15" fill="rgb(216,190,48)" fg:x="213" fg:w="1"/><text x="73.4459%" y="559.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.34%)</title><rect x="73.1959%" y="533" width="0.3436%" height="15" fill="rgb(251,171,36)" fg:x="213" fg:w="1"/><text x="73.4459%" y="543.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.34%)</title><rect x="73.1959%" y="517" width="0.3436%" height="15" fill="rgb(230,62,22)" fg:x="213" fg:w="1"/><text x="73.4459%" y="527.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.34%)</title><rect x="73.1959%" y="501" width="0.3436%" height="15" fill="rgb(225,114,35)" fg:x="213" fg:w="1"/><text x="73.4459%" y="511.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.34%)</title><rect x="73.1959%" y="485" width="0.3436%" height="15" fill="rgb(215,118,42)" fg:x="213" fg:w="1"/><text x="73.4459%" y="495.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.34%)</title><rect x="73.1959%" y="469" width="0.3436%" height="15" fill="rgb(243,119,21)" fg:x="213" fg:w="1"/><text x="73.4459%" y="479.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.34%)</title><rect x="73.1959%" y="453" width="0.3436%" height="15" fill="rgb(252,177,53)" fg:x="213" fg:w="1"/><text x="73.4459%" y="463.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1 samples, 0.34%)</title><rect x="73.5395%" y="709" width="0.3436%" height="15" fill="rgb(237,209,29)" fg:x="214" fg:w="1"/><text x="73.7895%" y="719.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.34%)</title><rect x="73.5395%" y="693" width="0.3436%" height="15" fill="rgb(212,65,23)" fg:x="214" fg:w="1"/><text x="73.7895%" y="703.50"></text></g><g><title>main (1 samples, 0.34%)</title><rect x="73.5395%" y="677" width="0.3436%" height="15" fill="rgb(230,222,46)" fg:x="214" fg:w="1"/><text x="73.7895%" y="687.50"></text></g><g><title>main (1 samples, 0.34%)</title><rect x="73.5395%" y="661" width="0.3436%" height="15" fill="rgb(215,135,32)" fg:x="214" fg:w="1"/><text x="73.7895%" y="671.50"></text></g><g><title>AppInitMain (1 samples, 0.34%)</title><rect x="73.5395%" y="645" width="0.3436%" height="15" fill="rgb(246,101,22)" fg:x="214" fg:w="1"/><text x="73.7895%" y="655.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.34%)</title><rect x="73.5395%" y="629" width="0.3436%" height="15" fill="rgb(206,107,13)" fg:x="214" fg:w="1"/><text x="73.7895%" y="639.50"></text></g><g><title>operator (1 samples, 0.34%)</title><rect x="73.5395%" y="613" width="0.3436%" height="15" fill="rgb(250,100,44)" fg:x="214" fg:w="1"/><text x="73.7895%" y="623.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.34%)</title><rect x="73.5395%" y="597" width="0.3436%" height="15" fill="rgb(231,147,38)" fg:x="214" fg:w="1"/><text x="73.7895%" y="607.50"></text></g><g><title>node::LoadChainstate (1 samples, 0.34%)</title><rect x="73.5395%" y="581" width="0.3436%" height="15" fill="rgb(229,8,40)" fg:x="214" fg:w="1"/><text x="73.7895%" y="591.50"></text></g><g><title>node::CompleteChainstateInitialization (1 samples, 0.34%)</title><rect x="73.5395%" y="565" width="0.3436%" height="15" fill="rgb(221,135,30)" fg:x="214" fg:w="1"/><text x="73.7895%" y="575.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.34%)</title><rect x="73.5395%" y="549" width="0.3436%" height="15" fill="rgb(249,193,18)" fg:x="214" fg:w="1"/><text x="73.7895%" y="559.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (1 samples, 0.34%)</title><rect x="73.5395%" y="533" width="0.3436%" height="15" fill="rgb(209,133,39)" fg:x="214" fg:w="1"/><text x="73.7895%" y="543.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.34%)</title><rect x="73.5395%" y="517" width="0.3436%" height="15" fill="rgb(232,100,14)" fg:x="214" fg:w="1"/><text x="73.7895%" y="527.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.34%)</title><rect x="73.5395%" y="501" width="0.3436%" height="15" fill="rgb(224,185,1)" fg:x="214" fg:w="1"/><text x="73.7895%" y="511.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (1 samples, 0.34%)</title><rect x="73.5395%" y="485" width="0.3436%" height="15" fill="rgb(223,139,8)" fg:x="214" fg:w="1"/><text x="73.7895%" y="495.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.34%)</title><rect x="73.5395%" y="469" width="0.3436%" height="15" fill="rgb(232,213,38)" fg:x="214" fg:w="1"/><text x="73.7895%" y="479.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.34%)</title><rect x="73.5395%" y="453" width="0.3436%" height="15" fill="rgb(207,94,22)" fg:x="214" fg:w="1"/><text x="73.7895%" y="463.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.34%)</title><rect x="73.5395%" y="437" width="0.3436%" height="15" fill="rgb(219,183,54)" fg:x="214" fg:w="1"/><text x="73.7895%" y="447.50"></text></g><g><title>CSHA256::Write (1 samples, 0.34%)</title><rect x="73.5395%" y="421" width="0.3436%" height="15" fill="rgb(216,185,54)" fg:x="214" fg:w="1"/><text x="73.7895%" y="431.50"></text></g><g><title>CSHA256::Write (1 samples, 0.34%)</title><rect x="73.5395%" y="405" width="0.3436%" height="15" fill="rgb(254,217,39)" fg:x="214" fg:w="1"/><text x="73.7895%" y="415.50"></text></g><g><title>__strchrnul_evex (1 samples, 0.34%)</title><rect x="73.8832%" y="709" width="0.3436%" height="15" fill="rgb(240,178,23)" fg:x="215" fg:w="1"/><text x="74.1332%" y="719.50"></text></g><g><title>CSHA512::Write (1 samples, 0.34%)</title><rect x="76.2887%" y="405" width="0.3436%" height="15" fill="rgb(218,11,47)" fg:x="222" fg:w="1"/><text x="76.5387%" y="415.50"></text></g><g><title>AppInit (11 samples, 3.78%)</title><rect x="74.2268%" y="645" width="3.7801%" height="15" fill="rgb(218,51,51)" fg:x="216" fg:w="11"/><text x="74.4768%" y="655.50">AppI..</text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (11 samples, 3.78%)</title><rect x="74.2268%" y="629" width="3.7801%" height="15" fill="rgb(238,126,27)" fg:x="216" fg:w="11"/><text x="74.4768%" y="639.50">std:..</text></g><g><title>kernel::Context::Context (11 samples, 3.78%)</title><rect x="74.2268%" y="613" width="3.7801%" height="15" fill="rgb(249,202,22)" fg:x="216" fg:w="11"/><text x="74.4768%" y="623.50">kern..</text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 3.78%)</title><rect x="74.2268%" y="597" width="3.7801%" height="15" fill="rgb(254,195,49)" fg:x="216" fg:w="11"/><text x="74.4768%" y="607.50">call..</text></g><g><title>kernel::Context::Context (11 samples, 3.78%)</title><rect x="74.2268%" y="581" width="3.7801%" height="15" fill="rgb(208,123,14)" fg:x="216" fg:w="11"/><text x="74.4768%" y="591.50">kern..</text></g><g><title>__pthread_once_slow (11 samples, 3.78%)</title><rect x="74.2268%" y="565" width="3.7801%" height="15" fill="rgb(224,200,8)" fg:x="216" fg:w="11"/><text x="74.4768%" y="575.50">__pt..</text></g><g><title>_FUN (11 samples, 3.78%)</title><rect x="74.2268%" y="549" width="3.7801%" height="15" fill="rgb(217,61,36)" fg:x="216" fg:w="11"/><text x="74.4768%" y="559.50">_FUN</text></g><g><title>operator (11 samples, 3.78%)</title><rect x="74.2268%" y="533" width="3.7801%" height="15" fill="rgb(206,35,45)" fg:x="216" fg:w="11"/><text x="74.4768%" y="543.50">oper..</text></g><g><title>operator (11 samples, 3.78%)</title><rect x="74.2268%" y="517" width="3.7801%" height="15" fill="rgb(217,65,33)" fg:x="216" fg:w="11"/><text x="74.4768%" y="527.50">oper..</text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 3.78%)</title><rect x="74.2268%" y="501" width="3.7801%" height="15" fill="rgb(222,158,48)" fg:x="216" fg:w="11"/><text x="74.4768%" y="511.50">__in..</text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 3.78%)</title><rect x="74.2268%" y="485" width="3.7801%" height="15" fill="rgb(254,2,54)" fg:x="216" fg:w="11"/><text x="74.4768%" y="495.50">__in..</text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (11 samples, 3.78%)</title><rect x="74.2268%" y="469" width="3.7801%" height="15" fill="rgb(250,143,38)" fg:x="216" fg:w="11"/><text x="74.4768%" y="479.50">std:..</text></g><g><title>RandomInit (11 samples, 3.78%)</title><rect x="74.2268%" y="453" width="3.7801%" height="15" fill="rgb(248,25,0)" fg:x="216" fg:w="11"/><text x="74.4768%" y="463.50">Rand..</text></g><g><title>CSHA512::Finalize (11 samples, 3.78%)</title><rect x="74.2268%" y="437" width="3.7801%" height="15" fill="rgb(206,152,27)" fg:x="216" fg:w="11"/><text x="74.4768%" y="447.50">CSHA..</text></g><g><title>CSHA512::Write (10 samples, 3.44%)</title><rect x="74.5704%" y="421" width="3.4364%" height="15" fill="rgb(240,77,30)" fg:x="217" fg:w="10"/><text x="74.8204%" y="431.50">CSH..</text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="405" width="1.3746%" height="15" fill="rgb(231,5,3)" fg:x="223" fg:w="4"/><text x="76.8823%" y="415.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="389" width="1.3746%" height="15" fill="rgb(207,226,32)" fg:x="223" fg:w="4"/><text x="76.8823%" y="399.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="373" width="1.3746%" height="15" fill="rgb(222,207,47)" fg:x="223" fg:w="4"/><text x="76.8823%" y="383.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="357" width="1.3746%" height="15" fill="rgb(229,115,45)" fg:x="223" fg:w="4"/><text x="76.8823%" y="367.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="341" width="1.3746%" height="15" fill="rgb(224,191,6)" fg:x="223" fg:w="4"/><text x="76.8823%" y="351.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="325" width="1.3746%" height="15" fill="rgb(230,227,24)" fg:x="223" fg:w="4"/><text x="76.8823%" y="335.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="309" width="1.3746%" height="15" fill="rgb(228,80,19)" fg:x="223" fg:w="4"/><text x="76.8823%" y="319.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="293" width="1.3746%" height="15" fill="rgb(247,229,0)" fg:x="223" fg:w="4"/><text x="76.8823%" y="303.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="76.6323%" y="277" width="1.3746%" height="15" fill="rgb(237,194,15)" fg:x="223" fg:w="4"/><text x="76.8823%" y="287.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="261" width="1.0309%" height="15" fill="rgb(219,203,20)" fg:x="224" fg:w="3"/><text x="77.2259%" y="271.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="245" width="1.0309%" height="15" fill="rgb(234,128,8)" fg:x="224" fg:w="3"/><text x="77.2259%" y="255.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="229" width="1.0309%" height="15" fill="rgb(248,202,8)" fg:x="224" fg:w="3"/><text x="77.2259%" y="239.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="213" width="1.0309%" height="15" fill="rgb(206,104,37)" fg:x="224" fg:w="3"/><text x="77.2259%" y="223.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="197" width="1.0309%" height="15" fill="rgb(223,8,27)" fg:x="224" fg:w="3"/><text x="77.2259%" y="207.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="181" width="1.0309%" height="15" fill="rgb(216,217,28)" fg:x="224" fg:w="3"/><text x="77.2259%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="165" width="1.0309%" height="15" fill="rgb(249,199,1)" fg:x="224" fg:w="3"/><text x="77.2259%" y="175.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="76.9759%" y="149" width="1.0309%" height="15" fill="rgb(240,85,17)" fg:x="224" fg:w="3"/><text x="77.2259%" y="159.50"></text></g><g><title>Chainstate::LoadChainTip (6 samples, 2.06%)</title><rect x="78.0069%" y="533" width="2.0619%" height="15" fill="rgb(206,108,45)" fg:x="227" fg:w="6"/><text x="78.2569%" y="543.50">C..</text></g><g><title>CChain::SetTip (6 samples, 2.06%)</title><rect x="78.0069%" y="517" width="2.0619%" height="15" fill="rgb(245,210,41)" fg:x="227" fg:w="6"/><text x="78.2569%" y="527.50">C..</text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::resize (4 samples, 1.37%)</title><rect x="78.6942%" y="501" width="1.3746%" height="15" fill="rgb(206,13,37)" fg:x="229" fg:w="4"/><text x="78.9442%" y="511.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_default_append (4 samples, 1.37%)</title><rect x="78.6942%" y="485" width="1.3746%" height="15" fill="rgb(250,61,18)" fg:x="229" fg:w="4"/><text x="78.9442%" y="495.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n_a&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="469" width="1.3746%" height="15" fill="rgb(235,172,48)" fg:x="229" fg:w="4"/><text x="78.9442%" y="479.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n&lt;CBlockIndex**, unsigned long&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="453" width="1.3746%" height="15" fill="rgb(249,201,17)" fg:x="229" fg:w="4"/><text x="78.9442%" y="463.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;CBlockIndex**, unsigned long&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="437" width="1.3746%" height="15" fill="rgb(219,208,6)" fg:x="229" fg:w="4"/><text x="78.9442%" y="447.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;CBlockIndex**, unsigned long&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="421" width="1.3746%" height="15" fill="rgb(248,31,23)" fg:x="229" fg:w="4"/><text x="78.9442%" y="431.50"></text></g><g><title>CBlockIndex** std::fill_n&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="405" width="1.3746%" height="15" fill="rgb(245,15,42)" fg:x="229" fg:w="4"/><text x="78.9442%" y="415.50"></text></g><g><title>CBlockIndex** std::__fill_n_a&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="389" width="1.3746%" height="15" fill="rgb(222,217,39)" fg:x="229" fg:w="4"/><text x="78.9442%" y="399.50"></text></g><g><title>CBlockIndex** std::__fill_n_a&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="373" width="1.3746%" height="15" fill="rgb(210,219,27)" fg:x="229" fg:w="4"/><text x="78.9442%" y="383.50"></text></g><g><title>void std::__fill_a&lt;CBlockIndex**, CBlockIndex*&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="357" width="1.3746%" height="15" fill="rgb(252,166,36)" fg:x="229" fg:w="4"/><text x="78.9442%" y="367.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;CBlockIndex*&gt;::__value, void&gt;::__type std::__fill_a1&lt;CBlockIndex**, CBlockIndex*&gt; (4 samples, 1.37%)</title><rect x="78.6942%" y="341" width="1.3746%" height="15" fill="rgb(245,132,34)" fg:x="229" fg:w="4"/><text x="78.9442%" y="351.50"></text></g><g><title>__memset_avx512_unaligned_erms (4 samples, 1.37%)</title><rect x="78.6942%" y="325" width="1.3746%" height="15" fill="rgb(236,54,3)" fg:x="229" fg:w="4"/><text x="78.9442%" y="335.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="78.6942%" y="309" width="1.3746%" height="15" fill="rgb(241,173,43)" fg:x="229" fg:w="4"/><text x="78.9442%" y="319.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="78.6942%" y="293" width="1.3746%" height="15" fill="rgb(215,190,9)" fg:x="229" fg:w="4"/><text x="78.9442%" y="303.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="78.6942%" y="277" width="1.3746%" height="15" fill="rgb(242,101,16)" fg:x="229" fg:w="4"/><text x="78.9442%" y="287.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="78.6942%" y="261" width="1.3746%" height="15" fill="rgb(223,190,21)" fg:x="229" fg:w="4"/><text x="78.9442%" y="271.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="78.6942%" y="245" width="1.3746%" height="15" fill="rgb(215,228,25)" fg:x="229" fg:w="4"/><text x="78.9442%" y="255.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="78.6942%" y="229" width="1.3746%" height="15" fill="rgb(225,36,22)" fg:x="229" fg:w="4"/><text x="78.9442%" y="239.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="213" width="1.0309%" height="15" fill="rgb(251,106,46)" fg:x="230" fg:w="3"/><text x="79.2878%" y="223.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="197" width="1.0309%" height="15" fill="rgb(208,90,1)" fg:x="230" fg:w="3"/><text x="79.2878%" y="207.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="181" width="1.0309%" height="15" fill="rgb(243,10,4)" fg:x="230" fg:w="3"/><text x="79.2878%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="165" width="1.0309%" height="15" fill="rgb(212,137,27)" fg:x="230" fg:w="3"/><text x="79.2878%" y="175.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="149" width="1.0309%" height="15" fill="rgb(231,220,49)" fg:x="230" fg:w="3"/><text x="79.2878%" y="159.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="133" width="1.0309%" height="15" fill="rgb(237,96,20)" fg:x="230" fg:w="3"/><text x="79.2878%" y="143.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="117" width="1.0309%" height="15" fill="rgb(239,229,30)" fg:x="230" fg:w="3"/><text x="79.2878%" y="127.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="101" width="1.0309%" height="15" fill="rgb(219,65,33)" fg:x="230" fg:w="3"/><text x="79.2878%" y="111.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="85" width="1.0309%" height="15" fill="rgb(243,134,7)" fg:x="230" fg:w="3"/><text x="79.2878%" y="95.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="69" width="1.0309%" height="15" fill="rgb(216,177,54)" fg:x="230" fg:w="3"/><text x="79.2878%" y="79.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="79.0378%" y="53" width="1.0309%" height="15" fill="rgb(211,160,20)" fg:x="230" fg:w="3"/><text x="79.2878%" y="63.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (1 samples, 0.34%)</title><rect x="80.0687%" y="517" width="0.3436%" height="15" fill="rgb(239,85,39)" fg:x="233" fg:w="1"/><text x="80.3187%" y="527.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (1 samples, 0.34%)</title><rect x="80.0687%" y="501" width="0.3436%" height="15" fill="rgb(232,125,22)" fg:x="233" fg:w="1"/><text x="80.3187%" y="511.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (1 samples, 0.34%)</title><rect x="80.0687%" y="485" width="0.3436%" height="15" fill="rgb(244,57,34)" fg:x="233" fg:w="1"/><text x="80.3187%" y="495.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (2 samples, 0.69%)</title><rect x="80.7560%" y="437" width="0.6873%" height="15" fill="rgb(214,203,32)" fg:x="235" fg:w="2"/><text x="81.0060%" y="447.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (2 samples, 0.69%)</title><rect x="80.7560%" y="421" width="0.6873%" height="15" fill="rgb(207,58,43)" fg:x="235" fg:w="2"/><text x="81.0060%" y="431.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (3 samples, 1.03%)</title><rect x="80.7560%" y="453" width="1.0309%" height="15" fill="rgb(215,193,15)" fg:x="235" fg:w="3"/><text x="81.0060%" y="463.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.34%)</title><rect x="81.4433%" y="437" width="0.3436%" height="15" fill="rgb(232,15,44)" fg:x="237" fg:w="1"/><text x="81.6933%" y="447.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.34%)</title><rect x="81.4433%" y="421" width="0.3436%" height="15" fill="rgb(212,3,48)" fg:x="237" fg:w="1"/><text x="81.6933%" y="431.50"></text></g><g><title>GetBlockProof (7 samples, 2.41%)</title><rect x="80.4124%" y="485" width="2.4055%" height="15" fill="rgb(218,128,7)" fg:x="234" fg:w="7"/><text x="80.6624%" y="495.50">Ge..</text></g><g><title>operator/ (6 samples, 2.06%)</title><rect x="80.7560%" y="469" width="2.0619%" height="15" fill="rgb(226,216,39)" fg:x="235" fg:w="6"/><text x="81.0060%" y="479.50">o..</text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (3 samples, 1.03%)</title><rect x="81.7869%" y="453" width="1.0309%" height="15" fill="rgb(243,47,51)" fg:x="238" fg:w="3"/><text x="82.0369%" y="463.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.34%)</title><rect x="82.8179%" y="485" width="0.3436%" height="15" fill="rgb(241,183,40)" fg:x="241" fg:w="1"/><text x="83.0679%" y="495.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.34%)</title><rect x="83.1615%" y="485" width="0.3436%" height="15" fill="rgb(231,217,32)" fg:x="242" fg:w="1"/><text x="83.4115%" y="495.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.34%)</title><rect x="83.5052%" y="485" width="0.3436%" height="15" fill="rgb(229,61,38)" fg:x="243" fg:w="1"/><text x="83.7552%" y="495.50"></text></g><g><title>QuadRound (1 samples, 0.34%)</title><rect x="83.8488%" y="261" width="0.3436%" height="15" fill="rgb(225,210,5)" fg:x="244" fg:w="1"/><text x="84.0988%" y="271.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.34%)</title><rect x="83.8488%" y="245" width="0.3436%" height="15" fill="rgb(231,79,45)" fg:x="244" fg:w="1"/><text x="84.0988%" y="255.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (2 samples, 0.69%)</title><rect x="83.8488%" y="437" width="0.6873%" height="15" fill="rgb(224,100,7)" fg:x="244" fg:w="2"/><text x="84.0988%" y="447.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="421" width="0.6873%" height="15" fill="rgb(241,198,18)" fg:x="244" fg:w="2"/><text x="84.0988%" y="431.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="405" width="0.6873%" height="15" fill="rgb(252,97,53)" fg:x="244" fg:w="2"/><text x="84.0988%" y="415.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="389" width="0.6873%" height="15" fill="rgb(220,88,7)" fg:x="244" fg:w="2"/><text x="84.0988%" y="399.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="373" width="0.6873%" height="15" fill="rgb(213,176,14)" fg:x="244" fg:w="2"/><text x="84.0988%" y="383.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="357" width="0.6873%" height="15" fill="rgb(246,73,7)" fg:x="244" fg:w="2"/><text x="84.0988%" y="367.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="341" width="0.6873%" height="15" fill="rgb(245,64,36)" fg:x="244" fg:w="2"/><text x="84.0988%" y="351.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="325" width="0.6873%" height="15" fill="rgb(245,80,10)" fg:x="244" fg:w="2"/><text x="84.0988%" y="335.50"></text></g><g><title>void ser_writedata32&lt;HashWriter&gt; (2 samples, 0.69%)</title><rect x="83.8488%" y="309" width="0.6873%" height="15" fill="rgb(232,107,50)" fg:x="244" fg:w="2"/><text x="84.0988%" y="319.50"></text></g><g><title>HashWriter::write (2 samples, 0.69%)</title><rect x="83.8488%" y="293" width="0.6873%" height="15" fill="rgb(253,3,0)" fg:x="244" fg:w="2"/><text x="84.0988%" y="303.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.69%)</title><rect x="83.8488%" y="277" width="0.6873%" height="15" fill="rgb(212,99,53)" fg:x="244" fg:w="2"/><text x="84.0988%" y="287.50"></text></g><g><title>Unshuffle (1 samples, 0.34%)</title><rect x="84.1924%" y="261" width="0.3436%" height="15" fill="rgb(249,111,54)" fg:x="245" fg:w="1"/><text x="84.4424%" y="271.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.34%)</title><rect x="84.1924%" y="245" width="0.3436%" height="15" fill="rgb(249,55,30)" fg:x="245" fg:w="1"/><text x="84.4424%" y="255.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (3 samples, 1.03%)</title><rect x="83.8488%" y="469" width="1.0309%" height="15" fill="rgb(237,47,42)" fg:x="244" fg:w="3"/><text x="84.0988%" y="479.50"></text></g><g><title>CBlockHeader::GetHash (3 samples, 1.03%)</title><rect x="83.8488%" y="453" width="1.0309%" height="15" fill="rgb(211,20,18)" fg:x="244" fg:w="3"/><text x="84.0988%" y="463.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.34%)</title><rect x="84.5361%" y="437" width="0.3436%" height="15" fill="rgb(231,203,46)" fg:x="246" fg:w="1"/><text x="84.7861%" y="447.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.34%)</title><rect x="84.5361%" y="421" width="0.3436%" height="15" fill="rgb(237,142,3)" fg:x="246" fg:w="1"/><text x="84.7861%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.34%)</title><rect x="84.5361%" y="405" width="0.3436%" height="15" fill="rgb(241,107,1)" fg:x="246" fg:w="1"/><text x="84.7861%" y="415.50"></text></g><g><title>ShiftMessageB (1 samples, 0.34%)</title><rect x="84.5361%" y="389" width="0.3436%" height="15" fill="rgb(229,83,13)" fg:x="246" fg:w="1"/><text x="84.7861%" y="399.50"></text></g><g><title>ShiftMessageC (1 samples, 0.34%)</title><rect x="84.5361%" y="373" width="0.3436%" height="15" fill="rgb(241,91,40)" fg:x="246" fg:w="1"/><text x="84.7861%" y="383.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.34%)</title><rect x="84.5361%" y="357" width="0.3436%" height="15" fill="rgb(225,3,45)" fg:x="246" fg:w="1"/><text x="84.7861%" y="367.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (1 samples, 0.34%)</title><rect x="84.8797%" y="453" width="0.3436%" height="15" fill="rgb(244,223,14)" fg:x="247" fg:w="1"/><text x="85.1297%" y="463.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="437" width="0.3436%" height="15" fill="rgb(224,124,37)" fg:x="247" fg:w="1"/><text x="85.1297%" y="447.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="421" width="0.3436%" height="15" fill="rgb(251,171,30)" fg:x="247" fg:w="1"/><text x="85.1297%" y="431.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="405" width="0.3436%" height="15" fill="rgb(236,46,54)" fg:x="247" fg:w="1"/><text x="85.1297%" y="415.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="389" width="0.3436%" height="15" fill="rgb(245,213,5)" fg:x="247" fg:w="1"/><text x="85.1297%" y="399.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, int&amp;&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="373" width="0.3436%" height="15" fill="rgb(230,144,27)" fg:x="247" fg:w="1"/><text x="85.1297%" y="383.50"></text></g><g><title>void UnserializeMany&lt;DataStream, int&amp;&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="357" width="0.3436%" height="15" fill="rgb(220,86,6)" fg:x="247" fg:w="1"/><text x="85.1297%" y="367.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="341" width="0.3436%" height="15" fill="rgb(240,20,13)" fg:x="247" fg:w="1"/><text x="85.1297%" y="351.50"></text></g><g><title>unsigned int ser_readdata32&lt;DataStream&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="325" width="0.3436%" height="15" fill="rgb(217,89,34)" fg:x="247" fg:w="1"/><text x="85.1297%" y="335.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.34%)</title><rect x="84.8797%" y="309" width="0.3436%" height="15" fill="rgb(229,13,5)" fg:x="247" fg:w="1"/><text x="85.1297%" y="319.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.34%)</title><rect x="84.8797%" y="293" width="0.3436%" height="15" fill="rgb(244,67,35)" fg:x="247" fg:w="1"/><text x="85.1297%" y="303.50"></text></g><g><title>DataStream::Xor (1 samples, 0.34%)</title><rect x="84.8797%" y="277" width="0.3436%" height="15" fill="rgb(221,40,2)" fg:x="247" fg:w="1"/><text x="85.1297%" y="287.50"></text></g><g><title>util::Xor (1 samples, 0.34%)</title><rect x="84.8797%" y="261" width="0.3436%" height="15" fill="rgb(237,157,21)" fg:x="247" fg:w="1"/><text x="85.1297%" y="271.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (2 samples, 0.69%)</title><rect x="84.8797%" y="469" width="0.6873%" height="15" fill="rgb(222,94,11)" fg:x="247" fg:w="2"/><text x="85.1297%" y="479.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.34%)</title><rect x="85.2234%" y="453" width="0.3436%" height="15" fill="rgb(249,113,6)" fg:x="248" fg:w="1"/><text x="85.4734%" y="463.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.34%)</title><rect x="85.2234%" y="437" width="0.3436%" height="15" fill="rgb(238,137,36)" fg:x="248" fg:w="1"/><text x="85.4734%" y="447.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.34%)</title><rect x="85.2234%" y="421" width="0.3436%" height="15" fill="rgb(210,102,26)" fg:x="248" fg:w="1"/><text x="85.4734%" y="431.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.34%)</title><rect x="85.2234%" y="405" width="0.3436%" height="15" fill="rgb(218,30,30)" fg:x="248" fg:w="1"/><text x="85.4734%" y="415.50"></text></g><g><title>decltype  (1 samples, 0.34%)</title><rect x="85.2234%" y="389" width="0.3436%" height="15" fill="rgb(214,67,26)" fg:x="248" fg:w="1"/><text x="85.4734%" y="399.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.34%)</title><rect x="85.2234%" y="373" width="0.3436%" height="15" fill="rgb(251,9,53)" fg:x="248" fg:w="1"/><text x="85.4734%" y="383.50"></text></g><g><title>decltype (1 samples, 0.34%)</title><rect x="85.2234%" y="357" width="0.3436%" height="15" fill="rgb(228,204,25)" fg:x="248" fg:w="1"/><text x="85.4734%" y="367.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.34%)</title><rect x="85.5670%" y="389" width="0.3436%" height="15" fill="rgb(207,153,8)" fg:x="249" fg:w="1"/><text x="85.8170%" y="399.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (1 samples, 0.34%)</title><rect x="85.5670%" y="373" width="0.3436%" height="15" fill="rgb(242,9,16)" fg:x="249" fg:w="1"/><text x="85.8170%" y="383.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.69%)</title><rect x="85.5670%" y="405" width="0.6873%" height="15" fill="rgb(217,211,10)" fg:x="249" fg:w="2"/><text x="85.8170%" y="415.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.34%)</title><rect x="85.9107%" y="389" width="0.3436%" height="15" fill="rgb(219,228,52)" fg:x="250" fg:w="1"/><text x="86.1607%" y="399.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1 samples, 0.34%)</title><rect x="85.9107%" y="373" width="0.3436%" height="15" fill="rgb(231,92,29)" fg:x="250" fg:w="1"/><text x="86.1607%" y="383.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (1 samples, 0.34%)</title><rect x="85.9107%" y="357" width="0.3436%" height="15" fill="rgb(232,8,23)" fg:x="250" fg:w="1"/><text x="86.1607%" y="367.50"></text></g><g><title>std::equal_to&lt;uint256&gt;::operator (1 samples, 0.34%)</title><rect x="85.9107%" y="341" width="0.3436%" height="15" fill="rgb(216,211,34)" fg:x="250" fg:w="1"/><text x="86.1607%" y="351.50"></text></g><g><title>operator== (1 samples, 0.34%)</title><rect x="85.9107%" y="325" width="0.3436%" height="15" fill="rgb(236,151,0)" fg:x="250" fg:w="1"/><text x="86.1607%" y="335.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.34%)</title><rect x="85.9107%" y="309" width="0.3436%" height="15" fill="rgb(209,168,3)" fg:x="250" fg:w="1"/><text x="86.1607%" y="319.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (8 samples, 2.75%)</title><rect x="83.8488%" y="485" width="2.7491%" height="15" fill="rgb(208,129,28)" fg:x="244" fg:w="8"/><text x="84.0988%" y="495.50">ke..</text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (3 samples, 1.03%)</title><rect x="85.5670%" y="469" width="1.0309%" height="15" fill="rgb(229,78,22)" fg:x="249" fg:w="3"/><text x="85.8170%" y="479.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (3 samples, 1.03%)</title><rect x="85.5670%" y="453" width="1.0309%" height="15" fill="rgb(228,187,13)" fg:x="249" fg:w="3"/><text x="85.8170%" y="463.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (3 samples, 1.03%)</title><rect x="85.5670%" y="437" width="1.0309%" height="15" fill="rgb(240,119,24)" fg:x="249" fg:w="3"/><text x="85.8170%" y="447.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (3 samples, 1.03%)</title><rect x="85.5670%" y="421" width="1.0309%" height="15" fill="rgb(209,194,42)" fg:x="249" fg:w="3"/><text x="85.8170%" y="431.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.34%)</title><rect x="86.2543%" y="405" width="0.3436%" height="15" fill="rgb(247,200,46)" fg:x="251" fg:w="1"/><text x="86.5043%" y="415.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (1 samples, 0.34%)</title><rect x="86.2543%" y="389" width="0.3436%" height="15" fill="rgb(218,76,16)" fg:x="251" fg:w="1"/><text x="86.5043%" y="399.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.34%)</title><rect x="86.2543%" y="373" width="0.3436%" height="15" fill="rgb(225,21,48)" fg:x="251" fg:w="1"/><text x="86.5043%" y="383.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.34%)</title><rect x="86.2543%" y="357" width="0.3436%" height="15" fill="rgb(239,223,50)" fg:x="251" fg:w="1"/><text x="86.5043%" y="367.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (1 samples, 0.34%)</title><rect x="86.5979%" y="485" width="0.3436%" height="15" fill="rgb(244,45,21)" fg:x="252" fg:w="1"/><text x="86.8479%" y="495.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (1 samples, 0.34%)</title><rect x="86.5979%" y="469" width="0.3436%" height="15" fill="rgb(232,33,43)" fg:x="252" fg:w="1"/><text x="86.8479%" y="479.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (1 samples, 0.34%)</title><rect x="86.5979%" y="453" width="0.3436%" height="15" fill="rgb(209,8,3)" fg:x="252" fg:w="1"/><text x="86.8479%" y="463.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="86.9416%" y="453" width="0.3436%" height="15" fill="rgb(214,25,53)" fg:x="253" fg:w="1"/><text x="87.1916%" y="463.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="86.9416%" y="437" width="0.3436%" height="15" fill="rgb(254,186,54)" fg:x="253" fg:w="1"/><text x="87.1916%" y="447.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (21 samples, 7.22%)</title><rect x="80.4124%" y="501" width="7.2165%" height="15" fill="rgb(208,174,49)" fg:x="234" fg:w="21"/><text x="80.6624%" y="511.50">node::Bloc..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.69%)</title><rect x="86.9416%" y="485" width="0.6873%" height="15" fill="rgb(233,191,51)" fg:x="253" fg:w="2"/><text x="87.1916%" y="495.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="86.9416%" y="469" width="0.6873%" height="15" fill="rgb(222,134,10)" fg:x="253" fg:w="2"/><text x="87.1916%" y="479.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="453" width="0.3436%" height="15" fill="rgb(230,226,20)" fg:x="254" fg:w="1"/><text x="87.5352%" y="463.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="437" width="0.3436%" height="15" fill="rgb(251,111,25)" fg:x="254" fg:w="1"/><text x="87.5352%" y="447.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="421" width="0.3436%" height="15" fill="rgb(224,40,46)" fg:x="254" fg:w="1"/><text x="87.5352%" y="431.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="405" width="0.3436%" height="15" fill="rgb(236,108,47)" fg:x="254" fg:w="1"/><text x="87.5352%" y="415.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="389" width="0.3436%" height="15" fill="rgb(234,93,0)" fg:x="254" fg:w="1"/><text x="87.5352%" y="399.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="373" width="0.3436%" height="15" fill="rgb(224,213,32)" fg:x="254" fg:w="1"/><text x="87.5352%" y="383.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.34%)</title><rect x="87.2852%" y="357" width="0.3436%" height="15" fill="rgb(251,11,48)" fg:x="254" fg:w="1"/><text x="87.5352%" y="367.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="341" width="0.3436%" height="15" fill="rgb(236,173,5)" fg:x="254" fg:w="1"/><text x="87.5352%" y="351.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="325" width="0.3436%" height="15" fill="rgb(230,95,12)" fg:x="254" fg:w="1"/><text x="87.5352%" y="335.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="87.2852%" y="309" width="0.3436%" height="15" fill="rgb(232,209,1)" fg:x="254" fg:w="1"/><text x="87.5352%" y="319.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (22 samples, 7.56%)</title><rect x="80.4124%" y="517" width="7.5601%" height="15" fill="rgb(232,6,1)" fg:x="234" fg:w="22"/><text x="80.6624%" y="527.50">node::Bloc..</text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.34%)</title><rect x="87.6289%" y="501" width="0.3436%" height="15" fill="rgb(210,224,50)" fg:x="255" fg:w="1"/><text x="87.8789%" y="511.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.34%)</title><rect x="87.6289%" y="485" width="0.3436%" height="15" fill="rgb(228,127,35)" fg:x="255" fg:w="1"/><text x="87.8789%" y="495.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.34%)</title><rect x="87.6289%" y="469" width="0.3436%" height="15" fill="rgb(245,102,45)" fg:x="255" fg:w="1"/><text x="87.8789%" y="479.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (25 samples, 8.59%)</title><rect x="80.0687%" y="533" width="8.5911%" height="15" fill="rgb(214,1,49)" fg:x="233" fg:w="25"/><text x="80.3187%" y="543.50">ChainstateMa..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="517" width="0.6873%" height="15" fill="rgb(226,163,40)" fg:x="256" fg:w="2"/><text x="88.2225%" y="527.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="501" width="0.6873%" height="15" fill="rgb(239,212,28)" fg:x="256" fg:w="2"/><text x="88.2225%" y="511.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="485" width="0.6873%" height="15" fill="rgb(220,20,13)" fg:x="256" fg:w="2"/><text x="88.2225%" y="495.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="469" width="0.6873%" height="15" fill="rgb(210,164,35)" fg:x="256" fg:w="2"/><text x="88.2225%" y="479.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="453" width="0.6873%" height="15" fill="rgb(248,109,41)" fg:x="256" fg:w="2"/><text x="88.2225%" y="463.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="437" width="0.6873%" height="15" fill="rgb(238,23,50)" fg:x="256" fg:w="2"/><text x="88.2225%" y="447.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="421" width="0.6873%" height="15" fill="rgb(211,48,49)" fg:x="256" fg:w="2"/><text x="88.2225%" y="431.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="405" width="0.6873%" height="15" fill="rgb(223,36,21)" fg:x="256" fg:w="2"/><text x="88.2225%" y="415.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="389" width="0.6873%" height="15" fill="rgb(207,123,46)" fg:x="256" fg:w="2"/><text x="88.2225%" y="399.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="373" width="0.6873%" height="15" fill="rgb(240,218,32)" fg:x="256" fg:w="2"/><text x="88.2225%" y="383.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.69%)</title><rect x="87.9725%" y="357" width="0.6873%" height="15" fill="rgb(252,5,43)" fg:x="256" fg:w="2"/><text x="88.2225%" y="367.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.34%)</title><rect x="88.3162%" y="341" width="0.3436%" height="15" fill="rgb(252,84,19)" fg:x="257" fg:w="1"/><text x="88.5662%" y="351.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="88.3162%" y="325" width="0.3436%" height="15" fill="rgb(243,152,39)" fg:x="257" fg:w="1"/><text x="88.5662%" y="335.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="88.3162%" y="309" width="0.3436%" height="15" fill="rgb(234,160,15)" fg:x="257" fg:w="1"/><text x="88.5662%" y="319.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.34%)</title><rect x="88.3162%" y="293" width="0.3436%" height="15" fill="rgb(237,34,20)" fg:x="257" fg:w="1"/><text x="88.5662%" y="303.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.34%)</title><rect x="88.3162%" y="277" width="0.3436%" height="15" fill="rgb(229,97,13)" fg:x="257" fg:w="1"/><text x="88.5662%" y="287.50"></text></g><g><title>operator (32 samples, 11.00%)</title><rect x="78.0069%" y="597" width="10.9966%" height="15" fill="rgb(234,71,50)" fg:x="227" fg:w="32"/><text x="78.2569%" y="607.50">operator</text></g><g><title>InitAndLoadChainstate (32 samples, 11.00%)</title><rect x="78.0069%" y="581" width="10.9966%" height="15" fill="rgb(253,155,4)" fg:x="227" fg:w="32"/><text x="78.2569%" y="591.50">InitAndLoadChain..</text></g><g><title>node::LoadChainstate (32 samples, 11.00%)</title><rect x="78.0069%" y="565" width="10.9966%" height="15" fill="rgb(222,185,37)" fg:x="227" fg:w="32"/><text x="78.2569%" y="575.50">node::LoadChains..</text></g><g><title>node::CompleteChainstateInitialization (32 samples, 11.00%)</title><rect x="78.0069%" y="549" width="10.9966%" height="15" fill="rgb(251,177,13)" fg:x="227" fg:w="32"/><text x="78.2569%" y="559.50">node::CompleteCh..</text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.34%)</title><rect x="88.6598%" y="533" width="0.3436%" height="15" fill="rgb(250,179,40)" fg:x="258" fg:w="1"/><text x="88.9098%" y="543.50"></text></g><g><title>_start (44 samples, 15.12%)</title><rect x="74.2268%" y="709" width="15.1203%" height="15" fill="rgb(242,44,2)" fg:x="216" fg:w="44"/><text x="74.4768%" y="719.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (44 samples, 15.12%)</title><rect x="74.2268%" y="693" width="15.1203%" height="15" fill="rgb(216,177,13)" fg:x="216" fg:w="44"/><text x="74.4768%" y="703.50">__libc_start_main@@GLIB..</text></g><g><title>__libc_start_call_main (44 samples, 15.12%)</title><rect x="74.2268%" y="677" width="15.1203%" height="15" fill="rgb(216,106,43)" fg:x="216" fg:w="44"/><text x="74.4768%" y="687.50">__libc_start_call_main</text></g><g><title>main (44 samples, 15.12%)</title><rect x="74.2268%" y="661" width="15.1203%" height="15" fill="rgb(216,183,2)" fg:x="216" fg:w="44"/><text x="74.4768%" y="671.50">main</text></g><g><title>main (33 samples, 11.34%)</title><rect x="78.0069%" y="645" width="11.3402%" height="15" fill="rgb(249,75,3)" fg:x="227" fg:w="33"/><text x="78.2569%" y="655.50">main</text></g><g><title>AppInitMain (33 samples, 11.34%)</title><rect x="78.0069%" y="629" width="11.3402%" height="15" fill="rgb(219,67,39)" fg:x="227" fg:w="33"/><text x="78.2569%" y="639.50">AppInitMain</text></g><g><title>InitAndLoadChainstate (33 samples, 11.34%)</title><rect x="78.0069%" y="613" width="11.3402%" height="15" fill="rgb(253,228,2)" fg:x="227" fg:w="33"/><text x="78.2569%" y="623.50">InitAndLoadChains..</text></g><g><title>std::__detail::_MakeUniq&lt;ChainstateManager&gt;::__single_object std::make_unique&lt;ChainstateManager, util::SignalInterrupt&amp;, kernel::ChainstateManagerOpts&amp;, kernel::BlockManagerOpts&amp;&gt; (1 samples, 0.34%)</title><rect x="89.0034%" y="597" width="0.3436%" height="15" fill="rgb(235,138,27)" fg:x="259" fg:w="1"/><text x="89.2534%" y="607.50"></text></g><g><title>ChainstateManager::ChainstateManager (1 samples, 0.34%)</title><rect x="89.0034%" y="581" width="0.3436%" height="15" fill="rgb(236,97,51)" fg:x="259" fg:w="1"/><text x="89.2534%" y="591.50"></text></g><g><title>ValidationCache::ValidationCache (1 samples, 0.34%)</title><rect x="89.0034%" y="565" width="0.3436%" height="15" fill="rgb(240,80,30)" fg:x="259" fg:w="1"/><text x="89.2534%" y="575.50"></text></g><g><title>SignatureCache::SignatureCache (1 samples, 0.34%)</title><rect x="89.0034%" y="549" width="0.3436%" height="15" fill="rgb(230,178,19)" fg:x="259" fg:w="1"/><text x="89.2534%" y="559.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (1 samples, 0.34%)</title><rect x="89.0034%" y="533" width="0.3436%" height="15" fill="rgb(210,190,27)" fg:x="259" fg:w="1"/><text x="89.2534%" y="543.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (1 samples, 0.34%)</title><rect x="89.0034%" y="517" width="0.3436%" height="15" fill="rgb(222,107,31)" fg:x="259" fg:w="1"/><text x="89.2534%" y="527.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.34%)</title><rect x="89.0034%" y="501" width="0.3436%" height="15" fill="rgb(216,127,34)" fg:x="259" fg:w="1"/><text x="89.2534%" y="511.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.34%)</title><rect x="89.0034%" y="485" width="0.3436%" height="15" fill="rgb(234,116,52)" fg:x="259" fg:w="1"/><text x="89.2534%" y="495.50"></text></g><g><title>uint256* std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (1 samples, 0.34%)</title><rect x="89.0034%" y="469" width="0.3436%" height="15" fill="rgb(222,124,15)" fg:x="259" fg:w="1"/><text x="89.2534%" y="479.50"></text></g><g><title>uint256* std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="89.0034%" y="453" width="0.3436%" height="15" fill="rgb(231,179,28)" fg:x="259" fg:w="1"/><text x="89.2534%" y="463.50"></text></g><g><title>uint256* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.34%)</title><rect x="89.0034%" y="437" width="0.3436%" height="15" fill="rgb(226,93,45)" fg:x="259" fg:w="1"/><text x="89.2534%" y="447.50"></text></g><g><title>void std::_Construct&lt;uint256&gt; (1 samples, 0.34%)</title><rect x="89.0034%" y="421" width="0.3436%" height="15" fill="rgb(215,8,51)" fg:x="259" fg:w="1"/><text x="89.2534%" y="431.50"></text></g><g><title>uint256::uint256 (1 samples, 0.34%)</title><rect x="89.0034%" y="405" width="0.3436%" height="15" fill="rgb(223,106,5)" fg:x="259" fg:w="1"/><text x="89.2534%" y="415.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.34%)</title><rect x="89.0034%" y="389" width="0.3436%" height="15" fill="rgb(250,191,5)" fg:x="259" fg:w="1"/><text x="89.2534%" y="399.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.34%)</title><rect x="89.0034%" y="373" width="0.3436%" height="15" fill="rgb(242,132,44)" fg:x="259" fg:w="1"/><text x="89.2534%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="357" width="0.3436%" height="15" fill="rgb(251,152,29)" fg:x="259" fg:w="1"/><text x="89.2534%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="341" width="0.3436%" height="15" fill="rgb(218,179,5)" fg:x="259" fg:w="1"/><text x="89.2534%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="325" width="0.3436%" height="15" fill="rgb(227,67,19)" fg:x="259" fg:w="1"/><text x="89.2534%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="309" width="0.3436%" height="15" fill="rgb(233,119,31)" fg:x="259" fg:w="1"/><text x="89.2534%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="293" width="0.3436%" height="15" fill="rgb(241,120,22)" fg:x="259" fg:w="1"/><text x="89.2534%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="277" width="0.3436%" height="15" fill="rgb(224,102,30)" fg:x="259" fg:w="1"/><text x="89.2534%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="261" width="0.3436%" height="15" fill="rgb(210,164,37)" fg:x="259" fg:w="1"/><text x="89.2534%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="245" width="0.3436%" height="15" fill="rgb(226,191,16)" fg:x="259" fg:w="1"/><text x="89.2534%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="229" width="0.3436%" height="15" fill="rgb(214,40,45)" fg:x="259" fg:w="1"/><text x="89.2534%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="213" width="0.3436%" height="15" fill="rgb(244,29,26)" fg:x="259" fg:w="1"/><text x="89.2534%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="89.0034%" y="197" width="0.3436%" height="15" fill="rgb(216,16,5)" fg:x="259" fg:w="1"/><text x="89.2534%" y="207.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.34%)</title><rect x="89.3471%" y="709" width="0.3436%" height="15" fill="rgb(249,76,35)" fg:x="260" fg:w="1"/><text x="89.5971%" y="719.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.34%)</title><rect x="89.3471%" y="693" width="0.3436%" height="15" fill="rgb(207,11,44)" fg:x="260" fg:w="1"/><text x="89.5971%" y="703.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.34%)</title><rect x="89.3471%" y="677" width="0.3436%" height="15" fill="rgb(228,190,49)" fg:x="260" fg:w="1"/><text x="89.5971%" y="687.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.34%)</title><rect x="89.3471%" y="661" width="0.3436%" height="15" fill="rgb(214,173,12)" fg:x="260" fg:w="1"/><text x="89.5971%" y="671.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.34%)</title><rect x="89.3471%" y="645" width="0.3436%" height="15" fill="rgb(218,26,35)" fg:x="260" fg:w="1"/><text x="89.5971%" y="655.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.34%)</title><rect x="89.6907%" y="437" width="0.3436%" height="15" fill="rgb(220,200,19)" fg:x="261" fg:w="1"/><text x="89.9407%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.34%)</title><rect x="89.6907%" y="421" width="0.3436%" height="15" fill="rgb(239,95,49)" fg:x="261" fg:w="1"/><text x="89.9407%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.34%)</title><rect x="89.6907%" y="405" width="0.3436%" height="15" fill="rgb(235,85,53)" fg:x="261" fg:w="1"/><text x="89.9407%" y="415.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (3 samples, 1.03%)</title><rect x="89.6907%" y="485" width="1.0309%" height="15" fill="rgb(233,133,31)" fg:x="261" fg:w="3"/><text x="89.9407%" y="495.50"></text></g><g><title>leveldb::BuildTable (3 samples, 1.03%)</title><rect x="89.6907%" y="469" width="1.0309%" height="15" fill="rgb(218,25,20)" fg:x="261" fg:w="3"/><text x="89.9407%" y="479.50"></text></g><g><title>leveldb::TableBuilder::Add (3 samples, 1.03%)</title><rect x="89.6907%" y="453" width="1.0309%" height="15" fill="rgb(252,210,38)" fg:x="261" fg:w="3"/><text x="89.9407%" y="463.50"></text></g><g><title>leveldb::TableBuilder::Flush (2 samples, 0.69%)</title><rect x="90.0344%" y="437" width="0.6873%" height="15" fill="rgb(242,134,21)" fg:x="262" fg:w="2"/><text x="90.2844%" y="447.50"></text></g><g><title>Flush (2 samples, 0.69%)</title><rect x="90.0344%" y="421" width="0.6873%" height="15" fill="rgb(213,28,48)" fg:x="262" fg:w="2"/><text x="90.2844%" y="431.50"></text></g><g><title>FlushBuffer (2 samples, 0.69%)</title><rect x="90.0344%" y="405" width="0.6873%" height="15" fill="rgb(250,196,2)" fg:x="262" fg:w="2"/><text x="90.2844%" y="415.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (2 samples, 0.69%)</title><rect x="90.0344%" y="389" width="0.6873%" height="15" fill="rgb(227,5,17)" fg:x="262" fg:w="2"/><text x="90.2844%" y="399.50"></text></g><g><title>__GI___libc_write (2 samples, 0.69%)</title><rect x="90.0344%" y="373" width="0.6873%" height="15" fill="rgb(221,226,24)" fg:x="262" fg:w="2"/><text x="90.2844%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="90.0344%" y="357" width="0.6873%" height="15" fill="rgb(211,5,48)" fg:x="262" fg:w="2"/><text x="90.2844%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="90.0344%" y="341" width="0.6873%" height="15" fill="rgb(219,150,6)" fg:x="262" fg:w="2"/><text x="90.2844%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="90.0344%" y="325" width="0.6873%" height="15" fill="rgb(251,46,16)" fg:x="262" fg:w="2"/><text x="90.2844%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="90.0344%" y="309" width="0.6873%" height="15" fill="rgb(220,204,40)" fg:x="262" fg:w="2"/><text x="90.2844%" y="319.50"></text></g><g><title>[[ext4]] (2 samples, 0.69%)</title><rect x="90.0344%" y="293" width="0.6873%" height="15" fill="rgb(211,85,2)" fg:x="262" fg:w="2"/><text x="90.2844%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="90.0344%" y="277" width="0.6873%" height="15" fill="rgb(229,17,7)" fg:x="262" fg:w="2"/><text x="90.2844%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="90.0344%" y="261" width="0.6873%" height="15" fill="rgb(239,72,28)" fg:x="262" fg:w="2"/><text x="90.2844%" y="271.50"></text></g><g><title>leveldb::Arena::Allocate (1 samples, 0.34%)</title><rect x="90.7216%" y="421" width="0.3436%" height="15" fill="rgb(230,47,54)" fg:x="264" fg:w="1"/><text x="90.9716%" y="431.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.34%)</title><rect x="90.7216%" y="405" width="0.3436%" height="15" fill="rgb(214,50,8)" fg:x="264" fg:w="1"/><text x="90.9716%" y="415.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.34%)</title><rect x="90.7216%" y="389" width="0.3436%" height="15" fill="rgb(216,198,43)" fg:x="264" fg:w="1"/><text x="90.9716%" y="399.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (1 samples, 0.34%)</title><rect x="90.7216%" y="373" width="0.3436%" height="15" fill="rgb(234,20,35)" fg:x="264" fg:w="1"/><text x="90.9716%" y="383.50"></text></g><g><title>operator new (1 samples, 0.34%)</title><rect x="90.7216%" y="357" width="0.3436%" height="15" fill="rgb(254,45,19)" fg:x="264" fg:w="1"/><text x="90.9716%" y="367.50"></text></g><g><title>malloc (1 samples, 0.34%)</title><rect x="90.7216%" y="341" width="0.3436%" height="15" fill="rgb(219,14,44)" fg:x="264" fg:w="1"/><text x="90.9716%" y="351.50"></text></g><g><title>_int_malloc (1 samples, 0.34%)</title><rect x="90.7216%" y="325" width="0.3436%" height="15" fill="rgb(217,220,26)" fg:x="264" fg:w="1"/><text x="90.9716%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="309" width="0.3436%" height="15" fill="rgb(213,158,28)" fg:x="264" fg:w="1"/><text x="90.9716%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="293" width="0.3436%" height="15" fill="rgb(252,51,52)" fg:x="264" fg:w="1"/><text x="90.9716%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="277" width="0.3436%" height="15" fill="rgb(246,89,16)" fg:x="264" fg:w="1"/><text x="90.9716%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="261" width="0.3436%" height="15" fill="rgb(216,158,49)" fg:x="264" fg:w="1"/><text x="90.9716%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="245" width="0.3436%" height="15" fill="rgb(236,107,19)" fg:x="264" fg:w="1"/><text x="90.9716%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="229" width="0.3436%" height="15" fill="rgb(228,185,30)" fg:x="264" fg:w="1"/><text x="90.9716%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="213" width="0.3436%" height="15" fill="rgb(246,134,8)" fg:x="264" fg:w="1"/><text x="90.9716%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="197" width="0.3436%" height="15" fill="rgb(214,143,50)" fg:x="264" fg:w="1"/><text x="90.9716%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="90.7216%" y="181" width="0.3436%" height="15" fill="rgb(228,75,8)" fg:x="264" fg:w="1"/><text x="90.9716%" y="191.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.34%)</title><rect x="91.4089%" y="341" width="0.3436%" height="15" fill="rgb(207,175,4)" fg:x="266" fg:w="1"/><text x="91.6589%" y="351.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 1.03%)</title><rect x="91.0653%" y="357" width="1.0309%" height="15" fill="rgb(205,108,24)" fg:x="265" fg:w="3"/><text x="91.3153%" y="367.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.34%)</title><rect x="91.7526%" y="341" width="0.3436%" height="15" fill="rgb(244,120,49)" fg:x="267" fg:w="1"/><text x="92.0026%" y="351.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (6 samples, 2.06%)</title><rect x="90.7216%" y="485" width="2.0619%" height="15" fill="rgb(223,47,38)" fg:x="264" fg:w="6"/><text x="90.9716%" y="495.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (6 samples, 2.06%)</title><rect x="90.7216%" y="469" width="2.0619%" height="15" fill="rgb(229,179,11)" fg:x="264" fg:w="6"/><text x="90.9716%" y="479.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (6 samples, 2.06%)</title><rect x="90.7216%" y="453" width="2.0619%" height="15" fill="rgb(231,122,1)" fg:x="264" fg:w="6"/><text x="90.9716%" y="463.50">l..</text></g><g><title>leveldb::MemTable::Add (6 samples, 2.06%)</title><rect x="90.7216%" y="437" width="2.0619%" height="15" fill="rgb(245,119,9)" fg:x="264" fg:w="6"/><text x="90.9716%" y="447.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (5 samples, 1.72%)</title><rect x="91.0653%" y="421" width="1.7182%" height="15" fill="rgb(241,163,25)" fg:x="265" fg:w="5"/><text x="91.3153%" y="431.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (5 samples, 1.72%)</title><rect x="91.0653%" y="405" width="1.7182%" height="15" fill="rgb(217,214,3)" fg:x="265" fg:w="5"/><text x="91.3153%" y="415.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (5 samples, 1.72%)</title><rect x="91.0653%" y="389" width="1.7182%" height="15" fill="rgb(240,86,28)" fg:x="265" fg:w="5"/><text x="91.3153%" y="399.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (5 samples, 1.72%)</title><rect x="91.0653%" y="373" width="1.7182%" height="15" fill="rgb(215,47,9)" fg:x="265" fg:w="5"/><text x="91.3153%" y="383.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.69%)</title><rect x="92.0962%" y="357" width="0.6873%" height="15" fill="rgb(252,25,45)" fg:x="268" fg:w="2"/><text x="92.3462%" y="367.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.69%)</title><rect x="92.0962%" y="341" width="0.6873%" height="15" fill="rgb(251,164,9)" fg:x="268" fg:w="2"/><text x="92.3462%" y="351.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.69%)</title><rect x="92.0962%" y="325" width="0.6873%" height="15" fill="rgb(233,194,0)" fg:x="268" fg:w="2"/><text x="92.3462%" y="335.50"></text></g><g><title>leveldb::WriteBatchInternal::SetContents (1 samples, 0.34%)</title><rect x="92.7835%" y="485" width="0.3436%" height="15" fill="rgb(249,111,24)" fg:x="270" fg:w="1"/><text x="93.0335%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.34%)</title><rect x="92.7835%" y="469" width="0.3436%" height="15" fill="rgb(250,223,3)" fg:x="270" fg:w="1"/><text x="93.0335%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.34%)</title><rect x="92.7835%" y="453" width="0.3436%" height="15" fill="rgb(236,178,37)" fg:x="270" fg:w="1"/><text x="93.0335%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.34%)</title><rect x="92.7835%" y="437" width="0.3436%" height="15" fill="rgb(241,158,50)" fg:x="270" fg:w="1"/><text x="93.0335%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="92.7835%" y="421" width="0.3436%" height="15" fill="rgb(213,121,41)" fg:x="270" fg:w="1"/><text x="93.0335%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="92.7835%" y="405" width="0.3436%" height="15" fill="rgb(240,92,3)" fg:x="270" fg:w="1"/><text x="93.0335%" y="415.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.34%)</title><rect x="92.7835%" y="389" width="0.3436%" height="15" fill="rgb(205,123,3)" fg:x="270" fg:w="1"/><text x="93.0335%" y="399.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.34%)</title><rect x="92.7835%" y="373" width="0.3436%" height="15" fill="rgb(205,97,47)" fg:x="270" fg:w="1"/><text x="93.0335%" y="383.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.34%)</title><rect x="93.1271%" y="437" width="0.3436%" height="15" fill="rgb(247,152,14)" fg:x="271" fg:w="1"/><text x="93.3771%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="93.1271%" y="421" width="0.3436%" height="15" fill="rgb(248,195,53)" fg:x="271" fg:w="1"/><text x="93.3771%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="93.1271%" y="405" width="0.3436%" height="15" fill="rgb(226,201,16)" fg:x="271" fg:w="1"/><text x="93.3771%" y="415.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.34%)</title><rect x="93.1271%" y="389" width="0.3436%" height="15" fill="rgb(205,98,0)" fg:x="271" fg:w="1"/><text x="93.3771%" y="399.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.34%)</title><rect x="93.1271%" y="373" width="0.3436%" height="15" fill="rgb(214,191,48)" fg:x="271" fg:w="1"/><text x="93.3771%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="357" width="0.3436%" height="15" fill="rgb(237,112,39)" fg:x="271" fg:w="1"/><text x="93.3771%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="341" width="0.3436%" height="15" fill="rgb(247,203,27)" fg:x="271" fg:w="1"/><text x="93.3771%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="325" width="0.3436%" height="15" fill="rgb(235,124,28)" fg:x="271" fg:w="1"/><text x="93.3771%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="309" width="0.3436%" height="15" fill="rgb(208,207,46)" fg:x="271" fg:w="1"/><text x="93.3771%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="293" width="0.3436%" height="15" fill="rgb(234,176,4)" fg:x="271" fg:w="1"/><text x="93.3771%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="277" width="0.3436%" height="15" fill="rgb(230,133,28)" fg:x="271" fg:w="1"/><text x="93.3771%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="261" width="0.3436%" height="15" fill="rgb(211,137,40)" fg:x="271" fg:w="1"/><text x="93.3771%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="245" width="0.3436%" height="15" fill="rgb(254,35,13)" fg:x="271" fg:w="1"/><text x="93.3771%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.1271%" y="229" width="0.3436%" height="15" fill="rgb(225,49,51)" fg:x="271" fg:w="1"/><text x="93.3771%" y="239.50"></text></g><g><title>CompleteChainstateInitialization (12 samples, 4.12%)</title><rect x="89.6907%" y="597" width="4.1237%" height="15" fill="rgb(251,10,15)" fg:x="261" fg:w="12"/><text x="89.9407%" y="607.50">Comp..</text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (12 samples, 4.12%)</title><rect x="89.6907%" y="581" width="4.1237%" height="15" fill="rgb(228,207,15)" fg:x="261" fg:w="12"/><text x="89.9407%" y="591.50">std:..</text></g><g><title>kernel::BlockTreeDB::CDBWrapper (12 samples, 4.12%)</title><rect x="89.6907%" y="565" width="4.1237%" height="15" fill="rgb(241,99,19)" fg:x="261" fg:w="12"/><text x="89.9407%" y="575.50">kern..</text></g><g><title>CDBWrapper::CDBWrapper (12 samples, 4.12%)</title><rect x="89.6907%" y="549" width="4.1237%" height="15" fill="rgb(207,104,49)" fg:x="261" fg:w="12"/><text x="89.9407%" y="559.50">CDBW..</text></g><g><title>leveldb::DB::Open (12 samples, 4.12%)</title><rect x="89.6907%" y="533" width="4.1237%" height="15" fill="rgb(234,99,18)" fg:x="261" fg:w="12"/><text x="89.9407%" y="543.50">leve..</text></g><g><title>leveldb::DBImpl::Recover (12 samples, 4.12%)</title><rect x="89.6907%" y="517" width="4.1237%" height="15" fill="rgb(213,191,49)" fg:x="261" fg:w="12"/><text x="89.9407%" y="527.50">leve..</text></g><g><title>leveldb::DBImpl::RecoverLogFile (12 samples, 4.12%)</title><rect x="89.6907%" y="501" width="4.1237%" height="15" fill="rgb(210,226,19)" fg:x="261" fg:w="12"/><text x="89.9407%" y="511.50">leve..</text></g><g><title>leveldb::log::Reader::ReadRecord (2 samples, 0.69%)</title><rect x="93.1271%" y="485" width="0.6873%" height="15" fill="rgb(229,97,18)" fg:x="271" fg:w="2"/><text x="93.3771%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.69%)</title><rect x="93.1271%" y="469" width="0.6873%" height="15" fill="rgb(211,167,15)" fg:x="271" fg:w="2"/><text x="93.3771%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.69%)</title><rect x="93.1271%" y="453" width="0.6873%" height="15" fill="rgb(210,169,34)" fg:x="271" fg:w="2"/><text x="93.3771%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="93.4708%" y="437" width="0.3436%" height="15" fill="rgb(241,121,31)" fg:x="272" fg:w="1"/><text x="93.7208%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="93.4708%" y="421" width="0.3436%" height="15" fill="rgb(232,40,11)" fg:x="272" fg:w="1"/><text x="93.7208%" y="431.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.34%)</title><rect x="93.4708%" y="405" width="0.3436%" height="15" fill="rgb(205,86,26)" fg:x="272" fg:w="1"/><text x="93.7208%" y="415.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.34%)</title><rect x="93.4708%" y="389" width="0.3436%" height="15" fill="rgb(231,126,28)" fg:x="272" fg:w="1"/><text x="93.7208%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="373" width="0.3436%" height="15" fill="rgb(219,221,18)" fg:x="272" fg:w="1"/><text x="93.7208%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="357" width="0.3436%" height="15" fill="rgb(211,40,0)" fg:x="272" fg:w="1"/><text x="93.7208%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="341" width="0.3436%" height="15" fill="rgb(239,85,43)" fg:x="272" fg:w="1"/><text x="93.7208%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="325" width="0.3436%" height="15" fill="rgb(231,55,21)" fg:x="272" fg:w="1"/><text x="93.7208%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="309" width="0.3436%" height="15" fill="rgb(225,184,43)" fg:x="272" fg:w="1"/><text x="93.7208%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="293" width="0.3436%" height="15" fill="rgb(251,158,41)" fg:x="272" fg:w="1"/><text x="93.7208%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="277" width="0.3436%" height="15" fill="rgb(234,159,37)" fg:x="272" fg:w="1"/><text x="93.7208%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="261" width="0.3436%" height="15" fill="rgb(216,204,22)" fg:x="272" fg:w="1"/><text x="93.7208%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="245" width="0.3436%" height="15" fill="rgb(214,17,3)" fg:x="272" fg:w="1"/><text x="93.7208%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="229" width="0.3436%" height="15" fill="rgb(212,111,17)" fg:x="272" fg:w="1"/><text x="93.7208%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="93.4708%" y="213" width="0.3436%" height="15" fill="rgb(221,157,24)" fg:x="272" fg:w="1"/><text x="93.7208%" y="223.50"></text></g><g><title>leveldb::DBImpl::Recover (4 samples, 1.37%)</title><rect x="93.8144%" y="469" width="1.3746%" height="15" fill="rgb(252,16,13)" fg:x="273" fg:w="4"/><text x="94.0644%" y="479.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (4 samples, 1.37%)</title><rect x="93.8144%" y="453" width="1.3746%" height="15" fill="rgb(221,62,2)" fg:x="273" fg:w="4"/><text x="94.0644%" y="463.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (4 samples, 1.37%)</title><rect x="93.8144%" y="437" width="1.3746%" height="15" fill="rgb(247,87,22)" fg:x="273" fg:w="4"/><text x="94.0644%" y="447.50"></text></g><g><title>leveldb::BuildTable (4 samples, 1.37%)</title><rect x="93.8144%" y="421" width="1.3746%" height="15" fill="rgb(215,73,9)" fg:x="273" fg:w="4"/><text x="94.0644%" y="431.50"></text></g><g><title>Sync (4 samples, 1.37%)</title><rect x="93.8144%" y="405" width="1.3746%" height="15" fill="rgb(207,175,33)" fg:x="273" fg:w="4"/><text x="94.0644%" y="415.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (4 samples, 1.37%)</title><rect x="93.8144%" y="389" width="1.3746%" height="15" fill="rgb(243,129,54)" fg:x="273" fg:w="4"/><text x="94.0644%" y="399.50"></text></g><g><title>fdatasync (4 samples, 1.37%)</title><rect x="93.8144%" y="373" width="1.3746%" height="15" fill="rgb(227,119,45)" fg:x="273" fg:w="4"/><text x="94.0644%" y="383.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="93.8144%" y="357" width="1.3746%" height="15" fill="rgb(205,109,36)" fg:x="273" fg:w="4"/><text x="94.0644%" y="367.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="93.8144%" y="341" width="1.3746%" height="15" fill="rgb(205,6,39)" fg:x="273" fg:w="4"/><text x="94.0644%" y="351.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="93.8144%" y="325" width="1.3746%" height="15" fill="rgb(221,32,16)" fg:x="273" fg:w="4"/><text x="94.0644%" y="335.50"></text></g><g><title>[[ext4]] (4 samples, 1.37%)</title><rect x="93.8144%" y="309" width="1.3746%" height="15" fill="rgb(228,144,50)" fg:x="273" fg:w="4"/><text x="94.0644%" y="319.50"></text></g><g><title>[[jbd2]] (4 samples, 1.37%)</title><rect x="93.8144%" y="293" width="1.3746%" height="15" fill="rgb(229,201,53)" fg:x="273" fg:w="4"/><text x="94.0644%" y="303.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="93.8144%" y="277" width="1.3746%" height="15" fill="rgb(249,153,27)" fg:x="273" fg:w="4"/><text x="94.0644%" y="287.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="93.8144%" y="261" width="1.3746%" height="15" fill="rgb(227,106,25)" fg:x="273" fg:w="4"/><text x="94.0644%" y="271.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="245" width="1.0309%" height="15" fill="rgb(230,65,29)" fg:x="274" fg:w="3"/><text x="94.4081%" y="255.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="229" width="1.0309%" height="15" fill="rgb(221,57,46)" fg:x="274" fg:w="3"/><text x="94.4081%" y="239.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="213" width="1.0309%" height="15" fill="rgb(229,161,17)" fg:x="274" fg:w="3"/><text x="94.4081%" y="223.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="197" width="1.0309%" height="15" fill="rgb(222,213,11)" fg:x="274" fg:w="3"/><text x="94.4081%" y="207.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="181" width="1.0309%" height="15" fill="rgb(235,35,13)" fg:x="274" fg:w="3"/><text x="94.4081%" y="191.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="165" width="1.0309%" height="15" fill="rgb(233,158,34)" fg:x="274" fg:w="3"/><text x="94.4081%" y="175.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="149" width="1.0309%" height="15" fill="rgb(215,151,48)" fg:x="274" fg:w="3"/><text x="94.4081%" y="159.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="133" width="1.0309%" height="15" fill="rgb(229,84,14)" fg:x="274" fg:w="3"/><text x="94.4081%" y="143.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="117" width="1.0309%" height="15" fill="rgb(229,68,14)" fg:x="274" fg:w="3"/><text x="94.4081%" y="127.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="94.1581%" y="101" width="1.0309%" height="15" fill="rgb(243,106,26)" fg:x="274" fg:w="3"/><text x="94.4081%" y="111.50"></text></g><g><title>Chainstate::InitCoinsDB (5 samples, 1.72%)</title><rect x="93.8144%" y="581" width="1.7182%" height="15" fill="rgb(206,45,38)" fg:x="273" fg:w="5"/><text x="94.0644%" y="591.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CoinsViews&gt;::__single_object std::make_unique&lt;CoinsViews, DBParams, CoinsViewOptions const&amp;&gt; (5 samples, 1.72%)</title><rect x="93.8144%" y="565" width="1.7182%" height="15" fill="rgb(226,6,15)" fg:x="273" fg:w="5"/><text x="94.0644%" y="575.50"></text></g><g><title>CoinsViews::CoinsViews (5 samples, 1.72%)</title><rect x="93.8144%" y="549" width="1.7182%" height="15" fill="rgb(232,22,54)" fg:x="273" fg:w="5"/><text x="94.0644%" y="559.50"></text></g><g><title>CCoinsViewDB::CCoinsViewDB (5 samples, 1.72%)</title><rect x="93.8144%" y="533" width="1.7182%" height="15" fill="rgb(229,222,32)" fg:x="273" fg:w="5"/><text x="94.0644%" y="543.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CDBWrapper&gt;::__single_object std::make_unique&lt;CDBWrapper, DBParams&amp;&gt; (5 samples, 1.72%)</title><rect x="93.8144%" y="517" width="1.7182%" height="15" fill="rgb(228,62,29)" fg:x="273" fg:w="5"/><text x="94.0644%" y="527.50"></text></g><g><title>CDBWrapper::CDBWrapper (5 samples, 1.72%)</title><rect x="93.8144%" y="501" width="1.7182%" height="15" fill="rgb(251,103,34)" fg:x="273" fg:w="5"/><text x="94.0644%" y="511.50"></text></g><g><title>leveldb::DB::Open (5 samples, 1.72%)</title><rect x="93.8144%" y="485" width="1.7182%" height="15" fill="rgb(233,12,30)" fg:x="273" fg:w="5"/><text x="94.0644%" y="495.50"></text></g><g><title>leveldb::VersionSet::LogAndApply (1 samples, 0.34%)</title><rect x="95.1890%" y="469" width="0.3436%" height="15" fill="rgb(238,52,0)" fg:x="277" fg:w="1"/><text x="95.4390%" y="479.50"></text></g><g><title>leveldb::SetCurrentFile (1 samples, 0.34%)</title><rect x="95.1890%" y="453" width="0.3436%" height="15" fill="rgb(223,98,5)" fg:x="277" fg:w="1"/><text x="95.4390%" y="463.50"></text></g><g><title>leveldb::WriteStringToFileSync (1 samples, 0.34%)</title><rect x="95.1890%" y="437" width="0.3436%" height="15" fill="rgb(228,75,37)" fg:x="277" fg:w="1"/><text x="95.4390%" y="447.50"></text></g><g><title>leveldb::DoWriteStringToFile (1 samples, 0.34%)</title><rect x="95.1890%" y="421" width="0.3436%" height="15" fill="rgb(205,115,49)" fg:x="277" fg:w="1"/><text x="95.4390%" y="431.50"></text></g><g><title>Sync (1 samples, 0.34%)</title><rect x="95.1890%" y="405" width="0.3436%" height="15" fill="rgb(250,154,43)" fg:x="277" fg:w="1"/><text x="95.4390%" y="415.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1 samples, 0.34%)</title><rect x="95.1890%" y="389" width="0.3436%" height="15" fill="rgb(226,43,29)" fg:x="277" fg:w="1"/><text x="95.4390%" y="399.50"></text></g><g><title>fdatasync (1 samples, 0.34%)</title><rect x="95.1890%" y="373" width="0.3436%" height="15" fill="rgb(249,228,39)" fg:x="277" fg:w="1"/><text x="95.4390%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="357" width="0.3436%" height="15" fill="rgb(216,79,43)" fg:x="277" fg:w="1"/><text x="95.4390%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="341" width="0.3436%" height="15" fill="rgb(228,95,12)" fg:x="277" fg:w="1"/><text x="95.4390%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="325" width="0.3436%" height="15" fill="rgb(249,221,15)" fg:x="277" fg:w="1"/><text x="95.4390%" y="335.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="309" width="0.3436%" height="15" fill="rgb(233,34,13)" fg:x="277" fg:w="1"/><text x="95.4390%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="293" width="0.3436%" height="15" fill="rgb(214,103,39)" fg:x="277" fg:w="1"/><text x="95.4390%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="277" width="0.3436%" height="15" fill="rgb(251,126,39)" fg:x="277" fg:w="1"/><text x="95.4390%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="261" width="0.3436%" height="15" fill="rgb(214,216,36)" fg:x="277" fg:w="1"/><text x="95.4390%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="245" width="0.3436%" height="15" fill="rgb(220,221,8)" fg:x="277" fg:w="1"/><text x="95.4390%" y="255.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="229" width="0.3436%" height="15" fill="rgb(240,216,3)" fg:x="277" fg:w="1"/><text x="95.4390%" y="239.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="213" width="0.3436%" height="15" fill="rgb(232,218,17)" fg:x="277" fg:w="1"/><text x="95.4390%" y="223.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="197" width="0.3436%" height="15" fill="rgb(229,163,45)" fg:x="277" fg:w="1"/><text x="95.4390%" y="207.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="181" width="0.3436%" height="15" fill="rgb(231,110,42)" fg:x="277" fg:w="1"/><text x="95.4390%" y="191.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="165" width="0.3436%" height="15" fill="rgb(208,170,48)" fg:x="277" fg:w="1"/><text x="95.4390%" y="175.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="149" width="0.3436%" height="15" fill="rgb(239,116,25)" fg:x="277" fg:w="1"/><text x="95.4390%" y="159.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="133" width="0.3436%" height="15" fill="rgb(219,200,50)" fg:x="277" fg:w="1"/><text x="95.4390%" y="143.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="117" width="0.3436%" height="15" fill="rgb(245,200,0)" fg:x="277" fg:w="1"/><text x="95.4390%" y="127.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.1890%" y="101" width="0.3436%" height="15" fill="rgb(245,119,33)" fg:x="277" fg:w="1"/><text x="95.4390%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="85" width="0.3436%" height="15" fill="rgb(231,125,12)" fg:x="277" fg:w="1"/><text x="95.4390%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.1890%" y="69" width="0.3436%" height="15" fill="rgb(216,96,41)" fg:x="277" fg:w="1"/><text x="95.4390%" y="79.50"></text></g><g><title>Chainstate::ResizeCoinsCaches (1 samples, 0.34%)</title><rect x="95.5326%" y="581" width="0.3436%" height="15" fill="rgb(248,43,45)" fg:x="278" fg:w="1"/><text x="95.7826%" y="591.50"></text></g><g><title>CCoinsViewDB::ResizeCache (1 samples, 0.34%)</title><rect x="95.5326%" y="565" width="0.3436%" height="15" fill="rgb(217,222,7)" fg:x="278" fg:w="1"/><text x="95.7826%" y="575.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CDBWrapper&gt;::__single_object std::make_unique&lt;CDBWrapper, DBParams&amp;&gt; (1 samples, 0.34%)</title><rect x="95.5326%" y="549" width="0.3436%" height="15" fill="rgb(233,28,6)" fg:x="278" fg:w="1"/><text x="95.7826%" y="559.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.34%)</title><rect x="95.5326%" y="533" width="0.3436%" height="15" fill="rgb(231,218,15)" fg:x="278" fg:w="1"/><text x="95.7826%" y="543.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.34%)</title><rect x="95.5326%" y="517" width="0.3436%" height="15" fill="rgb(226,171,48)" fg:x="278" fg:w="1"/><text x="95.7826%" y="527.50"></text></g><g><title>leveldb::VersionSet::LogAndApply (1 samples, 0.34%)</title><rect x="95.5326%" y="501" width="0.3436%" height="15" fill="rgb(235,201,9)" fg:x="278" fg:w="1"/><text x="95.7826%" y="511.50"></text></g><g><title>leveldb::SetCurrentFile (1 samples, 0.34%)</title><rect x="95.5326%" y="485" width="0.3436%" height="15" fill="rgb(217,80,15)" fg:x="278" fg:w="1"/><text x="95.7826%" y="495.50"></text></g><g><title>leveldb::WriteStringToFileSync (1 samples, 0.34%)</title><rect x="95.5326%" y="469" width="0.3436%" height="15" fill="rgb(219,152,8)" fg:x="278" fg:w="1"/><text x="95.7826%" y="479.50"></text></g><g><title>leveldb::DoWriteStringToFile (1 samples, 0.34%)</title><rect x="95.5326%" y="453" width="0.3436%" height="15" fill="rgb(243,107,38)" fg:x="278" fg:w="1"/><text x="95.7826%" y="463.50"></text></g><g><title>Sync (1 samples, 0.34%)</title><rect x="95.5326%" y="437" width="0.3436%" height="15" fill="rgb(231,17,5)" fg:x="278" fg:w="1"/><text x="95.7826%" y="447.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1 samples, 0.34%)</title><rect x="95.5326%" y="421" width="0.3436%" height="15" fill="rgb(209,25,54)" fg:x="278" fg:w="1"/><text x="95.7826%" y="431.50"></text></g><g><title>fdatasync (1 samples, 0.34%)</title><rect x="95.5326%" y="405" width="0.3436%" height="15" fill="rgb(219,0,2)" fg:x="278" fg:w="1"/><text x="95.7826%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="389" width="0.3436%" height="15" fill="rgb(246,9,5)" fg:x="278" fg:w="1"/><text x="95.7826%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="373" width="0.3436%" height="15" fill="rgb(226,159,4)" fg:x="278" fg:w="1"/><text x="95.7826%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="357" width="0.3436%" height="15" fill="rgb(219,175,34)" fg:x="278" fg:w="1"/><text x="95.7826%" y="367.50"></text></g><g><title>[[ext4]] (1 samples, 0.34%)</title><rect x="95.5326%" y="341" width="0.3436%" height="15" fill="rgb(236,10,46)" fg:x="278" fg:w="1"/><text x="95.7826%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="325" width="0.3436%" height="15" fill="rgb(240,211,16)" fg:x="278" fg:w="1"/><text x="95.7826%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="309" width="0.3436%" height="15" fill="rgb(205,3,43)" fg:x="278" fg:w="1"/><text x="95.7826%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="293" width="0.3436%" height="15" fill="rgb(245,7,22)" fg:x="278" fg:w="1"/><text x="95.7826%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="277" width="0.3436%" height="15" fill="rgb(239,132,32)" fg:x="278" fg:w="1"/><text x="95.7826%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="261" width="0.3436%" height="15" fill="rgb(228,202,34)" fg:x="278" fg:w="1"/><text x="95.7826%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="245" width="0.3436%" height="15" fill="rgb(254,200,22)" fg:x="278" fg:w="1"/><text x="95.7826%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="229" width="0.3436%" height="15" fill="rgb(219,10,39)" fg:x="278" fg:w="1"/><text x="95.7826%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="213" width="0.3436%" height="15" fill="rgb(226,210,39)" fg:x="278" fg:w="1"/><text x="95.7826%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="197" width="0.3436%" height="15" fill="rgb(208,219,16)" fg:x="278" fg:w="1"/><text x="95.7826%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.5326%" y="181" width="0.3436%" height="15" fill="rgb(216,158,51)" fg:x="278" fg:w="1"/><text x="95.7826%" y="191.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.34%)</title><rect x="95.8763%" y="517" width="0.3436%" height="15" fill="rgb(233,14,44)" fg:x="279" fg:w="1"/><text x="96.1263%" y="527.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.34%)</title><rect x="95.8763%" y="501" width="0.3436%" height="15" fill="rgb(237,97,39)" fg:x="279" fg:w="1"/><text x="96.1263%" y="511.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.34%)</title><rect x="95.8763%" y="485" width="0.3436%" height="15" fill="rgb(218,198,43)" fg:x="279" fg:w="1"/><text x="96.1263%" y="495.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.34%)</title><rect x="95.8763%" y="469" width="0.3436%" height="15" fill="rgb(231,104,20)" fg:x="279" fg:w="1"/><text x="96.1263%" y="479.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.34%)</title><rect x="95.8763%" y="453" width="0.3436%" height="15" fill="rgb(254,36,13)" fg:x="279" fg:w="1"/><text x="96.1263%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.34%)</title><rect x="95.8763%" y="437" width="0.3436%" height="15" fill="rgb(248,14,50)" fg:x="279" fg:w="1"/><text x="96.1263%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.34%)</title><rect x="95.8763%" y="421" width="0.3436%" height="15" fill="rgb(217,107,29)" fg:x="279" fg:w="1"/><text x="96.1263%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="95.8763%" y="405" width="0.3436%" height="15" fill="rgb(251,169,33)" fg:x="279" fg:w="1"/><text x="96.1263%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.34%)</title><rect x="95.8763%" y="389" width="0.3436%" height="15" fill="rgb(217,108,32)" fg:x="279" fg:w="1"/><text x="96.1263%" y="399.50"></text></g><g><title>main (20 samples, 6.87%)</title><rect x="89.6907%" y="709" width="6.8729%" height="15" fill="rgb(219,66,42)" fg:x="261" fg:w="20"/><text x="89.9407%" y="719.50">main</text></g><g><title>main (20 samples, 6.87%)</title><rect x="89.6907%" y="693" width="6.8729%" height="15" fill="rgb(206,180,7)" fg:x="261" fg:w="20"/><text x="89.9407%" y="703.50">main</text></g><g><title>AppInitMain (20 samples, 6.87%)</title><rect x="89.6907%" y="677" width="6.8729%" height="15" fill="rgb(208,226,31)" fg:x="261" fg:w="20"/><text x="89.9407%" y="687.50">AppInitMa..</text></g><g><title>InitAndLoadChainstate (20 samples, 6.87%)</title><rect x="89.6907%" y="661" width="6.8729%" height="15" fill="rgb(218,26,49)" fg:x="261" fg:w="20"/><text x="89.9407%" y="671.50">InitAndLo..</text></g><g><title>operator (20 samples, 6.87%)</title><rect x="89.6907%" y="645" width="6.8729%" height="15" fill="rgb(233,197,48)" fg:x="261" fg:w="20"/><text x="89.9407%" y="655.50">operator</text></g><g><title>InitAndLoadChainstate (20 samples, 6.87%)</title><rect x="89.6907%" y="629" width="6.8729%" height="15" fill="rgb(252,181,51)" fg:x="261" fg:w="20"/><text x="89.9407%" y="639.50">InitAndLo..</text></g><g><title>node::LoadChainstate (20 samples, 6.87%)</title><rect x="89.6907%" y="613" width="6.8729%" height="15" fill="rgb(253,90,19)" fg:x="261" fg:w="20"/><text x="89.9407%" y="623.50">node::Loa..</text></g><g><title>node::CompleteChainstateInitialization (8 samples, 2.75%)</title><rect x="93.8144%" y="597" width="2.7491%" height="15" fill="rgb(215,171,30)" fg:x="273" fg:w="8"/><text x="94.0644%" y="607.50">no..</text></g><g><title>ChainstateManager::LoadBlockIndex (2 samples, 0.69%)</title><rect x="95.8763%" y="581" width="0.6873%" height="15" fill="rgb(214,222,9)" fg:x="279" fg:w="2"/><text x="96.1263%" y="591.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (2 samples, 0.69%)</title><rect x="95.8763%" y="565" width="0.6873%" height="15" fill="rgb(223,3,22)" fg:x="279" fg:w="2"/><text x="96.1263%" y="575.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (2 samples, 0.69%)</title><rect x="95.8763%" y="549" width="0.6873%" height="15" fill="rgb(225,196,46)" fg:x="279" fg:w="2"/><text x="96.1263%" y="559.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (2 samples, 0.69%)</title><rect x="95.8763%" y="533" width="0.6873%" height="15" fill="rgb(209,110,37)" fg:x="279" fg:w="2"/><text x="96.1263%" y="543.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.34%)</title><rect x="96.2199%" y="517" width="0.3436%" height="15" fill="rgb(249,89,12)" fg:x="280" fg:w="1"/><text x="96.4699%" y="527.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.34%)</title><rect x="96.2199%" y="501" width="0.3436%" height="15" fill="rgb(226,27,33)" fg:x="280" fg:w="1"/><text x="96.4699%" y="511.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.34%)</title><rect x="96.2199%" y="485" width="0.3436%" height="15" fill="rgb(213,82,22)" fg:x="280" fg:w="1"/><text x="96.4699%" y="495.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.34%)</title><rect x="96.2199%" y="469" width="0.3436%" height="15" fill="rgb(248,140,0)" fg:x="280" fg:w="1"/><text x="96.4699%" y="479.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.34%)</title><rect x="96.2199%" y="453" width="0.3436%" height="15" fill="rgb(228,106,3)" fg:x="280" fg:w="1"/><text x="96.4699%" y="463.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.34%)</title><rect x="96.2199%" y="437" width="0.3436%" height="15" fill="rgb(209,23,37)" fg:x="280" fg:w="1"/><text x="96.4699%" y="447.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.34%)</title><rect x="96.2199%" y="421" width="0.3436%" height="15" fill="rgb(241,93,50)" fg:x="280" fg:w="1"/><text x="96.4699%" y="431.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.34%)</title><rect x="96.2199%" y="405" width="0.3436%" height="15" fill="rgb(253,46,43)" fg:x="280" fg:w="1"/><text x="96.4699%" y="415.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.34%)</title><rect x="96.2199%" y="389" width="0.3436%" height="15" fill="rgb(226,206,43)" fg:x="280" fg:w="1"/><text x="96.4699%" y="399.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.34%)</title><rect x="96.2199%" y="373" width="0.3436%" height="15" fill="rgb(217,54,7)" fg:x="280" fg:w="1"/><text x="96.4699%" y="383.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.34%)</title><rect x="96.2199%" y="357" width="0.3436%" height="15" fill="rgb(223,5,52)" fg:x="280" fg:w="1"/><text x="96.4699%" y="367.50"></text></g><g><title>bitcoind-base (201 samples, 69.07%)</title><rect x="27.8351%" y="725" width="69.0722%" height="15" fill="rgb(206,52,46)" fg:x="81" fg:w="201"/><text x="28.0851%" y="735.50">bitcoind-base</text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.34%)</title><rect x="96.5636%" y="709" width="0.3436%" height="15" fill="rgb(253,136,11)" fg:x="281" fg:w="1"/><text x="96.8136%" y="719.50"></text></g><g><title>perf-exec (4 samples, 1.37%)</title><rect x="96.9072%" y="725" width="1.3746%" height="15" fill="rgb(208,106,33)" fg:x="282" fg:w="4"/><text x="97.1572%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="709" width="1.3746%" height="15" fill="rgb(206,54,4)" fg:x="282" fg:w="4"/><text x="97.1572%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="693" width="1.3746%" height="15" fill="rgb(213,3,15)" fg:x="282" fg:w="4"/><text x="97.1572%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="677" width="1.3746%" height="15" fill="rgb(252,211,39)" fg:x="282" fg:w="4"/><text x="97.1572%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="661" width="1.3746%" height="15" fill="rgb(223,6,36)" fg:x="282" fg:w="4"/><text x="97.1572%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="645" width="1.3746%" height="15" fill="rgb(252,169,45)" fg:x="282" fg:w="4"/><text x="97.1572%" y="655.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="629" width="1.3746%" height="15" fill="rgb(212,48,26)" fg:x="282" fg:w="4"/><text x="97.1572%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="613" width="1.3746%" height="15" fill="rgb(251,102,48)" fg:x="282" fg:w="4"/><text x="97.1572%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="597" width="1.3746%" height="15" fill="rgb(243,208,16)" fg:x="282" fg:w="4"/><text x="97.1572%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="96.9072%" y="581" width="1.3746%" height="15" fill="rgb(219,96,24)" fg:x="282" fg:w="4"/><text x="97.1572%" y="591.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="97.2509%" y="565" width="1.0309%" height="15" fill="rgb(219,33,29)" fg:x="283" fg:w="3"/><text x="97.5009%" y="575.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="97.2509%" y="549" width="1.0309%" height="15" fill="rgb(223,176,5)" fg:x="283" fg:w="3"/><text x="97.5009%" y="559.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="97.2509%" y="533" width="1.0309%" height="15" fill="rgb(228,140,14)" fg:x="283" fg:w="3"/><text x="97.5009%" y="543.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="97.2509%" y="517" width="1.0309%" height="15" fill="rgb(217,179,31)" fg:x="283" fg:w="3"/><text x="97.5009%" y="527.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="97.2509%" y="501" width="1.0309%" height="15" fill="rgb(230,9,30)" fg:x="283" fg:w="3"/><text x="97.5009%" y="511.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="97.2509%" y="485" width="1.0309%" height="15" fill="rgb(230,136,20)" fg:x="283" fg:w="3"/><text x="97.5009%" y="495.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4 samples, 1.37%)</title><rect x="98.2818%" y="693" width="1.3746%" height="15" fill="rgb(215,210,22)" fg:x="286" fg:w="4"/><text x="98.5318%" y="703.50"></text></g><g><title>__libc_start_call_main (4 samples, 1.37%)</title><rect x="98.2818%" y="677" width="1.3746%" height="15" fill="rgb(218,43,5)" fg:x="286" fg:w="4"/><text x="98.5318%" y="687.50"></text></g><g><title>main (4 samples, 1.37%)</title><rect x="98.2818%" y="661" width="1.3746%" height="15" fill="rgb(216,11,5)" fg:x="286" fg:w="4"/><text x="98.5318%" y="671.50"></text></g><g><title>do_taskset (4 samples, 1.37%)</title><rect x="98.2818%" y="645" width="1.3746%" height="15" fill="rgb(209,82,29)" fg:x="286" fg:w="4"/><text x="98.5318%" y="655.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (4 samples, 1.37%)</title><rect x="98.2818%" y="629" width="1.3746%" height="15" fill="rgb(244,115,12)" fg:x="286" fg:w="4"/><text x="98.5318%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="613" width="1.3746%" height="15" fill="rgb(222,82,18)" fg:x="286" fg:w="4"/><text x="98.5318%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="597" width="1.3746%" height="15" fill="rgb(249,227,8)" fg:x="286" fg:w="4"/><text x="98.5318%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="581" width="1.3746%" height="15" fill="rgb(253,141,45)" fg:x="286" fg:w="4"/><text x="98.5318%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="565" width="1.3746%" height="15" fill="rgb(234,184,4)" fg:x="286" fg:w="4"/><text x="98.5318%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="549" width="1.3746%" height="15" fill="rgb(218,194,23)" fg:x="286" fg:w="4"/><text x="98.5318%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="533" width="1.3746%" height="15" fill="rgb(235,66,41)" fg:x="286" fg:w="4"/><text x="98.5318%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="517" width="1.3746%" height="15" fill="rgb(245,217,1)" fg:x="286" fg:w="4"/><text x="98.5318%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="501" width="1.3746%" height="15" fill="rgb(229,91,1)" fg:x="286" fg:w="4"/><text x="98.5318%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="485" width="1.3746%" height="15" fill="rgb(207,101,30)" fg:x="286" fg:w="4"/><text x="98.5318%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="98.2818%" y="469" width="1.3746%" height="15" fill="rgb(223,82,49)" fg:x="286" fg:w="4"/><text x="98.5318%" y="479.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="453" width="1.0309%" height="15" fill="rgb(218,167,17)" fg:x="287" fg:w="3"/><text x="98.8754%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="437" width="1.0309%" height="15" fill="rgb(208,103,14)" fg:x="287" fg:w="3"/><text x="98.8754%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="421" width="1.0309%" height="15" fill="rgb(238,20,8)" fg:x="287" fg:w="3"/><text x="98.8754%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="405" width="1.0309%" height="15" fill="rgb(218,80,54)" fg:x="287" fg:w="3"/><text x="98.8754%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="389" width="1.0309%" height="15" fill="rgb(240,144,17)" fg:x="287" fg:w="3"/><text x="98.8754%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="373" width="1.0309%" height="15" fill="rgb(245,27,50)" fg:x="287" fg:w="3"/><text x="98.8754%" y="383.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="357" width="1.0309%" height="15" fill="rgb(251,51,7)" fg:x="287" fg:w="3"/><text x="98.8754%" y="367.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="341" width="1.0309%" height="15" fill="rgb(245,217,29)" fg:x="287" fg:w="3"/><text x="98.8754%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="325" width="1.0309%" height="15" fill="rgb(221,176,29)" fg:x="287" fg:w="3"/><text x="98.8754%" y="335.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="309" width="1.0309%" height="15" fill="rgb(212,180,24)" fg:x="287" fg:w="3"/><text x="98.8754%" y="319.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="293" width="1.0309%" height="15" fill="rgb(254,24,2)" fg:x="287" fg:w="3"/><text x="98.8754%" y="303.50"></text></g><g><title>[unknown] (3 samples, 1.03%)</title><rect x="98.6254%" y="277" width="1.0309%" height="15" fill="rgb(230,100,2)" fg:x="287" fg:w="3"/><text x="98.8754%" y="287.50"></text></g><g><title>all (291 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(219,142,25)" fg:x="0" fg:w="291"/><text x="0.2500%" y="751.50"></text></g><g><title>taskset (5 samples, 1.72%)</title><rect x="98.2818%" y="725" width="1.7182%" height="15" fill="rgb(240,73,43)" fg:x="286" fg:w="5"/><text x="98.5318%" y="735.50"></text></g><g><title>_start (5 samples, 1.72%)</title><rect x="98.2818%" y="709" width="1.7182%" height="15" fill="rgb(214,114,15)" fg:x="286" fg:w="5"/><text x="98.5318%" y="719.50"></text></g><g><title>_dl_start (1 samples, 0.34%)</title><rect x="99.6564%" y="693" width="0.3436%" height="15" fill="rgb(207,130,4)" fg:x="290" fg:w="1"/><text x="99.9064%" y="703.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.34%)</title><rect x="99.6564%" y="677" width="0.3436%" height="15" fill="rgb(221,25,40)" fg:x="290" fg:w="1"/><text x="99.9064%" y="687.50"></text></g><g><title>dl_main (1 samples, 0.34%)</title><rect x="99.6564%" y="661" width="0.3436%" height="15" fill="rgb(241,184,7)" fg:x="290" fg:w="1"/><text x="99.9064%" y="671.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.34%)</title><rect x="99.6564%" y="645" width="0.3436%" height="15" fill="rgb(235,159,4)" fg:x="290" fg:w="1"/><text x="99.9064%" y="655.50"></text></g></svg></svg>