<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1494" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1477.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1477.00"> </text><svg id="frames" x="10" width="1180" total_samples="2938"><g><title>b-addcon (4 samples, 0.14%)</title><rect x="0.0000%" y="1429" width="0.1361%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="0.0000%" y="1413" width="0.1361%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="0.0000%" y="1397" width="0.1361%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1407.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.14%)</title><rect x="0.0000%" y="1381" width="0.1361%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1391.50"></text></g><g><title>_M_run (4 samples, 0.14%)</title><rect x="0.0000%" y="1365" width="0.1361%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1375.50"></text></g><g><title>operator (4 samples, 0.14%)</title><rect x="0.0000%" y="1349" width="0.1361%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1359.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (4 samples, 0.14%)</title><rect x="0.0000%" y="1333" width="0.1361%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1343.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (4 samples, 0.14%)</title><rect x="0.0000%" y="1317" width="0.1361%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1327.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#3}&gt; &gt; &gt;::_M_run (4 samples, 0.14%)</title><rect x="0.0000%" y="1301" width="0.1361%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50"></text></g><g><title>util::TraceThread (4 samples, 0.14%)</title><rect x="0.0000%" y="1285" width="0.1361%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1295.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (4 samples, 0.14%)</title><rect x="0.0000%" y="1269" width="0.1361%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1279.50"></text></g><g><title>CConnman::ThreadOpenAddedConnections (4 samples, 0.14%)</title><rect x="0.0000%" y="1253" width="0.1361%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1263.50"></text></g><g><title>CThreadInterrupt::sleep_for (4 samples, 0.14%)</title><rect x="0.0000%" y="1237" width="0.1361%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1247.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.14%)</title><rect x="0.0000%" y="1221" width="0.1361%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1231.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.14%)</title><rect x="0.0000%" y="1205" width="0.1361%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1215.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="0.0000%" y="1189" width="0.1361%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1199.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="0.0000%" y="1173" width="0.1361%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1183.50"></text></g><g><title>std::__condvar::wait_until (4 samples, 0.14%)</title><rect x="0.0000%" y="1157" width="0.1361%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1167.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (4 samples, 0.14%)</title><rect x="0.0000%" y="1141" width="0.1361%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1151.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.14%)</title><rect x="0.0000%" y="1125" width="0.1361%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="0.0000%" y="1109" width="0.1361%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="0.0000%" y="1093" width="0.1361%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="0.0000%" y="1077" width="0.1361%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="0.0000%" y="1061" width="0.1361%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="0.0000%" y="1045" width="0.1361%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="0.0000%" y="1029" width="0.1361%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="0.0000%" y="1013" width="0.1361%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="997" width="0.1021%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="3"/><text x="0.2840%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="981" width="0.1021%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="3"/><text x="0.2840%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="965" width="0.1021%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="3"/><text x="0.2840%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="949" width="0.1021%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="3"/><text x="0.2840%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="933" width="0.1021%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="3"/><text x="0.2840%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="917" width="0.1021%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="3"/><text x="0.2840%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="901" width="0.1021%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="3"/><text x="0.2840%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="885" width="0.1021%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="3"/><text x="0.2840%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0340%" y="869" width="0.1021%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="3"/><text x="0.2840%" y="879.50"></text></g><g><title>AddCoins (2 samples, 0.07%)</title><rect x="0.1361%" y="1413" width="0.0681%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="2"/><text x="0.3861%" y="1423.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (4 samples, 0.14%)</title><rect x="0.5786%" y="1397" width="0.1361%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="4"/><text x="0.8286%" y="1407.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.14%)</title><rect x="0.5786%" y="1381" width="0.1361%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="4"/><text x="0.8286%" y="1391.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.14%)</title><rect x="0.5786%" y="1365" width="0.1361%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="4"/><text x="0.8286%" y="1375.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.14%)</title><rect x="0.5786%" y="1349" width="0.1361%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="4"/><text x="0.8286%" y="1359.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (4 samples, 0.14%)</title><rect x="0.5786%" y="1333" width="0.1361%" height="15" fill="rgb(208,69,12)" fg:x="17" fg:w="4"/><text x="0.8286%" y="1343.50"></text></g><g><title>AutoFile::write (55 samples, 1.87%)</title><rect x="0.2042%" y="1413" width="1.8720%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="55"/><text x="0.4542%" y="1423.50">A..</text></g><g><title>util::Xor (40 samples, 1.36%)</title><rect x="0.7148%" y="1397" width="1.3615%" height="15" fill="rgb(213,116,39)" fg:x="21" fg:w="40"/><text x="0.9648%" y="1407.50"></text></g><g><title>std::operator^= (14 samples, 0.48%)</title><rect x="1.5997%" y="1381" width="0.4765%" height="15" fill="rgb(222,207,29)" fg:x="47" fg:w="14"/><text x="1.8497%" y="1391.50"></text></g><g><title>std::operator^ (14 samples, 0.48%)</title><rect x="1.5997%" y="1365" width="0.4765%" height="15" fill="rgb(206,96,30)" fg:x="47" fg:w="14"/><text x="1.8497%" y="1375.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="2.0762%" y="1413" width="0.0340%" height="15" fill="rgb(218,138,4)" fg:x="61" fg:w="1"/><text x="2.3262%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.03%)</title><rect x="2.0762%" y="1397" width="0.0340%" height="15" fill="rgb(250,191,14)" fg:x="61" fg:w="1"/><text x="2.3262%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.03%)</title><rect x="2.0762%" y="1381" width="0.0340%" height="15" fill="rgb(239,60,40)" fg:x="61" fg:w="1"/><text x="2.3262%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.03%)</title><rect x="2.0762%" y="1365" width="0.0340%" height="15" fill="rgb(206,27,48)" fg:x="61" fg:w="1"/><text x="2.3262%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.0762%" y="1349" width="0.0340%" height="15" fill="rgb(225,35,8)" fg:x="61" fg:w="1"/><text x="2.3262%" y="1359.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="2.1103%" y="1413" width="0.0340%" height="15" fill="rgb(250,213,24)" fg:x="62" fg:w="1"/><text x="2.3603%" y="1423.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.03%)</title><rect x="2.1443%" y="1413" width="0.0340%" height="15" fill="rgb(247,123,22)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1423.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.03%)</title><rect x="2.1443%" y="1397" width="0.0340%" height="15" fill="rgb(231,138,38)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1407.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.03%)</title><rect x="2.1443%" y="1381" width="0.0340%" height="15" fill="rgb(231,145,46)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1391.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="2.1443%" y="1365" width="0.0340%" height="15" fill="rgb(251,118,11)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1375.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="2.1443%" y="1349" width="0.0340%" height="15" fill="rgb(217,147,25)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1359.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="2.1443%" y="1333" width="0.0340%" height="15" fill="rgb(247,81,37)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1343.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="2.1443%" y="1317" width="0.0340%" height="15" fill="rgb(209,12,38)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1327.50"></text></g><g><title>Coin::Coin (1 samples, 0.03%)</title><rect x="2.1443%" y="1301" width="0.0340%" height="15" fill="rgb(227,1,9)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1311.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="2.1443%" y="1285" width="0.0340%" height="15" fill="rgb(248,47,43)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1295.50"></text></g><g><title>CScript::CScript (1 samples, 0.03%)</title><rect x="2.1443%" y="1269" width="0.0340%" height="15" fill="rgb(221,10,30)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1279.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.03%)</title><rect x="2.1443%" y="1253" width="0.0340%" height="15" fill="rgb(210,229,1)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.03%)</title><rect x="2.1443%" y="1237" width="0.0340%" height="15" fill="rgb(222,148,37)" fg:x="63" fg:w="1"/><text x="2.3943%" y="1247.50"></text></g><g><title>CConnman::ThreadMessageHandler (1 samples, 0.03%)</title><rect x="2.1784%" y="1413" width="0.0340%" height="15" fill="rgb(234,67,33)" fg:x="64" fg:w="1"/><text x="2.4284%" y="1423.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CConnman::ThreadMessageHandler()::&lt;lambda()&gt; &gt; (1 samples, 0.03%)</title><rect x="2.1784%" y="1397" width="0.0340%" height="15" fill="rgb(247,98,35)" fg:x="64" fg:w="1"/><text x="2.4284%" y="1407.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="2.1784%" y="1381" width="0.0340%" height="15" fill="rgb(247,138,52)" fg:x="64" fg:w="1"/><text x="2.4284%" y="1391.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="2.1784%" y="1365" width="0.0340%" height="15" fill="rgb(213,79,30)" fg:x="64" fg:w="1"/><text x="2.4284%" y="1375.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (1 samples, 0.03%)</title><rect x="2.1784%" y="1349" width="0.0340%" height="15" fill="rgb(246,177,23)" fg:x="64" fg:w="1"/><text x="2.4284%" y="1359.50"></text></g><g><title>__pthread_mutex_cond_lock (1 samples, 0.03%)</title><rect x="2.1784%" y="1333" width="0.0340%" height="15" fill="rgb(230,62,27)" fg:x="64" fg:w="1"/><text x="2.4284%" y="1343.50"></text></g><g><title>CNode::PollMessage (1 samples, 0.03%)</title><rect x="2.2124%" y="1413" width="0.0340%" height="15" fill="rgb(216,154,8)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1423.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::optional&lt;std::pair&lt;CNetMessage, bool&gt;, true&gt; (1 samples, 0.03%)</title><rect x="2.2124%" y="1397" width="0.0340%" height="15" fill="rgb(244,35,45)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1407.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false&gt; (1 samples, 0.03%)</title><rect x="2.2124%" y="1381" width="0.0340%" height="15" fill="rgb(251,115,12)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1391.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt; (1 samples, 0.03%)</title><rect x="2.2124%" y="1365" width="0.0340%" height="15" fill="rgb(240,54,50)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1375.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, true, false, false&gt;::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt; (1 samples, 0.03%)</title><rect x="2.2124%" y="1349" width="0.0340%" height="15" fill="rgb(233,84,52)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1359.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt; (1 samples, 0.03%)</title><rect x="2.2124%" y="1333" width="0.0340%" height="15" fill="rgb(207,117,47)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1343.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_Storage&lt;std::pair&lt;CNetMessage, bool&gt;, false&gt;::_Storage&lt;std::pair&lt;CNetMessage, bool&gt; &gt; (1 samples, 0.03%)</title><rect x="2.2124%" y="1317" width="0.0340%" height="15" fill="rgb(249,43,39)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1327.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::pair (1 samples, 0.03%)</title><rect x="2.2124%" y="1301" width="0.0340%" height="15" fill="rgb(209,38,44)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1311.50"></text></g><g><title>CNetMessage::CNetMessage (1 samples, 0.03%)</title><rect x="2.2124%" y="1285" width="0.0340%" height="15" fill="rgb(236,212,23)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.03%)</title><rect x="2.2124%" y="1269" width="0.0340%" height="15" fill="rgb(242,79,21)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="2.2124%" y="1253" width="0.0340%" height="15" fill="rgb(211,96,35)" fg:x="65" fg:w="1"/><text x="2.4624%" y="1263.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.03%)</title><rect x="2.2464%" y="1413" width="0.0340%" height="15" fill="rgb(253,215,40)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1423.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1397" width="0.0340%" height="15" fill="rgb(211,81,21)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1407.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1381" width="0.0340%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1391.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1365" width="0.0340%" height="15" fill="rgb(235,213,38)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1375.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1349" width="0.0340%" height="15" fill="rgb(237,122,38)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1359.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1333" width="0.0340%" height="15" fill="rgb(244,218,35)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1343.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1317" width="0.0340%" height="15" fill="rgb(240,68,47)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1327.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1301" width="0.0340%" height="15" fill="rgb(210,16,53)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1311.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1285" width="0.0340%" height="15" fill="rgb(235,124,12)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1295.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1269" width="0.0340%" height="15" fill="rgb(224,169,11)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1279.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="2.2464%" y="1253" width="0.0340%" height="15" fill="rgb(250,166,2)" fg:x="66" fg:w="1"/><text x="2.4964%" y="1263.50"></text></g><g><title>CTransaction::CTransaction (1 samples, 0.03%)</title><rect x="2.2805%" y="1413" width="0.0340%" height="15" fill="rgb(242,216,29)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1423.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::vector (1 samples, 0.03%)</title><rect x="2.2805%" y="1397" width="0.0340%" height="15" fill="rgb(230,116,27)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1407.50"></text></g><g><title>CTxOut* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;, CTxOut*, CTxOut&gt; (1 samples, 0.03%)</title><rect x="2.2805%" y="1381" width="0.0340%" height="15" fill="rgb(228,99,48)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1391.50"></text></g><g><title>CTxOut* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;, CTxOut*&gt; (1 samples, 0.03%)</title><rect x="2.2805%" y="1365" width="0.0340%" height="15" fill="rgb(253,11,6)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1375.50"></text></g><g><title>CTxOut* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;, CTxOut*&gt; (1 samples, 0.03%)</title><rect x="2.2805%" y="1349" width="0.0340%" height="15" fill="rgb(247,143,39)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1359.50"></text></g><g><title>CTxOut* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;, CTxOut*&gt; (1 samples, 0.03%)</title><rect x="2.2805%" y="1333" width="0.0340%" height="15" fill="rgb(236,97,10)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1343.50"></text></g><g><title>void std::_Construct&lt;CTxOut, CTxOut const&amp;&gt; (1 samples, 0.03%)</title><rect x="2.2805%" y="1317" width="0.0340%" height="15" fill="rgb(233,208,19)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1327.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="2.2805%" y="1301" width="0.0340%" height="15" fill="rgb(216,164,2)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1311.50"></text></g><g><title>CScript::CScript (1 samples, 0.03%)</title><rect x="2.2805%" y="1285" width="0.0340%" height="15" fill="rgb(220,129,5)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.03%)</title><rect x="2.2805%" y="1269" width="0.0340%" height="15" fill="rgb(242,17,10)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1279.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="2.2805%" y="1253" width="0.0340%" height="15" fill="rgb(242,107,0)" fg:x="67" fg:w="1"/><text x="2.5305%" y="1263.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.07%)</title><rect x="2.3145%" y="1413" width="0.0681%" height="15" fill="rgb(251,28,31)" fg:x="68" fg:w="2"/><text x="2.5645%" y="1423.50"></text></g><g><title>CTxIn* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;, CTxIn*&gt; (1 samples, 0.03%)</title><rect x="2.3826%" y="1413" width="0.0340%" height="15" fill="rgb(233,223,10)" fg:x="70" fg:w="1"/><text x="2.6326%" y="1423.50"></text></g><g><title>void std::_Construct&lt;CTxIn, CTxIn const&amp;&gt; (1 samples, 0.03%)</title><rect x="2.3826%" y="1397" width="0.0340%" height="15" fill="rgb(215,21,27)" fg:x="70" fg:w="1"/><text x="2.6326%" y="1407.50"></text></g><g><title>CTxIn::CTxIn (1 samples, 0.03%)</title><rect x="2.3826%" y="1381" width="0.0340%" height="15" fill="rgb(232,23,21)" fg:x="70" fg:w="1"/><text x="2.6326%" y="1391.50"></text></g><g><title>CScript::CScript (1 samples, 0.03%)</title><rect x="2.3826%" y="1365" width="0.0340%" height="15" fill="rgb(244,5,23)" fg:x="70" fg:w="1"/><text x="2.6326%" y="1375.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.03%)</title><rect x="2.3826%" y="1349" width="0.0340%" height="15" fill="rgb(226,81,46)" fg:x="70" fg:w="1"/><text x="2.6326%" y="1359.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="2.3826%" y="1333" width="0.0340%" height="15" fill="rgb(247,70,30)" fg:x="70" fg:w="1"/><text x="2.6326%" y="1343.50"></text></g><g><title>Chainstate::ConnectBlock (2 samples, 0.07%)</title><rect x="2.4166%" y="1413" width="0.0681%" height="15" fill="rgb(212,68,19)" fg:x="71" fg:w="2"/><text x="2.6666%" y="1423.50"></text></g><g><title>CCheckQueueControl&lt;CScriptCheck&gt;::Add (2 samples, 0.07%)</title><rect x="2.4166%" y="1397" width="0.0681%" height="15" fill="rgb(240,187,13)" fg:x="71" fg:w="2"/><text x="2.6666%" y="1407.50"></text></g><g><title>Chainstate::GetCoinsCacheSizeState (1 samples, 0.03%)</title><rect x="2.4847%" y="1413" width="0.0340%" height="15" fill="rgb(223,113,26)" fg:x="73" fg:w="1"/><text x="2.7347%" y="1423.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="2.4847%" y="1397" width="0.0340%" height="15" fill="rgb(206,192,2)" fg:x="73" fg:w="1"/><text x="2.7347%" y="1407.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="2.5187%" y="565" width="0.1021%" height="15" fill="rgb(241,108,4)" fg:x="74" fg:w="3"/><text x="2.7687%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.5187%" y="549" width="0.1021%" height="15" fill="rgb(247,173,49)" fg:x="74" fg:w="3"/><text x="2.7687%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.5187%" y="533" width="0.1021%" height="15" fill="rgb(224,114,35)" fg:x="74" fg:w="3"/><text x="2.7687%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="2.5528%" y="517" width="0.0681%" height="15" fill="rgb(245,159,27)" fg:x="75" fg:w="2"/><text x="2.8028%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="2.5528%" y="501" width="0.0681%" height="15" fill="rgb(245,172,44)" fg:x="75" fg:w="2"/><text x="2.8028%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="2.5528%" y="485" width="0.0681%" height="15" fill="rgb(236,23,11)" fg:x="75" fg:w="2"/><text x="2.8028%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.5868%" y="469" width="0.0340%" height="15" fill="rgb(205,117,38)" fg:x="76" fg:w="1"/><text x="2.8368%" y="479.50"></text></g><g><title>_IO_fwrite (5 samples, 0.17%)</title><rect x="2.5187%" y="757" width="0.1702%" height="15" fill="rgb(237,72,25)" fg:x="74" fg:w="5"/><text x="2.7687%" y="767.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="2.5187%" y="741" width="0.1702%" height="15" fill="rgb(244,70,9)" fg:x="74" fg:w="5"/><text x="2.7687%" y="751.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="2.5187%" y="725" width="0.1702%" height="15" fill="rgb(217,125,39)" fg:x="74" fg:w="5"/><text x="2.7687%" y="735.50"></text></g><g><title>new_do_write (5 samples, 0.17%)</title><rect x="2.5187%" y="709" width="0.1702%" height="15" fill="rgb(235,36,10)" fg:x="74" fg:w="5"/><text x="2.7687%" y="719.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="2.5187%" y="693" width="0.1702%" height="15" fill="rgb(251,123,47)" fg:x="74" fg:w="5"/><text x="2.7687%" y="703.50"></text></g><g><title>__GI___libc_write (5 samples, 0.17%)</title><rect x="2.5187%" y="677" width="0.1702%" height="15" fill="rgb(221,13,13)" fg:x="74" fg:w="5"/><text x="2.7687%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="2.5187%" y="661" width="0.1702%" height="15" fill="rgb(238,131,9)" fg:x="74" fg:w="5"/><text x="2.7687%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="2.5187%" y="645" width="0.1702%" height="15" fill="rgb(211,50,8)" fg:x="74" fg:w="5"/><text x="2.7687%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="2.5187%" y="629" width="0.1702%" height="15" fill="rgb(245,182,24)" fg:x="74" fg:w="5"/><text x="2.7687%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="2.5187%" y="613" width="0.1702%" height="15" fill="rgb(242,14,37)" fg:x="74" fg:w="5"/><text x="2.7687%" y="623.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="2.5187%" y="597" width="0.1702%" height="15" fill="rgb(246,228,12)" fg:x="74" fg:w="5"/><text x="2.7687%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="2.5187%" y="581" width="0.1702%" height="15" fill="rgb(213,55,15)" fg:x="74" fg:w="5"/><text x="2.7687%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="2.6208%" y="565" width="0.0681%" height="15" fill="rgb(209,9,3)" fg:x="77" fg:w="2"/><text x="2.8708%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="549" width="0.0340%" height="15" fill="rgb(230,59,30)" fg:x="78" fg:w="1"/><text x="2.9049%" y="559.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="2.6549%" y="533" width="0.0340%" height="15" fill="rgb(209,121,21)" fg:x="78" fg:w="1"/><text x="2.9049%" y="543.50"></text></g><g><title>[[jbd2]] (1 samples, 0.03%)</title><rect x="2.6549%" y="517" width="0.0340%" height="15" fill="rgb(220,109,13)" fg:x="78" fg:w="1"/><text x="2.9049%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="501" width="0.0340%" height="15" fill="rgb(232,18,1)" fg:x="78" fg:w="1"/><text x="2.9049%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="485" width="0.0340%" height="15" fill="rgb(215,41,42)" fg:x="78" fg:w="1"/><text x="2.9049%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="469" width="0.0340%" height="15" fill="rgb(224,123,36)" fg:x="78" fg:w="1"/><text x="2.9049%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="453" width="0.0340%" height="15" fill="rgb(240,125,3)" fg:x="78" fg:w="1"/><text x="2.9049%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="437" width="0.0340%" height="15" fill="rgb(205,98,50)" fg:x="78" fg:w="1"/><text x="2.9049%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="421" width="0.0340%" height="15" fill="rgb(205,185,37)" fg:x="78" fg:w="1"/><text x="2.9049%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="405" width="0.0340%" height="15" fill="rgb(238,207,15)" fg:x="78" fg:w="1"/><text x="2.9049%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="2.6549%" y="389" width="0.0340%" height="15" fill="rgb(213,199,42)" fg:x="78" fg:w="1"/><text x="2.9049%" y="399.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="949" width="0.2042%" height="15" fill="rgb(235,201,11)" fg:x="74" fg:w="6"/><text x="2.7687%" y="959.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="933" width="0.2042%" height="15" fill="rgb(207,46,11)" fg:x="74" fg:w="6"/><text x="2.7687%" y="943.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="917" width="0.2042%" height="15" fill="rgb(241,35,35)" fg:x="74" fg:w="6"/><text x="2.7687%" y="927.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="901" width="0.2042%" height="15" fill="rgb(243,32,47)" fg:x="74" fg:w="6"/><text x="2.7687%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="885" width="0.2042%" height="15" fill="rgb(247,202,23)" fg:x="74" fg:w="6"/><text x="2.7687%" y="895.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="869" width="0.2042%" height="15" fill="rgb(219,102,11)" fg:x="74" fg:w="6"/><text x="2.7687%" y="879.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="853" width="0.2042%" height="15" fill="rgb(243,110,44)" fg:x="74" fg:w="6"/><text x="2.7687%" y="863.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="837" width="0.2042%" height="15" fill="rgb(222,74,54)" fg:x="74" fg:w="6"/><text x="2.7687%" y="847.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="821" width="0.2042%" height="15" fill="rgb(216,99,12)" fg:x="74" fg:w="6"/><text x="2.7687%" y="831.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (6 samples, 0.20%)</title><rect x="2.5187%" y="805" width="0.2042%" height="15" fill="rgb(226,22,26)" fg:x="74" fg:w="6"/><text x="2.7687%" y="815.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (6 samples, 0.20%)</title><rect x="2.5187%" y="789" width="0.2042%" height="15" fill="rgb(217,163,10)" fg:x="74" fg:w="6"/><text x="2.7687%" y="799.50"></text></g><g><title>AutoFile::write (6 samples, 0.20%)</title><rect x="2.5187%" y="773" width="0.2042%" height="15" fill="rgb(213,25,53)" fg:x="74" fg:w="6"/><text x="2.7687%" y="783.50"></text></g><g><title>util::Xor (1 samples, 0.03%)</title><rect x="2.6889%" y="757" width="0.0340%" height="15" fill="rgb(252,105,26)" fg:x="79" fg:w="1"/><text x="2.9389%" y="767.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="2.7229%" y="949" width="0.0681%" height="15" fill="rgb(220,39,43)" fg:x="80" fg:w="2"/><text x="2.9729%" y="959.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (2 samples, 0.07%)</title><rect x="2.7229%" y="933" width="0.0681%" height="15" fill="rgb(229,68,48)" fg:x="80" fg:w="2"/><text x="2.9729%" y="943.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (2 samples, 0.07%)</title><rect x="2.7229%" y="917" width="0.0681%" height="15" fill="rgb(252,8,32)" fg:x="80" fg:w="2"/><text x="2.9729%" y="927.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (2 samples, 0.07%)</title><rect x="2.7229%" y="901" width="0.0681%" height="15" fill="rgb(223,20,43)" fg:x="80" fg:w="2"/><text x="2.9729%" y="911.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (2 samples, 0.07%)</title><rect x="2.7229%" y="885" width="0.0681%" height="15" fill="rgb(229,81,49)" fg:x="80" fg:w="2"/><text x="2.9729%" y="895.50"></text></g><g><title>AutoFile::write (2 samples, 0.07%)</title><rect x="2.7229%" y="869" width="0.0681%" height="15" fill="rgb(236,28,36)" fg:x="80" fg:w="2"/><text x="2.9729%" y="879.50"></text></g><g><title>_IO_fwrite (2 samples, 0.07%)</title><rect x="2.7229%" y="853" width="0.0681%" height="15" fill="rgb(249,185,26)" fg:x="80" fg:w="2"/><text x="2.9729%" y="863.50"></text></g><g><title>Chainstate::ActivateBestChain (10 samples, 0.34%)</title><rect x="2.5187%" y="1397" width="0.3404%" height="15" fill="rgb(249,174,33)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1407.50"></text></g><g><title>Chainstate::ActivateBestChainStep (10 samples, 0.34%)</title><rect x="2.5187%" y="1381" width="0.3404%" height="15" fill="rgb(233,201,37)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1391.50"></text></g><g><title>Chainstate::ConnectTip (10 samples, 0.34%)</title><rect x="2.5187%" y="1365" width="0.3404%" height="15" fill="rgb(221,78,26)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1375.50"></text></g><g><title>Chainstate::ConnectBlock (10 samples, 0.34%)</title><rect x="2.5187%" y="1349" width="0.3404%" height="15" fill="rgb(250,127,30)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1359.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (10 samples, 0.34%)</title><rect x="2.5187%" y="1333" width="0.3404%" height="15" fill="rgb(230,49,44)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1343.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (10 samples, 0.34%)</title><rect x="2.5187%" y="1317" width="0.3404%" height="15" fill="rgb(229,67,23)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1327.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (10 samples, 0.34%)</title><rect x="2.5187%" y="1301" width="0.3404%" height="15" fill="rgb(249,83,47)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1311.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1285" width="0.3404%" height="15" fill="rgb(215,43,3)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1295.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1269" width="0.3404%" height="15" fill="rgb(238,154,13)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1279.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1253" width="0.3404%" height="15" fill="rgb(219,56,2)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1263.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1237" width="0.3404%" height="15" fill="rgb(233,0,4)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1247.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1221" width="0.3404%" height="15" fill="rgb(235,30,7)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1231.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1205" width="0.3404%" height="15" fill="rgb(250,79,13)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1215.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1189" width="0.3404%" height="15" fill="rgb(211,146,34)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1199.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1173" width="0.3404%" height="15" fill="rgb(228,22,38)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1183.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1157" width="0.3404%" height="15" fill="rgb(235,168,5)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1167.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1141" width="0.3404%" height="15" fill="rgb(221,155,16)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1151.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1125" width="0.3404%" height="15" fill="rgb(215,215,53)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1109" width="0.3404%" height="15" fill="rgb(223,4,10)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1119.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1093" width="0.3404%" height="15" fill="rgb(234,103,6)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1103.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1077" width="0.3404%" height="15" fill="rgb(227,97,0)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1087.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1061" width="0.3404%" height="15" fill="rgb(234,150,53)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1045" width="0.3404%" height="15" fill="rgb(228,201,54)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1055.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1029" width="0.3404%" height="15" fill="rgb(222,22,37)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1039.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="1013" width="0.3404%" height="15" fill="rgb(237,53,32)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="997" width="0.3404%" height="15" fill="rgb(233,25,53)" fg:x="74" fg:w="10"/><text x="2.7687%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="981" width="0.3404%" height="15" fill="rgb(210,40,34)" fg:x="74" fg:w="10"/><text x="2.7687%" y="991.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (10 samples, 0.34%)</title><rect x="2.5187%" y="965" width="0.3404%" height="15" fill="rgb(241,220,44)" fg:x="74" fg:w="10"/><text x="2.7687%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (2 samples, 0.07%)</title><rect x="2.7910%" y="949" width="0.0681%" height="15" fill="rgb(235,28,35)" fg:x="82" fg:w="2"/><text x="3.0410%" y="959.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (2 samples, 0.07%)</title><rect x="2.7910%" y="933" width="0.0681%" height="15" fill="rgb(210,56,17)" fg:x="82" fg:w="2"/><text x="3.0410%" y="943.50"></text></g><g><title>AutoFile::write (2 samples, 0.07%)</title><rect x="2.7910%" y="917" width="0.0681%" height="15" fill="rgb(224,130,29)" fg:x="82" fg:w="2"/><text x="3.0410%" y="927.50"></text></g><g><title>_IO_fwrite (2 samples, 0.07%)</title><rect x="2.7910%" y="901" width="0.0681%" height="15" fill="rgb(235,212,8)" fg:x="82" fg:w="2"/><text x="3.0410%" y="911.50"></text></g><g><title>secp256k1_fe_impl_mul (4 samples, 0.14%)</title><rect x="2.8591%" y="1173" width="0.1361%" height="15" fill="rgb(223,33,50)" fg:x="84" fg:w="4"/><text x="3.1091%" y="1183.50"></text></g><g><title>secp256k1_fe_mul_inner (4 samples, 0.14%)</title><rect x="2.8591%" y="1157" width="0.1361%" height="15" fill="rgb(219,149,13)" fg:x="84" fg:w="4"/><text x="3.1091%" y="1167.50"></text></g><g><title>secp256k1_u128_accum_mul (4 samples, 0.14%)</title><rect x="2.8591%" y="1141" width="0.1361%" height="15" fill="rgb(250,156,29)" fg:x="84" fg:w="4"/><text x="3.1091%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="2.8591%" y="1125" width="0.1361%" height="15" fill="rgb(216,193,19)" fg:x="84" fg:w="4"/><text x="3.1091%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="2.8591%" y="1109" width="0.1361%" height="15" fill="rgb(216,135,14)" fg:x="84" fg:w="4"/><text x="3.1091%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="2.8591%" y="1093" width="0.1361%" height="15" fill="rgb(241,47,5)" fg:x="84" fg:w="4"/><text x="3.1091%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="2.8591%" y="1077" width="0.1361%" height="15" fill="rgb(233,42,35)" fg:x="84" fg:w="4"/><text x="3.1091%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.8931%" y="1061" width="0.1021%" height="15" fill="rgb(231,13,6)" fg:x="85" fg:w="3"/><text x="3.1431%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.8931%" y="1045" width="0.1021%" height="15" fill="rgb(207,181,40)" fg:x="85" fg:w="3"/><text x="3.1431%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.8931%" y="1029" width="0.1021%" height="15" fill="rgb(254,173,49)" fg:x="85" fg:w="3"/><text x="3.1431%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.8931%" y="1013" width="0.1021%" height="15" fill="rgb(221,1,38)" fg:x="85" fg:w="3"/><text x="3.1431%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.8931%" y="997" width="0.1021%" height="15" fill="rgb(206,124,46)" fg:x="85" fg:w="3"/><text x="3.1431%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.8931%" y="981" width="0.1021%" height="15" fill="rgb(249,21,11)" fg:x="85" fg:w="3"/><text x="3.1431%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="2.8931%" y="965" width="0.1021%" height="15" fill="rgb(222,201,40)" fg:x="85" fg:w="3"/><text x="3.1431%" y="975.50"></text></g><g><title>secp256k1_u128_accum_u64 (1 samples, 0.03%)</title><rect x="2.9952%" y="1141" width="0.0340%" height="15" fill="rgb(235,61,29)" fg:x="88" fg:w="1"/><text x="3.2452%" y="1151.50"></text></g><g><title>secp256k1_ecmult_odd_multiples_table (6 samples, 0.20%)</title><rect x="2.8591%" y="1205" width="0.2042%" height="15" fill="rgb(219,207,3)" fg:x="84" fg:w="6"/><text x="3.1091%" y="1215.50"></text></g><g><title>secp256k1_gej_add_ge_var (6 samples, 0.20%)</title><rect x="2.8591%" y="1189" width="0.2042%" height="15" fill="rgb(222,56,46)" fg:x="84" fg:w="6"/><text x="3.1091%" y="1199.50"></text></g><g><title>secp256k1_fe_impl_sqr (2 samples, 0.07%)</title><rect x="2.9952%" y="1173" width="0.0681%" height="15" fill="rgb(239,76,54)" fg:x="88" fg:w="2"/><text x="3.2452%" y="1183.50"></text></g><g><title>secp256k1_fe_mul_inner (2 samples, 0.07%)</title><rect x="2.9952%" y="1157" width="0.0681%" height="15" fill="rgb(231,124,27)" fg:x="88" fg:w="2"/><text x="3.2452%" y="1167.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="3.0293%" y="1141" width="0.0340%" height="15" fill="rgb(249,195,6)" fg:x="89" fg:w="1"/><text x="3.2793%" y="1151.50"></text></g><g><title>secp256k1_ecmult_wnaf (1 samples, 0.03%)</title><rect x="3.0633%" y="1205" width="0.0340%" height="15" fill="rgb(237,174,47)" fg:x="90" fg:w="1"/><text x="3.3133%" y="1215.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.03%)</title><rect x="3.0973%" y="1125" width="0.0340%" height="15" fill="rgb(206,201,31)" fg:x="91" fg:w="1"/><text x="3.3473%" y="1135.50"></text></g><g><title>secp256k1_ge_table_set_globalz (2 samples, 0.07%)</title><rect x="3.0973%" y="1205" width="0.0681%" height="15" fill="rgb(231,57,52)" fg:x="91" fg:w="2"/><text x="3.3473%" y="1215.50"></text></g><g><title>secp256k1_ge_table_set_globalz (2 samples, 0.07%)</title><rect x="3.0973%" y="1189" width="0.0681%" height="15" fill="rgb(248,177,22)" fg:x="91" fg:w="2"/><text x="3.3473%" y="1199.50"></text></g><g><title>secp256k1_ge_set_ge_zinv (2 samples, 0.07%)</title><rect x="3.0973%" y="1173" width="0.0681%" height="15" fill="rgb(215,211,37)" fg:x="91" fg:w="2"/><text x="3.3473%" y="1183.50"></text></g><g><title>secp256k1_fe_impl_mul (2 samples, 0.07%)</title><rect x="3.0973%" y="1157" width="0.0681%" height="15" fill="rgb(241,128,51)" fg:x="91" fg:w="2"/><text x="3.3473%" y="1167.50"></text></g><g><title>secp256k1_fe_mul_inner (2 samples, 0.07%)</title><rect x="3.0973%" y="1141" width="0.0681%" height="15" fill="rgb(227,165,31)" fg:x="91" fg:w="2"/><text x="3.3473%" y="1151.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="3.1314%" y="1125" width="0.0340%" height="15" fill="rgb(228,167,24)" fg:x="92" fg:w="1"/><text x="3.3814%" y="1135.50"></text></g><g><title>secp256k1_fe_mul_inner (7 samples, 0.24%)</title><rect x="3.1654%" y="1173" width="0.2383%" height="15" fill="rgb(228,143,12)" fg:x="93" fg:w="7"/><text x="3.4154%" y="1183.50"></text></g><g><title>secp256k1_u128_accum_mul (6 samples, 0.20%)</title><rect x="3.1995%" y="1157" width="0.2042%" height="15" fill="rgb(249,149,8)" fg:x="94" fg:w="6"/><text x="3.4495%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="3.2675%" y="1141" width="0.1361%" height="15" fill="rgb(243,35,44)" fg:x="96" fg:w="4"/><text x="3.5175%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="3.2675%" y="1125" width="0.1361%" height="15" fill="rgb(246,89,9)" fg:x="96" fg:w="4"/><text x="3.5175%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="3.2675%" y="1109" width="0.1361%" height="15" fill="rgb(233,213,13)" fg:x="96" fg:w="4"/><text x="3.5175%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="3.2675%" y="1093" width="0.1361%" height="15" fill="rgb(233,141,41)" fg:x="96" fg:w="4"/><text x="3.5175%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="1077" width="0.1021%" height="15" fill="rgb(239,167,4)" fg:x="97" fg:w="3"/><text x="3.5516%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="1061" width="0.1021%" height="15" fill="rgb(209,217,16)" fg:x="97" fg:w="3"/><text x="3.5516%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="1045" width="0.1021%" height="15" fill="rgb(219,88,35)" fg:x="97" fg:w="3"/><text x="3.5516%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="1029" width="0.1021%" height="15" fill="rgb(220,193,23)" fg:x="97" fg:w="3"/><text x="3.5516%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="1013" width="0.1021%" height="15" fill="rgb(230,90,52)" fg:x="97" fg:w="3"/><text x="3.5516%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="997" width="0.1021%" height="15" fill="rgb(252,106,19)" fg:x="97" fg:w="3"/><text x="3.5516%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="981" width="0.1021%" height="15" fill="rgb(206,74,20)" fg:x="97" fg:w="3"/><text x="3.5516%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="965" width="0.1021%" height="15" fill="rgb(230,138,44)" fg:x="97" fg:w="3"/><text x="3.5516%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="3.3016%" y="949" width="0.1021%" height="15" fill="rgb(235,182,43)" fg:x="97" fg:w="3"/><text x="3.5516%" y="959.50"></text></g><g><title>secp256k1_u128_accum_mul (3 samples, 0.10%)</title><rect x="3.4037%" y="1157" width="0.1021%" height="15" fill="rgb(242,16,51)" fg:x="100" fg:w="3"/><text x="3.6537%" y="1167.50"></text></g><g><title>secp256k1_fe_impl_mul (13 samples, 0.44%)</title><rect x="3.1654%" y="1189" width="0.4425%" height="15" fill="rgb(248,9,4)" fg:x="93" fg:w="13"/><text x="3.4154%" y="1199.50"></text></g><g><title>secp256k1_fe_sqr_inner (6 samples, 0.20%)</title><rect x="3.4037%" y="1173" width="0.2042%" height="15" fill="rgb(210,31,22)" fg:x="100" fg:w="6"/><text x="3.6537%" y="1183.50"></text></g><g><title>secp256k1_u128_rshift (3 samples, 0.10%)</title><rect x="3.5058%" y="1157" width="0.1021%" height="15" fill="rgb(239,54,39)" fg:x="103" fg:w="3"/><text x="3.7558%" y="1167.50"></text></g><g><title>secp256k1_gej_add_ge_var (23 samples, 0.78%)</title><rect x="3.1654%" y="1205" width="0.7828%" height="15" fill="rgb(230,99,41)" fg:x="93" fg:w="23"/><text x="3.4154%" y="1215.50"></text></g><g><title>secp256k1_fe_impl_sqr (10 samples, 0.34%)</title><rect x="3.6079%" y="1189" width="0.3404%" height="15" fill="rgb(253,106,12)" fg:x="106" fg:w="10"/><text x="3.8579%" y="1199.50"></text></g><g><title>secp256k1_fe_mul_inner (10 samples, 0.34%)</title><rect x="3.6079%" y="1173" width="0.3404%" height="15" fill="rgb(213,46,41)" fg:x="106" fg:w="10"/><text x="3.8579%" y="1183.50"></text></g><g><title>secp256k1_u128_accum_mul (8 samples, 0.27%)</title><rect x="3.6760%" y="1157" width="0.2723%" height="15" fill="rgb(215,133,35)" fg:x="108" fg:w="8"/><text x="3.9260%" y="1167.50"></text></g><g><title>secp256k1_u128_accum_mul (9 samples, 0.31%)</title><rect x="3.9823%" y="1157" width="0.3063%" height="15" fill="rgb(213,28,5)" fg:x="117" fg:w="9"/><text x="4.2323%" y="1167.50"></text></g><g><title>secp256k1_fe_mul_inner (11 samples, 0.37%)</title><rect x="3.9483%" y="1173" width="0.3744%" height="15" fill="rgb(215,77,49)" fg:x="116" fg:w="11"/><text x="4.1983%" y="1183.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="4.2886%" y="1157" width="0.0340%" height="15" fill="rgb(248,100,22)" fg:x="126" fg:w="1"/><text x="4.5386%" y="1167.50"></text></g><g><title>secp256k1_u128_accum_mul (3 samples, 0.10%)</title><rect x="4.3227%" y="1157" width="0.1021%" height="15" fill="rgb(208,67,9)" fg:x="127" fg:w="3"/><text x="4.5727%" y="1167.50"></text></g><g><title>secp256k1_fe_impl_mul (15 samples, 0.51%)</title><rect x="3.9483%" y="1189" width="0.5106%" height="15" fill="rgb(219,133,21)" fg:x="116" fg:w="15"/><text x="4.1983%" y="1199.50"></text></g><g><title>secp256k1_fe_sqr_inner (4 samples, 0.14%)</title><rect x="4.3227%" y="1173" width="0.1361%" height="15" fill="rgb(246,46,29)" fg:x="127" fg:w="4"/><text x="4.5727%" y="1183.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="4.4248%" y="1157" width="0.0340%" height="15" fill="rgb(246,185,52)" fg:x="130" fg:w="1"/><text x="4.6748%" y="1167.50"></text></g><g><title>secp256k1_gej_add_zinv_var (19 samples, 0.65%)</title><rect x="3.9483%" y="1205" width="0.6467%" height="15" fill="rgb(252,136,11)" fg:x="116" fg:w="19"/><text x="4.1983%" y="1215.50"></text></g><g><title>secp256k1_fe_impl_sqr (4 samples, 0.14%)</title><rect x="4.4588%" y="1189" width="0.1361%" height="15" fill="rgb(219,138,53)" fg:x="131" fg:w="4"/><text x="4.7088%" y="1199.50"></text></g><g><title>secp256k1_fe_mul_inner (4 samples, 0.14%)</title><rect x="4.4588%" y="1173" width="0.1361%" height="15" fill="rgb(211,51,23)" fg:x="131" fg:w="4"/><text x="4.7088%" y="1183.50"></text></g><g><title>secp256k1_u128_accum_mul (3 samples, 0.10%)</title><rect x="4.4929%" y="1157" width="0.1021%" height="15" fill="rgb(247,221,28)" fg:x="132" fg:w="3"/><text x="4.7429%" y="1167.50"></text></g><g><title>secp256k1_u128_accum_mul (3 samples, 0.10%)</title><rect x="4.6630%" y="1141" width="0.1021%" height="15" fill="rgb(251,222,45)" fg:x="137" fg:w="3"/><text x="4.9130%" y="1151.50"></text></g><g><title>secp256k1_u128_mul (2 samples, 0.07%)</title><rect x="4.7651%" y="1141" width="0.0681%" height="15" fill="rgb(217,162,53)" fg:x="140" fg:w="2"/><text x="5.0151%" y="1151.50"></text></g><g><title>secp256k1_fe_mul_inner (8 samples, 0.27%)</title><rect x="4.5950%" y="1157" width="0.2723%" height="15" fill="rgb(229,93,14)" fg:x="135" fg:w="8"/><text x="4.8450%" y="1167.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="4.8332%" y="1141" width="0.0340%" height="15" fill="rgb(209,67,49)" fg:x="142" fg:w="1"/><text x="5.0832%" y="1151.50"></text></g><g><title>secp256k1_u128_accum_mul (2 samples, 0.07%)</title><rect x="4.9013%" y="1141" width="0.0681%" height="15" fill="rgb(213,87,29)" fg:x="144" fg:w="2"/><text x="5.1513%" y="1151.50"></text></g><g><title>secp256k1_fe_impl_mul (13 samples, 0.44%)</title><rect x="4.5950%" y="1173" width="0.4425%" height="15" fill="rgb(205,151,52)" fg:x="135" fg:w="13"/><text x="4.8450%" y="1183.50"></text></g><g><title>secp256k1_fe_sqr_inner (5 samples, 0.17%)</title><rect x="4.8673%" y="1157" width="0.1702%" height="15" fill="rgb(253,215,39)" fg:x="143" fg:w="5"/><text x="5.1173%" y="1167.50"></text></g><g><title>secp256k1_u128_rshift (2 samples, 0.07%)</title><rect x="4.9694%" y="1141" width="0.0681%" height="15" fill="rgb(221,220,41)" fg:x="146" fg:w="2"/><text x="5.2194%" y="1151.50"></text></g><g><title>secp256k1_u128_accum_mul (3 samples, 0.10%)</title><rect x="5.0715%" y="1141" width="0.1021%" height="15" fill="rgb(218,133,21)" fg:x="149" fg:w="3"/><text x="5.3215%" y="1151.50"></text></g><g><title>secp256k1_fe_mul_inner (5 samples, 0.17%)</title><rect x="5.0374%" y="1157" width="0.1702%" height="15" fill="rgb(221,193,43)" fg:x="148" fg:w="5"/><text x="5.2874%" y="1167.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="5.1736%" y="1141" width="0.0340%" height="15" fill="rgb(240,128,52)" fg:x="152" fg:w="1"/><text x="5.4236%" y="1151.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.03%)</title><rect x="5.2757%" y="1141" width="0.0340%" height="15" fill="rgb(253,114,12)" fg:x="155" fg:w="1"/><text x="5.5257%" y="1151.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (85 samples, 2.89%)</title><rect x="2.5187%" y="1413" width="2.8931%" height="15" fill="rgb(215,223,47)" fg:x="74" fg:w="85"/><text x="2.7687%" y="1423.50">Ch..</text></g><g><title>CheckBlock (75 samples, 2.55%)</title><rect x="2.8591%" y="1397" width="2.5528%" height="15" fill="rgb(248,225,23)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1407.50">Ch..</text></g><g><title>CheckSignetBlockSolution (75 samples, 2.55%)</title><rect x="2.8591%" y="1381" width="2.5528%" height="15" fill="rgb(250,108,0)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1391.50">Ch..</text></g><g><title>VerifyScript (75 samples, 2.55%)</title><rect x="2.8591%" y="1365" width="2.5528%" height="15" fill="rgb(228,208,7)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1375.50">Ve..</text></g><g><title>EvalScript (75 samples, 2.55%)</title><rect x="2.8591%" y="1349" width="2.5528%" height="15" fill="rgb(244,45,10)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1359.50">Ev..</text></g><g><title>EvalScript (75 samples, 2.55%)</title><rect x="2.8591%" y="1333" width="2.5528%" height="15" fill="rgb(207,125,25)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1343.50">Ev..</text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::CheckECDSASignature (75 samples, 2.55%)</title><rect x="2.8591%" y="1317" width="2.5528%" height="15" fill="rgb(210,195,18)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1327.50">Ge..</text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::VerifyECDSASignature (75 samples, 2.55%)</title><rect x="2.8591%" y="1301" width="2.5528%" height="15" fill="rgb(249,80,12)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1311.50">Ge..</text></g><g><title>CPubKey::Verify (75 samples, 2.55%)</title><rect x="2.8591%" y="1285" width="2.5528%" height="15" fill="rgb(221,65,9)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1295.50">CP..</text></g><g><title>secp256k1_ecdsa_verify (75 samples, 2.55%)</title><rect x="2.8591%" y="1269" width="2.5528%" height="15" fill="rgb(235,49,36)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1279.50">se..</text></g><g><title>secp256k1_ecdsa_sig_verify (75 samples, 2.55%)</title><rect x="2.8591%" y="1253" width="2.5528%" height="15" fill="rgb(225,32,20)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1263.50">se..</text></g><g><title>secp256k1_ecmult (75 samples, 2.55%)</title><rect x="2.8591%" y="1237" width="2.5528%" height="15" fill="rgb(215,141,46)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1247.50">se..</text></g><g><title>secp256k1_ecmult_strauss_wnaf (75 samples, 2.55%)</title><rect x="2.8591%" y="1221" width="2.5528%" height="15" fill="rgb(250,160,47)" fg:x="84" fg:w="75"/><text x="3.1091%" y="1231.50">se..</text></g><g><title>secp256k1_gej_double_var (24 samples, 0.82%)</title><rect x="4.5950%" y="1205" width="0.8169%" height="15" fill="rgb(216,222,40)" fg:x="135" fg:w="24"/><text x="4.8450%" y="1215.50"></text></g><g><title>secp256k1_gej_double (24 samples, 0.82%)</title><rect x="4.5950%" y="1189" width="0.8169%" height="15" fill="rgb(234,217,39)" fg:x="135" fg:w="24"/><text x="4.8450%" y="1199.50"></text></g><g><title>secp256k1_fe_impl_sqr (11 samples, 0.37%)</title><rect x="5.0374%" y="1173" width="0.3744%" height="15" fill="rgb(207,178,40)" fg:x="148" fg:w="11"/><text x="5.2874%" y="1183.50"></text></g><g><title>secp256k1_fe_sqr_inner (6 samples, 0.20%)</title><rect x="5.2076%" y="1157" width="0.2042%" height="15" fill="rgb(221,136,13)" fg:x="153" fg:w="6"/><text x="5.4576%" y="1167.50"></text></g><g><title>secp256k1_u128_rshift (3 samples, 0.10%)</title><rect x="5.3097%" y="1141" width="0.1021%" height="15" fill="rgb(249,199,10)" fg:x="156" fg:w="3"/><text x="5.5597%" y="1151.50"></text></g><g><title>CompressAmount (1 samples, 0.03%)</title><rect x="5.4118%" y="1413" width="0.0340%" height="15" fill="rgb(249,222,13)" fg:x="159" fg:w="1"/><text x="5.6618%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="5.4799%" y="1397" width="0.0340%" height="15" fill="rgb(244,185,38)" fg:x="161" fg:w="1"/><text x="5.7299%" y="1407.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="5.4799%" y="1381" width="0.0340%" height="15" fill="rgb(236,202,9)" fg:x="161" fg:w="1"/><text x="5.7299%" y="1391.50"></text></g><g><title>tinyformat::detail::FormatListN&lt;6&gt; tinyformat::makeFormatList&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="5.4799%" y="1365" width="0.0340%" height="15" fill="rgb(250,229,37)" fg:x="161" fg:w="1"/><text x="5.7299%" y="1375.50"></text></g><g><title>tinyformat::detail::FormatListN&lt;6&gt;::FormatListN&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="5.4799%" y="1349" width="0.0340%" height="15" fill="rgb(206,174,23)" fg:x="161" fg:w="1"/><text x="5.7299%" y="1359.50"></text></g><g><title>tinyformat::detail::FormatArg::FormatArg&lt;int&gt; (1 samples, 0.03%)</title><rect x="5.4799%" y="1333" width="0.0340%" height="15" fill="rgb(211,33,43)" fg:x="161" fg:w="1"/><text x="5.7299%" y="1343.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (3 samples, 0.10%)</title><rect x="5.4459%" y="1413" width="0.1021%" height="15" fill="rgb(245,58,50)" fg:x="160" fg:w="3"/><text x="5.6959%" y="1423.50"></text></g><g><title>std::chrono::hh_mm_ss&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;::hh_mm_ss (1 samples, 0.03%)</title><rect x="5.5140%" y="1397" width="0.0340%" height="15" fill="rgb(244,68,36)" fg:x="162" fg:w="1"/><text x="5.7640%" y="1407.50"></text></g><g><title>std::chrono::hh_mm_ss&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;::_S_abs (1 samples, 0.03%)</title><rect x="5.5140%" y="1381" width="0.0340%" height="15" fill="rgb(232,229,15)" fg:x="162" fg:w="1"/><text x="5.7640%" y="1391.50"></text></g><g><title>std::enable_if&lt;std::numeric_limits&lt;long&gt;::is_signed, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;::type std::chrono::abs&lt;long, std::ratio&lt;1l, 1l&gt; &gt; (1 samples, 0.03%)</title><rect x="5.5140%" y="1365" width="0.0340%" height="15" fill="rgb(254,30,23)" fg:x="162" fg:w="1"/><text x="5.7640%" y="1375.50"></text></g><g><title>GetScriptOp (1 samples, 0.03%)</title><rect x="5.5480%" y="1413" width="0.0340%" height="15" fill="rgb(235,160,14)" fg:x="163" fg:w="1"/><text x="5.7980%" y="1423.50"></text></g><g><title>GetTransactionSigOpCost (2 samples, 0.07%)</title><rect x="5.5820%" y="1413" width="0.0681%" height="15" fill="rgb(212,155,44)" fg:x="164" fg:w="2"/><text x="5.8320%" y="1423.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.03%)</title><rect x="5.6161%" y="1397" width="0.0340%" height="15" fill="rgb(226,2,50)" fg:x="165" fg:w="1"/><text x="5.8661%" y="1407.50"></text></g><g><title>IsFinalTx (1 samples, 0.03%)</title><rect x="5.6501%" y="1413" width="0.0340%" height="15" fill="rgb(234,177,6)" fg:x="166" fg:w="1"/><text x="5.9001%" y="1423.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (1 samples, 0.03%)</title><rect x="5.6841%" y="1413" width="0.0340%" height="15" fill="rgb(217,24,9)" fg:x="167" fg:w="1"/><text x="5.9341%" y="1423.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (1 samples, 0.03%)</title><rect x="5.6841%" y="1397" width="0.0340%" height="15" fill="rgb(220,13,46)" fg:x="167" fg:w="1"/><text x="5.9341%" y="1407.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (1 samples, 0.03%)</title><rect x="5.6841%" y="1381" width="0.0340%" height="15" fill="rgb(239,221,27)" fg:x="167" fg:w="1"/><text x="5.9341%" y="1391.50"></text></g><g><title>std::mutex::lock (1 samples, 0.03%)</title><rect x="5.6841%" y="1365" width="0.0340%" height="15" fill="rgb(222,198,25)" fg:x="167" fg:w="1"/><text x="5.9341%" y="1375.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (1 samples, 0.03%)</title><rect x="5.6841%" y="1349" width="0.0340%" height="15" fill="rgb(211,99,13)" fg:x="167" fg:w="1"/><text x="5.9341%" y="1359.50"></text></g><g><title>ArgsManager::GetBoolArg (1 samples, 0.03%)</title><rect x="5.6841%" y="1333" width="0.0340%" height="15" fill="rgb(232,111,31)" fg:x="167" fg:w="1"/><text x="5.9341%" y="1343.50"></text></g><g><title>UpdateCoins (1 samples, 0.03%)</title><rect x="5.7182%" y="1413" width="0.0340%" height="15" fill="rgb(245,82,37)" fg:x="168" fg:w="1"/><text x="5.9682%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="5.7522%" y="1397" width="0.0340%" height="15" fill="rgb(227,149,46)" fg:x="169" fg:w="1"/><text x="6.0022%" y="1407.50"></text></g><g><title>[000029.ldb] (2 samples, 0.07%)</title><rect x="5.7522%" y="1413" width="0.0681%" height="15" fill="rgb(218,36,50)" fg:x="169" fg:w="2"/><text x="6.0022%" y="1423.50"></text></g><g><title>operator delete (1 samples, 0.03%)</title><rect x="5.7862%" y="1397" width="0.0340%" height="15" fill="rgb(226,80,48)" fg:x="170" fg:w="1"/><text x="6.0362%" y="1407.50"></text></g><g><title>[000030.ldb] (1 samples, 0.03%)</title><rect x="5.8203%" y="1413" width="0.0340%" height="15" fill="rgb(238,224,15)" fg:x="171" fg:w="1"/><text x="6.0703%" y="1423.50"></text></g><g><title>leveldb::Iterator::Iterator (1 samples, 0.03%)</title><rect x="5.8203%" y="1397" width="0.0340%" height="15" fill="rgb(241,136,10)" fg:x="171" fg:w="1"/><text x="6.0703%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="5.8543%" y="1397" width="0.0340%" height="15" fill="rgb(208,32,45)" fg:x="172" fg:w="1"/><text x="6.1043%" y="1407.50"></text></g><g><title>[000031.ldb] (2 samples, 0.07%)</title><rect x="5.8543%" y="1413" width="0.0681%" height="15" fill="rgb(207,135,9)" fg:x="172" fg:w="2"/><text x="6.1043%" y="1423.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (1 samples, 0.03%)</title><rect x="5.8884%" y="1397" width="0.0340%" height="15" fill="rgb(206,86,44)" fg:x="173" fg:w="1"/><text x="6.1384%" y="1407.50"></text></g><g><title>LogInstance (1 samples, 0.03%)</title><rect x="5.9224%" y="1397" width="0.0340%" height="15" fill="rgb(245,177,15)" fg:x="174" fg:w="1"/><text x="6.1724%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="5.9564%" y="1397" width="0.0340%" height="15" fill="rgb(206,64,50)" fg:x="175" fg:w="1"/><text x="6.2064%" y="1407.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.03%)</title><rect x="5.9905%" y="1397" width="0.0340%" height="15" fill="rgb(234,36,40)" fg:x="176" fg:w="1"/><text x="6.2405%" y="1407.50"></text></g><g><title>operator delete (1 samples, 0.03%)</title><rect x="6.0245%" y="1397" width="0.0340%" height="15" fill="rgb(213,64,8)" fg:x="177" fg:w="1"/><text x="6.2745%" y="1407.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="6.0585%" y="1397" width="0.0340%" height="15" fill="rgb(210,75,36)" fg:x="178" fg:w="1"/><text x="6.3085%" y="1407.50"></text></g><g><title>read (1 samples, 0.03%)</title><rect x="6.0926%" y="1397" width="0.0340%" height="15" fill="rgb(229,88,21)" fg:x="179" fg:w="1"/><text x="6.3426%" y="1407.50"></text></g><g><title>[[heap]] (7 samples, 0.24%)</title><rect x="5.9224%" y="1413" width="0.2383%" height="15" fill="rgb(252,204,47)" fg:x="174" fg:w="7"/><text x="6.1724%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.03%)</title><rect x="6.1266%" y="1397" width="0.0340%" height="15" fill="rgb(208,77,27)" fg:x="180" fg:w="1"/><text x="6.3766%" y="1407.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="6.1947%" y="1397" width="0.0340%" height="15" fill="rgb(221,76,26)" fg:x="182" fg:w="1"/><text x="6.4447%" y="1407.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="6.2287%" y="1397" width="0.0340%" height="15" fill="rgb(225,139,18)" fg:x="183" fg:w="1"/><text x="6.4787%" y="1407.50"></text></g><g><title>BCLog::Logger::WillLogCategory (1 samples, 0.03%)</title><rect x="6.2628%" y="1397" width="0.0340%" height="15" fill="rgb(230,137,11)" fg:x="184" fg:w="1"/><text x="6.5128%" y="1407.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.03%)</title><rect x="6.2968%" y="1397" width="0.0340%" height="15" fill="rgb(212,28,1)" fg:x="185" fg:w="1"/><text x="6.5468%" y="1407.50"></text></g><g><title>CSHA256::Reset (1 samples, 0.03%)</title><rect x="6.3308%" y="1397" width="0.0340%" height="15" fill="rgb(248,164,17)" fg:x="186" fg:w="1"/><text x="6.5808%" y="1407.50"></text></g><g><title>CSHA256::Write (6 samples, 0.20%)</title><rect x="6.3649%" y="1397" width="0.2042%" height="15" fill="rgb(222,171,42)" fg:x="187" fg:w="6"/><text x="6.6149%" y="1407.50"></text></g><g><title>CScript::IsPayToScriptHash (1 samples, 0.03%)</title><rect x="6.5691%" y="1397" width="0.0340%" height="15" fill="rgb(243,84,45)" fg:x="193" fg:w="1"/><text x="6.8191%" y="1407.50"></text></g><g><title>CScriptNum::CScriptNum (1 samples, 0.03%)</title><rect x="6.6031%" y="1397" width="0.0340%" height="15" fill="rgb(252,49,23)" fg:x="194" fg:w="1"/><text x="6.8531%" y="1407.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.03%)</title><rect x="6.6372%" y="1397" width="0.0340%" height="15" fill="rgb(215,19,7)" fg:x="195" fg:w="1"/><text x="6.8872%" y="1407.50"></text></g><g><title>ChaCha20Aligned::Keystream (1 samples, 0.03%)</title><rect x="6.6712%" y="1397" width="0.0340%" height="15" fill="rgb(238,81,41)" fg:x="196" fg:w="1"/><text x="6.9212%" y="1407.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.03%)</title><rect x="6.7052%" y="1397" width="0.0340%" height="15" fill="rgb(210,199,37)" fg:x="197" fg:w="1"/><text x="6.9552%" y="1407.50"></text></g><g><title>DataStream::GetMemoryUsage (1 samples, 0.03%)</title><rect x="6.7393%" y="1397" width="0.0340%" height="15" fill="rgb(244,192,49)" fg:x="198" fg:w="1"/><text x="6.9893%" y="1407.50"></text></g><g><title>EvalScript (2 samples, 0.07%)</title><rect x="6.7733%" y="1397" width="0.0681%" height="15" fill="rgb(226,211,11)" fg:x="199" fg:w="2"/><text x="7.0233%" y="1407.50"></text></g><g><title>ScriptExecutionData::ScriptExecutionData (1 samples, 0.03%)</title><rect x="6.8074%" y="1381" width="0.0340%" height="15" fill="rgb(236,162,54)" fg:x="200" fg:w="1"/><text x="7.0574%" y="1391.50"></text></g><g><title>uint256::uint256 (1 samples, 0.03%)</title><rect x="6.8074%" y="1365" width="0.0340%" height="15" fill="rgb(220,229,9)" fg:x="200" fg:w="1"/><text x="7.0574%" y="1375.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.03%)</title><rect x="6.8074%" y="1349" width="0.0340%" height="15" fill="rgb(250,87,22)" fg:x="200" fg:w="1"/><text x="7.0574%" y="1359.50"></text></g><g><title>FSChaCha20Poly1305::NextPacket (1 samples, 0.03%)</title><rect x="6.8414%" y="1397" width="0.0340%" height="15" fill="rgb(239,43,17)" fg:x="201" fg:w="1"/><text x="7.0914%" y="1407.50"></text></g><g><title>FlatFileSeq::FileName (1 samples, 0.03%)</title><rect x="6.8754%" y="1397" width="0.0340%" height="15" fill="rgb(231,177,25)" fg:x="202" fg:w="1"/><text x="7.1254%" y="1407.50"></text></g><g><title>SipHashUint256Extra (10 samples, 0.34%)</title><rect x="6.9095%" y="1397" width="0.3404%" height="15" fill="rgb(219,179,1)" fg:x="203" fg:w="10"/><text x="7.1595%" y="1407.50"></text></g><g><title>_IO_file_overflow@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="7.2498%" y="1397" width="0.0340%" height="15" fill="rgb(238,219,53)" fg:x="213" fg:w="1"/><text x="7.4998%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.2498%" y="1381" width="0.0340%" height="15" fill="rgb(232,167,36)" fg:x="213" fg:w="1"/><text x="7.4998%" y="1391.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="7.2839%" y="1397" width="0.0681%" height="15" fill="rgb(244,19,51)" fg:x="214" fg:w="2"/><text x="7.5339%" y="1407.50"></text></g><g><title>_IO_fwrite (11 samples, 0.37%)</title><rect x="7.3519%" y="1397" width="0.3744%" height="15" fill="rgb(224,6,22)" fg:x="216" fg:w="11"/><text x="7.6019%" y="1407.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (2 samples, 0.07%)</title><rect x="7.7263%" y="1397" width="0.0681%" height="15" fill="rgb(224,145,5)" fg:x="227" fg:w="2"/><text x="7.9763%" y="1407.50"></text></g><g><title>__fopen_internal (1 samples, 0.03%)</title><rect x="7.7944%" y="1397" width="0.0340%" height="15" fill="rgb(234,130,49)" fg:x="229" fg:w="1"/><text x="8.0444%" y="1407.50"></text></g><g><title>__libc_alloca_cutoff (1 samples, 0.03%)</title><rect x="7.8285%" y="1397" width="0.0340%" height="15" fill="rgb(254,6,2)" fg:x="230" fg:w="1"/><text x="8.0785%" y="1407.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.10%)</title><rect x="7.8625%" y="1397" width="0.1021%" height="15" fill="rgb(208,96,46)" fg:x="231" fg:w="3"/><text x="8.1125%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (22 samples, 0.75%)</title><rect x="7.9646%" y="1397" width="0.7488%" height="15" fill="rgb(239,3,39)" fg:x="234" fg:w="22"/><text x="8.2146%" y="1407.50"></text></g><g><title>__memmove_chk_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="8.7134%" y="1397" width="0.0340%" height="15" fill="rgb(233,210,1)" fg:x="256" fg:w="1"/><text x="8.9634%" y="1407.50"></text></g><g><title>__memset_avx512_unaligned (1 samples, 0.03%)</title><rect x="8.7474%" y="1397" width="0.0340%" height="15" fill="rgb(244,137,37)" fg:x="257" fg:w="1"/><text x="8.9974%" y="1407.50"></text></g><g><title>_int_free (6 samples, 0.20%)</title><rect x="8.7815%" y="1397" width="0.2042%" height="15" fill="rgb(240,136,2)" fg:x="258" fg:w="6"/><text x="9.0315%" y="1407.50"></text></g><g><title>_int_malloc (11 samples, 0.37%)</title><rect x="8.9857%" y="1397" width="0.3744%" height="15" fill="rgb(239,18,37)" fg:x="264" fg:w="11"/><text x="9.2357%" y="1407.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.03%)</title><rect x="9.3601%" y="1397" width="0.0340%" height="15" fill="rgb(218,185,22)" fg:x="275" fg:w="1"/><text x="9.6101%" y="1407.50"></text></g><g><title>boost::detail::shared_count::shared_count (1 samples, 0.03%)</title><rect x="9.3941%" y="1397" width="0.0340%" height="15" fill="rgb(225,218,4)" fg:x="276" fg:w="1"/><text x="9.6441%" y="1407.50"></text></g><g><title>boost::detail::sp_counted_base::release (1 samples, 0.03%)</title><rect x="9.4282%" y="1397" width="0.0340%" height="15" fill="rgb(230,182,32)" fg:x="277" fg:w="1"/><text x="9.6782%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="9.4622%" y="1397" width="0.1021%" height="15" fill="rgb(242,56,43)" fg:x="278" fg:w="3"/><text x="9.7122%" y="1407.50"></text></g><g><title>free@plt (1 samples, 0.03%)</title><rect x="9.5643%" y="1397" width="0.0340%" height="15" fill="rgb(233,99,24)" fg:x="281" fg:w="1"/><text x="9.8143%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.03%)</title><rect x="9.5984%" y="1397" width="0.0340%" height="15" fill="rgb(234,209,42)" fg:x="282" fg:w="1"/><text x="9.8484%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.10%)</title><rect x="9.6324%" y="1397" width="0.1021%" height="15" fill="rgb(227,7,12)" fg:x="283" fg:w="3"/><text x="9.8824%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.03%)</title><rect x="9.7345%" y="1397" width="0.0340%" height="15" fill="rgb(245,203,43)" fg:x="286" fg:w="1"/><text x="9.9845%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.03%)</title><rect x="9.7686%" y="1397" width="0.0340%" height="15" fill="rgb(238,205,33)" fg:x="287" fg:w="1"/><text x="10.0186%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.03%)</title><rect x="9.8026%" y="1397" width="0.0340%" height="15" fill="rgb(231,56,7)" fg:x="288" fg:w="1"/><text x="10.0526%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.03%)</title><rect x="9.8366%" y="1397" width="0.0340%" height="15" fill="rgb(244,186,29)" fg:x="289" fg:w="1"/><text x="10.0866%" y="1407.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.03%)</title><rect x="9.8707%" y="1397" width="0.0340%" height="15" fill="rgb(234,111,31)" fg:x="290" fg:w="1"/><text x="10.1207%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="9.9047%" y="1397" width="0.0340%" height="15" fill="rgb(241,149,10)" fg:x="291" fg:w="1"/><text x="10.1547%" y="1407.50"></text></g><g><title>malloc (3 samples, 0.10%)</title><rect x="9.9387%" y="1397" width="0.1021%" height="15" fill="rgb(249,206,44)" fg:x="292" fg:w="3"/><text x="10.1887%" y="1407.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="10.0408%" y="1397" width="0.0340%" height="15" fill="rgb(251,153,30)" fg:x="295" fg:w="1"/><text x="10.2908%" y="1407.50"></text></g><g><title>memcmp@plt (1 samples, 0.03%)</title><rect x="10.0749%" y="1397" width="0.0340%" height="15" fill="rgb(239,152,38)" fg:x="296" fg:w="1"/><text x="10.3249%" y="1407.50"></text></g><g><title>memcpy@plt (2 samples, 0.07%)</title><rect x="10.1089%" y="1397" width="0.0681%" height="15" fill="rgb(249,139,47)" fg:x="297" fg:w="2"/><text x="10.3589%" y="1407.50"></text></g><g><title>operator delete (4 samples, 0.14%)</title><rect x="10.1770%" y="1397" width="0.1361%" height="15" fill="rgb(244,64,35)" fg:x="299" fg:w="4"/><text x="10.4270%" y="1407.50"></text></g><g><title>operator delete[] (1 samples, 0.03%)</title><rect x="10.3131%" y="1397" width="0.0340%" height="15" fill="rgb(216,46,15)" fg:x="303" fg:w="1"/><text x="10.5631%" y="1407.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="10.3472%" y="1397" width="0.0340%" height="15" fill="rgb(250,74,19)" fg:x="304" fg:w="1"/><text x="10.5972%" y="1407.50"></text></g><g><title>operator new[] (1 samples, 0.03%)</title><rect x="10.3812%" y="1397" width="0.0340%" height="15" fill="rgb(249,42,33)" fg:x="305" fg:w="1"/><text x="10.6312%" y="1407.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.14%)</title><rect x="10.4152%" y="1397" width="0.1361%" height="15" fill="rgb(242,149,17)" fg:x="306" fg:w="4"/><text x="10.6652%" y="1407.50"></text></g><g><title>secp256k1_fe_impl_normalizes_to_zero_var (1 samples, 0.03%)</title><rect x="10.5514%" y="1397" width="0.0340%" height="15" fill="rgb(244,29,21)" fg:x="310" fg:w="1"/><text x="10.8014%" y="1407.50"></text></g><g><title>secp256k1_fe_mul_inner (2 samples, 0.07%)</title><rect x="10.5854%" y="1397" width="0.0681%" height="15" fill="rgb(220,130,37)" fg:x="311" fg:w="2"/><text x="10.8354%" y="1407.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="10.6195%" y="1381" width="0.0340%" height="15" fill="rgb(211,67,2)" fg:x="312" fg:w="1"/><text x="10.8695%" y="1391.50"></text></g><g><title>secp256k1_fe_sqr_inner (1 samples, 0.03%)</title><rect x="10.6535%" y="1397" width="0.0340%" height="15" fill="rgb(235,68,52)" fg:x="313" fg:w="1"/><text x="10.9035%" y="1407.50"></text></g><g><title>secp256k1_gej_add_zinv_var (1 samples, 0.03%)</title><rect x="10.6875%" y="1397" width="0.0340%" height="15" fill="rgb(246,142,3)" fg:x="314" fg:w="1"/><text x="10.9375%" y="1407.50"></text></g><g><title>secp256k1_modinv64_update_de_62 (1 samples, 0.03%)</title><rect x="10.7216%" y="1397" width="0.0340%" height="15" fill="rgb(241,25,7)" fg:x="315" fg:w="1"/><text x="10.9716%" y="1407.50"></text></g><g><title>secp256k1_i128_accum_mul (1 samples, 0.03%)</title><rect x="10.7216%" y="1381" width="0.0340%" height="15" fill="rgb(242,119,39)" fg:x="315" fg:w="1"/><text x="10.9716%" y="1391.50"></text></g><g><title>secp256k1_modinv64_update_fg_62_var (1 samples, 0.03%)</title><rect x="10.7556%" y="1397" width="0.0340%" height="15" fill="rgb(241,98,45)" fg:x="316" fg:w="1"/><text x="11.0056%" y="1407.50"></text></g><g><title>secp256k1_scalar_mul_512 (1 samples, 0.03%)</title><rect x="10.7897%" y="1397" width="0.0340%" height="15" fill="rgb(254,28,30)" fg:x="317" fg:w="1"/><text x="11.0397%" y="1407.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.03%)</title><rect x="10.8237%" y="1397" width="0.0340%" height="15" fill="rgb(241,142,54)" fg:x="318" fg:w="1"/><text x="11.0737%" y="1407.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.03%)</title><rect x="10.8577%" y="1397" width="0.0340%" height="15" fill="rgb(222,85,15)" fg:x="319" fg:w="1"/><text x="11.1077%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (1 samples, 0.03%)</title><rect x="10.8918%" y="1397" width="0.0340%" height="15" fill="rgb(210,85,47)" fg:x="320" fg:w="1"/><text x="11.1418%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="10.8918%" y="1381" width="0.0340%" height="15" fill="rgb(224,206,25)" fg:x="320" fg:w="1"/><text x="11.1418%" y="1391.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.03%)</title><rect x="10.8918%" y="1365" width="0.0340%" height="15" fill="rgb(243,201,19)" fg:x="320" fg:w="1"/><text x="11.1418%" y="1375.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.03%)</title><rect x="10.9258%" y="1397" width="0.0340%" height="15" fill="rgb(236,59,4)" fg:x="321" fg:w="1"/><text x="11.1758%" y="1407.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.03%)</title><rect x="10.9598%" y="1397" width="0.0340%" height="15" fill="rgb(254,179,45)" fg:x="322" fg:w="1"/><text x="11.2098%" y="1407.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.03%)</title><rect x="10.9939%" y="1397" width="0.0340%" height="15" fill="rgb(226,14,10)" fg:x="323" fg:w="1"/><text x="11.2439%" y="1407.50"></text></g><g><title>std::__use_cache&lt;std::__numpunct_cache&lt;char&gt; &gt;::operator (1 samples, 0.03%)</title><rect x="11.0279%" y="1397" width="0.0340%" height="15" fill="rgb(244,27,41)" fg:x="324" fg:w="1"/><text x="11.2779%" y="1407.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.03%)</title><rect x="11.0619%" y="1397" width="0.0340%" height="15" fill="rgb(235,35,32)" fg:x="325" fg:w="1"/><text x="11.3119%" y="1407.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="11.0960%" y="1397" width="0.0340%" height="15" fill="rgb(218,68,31)" fg:x="326" fg:w="1"/><text x="11.3460%" y="1407.50"></text></g><g><title>std::ctype&lt;char&gt;::widen (1 samples, 0.03%)</title><rect x="11.1300%" y="1397" width="0.0340%" height="15" fill="rgb(207,120,37)" fg:x="327" fg:w="1"/><text x="11.3800%" y="1407.50"></text></g><g><title>std::filesystem::__cxx11::path::_List::_List (1 samples, 0.03%)</title><rect x="11.1641%" y="1397" width="0.0340%" height="15" fill="rgb(227,98,0)" fg:x="328" fg:w="1"/><text x="11.4141%" y="1407.50"></text></g><g><title>std::filesystem::__cxx11::path::_List::reserve (1 samples, 0.03%)</title><rect x="11.1981%" y="1397" width="0.0340%" height="15" fill="rgb(207,7,3)" fg:x="329" fg:w="1"/><text x="11.4481%" y="1407.50"></text></g><g><title>std::filesystem::__cxx11::path::has_filename (1 samples, 0.03%)</title><rect x="11.2321%" y="1397" width="0.0340%" height="15" fill="rgb(206,98,19)" fg:x="330" fg:w="1"/><text x="11.4821%" y="1407.50"></text></g><g><title>std::filesystem::__cxx11::path::operator/= (1 samples, 0.03%)</title><rect x="11.2662%" y="1397" width="0.0340%" height="15" fill="rgb(217,5,26)" fg:x="331" fg:w="1"/><text x="11.5162%" y="1407.50"></text></g><g><title>std::ios_base::_M_init (1 samples, 0.03%)</title><rect x="11.3002%" y="1397" width="0.0340%" height="15" fill="rgb(235,190,38)" fg:x="332" fg:w="1"/><text x="11.5502%" y="1407.50"></text></g><g><title>std::ios_base::ios_base (1 samples, 0.03%)</title><rect x="11.3342%" y="1397" width="0.0340%" height="15" fill="rgb(247,86,24)" fg:x="333" fg:w="1"/><text x="11.5842%" y="1407.50"></text></g><g><title>std::ios_base::~ios_base (2 samples, 0.07%)</title><rect x="11.3683%" y="1397" width="0.0681%" height="15" fill="rgb(205,101,16)" fg:x="334" fg:w="2"/><text x="11.6183%" y="1407.50"></text></g><g><title>std::locale::id::_M_id (1 samples, 0.03%)</title><rect x="11.4364%" y="1397" width="0.0340%" height="15" fill="rgb(246,168,33)" fg:x="336" fg:w="1"/><text x="11.6864%" y="1407.50"></text></g><g><title>std::locale::~locale (1 samples, 0.03%)</title><rect x="11.4704%" y="1397" width="0.0340%" height="15" fill="rgb(231,114,1)" fg:x="337" fg:w="1"/><text x="11.7204%" y="1407.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;long&gt; (1 samples, 0.03%)</title><rect x="11.5044%" y="1397" width="0.0340%" height="15" fill="rgb(207,184,53)" fg:x="338" fg:w="1"/><text x="11.7544%" y="1407.50"></text></g><g><title>std::ostream::sentry::sentry (1 samples, 0.03%)</title><rect x="11.5385%" y="1397" width="0.0340%" height="15" fill="rgb(224,95,51)" fg:x="339" fg:w="1"/><text x="11.7885%" y="1407.50"></text></g><g><title>std::ostream::write (1 samples, 0.03%)</title><rect x="11.5725%" y="1397" width="0.0340%" height="15" fill="rgb(212,188,45)" fg:x="340" fg:w="1"/><text x="11.8225%" y="1407.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="11.6065%" y="1397" width="0.0340%" height="15" fill="rgb(223,154,38)" fg:x="341" fg:w="1"/><text x="11.8565%" y="1407.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="11.6406%" y="1397" width="0.0340%" height="15" fill="rgb(251,22,52)" fg:x="342" fg:w="1"/><text x="11.8906%" y="1407.50"></text></g><g><title>void WriteCompactSize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="11.6746%" y="1397" width="0.0340%" height="15" fill="rgb(229,209,22)" fg:x="343" fg:w="1"/><text x="11.9246%" y="1407.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="11.7086%" y="1397" width="0.0340%" height="15" fill="rgb(234,138,34)" fg:x="344" fg:w="1"/><text x="11.9586%" y="1407.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="11.7427%" y="1397" width="0.0340%" height="15" fill="rgb(212,95,11)" fg:x="345" fg:w="1"/><text x="11.9927%" y="1407.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.03%)</title><rect x="11.7767%" y="1397" width="0.0340%" height="15" fill="rgb(240,179,47)" fg:x="346" fg:w="1"/><text x="12.0267%" y="1407.50"></text></g><g><title>[anon] (167 samples, 5.68%)</title><rect x="6.1607%" y="1413" width="5.6841%" height="15" fill="rgb(240,163,11)" fg:x="181" fg:w="167"/><text x="6.4107%" y="1423.50">[anon]</text></g><g><title>void tinyformat::detail::FormatArg::formatImpl&lt;unsigned int&gt; (1 samples, 0.03%)</title><rect x="11.8108%" y="1397" width="0.0340%" height="15" fill="rgb(236,37,12)" fg:x="347" fg:w="1"/><text x="12.0608%" y="1407.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.03%)</title><rect x="11.8448%" y="1397" width="0.0340%" height="15" fill="rgb(232,164,16)" fg:x="348" fg:w="1"/><text x="12.0948%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="11.8788%" y="1397" width="0.0340%" height="15" fill="rgb(244,205,15)" fg:x="349" fg:w="1"/><text x="12.1288%" y="1407.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (1 samples, 0.03%)</title><rect x="11.9129%" y="1397" width="0.0340%" height="15" fill="rgb(223,117,47)" fg:x="350" fg:w="1"/><text x="12.1629%" y="1407.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="11.9469%" y="1397" width="0.0340%" height="15" fill="rgb(244,107,35)" fg:x="351" fg:w="1"/><text x="12.1969%" y="1407.50"></text></g><g><title>std::ostream::write (1 samples, 0.03%)</title><rect x="11.9809%" y="1397" width="0.0340%" height="15" fill="rgb(205,140,8)" fg:x="352" fg:w="1"/><text x="12.2309%" y="1407.50"></text></g><g><title>[bitcoind-base] (6 samples, 0.20%)</title><rect x="11.8448%" y="1413" width="0.2042%" height="15" fill="rgb(228,84,46)" fg:x="348" fg:w="6"/><text x="12.0948%" y="1423.50"></text></g><g><title>void tinyformat::detail::FormatArg::formatImpl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="12.0150%" y="1397" width="0.0340%" height="15" fill="rgb(254,188,9)" fg:x="353" fg:w="1"/><text x="12.2650%" y="1407.50"></text></g><g><title>AEADChaCha20Poly1305::Encrypt (1 samples, 0.03%)</title><rect x="12.1511%" y="1397" width="0.0340%" height="15" fill="rgb(206,112,54)" fg:x="357" fg:w="1"/><text x="12.4011%" y="1407.50"></text></g><g><title>AutoFile::write (5 samples, 0.17%)</title><rect x="12.1852%" y="1397" width="0.1702%" height="15" fill="rgb(216,84,49)" fg:x="358" fg:w="5"/><text x="12.4352%" y="1407.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="12.2873%" y="1381" width="0.0681%" height="15" fill="rgb(214,194,35)" fg:x="361" fg:w="2"/><text x="12.5373%" y="1391.50"></text></g><g><title>CBlockIndex::GetAncestor (2 samples, 0.07%)</title><rect x="12.3553%" y="1397" width="0.0681%" height="15" fill="rgb(249,28,3)" fg:x="363" fg:w="2"/><text x="12.6053%" y="1407.50"></text></g><g><title>CCoinsViewCache::Flush (1 samples, 0.03%)</title><rect x="12.4234%" y="1397" width="0.0340%" height="15" fill="rgb(222,56,52)" fg:x="365" fg:w="1"/><text x="12.6734%" y="1407.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.03%)</title><rect x="12.4575%" y="1397" width="0.0340%" height="15" fill="rgb(245,217,50)" fg:x="366" fg:w="1"/><text x="12.7075%" y="1407.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="12.4915%" y="1397" width="0.0340%" height="15" fill="rgb(213,201,24)" fg:x="367" fg:w="1"/><text x="12.7415%" y="1407.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.10%)</title><rect x="12.5255%" y="1397" width="0.1021%" height="15" fill="rgb(248,116,28)" fg:x="368" fg:w="3"/><text x="12.7755%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="12.6276%" y="1397" width="0.0340%" height="15" fill="rgb(219,72,43)" fg:x="371" fg:w="1"/><text x="12.8776%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="12.6276%" y="1381" width="0.0340%" height="15" fill="rgb(209,138,14)" fg:x="371" fg:w="1"/><text x="12.8776%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="12.6276%" y="1365" width="0.0340%" height="15" fill="rgb(222,18,33)" fg:x="371" fg:w="1"/><text x="12.8776%" y="1375.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (10 samples, 0.34%)</title><rect x="12.6617%" y="1397" width="0.3404%" height="15" fill="rgb(213,199,7)" fg:x="372" fg:w="10"/><text x="12.9117%" y="1407.50"></text></g><g><title>_IO_fwrite (6 samples, 0.20%)</title><rect x="13.0020%" y="1397" width="0.2042%" height="15" fill="rgb(250,110,10)" fg:x="382" fg:w="6"/><text x="13.2520%" y="1407.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (3 samples, 0.10%)</title><rect x="13.2063%" y="1397" width="0.1021%" height="15" fill="rgb(248,123,6)" fg:x="388" fg:w="3"/><text x="13.4563%" y="1407.50"></text></g><g><title>___vsnprintf (1 samples, 0.03%)</title><rect x="13.3084%" y="1397" width="0.0340%" height="15" fill="rgb(206,91,31)" fg:x="391" fg:w="1"/><text x="13.5584%" y="1407.50"></text></g><g><title>__ieee754_log_fma (1 samples, 0.03%)</title><rect x="13.3424%" y="1397" width="0.0340%" height="15" fill="rgb(211,154,13)" fg:x="392" fg:w="1"/><text x="13.5924%" y="1407.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.03%)</title><rect x="13.3764%" y="1397" width="0.0340%" height="15" fill="rgb(225,148,7)" fg:x="393" fg:w="1"/><text x="13.6264%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (11 samples, 0.37%)</title><rect x="13.4105%" y="1397" width="0.3744%" height="15" fill="rgb(220,160,43)" fg:x="394" fg:w="11"/><text x="13.6605%" y="1407.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="13.7849%" y="1397" width="0.0340%" height="15" fill="rgb(213,52,39)" fg:x="405" fg:w="1"/><text x="14.0349%" y="1407.50"></text></g><g><title>__mpn_rshift (1 samples, 0.03%)</title><rect x="13.8189%" y="1397" width="0.0340%" height="15" fill="rgb(243,137,7)" fg:x="406" fg:w="1"/><text x="14.0689%" y="1407.50"></text></g><g><title>__printf_fp_l_buffer (1 samples, 0.03%)</title><rect x="13.8530%" y="1397" width="0.0340%" height="15" fill="rgb(230,79,13)" fg:x="407" fg:w="1"/><text x="14.1030%" y="1407.50"></text></g><g><title>_int_free (4 samples, 0.14%)</title><rect x="13.8870%" y="1397" width="0.1361%" height="15" fill="rgb(247,105,23)" fg:x="408" fg:w="4"/><text x="14.1370%" y="1407.50"></text></g><g><title>_int_malloc (7 samples, 0.24%)</title><rect x="14.0231%" y="1397" width="0.2383%" height="15" fill="rgb(223,179,41)" fg:x="412" fg:w="7"/><text x="14.2731%" y="1407.50"></text></g><g><title>boost::signals2::detail::slot_call_iterator_t&lt;boost::signals2::detail::variadic_slot_invoker&lt;boost::signals2::detail::void_type, SynchronizationState, CBlockIndex const*&gt;, std::_List_iterator&lt;boost::shared_ptr&lt;boost::signals2::detail::connection_body&lt;std::pair&lt;boost::signals2::detail::slot_meta_group, boost::optional&lt;int&gt; &gt;, boost::signals2::slot&lt;void (SynchronizationState, CBlockIndex const*), boost::function&lt;void (SynchronizationState, CBlockIndex const*)&gt; &gt;, boost::signals2::mutex&gt; &gt; &gt;, boost::signals2::detail::connection_body&lt;std::pair&lt;boost::signals2::detail::slot_meta_group, boost::optional&lt;int&gt; &gt;, boost::signals2::slot&lt;void (SynchronizationState, CBlockIndex const*), boost::function&lt;void (SynchronizationState, CBlockIndex const*)&gt; &gt;, boost::signals2::mutex&gt; &gt;::lock_next_callable (1 samples, 0.03%)</title><rect x="14.2614%" y="1397" width="0.0340%" height="15" fill="rgb(218,9,34)" fg:x="419" fg:w="1"/><text x="14.5114%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="14.2954%" y="1397" width="0.0681%" height="15" fill="rgb(222,106,8)" fg:x="420" fg:w="2"/><text x="14.5454%" y="1407.50"></text></g><g><title>common::GetSetting (1 samples, 0.03%)</title><rect x="14.3635%" y="1397" width="0.0340%" height="15" fill="rgb(211,220,0)" fg:x="422" fg:w="1"/><text x="14.6135%" y="1407.50"></text></g><g><title>construction vtable for std::ostream-in-std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.03%)</title><rect x="14.3975%" y="1397" width="0.0340%" height="15" fill="rgb(229,52,16)" fg:x="423" fg:w="1"/><text x="14.6475%" y="1407.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="14.3975%" y="1381" width="0.0340%" height="15" fill="rgb(212,155,18)" fg:x="423" fg:w="1"/><text x="14.6475%" y="1391.50"></text></g><g><title>ecdsa_signature_parse_der_lax (1 samples, 0.03%)</title><rect x="14.4316%" y="1397" width="0.0340%" height="15" fill="rgb(242,21,14)" fg:x="424" fg:w="1"/><text x="14.6816%" y="1407.50"></text></g><g><title>hack_digit (1 samples, 0.03%)</title><rect x="14.4656%" y="1397" width="0.0340%" height="15" fill="rgb(222,19,48)" fg:x="425" fg:w="1"/><text x="14.7156%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.03%)</title><rect x="14.4997%" y="1397" width="0.0340%" height="15" fill="rgb(232,45,27)" fg:x="426" fg:w="1"/><text x="14.7497%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="14.5337%" y="1397" width="0.0340%" height="15" fill="rgb(249,103,42)" fg:x="427" fg:w="1"/><text x="14.7837%" y="1407.50"></text></g><g><title>leveldb::Block::Block (1 samples, 0.03%)</title><rect x="14.5677%" y="1397" width="0.0340%" height="15" fill="rgb(246,81,33)" fg:x="428" fg:w="1"/><text x="14.8177%" y="1407.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.03%)</title><rect x="14.6018%" y="1397" width="0.0340%" height="15" fill="rgb(252,33,42)" fg:x="429" fg:w="1"/><text x="14.8518%" y="1407.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (1 samples, 0.03%)</title><rect x="14.6358%" y="1397" width="0.0340%" height="15" fill="rgb(209,212,41)" fg:x="430" fg:w="1"/><text x="14.8858%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="14.6698%" y="1397" width="0.0340%" height="15" fill="rgb(207,154,6)" fg:x="431" fg:w="1"/><text x="14.9198%" y="1407.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="14.6698%" y="1381" width="0.0340%" height="15" fill="rgb(223,64,47)" fg:x="431" fg:w="1"/><text x="14.9198%" y="1391.50"></text></g><g><title>malloc (7 samples, 0.24%)</title><rect x="14.7039%" y="1397" width="0.2383%" height="15" fill="rgb(211,161,38)" fg:x="432" fg:w="7"/><text x="14.9539%" y="1407.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="14.9421%" y="1397" width="0.0340%" height="15" fill="rgb(219,138,40)" fg:x="439" fg:w="1"/><text x="15.1921%" y="1407.50"></text></g><g><title>memchr@plt (1 samples, 0.03%)</title><rect x="14.9762%" y="1397" width="0.0340%" height="15" fill="rgb(241,228,46)" fg:x="440" fg:w="1"/><text x="15.2262%" y="1407.50"></text></g><g><title>new_do_write (1 samples, 0.03%)</title><rect x="15.0102%" y="1397" width="0.0340%" height="15" fill="rgb(223,209,38)" fg:x="441" fg:w="1"/><text x="15.2602%" y="1407.50"></text></g><g><title>node::BlockManager::FindUndoPos (1 samples, 0.03%)</title><rect x="15.0442%" y="1397" width="0.0340%" height="15" fill="rgb(236,164,45)" fg:x="442" fg:w="1"/><text x="15.2942%" y="1407.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="15.0783%" y="1397" width="0.0340%" height="15" fill="rgb(231,15,5)" fg:x="443" fg:w="1"/><text x="15.3283%" y="1407.50"></text></g><g><title>operator new[] (1 samples, 0.03%)</title><rect x="15.1123%" y="1397" width="0.0340%" height="15" fill="rgb(252,35,15)" fg:x="444" fg:w="1"/><text x="15.3623%" y="1407.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="15.1464%" y="1397" width="0.1021%" height="15" fill="rgb(248,181,18)" fg:x="445" fg:w="3"/><text x="15.3964%" y="1407.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (1 samples, 0.03%)</title><rect x="15.2485%" y="1397" width="0.0340%" height="15" fill="rgb(233,39,42)" fg:x="448" fg:w="1"/><text x="15.4985%" y="1407.50"></text></g><g><title>secp256k1_ecmult_table_get_ge (1 samples, 0.03%)</title><rect x="15.2485%" y="1381" width="0.0340%" height="15" fill="rgb(238,110,33)" fg:x="448" fg:w="1"/><text x="15.4985%" y="1391.50"></text></g><g><title>secp256k1_ecmult_wnaf (1 samples, 0.03%)</title><rect x="15.2825%" y="1397" width="0.0340%" height="15" fill="rgb(233,195,10)" fg:x="449" fg:w="1"/><text x="15.5325%" y="1407.50"></text></g><g><title>secp256k1_u128_accum_mul (13 samples, 0.44%)</title><rect x="15.5548%" y="1381" width="0.4425%" height="15" fill="rgb(254,105,3)" fg:x="457" fg:w="13"/><text x="15.8048%" y="1391.50"></text></g><g><title>secp256k1_u128_accum_u64 (1 samples, 0.03%)</title><rect x="15.9973%" y="1381" width="0.0340%" height="15" fill="rgb(221,225,9)" fg:x="470" fg:w="1"/><text x="16.2473%" y="1391.50"></text></g><g><title>secp256k1_u128_mul (2 samples, 0.07%)</title><rect x="16.0313%" y="1381" width="0.0681%" height="15" fill="rgb(224,227,45)" fg:x="471" fg:w="2"/><text x="16.2813%" y="1391.50"></text></g><g><title>secp256k1_fe_mul_inner (32 samples, 1.09%)</title><rect x="15.3165%" y="1397" width="1.0892%" height="15" fill="rgb(229,198,43)" fg:x="450" fg:w="32"/><text x="15.5665%" y="1407.50"></text></g><g><title>secp256k1_u128_rshift (9 samples, 0.31%)</title><rect x="16.0994%" y="1381" width="0.3063%" height="15" fill="rgb(206,209,35)" fg:x="473" fg:w="9"/><text x="16.3494%" y="1391.50"></text></g><g><title>secp256k1_u128_accum_mul (11 samples, 0.37%)</title><rect x="16.4398%" y="1381" width="0.3744%" height="15" fill="rgb(245,195,53)" fg:x="483" fg:w="11"/><text x="16.6898%" y="1391.50"></text></g><g><title>secp256k1_u128_mul (1 samples, 0.03%)</title><rect x="16.8142%" y="1381" width="0.0340%" height="15" fill="rgb(240,92,26)" fg:x="494" fg:w="1"/><text x="17.0642%" y="1391.50"></text></g><g><title>secp256k1_fe_sqr_inner (18 samples, 0.61%)</title><rect x="16.4057%" y="1397" width="0.6127%" height="15" fill="rgb(207,40,23)" fg:x="482" fg:w="18"/><text x="16.6557%" y="1407.50"></text></g><g><title>secp256k1_u128_rshift (5 samples, 0.17%)</title><rect x="16.8482%" y="1381" width="0.1702%" height="15" fill="rgb(223,111,35)" fg:x="495" fg:w="5"/><text x="17.0982%" y="1391.50"></text></g><g><title>secp256k1_fe_sqrt (1 samples, 0.03%)</title><rect x="17.0184%" y="1397" width="0.0340%" height="15" fill="rgb(229,147,28)" fg:x="500" fg:w="1"/><text x="17.2684%" y="1407.50"></text></g><g><title>secp256k1_fe_impl_sqr (1 samples, 0.03%)</title><rect x="17.0184%" y="1381" width="0.0340%" height="15" fill="rgb(211,29,28)" fg:x="500" fg:w="1"/><text x="17.2684%" y="1391.50"></text></g><g><title>secp256k1_ge_to_bytes (1 samples, 0.03%)</title><rect x="17.0524%" y="1397" width="0.0340%" height="15" fill="rgb(228,72,33)" fg:x="501" fg:w="1"/><text x="17.3024%" y="1407.50"></text></g><g><title>secp256k1_modinv64_var (1 samples, 0.03%)</title><rect x="17.0865%" y="1397" width="0.0340%" height="15" fill="rgb(205,214,31)" fg:x="502" fg:w="1"/><text x="17.3365%" y="1407.50"></text></g><g><title>secp256k1_modinv64_divsteps_62_var (1 samples, 0.03%)</title><rect x="17.0865%" y="1381" width="0.0340%" height="15" fill="rgb(224,111,15)" fg:x="502" fg:w="1"/><text x="17.3365%" y="1391.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (1 samples, 0.03%)</title><rect x="17.1205%" y="1397" width="0.0340%" height="15" fill="rgb(253,21,26)" fg:x="503" fg:w="1"/><text x="17.3705%" y="1407.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (1 samples, 0.03%)</title><rect x="17.1545%" y="1397" width="0.0340%" height="15" fill="rgb(245,139,43)" fg:x="504" fg:w="1"/><text x="17.4045%" y="1407.50"></text></g><g><title>std::__detail::_List_node_base::_M_hook (1 samples, 0.03%)</title><rect x="17.1886%" y="1397" width="0.0340%" height="15" fill="rgb(252,170,7)" fg:x="505" fg:w="1"/><text x="17.4386%" y="1407.50"></text></g><g><title>std::filesystem::__cxx11::path::_List::reserve (1 samples, 0.03%)</title><rect x="17.2226%" y="1397" width="0.0340%" height="15" fill="rgb(231,118,14)" fg:x="506" fg:w="1"/><text x="17.4726%" y="1407.50"></text></g><g><title>std::ios_base::ios_base (1 samples, 0.03%)</title><rect x="17.2566%" y="1397" width="0.0340%" height="15" fill="rgb(238,83,0)" fg:x="507" fg:w="1"/><text x="17.5066%" y="1407.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="17.2907%" y="1397" width="0.0340%" height="15" fill="rgb(221,39,39)" fg:x="508" fg:w="1"/><text x="17.5407%" y="1407.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="17.3247%" y="1397" width="0.0340%" height="15" fill="rgb(222,119,46)" fg:x="509" fg:w="1"/><text x="17.5747%" y="1407.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (1 samples, 0.03%)</title><rect x="17.3587%" y="1397" width="0.0340%" height="15" fill="rgb(222,165,49)" fg:x="510" fg:w="1"/><text x="17.6087%" y="1407.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.03%)</title><rect x="17.3928%" y="1397" width="0.0340%" height="15" fill="rgb(219,113,52)" fg:x="511" fg:w="1"/><text x="17.6428%" y="1407.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="17.4268%" y="1397" width="0.0681%" height="15" fill="rgb(214,7,15)" fg:x="512" fg:w="2"/><text x="17.6768%" y="1407.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="17.4949%" y="1397" width="0.1361%" height="15" fill="rgb(235,32,4)" fg:x="514" fg:w="4"/><text x="17.7449%" y="1407.50"></text></g><g><title>[unknown] (165 samples, 5.62%)</title><rect x="12.0490%" y="1413" width="5.6161%" height="15" fill="rgb(238,90,54)" fg:x="354" fg:w="165"/><text x="12.2990%" y="1423.50">[unknow..</text></g><g><title>void tinyformat::detail::FormatArg::formatImpl&lt;unsigned int&gt; (1 samples, 0.03%)</title><rect x="17.6310%" y="1397" width="0.0340%" height="15" fill="rgb(213,208,19)" fg:x="518" fg:w="1"/><text x="17.8810%" y="1407.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.24%)</title><rect x="17.6651%" y="1413" width="0.2383%" height="15" fill="rgb(233,156,4)" fg:x="519" fg:w="7"/><text x="17.9151%" y="1423.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="17.9033%" y="1413" width="0.0340%" height="15" fill="rgb(207,194,5)" fg:x="526" fg:w="1"/><text x="18.1533%" y="1423.50"></text></g><g><title>BCLog::Logger::WillLogCategoryLevel (1 samples, 0.03%)</title><rect x="18.2437%" y="1237" width="0.0340%" height="15" fill="rgb(206,111,30)" fg:x="536" fg:w="1"/><text x="18.4937%" y="1247.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.03%)</title><rect x="18.3458%" y="1189" width="0.0340%" height="15" fill="rgb(243,70,54)" fg:x="539" fg:w="1"/><text x="18.5958%" y="1199.50"></text></g><g><title>CBlockIndex::GetAncestor (4 samples, 0.14%)</title><rect x="18.2777%" y="1237" width="0.1361%" height="15" fill="rgb(242,28,8)" fg:x="537" fg:w="4"/><text x="18.5277%" y="1247.50"></text></g><g><title>GetSkipHeight (2 samples, 0.07%)</title><rect x="18.3458%" y="1221" width="0.0681%" height="15" fill="rgb(219,106,18)" fg:x="539" fg:w="2"/><text x="18.5958%" y="1231.50"></text></g><g><title>GetSkipHeight (2 samples, 0.07%)</title><rect x="18.3458%" y="1205" width="0.0681%" height="15" fill="rgb(244,222,10)" fg:x="539" fg:w="2"/><text x="18.5958%" y="1215.50"></text></g><g><title>InvertLowestOne (1 samples, 0.03%)</title><rect x="18.3799%" y="1189" width="0.0340%" height="15" fill="rgb(236,179,52)" fg:x="540" fg:w="1"/><text x="18.6299%" y="1199.50"></text></g><g><title>CalculateClaimedHeadersWork (1 samples, 0.03%)</title><rect x="18.4139%" y="1237" width="0.0340%" height="15" fill="rgb(213,23,39)" fg:x="541" fg:w="1"/><text x="18.6639%" y="1247.50"></text></g><g><title>GetBlockProof (1 samples, 0.03%)</title><rect x="18.4139%" y="1221" width="0.0340%" height="15" fill="rgb(238,48,10)" fg:x="541" fg:w="1"/><text x="18.6639%" y="1231.50"></text></g><g><title>operator/ (1 samples, 0.03%)</title><rect x="18.4139%" y="1205" width="0.0340%" height="15" fill="rgb(251,196,23)" fg:x="541" fg:w="1"/><text x="18.6639%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.03%)</title><rect x="18.4139%" y="1189" width="0.0340%" height="15" fill="rgb(250,152,24)" fg:x="541" fg:w="1"/><text x="18.6639%" y="1199.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.03%)</title><rect x="18.4139%" y="1173" width="0.0340%" height="15" fill="rgb(209,150,17)" fg:x="541" fg:w="1"/><text x="18.6639%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (2 samples, 0.07%)</title><rect x="18.4820%" y="1157" width="0.0681%" height="15" fill="rgb(234,202,34)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (2 samples, 0.07%)</title><rect x="18.4820%" y="1141" width="0.0681%" height="15" fill="rgb(253,148,53)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (2 samples, 0.07%)</title><rect x="18.4820%" y="1125" width="0.0681%" height="15" fill="rgb(218,129,16)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1135.50"></text></g><g><title>operator new (2 samples, 0.07%)</title><rect x="18.4820%" y="1109" width="0.0681%" height="15" fill="rgb(216,85,19)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1119.50"></text></g><g><title>__posix_memalign (2 samples, 0.07%)</title><rect x="18.4820%" y="1093" width="0.0681%" height="15" fill="rgb(235,228,7)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1103.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="18.4820%" y="1077" width="0.0681%" height="15" fill="rgb(245,175,0)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1087.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="18.4820%" y="1061" width="0.0681%" height="15" fill="rgb(208,168,36)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1071.50"></text></g><g><title>malloc_consolidate (2 samples, 0.07%)</title><rect x="18.4820%" y="1045" width="0.0681%" height="15" fill="rgb(246,171,24)" fg:x="543" fg:w="2"/><text x="18.7320%" y="1055.50"></text></g><g><title>CSHA512::Write (1 samples, 0.03%)</title><rect x="18.5500%" y="1061" width="0.0340%" height="15" fill="rgb(215,142,24)" fg:x="545" fg:w="1"/><text x="18.8000%" y="1071.50"></text></g><g><title>FastRandomContext::rand64 (2 samples, 0.07%)</title><rect x="18.5500%" y="1141" width="0.0681%" height="15" fill="rgb(250,187,7)" fg:x="545" fg:w="2"/><text x="18.8000%" y="1151.50"></text></g><g><title>FastRandomContext::RandomSeed (2 samples, 0.07%)</title><rect x="18.5500%" y="1125" width="0.0681%" height="15" fill="rgb(228,66,33)" fg:x="545" fg:w="2"/><text x="18.8000%" y="1135.50"></text></g><g><title>GetRandHash (2 samples, 0.07%)</title><rect x="18.5500%" y="1109" width="0.0681%" height="15" fill="rgb(234,215,21)" fg:x="545" fg:w="2"/><text x="18.8000%" y="1119.50"></text></g><g><title>CSHA512::Finalize (2 samples, 0.07%)</title><rect x="18.5500%" y="1093" width="0.0681%" height="15" fill="rgb(222,191,20)" fg:x="545" fg:w="2"/><text x="18.8000%" y="1103.50"></text></g><g><title>CSHA512::Write (2 samples, 0.07%)</title><rect x="18.5500%" y="1077" width="0.0681%" height="15" fill="rgb(245,79,54)" fg:x="545" fg:w="2"/><text x="18.8000%" y="1087.50"></text></g><g><title>Transform (1 samples, 0.03%)</title><rect x="18.5841%" y="1061" width="0.0340%" height="15" fill="rgb(240,10,37)" fg:x="546" fg:w="1"/><text x="18.8341%" y="1071.50"></text></g><g><title>CCoinsViewCache::CCoinsViewCache (5 samples, 0.17%)</title><rect x="18.4820%" y="1173" width="0.1702%" height="15" fill="rgb(214,192,32)" fg:x="543" fg:w="5"/><text x="18.7320%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::SaltedOutpointHasher (3 samples, 0.10%)</title><rect x="18.5500%" y="1157" width="0.1021%" height="15" fill="rgb(209,36,54)" fg:x="545" fg:w="3"/><text x="18.8000%" y="1167.50"></text></g><g><title>std::__detail::_List_node_base::_M_hook (1 samples, 0.03%)</title><rect x="18.6181%" y="1141" width="0.0340%" height="15" fill="rgb(220,10,11)" fg:x="547" fg:w="1"/><text x="18.8681%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="18.6521%" y="1173" width="0.0340%" height="15" fill="rgb(221,106,17)" fg:x="548" fg:w="1"/><text x="18.9021%" y="1183.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::end (1 samples, 0.03%)</title><rect x="18.6521%" y="1157" width="0.0340%" height="15" fill="rgb(251,142,44)" fg:x="548" fg:w="1"/><text x="18.9021%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (1 samples, 0.03%)</title><rect x="18.6521%" y="1141" width="0.0340%" height="15" fill="rgb(238,13,15)" fg:x="548" fg:w="1"/><text x="18.9021%" y="1151.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;::_Node_iterator (1 samples, 0.03%)</title><rect x="18.6521%" y="1125" width="0.0340%" height="15" fill="rgb(208,107,27)" fg:x="548" fg:w="1"/><text x="18.9021%" y="1135.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_Node_iterator_base (1 samples, 0.03%)</title><rect x="18.6521%" y="1109" width="0.0340%" height="15" fill="rgb(205,136,37)" fg:x="548" fg:w="1"/><text x="18.9021%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (1 samples, 0.03%)</title><rect x="18.6862%" y="1141" width="0.0340%" height="15" fill="rgb(250,205,27)" fg:x="549" fg:w="1"/><text x="18.9362%" y="1151.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.03%)</title><rect x="18.7202%" y="1141" width="0.0340%" height="15" fill="rgb(210,80,43)" fg:x="550" fg:w="1"/><text x="18.9702%" y="1151.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.03%)</title><rect x="18.7202%" y="1125" width="0.0340%" height="15" fill="rgb(247,160,36)" fg:x="550" fg:w="1"/><text x="18.9702%" y="1135.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.03%)</title><rect x="18.7202%" y="1109" width="0.0340%" height="15" fill="rgb(234,13,49)" fg:x="550" fg:w="1"/><text x="18.9702%" y="1119.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.03%)</title><rect x="18.7202%" y="1093" width="0.0340%" height="15" fill="rgb(234,122,0)" fg:x="550" fg:w="1"/><text x="18.9702%" y="1103.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (1 samples, 0.03%)</title><rect x="18.7543%" y="1141" width="0.0340%" height="15" fill="rgb(207,146,38)" fg:x="551" fg:w="1"/><text x="19.0043%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::Next (1 samples, 0.03%)</title><rect x="18.7543%" y="1125" width="0.0340%" height="15" fill="rgb(207,177,25)" fg:x="551" fg:w="1"/><text x="19.0043%" y="1135.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.03%)</title><rect x="18.7883%" y="1093" width="0.0340%" height="15" fill="rgb(211,178,42)" fg:x="552" fg:w="1"/><text x="19.0383%" y="1103.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="18.8223%" y="1093" width="0.0340%" height="15" fill="rgb(230,69,54)" fg:x="553" fg:w="1"/><text x="19.0723%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10 samples, 0.34%)</title><rect x="18.7883%" y="1109" width="0.3404%" height="15" fill="rgb(214,135,41)" fg:x="552" fg:w="10"/><text x="19.0383%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.27%)</title><rect x="18.8564%" y="1093" width="0.2723%" height="15" fill="rgb(237,67,25)" fg:x="554" fg:w="8"/><text x="19.1064%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.27%)</title><rect x="18.8564%" y="1077" width="0.2723%" height="15" fill="rgb(222,189,50)" fg:x="554" fg:w="8"/><text x="19.1064%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.27%)</title><rect x="18.8564%" y="1061" width="0.2723%" height="15" fill="rgb(245,148,34)" fg:x="554" fg:w="8"/><text x="19.1064%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.27%)</title><rect x="18.8564%" y="1045" width="0.2723%" height="15" fill="rgb(222,29,6)" fg:x="554" fg:w="8"/><text x="19.1064%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.27%)</title><rect x="18.8564%" y="1029" width="0.2723%" height="15" fill="rgb(221,189,43)" fg:x="554" fg:w="8"/><text x="19.1064%" y="1039.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.27%)</title><rect x="18.8564%" y="1013" width="0.2723%" height="15" fill="rgb(207,36,27)" fg:x="554" fg:w="8"/><text x="19.1064%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="19.0606%" y="997" width="0.0681%" height="15" fill="rgb(217,90,24)" fg:x="560" fg:w="2"/><text x="19.3106%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="19.0606%" y="981" width="0.0681%" height="15" fill="rgb(224,66,35)" fg:x="560" fg:w="2"/><text x="19.3106%" y="991.50"></text></g><g><title>SipHashUint256Extra (31 samples, 1.06%)</title><rect x="19.1287%" y="1093" width="1.0551%" height="15" fill="rgb(221,13,50)" fg:x="562" fg:w="31"/><text x="19.3787%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (17 samples, 0.58%)</title><rect x="19.6052%" y="1077" width="0.5786%" height="15" fill="rgb(236,68,49)" fg:x="576" fg:w="17"/><text x="19.8552%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (17 samples, 0.58%)</title><rect x="19.6052%" y="1061" width="0.5786%" height="15" fill="rgb(229,146,28)" fg:x="576" fg:w="17"/><text x="19.8552%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (7 samples, 0.24%)</title><rect x="20.1838%" y="1093" width="0.2383%" height="15" fill="rgb(225,31,38)" fg:x="593" fg:w="7"/><text x="20.4338%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.24%)</title><rect x="20.1838%" y="1077" width="0.2383%" height="15" fill="rgb(250,208,3)" fg:x="593" fg:w="7"/><text x="20.4338%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.24%)</title><rect x="20.1838%" y="1061" width="0.2383%" height="15" fill="rgb(246,54,23)" fg:x="593" fg:w="7"/><text x="20.4338%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.24%)</title><rect x="20.1838%" y="1045" width="0.2383%" height="15" fill="rgb(243,76,11)" fg:x="593" fg:w="7"/><text x="20.4338%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.24%)</title><rect x="20.1838%" y="1029" width="0.2383%" height="15" fill="rgb(245,21,50)" fg:x="593" fg:w="7"/><text x="20.4338%" y="1039.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.24%)</title><rect x="20.1838%" y="1013" width="0.2383%" height="15" fill="rgb(228,9,43)" fg:x="593" fg:w="7"/><text x="20.4338%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="20.3880%" y="997" width="0.0340%" height="15" fill="rgb(208,100,47)" fg:x="599" fg:w="1"/><text x="20.6380%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="20.3880%" y="981" width="0.0340%" height="15" fill="rgb(232,26,8)" fg:x="599" fg:w="1"/><text x="20.6380%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (2 samples, 0.07%)</title><rect x="20.4221%" y="1061" width="0.0681%" height="15" fill="rgb(216,166,38)" fg:x="600" fg:w="2"/><text x="20.6721%" y="1071.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (2 samples, 0.07%)</title><rect x="20.4221%" y="1045" width="0.0681%" height="15" fill="rgb(251,202,51)" fg:x="600" fg:w="2"/><text x="20.6721%" y="1055.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.07%)</title><rect x="20.4221%" y="1029" width="0.0681%" height="15" fill="rgb(254,216,34)" fg:x="600" fg:w="2"/><text x="20.6721%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.4221%" y="1013" width="0.0681%" height="15" fill="rgb(251,32,27)" fg:x="600" fg:w="2"/><text x="20.6721%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.4221%" y="997" width="0.0681%" height="15" fill="rgb(208,127,28)" fg:x="600" fg:w="2"/><text x="20.6721%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.4221%" y="981" width="0.0681%" height="15" fill="rgb(224,137,22)" fg:x="600" fg:w="2"/><text x="20.6721%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.4221%" y="965" width="0.0681%" height="15" fill="rgb(254,70,32)" fg:x="600" fg:w="2"/><text x="20.6721%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.4221%" y="949" width="0.0681%" height="15" fill="rgb(229,75,37)" fg:x="600" fg:w="2"/><text x="20.6721%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.4221%" y="933" width="0.0681%" height="15" fill="rgb(252,64,23)" fg:x="600" fg:w="2"/><text x="20.6721%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.4561%" y="917" width="0.0340%" height="15" fill="rgb(232,162,48)" fg:x="601" fg:w="1"/><text x="20.7061%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (41 samples, 1.40%)</title><rect x="19.1287%" y="1109" width="1.3955%" height="15" fill="rgb(246,160,12)" fg:x="562" fg:w="41"/><text x="19.3787%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (3 samples, 0.10%)</title><rect x="20.4221%" y="1093" width="0.1021%" height="15" fill="rgb(247,166,0)" fg:x="600" fg:w="3"/><text x="20.6721%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (3 samples, 0.10%)</title><rect x="20.4221%" y="1077" width="0.1021%" height="15" fill="rgb(249,219,21)" fg:x="600" fg:w="3"/><text x="20.6721%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="20.4901%" y="1061" width="0.0340%" height="15" fill="rgb(205,209,3)" fg:x="602" fg:w="1"/><text x="20.7401%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="20.4901%" y="1045" width="0.0340%" height="15" fill="rgb(243,44,1)" fg:x="602" fg:w="1"/><text x="20.7401%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="20.4901%" y="1029" width="0.0340%" height="15" fill="rgb(206,159,16)" fg:x="602" fg:w="1"/><text x="20.7401%" y="1039.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="20.4901%" y="1013" width="0.0340%" height="15" fill="rgb(244,77,30)" fg:x="602" fg:w="1"/><text x="20.7401%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="20.4901%" y="997" width="0.0340%" height="15" fill="rgb(218,69,12)" fg:x="602" fg:w="1"/><text x="20.7401%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="20.4901%" y="981" width="0.0340%" height="15" fill="rgb(212,87,7)" fg:x="602" fg:w="1"/><text x="20.7401%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="1077" width="0.0340%" height="15" fill="rgb(245,114,25)" fg:x="603" fg:w="1"/><text x="20.7742%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="1061" width="0.0340%" height="15" fill="rgb(210,61,42)" fg:x="603" fg:w="1"/><text x="20.7742%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="1045" width="0.0340%" height="15" fill="rgb(211,52,33)" fg:x="603" fg:w="1"/><text x="20.7742%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="1029" width="0.0340%" height="15" fill="rgb(234,58,33)" fg:x="603" fg:w="1"/><text x="20.7742%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="1013" width="0.0340%" height="15" fill="rgb(220,115,36)" fg:x="603" fg:w="1"/><text x="20.7742%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="997" width="0.0340%" height="15" fill="rgb(243,153,54)" fg:x="603" fg:w="1"/><text x="20.7742%" y="1007.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="20.5242%" y="981" width="0.0340%" height="15" fill="rgb(251,47,18)" fg:x="603" fg:w="1"/><text x="20.7742%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="965" width="0.0340%" height="15" fill="rgb(242,102,42)" fg:x="603" fg:w="1"/><text x="20.7742%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="949" width="0.0340%" height="15" fill="rgb(234,31,38)" fg:x="603" fg:w="1"/><text x="20.7742%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5242%" y="933" width="0.0340%" height="15" fill="rgb(221,117,51)" fg:x="603" fg:w="1"/><text x="20.7742%" y="943.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="20.5582%" y="1077" width="0.0340%" height="15" fill="rgb(212,20,18)" fg:x="604" fg:w="1"/><text x="20.8082%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="20.5582%" y="1061" width="0.0340%" height="15" fill="rgb(245,133,36)" fg:x="604" fg:w="1"/><text x="20.8082%" y="1071.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="20.5582%" y="1045" width="0.0340%" height="15" fill="rgb(212,6,19)" fg:x="604" fg:w="1"/><text x="20.8082%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="20.5582%" y="1029" width="0.0340%" height="15" fill="rgb(218,1,36)" fg:x="604" fg:w="1"/><text x="20.8082%" y="1039.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.03%)</title><rect x="20.5582%" y="1013" width="0.0340%" height="15" fill="rgb(246,84,54)" fg:x="604" fg:w="1"/><text x="20.8082%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="997" width="0.0340%" height="15" fill="rgb(242,110,6)" fg:x="604" fg:w="1"/><text x="20.8082%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="981" width="0.0340%" height="15" fill="rgb(214,47,5)" fg:x="604" fg:w="1"/><text x="20.8082%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="965" width="0.0340%" height="15" fill="rgb(218,159,25)" fg:x="604" fg:w="1"/><text x="20.8082%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="949" width="0.0340%" height="15" fill="rgb(215,211,28)" fg:x="604" fg:w="1"/><text x="20.8082%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="933" width="0.0340%" height="15" fill="rgb(238,59,32)" fg:x="604" fg:w="1"/><text x="20.8082%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="917" width="0.0340%" height="15" fill="rgb(226,82,3)" fg:x="604" fg:w="1"/><text x="20.8082%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="901" width="0.0340%" height="15" fill="rgb(240,164,32)" fg:x="604" fg:w="1"/><text x="20.8082%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="885" width="0.0340%" height="15" fill="rgb(232,46,7)" fg:x="604" fg:w="1"/><text x="20.8082%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="869" width="0.0340%" height="15" fill="rgb(229,129,53)" fg:x="604" fg:w="1"/><text x="20.8082%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.5582%" y="853" width="0.0340%" height="15" fill="rgb(234,188,29)" fg:x="604" fg:w="1"/><text x="20.8082%" y="863.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_Hash_node (2 samples, 0.07%)</title><rect x="20.5922%" y="1077" width="0.0681%" height="15" fill="rgb(246,141,4)" fg:x="605" fg:w="2"/><text x="20.8422%" y="1087.50"></text></g><g><title>std::__detail::_Hash_node_base::_Hash_node_base (2 samples, 0.07%)</title><rect x="20.5922%" y="1061" width="0.0681%" height="15" fill="rgb(229,23,39)" fg:x="605" fg:w="2"/><text x="20.8422%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.5922%" y="1045" width="0.0681%" height="15" fill="rgb(206,12,3)" fg:x="605" fg:w="2"/><text x="20.8422%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.5922%" y="1029" width="0.0681%" height="15" fill="rgb(252,226,20)" fg:x="605" fg:w="2"/><text x="20.8422%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.5922%" y="1013" width="0.0681%" height="15" fill="rgb(216,123,35)" fg:x="605" fg:w="2"/><text x="20.8422%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.5922%" y="997" width="0.0681%" height="15" fill="rgb(212,68,40)" fg:x="605" fg:w="2"/><text x="20.8422%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="20.5922%" y="981" width="0.0681%" height="15" fill="rgb(254,125,32)" fg:x="605" fg:w="2"/><text x="20.8422%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.6263%" y="965" width="0.0340%" height="15" fill="rgb(253,97,22)" fg:x="606" fg:w="1"/><text x="20.8763%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.6263%" y="949" width="0.0340%" height="15" fill="rgb(241,101,14)" fg:x="606" fg:w="1"/><text x="20.8763%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="20.6263%" y="933" width="0.0340%" height="15" fill="rgb(238,103,29)" fg:x="606" fg:w="1"/><text x="20.8763%" y="943.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (7 samples, 0.24%)</title><rect x="20.5242%" y="1109" width="0.2383%" height="15" fill="rgb(233,195,47)" fg:x="603" fg:w="7"/><text x="20.7742%" y="1119.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (7 samples, 0.24%)</title><rect x="20.5242%" y="1093" width="0.2383%" height="15" fill="rgb(246,218,30)" fg:x="603" fg:w="7"/><text x="20.7742%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (3 samples, 0.10%)</title><rect x="20.6603%" y="1077" width="0.1021%" height="15" fill="rgb(219,145,47)" fg:x="607" fg:w="3"/><text x="20.9103%" y="1087.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (3 samples, 0.10%)</title><rect x="20.6603%" y="1061" width="0.1021%" height="15" fill="rgb(243,12,26)" fg:x="607" fg:w="3"/><text x="20.9103%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (3 samples, 0.10%)</title><rect x="20.6603%" y="1045" width="0.1021%" height="15" fill="rgb(214,87,16)" fg:x="607" fg:w="3"/><text x="20.9103%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (3 samples, 0.10%)</title><rect x="20.6603%" y="1029" width="0.1021%" height="15" fill="rgb(208,99,42)" fg:x="607" fg:w="3"/><text x="20.9103%" y="1039.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (3 samples, 0.10%)</title><rect x="20.6603%" y="1013" width="0.1021%" height="15" fill="rgb(253,99,2)" fg:x="607" fg:w="3"/><text x="20.9103%" y="1023.50"></text></g><g><title>operator new (3 samples, 0.10%)</title><rect x="20.6603%" y="997" width="0.1021%" height="15" fill="rgb(220,168,23)" fg:x="607" fg:w="3"/><text x="20.9103%" y="1007.50"></text></g><g><title>__posix_memalign (3 samples, 0.10%)</title><rect x="20.6603%" y="981" width="0.1021%" height="15" fill="rgb(242,38,24)" fg:x="607" fg:w="3"/><text x="20.9103%" y="991.50"></text></g><g><title>malloc (3 samples, 0.10%)</title><rect x="20.6603%" y="965" width="0.1021%" height="15" fill="rgb(225,182,9)" fg:x="607" fg:w="3"/><text x="20.9103%" y="975.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="20.6603%" y="949" width="0.1021%" height="15" fill="rgb(243,178,37)" fg:x="607" fg:w="3"/><text x="20.9103%" y="959.50"></text></g><g><title>malloc_consolidate (2 samples, 0.07%)</title><rect x="20.6943%" y="933" width="0.0681%" height="15" fill="rgb(232,139,19)" fg:x="608" fg:w="2"/><text x="20.9443%" y="943.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.17%)</title><rect x="20.7624%" y="1077" width="0.1702%" height="15" fill="rgb(225,201,24)" fg:x="610" fg:w="5"/><text x="21.0124%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="20.8305%" y="1061" width="0.1021%" height="15" fill="rgb(221,47,46)" fg:x="612" fg:w="3"/><text x="21.0805%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="20.8305%" y="1045" width="0.1021%" height="15" fill="rgb(249,23,13)" fg:x="612" fg:w="3"/><text x="21.0805%" y="1055.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (65 samples, 2.21%)</title><rect x="18.7883%" y="1141" width="2.2124%" height="15" fill="rgb(219,9,5)" fg:x="552" fg:w="65"/><text x="19.0383%" y="1151.50">s..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (65 samples, 2.21%)</title><rect x="18.7883%" y="1125" width="2.2124%" height="15" fill="rgb(254,171,16)" fg:x="552" fg:w="65"/><text x="19.0383%" y="1135.50">s..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (7 samples, 0.24%)</title><rect x="20.7624%" y="1109" width="0.2383%" height="15" fill="rgb(230,171,20)" fg:x="610" fg:w="7"/><text x="21.0124%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (7 samples, 0.24%)</title><rect x="20.7624%" y="1093" width="0.2383%" height="15" fill="rgb(210,71,41)" fg:x="610" fg:w="7"/><text x="21.0124%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.07%)</title><rect x="20.9326%" y="1077" width="0.0681%" height="15" fill="rgb(206,173,20)" fg:x="615" fg:w="2"/><text x="21.1826%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.03%)</title><rect x="20.9666%" y="1061" width="0.0340%" height="15" fill="rgb(233,88,34)" fg:x="616" fg:w="1"/><text x="21.2166%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="20.9666%" y="1045" width="0.0340%" height="15" fill="rgb(223,209,46)" fg:x="616" fg:w="1"/><text x="21.2166%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="20.9666%" y="1029" width="0.0340%" height="15" fill="rgb(250,43,18)" fg:x="616" fg:w="1"/><text x="21.2166%" y="1039.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.03%)</title><rect x="21.0007%" y="1109" width="0.0340%" height="15" fill="rgb(208,13,10)" fg:x="617" fg:w="1"/><text x="21.2507%" y="1119.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.03%)</title><rect x="21.0007%" y="1093" width="0.0340%" height="15" fill="rgb(212,200,36)" fg:x="617" fg:w="1"/><text x="21.2507%" y="1103.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.03%)</title><rect x="21.0007%" y="1077" width="0.0340%" height="15" fill="rgb(225,90,30)" fg:x="617" fg:w="1"/><text x="21.2507%" y="1087.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.03%)</title><rect x="21.0007%" y="1061" width="0.0340%" height="15" fill="rgb(236,182,39)" fg:x="617" fg:w="1"/><text x="21.2507%" y="1071.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.31%)</title><rect x="21.0347%" y="1109" width="0.3063%" height="15" fill="rgb(212,144,35)" fg:x="618" fg:w="9"/><text x="21.2847%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="21.2049%" y="1093" width="0.1361%" height="15" fill="rgb(228,63,44)" fg:x="623" fg:w="4"/><text x="21.4549%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="21.2049%" y="1077" width="0.1361%" height="15" fill="rgb(228,109,6)" fg:x="623" fg:w="4"/><text x="21.4549%" y="1087.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.10%)</title><rect x="21.3410%" y="1029" width="0.1021%" height="15" fill="rgb(238,117,24)" fg:x="627" fg:w="3"/><text x="21.5910%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="21.3751%" y="1013" width="0.0681%" height="15" fill="rgb(242,26,26)" fg:x="628" fg:w="2"/><text x="21.6251%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="21.3751%" y="997" width="0.0681%" height="15" fill="rgb(221,92,48)" fg:x="628" fg:w="2"/><text x="21.6251%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.03%)</title><rect x="21.4432%" y="1029" width="0.0340%" height="15" fill="rgb(209,209,32)" fg:x="630" fg:w="1"/><text x="21.6932%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.03%)</title><rect x="21.4432%" y="1013" width="0.0340%" height="15" fill="rgb(221,70,22)" fg:x="630" fg:w="1"/><text x="21.6932%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.03%)</title><rect x="21.4432%" y="997" width="0.0340%" height="15" fill="rgb(248,145,5)" fg:x="630" fg:w="1"/><text x="21.6932%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (5 samples, 0.17%)</title><rect x="21.3410%" y="1109" width="0.1702%" height="15" fill="rgb(226,116,26)" fg:x="627" fg:w="5"/><text x="21.5910%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.17%)</title><rect x="21.3410%" y="1093" width="0.1702%" height="15" fill="rgb(244,5,17)" fg:x="627" fg:w="5"/><text x="21.5910%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5 samples, 0.17%)</title><rect x="21.3410%" y="1077" width="0.1702%" height="15" fill="rgb(252,159,33)" fg:x="627" fg:w="5"/><text x="21.5910%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.17%)</title><rect x="21.3410%" y="1061" width="0.1702%" height="15" fill="rgb(206,71,0)" fg:x="627" fg:w="5"/><text x="21.5910%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.17%)</title><rect x="21.3410%" y="1045" width="0.1702%" height="15" fill="rgb(233,118,54)" fg:x="627" fg:w="5"/><text x="21.5910%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.03%)</title><rect x="21.4772%" y="1029" width="0.0340%" height="15" fill="rgb(234,83,48)" fg:x="631" fg:w="1"/><text x="21.7272%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="1013" width="0.0340%" height="15" fill="rgb(228,3,54)" fg:x="631" fg:w="1"/><text x="21.7272%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="997" width="0.0340%" height="15" fill="rgb(226,155,13)" fg:x="631" fg:w="1"/><text x="21.7272%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="981" width="0.0340%" height="15" fill="rgb(241,28,37)" fg:x="631" fg:w="1"/><text x="21.7272%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="965" width="0.0340%" height="15" fill="rgb(233,93,10)" fg:x="631" fg:w="1"/><text x="21.7272%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="949" width="0.0340%" height="15" fill="rgb(225,113,19)" fg:x="631" fg:w="1"/><text x="21.7272%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="933" width="0.0340%" height="15" fill="rgb(241,2,18)" fg:x="631" fg:w="1"/><text x="21.7272%" y="943.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="21.4772%" y="917" width="0.0340%" height="15" fill="rgb(228,207,21)" fg:x="631" fg:w="1"/><text x="21.7272%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="901" width="0.0340%" height="15" fill="rgb(213,211,35)" fg:x="631" fg:w="1"/><text x="21.7272%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="885" width="0.0340%" height="15" fill="rgb(209,83,10)" fg:x="631" fg:w="1"/><text x="21.7272%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="869" width="0.0340%" height="15" fill="rgb(209,164,1)" fg:x="631" fg:w="1"/><text x="21.7272%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="853" width="0.0340%" height="15" fill="rgb(213,184,43)" fg:x="631" fg:w="1"/><text x="21.7272%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="837" width="0.0340%" height="15" fill="rgb(231,61,34)" fg:x="631" fg:w="1"/><text x="21.7272%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="821" width="0.0340%" height="15" fill="rgb(235,75,3)" fg:x="631" fg:w="1"/><text x="21.7272%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="21.4772%" y="805" width="0.0340%" height="15" fill="rgb(220,106,47)" fg:x="631" fg:w="1"/><text x="21.7272%" y="815.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (16 samples, 0.54%)</title><rect x="21.0007%" y="1141" width="0.5446%" height="15" fill="rgb(210,196,33)" fg:x="617" fg:w="16"/><text x="21.2507%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (16 samples, 0.54%)</title><rect x="21.0007%" y="1125" width="0.5446%" height="15" fill="rgb(229,154,42)" fg:x="617" fg:w="16"/><text x="21.2507%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.03%)</title><rect x="21.5112%" y="1109" width="0.0340%" height="15" fill="rgb(228,114,26)" fg:x="632" fg:w="1"/><text x="21.7612%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="21.5112%" y="1093" width="0.0340%" height="15" fill="rgb(208,144,1)" fg:x="632" fg:w="1"/><text x="21.7612%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="21.5112%" y="1077" width="0.0340%" height="15" fill="rgb(239,112,37)" fg:x="632" fg:w="1"/><text x="21.7612%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="21.5112%" y="1061" width="0.0340%" height="15" fill="rgb(210,96,50)" fg:x="632" fg:w="1"/><text x="21.7612%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="21.5112%" y="1045" width="0.0340%" height="15" fill="rgb(222,178,2)" fg:x="632" fg:w="1"/><text x="21.7612%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="21.5112%" y="1029" width="0.0340%" height="15" fill="rgb(226,74,18)" fg:x="632" fg:w="1"/><text x="21.7612%" y="1039.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.03%)</title><rect x="21.5453%" y="1125" width="0.0340%" height="15" fill="rgb(225,67,54)" fg:x="633" fg:w="1"/><text x="21.7953%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.03%)</title><rect x="21.5453%" y="1109" width="0.0340%" height="15" fill="rgb(251,92,32)" fg:x="633" fg:w="1"/><text x="21.7953%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="21.5453%" y="1093" width="0.0340%" height="15" fill="rgb(228,149,22)" fg:x="633" fg:w="1"/><text x="21.7953%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="21.5453%" y="1077" width="0.0340%" height="15" fill="rgb(243,54,13)" fg:x="633" fg:w="1"/><text x="21.7953%" y="1087.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="21.5793%" y="1125" width="0.0681%" height="15" fill="rgb(243,180,28)" fg:x="634" fg:w="2"/><text x="21.8293%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="21.6133%" y="1109" width="0.0340%" height="15" fill="rgb(208,167,24)" fg:x="635" fg:w="1"/><text x="21.8633%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="21.6133%" y="1093" width="0.0340%" height="15" fill="rgb(245,73,45)" fg:x="635" fg:w="1"/><text x="21.8633%" y="1103.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.37%)</title><rect x="21.6474%" y="1077" width="0.3744%" height="15" fill="rgb(237,203,48)" fg:x="636" fg:w="11"/><text x="21.8974%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.17%)</title><rect x="21.8516%" y="1061" width="0.1702%" height="15" fill="rgb(211,197,16)" fg:x="642" fg:w="5"/><text x="22.1016%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.17%)</title><rect x="21.8516%" y="1045" width="0.1702%" height="15" fill="rgb(243,99,51)" fg:x="642" fg:w="5"/><text x="22.1016%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.03%)</title><rect x="22.0218%" y="1077" width="0.0340%" height="15" fill="rgb(215,123,29)" fg:x="647" fg:w="1"/><text x="22.2718%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_remove_bucket_begin (1 samples, 0.03%)</title><rect x="22.0218%" y="1061" width="0.0340%" height="15" fill="rgb(239,186,37)" fg:x="647" fg:w="1"/><text x="22.2718%" y="1071.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.31%)</title><rect x="22.0899%" y="997" width="0.3063%" height="15" fill="rgb(252,136,39)" fg:x="649" fg:w="9"/><text x="22.3399%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="22.2600%" y="981" width="0.1361%" height="15" fill="rgb(223,213,32)" fg:x="654" fg:w="4"/><text x="22.5100%" y="991.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="22.2600%" y="965" width="0.1361%" height="15" fill="rgb(233,115,5)" fg:x="654" fg:w="4"/><text x="22.5100%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (23 samples, 0.78%)</title><rect x="21.6474%" y="1093" width="0.7828%" height="15" fill="rgb(207,226,44)" fg:x="636" fg:w="23"/><text x="21.8974%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.37%)</title><rect x="22.0558%" y="1077" width="0.3744%" height="15" fill="rgb(208,126,0)" fg:x="648" fg:w="11"/><text x="22.3058%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10 samples, 0.34%)</title><rect x="22.0899%" y="1061" width="0.3404%" height="15" fill="rgb(244,66,21)" fg:x="649" fg:w="10"/><text x="22.3399%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10 samples, 0.34%)</title><rect x="22.0899%" y="1045" width="0.3404%" height="15" fill="rgb(222,97,12)" fg:x="649" fg:w="10"/><text x="22.3399%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10 samples, 0.34%)</title><rect x="22.0899%" y="1029" width="0.3404%" height="15" fill="rgb(219,213,19)" fg:x="649" fg:w="10"/><text x="22.3399%" y="1039.50"></text></g><g><title>SaltedOutpointHasher::operator (10 samples, 0.34%)</title><rect x="22.0899%" y="1013" width="0.3404%" height="15" fill="rgb(252,169,30)" fg:x="649" fg:w="10"/><text x="22.3399%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="22.3962%" y="997" width="0.0340%" height="15" fill="rgb(206,32,51)" fg:x="658" fg:w="1"/><text x="22.6462%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="22.3962%" y="981" width="0.0340%" height="15" fill="rgb(250,172,42)" fg:x="658" fg:w="1"/><text x="22.6462%" y="991.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="22.3962%" y="965" width="0.0340%" height="15" fill="rgb(209,34,43)" fg:x="658" fg:w="1"/><text x="22.6462%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="22.3962%" y="949" width="0.0340%" height="15" fill="rgb(223,11,35)" fg:x="658" fg:w="1"/><text x="22.6462%" y="959.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="22.3962%" y="933" width="0.0340%" height="15" fill="rgb(251,219,26)" fg:x="658" fg:w="1"/><text x="22.6462%" y="943.50"></text></g><g><title>CCoinsViewCache::BatchWrite (116 samples, 3.95%)</title><rect x="18.6862%" y="1157" width="3.9483%" height="15" fill="rgb(231,119,3)" fg:x="549" fg:w="116"/><text x="18.9362%" y="1167.50">CCoi..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (32 samples, 1.09%)</title><rect x="21.5453%" y="1141" width="1.0892%" height="15" fill="rgb(216,97,11)" fg:x="633" fg:w="32"/><text x="21.7953%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (29 samples, 0.99%)</title><rect x="21.6474%" y="1125" width="0.9871%" height="15" fill="rgb(223,59,9)" fg:x="636" fg:w="29"/><text x="21.8974%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (29 samples, 0.99%)</title><rect x="21.6474%" y="1109" width="0.9871%" height="15" fill="rgb(233,93,31)" fg:x="636" fg:w="29"/><text x="21.8974%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.20%)</title><rect x="22.4302%" y="1093" width="0.2042%" height="15" fill="rgb(239,81,33)" fg:x="659" fg:w="6"/><text x="22.6802%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.20%)</title><rect x="22.4302%" y="1077" width="0.2042%" height="15" fill="rgb(213,120,34)" fg:x="659" fg:w="6"/><text x="22.6802%" y="1087.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.20%)</title><rect x="22.4302%" y="1061" width="0.2042%" height="15" fill="rgb(243,49,53)" fg:x="659" fg:w="6"/><text x="22.6802%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="22.5323%" y="1045" width="0.1021%" height="15" fill="rgb(247,216,33)" fg:x="662" fg:w="3"/><text x="22.7823%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="22.5323%" y="1029" width="0.1021%" height="15" fill="rgb(226,26,14)" fg:x="662" fg:w="3"/><text x="22.7823%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="1013" width="0.0340%" height="15" fill="rgb(215,49,53)" fg:x="664" fg:w="1"/><text x="22.8504%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="997" width="0.0340%" height="15" fill="rgb(245,162,40)" fg:x="664" fg:w="1"/><text x="22.8504%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="981" width="0.0340%" height="15" fill="rgb(229,68,17)" fg:x="664" fg:w="1"/><text x="22.8504%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="965" width="0.0340%" height="15" fill="rgb(213,182,10)" fg:x="664" fg:w="1"/><text x="22.8504%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="949" width="0.0340%" height="15" fill="rgb(245,125,30)" fg:x="664" fg:w="1"/><text x="22.8504%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="933" width="0.0340%" height="15" fill="rgb(232,202,2)" fg:x="664" fg:w="1"/><text x="22.8504%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="917" width="0.0340%" height="15" fill="rgb(237,140,51)" fg:x="664" fg:w="1"/><text x="22.8504%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="901" width="0.0340%" height="15" fill="rgb(236,157,25)" fg:x="664" fg:w="1"/><text x="22.8504%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="885" width="0.0340%" height="15" fill="rgb(219,209,0)" fg:x="664" fg:w="1"/><text x="22.8504%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="869" width="0.0340%" height="15" fill="rgb(240,116,54)" fg:x="664" fg:w="1"/><text x="22.8504%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="22.6004%" y="853" width="0.0340%" height="15" fill="rgb(216,10,36)" fg:x="664" fg:w="1"/><text x="22.8504%" y="863.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (1 samples, 0.03%)</title><rect x="22.6344%" y="1141" width="0.0340%" height="15" fill="rgb(222,72,44)" fg:x="665" fg:w="1"/><text x="22.8844%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PoolResource (1 samples, 0.03%)</title><rect x="22.6344%" y="1125" width="0.0340%" height="15" fill="rgb(232,159,9)" fg:x="665" fg:w="1"/><text x="22.8844%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (1 samples, 0.03%)</title><rect x="22.6344%" y="1109" width="0.0340%" height="15" fill="rgb(210,39,32)" fg:x="665" fg:w="1"/><text x="22.8844%" y="1119.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="22.6344%" y="1093" width="0.0340%" height="15" fill="rgb(216,194,45)" fg:x="665" fg:w="1"/><text x="22.8844%" y="1103.50"></text></g><g><title>__posix_memalign (1 samples, 0.03%)</title><rect x="22.6344%" y="1077" width="0.0340%" height="15" fill="rgb(218,18,35)" fg:x="665" fg:w="1"/><text x="22.8844%" y="1087.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="22.6344%" y="1061" width="0.0340%" height="15" fill="rgb(207,83,51)" fg:x="665" fg:w="1"/><text x="22.8844%" y="1071.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="22.6344%" y="1045" width="0.0340%" height="15" fill="rgb(225,63,43)" fg:x="665" fg:w="1"/><text x="22.8844%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (1 samples, 0.03%)</title><rect x="22.6685%" y="1141" width="0.0340%" height="15" fill="rgb(207,57,36)" fg:x="666" fg:w="1"/><text x="22.9185%" y="1151.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="22.6685%" y="1125" width="0.0340%" height="15" fill="rgb(216,99,33)" fg:x="666" fg:w="1"/><text x="22.9185%" y="1135.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="22.6685%" y="1109" width="0.0340%" height="15" fill="rgb(225,42,16)" fg:x="666" fg:w="1"/><text x="22.9185%" y="1119.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.03%)</title><rect x="22.6685%" y="1093" width="0.0340%" height="15" fill="rgb(220,201,45)" fg:x="666" fg:w="1"/><text x="22.9185%" y="1103.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="22.6685%" y="1077" width="0.0340%" height="15" fill="rgb(225,33,4)" fg:x="666" fg:w="1"/><text x="22.9185%" y="1087.50"></text></g><g><title>CSHA512::Finalize (3 samples, 0.10%)</title><rect x="22.7025%" y="1077" width="0.1021%" height="15" fill="rgb(224,33,50)" fg:x="667" fg:w="3"/><text x="22.9525%" y="1087.50"></text></g><g><title>CSHA512::Write (3 samples, 0.10%)</title><rect x="22.7025%" y="1061" width="0.1021%" height="15" fill="rgb(246,198,51)" fg:x="667" fg:w="3"/><text x="22.9525%" y="1071.50"></text></g><g><title>Transform (3 samples, 0.10%)</title><rect x="22.7025%" y="1045" width="0.1021%" height="15" fill="rgb(205,22,4)" fg:x="667" fg:w="3"/><text x="22.9525%" y="1055.50"></text></g><g><title>Round (2 samples, 0.07%)</title><rect x="22.7366%" y="1029" width="0.0681%" height="15" fill="rgb(206,3,8)" fg:x="668" fg:w="2"/><text x="22.9866%" y="1039.50"></text></g><g><title>CSHA512::Write (1 samples, 0.03%)</title><rect x="22.8046%" y="1077" width="0.0340%" height="15" fill="rgb(251,23,15)" fg:x="670" fg:w="1"/><text x="23.0546%" y="1087.50"></text></g><g><title>CSHA512::Write (1 samples, 0.03%)</title><rect x="22.8046%" y="1061" width="0.0340%" height="15" fill="rgb(252,88,28)" fg:x="670" fg:w="1"/><text x="23.0546%" y="1071.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (7 samples, 0.24%)</title><rect x="22.6344%" y="1157" width="0.2383%" height="15" fill="rgb(212,127,14)" fg:x="665" fg:w="7"/><text x="22.8844%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::SaltedOutpointHasher (5 samples, 0.17%)</title><rect x="22.7025%" y="1141" width="0.1702%" height="15" fill="rgb(247,145,37)" fg:x="667" fg:w="5"/><text x="22.9525%" y="1151.50"></text></g><g><title>FastRandomContext::rand64 (5 samples, 0.17%)</title><rect x="22.7025%" y="1125" width="0.1702%" height="15" fill="rgb(209,117,53)" fg:x="667" fg:w="5"/><text x="22.9525%" y="1135.50"></text></g><g><title>FastRandomContext::RandomSeed (5 samples, 0.17%)</title><rect x="22.7025%" y="1109" width="0.1702%" height="15" fill="rgb(212,90,42)" fg:x="667" fg:w="5"/><text x="22.9525%" y="1119.50"></text></g><g><title>GetRandHash (5 samples, 0.17%)</title><rect x="22.7025%" y="1093" width="0.1702%" height="15" fill="rgb(218,164,37)" fg:x="667" fg:w="5"/><text x="22.9525%" y="1103.50"></text></g><g><title>Transform (1 samples, 0.03%)</title><rect x="22.8387%" y="1077" width="0.0340%" height="15" fill="rgb(246,65,34)" fg:x="671" fg:w="1"/><text x="23.0887%" y="1087.50"></text></g><g><title>Round (1 samples, 0.03%)</title><rect x="22.8387%" y="1061" width="0.0340%" height="15" fill="rgb(231,100,33)" fg:x="671" fg:w="1"/><text x="23.0887%" y="1071.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.20%)</title><rect x="22.8727%" y="1157" width="0.2042%" height="15" fill="rgb(228,126,14)" fg:x="672" fg:w="6"/><text x="23.1227%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="23.0088%" y="1141" width="0.0681%" height="15" fill="rgb(215,173,21)" fg:x="676" fg:w="2"/><text x="23.2588%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="23.0088%" y="1125" width="0.0681%" height="15" fill="rgb(210,6,40)" fg:x="676" fg:w="2"/><text x="23.2588%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.07%)</title><rect x="23.0769%" y="1157" width="0.0681%" height="15" fill="rgb(212,48,18)" fg:x="678" fg:w="2"/><text x="23.3269%" y="1167.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="23.1450%" y="1141" width="0.0340%" height="15" fill="rgb(230,214,11)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="23.1450%" y="1125" width="0.0340%" height="15" fill="rgb(254,105,39)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1135.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="23.1450%" y="1109" width="0.0340%" height="15" fill="rgb(245,158,5)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="23.1450%" y="1093" width="0.0340%" height="15" fill="rgb(249,208,11)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.03%)</title><rect x="23.1450%" y="1077" width="0.0340%" height="15" fill="rgb(210,39,28)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1087.50"></text></g><g><title>CCoinsCacheEntry::CCoinsCacheEntry (1 samples, 0.03%)</title><rect x="23.1450%" y="1061" width="0.0340%" height="15" fill="rgb(211,56,53)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1071.50"></text></g><g><title>Coin::Coin (1 samples, 0.03%)</title><rect x="23.1450%" y="1045" width="0.0340%" height="15" fill="rgb(226,201,30)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="23.1450%" y="1029" width="0.0340%" height="15" fill="rgb(239,101,34)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1039.50"></text></g><g><title>CTxOut::SetNull (1 samples, 0.03%)</title><rect x="23.1450%" y="1013" width="0.0340%" height="15" fill="rgb(226,209,5)" fg:x="680" fg:w="1"/><text x="23.3950%" y="1023.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.07%)</title><rect x="23.1450%" y="1157" width="0.0681%" height="15" fill="rgb(250,105,47)" fg:x="680" fg:w="2"/><text x="23.3950%" y="1167.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="23.1790%" y="1141" width="0.0340%" height="15" fill="rgb(230,72,3)" fg:x="681" fg:w="1"/><text x="23.4290%" y="1151.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (1 samples, 0.03%)</title><rect x="23.1790%" y="1125" width="0.0340%" height="15" fill="rgb(232,218,39)" fg:x="681" fg:w="1"/><text x="23.4290%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.03%)</title><rect x="23.1790%" y="1109" width="0.0340%" height="15" fill="rgb(248,166,6)" fg:x="681" fg:w="1"/><text x="23.4290%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.03%)</title><rect x="23.1790%" y="1093" width="0.0340%" height="15" fill="rgb(247,89,20)" fg:x="681" fg:w="1"/><text x="23.4290%" y="1103.50"></text></g><g><title>CCoinsViewCache::Flush (134 samples, 4.56%)</title><rect x="18.6862%" y="1173" width="4.5609%" height="15" fill="rgb(248,130,54)" fg:x="549" fg:w="134"/><text x="18.9362%" y="1183.50">CCoin..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (1 samples, 0.03%)</title><rect x="23.2131%" y="1157" width="0.0340%" height="15" fill="rgb(234,196,4)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.03%)</title><rect x="23.2131%" y="1141" width="0.0340%" height="15" fill="rgb(250,143,31)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (1 samples, 0.03%)</title><rect x="23.2131%" y="1125" width="0.0340%" height="15" fill="rgb(211,110,34)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.03%)</title><rect x="23.2131%" y="1109" width="0.0340%" height="15" fill="rgb(215,124,48)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1119.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.03%)</title><rect x="23.2131%" y="1093" width="0.0340%" height="15" fill="rgb(216,46,13)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1103.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.03%)</title><rect x="23.2131%" y="1077" width="0.0340%" height="15" fill="rgb(205,184,25)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1087.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.03%)</title><rect x="23.2131%" y="1061" width="0.0340%" height="15" fill="rgb(228,1,10)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1071.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.03%)</title><rect x="23.2131%" y="1045" width="0.0340%" height="15" fill="rgb(213,116,27)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1055.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.03%)</title><rect x="23.2131%" y="1029" width="0.0340%" height="15" fill="rgb(241,95,50)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1039.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.03%)</title><rect x="23.2131%" y="1013" width="0.0340%" height="15" fill="rgb(238,48,32)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1023.50"></text></g><g><title>Coin::~Coin (1 samples, 0.03%)</title><rect x="23.2131%" y="997" width="0.0340%" height="15" fill="rgb(235,113,49)" fg:x="682" fg:w="1"/><text x="23.4631%" y="1007.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.03%)</title><rect x="23.2131%" y="981" width="0.0340%" height="15" fill="rgb(205,127,43)" fg:x="682" fg:w="1"/><text x="23.4631%" y="991.50"></text></g><g><title>CScript::~CScript (1 samples, 0.03%)</title><rect x="23.2131%" y="965" width="0.0340%" height="15" fill="rgb(250,162,2)" fg:x="682" fg:w="1"/><text x="23.4631%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.03%)</title><rect x="23.2131%" y="949" width="0.0340%" height="15" fill="rgb(220,13,41)" fg:x="682" fg:w="1"/><text x="23.4631%" y="959.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.03%)</title><rect x="23.2471%" y="1173" width="0.0340%" height="15" fill="rgb(249,221,25)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1183.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1157" width="0.0340%" height="15" fill="rgb(215,208,19)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1167.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1141" width="0.0340%" height="15" fill="rgb(236,175,2)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1125" width="0.0340%" height="15" fill="rgb(241,52,2)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1135.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1109" width="0.0340%" height="15" fill="rgb(248,140,14)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1119.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1093" width="0.0340%" height="15" fill="rgb(253,22,42)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1103.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1077" width="0.0340%" height="15" fill="rgb(234,61,47)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1061" width="0.0340%" height="15" fill="rgb(208,226,15)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1045" width="0.0340%" height="15" fill="rgb(217,221,4)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1029" width="0.0340%" height="15" fill="rgb(212,174,34)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1039.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="23.2471%" y="1013" width="0.0340%" height="15" fill="rgb(253,83,4)" fg:x="683" fg:w="1"/><text x="23.4971%" y="1023.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.03%)</title><rect x="23.4513%" y="1141" width="0.0340%" height="15" fill="rgb(250,195,49)" fg:x="689" fg:w="1"/><text x="23.7013%" y="1151.50"></text></g><g><title>ReadLE64 (1 samples, 0.03%)</title><rect x="23.4513%" y="1125" width="0.0340%" height="15" fill="rgb(241,192,25)" fg:x="689" fg:w="1"/><text x="23.7013%" y="1135.50"></text></g><g><title>SipHashUint256 (1 samples, 0.03%)</title><rect x="23.4513%" y="1109" width="0.0340%" height="15" fill="rgb(208,124,10)" fg:x="689" fg:w="1"/><text x="23.7013%" y="1119.50"></text></g><g><title>SipHashUint256 (7 samples, 0.24%)</title><rect x="23.2811%" y="1157" width="0.2383%" height="15" fill="rgb(222,33,0)" fg:x="684" fg:w="7"/><text x="23.5311%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.4854%" y="1141" width="0.0340%" height="15" fill="rgb(234,209,28)" fg:x="690" fg:w="1"/><text x="23.7354%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.4854%" y="1125" width="0.0340%" height="15" fill="rgb(224,11,23)" fg:x="690" fg:w="1"/><text x="23.7354%" y="1135.50"></text></g><g><title>SerialTaskRunner::MaybeScheduleProcessQueue (1 samples, 0.03%)</title><rect x="23.5194%" y="1141" width="0.0340%" height="15" fill="rgb(232,99,1)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1151.50"></text></g><g><title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="23.5194%" y="1125" width="0.0340%" height="15" fill="rgb(237,95,45)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5194%" y="1109" width="0.0340%" height="15" fill="rgb(208,109,11)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5194%" y="1093" width="0.0340%" height="15" fill="rgb(216,190,48)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5194%" y="1077" width="0.0340%" height="15" fill="rgb(251,171,36)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5194%" y="1061" width="0.0340%" height="15" fill="rgb(230,62,22)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5194%" y="1045" width="0.0340%" height="15" fill="rgb(225,114,35)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5194%" y="1029" width="0.0340%" height="15" fill="rgb(215,118,42)" fg:x="691" fg:w="1"/><text x="23.7694%" y="1039.50"></text></g><g><title>std::function&lt;void ()&gt;::~function (1 samples, 0.03%)</title><rect x="23.5534%" y="1141" width="0.0340%" height="15" fill="rgb(243,119,21)" fg:x="692" fg:w="1"/><text x="23.8034%" y="1151.50"></text></g><g><title>std::_Function_base::~_Function_base (1 samples, 0.03%)</title><rect x="23.5534%" y="1125" width="0.0340%" height="15" fill="rgb(252,177,53)" fg:x="692" fg:w="1"/><text x="23.8034%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="23.5875%" y="933" width="0.0340%" height="15" fill="rgb(237,209,29)" fg:x="693" fg:w="1"/><text x="23.8375%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5875%" y="917" width="0.0340%" height="15" fill="rgb(212,65,23)" fg:x="693" fg:w="1"/><text x="23.8375%" y="927.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="23.5875%" y="901" width="0.0340%" height="15" fill="rgb(230,222,46)" fg:x="693" fg:w="1"/><text x="23.8375%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5875%" y="885" width="0.0340%" height="15" fill="rgb(215,135,32)" fg:x="693" fg:w="1"/><text x="23.8375%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.5875%" y="869" width="0.0340%" height="15" fill="rgb(246,101,22)" fg:x="693" fg:w="1"/><text x="23.8375%" y="879.50"></text></g><g><title>BCLog::Logger::LogPrintStr (2 samples, 0.07%)</title><rect x="23.5875%" y="1125" width="0.0681%" height="15" fill="rgb(206,107,13)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (2 samples, 0.07%)</title><rect x="23.5875%" y="1109" width="0.0681%" height="15" fill="rgb(250,100,44)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1119.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (2 samples, 0.07%)</title><rect x="23.5875%" y="1093" width="0.0681%" height="15" fill="rgb(231,147,38)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1103.50"></text></g><g><title>_IO_fwrite (2 samples, 0.07%)</title><rect x="23.5875%" y="1077" width="0.0681%" height="15" fill="rgb(229,8,40)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1087.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="23.5875%" y="1061" width="0.0681%" height="15" fill="rgb(221,135,30)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1071.50"></text></g><g><title>new_do_write (2 samples, 0.07%)</title><rect x="23.5875%" y="1045" width="0.0681%" height="15" fill="rgb(249,193,18)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1055.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="23.5875%" y="1029" width="0.0681%" height="15" fill="rgb(209,133,39)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1039.50"></text></g><g><title>__GI___libc_write (2 samples, 0.07%)</title><rect x="23.5875%" y="1013" width="0.0681%" height="15" fill="rgb(232,100,14)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="23.5875%" y="997" width="0.0681%" height="15" fill="rgb(224,185,1)" fg:x="693" fg:w="2"/><text x="23.8375%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="23.5875%" y="981" width="0.0681%" height="15" fill="rgb(223,139,8)" fg:x="693" fg:w="2"/><text x="23.8375%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="23.5875%" y="965" width="0.0681%" height="15" fill="rgb(232,213,38)" fg:x="693" fg:w="2"/><text x="23.8375%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="23.5875%" y="949" width="0.0681%" height="15" fill="rgb(207,94,22)" fg:x="693" fg:w="2"/><text x="23.8375%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="23.6215%" y="933" width="0.0340%" height="15" fill="rgb(219,183,54)" fg:x="694" fg:w="1"/><text x="23.8715%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, unsigned int, unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.6555%" y="1125" width="0.0340%" height="15" fill="rgb(216,185,54)" fg:x="695" fg:w="1"/><text x="23.9055%" y="1135.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.03%)</title><rect x="23.6555%" y="1109" width="0.0340%" height="15" fill="rgb(254,217,39)" fg:x="695" fg:w="1"/><text x="23.9055%" y="1119.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (1 samples, 0.03%)</title><rect x="23.6555%" y="1093" width="0.0340%" height="15" fill="rgb(240,178,23)" fg:x="695" fg:w="1"/><text x="23.9055%" y="1103.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_streambuf (1 samples, 0.03%)</title><rect x="23.6555%" y="1077" width="0.0340%" height="15" fill="rgb(218,11,47)" fg:x="695" fg:w="1"/><text x="23.9055%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::replace (1 samples, 0.03%)</title><rect x="23.6555%" y="1061" width="0.0340%" height="15" fill="rgb(218,51,51)" fg:x="695" fg:w="1"/><text x="23.9055%" y="1071.50"></text></g><g><title>ValidationSignals::MempoolTransactionsRemovedForBlock (6 samples, 0.20%)</title><rect x="23.5194%" y="1157" width="0.2042%" height="15" fill="rgb(238,126,27)" fg:x="691" fg:w="6"/><text x="23.7694%" y="1167.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, unsigned int, unsigned long&gt; (4 samples, 0.14%)</title><rect x="23.5875%" y="1141" width="0.1361%" height="15" fill="rgb(249,202,22)" fg:x="693" fg:w="4"/><text x="23.8375%" y="1151.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, unsigned int, unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.6896%" y="1125" width="0.0340%" height="15" fill="rgb(254,195,49)" fg:x="696" fg:w="1"/><text x="23.9396%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, unsigned int, unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.6896%" y="1109" width="0.0340%" height="15" fill="rgb(208,123,14)" fg:x="696" fg:w="1"/><text x="23.9396%" y="1119.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.03%)</title><rect x="23.6896%" y="1093" width="0.0340%" height="15" fill="rgb(224,200,8)" fg:x="696" fg:w="1"/><text x="23.9396%" y="1103.50"></text></g><g><title>CTxMemPool::removeForBlock (15 samples, 0.51%)</title><rect x="23.2811%" y="1173" width="0.5106%" height="15" fill="rgb(217,61,36)" fg:x="684" fg:w="15"/><text x="23.5311%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (2 samples, 0.07%)</title><rect x="23.7236%" y="1157" width="0.0681%" height="15" fill="rgb(206,35,45)" fg:x="697" fg:w="2"/><text x="23.9736%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (2 samples, 0.07%)</title><rect x="23.7236%" y="1141" width="0.0681%" height="15" fill="rgb(217,65,33)" fg:x="697" fg:w="2"/><text x="23.9736%" y="1151.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (2 samples, 0.07%)</title><rect x="23.7236%" y="1125" width="0.0681%" height="15" fill="rgb(222,158,48)" fg:x="697" fg:w="2"/><text x="23.9736%" y="1135.50"></text></g><g><title>SipHashUint256 (2 samples, 0.07%)</title><rect x="23.7236%" y="1109" width="0.0681%" height="15" fill="rgb(254,2,54)" fg:x="697" fg:w="2"/><text x="23.9736%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.7577%" y="1093" width="0.0340%" height="15" fill="rgb(250,143,38)" fg:x="698" fg:w="1"/><text x="24.0077%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.7577%" y="1077" width="0.0340%" height="15" fill="rgb(248,25,0)" fg:x="698" fg:w="1"/><text x="24.0077%" y="1087.50"></text></g><g><title>AddCoins (2 samples, 0.07%)</title><rect x="23.7917%" y="1141" width="0.0681%" height="15" fill="rgb(206,152,27)" fg:x="699" fg:w="2"/><text x="24.0417%" y="1151.50"></text></g><g><title>Coin::Coin (2 samples, 0.07%)</title><rect x="23.7917%" y="1125" width="0.0681%" height="15" fill="rgb(240,77,30)" fg:x="699" fg:w="2"/><text x="24.0417%" y="1135.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.07%)</title><rect x="23.7917%" y="1109" width="0.0681%" height="15" fill="rgb(231,5,3)" fg:x="699" fg:w="2"/><text x="24.0417%" y="1119.50"></text></g><g><title>CScript::CScript (2 samples, 0.07%)</title><rect x="23.7917%" y="1093" width="0.0681%" height="15" fill="rgb(207,226,32)" fg:x="699" fg:w="2"/><text x="24.0417%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.07%)</title><rect x="23.7917%" y="1077" width="0.0681%" height="15" fill="rgb(222,207,47)" fg:x="699" fg:w="2"/><text x="24.0417%" y="1087.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.07%)</title><rect x="23.7917%" y="1061" width="0.0681%" height="15" fill="rgb(229,115,45)" fg:x="699" fg:w="2"/><text x="24.0417%" y="1071.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.03%)</title><rect x="23.8598%" y="1061" width="0.0340%" height="15" fill="rgb(224,191,6)" fg:x="701" fg:w="1"/><text x="24.1098%" y="1071.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="23.8598%" y="1045" width="0.0340%" height="15" fill="rgb(230,227,24)" fg:x="701" fg:w="1"/><text x="24.1098%" y="1055.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="23.8598%" y="1029" width="0.0340%" height="15" fill="rgb(228,80,19)" fg:x="701" fg:w="1"/><text x="24.1098%" y="1039.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="23.8598%" y="1013" width="0.0340%" height="15" fill="rgb(247,229,0)" fg:x="701" fg:w="1"/><text x="24.1098%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="23.8598%" y="997" width="0.0340%" height="15" fill="rgb(237,194,15)" fg:x="701" fg:w="1"/><text x="24.1098%" y="1007.50"></text></g><g><title>AddCoins (1 samples, 0.03%)</title><rect x="23.8938%" y="981" width="0.0340%" height="15" fill="rgb(219,203,20)" fg:x="702" fg:w="1"/><text x="24.1438%" y="991.50"></text></g><g><title>Coin::Coin (1 samples, 0.03%)</title><rect x="23.8938%" y="965" width="0.0340%" height="15" fill="rgb(234,128,8)" fg:x="702" fg:w="1"/><text x="24.1438%" y="975.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="23.9278%" y="981" width="0.0681%" height="15" fill="rgb(248,202,8)" fg:x="703" fg:w="2"/><text x="24.1778%" y="991.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.9619%" y="965" width="0.0340%" height="15" fill="rgb(206,104,37)" fg:x="704" fg:w="1"/><text x="24.2119%" y="975.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="23.9619%" y="949" width="0.0340%" height="15" fill="rgb(223,8,27)" fg:x="704" fg:w="1"/><text x="24.2119%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.17%)</title><rect x="23.8598%" y="1077" width="0.1702%" height="15" fill="rgb(216,217,28)" fg:x="701" fg:w="5"/><text x="24.1098%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.14%)</title><rect x="23.8938%" y="1061" width="0.1361%" height="15" fill="rgb(249,199,1)" fg:x="702" fg:w="4"/><text x="24.1438%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.14%)</title><rect x="23.8938%" y="1045" width="0.1361%" height="15" fill="rgb(240,85,17)" fg:x="702" fg:w="4"/><text x="24.1438%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.14%)</title><rect x="23.8938%" y="1029" width="0.1361%" height="15" fill="rgb(206,108,45)" fg:x="702" fg:w="4"/><text x="24.1438%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.14%)</title><rect x="23.8938%" y="1013" width="0.1361%" height="15" fill="rgb(245,210,41)" fg:x="702" fg:w="4"/><text x="24.1438%" y="1023.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.14%)</title><rect x="23.8938%" y="997" width="0.1361%" height="15" fill="rgb(206,13,37)" fg:x="702" fg:w="4"/><text x="24.1438%" y="1007.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="23.9959%" y="981" width="0.0340%" height="15" fill="rgb(250,61,18)" fg:x="705" fg:w="1"/><text x="24.2459%" y="991.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.10%)</title><rect x="24.0300%" y="1061" width="0.1021%" height="15" fill="rgb(235,172,48)" fg:x="706" fg:w="3"/><text x="24.2800%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="24.0980%" y="1045" width="0.0340%" height="15" fill="rgb(249,201,17)" fg:x="708" fg:w="1"/><text x="24.3480%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="24.0980%" y="1029" width="0.0340%" height="15" fill="rgb(219,208,6)" fg:x="708" fg:w="1"/><text x="24.3480%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.03%)</title><rect x="24.1321%" y="1061" width="0.0340%" height="15" fill="rgb(248,31,23)" fg:x="709" fg:w="1"/><text x="24.3821%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="24.1321%" y="1045" width="0.0340%" height="15" fill="rgb(245,15,42)" fg:x="709" fg:w="1"/><text x="24.3821%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="24.1321%" y="1029" width="0.0340%" height="15" fill="rgb(222,217,39)" fg:x="709" fg:w="1"/><text x="24.3821%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="24.1321%" y="1013" width="0.0340%" height="15" fill="rgb(210,219,27)" fg:x="709" fg:w="1"/><text x="24.3821%" y="1023.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="24.1321%" y="997" width="0.0340%" height="15" fill="rgb(252,166,36)" fg:x="709" fg:w="1"/><text x="24.3821%" y="1007.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="24.1321%" y="981" width="0.0340%" height="15" fill="rgb(245,132,34)" fg:x="709" fg:w="1"/><text x="24.3821%" y="991.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="24.1321%" y="965" width="0.0340%" height="15" fill="rgb(236,54,3)" fg:x="709" fg:w="1"/><text x="24.3821%" y="975.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="24.1321%" y="949" width="0.0340%" height="15" fill="rgb(241,173,43)" fg:x="709" fg:w="1"/><text x="24.3821%" y="959.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.14%)</title><rect x="24.1661%" y="981" width="0.1361%" height="15" fill="rgb(215,190,9)" fg:x="710" fg:w="4"/><text x="24.4161%" y="991.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="24.2682%" y="965" width="0.0340%" height="15" fill="rgb(242,101,16)" fg:x="713" fg:w="1"/><text x="24.5182%" y="975.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="24.2682%" y="949" width="0.0340%" height="15" fill="rgb(223,190,21)" fg:x="713" fg:w="1"/><text x="24.5182%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (10 samples, 0.34%)</title><rect x="24.0300%" y="1077" width="0.3404%" height="15" fill="rgb(215,228,25)" fg:x="706" fg:w="10"/><text x="24.2800%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (6 samples, 0.20%)</title><rect x="24.1661%" y="1061" width="0.2042%" height="15" fill="rgb(225,36,22)" fg:x="710" fg:w="6"/><text x="24.4161%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (6 samples, 0.20%)</title><rect x="24.1661%" y="1045" width="0.2042%" height="15" fill="rgb(251,106,46)" fg:x="710" fg:w="6"/><text x="24.4161%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.20%)</title><rect x="24.1661%" y="1029" width="0.2042%" height="15" fill="rgb(208,90,1)" fg:x="710" fg:w="6"/><text x="24.4161%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.20%)</title><rect x="24.1661%" y="1013" width="0.2042%" height="15" fill="rgb(243,10,4)" fg:x="710" fg:w="6"/><text x="24.4161%" y="1023.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.20%)</title><rect x="24.1661%" y="997" width="0.2042%" height="15" fill="rgb(212,137,27)" fg:x="710" fg:w="6"/><text x="24.4161%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (2 samples, 0.07%)</title><rect x="24.3022%" y="981" width="0.0681%" height="15" fill="rgb(231,220,49)" fg:x="714" fg:w="2"/><text x="24.5522%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (2 samples, 0.07%)</title><rect x="24.3022%" y="965" width="0.0681%" height="15" fill="rgb(237,96,20)" fg:x="714" fg:w="2"/><text x="24.5522%" y="975.50"></text></g><g><title>AddCoins (2 samples, 0.07%)</title><rect x="24.3703%" y="1061" width="0.0681%" height="15" fill="rgb(239,229,30)" fg:x="716" fg:w="2"/><text x="24.6203%" y="1071.50"></text></g><g><title>Coin::Coin (2 samples, 0.07%)</title><rect x="24.3703%" y="1045" width="0.0681%" height="15" fill="rgb(219,65,33)" fg:x="716" fg:w="2"/><text x="24.6203%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.07%)</title><rect x="24.3703%" y="1029" width="0.0681%" height="15" fill="rgb(243,134,7)" fg:x="716" fg:w="2"/><text x="24.6203%" y="1039.50"></text></g><g><title>CScript::CScript (2 samples, 0.07%)</title><rect x="24.3703%" y="1013" width="0.0681%" height="15" fill="rgb(216,177,54)" fg:x="716" fg:w="2"/><text x="24.6203%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.07%)</title><rect x="24.3703%" y="997" width="0.0681%" height="15" fill="rgb(211,160,20)" fg:x="716" fg:w="2"/><text x="24.6203%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="24.4044%" y="981" width="0.0340%" height="15" fill="rgb(239,85,39)" fg:x="717" fg:w="1"/><text x="24.6544%" y="991.50"></text></g><g><title>CCoinsViewCache::AddCoin (18 samples, 0.61%)</title><rect x="23.8598%" y="1141" width="0.6127%" height="15" fill="rgb(232,125,22)" fg:x="701" fg:w="18"/><text x="24.1098%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (18 samples, 0.61%)</title><rect x="23.8598%" y="1125" width="0.6127%" height="15" fill="rgb(244,57,34)" fg:x="701" fg:w="18"/><text x="24.1098%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (18 samples, 0.61%)</title><rect x="23.8598%" y="1109" width="0.6127%" height="15" fill="rgb(214,203,32)" fg:x="701" fg:w="18"/><text x="24.1098%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (18 samples, 0.61%)</title><rect x="23.8598%" y="1093" width="0.6127%" height="15" fill="rgb(207,58,43)" fg:x="701" fg:w="18"/><text x="24.1098%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.10%)</title><rect x="24.3703%" y="1077" width="0.1021%" height="15" fill="rgb(215,193,15)" fg:x="716" fg:w="3"/><text x="24.6203%" y="1087.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="24.4384%" y="1061" width="0.0340%" height="15" fill="rgb(232,15,44)" fg:x="718" fg:w="1"/><text x="24.6884%" y="1071.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="24.4384%" y="1045" width="0.0340%" height="15" fill="rgb(212,3,48)" fg:x="718" fg:w="1"/><text x="24.6884%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="24.4384%" y="1029" width="0.0340%" height="15" fill="rgb(218,128,7)" fg:x="718" fg:w="1"/><text x="24.6884%" y="1039.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="24.4384%" y="1013" width="0.0340%" height="15" fill="rgb(226,216,39)" fg:x="718" fg:w="1"/><text x="24.6884%" y="1023.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="24.4384%" y="997" width="0.0340%" height="15" fill="rgb(243,47,51)" fg:x="718" fg:w="1"/><text x="24.6884%" y="1007.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.03%)</title><rect x="24.4384%" y="981" width="0.0340%" height="15" fill="rgb(241,183,40)" fg:x="718" fg:w="1"/><text x="24.6884%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4384%" y="965" width="0.0340%" height="15" fill="rgb(231,217,32)" fg:x="718" fg:w="1"/><text x="24.6884%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4384%" y="949" width="0.0340%" height="15" fill="rgb(229,61,38)" fg:x="718" fg:w="1"/><text x="24.6884%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4384%" y="933" width="0.0340%" height="15" fill="rgb(225,210,5)" fg:x="718" fg:w="1"/><text x="24.6884%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4384%" y="917" width="0.0340%" height="15" fill="rgb(231,79,45)" fg:x="718" fg:w="1"/><text x="24.6884%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4384%" y="901" width="0.0340%" height="15" fill="rgb(224,100,7)" fg:x="718" fg:w="1"/><text x="24.6884%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4384%" y="885" width="0.0340%" height="15" fill="rgb(241,198,18)" fg:x="718" fg:w="1"/><text x="24.6884%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4384%" y="869" width="0.0340%" height="15" fill="rgb(252,97,53)" fg:x="718" fg:w="1"/><text x="24.6884%" y="879.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.03%)</title><rect x="24.4724%" y="1077" width="0.0340%" height="15" fill="rgb(220,88,7)" fg:x="719" fg:w="1"/><text x="24.7224%" y="1087.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="24.4724%" y="1061" width="0.0340%" height="15" fill="rgb(213,176,14)" fg:x="719" fg:w="1"/><text x="24.7224%" y="1071.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="24.4724%" y="1045" width="0.0340%" height="15" fill="rgb(246,73,7)" fg:x="719" fg:w="1"/><text x="24.7224%" y="1055.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.03%)</title><rect x="24.4724%" y="1029" width="0.0340%" height="15" fill="rgb(245,64,36)" fg:x="719" fg:w="1"/><text x="24.7224%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="1013" width="0.0340%" height="15" fill="rgb(245,80,10)" fg:x="719" fg:w="1"/><text x="24.7224%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="997" width="0.0340%" height="15" fill="rgb(232,107,50)" fg:x="719" fg:w="1"/><text x="24.7224%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="981" width="0.0340%" height="15" fill="rgb(253,3,0)" fg:x="719" fg:w="1"/><text x="24.7224%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="965" width="0.0340%" height="15" fill="rgb(212,99,53)" fg:x="719" fg:w="1"/><text x="24.7224%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="949" width="0.0340%" height="15" fill="rgb(249,111,54)" fg:x="719" fg:w="1"/><text x="24.7224%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="933" width="0.0340%" height="15" fill="rgb(249,55,30)" fg:x="719" fg:w="1"/><text x="24.7224%" y="943.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="24.4724%" y="917" width="0.0340%" height="15" fill="rgb(237,47,42)" fg:x="719" fg:w="1"/><text x="24.7224%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="901" width="0.0340%" height="15" fill="rgb(211,20,18)" fg:x="719" fg:w="1"/><text x="24.7224%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="885" width="0.0340%" height="15" fill="rgb(231,203,46)" fg:x="719" fg:w="1"/><text x="24.7224%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="869" width="0.0340%" height="15" fill="rgb(237,142,3)" fg:x="719" fg:w="1"/><text x="24.7224%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="24.4724%" y="853" width="0.0340%" height="15" fill="rgb(241,107,1)" fg:x="719" fg:w="1"/><text x="24.7224%" y="863.50"></text></g><g><title>[[fat]] (1 samples, 0.03%)</title><rect x="24.4724%" y="837" width="0.0340%" height="15" fill="rgb(229,83,13)" fg:x="719" fg:w="1"/><text x="24.7224%" y="847.50"></text></g><g><title>Coin::Coin (2 samples, 0.07%)</title><rect x="24.4724%" y="1141" width="0.0681%" height="15" fill="rgb(241,91,40)" fg:x="719" fg:w="2"/><text x="24.7224%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.07%)</title><rect x="24.4724%" y="1125" width="0.0681%" height="15" fill="rgb(225,3,45)" fg:x="719" fg:w="2"/><text x="24.7224%" y="1135.50"></text></g><g><title>CScript::CScript (2 samples, 0.07%)</title><rect x="24.4724%" y="1109" width="0.0681%" height="15" fill="rgb(244,223,14)" fg:x="719" fg:w="2"/><text x="24.7224%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.07%)</title><rect x="24.4724%" y="1093" width="0.0681%" height="15" fill="rgb(224,124,37)" fg:x="719" fg:w="2"/><text x="24.7224%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="24.5065%" y="1077" width="0.0340%" height="15" fill="rgb(251,171,30)" fg:x="720" fg:w="1"/><text x="24.7565%" y="1087.50"></text></g><g><title>SipHashUint256Extra (11 samples, 0.37%)</title><rect x="24.5405%" y="1141" width="0.3744%" height="15" fill="rgb(236,46,54)" fg:x="721" fg:w="11"/><text x="24.7905%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="24.7788%" y="1125" width="0.1361%" height="15" fill="rgb(245,213,5)" fg:x="728" fg:w="4"/><text x="25.0288%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="24.7788%" y="1109" width="0.1361%" height="15" fill="rgb(230,144,27)" fg:x="728" fg:w="4"/><text x="25.0288%" y="1119.50"></text></g><g><title>AddCoins (34 samples, 1.16%)</title><rect x="23.7917%" y="1157" width="1.1572%" height="15" fill="rgb(220,86,6)" fg:x="699" fg:w="34"/><text x="24.0417%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="24.9149%" y="1141" width="0.0340%" height="15" fill="rgb(240,20,13)" fg:x="732" fg:w="1"/><text x="25.1649%" y="1151.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.03%)</title><rect x="24.9489%" y="1157" width="0.0340%" height="15" fill="rgb(217,89,34)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1167.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (1 samples, 0.03%)</title><rect x="24.9489%" y="1141" width="0.0340%" height="15" fill="rgb(229,13,5)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1151.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1125" width="0.0340%" height="15" fill="rgb(244,67,35)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1135.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1109" width="0.0340%" height="15" fill="rgb(221,40,2)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1119.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1093" width="0.0340%" height="15" fill="rgb(237,157,21)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1103.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1077" width="0.0340%" height="15" fill="rgb(222,94,11)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1061" width="0.0340%" height="15" fill="rgb(249,113,6)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1071.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1045" width="0.0340%" height="15" fill="rgb(238,137,36)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1029" width="0.0340%" height="15" fill="rgb(210,102,26)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1039.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="1013" width="0.0340%" height="15" fill="rgb(218,30,30)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1023.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.03%)</title><rect x="24.9489%" y="997" width="0.0340%" height="15" fill="rgb(214,67,26)" fg:x="733" fg:w="1"/><text x="25.1989%" y="1007.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="981" width="0.0340%" height="15" fill="rgb(251,9,53)" fg:x="733" fg:w="1"/><text x="25.1989%" y="991.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="24.9489%" y="965" width="0.0340%" height="15" fill="rgb(228,204,25)" fg:x="733" fg:w="1"/><text x="25.1989%" y="975.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="24.9489%" y="949" width="0.0340%" height="15" fill="rgb(207,153,8)" fg:x="733" fg:w="1"/><text x="25.1989%" y="959.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.03%)</title><rect x="24.9489%" y="933" width="0.0340%" height="15" fill="rgb(242,9,16)" fg:x="733" fg:w="1"/><text x="25.1989%" y="943.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (1 samples, 0.03%)</title><rect x="24.9489%" y="917" width="0.0340%" height="15" fill="rgb(217,211,10)" fg:x="733" fg:w="1"/><text x="25.1989%" y="927.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="901" width="0.0340%" height="15" fill="rgb(219,228,52)" fg:x="733" fg:w="1"/><text x="25.1989%" y="911.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="885" width="0.0340%" height="15" fill="rgb(231,92,29)" fg:x="733" fg:w="1"/><text x="25.1989%" y="895.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="869" width="0.0340%" height="15" fill="rgb(232,8,23)" fg:x="733" fg:w="1"/><text x="25.1989%" y="879.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="853" width="0.0340%" height="15" fill="rgb(216,211,34)" fg:x="733" fg:w="1"/><text x="25.1989%" y="863.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="837" width="0.0340%" height="15" fill="rgb(236,151,0)" fg:x="733" fg:w="1"/><text x="25.1989%" y="847.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="821" width="0.0340%" height="15" fill="rgb(209,168,3)" fg:x="733" fg:w="1"/><text x="25.1989%" y="831.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="805" width="0.0340%" height="15" fill="rgb(208,129,28)" fg:x="733" fg:w="1"/><text x="25.1989%" y="815.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="789" width="0.0340%" height="15" fill="rgb(229,78,22)" fg:x="733" fg:w="1"/><text x="25.1989%" y="799.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.03%)</title><rect x="24.9489%" y="773" width="0.0340%" height="15" fill="rgb(228,187,13)" fg:x="733" fg:w="1"/><text x="25.1989%" y="783.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (1 samples, 0.03%)</title><rect x="24.9489%" y="757" width="0.0340%" height="15" fill="rgb(240,119,24)" fg:x="733" fg:w="1"/><text x="25.1989%" y="767.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="24.9489%" y="741" width="0.0340%" height="15" fill="rgb(209,194,42)" fg:x="733" fg:w="1"/><text x="25.1989%" y="751.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.03%)</title><rect x="24.9830%" y="1157" width="0.0340%" height="15" fill="rgb(247,200,46)" fg:x="734" fg:w="1"/><text x="25.2330%" y="1167.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.03%)</title><rect x="24.9830%" y="1141" width="0.0340%" height="15" fill="rgb(218,76,16)" fg:x="734" fg:w="1"/><text x="25.2330%" y="1151.50"></text></g><g><title>CBlockUndo::~CBlockUndo (1 samples, 0.03%)</title><rect x="25.0170%" y="1157" width="0.0340%" height="15" fill="rgb(225,21,48)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1167.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="25.0170%" y="1141" width="0.0340%" height="15" fill="rgb(239,223,50)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="1125" width="0.0340%" height="15" fill="rgb(244,45,21)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="1109" width="0.0340%" height="15" fill="rgb(232,33,43)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1119.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="1093" width="0.0340%" height="15" fill="rgb(209,8,3)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1103.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="1077" width="0.0340%" height="15" fill="rgb(214,25,53)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1087.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="1061" width="0.0340%" height="15" fill="rgb(254,186,54)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1071.50"></text></g><g><title>CTxUndo::~CTxUndo (1 samples, 0.03%)</title><rect x="25.0170%" y="1045" width="0.0340%" height="15" fill="rgb(208,174,49)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1055.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="25.0170%" y="1029" width="0.0340%" height="15" fill="rgb(233,191,51)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1039.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="1013" width="0.0340%" height="15" fill="rgb(222,134,10)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1023.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="997" width="0.0340%" height="15" fill="rgb(230,226,20)" fg:x="735" fg:w="1"/><text x="25.2670%" y="1007.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (1 samples, 0.03%)</title><rect x="25.0170%" y="981" width="0.0340%" height="15" fill="rgb(251,111,25)" fg:x="735" fg:w="1"/><text x="25.2670%" y="991.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.03%)</title><rect x="25.0511%" y="1077" width="0.0340%" height="15" fill="rgb(224,40,46)" fg:x="736" fg:w="1"/><text x="25.3011%" y="1087.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.10%)</title><rect x="25.0851%" y="1077" width="0.1021%" height="15" fill="rgb(236,108,47)" fg:x="737" fg:w="3"/><text x="25.3351%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="25.1532%" y="1061" width="0.0340%" height="15" fill="rgb(234,93,0)" fg:x="739" fg:w="1"/><text x="25.4032%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="25.1532%" y="1045" width="0.0340%" height="15" fill="rgb(224,213,32)" fg:x="739" fg:w="1"/><text x="25.4032%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.17%)</title><rect x="25.0511%" y="1093" width="0.1702%" height="15" fill="rgb(251,11,48)" fg:x="736" fg:w="5"/><text x="25.3011%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="25.1872%" y="1077" width="0.0340%" height="15" fill="rgb(236,173,5)" fg:x="740" fg:w="1"/><text x="25.4372%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (7 samples, 0.24%)</title><rect x="25.0511%" y="1141" width="0.2383%" height="15" fill="rgb(230,95,12)" fg:x="736" fg:w="7"/><text x="25.3011%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (7 samples, 0.24%)</title><rect x="25.0511%" y="1125" width="0.2383%" height="15" fill="rgb(232,209,1)" fg:x="736" fg:w="7"/><text x="25.3011%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (7 samples, 0.24%)</title><rect x="25.0511%" y="1109" width="0.2383%" height="15" fill="rgb(232,6,1)" fg:x="736" fg:w="7"/><text x="25.3011%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.07%)</title><rect x="25.2212%" y="1093" width="0.0681%" height="15" fill="rgb(210,224,50)" fg:x="741" fg:w="2"/><text x="25.4712%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.07%)</title><rect x="25.2212%" y="1077" width="0.0681%" height="15" fill="rgb(228,127,35)" fg:x="741" fg:w="2"/><text x="25.4712%" y="1087.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="25.2212%" y="1061" width="0.0681%" height="15" fill="rgb(245,102,45)" fg:x="741" fg:w="2"/><text x="25.4712%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="25.2553%" y="1045" width="0.0340%" height="15" fill="rgb(214,1,49)" fg:x="742" fg:w="1"/><text x="25.5053%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="25.2553%" y="1029" width="0.0340%" height="15" fill="rgb(226,163,40)" fg:x="742" fg:w="1"/><text x="25.5053%" y="1039.50"></text></g><g><title>CCoinsViewCache::AccessCoin (9 samples, 0.31%)</title><rect x="25.0511%" y="1157" width="0.3063%" height="15" fill="rgb(239,212,28)" fg:x="736" fg:w="9"/><text x="25.3011%" y="1167.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="25.2893%" y="1141" width="0.0681%" height="15" fill="rgb(220,20,13)" fg:x="743" fg:w="2"/><text x="25.5393%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="25.3574%" y="1157" width="0.0340%" height="15" fill="rgb(210,164,35)" fg:x="745" fg:w="1"/><text x="25.6074%" y="1167.50"></text></g><g><title>CCoinsViewCache::GetCoin (4 samples, 0.14%)</title><rect x="25.3914%" y="1157" width="0.1361%" height="15" fill="rgb(248,109,41)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (4 samples, 0.14%)</title><rect x="25.3914%" y="1141" width="0.1361%" height="15" fill="rgb(238,23,50)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (4 samples, 0.14%)</title><rect x="25.3914%" y="1125" width="0.1361%" height="15" fill="rgb(211,48,49)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="25.3914%" y="1109" width="0.1361%" height="15" fill="rgb(223,36,21)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="25.3914%" y="1093" width="0.1361%" height="15" fill="rgb(207,123,46)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="25.3914%" y="1077" width="0.1361%" height="15" fill="rgb(240,218,32)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="25.3914%" y="1061" width="0.1361%" height="15" fill="rgb(252,5,43)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1071.50"></text></g><g><title>Coin::Coin (4 samples, 0.14%)</title><rect x="25.3914%" y="1045" width="0.1361%" height="15" fill="rgb(252,84,19)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (4 samples, 0.14%)</title><rect x="25.3914%" y="1029" width="0.1361%" height="15" fill="rgb(243,152,39)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1039.50"></text></g><g><title>CScript::CScript (4 samples, 0.14%)</title><rect x="25.3914%" y="1013" width="0.1361%" height="15" fill="rgb(234,160,15)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (4 samples, 0.14%)</title><rect x="25.3914%" y="997" width="0.1361%" height="15" fill="rgb(237,34,20)" fg:x="746" fg:w="4"/><text x="25.6414%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.14%)</title><rect x="25.3914%" y="981" width="0.1361%" height="15" fill="rgb(229,97,13)" fg:x="746" fg:w="4"/><text x="25.6414%" y="991.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="25.5276%" y="1125" width="0.0340%" height="15" fill="rgb(234,71,50)" fg:x="750" fg:w="1"/><text x="25.7776%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.03%)</title><rect x="25.5276%" y="1109" width="0.0340%" height="15" fill="rgb(253,155,4)" fg:x="750" fg:w="1"/><text x="25.7776%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="25.5276%" y="1093" width="0.0340%" height="15" fill="rgb(222,185,37)" fg:x="750" fg:w="1"/><text x="25.7776%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="25.5276%" y="1077" width="0.0340%" height="15" fill="rgb(251,177,13)" fg:x="750" fg:w="1"/><text x="25.7776%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="25.5276%" y="1061" width="0.0340%" height="15" fill="rgb(250,179,40)" fg:x="750" fg:w="1"/><text x="25.7776%" y="1071.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="25.5616%" y="1029" width="0.0340%" height="15" fill="rgb(242,44,2)" fg:x="751" fg:w="1"/><text x="25.8116%" y="1039.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.03%)</title><rect x="25.5616%" y="1013" width="0.0340%" height="15" fill="rgb(216,177,13)" fg:x="751" fg:w="1"/><text x="25.8116%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="25.5616%" y="997" width="0.0340%" height="15" fill="rgb(216,106,43)" fg:x="751" fg:w="1"/><text x="25.8116%" y="1007.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="25.5616%" y="981" width="0.0340%" height="15" fill="rgb(216,183,2)" fg:x="751" fg:w="1"/><text x="25.8116%" y="991.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="25.5956%" y="981" width="0.0340%" height="15" fill="rgb(249,75,3)" fg:x="752" fg:w="1"/><text x="25.8456%" y="991.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.03%)</title><rect x="25.6297%" y="981" width="0.0340%" height="15" fill="rgb(219,67,39)" fg:x="753" fg:w="1"/><text x="25.8797%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="25.6637%" y="965" width="0.1361%" height="15" fill="rgb(253,228,2)" fg:x="754" fg:w="4"/><text x="25.9137%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="25.6637%" y="949" width="0.1361%" height="15" fill="rgb(235,138,27)" fg:x="754" fg:w="4"/><text x="25.9137%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="933" width="0.1021%" height="15" fill="rgb(236,97,51)" fg:x="755" fg:w="3"/><text x="25.9478%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="917" width="0.1021%" height="15" fill="rgb(240,80,30)" fg:x="755" fg:w="3"/><text x="25.9478%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="901" width="0.1021%" height="15" fill="rgb(230,178,19)" fg:x="755" fg:w="3"/><text x="25.9478%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="885" width="0.1021%" height="15" fill="rgb(210,190,27)" fg:x="755" fg:w="3"/><text x="25.9478%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="869" width="0.1021%" height="15" fill="rgb(222,107,31)" fg:x="755" fg:w="3"/><text x="25.9478%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="853" width="0.1021%" height="15" fill="rgb(216,127,34)" fg:x="755" fg:w="3"/><text x="25.9478%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="837" width="0.1021%" height="15" fill="rgb(234,116,52)" fg:x="755" fg:w="3"/><text x="25.9478%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="821" width="0.1021%" height="15" fill="rgb(222,124,15)" fg:x="755" fg:w="3"/><text x="25.9478%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="25.6978%" y="805" width="0.1021%" height="15" fill="rgb(231,179,28)" fg:x="755" fg:w="3"/><text x="25.9478%" y="815.50"></text></g><g><title>leveldb::MutexLock::MutexLock (1 samples, 0.03%)</title><rect x="25.9020%" y="949" width="0.0340%" height="15" fill="rgb(226,93,45)" fg:x="761" fg:w="1"/><text x="26.1520%" y="959.50"></text></g><g><title>leveldb::port::Mutex::Lock (1 samples, 0.03%)</title><rect x="25.9020%" y="933" width="0.0340%" height="15" fill="rgb(215,8,51)" fg:x="761" fg:w="1"/><text x="26.1520%" y="943.50"></text></g><g><title>std::mutex::lock (1 samples, 0.03%)</title><rect x="25.9020%" y="917" width="0.0340%" height="15" fill="rgb(223,106,5)" fg:x="761" fg:w="1"/><text x="26.1520%" y="927.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.03%)</title><rect x="25.9020%" y="901" width="0.0340%" height="15" fill="rgb(250,191,5)" fg:x="761" fg:w="1"/><text x="26.1520%" y="911.50"></text></g><g><title>leveldb::DBImpl::Get (5 samples, 0.17%)</title><rect x="25.7999%" y="965" width="0.1702%" height="15" fill="rgb(242,132,44)" fg:x="758" fg:w="5"/><text x="26.0499%" y="975.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.03%)</title><rect x="25.9360%" y="949" width="0.0340%" height="15" fill="rgb(251,152,29)" fg:x="762" fg:w="1"/><text x="26.1860%" y="959.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.03%)</title><rect x="25.9360%" y="933" width="0.0340%" height="15" fill="rgb(218,179,5)" fg:x="762" fg:w="1"/><text x="26.1860%" y="943.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.03%)</title><rect x="25.9700%" y="965" width="0.0340%" height="15" fill="rgb(227,67,19)" fg:x="763" fg:w="1"/><text x="26.2200%" y="975.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="26.0041%" y="933" width="0.0340%" height="15" fill="rgb(233,119,31)" fg:x="764" fg:w="1"/><text x="26.2541%" y="943.50"></text></g><g><title>leveldb::MemTable::Get (3 samples, 0.10%)</title><rect x="26.0041%" y="965" width="0.1021%" height="15" fill="rgb(241,120,22)" fg:x="764" fg:w="3"/><text x="26.2541%" y="975.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Seek (3 samples, 0.10%)</title><rect x="26.0041%" y="949" width="0.1021%" height="15" fill="rgb(224,102,30)" fg:x="764" fg:w="3"/><text x="26.2541%" y="959.50"></text></g><g><title>leveldb::DBImpl::Get (2 samples, 0.07%)</title><rect x="26.0381%" y="933" width="0.0681%" height="15" fill="rgb(210,164,37)" fg:x="765" fg:w="2"/><text x="26.2881%" y="943.50"></text></g><g><title>__gthread_mutex_lock (1 samples, 0.03%)</title><rect x="26.1062%" y="917" width="0.0340%" height="15" fill="rgb(226,191,16)" fg:x="767" fg:w="1"/><text x="26.3562%" y="927.50"></text></g><g><title>leveldb::MutexLock::MutexLock (2 samples, 0.07%)</title><rect x="26.1062%" y="965" width="0.0681%" height="15" fill="rgb(214,40,45)" fg:x="767" fg:w="2"/><text x="26.3562%" y="975.50"></text></g><g><title>leveldb::port::Mutex::Lock (2 samples, 0.07%)</title><rect x="26.1062%" y="949" width="0.0681%" height="15" fill="rgb(244,29,26)" fg:x="767" fg:w="2"/><text x="26.3562%" y="959.50"></text></g><g><title>std::mutex::lock (2 samples, 0.07%)</title><rect x="26.1062%" y="933" width="0.0681%" height="15" fill="rgb(216,16,5)" fg:x="767" fg:w="2"/><text x="26.3562%" y="943.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.03%)</title><rect x="26.1402%" y="917" width="0.0340%" height="15" fill="rgb(249,76,35)" fg:x="768" fg:w="1"/><text x="26.3902%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (2 samples, 0.07%)</title><rect x="26.1743%" y="949" width="0.0681%" height="15" fill="rgb(207,11,44)" fg:x="769" fg:w="2"/><text x="26.4243%" y="959.50"></text></g><g><title>leveldb::Status::NotFound (1 samples, 0.03%)</title><rect x="26.2423%" y="949" width="0.0340%" height="15" fill="rgb(228,190,49)" fg:x="771" fg:w="1"/><text x="26.4923%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.03%)</title><rect x="26.2423%" y="933" width="0.0340%" height="15" fill="rgb(214,173,12)" fg:x="771" fg:w="1"/><text x="26.4923%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.03%)</title><rect x="26.2423%" y="917" width="0.0340%" height="15" fill="rgb(218,26,35)" fg:x="771" fg:w="1"/><text x="26.4923%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="26.3104%" y="917" width="0.0340%" height="15" fill="rgb(220,200,19)" fg:x="773" fg:w="1"/><text x="26.5604%" y="927.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.03%)</title><rect x="26.3104%" y="901" width="0.0340%" height="15" fill="rgb(239,95,49)" fg:x="773" fg:w="1"/><text x="26.5604%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::user_comparator (1 samples, 0.03%)</title><rect x="26.3104%" y="885" width="0.0340%" height="15" fill="rgb(235,85,53)" fg:x="773" fg:w="1"/><text x="26.5604%" y="895.50"></text></g><g><title>leveldb::FindFile (3 samples, 0.10%)</title><rect x="26.2764%" y="933" width="0.1021%" height="15" fill="rgb(233,133,31)" fg:x="772" fg:w="3"/><text x="26.5264%" y="943.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.03%)</title><rect x="26.3445%" y="917" width="0.0340%" height="15" fill="rgb(218,25,20)" fg:x="774" fg:w="1"/><text x="26.5945%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="26.3785%" y="933" width="0.0340%" height="15" fill="rgb(252,210,38)" fg:x="775" fg:w="1"/><text x="26.6285%" y="943.50"></text></g><g><title>leveldb::MemTable::Get (4 samples, 0.14%)</title><rect x="26.4125%" y="933" width="0.1361%" height="15" fill="rgb(242,134,21)" fg:x="776" fg:w="4"/><text x="26.6625%" y="943.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.07%)</title><rect x="26.5487%" y="933" width="0.0681%" height="15" fill="rgb(213,28,48)" fg:x="780" fg:w="2"/><text x="26.7987%" y="943.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.03%)</title><rect x="26.5827%" y="917" width="0.0340%" height="15" fill="rgb(250,196,2)" fg:x="781" fg:w="1"/><text x="26.8327%" y="927.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.03%)</title><rect x="26.6167%" y="933" width="0.0340%" height="15" fill="rgb(227,5,17)" fg:x="782" fg:w="1"/><text x="26.8667%" y="943.50"></text></g><g><title>leveldb::Block::Iter::status (1 samples, 0.03%)</title><rect x="26.6848%" y="917" width="0.0340%" height="15" fill="rgb(221,226,24)" fg:x="784" fg:w="1"/><text x="26.9348%" y="927.50"></text></g><g><title>leveldb::FindFile (2 samples, 0.07%)</title><rect x="26.7189%" y="917" width="0.0681%" height="15" fill="rgb(211,5,48)" fg:x="785" fg:w="2"/><text x="26.9689%" y="927.50"></text></g><g><title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (2 samples, 0.07%)</title><rect x="26.7189%" y="901" width="0.0681%" height="15" fill="rgb(219,150,6)" fg:x="785" fg:w="2"/><text x="26.9689%" y="911.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.03%)</title><rect x="26.7869%" y="917" width="0.0340%" height="15" fill="rgb(251,46,16)" fg:x="787" fg:w="1"/><text x="27.0369%" y="927.50"></text></g><g><title>Lookup (1 samples, 0.03%)</title><rect x="26.8210%" y="901" width="0.0340%" height="15" fill="rgb(220,204,40)" fg:x="788" fg:w="1"/><text x="27.0710%" y="911.50"></text></g><g><title>Lookup (1 samples, 0.03%)</title><rect x="26.8210%" y="885" width="0.0340%" height="15" fill="rgb(211,85,2)" fg:x="788" fg:w="1"/><text x="27.0710%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.03%)</title><rect x="26.8210%" y="869" width="0.0340%" height="15" fill="rgb(229,17,7)" fg:x="788" fg:w="1"/><text x="27.0710%" y="879.50"></text></g><g><title>Release (2 samples, 0.07%)</title><rect x="26.8550%" y="885" width="0.0681%" height="15" fill="rgb(239,72,28)" fg:x="789" fg:w="2"/><text x="27.1050%" y="895.50"></text></g><g><title>leveldb::Block::Iter::status (2 samples, 0.07%)</title><rect x="26.8550%" y="869" width="0.0681%" height="15" fill="rgb(230,47,54)" fg:x="789" fg:w="2"/><text x="27.1050%" y="879.50"></text></g><g><title>Release (3 samples, 0.10%)</title><rect x="26.8550%" y="901" width="0.1021%" height="15" fill="rgb(214,50,8)" fg:x="789" fg:w="3"/><text x="27.1050%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (1 samples, 0.03%)</title><rect x="26.9231%" y="885" width="0.0340%" height="15" fill="rgb(216,198,43)" fg:x="791" fg:w="1"/><text x="27.1731%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="26.9231%" y="869" width="0.0340%" height="15" fill="rgb(234,20,35)" fg:x="791" fg:w="1"/><text x="27.1731%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="26.9231%" y="853" width="0.0340%" height="15" fill="rgb(254,45,19)" fg:x="791" fg:w="1"/><text x="27.1731%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="26.9231%" y="837" width="0.0340%" height="15" fill="rgb(219,14,44)" fg:x="791" fg:w="1"/><text x="27.1731%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="26.9231%" y="821" width="0.0340%" height="15" fill="rgb(217,220,26)" fg:x="791" fg:w="1"/><text x="27.1731%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="26.9231%" y="805" width="0.0340%" height="15" fill="rgb(213,158,28)" fg:x="791" fg:w="1"/><text x="27.1731%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="26.9231%" y="789" width="0.0340%" height="15" fill="rgb(252,51,52)" fg:x="791" fg:w="1"/><text x="27.1731%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="26.9231%" y="773" width="0.0340%" height="15" fill="rgb(246,89,16)" fg:x="791" fg:w="1"/><text x="27.1731%" y="783.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="26.9571%" y="901" width="0.0340%" height="15" fill="rgb(216,158,49)" fg:x="792" fg:w="1"/><text x="27.2071%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (3 samples, 0.10%)</title><rect x="26.9912%" y="901" width="0.1021%" height="15" fill="rgb(236,107,19)" fg:x="793" fg:w="3"/><text x="27.2412%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.10%)</title><rect x="27.0933%" y="901" width="0.1021%" height="15" fill="rgb(228,185,30)" fg:x="796" fg:w="3"/><text x="27.3433%" y="911.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.03%)</title><rect x="27.1613%" y="885" width="0.0340%" height="15" fill="rgb(246,134,8)" fg:x="798" fg:w="1"/><text x="27.4113%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (1 samples, 0.03%)</title><rect x="27.1954%" y="901" width="0.0340%" height="15" fill="rgb(214,143,50)" fg:x="799" fg:w="1"/><text x="27.4454%" y="911.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.03%)</title><rect x="27.2294%" y="901" width="0.0340%" height="15" fill="rgb(228,75,8)" fg:x="800" fg:w="1"/><text x="27.4794%" y="911.50"></text></g><g><title>leveldb::Block::Iter::status (1 samples, 0.03%)</title><rect x="27.2634%" y="901" width="0.0340%" height="15" fill="rgb(207,175,4)" fg:x="801" fg:w="1"/><text x="27.5134%" y="911.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.03%)</title><rect x="27.2975%" y="901" width="0.0340%" height="15" fill="rgb(205,108,24)" fg:x="802" fg:w="1"/><text x="27.5475%" y="911.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.03%)</title><rect x="27.3315%" y="901" width="0.0340%" height="15" fill="rgb(244,120,49)" fg:x="803" fg:w="1"/><text x="27.5815%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="27.3656%" y="901" width="0.0340%" height="15" fill="rgb(223,47,38)" fg:x="804" fg:w="1"/><text x="27.6156%" y="911.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.03%)</title><rect x="27.3656%" y="885" width="0.0340%" height="15" fill="rgb(229,179,11)" fg:x="804" fg:w="1"/><text x="27.6156%" y="895.50"></text></g><g><title>Lookup (1 samples, 0.03%)</title><rect x="27.3996%" y="885" width="0.0340%" height="15" fill="rgb(231,122,1)" fg:x="805" fg:w="1"/><text x="27.6496%" y="895.50"></text></g><g><title>Lookup (1 samples, 0.03%)</title><rect x="27.3996%" y="869" width="0.0340%" height="15" fill="rgb(245,119,9)" fg:x="805" fg:w="1"/><text x="27.6496%" y="879.50"></text></g><g><title>Lookup (1 samples, 0.03%)</title><rect x="27.3996%" y="853" width="0.0340%" height="15" fill="rgb(241,163,25)" fg:x="805" fg:w="1"/><text x="27.6496%" y="863.50"></text></g><g><title>FindPointer (1 samples, 0.03%)</title><rect x="27.3996%" y="837" width="0.0340%" height="15" fill="rgb(217,214,3)" fg:x="805" fg:w="1"/><text x="27.6496%" y="847.50"></text></g><g><title>leveldb::operator!= (1 samples, 0.03%)</title><rect x="27.3996%" y="821" width="0.0340%" height="15" fill="rgb(240,86,28)" fg:x="805" fg:w="1"/><text x="27.6496%" y="831.50"></text></g><g><title>leveldb::operator== (1 samples, 0.03%)</title><rect x="27.3996%" y="805" width="0.0340%" height="15" fill="rgb(215,47,9)" fg:x="805" fg:w="1"/><text x="27.6496%" y="815.50"></text></g><g><title>DecodeEntry (2 samples, 0.07%)</title><rect x="27.5017%" y="869" width="0.0681%" height="15" fill="rgb(252,25,45)" fg:x="808" fg:w="2"/><text x="27.7517%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="27.5698%" y="853" width="0.0340%" height="15" fill="rgb(251,164,9)" fg:x="810" fg:w="1"/><text x="27.8198%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.07%)</title><rect x="27.6038%" y="853" width="0.0681%" height="15" fill="rgb(233,194,0)" fg:x="811" fg:w="2"/><text x="27.8538%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Compare (1 samples, 0.03%)</title><rect x="27.6378%" y="837" width="0.0340%" height="15" fill="rgb(249,111,24)" fg:x="812" fg:w="1"/><text x="27.8878%" y="847.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.03%)</title><rect x="27.6719%" y="853" width="0.0340%" height="15" fill="rgb(250,223,3)" fg:x="813" fg:w="1"/><text x="27.9219%" y="863.50"></text></g><g><title>leveldb::Block::NumRestarts (1 samples, 0.03%)</title><rect x="27.6719%" y="837" width="0.0340%" height="15" fill="rgb(236,178,37)" fg:x="813" fg:w="1"/><text x="27.9219%" y="847.50"></text></g><g><title>leveldb::DecodeFixed32 (1 samples, 0.03%)</title><rect x="27.6719%" y="821" width="0.0340%" height="15" fill="rgb(241,158,50)" fg:x="813" fg:w="1"/><text x="27.9219%" y="831.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.03%)</title><rect x="27.6719%" y="805" width="0.0340%" height="15" fill="rgb(213,121,41)" fg:x="813" fg:w="1"/><text x="27.9219%" y="815.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.24%)</title><rect x="27.7740%" y="837" width="0.2383%" height="15" fill="rgb(240,92,3)" fg:x="816" fg:w="7"/><text x="28.0240%" y="847.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.07%)</title><rect x="27.9442%" y="821" width="0.0681%" height="15" fill="rgb(205,123,3)" fg:x="821" fg:w="2"/><text x="28.1942%" y="831.50"></text></g><g><title>DecodeEntry (3 samples, 0.10%)</title><rect x="28.0463%" y="821" width="0.1021%" height="15" fill="rgb(205,97,47)" fg:x="824" fg:w="3"/><text x="28.2963%" y="831.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.03%)</title><rect x="28.1144%" y="805" width="0.0340%" height="15" fill="rgb(247,152,14)" fg:x="826" fg:w="1"/><text x="28.3644%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Compare (2 samples, 0.07%)</title><rect x="28.1484%" y="821" width="0.0681%" height="15" fill="rgb(248,195,53)" fg:x="827" fg:w="2"/><text x="28.3984%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (7 samples, 0.24%)</title><rect x="28.0123%" y="837" width="0.2383%" height="15" fill="rgb(226,201,16)" fg:x="823" fg:w="7"/><text x="28.2623%" y="847.50"></text></g><g><title>leveldb::Block::Iter::GetRestartPoint (1 samples, 0.03%)</title><rect x="28.2165%" y="821" width="0.0340%" height="15" fill="rgb(205,98,0)" fg:x="829" fg:w="1"/><text x="28.4665%" y="831.50"></text></g><g><title>leveldb::DecodeFixed32 (1 samples, 0.03%)</title><rect x="28.2165%" y="805" width="0.0340%" height="15" fill="rgb(214,191,48)" fg:x="829" fg:w="1"/><text x="28.4665%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.03%)</title><rect x="28.2165%" y="789" width="0.0340%" height="15" fill="rgb(237,112,39)" fg:x="829" fg:w="1"/><text x="28.4665%" y="799.50"></text></g><g><title>leveldb::Block::NewIterator (2 samples, 0.07%)</title><rect x="28.2505%" y="837" width="0.0681%" height="15" fill="rgb(247,203,27)" fg:x="830" fg:w="2"/><text x="28.5005%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Iter (2 samples, 0.07%)</title><rect x="28.2505%" y="821" width="0.0681%" height="15" fill="rgb(235,124,28)" fg:x="830" fg:w="2"/><text x="28.5005%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.27%)</title><rect x="28.3186%" y="837" width="0.2723%" height="15" fill="rgb(208,207,46)" fg:x="832" fg:w="8"/><text x="28.5686%" y="847.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.03%)</title><rect x="28.5568%" y="821" width="0.0340%" height="15" fill="rgb(234,176,4)" fg:x="839" fg:w="1"/><text x="28.8068%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (27 samples, 0.92%)</title><rect x="27.7059%" y="853" width="0.9190%" height="15" fill="rgb(230,133,28)" fg:x="814" fg:w="27"/><text x="27.9559%" y="863.50"></text></g><g><title>leveldb::Iterator::Iterator (1 samples, 0.03%)</title><rect x="28.5909%" y="837" width="0.0340%" height="15" fill="rgb(211,137,40)" fg:x="840" fg:w="1"/><text x="28.8409%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Compare (33 samples, 1.12%)</title><rect x="27.5698%" y="869" width="1.1232%" height="15" fill="rgb(254,35,13)" fg:x="810" fg:w="33"/><text x="27.8198%" y="879.50"></text></g><g><title>leveldb::Table::InternalGet (2 samples, 0.07%)</title><rect x="28.6249%" y="853" width="0.0681%" height="15" fill="rgb(225,49,51)" fg:x="841" fg:w="2"/><text x="28.8749%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="853" width="0.0340%" height="15" fill="rgb(251,10,15)" fg:x="843" fg:w="1"/><text x="28.9430%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="837" width="0.0340%" height="15" fill="rgb(228,207,15)" fg:x="843" fg:w="1"/><text x="28.9430%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="821" width="0.0340%" height="15" fill="rgb(241,99,19)" fg:x="843" fg:w="1"/><text x="28.9430%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="805" width="0.0340%" height="15" fill="rgb(207,104,49)" fg:x="843" fg:w="1"/><text x="28.9430%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="789" width="0.0340%" height="15" fill="rgb(234,99,18)" fg:x="843" fg:w="1"/><text x="28.9430%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="773" width="0.0340%" height="15" fill="rgb(213,191,49)" fg:x="843" fg:w="1"/><text x="28.9430%" y="783.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="28.6930%" y="757" width="0.0340%" height="15" fill="rgb(210,226,19)" fg:x="843" fg:w="1"/><text x="28.9430%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="741" width="0.0340%" height="15" fill="rgb(229,97,18)" fg:x="843" fg:w="1"/><text x="28.9430%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="725" width="0.0340%" height="15" fill="rgb(211,167,15)" fg:x="843" fg:w="1"/><text x="28.9430%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="709" width="0.0340%" height="15" fill="rgb(210,169,34)" fg:x="843" fg:w="1"/><text x="28.9430%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="693" width="0.0340%" height="15" fill="rgb(241,121,31)" fg:x="843" fg:w="1"/><text x="28.9430%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="677" width="0.0340%" height="15" fill="rgb(232,40,11)" fg:x="843" fg:w="1"/><text x="28.9430%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="661" width="0.0340%" height="15" fill="rgb(205,86,26)" fg:x="843" fg:w="1"/><text x="28.9430%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="645" width="0.0340%" height="15" fill="rgb(231,126,28)" fg:x="843" fg:w="1"/><text x="28.9430%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="629" width="0.0340%" height="15" fill="rgb(219,221,18)" fg:x="843" fg:w="1"/><text x="28.9430%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="613" width="0.0340%" height="15" fill="rgb(211,40,0)" fg:x="843" fg:w="1"/><text x="28.9430%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="597" width="0.0340%" height="15" fill="rgb(239,85,43)" fg:x="843" fg:w="1"/><text x="28.9430%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="581" width="0.0340%" height="15" fill="rgb(231,55,21)" fg:x="843" fg:w="1"/><text x="28.9430%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="565" width="0.0340%" height="15" fill="rgb(225,184,43)" fg:x="843" fg:w="1"/><text x="28.9430%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="549" width="0.0340%" height="15" fill="rgb(251,158,41)" fg:x="843" fg:w="1"/><text x="28.9430%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="533" width="0.0340%" height="15" fill="rgb(234,159,37)" fg:x="843" fg:w="1"/><text x="28.9430%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="517" width="0.0340%" height="15" fill="rgb(216,204,22)" fg:x="843" fg:w="1"/><text x="28.9430%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="501" width="0.0340%" height="15" fill="rgb(214,17,3)" fg:x="843" fg:w="1"/><text x="28.9430%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="28.6930%" y="485" width="0.0340%" height="15" fill="rgb(212,111,17)" fg:x="843" fg:w="1"/><text x="28.9430%" y="495.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="28.7611%" y="821" width="0.0340%" height="15" fill="rgb(221,157,24)" fg:x="845" fg:w="1"/><text x="29.0111%" y="831.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.03%)</title><rect x="28.7611%" y="805" width="0.0340%" height="15" fill="rgb(252,16,13)" fg:x="845" fg:w="1"/><text x="29.0111%" y="815.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="28.7611%" y="789" width="0.0340%" height="15" fill="rgb(221,62,2)" fg:x="845" fg:w="1"/><text x="29.0111%" y="799.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.03%)</title><rect x="28.8291%" y="805" width="0.0340%" height="15" fill="rgb(247,87,22)" fg:x="847" fg:w="1"/><text x="29.0791%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="28.8632%" y="773" width="0.0340%" height="15" fill="rgb(215,73,9)" fg:x="848" fg:w="1"/><text x="29.1132%" y="783.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="28.8632%" y="757" width="0.0340%" height="15" fill="rgb(207,175,33)" fg:x="848" fg:w="1"/><text x="29.1132%" y="767.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (4 samples, 0.14%)</title><rect x="28.7951%" y="821" width="0.1361%" height="15" fill="rgb(243,129,54)" fg:x="846" fg:w="4"/><text x="29.0451%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.07%)</title><rect x="28.8632%" y="805" width="0.0681%" height="15" fill="rgb(227,119,45)" fg:x="848" fg:w="2"/><text x="29.1132%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.07%)</title><rect x="28.8632%" y="789" width="0.0681%" height="15" fill="rgb(205,109,36)" fg:x="848" fg:w="2"/><text x="29.1132%" y="799.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.03%)</title><rect x="28.8972%" y="773" width="0.0340%" height="15" fill="rgb(205,6,39)" fg:x="849" fg:w="1"/><text x="29.1472%" y="783.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.07%)</title><rect x="28.9312%" y="821" width="0.0681%" height="15" fill="rgb(221,32,16)" fg:x="850" fg:w="2"/><text x="29.1812%" y="831.50"></text></g><g><title>leveldb::Block::Iter::SeekToRestartPoint (1 samples, 0.03%)</title><rect x="28.9653%" y="805" width="0.0340%" height="15" fill="rgb(228,144,50)" fg:x="851" fg:w="1"/><text x="29.2153%" y="815.50"></text></g><g><title>leveldb::Block::Iter::GetRestartPoint (1 samples, 0.03%)</title><rect x="28.9653%" y="789" width="0.0340%" height="15" fill="rgb(229,201,53)" fg:x="851" fg:w="1"/><text x="29.2153%" y="799.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.31%)</title><rect x="28.7270%" y="837" width="0.3063%" height="15" fill="rgb(249,153,27)" fg:x="844" fg:w="9"/><text x="28.9770%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="28.9993%" y="821" width="0.0340%" height="15" fill="rgb(227,106,25)" fg:x="852" fg:w="1"/><text x="29.2493%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Compare (10 samples, 0.34%)</title><rect x="28.7270%" y="853" width="0.3404%" height="15" fill="rgb(230,65,29)" fg:x="844" fg:w="10"/><text x="28.9770%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.03%)</title><rect x="29.0334%" y="837" width="0.0340%" height="15" fill="rgb(221,57,46)" fg:x="853" fg:w="1"/><text x="29.2834%" y="847.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.03%)</title><rect x="29.0674%" y="853" width="0.0340%" height="15" fill="rgb(229,161,17)" fg:x="854" fg:w="1"/><text x="29.3174%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.03%)</title><rect x="29.0674%" y="837" width="0.0340%" height="15" fill="rgb(222,213,11)" fg:x="854" fg:w="1"/><text x="29.3174%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.03%)</title><rect x="29.0674%" y="821" width="0.0340%" height="15" fill="rgb(235,35,13)" fg:x="854" fg:w="1"/><text x="29.3174%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.03%)</title><rect x="29.0674%" y="805" width="0.0340%" height="15" fill="rgb(233,158,34)" fg:x="854" fg:w="1"/><text x="29.3174%" y="815.50"></text></g><g><title>DecodeEntry (1 samples, 0.03%)</title><rect x="29.0674%" y="789" width="0.0340%" height="15" fill="rgb(215,151,48)" fg:x="854" fg:w="1"/><text x="29.3174%" y="799.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.03%)</title><rect x="29.1014%" y="853" width="0.0340%" height="15" fill="rgb(229,84,14)" fg:x="855" fg:w="1"/><text x="29.3514%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (51 samples, 1.74%)</title><rect x="27.4336%" y="885" width="1.7359%" height="15" fill="rgb(229,68,14)" fg:x="806" fg:w="51"/><text x="27.6836%" y="895.50"></text></g><g><title>leveldb::Block::Iter::Seek (14 samples, 0.48%)</title><rect x="28.6930%" y="869" width="0.4765%" height="15" fill="rgb(243,106,26)" fg:x="843" fg:w="14"/><text x="28.9430%" y="879.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="29.1355%" y="853" width="0.0340%" height="15" fill="rgb(206,45,38)" fg:x="856" fg:w="1"/><text x="29.3855%" y="863.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.03%)</title><rect x="29.1355%" y="837" width="0.0340%" height="15" fill="rgb(226,6,15)" fg:x="856" fg:w="1"/><text x="29.3855%" y="847.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.03%)</title><rect x="29.1695%" y="885" width="0.0340%" height="15" fill="rgb(232,22,54)" fg:x="857" fg:w="1"/><text x="29.4195%" y="895.50"></text></g><g><title>leveldb::Block::Iter::~Iter (1 samples, 0.03%)</title><rect x="29.1695%" y="869" width="0.0340%" height="15" fill="rgb(229,222,32)" fg:x="857" fg:w="1"/><text x="29.4195%" y="879.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.03%)</title><rect x="29.1695%" y="853" width="0.0340%" height="15" fill="rgb(228,62,29)" fg:x="857" fg:w="1"/><text x="29.4195%" y="863.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (1 samples, 0.03%)</title><rect x="29.2035%" y="885" width="0.0340%" height="15" fill="rgb(251,103,34)" fg:x="858" fg:w="1"/><text x="29.4535%" y="895.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.03%)</title><rect x="29.2035%" y="869" width="0.0340%" height="15" fill="rgb(233,12,30)" fg:x="858" fg:w="1"/><text x="29.4535%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.03%)</title><rect x="29.2035%" y="853" width="0.0340%" height="15" fill="rgb(238,52,0)" fg:x="858" fg:w="1"/><text x="29.4535%" y="863.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (1 samples, 0.03%)</title><rect x="29.2716%" y="869" width="0.0340%" height="15" fill="rgb(223,98,5)" fg:x="860" fg:w="1"/><text x="29.5216%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.03%)</title><rect x="29.3057%" y="853" width="0.0340%" height="15" fill="rgb(228,75,37)" fg:x="861" fg:w="1"/><text x="29.5557%" y="863.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (1 samples, 0.03%)</title><rect x="29.3397%" y="853" width="0.0340%" height="15" fill="rgb(205,115,49)" fg:x="862" fg:w="1"/><text x="29.5897%" y="863.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.03%)</title><rect x="29.3737%" y="853" width="0.0340%" height="15" fill="rgb(250,154,43)" fg:x="863" fg:w="1"/><text x="29.6237%" y="863.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (6 samples, 0.20%)</title><rect x="29.2376%" y="885" width="0.2042%" height="15" fill="rgb(226,43,29)" fg:x="859" fg:w="6"/><text x="29.4876%" y="895.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (4 samples, 0.14%)</title><rect x="29.3057%" y="869" width="0.1361%" height="15" fill="rgb(249,228,39)" fg:x="861" fg:w="4"/><text x="29.5557%" y="879.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.03%)</title><rect x="29.4078%" y="853" width="0.0340%" height="15" fill="rgb(216,79,43)" fg:x="864" fg:w="1"/><text x="29.6578%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.17%)</title><rect x="29.4418%" y="885" width="0.1702%" height="15" fill="rgb(228,95,12)" fg:x="865" fg:w="5"/><text x="29.6918%" y="895.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.03%)</title><rect x="29.5779%" y="869" width="0.0340%" height="15" fill="rgb(249,221,15)" fg:x="869" fg:w="1"/><text x="29.8279%" y="879.50"></text></g><g><title>leveldb::crc32c::Unmask (1 samples, 0.03%)</title><rect x="29.6120%" y="853" width="0.0340%" height="15" fill="rgb(233,34,13)" fg:x="870" fg:w="1"/><text x="29.8620%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="837" width="0.0340%" height="15" fill="rgb(214,103,39)" fg:x="870" fg:w="1"/><text x="29.8620%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="821" width="0.0340%" height="15" fill="rgb(251,126,39)" fg:x="870" fg:w="1"/><text x="29.8620%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="805" width="0.0340%" height="15" fill="rgb(214,216,36)" fg:x="870" fg:w="1"/><text x="29.8620%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="789" width="0.0340%" height="15" fill="rgb(220,221,8)" fg:x="870" fg:w="1"/><text x="29.8620%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="773" width="0.0340%" height="15" fill="rgb(240,216,3)" fg:x="870" fg:w="1"/><text x="29.8620%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="757" width="0.0340%" height="15" fill="rgb(232,218,17)" fg:x="870" fg:w="1"/><text x="29.8620%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="741" width="0.0340%" height="15" fill="rgb(229,163,45)" fg:x="870" fg:w="1"/><text x="29.8620%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="29.6120%" y="725" width="0.0340%" height="15" fill="rgb(231,110,42)" fg:x="870" fg:w="1"/><text x="29.8620%" y="735.50"></text></g><g><title>leveldb::crc32c::Value (4 samples, 0.14%)</title><rect x="29.6460%" y="853" width="0.1361%" height="15" fill="rgb(208,170,48)" fg:x="871" fg:w="4"/><text x="29.8960%" y="863.50"></text></g><g><title>crc32c::ExtendSse42 (4 samples, 0.14%)</title><rect x="29.6460%" y="837" width="0.1361%" height="15" fill="rgb(239,116,25)" fg:x="871" fg:w="4"/><text x="29.8960%" y="847.50"></text></g><g><title>_mm_crc32_u64 (3 samples, 0.10%)</title><rect x="29.6801%" y="821" width="0.1021%" height="15" fill="rgb(219,200,50)" fg:x="872" fg:w="3"/><text x="29.9301%" y="831.50"></text></g><g><title>leveldb::Table::InternalGet (71 samples, 2.42%)</title><rect x="27.3996%" y="901" width="2.4166%" height="15" fill="rgb(245,200,0)" fg:x="805" fg:w="71"/><text x="27.6496%" y="911.50">le..</text></g><g><title>leveldb::Table::BlockReader (6 samples, 0.20%)</title><rect x="29.6120%" y="885" width="0.2042%" height="15" fill="rgb(245,119,33)" fg:x="870" fg:w="6"/><text x="29.8620%" y="895.50"></text></g><g><title>leveldb::ReadBlock (6 samples, 0.20%)</title><rect x="29.6120%" y="869" width="0.2042%" height="15" fill="rgb(231,125,12)" fg:x="870" fg:w="6"/><text x="29.8620%" y="879.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="29.7822%" y="853" width="0.0340%" height="15" fill="rgb(216,96,41)" fg:x="875" fg:w="1"/><text x="30.0322%" y="863.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="29.7822%" y="837" width="0.0340%" height="15" fill="rgb(248,43,45)" fg:x="875" fg:w="1"/><text x="30.0322%" y="847.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="29.7822%" y="821" width="0.0340%" height="15" fill="rgb(217,222,7)" fg:x="875" fg:w="1"/><text x="30.0322%" y="831.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="29.7822%" y="805" width="0.0340%" height="15" fill="rgb(233,28,6)" fg:x="875" fg:w="1"/><text x="30.0322%" y="815.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.03%)</title><rect x="29.8162%" y="885" width="0.0340%" height="15" fill="rgb(231,218,15)" fg:x="876" fg:w="1"/><text x="30.0662%" y="895.50"></text></g><g><title>leveldb::Version::Get (111 samples, 3.78%)</title><rect x="26.1743%" y="965" width="3.7781%" height="15" fill="rgb(226,171,48)" fg:x="769" fg:w="111"/><text x="26.4243%" y="975.50">leve..</text></g><g><title>leveldb::Version::ForEachOverlapping (108 samples, 3.68%)</title><rect x="26.2764%" y="949" width="3.6760%" height="15" fill="rgb(235,201,9)" fg:x="772" fg:w="108"/><text x="26.5264%" y="959.50">leve..</text></g><g><title>leveldb::Version::Get (97 samples, 3.30%)</title><rect x="26.6508%" y="933" width="3.3016%" height="15" fill="rgb(217,80,15)" fg:x="783" fg:w="97"/><text x="26.9008%" y="943.50">lev..</text></g><g><title>leveldb::TableCache::Get (92 samples, 3.13%)</title><rect x="26.8210%" y="917" width="3.1314%" height="15" fill="rgb(219,152,8)" fg:x="788" fg:w="92"/><text x="27.0710%" y="927.50">lev..</text></g><g><title>leveldb::TableCache::FindTable (4 samples, 0.14%)</title><rect x="29.8162%" y="901" width="0.1361%" height="15" fill="rgb(243,107,38)" fg:x="876" fg:w="4"/><text x="30.0662%" y="911.50"></text></g><g><title>leveldb::Version::Get (3 samples, 0.10%)</title><rect x="29.8502%" y="885" width="0.1021%" height="15" fill="rgb(231,17,5)" fg:x="877" fg:w="3"/><text x="30.1002%" y="895.50"></text></g><g><title>leveldb::DBImpl::Get (127 samples, 4.32%)</title><rect x="25.6637%" y="981" width="4.3227%" height="15" fill="rgb(209,25,54)" fg:x="754" fg:w="127"/><text x="25.9137%" y="991.50">level..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.03%)</title><rect x="29.9523%" y="965" width="0.0340%" height="15" fill="rgb(219,0,2)" fg:x="880" fg:w="1"/><text x="30.2023%" y="975.50"></text></g><g><title>leveldb::Status::Status (2 samples, 0.07%)</title><rect x="29.9864%" y="981" width="0.0681%" height="15" fill="rgb(246,9,5)" fg:x="881" fg:w="2"/><text x="30.2364%" y="991.50"></text></g><g><title>leveldb::TableCache::Get (2 samples, 0.07%)</title><rect x="30.0545%" y="981" width="0.0681%" height="15" fill="rgb(226,159,4)" fg:x="883" fg:w="2"/><text x="30.3045%" y="991.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (2 samples, 0.07%)</title><rect x="30.1225%" y="981" width="0.0681%" height="15" fill="rgb(219,175,34)" fg:x="885" fg:w="2"/><text x="30.3725%" y="991.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (8 samples, 0.27%)</title><rect x="30.1906%" y="965" width="0.2723%" height="15" fill="rgb(236,10,46)" fg:x="887" fg:w="8"/><text x="30.4406%" y="975.50"></text></g><g><title>decltype  (3 samples, 0.10%)</title><rect x="30.3608%" y="949" width="0.1021%" height="15" fill="rgb(240,211,16)" fg:x="892" fg:w="3"/><text x="30.6108%" y="959.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (3 samples, 0.10%)</title><rect x="30.3608%" y="933" width="0.1021%" height="15" fill="rgb(205,3,43)" fg:x="892" fg:w="3"/><text x="30.6108%" y="943.50"></text></g><g><title>decltype (3 samples, 0.10%)</title><rect x="30.3608%" y="917" width="0.1021%" height="15" fill="rgb(245,7,22)" fg:x="892" fg:w="3"/><text x="30.6108%" y="927.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (144 samples, 4.90%)</title><rect x="25.5956%" y="997" width="4.9013%" height="15" fill="rgb(239,132,32)" fg:x="752" fg:w="144"/><text x="25.8456%" y="1007.50">CDBWra..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (9 samples, 0.31%)</title><rect x="30.1906%" y="981" width="0.3063%" height="15" fill="rgb(228,202,34)" fg:x="887" fg:w="9"/><text x="30.4406%" y="991.50"></text></g><g><title>void std::advance&lt;std::byte const*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="30.4629%" y="965" width="0.0340%" height="15" fill="rgb(254,200,22)" fg:x="895" fg:w="1"/><text x="30.7129%" y="975.50"></text></g><g><title>void std::__advance&lt;std::byte const*, long&gt; (1 samples, 0.03%)</title><rect x="30.4629%" y="949" width="0.0340%" height="15" fill="rgb(219,10,39)" fg:x="895" fg:w="1"/><text x="30.7129%" y="959.50"></text></g><g><title>leveldb::TableCache::Get (1 samples, 0.03%)</title><rect x="30.4969%" y="997" width="0.0340%" height="15" fill="rgb(226,210,39)" fg:x="896" fg:w="1"/><text x="30.7469%" y="1007.50"></text></g><g><title>CCoinsViewDB::GetCoin (146 samples, 4.97%)</title><rect x="25.5956%" y="1013" width="4.9694%" height="15" fill="rgb(208,219,16)" fg:x="752" fg:w="146"/><text x="25.8456%" y="1023.50">CCoins..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.03%)</title><rect x="30.5310%" y="997" width="0.0340%" height="15" fill="rgb(216,158,51)" fg:x="897" fg:w="1"/><text x="30.7810%" y="1007.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="30.5310%" y="981" width="0.0340%" height="15" fill="rgb(233,14,44)" fg:x="897" fg:w="1"/><text x="30.7810%" y="991.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="30.5310%" y="965" width="0.0340%" height="15" fill="rgb(237,97,39)" fg:x="897" fg:w="1"/><text x="30.7810%" y="975.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="30.5310%" y="949" width="0.0340%" height="15" fill="rgb(218,198,43)" fg:x="897" fg:w="1"/><text x="30.7810%" y="959.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="30.5310%" y="933" width="0.0340%" height="15" fill="rgb(231,104,20)" fg:x="897" fg:w="1"/><text x="30.7810%" y="943.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.03%)</title><rect x="30.5310%" y="917" width="0.0340%" height="15" fill="rgb(254,36,13)" fg:x="897" fg:w="1"/><text x="30.7810%" y="927.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="885" width="0.0340%" height="15" fill="rgb(248,14,50)" fg:x="898" fg:w="1"/><text x="30.8150%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="869" width="0.0340%" height="15" fill="rgb(217,107,29)" fg:x="898" fg:w="1"/><text x="30.8150%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="853" width="0.0340%" height="15" fill="rgb(251,169,33)" fg:x="898" fg:w="1"/><text x="30.8150%" y="863.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="837" width="0.0340%" height="15" fill="rgb(217,108,32)" fg:x="898" fg:w="1"/><text x="30.8150%" y="847.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="821" width="0.0340%" height="15" fill="rgb(219,66,42)" fg:x="898" fg:w="1"/><text x="30.8150%" y="831.50"></text></g><g><title>DataStream::write (1 samples, 0.03%)</title><rect x="30.5650%" y="805" width="0.0340%" height="15" fill="rgb(206,180,7)" fg:x="898" fg:w="1"/><text x="30.8150%" y="815.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="789" width="0.0340%" height="15" fill="rgb(208,226,31)" fg:x="898" fg:w="1"/><text x="30.8150%" y="799.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="773" width="0.0340%" height="15" fill="rgb(218,26,49)" fg:x="898" fg:w="1"/><text x="30.8150%" y="783.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.03%)</title><rect x="30.5650%" y="757" width="0.0340%" height="15" fill="rgb(233,197,48)" fg:x="898" fg:w="1"/><text x="30.8150%" y="767.50"></text></g><g><title>CCoinsViewBacked::GetCoin (1 samples, 0.03%)</title><rect x="30.5990%" y="773" width="0.0340%" height="15" fill="rgb(252,181,51)" fg:x="899" fg:w="1"/><text x="30.8490%" y="783.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.03%)</title><rect x="30.6331%" y="773" width="0.0340%" height="15" fill="rgb(253,90,19)" fg:x="900" fg:w="1"/><text x="30.8831%" y="783.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.03%)</title><rect x="30.6331%" y="757" width="0.0340%" height="15" fill="rgb(215,171,30)" fg:x="900" fg:w="1"/><text x="30.8831%" y="767.50"></text></g><g><title>DataStream::reserve (1 samples, 0.03%)</title><rect x="30.6331%" y="741" width="0.0340%" height="15" fill="rgb(214,222,9)" fg:x="900" fg:w="1"/><text x="30.8831%" y="751.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (1 samples, 0.03%)</title><rect x="30.6331%" y="725" width="0.0340%" height="15" fill="rgb(223,3,22)" fg:x="900" fg:w="1"/><text x="30.8831%" y="735.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="30.6331%" y="709" width="0.0340%" height="15" fill="rgb(225,196,46)" fg:x="900" fg:w="1"/><text x="30.8831%" y="719.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="30.6331%" y="693" width="0.0340%" height="15" fill="rgb(209,110,37)" fg:x="900" fg:w="1"/><text x="30.8831%" y="703.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="30.6331%" y="677" width="0.0340%" height="15" fill="rgb(249,89,12)" fg:x="900" fg:w="1"/><text x="30.8831%" y="687.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::allocate (1 samples, 0.03%)</title><rect x="30.6331%" y="661" width="0.0340%" height="15" fill="rgb(226,27,33)" fg:x="900" fg:w="1"/><text x="30.8831%" y="671.50"></text></g><g><title>std::allocator&lt;std::byte&gt;::allocate (1 samples, 0.03%)</title><rect x="30.6331%" y="645" width="0.0340%" height="15" fill="rgb(213,82,22)" fg:x="900" fg:w="1"/><text x="30.8831%" y="655.50"></text></g><g><title>std::__new_allocator&lt;std::byte&gt;::allocate (1 samples, 0.03%)</title><rect x="30.6331%" y="629" width="0.0340%" height="15" fill="rgb(248,140,0)" fg:x="900" fg:w="1"/><text x="30.8831%" y="639.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.07%)</title><rect x="30.6671%" y="773" width="0.0681%" height="15" fill="rgb(228,106,3)" fg:x="901" fg:w="2"/><text x="30.9171%" y="783.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.03%)</title><rect x="30.7012%" y="757" width="0.0340%" height="15" fill="rgb(209,23,37)" fg:x="902" fg:w="1"/><text x="30.9512%" y="767.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.03%)</title><rect x="30.7352%" y="581" width="0.0340%" height="15" fill="rgb(241,93,50)" fg:x="903" fg:w="1"/><text x="30.9852%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7352%" y="565" width="0.0340%" height="15" fill="rgb(253,46,43)" fg:x="903" fg:w="1"/><text x="30.9852%" y="575.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (6 samples, 0.20%)</title><rect x="30.5990%" y="885" width="0.2042%" height="15" fill="rgb(226,206,43)" fg:x="899" fg:w="6"/><text x="30.8490%" y="895.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (6 samples, 0.20%)</title><rect x="30.5990%" y="869" width="0.2042%" height="15" fill="rgb(217,54,7)" fg:x="899" fg:w="6"/><text x="30.8490%" y="879.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (6 samples, 0.20%)</title><rect x="30.5990%" y="853" width="0.2042%" height="15" fill="rgb(223,5,52)" fg:x="899" fg:w="6"/><text x="30.8490%" y="863.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (6 samples, 0.20%)</title><rect x="30.5990%" y="837" width="0.2042%" height="15" fill="rgb(206,52,46)" fg:x="899" fg:w="6"/><text x="30.8490%" y="847.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (6 samples, 0.20%)</title><rect x="30.5990%" y="821" width="0.2042%" height="15" fill="rgb(253,136,11)" fg:x="899" fg:w="6"/><text x="30.8490%" y="831.50"></text></g><g><title>DataStream::write (6 samples, 0.20%)</title><rect x="30.5990%" y="805" width="0.2042%" height="15" fill="rgb(208,106,33)" fg:x="899" fg:w="6"/><text x="30.8490%" y="815.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (6 samples, 0.20%)</title><rect x="30.5990%" y="789" width="0.2042%" height="15" fill="rgb(206,54,4)" fg:x="899" fg:w="6"/><text x="30.8490%" y="799.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.07%)</title><rect x="30.7352%" y="773" width="0.0681%" height="15" fill="rgb(213,3,15)" fg:x="903" fg:w="2"/><text x="30.9852%" y="783.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.07%)</title><rect x="30.7352%" y="757" width="0.0681%" height="15" fill="rgb(252,211,39)" fg:x="903" fg:w="2"/><text x="30.9852%" y="767.50"></text></g><g><title>decltype  (2 samples, 0.07%)</title><rect x="30.7352%" y="741" width="0.0681%" height="15" fill="rgb(223,6,36)" fg:x="903" fg:w="2"/><text x="30.9852%" y="751.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (2 samples, 0.07%)</title><rect x="30.7352%" y="725" width="0.0681%" height="15" fill="rgb(252,169,45)" fg:x="903" fg:w="2"/><text x="30.9852%" y="735.50"></text></g><g><title>decltype  (2 samples, 0.07%)</title><rect x="30.7352%" y="709" width="0.0681%" height="15" fill="rgb(212,48,26)" fg:x="903" fg:w="2"/><text x="30.9852%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="30.7352%" y="693" width="0.0681%" height="15" fill="rgb(251,102,48)" fg:x="903" fg:w="2"/><text x="30.9852%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="30.7352%" y="677" width="0.0681%" height="15" fill="rgb(243,208,16)" fg:x="903" fg:w="2"/><text x="30.9852%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="30.7352%" y="661" width="0.0681%" height="15" fill="rgb(219,96,24)" fg:x="903" fg:w="2"/><text x="30.9852%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="30.7352%" y="645" width="0.0681%" height="15" fill="rgb(219,33,29)" fg:x="903" fg:w="2"/><text x="30.9852%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="30.7352%" y="629" width="0.0681%" height="15" fill="rgb(223,176,5)" fg:x="903" fg:w="2"/><text x="30.9852%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="30.7352%" y="613" width="0.0681%" height="15" fill="rgb(228,140,14)" fg:x="903" fg:w="2"/><text x="30.9852%" y="623.50"></text></g><g><title>[[igc]] (2 samples, 0.07%)</title><rect x="30.7352%" y="597" width="0.0681%" height="15" fill="rgb(217,179,31)" fg:x="903" fg:w="2"/><text x="30.9852%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="581" width="0.0340%" height="15" fill="rgb(230,9,30)" fg:x="904" fg:w="1"/><text x="31.0192%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="565" width="0.0340%" height="15" fill="rgb(230,136,20)" fg:x="904" fg:w="1"/><text x="31.0192%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="549" width="0.0340%" height="15" fill="rgb(215,210,22)" fg:x="904" fg:w="1"/><text x="31.0192%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="533" width="0.0340%" height="15" fill="rgb(218,43,5)" fg:x="904" fg:w="1"/><text x="31.0192%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="517" width="0.0340%" height="15" fill="rgb(216,11,5)" fg:x="904" fg:w="1"/><text x="31.0192%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="501" width="0.0340%" height="15" fill="rgb(209,82,29)" fg:x="904" fg:w="1"/><text x="31.0192%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="485" width="0.0340%" height="15" fill="rgb(244,115,12)" fg:x="904" fg:w="1"/><text x="31.0192%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="469" width="0.0340%" height="15" fill="rgb(222,82,18)" fg:x="904" fg:w="1"/><text x="31.0192%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="453" width="0.0340%" height="15" fill="rgb(249,227,8)" fg:x="904" fg:w="1"/><text x="31.0192%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.7692%" y="437" width="0.0340%" height="15" fill="rgb(253,141,45)" fg:x="904" fg:w="1"/><text x="31.0192%" y="447.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.03%)</title><rect x="30.7692%" y="421" width="0.0340%" height="15" fill="rgb(234,184,4)" fg:x="904" fg:w="1"/><text x="31.0192%" y="431.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.03%)</title><rect x="30.7692%" y="405" width="0.0340%" height="15" fill="rgb(218,194,23)" fg:x="904" fg:w="1"/><text x="31.0192%" y="415.50"></text></g><g><title>[[nft_compat]] (1 samples, 0.03%)</title><rect x="30.7692%" y="389" width="0.0340%" height="15" fill="rgb(235,66,41)" fg:x="904" fg:w="1"/><text x="31.0192%" y="399.50"></text></g><g><title>[[xt_conntrack]] (1 samples, 0.03%)</title><rect x="30.7692%" y="373" width="0.0340%" height="15" fill="rgb(245,217,1)" fg:x="904" fg:w="1"/><text x="31.0192%" y="383.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.03%)</title><rect x="30.8033%" y="821" width="0.0340%" height="15" fill="rgb(229,91,1)" fg:x="905" fg:w="1"/><text x="31.0533%" y="831.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.10%)</title><rect x="30.8373%" y="821" width="0.1021%" height="15" fill="rgb(207,101,30)" fg:x="906" fg:w="3"/><text x="31.0873%" y="831.50"></text></g><g><title>CCoinsViewDB::GetCoin (163 samples, 5.55%)</title><rect x="25.5956%" y="1029" width="5.5480%" height="15" fill="rgb(223,82,49)" fg:x="752" fg:w="163"/><text x="25.8456%" y="1039.50">CCoinsV..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="1013" width="0.5786%" height="15" fill="rgb(218,167,17)" fg:x="898" fg:w="17"/><text x="30.8150%" y="1023.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="997" width="0.5786%" height="15" fill="rgb(208,103,14)" fg:x="898" fg:w="17"/><text x="30.8150%" y="1007.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="981" width="0.5786%" height="15" fill="rgb(238,20,8)" fg:x="898" fg:w="17"/><text x="30.8150%" y="991.50"></text></g><g><title>Serialize&lt;DataStream&gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="965" width="0.5786%" height="15" fill="rgb(218,80,54)" fg:x="898" fg:w="17"/><text x="30.8150%" y="975.50"></text></g><g><title>Ser&lt;DataStream&gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="949" width="0.5786%" height="15" fill="rgb(240,144,17)" fg:x="898" fg:w="17"/><text x="30.8150%" y="959.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="933" width="0.5786%" height="15" fill="rgb(245,27,50)" fg:x="898" fg:w="17"/><text x="30.8150%" y="943.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="917" width="0.5786%" height="15" fill="rgb(251,51,7)" fg:x="898" fg:w="17"/><text x="30.8150%" y="927.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (17 samples, 0.58%)</title><rect x="30.5650%" y="901" width="0.5786%" height="15" fill="rgb(245,217,29)" fg:x="898" fg:w="17"/><text x="30.8150%" y="911.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (10 samples, 0.34%)</title><rect x="30.8033%" y="885" width="0.3404%" height="15" fill="rgb(221,176,29)" fg:x="905" fg:w="10"/><text x="31.0533%" y="895.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (10 samples, 0.34%)</title><rect x="30.8033%" y="869" width="0.3404%" height="15" fill="rgb(212,180,24)" fg:x="905" fg:w="10"/><text x="31.0533%" y="879.50"></text></g><g><title>DataStream::write (10 samples, 0.34%)</title><rect x="30.8033%" y="853" width="0.3404%" height="15" fill="rgb(254,24,2)" fg:x="905" fg:w="10"/><text x="31.0533%" y="863.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (10 samples, 0.34%)</title><rect x="30.8033%" y="837" width="0.3404%" height="15" fill="rgb(230,100,2)" fg:x="905" fg:w="10"/><text x="31.0533%" y="847.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (6 samples, 0.20%)</title><rect x="30.9394%" y="821" width="0.2042%" height="15" fill="rgb(219,142,25)" fg:x="909" fg:w="6"/><text x="31.1894%" y="831.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (6 samples, 0.20%)</title><rect x="30.9394%" y="805" width="0.2042%" height="15" fill="rgb(240,73,43)" fg:x="909" fg:w="6"/><text x="31.1894%" y="815.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.20%)</title><rect x="30.9394%" y="789" width="0.2042%" height="15" fill="rgb(214,114,15)" fg:x="909" fg:w="6"/><text x="31.1894%" y="799.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.20%)</title><rect x="30.9394%" y="773" width="0.2042%" height="15" fill="rgb(207,130,4)" fg:x="909" fg:w="6"/><text x="31.1894%" y="783.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.20%)</title><rect x="30.9394%" y="757" width="0.2042%" height="15" fill="rgb(221,25,40)" fg:x="909" fg:w="6"/><text x="31.1894%" y="767.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.20%)</title><rect x="30.9394%" y="741" width="0.2042%" height="15" fill="rgb(241,184,7)" fg:x="909" fg:w="6"/><text x="31.1894%" y="751.50"></text></g><g><title>SipHashUint256Extra (56 samples, 1.91%)</title><rect x="31.1436%" y="1029" width="1.9061%" height="15" fill="rgb(235,159,4)" fg:x="915" fg:w="56"/><text x="31.3936%" y="1039.50">S..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (19 samples, 0.65%)</title><rect x="32.4030%" y="1013" width="0.6467%" height="15" fill="rgb(214,87,48)" fg:x="952" fg:w="19"/><text x="32.6530%" y="1023.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (19 samples, 0.65%)</title><rect x="32.4030%" y="997" width="0.6467%" height="15" fill="rgb(246,198,24)" fg:x="952" fg:w="19"/><text x="32.6530%" y="1007.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.03%)</title><rect x="33.0497%" y="1029" width="0.0340%" height="15" fill="rgb(209,66,40)" fg:x="971" fg:w="1"/><text x="33.2997%" y="1039.50"></text></g><g><title>leveldb::port::Mutex::Lock (1 samples, 0.03%)</title><rect x="33.0497%" y="1013" width="0.0340%" height="15" fill="rgb(233,147,39)" fg:x="971" fg:w="1"/><text x="33.2997%" y="1023.50"></text></g><g><title>std::mutex::lock (1 samples, 0.03%)</title><rect x="33.0497%" y="997" width="0.0340%" height="15" fill="rgb(231,145,52)" fg:x="971" fg:w="1"/><text x="33.2997%" y="1007.50"></text></g><g><title>CCoinsViewBacked::GetCoin (222 samples, 7.56%)</title><rect x="25.5616%" y="1045" width="7.5562%" height="15" fill="rgb(206,20,26)" fg:x="751" fg:w="222"/><text x="25.8116%" y="1055.50">CCoinsView..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="33.0837%" y="1029" width="0.0340%" height="15" fill="rgb(238,220,4)" fg:x="972" fg:w="1"/><text x="33.3337%" y="1039.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (1 samples, 0.03%)</title><rect x="33.1178%" y="1045" width="0.0340%" height="15" fill="rgb(252,195,42)" fg:x="973" fg:w="1"/><text x="33.3678%" y="1055.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.27%)</title><rect x="33.1518%" y="1045" width="0.2723%" height="15" fill="rgb(209,10,6)" fg:x="974" fg:w="8"/><text x="33.4018%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="33.2880%" y="1029" width="0.1361%" height="15" fill="rgb(229,3,52)" fg:x="978" fg:w="4"/><text x="33.5380%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.14%)</title><rect x="33.2880%" y="1013" width="0.1361%" height="15" fill="rgb(253,49,37)" fg:x="978" fg:w="4"/><text x="33.5380%" y="1023.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (239 samples, 8.13%)</title><rect x="25.5616%" y="1093" width="8.1348%" height="15" fill="rgb(240,103,49)" fg:x="751" fg:w="239"/><text x="25.8116%" y="1103.50">CCoinsViewE..</text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (239 samples, 8.13%)</title><rect x="25.5616%" y="1077" width="8.1348%" height="15" fill="rgb(250,182,30)" fg:x="751" fg:w="239"/><text x="25.8116%" y="1087.50">ExecuteBack..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (239 samples, 8.13%)</title><rect x="25.5616%" y="1061" width="8.1348%" height="15" fill="rgb(248,8,30)" fg:x="751" fg:w="239"/><text x="25.8116%" y="1071.50">CCoinsViewE..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.27%)</title><rect x="33.4241%" y="1045" width="0.2723%" height="15" fill="rgb(237,120,30)" fg:x="982" fg:w="8"/><text x="33.6741%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="33.6964%" y="1093" width="0.0340%" height="15" fill="rgb(221,146,34)" fg:x="990" fg:w="1"/><text x="33.9464%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="33.7304%" y="1045" width="0.0340%" height="15" fill="rgb(242,55,13)" fg:x="991" fg:w="1"/><text x="33.9804%" y="1055.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.03%)</title><rect x="34.3091%" y="1029" width="0.0340%" height="15" fill="rgb(242,112,31)" fg:x="1008" fg:w="1"/><text x="34.5591%" y="1039.50"></text></g><g><title>ReadLE64 (1 samples, 0.03%)</title><rect x="34.3091%" y="1013" width="0.0340%" height="15" fill="rgb(249,192,27)" fg:x="1008" fg:w="1"/><text x="34.5591%" y="1023.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="34.3091%" y="997" width="0.0340%" height="15" fill="rgb(208,204,44)" fg:x="1008" fg:w="1"/><text x="34.5591%" y="1007.50"></text></g><g><title>SipHashUint256Extra (27 samples, 0.92%)</title><rect x="33.7645%" y="1045" width="0.9190%" height="15" fill="rgb(208,93,54)" fg:x="992" fg:w="27"/><text x="34.0145%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (10 samples, 0.34%)</title><rect x="34.3431%" y="1029" width="0.3404%" height="15" fill="rgb(242,1,31)" fg:x="1009" fg:w="10"/><text x="34.5931%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (10 samples, 0.34%)</title><rect x="34.3431%" y="1013" width="0.3404%" height="15" fill="rgb(241,83,25)" fg:x="1009" fg:w="10"/><text x="34.5931%" y="1023.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.17%)</title><rect x="34.9217%" y="965" width="0.1702%" height="15" fill="rgb(205,169,50)" fg:x="1026" fg:w="5"/><text x="35.1717%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="35.0579%" y="949" width="0.0340%" height="15" fill="rgb(239,186,37)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="959.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="35.0579%" y="933" width="0.0340%" height="15" fill="rgb(205,221,10)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="917" width="0.0340%" height="15" fill="rgb(218,196,15)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="901" width="0.0340%" height="15" fill="rgb(218,196,35)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="885" width="0.0340%" height="15" fill="rgb(233,63,24)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="869" width="0.0340%" height="15" fill="rgb(225,8,4)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="853" width="0.0340%" height="15" fill="rgb(234,105,35)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="837" width="0.0340%" height="15" fill="rgb(236,21,32)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="847.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="35.0579%" y="821" width="0.0340%" height="15" fill="rgb(228,109,6)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="805" width="0.0340%" height="15" fill="rgb(229,215,31)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="789" width="0.0340%" height="15" fill="rgb(221,52,54)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="773" width="0.0340%" height="15" fill="rgb(252,129,43)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="757" width="0.0340%" height="15" fill="rgb(248,183,27)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="741" width="0.0340%" height="15" fill="rgb(250,0,22)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="725" width="0.0340%" height="15" fill="rgb(213,166,10)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0579%" y="709" width="0.0340%" height="15" fill="rgb(207,163,36)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="719.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.03%)</title><rect x="35.0579%" y="693" width="0.0340%" height="15" fill="rgb(208,122,22)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="703.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.03%)</title><rect x="35.0579%" y="677" width="0.0340%" height="15" fill="rgb(207,104,49)" fg:x="1030" fg:w="1"/><text x="35.3079%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0919%" y="965" width="0.0340%" height="15" fill="rgb(248,211,50)" fg:x="1031" fg:w="1"/><text x="35.3419%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0919%" y="949" width="0.0340%" height="15" fill="rgb(217,13,45)" fg:x="1031" fg:w="1"/><text x="35.3419%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0919%" y="933" width="0.0340%" height="15" fill="rgb(211,216,49)" fg:x="1031" fg:w="1"/><text x="35.3419%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.0919%" y="917" width="0.0340%" height="15" fill="rgb(221,58,53)" fg:x="1031" fg:w="1"/><text x="35.3419%" y="927.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.51%)</title><rect x="34.6835%" y="1045" width="0.5106%" height="15" fill="rgb(220,112,41)" fg:x="1019" fg:w="15"/><text x="34.9335%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.27%)</title><rect x="34.9217%" y="1029" width="0.2723%" height="15" fill="rgb(236,38,28)" fg:x="1026" fg:w="8"/><text x="35.1717%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.27%)</title><rect x="34.9217%" y="1013" width="0.2723%" height="15" fill="rgb(227,195,22)" fg:x="1026" fg:w="8"/><text x="35.1717%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.27%)</title><rect x="34.9217%" y="997" width="0.2723%" height="15" fill="rgb(214,55,33)" fg:x="1026" fg:w="8"/><text x="35.1717%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.27%)</title><rect x="34.9217%" y="981" width="0.2723%" height="15" fill="rgb(248,80,13)" fg:x="1026" fg:w="8"/><text x="35.1717%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.07%)</title><rect x="35.1259%" y="965" width="0.0681%" height="15" fill="rgb(238,52,6)" fg:x="1032" fg:w="2"/><text x="35.3759%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.07%)</title><rect x="35.1940%" y="1045" width="0.0681%" height="15" fill="rgb(224,198,47)" fg:x="1034" fg:w="2"/><text x="35.4440%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (47 samples, 1.60%)</title><rect x="33.7304%" y="1061" width="1.5997%" height="15" fill="rgb(233,171,20)" fg:x="991" fg:w="47"/><text x="33.9804%" y="1071.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.07%)</title><rect x="35.2621%" y="1045" width="0.0681%" height="15" fill="rgb(241,30,25)" fg:x="1036" fg:w="2"/><text x="35.5121%" y="1055.50"></text></g><g><title>decltype  (2 samples, 0.07%)</title><rect x="35.2621%" y="1029" width="0.0681%" height="15" fill="rgb(207,171,38)" fg:x="1036" fg:w="2"/><text x="35.5121%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.07%)</title><rect x="35.2621%" y="1013" width="0.0681%" height="15" fill="rgb(234,70,1)" fg:x="1036" fg:w="2"/><text x="35.5121%" y="1023.50"></text></g><g><title>decltype  (2 samples, 0.07%)</title><rect x="35.2621%" y="997" width="0.0681%" height="15" fill="rgb(232,178,18)" fg:x="1036" fg:w="2"/><text x="35.5121%" y="1007.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (2 samples, 0.07%)</title><rect x="35.2621%" y="981" width="0.0681%" height="15" fill="rgb(241,78,40)" fg:x="1036" fg:w="2"/><text x="35.5121%" y="991.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (2 samples, 0.07%)</title><rect x="35.2621%" y="965" width="0.0681%" height="15" fill="rgb(222,35,25)" fg:x="1036" fg:w="2"/><text x="35.5121%" y="975.50"></text></g><g><title>CCoinsCacheEntry::CCoinsCacheEntry (1 samples, 0.03%)</title><rect x="35.2961%" y="949" width="0.0340%" height="15" fill="rgb(207,92,16)" fg:x="1037" fg:w="1"/><text x="35.5461%" y="959.50"></text></g><g><title>Coin::Coin (1 samples, 0.03%)</title><rect x="35.2961%" y="933" width="0.0340%" height="15" fill="rgb(216,59,51)" fg:x="1037" fg:w="1"/><text x="35.5461%" y="943.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="35.2961%" y="917" width="0.0340%" height="15" fill="rgb(213,80,28)" fg:x="1037" fg:w="1"/><text x="35.5461%" y="927.50"></text></g><g><title>CTxOut::SetNull (1 samples, 0.03%)</title><rect x="35.2961%" y="901" width="0.0340%" height="15" fill="rgb(220,93,7)" fg:x="1037" fg:w="1"/><text x="35.5461%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.03%)</title><rect x="35.3302%" y="1061" width="0.0340%" height="15" fill="rgb(225,24,44)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.03%)</title><rect x="35.3302%" y="1045" width="0.0340%" height="15" fill="rgb(243,74,40)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="35.3302%" y="1029" width="0.0340%" height="15" fill="rgb(228,39,7)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="35.3302%" y="1013" width="0.0340%" height="15" fill="rgb(227,79,8)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="35.3302%" y="997" width="0.0340%" height="15" fill="rgb(236,58,11)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="35.3302%" y="981" width="0.0340%" height="15" fill="rgb(249,63,35)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="991.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="35.3302%" y="965" width="0.0340%" height="15" fill="rgb(252,114,16)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="35.3302%" y="949" width="0.0340%" height="15" fill="rgb(254,151,24)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="959.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="35.3302%" y="933" width="0.0340%" height="15" fill="rgb(253,54,39)" fg:x="1038" fg:w="1"/><text x="35.5802%" y="943.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (50 samples, 1.70%)</title><rect x="33.7304%" y="1093" width="1.7018%" height="15" fill="rgb(243,25,45)" fg:x="991" fg:w="50"/><text x="33.9804%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (50 samples, 1.70%)</title><rect x="33.7304%" y="1077" width="1.7018%" height="15" fill="rgb(234,134,9)" fg:x="991" fg:w="50"/><text x="33.9804%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.07%)</title><rect x="35.3642%" y="1061" width="0.0681%" height="15" fill="rgb(227,166,31)" fg:x="1039" fg:w="2"/><text x="35.6142%" y="1071.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="35.3642%" y="1045" width="0.0681%" height="15" fill="rgb(245,143,41)" fg:x="1039" fg:w="2"/><text x="35.6142%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="35.3982%" y="1029" width="0.0340%" height="15" fill="rgb(238,181,32)" fg:x="1040" fg:w="1"/><text x="35.6482%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="35.3982%" y="1013" width="0.0340%" height="15" fill="rgb(224,113,18)" fg:x="1040" fg:w="1"/><text x="35.6482%" y="1023.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="35.4323%" y="1061" width="0.0340%" height="15" fill="rgb(240,229,28)" fg:x="1041" fg:w="1"/><text x="35.6823%" y="1071.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1 samples, 0.03%)</title><rect x="35.4323%" y="1045" width="0.0340%" height="15" fill="rgb(250,185,3)" fg:x="1041" fg:w="1"/><text x="35.6823%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.03%)</title><rect x="35.4323%" y="1029" width="0.0340%" height="15" fill="rgb(212,59,25)" fg:x="1041" fg:w="1"/><text x="35.6823%" y="1039.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="35.4663%" y="1061" width="0.0340%" height="15" fill="rgb(221,87,20)" fg:x="1042" fg:w="1"/><text x="35.7163%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.03%)</title><rect x="35.5003%" y="1061" width="0.0340%" height="15" fill="rgb(213,74,28)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="35.5003%" y="1045" width="0.0340%" height="15" fill="rgb(224,132,34)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="1055.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="35.5003%" y="1029" width="0.0340%" height="15" fill="rgb(222,101,24)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="35.5003%" y="1013" width="0.0340%" height="15" fill="rgb(254,142,4)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="1023.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="35.5003%" y="997" width="0.0340%" height="15" fill="rgb(230,229,49)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="1007.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.03%)</title><rect x="35.5003%" y="981" width="0.0340%" height="15" fill="rgb(238,70,47)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="991.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.03%)</title><rect x="35.5003%" y="965" width="0.0340%" height="15" fill="rgb(231,160,17)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="975.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.03%)</title><rect x="35.5003%" y="949" width="0.0340%" height="15" fill="rgb(218,68,53)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="959.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="35.5003%" y="933" width="0.0340%" height="15" fill="rgb(236,111,10)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="943.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.03%)</title><rect x="35.5003%" y="917" width="0.0340%" height="15" fill="rgb(224,34,41)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="927.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (1 samples, 0.03%)</title><rect x="35.5003%" y="901" width="0.0340%" height="15" fill="rgb(241,118,19)" fg:x="1043" fg:w="1"/><text x="35.7503%" y="911.50"></text></g><g><title>CCoinsViewCache::FetchCoin (294 samples, 10.01%)</title><rect x="25.5616%" y="1109" width="10.0068%" height="15" fill="rgb(238,129,25)" fg:x="751" fg:w="294"/><text x="25.8116%" y="1119.50">CCoinsViewCach..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (4 samples, 0.14%)</title><rect x="35.4323%" y="1093" width="0.1361%" height="15" fill="rgb(238,22,31)" fg:x="1041" fg:w="4"/><text x="35.6823%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (4 samples, 0.14%)</title><rect x="35.4323%" y="1077" width="0.1361%" height="15" fill="rgb(222,174,48)" fg:x="1041" fg:w="4"/><text x="35.6823%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.03%)</title><rect x="35.5344%" y="1061" width="0.0340%" height="15" fill="rgb(206,152,40)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_get_previous_node (1 samples, 0.03%)</title><rect x="35.5344%" y="1045" width="0.0340%" height="15" fill="rgb(218,99,54)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="1029" width="0.0340%" height="15" fill="rgb(220,174,26)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="1013" width="0.0340%" height="15" fill="rgb(245,116,9)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="997" width="0.0340%" height="15" fill="rgb(209,72,35)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="981" width="0.0340%" height="15" fill="rgb(226,126,21)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="965" width="0.0340%" height="15" fill="rgb(227,192,1)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="949" width="0.0340%" height="15" fill="rgb(237,180,29)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="959.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="35.5344%" y="933" width="0.0340%" height="15" fill="rgb(230,197,35)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="917" width="0.0340%" height="15" fill="rgb(246,193,31)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="901" width="0.0340%" height="15" fill="rgb(241,36,4)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="35.5344%" y="885" width="0.0340%" height="15" fill="rgb(241,130,17)" fg:x="1044" fg:w="1"/><text x="35.7844%" y="895.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.03%)</title><rect x="35.5684%" y="1109" width="0.0340%" height="15" fill="rgb(206,137,32)" fg:x="1045" fg:w="1"/><text x="35.8184%" y="1119.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.03%)</title><rect x="35.5684%" y="1093" width="0.0340%" height="15" fill="rgb(237,228,51)" fg:x="1045" fg:w="1"/><text x="35.8184%" y="1103.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.17%)</title><rect x="35.6025%" y="1109" width="0.1702%" height="15" fill="rgb(243,6,42)" fg:x="1046" fg:w="5"/><text x="35.8525%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="35.6705%" y="1093" width="0.1021%" height="15" fill="rgb(251,74,28)" fg:x="1048" fg:w="3"/><text x="35.9205%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="35.6705%" y="1077" width="0.1021%" height="15" fill="rgb(218,20,49)" fg:x="1048" fg:w="3"/><text x="35.9205%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (301 samples, 10.25%)</title><rect x="25.5616%" y="1125" width="10.2451%" height="15" fill="rgb(238,28,14)" fg:x="751" fg:w="301"/><text x="25.8116%" y="1135.50">CCoinsViewCache..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.03%)</title><rect x="35.7726%" y="1109" width="0.0340%" height="15" fill="rgb(229,40,46)" fg:x="1051" fg:w="1"/><text x="36.0226%" y="1119.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.03%)</title><rect x="35.8067%" y="1125" width="0.0340%" height="15" fill="rgb(244,195,20)" fg:x="1052" fg:w="1"/><text x="36.0567%" y="1135.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.03%)</title><rect x="35.8067%" y="1109" width="0.0340%" height="15" fill="rgb(253,56,35)" fg:x="1052" fg:w="1"/><text x="36.0567%" y="1119.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.20%)</title><rect x="35.8407%" y="1125" width="0.2042%" height="15" fill="rgb(210,149,44)" fg:x="1053" fg:w="6"/><text x="36.0907%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="35.9769%" y="1109" width="0.0681%" height="15" fill="rgb(240,135,12)" fg:x="1057" fg:w="2"/><text x="36.2269%" y="1119.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="35.9769%" y="1093" width="0.0681%" height="15" fill="rgb(251,24,50)" fg:x="1057" fg:w="2"/><text x="36.2269%" y="1103.50"></text></g><g><title>Chainstate::ConnectBlock (3 samples, 0.10%)</title><rect x="36.0449%" y="1093" width="0.1021%" height="15" fill="rgb(243,200,47)" fg:x="1059" fg:w="3"/><text x="36.2949%" y="1103.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="36.1470%" y="1093" width="0.0340%" height="15" fill="rgb(224,166,26)" fg:x="1062" fg:w="1"/><text x="36.3970%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (3 samples, 0.10%)</title><rect x="36.1811%" y="1093" width="0.1021%" height="15" fill="rgb(233,0,47)" fg:x="1063" fg:w="3"/><text x="36.4311%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.03%)</title><rect x="36.2832%" y="1093" width="0.0340%" height="15" fill="rgb(253,80,5)" fg:x="1066" fg:w="1"/><text x="36.5332%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.03%)</title><rect x="36.2832%" y="1077" width="0.0340%" height="15" fill="rgb(214,133,25)" fg:x="1066" fg:w="1"/><text x="36.5332%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.03%)</title><rect x="36.2832%" y="1061" width="0.0340%" height="15" fill="rgb(209,27,14)" fg:x="1066" fg:w="1"/><text x="36.5332%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.03%)</title><rect x="36.2832%" y="1045" width="0.0340%" height="15" fill="rgb(219,102,51)" fg:x="1066" fg:w="1"/><text x="36.5332%" y="1055.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (1 samples, 0.03%)</title><rect x="36.2832%" y="1029" width="0.0340%" height="15" fill="rgb(237,18,16)" fg:x="1066" fg:w="1"/><text x="36.5332%" y="1039.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.03%)</title><rect x="36.2832%" y="1013" width="0.0340%" height="15" fill="rgb(241,85,17)" fg:x="1066" fg:w="1"/><text x="36.5332%" y="1023.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.14%)</title><rect x="36.3172%" y="1077" width="0.1361%" height="15" fill="rgb(236,90,42)" fg:x="1067" fg:w="4"/><text x="36.5672%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="36.3853%" y="1061" width="0.0681%" height="15" fill="rgb(249,57,21)" fg:x="1069" fg:w="2"/><text x="36.6353%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="36.3853%" y="1045" width="0.0681%" height="15" fill="rgb(243,12,36)" fg:x="1069" fg:w="2"/><text x="36.6353%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.17%)</title><rect x="36.3172%" y="1093" width="0.1702%" height="15" fill="rgb(253,128,47)" fg:x="1067" fg:w="5"/><text x="36.5672%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.03%)</title><rect x="36.4534%" y="1077" width="0.0340%" height="15" fill="rgb(207,33,20)" fg:x="1071" fg:w="1"/><text x="36.7034%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_get_previous_node (1 samples, 0.03%)</title><rect x="36.4534%" y="1061" width="0.0340%" height="15" fill="rgb(233,215,35)" fg:x="1071" fg:w="1"/><text x="36.7034%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.27%)</title><rect x="36.4874%" y="1093" width="0.2723%" height="15" fill="rgb(249,188,52)" fg:x="1072" fg:w="8"/><text x="36.7374%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (8 samples, 0.27%)</title><rect x="36.4874%" y="1077" width="0.2723%" height="15" fill="rgb(225,12,32)" fg:x="1072" fg:w="8"/><text x="36.7374%" y="1087.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.24%)</title><rect x="36.5214%" y="1061" width="0.2383%" height="15" fill="rgb(247,98,14)" fg:x="1073" fg:w="7"/><text x="36.7714%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="36.7257%" y="1045" width="0.0340%" height="15" fill="rgb(247,219,48)" fg:x="1079" fg:w="1"/><text x="36.9757%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="36.7257%" y="1029" width="0.0340%" height="15" fill="rgb(253,60,48)" fg:x="1079" fg:w="1"/><text x="36.9757%" y="1039.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (22 samples, 0.75%)</title><rect x="36.0449%" y="1125" width="0.7488%" height="15" fill="rgb(245,15,52)" fg:x="1059" fg:w="22"/><text x="36.2949%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (22 samples, 0.75%)</title><rect x="36.0449%" y="1109" width="0.7488%" height="15" fill="rgb(220,133,28)" fg:x="1059" fg:w="22"/><text x="36.2949%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (1 samples, 0.03%)</title><rect x="36.7597%" y="1093" width="0.0340%" height="15" fill="rgb(217,180,4)" fg:x="1080" fg:w="1"/><text x="37.0097%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node_base*, 144ul, 8ul&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="36.7597%" y="1077" width="0.0340%" height="15" fill="rgb(251,24,1)" fg:x="1080" fg:w="1"/><text x="37.0097%" y="1087.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node_base*, 144ul, 8ul&gt;::allocate (1 samples, 0.03%)</title><rect x="36.7597%" y="1061" width="0.0340%" height="15" fill="rgb(212,185,49)" fg:x="1080" fg:w="1"/><text x="37.0097%" y="1071.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.03%)</title><rect x="36.7597%" y="1045" width="0.0340%" height="15" fill="rgb(215,175,22)" fg:x="1080" fg:w="1"/><text x="37.0097%" y="1055.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.03%)</title><rect x="36.7597%" y="1029" width="0.0340%" height="15" fill="rgb(250,205,14)" fg:x="1080" fg:w="1"/><text x="37.0097%" y="1039.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="36.7937%" y="1093" width="0.0681%" height="15" fill="rgb(225,211,22)" fg:x="1081" fg:w="2"/><text x="37.0437%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="36.8278%" y="1077" width="0.0340%" height="15" fill="rgb(251,179,42)" fg:x="1082" fg:w="1"/><text x="37.0778%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="36.8278%" y="1061" width="0.0340%" height="15" fill="rgb(208,216,51)" fg:x="1082" fg:w="1"/><text x="37.0778%" y="1071.50"></text></g><g><title>CCoinsViewCache::FetchCoin (338 samples, 11.50%)</title><rect x="25.5276%" y="1141" width="11.5044%" height="15" fill="rgb(235,36,11)" fg:x="750" fg:w="338"/><text x="25.7776%" y="1151.50">CCoinsViewCache::..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (7 samples, 0.24%)</title><rect x="36.7937%" y="1125" width="0.2383%" height="15" fill="rgb(213,189,28)" fg:x="1081" fg:w="7"/><text x="37.0437%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (7 samples, 0.24%)</title><rect x="36.7937%" y="1109" width="0.2383%" height="15" fill="rgb(227,203,42)" fg:x="1081" fg:w="7"/><text x="37.0437%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (5 samples, 0.17%)</title><rect x="36.8618%" y="1093" width="0.1702%" height="15" fill="rgb(244,72,36)" fg:x="1083" fg:w="5"/><text x="37.1118%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.14%)</title><rect x="36.8958%" y="1077" width="0.1361%" height="15" fill="rgb(213,53,17)" fg:x="1084" fg:w="4"/><text x="37.1458%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.14%)</title><rect x="36.8958%" y="1061" width="0.1361%" height="15" fill="rgb(207,167,3)" fg:x="1084" fg:w="4"/><text x="37.1458%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.14%)</title><rect x="36.8958%" y="1045" width="0.1361%" height="15" fill="rgb(216,98,30)" fg:x="1084" fg:w="4"/><text x="37.1458%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.14%)</title><rect x="36.8958%" y="1029" width="0.1361%" height="15" fill="rgb(236,123,15)" fg:x="1084" fg:w="4"/><text x="37.1458%" y="1039.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.14%)</title><rect x="36.8958%" y="1013" width="0.1361%" height="15" fill="rgb(248,81,50)" fg:x="1084" fg:w="4"/><text x="37.1458%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="36.9980%" y="997" width="0.0340%" height="15" fill="rgb(214,120,4)" fg:x="1087" fg:w="1"/><text x="37.2480%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="36.9980%" y="981" width="0.0340%" height="15" fill="rgb(208,179,34)" fg:x="1087" fg:w="1"/><text x="37.2480%" y="991.50"></text></g><g><title>CCoinsViewCache::HaveCoin (341 samples, 11.61%)</title><rect x="25.5276%" y="1157" width="11.6065%" height="15" fill="rgb(227,140,7)" fg:x="750" fg:w="341"/><text x="25.7776%" y="1167.50">CCoinsViewCache::..</text></g><g><title>SipHashUint256Extra (3 samples, 0.10%)</title><rect x="37.0320%" y="1141" width="0.1021%" height="15" fill="rgb(214,22,6)" fg:x="1088" fg:w="3"/><text x="37.2820%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="37.0660%" y="1125" width="0.0681%" height="15" fill="rgb(207,137,27)" fg:x="1089" fg:w="2"/><text x="37.3160%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="37.0660%" y="1109" width="0.0681%" height="15" fill="rgb(210,8,46)" fg:x="1089" fg:w="2"/><text x="37.3160%" y="1119.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.03%)</title><rect x="37.1341%" y="1157" width="0.0340%" height="15" fill="rgb(240,16,54)" fg:x="1091" fg:w="1"/><text x="37.3841%" y="1167.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.03%)</title><rect x="37.1681%" y="1157" width="0.0340%" height="15" fill="rgb(211,209,29)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1167.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.03%)</title><rect x="37.1681%" y="1141" width="0.0340%" height="15" fill="rgb(226,228,24)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1151.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.03%)</title><rect x="37.1681%" y="1125" width="0.0340%" height="15" fill="rgb(222,84,9)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.03%)</title><rect x="37.1681%" y="1109" width="0.0340%" height="15" fill="rgb(234,203,30)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.03%)</title><rect x="37.1681%" y="1093" width="0.0340%" height="15" fill="rgb(238,109,14)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1103.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.03%)</title><rect x="37.1681%" y="1077" width="0.0340%" height="15" fill="rgb(233,206,34)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1087.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.03%)</title><rect x="37.1681%" y="1061" width="0.0340%" height="15" fill="rgb(220,167,47)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1071.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.03%)</title><rect x="37.1681%" y="1045" width="0.0340%" height="15" fill="rgb(238,105,10)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1055.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.03%)</title><rect x="37.1681%" y="1029" width="0.0340%" height="15" fill="rgb(213,227,17)" fg:x="1092" fg:w="1"/><text x="37.4181%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.03%)</title><rect x="37.2022%" y="1077" width="0.0340%" height="15" fill="rgb(217,132,38)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.03%)</title><rect x="37.2022%" y="1061" width="0.0340%" height="15" fill="rgb(242,146,4)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="1071.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.03%)</title><rect x="37.2022%" y="1045" width="0.0340%" height="15" fill="rgb(212,61,9)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="1055.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.03%)</title><rect x="37.2022%" y="1029" width="0.0340%" height="15" fill="rgb(247,126,22)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="1039.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="37.2022%" y="1013" width="0.0340%" height="15" fill="rgb(220,196,2)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="37.2022%" y="997" width="0.0340%" height="15" fill="rgb(208,46,4)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="1007.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="37.2022%" y="981" width="0.0340%" height="15" fill="rgb(252,104,46)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="37.2022%" y="965" width="0.0340%" height="15" fill="rgb(237,152,48)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="975.50"></text></g><g><title>Coin::Coin (1 samples, 0.03%)</title><rect x="37.2022%" y="949" width="0.0340%" height="15" fill="rgb(221,59,37)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="959.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="37.2022%" y="933" width="0.0340%" height="15" fill="rgb(209,202,51)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="943.50"></text></g><g><title>CScript::CScript (1 samples, 0.03%)</title><rect x="37.2022%" y="917" width="0.0340%" height="15" fill="rgb(228,81,30)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="927.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.03%)</title><rect x="37.2022%" y="901" width="0.0340%" height="15" fill="rgb(227,42,39)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="911.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="37.2022%" y="885" width="0.0340%" height="15" fill="rgb(221,26,2)" fg:x="1093" fg:w="1"/><text x="37.4522%" y="895.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.07%)</title><rect x="37.2362%" y="1045" width="0.0681%" height="15" fill="rgb(254,61,31)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="1055.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.07%)</title><rect x="37.2362%" y="1029" width="0.0681%" height="15" fill="rgb(222,173,38)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="1039.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.07%)</title><rect x="37.2362%" y="1013" width="0.0681%" height="15" fill="rgb(218,50,12)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="37.2362%" y="997" width="0.0681%" height="15" fill="rgb(223,88,40)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="1007.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="37.2362%" y="981" width="0.0681%" height="15" fill="rgb(237,54,19)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="37.2362%" y="965" width="0.0681%" height="15" fill="rgb(251,129,25)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="975.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="37.2362%" y="949" width="0.0681%" height="15" fill="rgb(238,97,19)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="959.50"></text></g><g><title>Coin::Coin (2 samples, 0.07%)</title><rect x="37.2362%" y="933" width="0.0681%" height="15" fill="rgb(240,169,18)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="943.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.07%)</title><rect x="37.2362%" y="917" width="0.0681%" height="15" fill="rgb(230,187,49)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="927.50"></text></g><g><title>CScript::CScript (2 samples, 0.07%)</title><rect x="37.2362%" y="901" width="0.0681%" height="15" fill="rgb(209,44,26)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="911.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.07%)</title><rect x="37.2362%" y="885" width="0.0681%" height="15" fill="rgb(244,0,6)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="895.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.07%)</title><rect x="37.2362%" y="869" width="0.0681%" height="15" fill="rgb(248,18,21)" fg:x="1094" fg:w="2"/><text x="37.4862%" y="879.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.14%)</title><rect x="37.2022%" y="1125" width="0.1361%" height="15" fill="rgb(245,180,19)" fg:x="1093" fg:w="4"/><text x="37.4522%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (4 samples, 0.14%)</title><rect x="37.2022%" y="1109" width="0.1361%" height="15" fill="rgb(252,118,36)" fg:x="1093" fg:w="4"/><text x="37.4522%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (4 samples, 0.14%)</title><rect x="37.2022%" y="1093" width="0.1361%" height="15" fill="rgb(210,224,19)" fg:x="1093" fg:w="4"/><text x="37.4522%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.10%)</title><rect x="37.2362%" y="1077" width="0.1021%" height="15" fill="rgb(218,30,24)" fg:x="1094" fg:w="3"/><text x="37.4862%" y="1087.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.10%)</title><rect x="37.2362%" y="1061" width="0.1021%" height="15" fill="rgb(219,75,50)" fg:x="1094" fg:w="3"/><text x="37.4862%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="37.3043%" y="1045" width="0.0340%" height="15" fill="rgb(234,72,50)" fg:x="1096" fg:w="1"/><text x="37.5543%" y="1055.50"></text></g><g><title>CCoinsViewCache::GetCoin (4 samples, 0.14%)</title><rect x="37.3383%" y="1125" width="0.1361%" height="15" fill="rgb(219,100,48)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1135.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (4 samples, 0.14%)</title><rect x="37.3383%" y="1109" width="0.1361%" height="15" fill="rgb(253,5,41)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (4 samples, 0.14%)</title><rect x="37.3383%" y="1093" width="0.1361%" height="15" fill="rgb(247,181,11)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="37.3383%" y="1077" width="0.1361%" height="15" fill="rgb(222,223,25)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="37.3383%" y="1061" width="0.1361%" height="15" fill="rgb(214,198,28)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="37.3383%" y="1045" width="0.1361%" height="15" fill="rgb(230,46,43)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (4 samples, 0.14%)</title><rect x="37.3383%" y="1029" width="0.1361%" height="15" fill="rgb(233,65,53)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1039.50"></text></g><g><title>Coin::Coin (4 samples, 0.14%)</title><rect x="37.3383%" y="1013" width="0.1361%" height="15" fill="rgb(221,121,27)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1023.50"></text></g><g><title>CTxOut::CTxOut (4 samples, 0.14%)</title><rect x="37.3383%" y="997" width="0.1361%" height="15" fill="rgb(247,70,47)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="1007.50"></text></g><g><title>CScript::CScript (4 samples, 0.14%)</title><rect x="37.3383%" y="981" width="0.1361%" height="15" fill="rgb(228,85,35)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (4 samples, 0.14%)</title><rect x="37.3383%" y="965" width="0.1361%" height="15" fill="rgb(209,50,18)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.14%)</title><rect x="37.3383%" y="949" width="0.1361%" height="15" fill="rgb(250,19,35)" fg:x="1097" fg:w="4"/><text x="37.5883%" y="959.50"></text></g><g><title>CCoinsViewCache::AccessCoin (9 samples, 0.31%)</title><rect x="37.2022%" y="1141" width="0.3063%" height="15" fill="rgb(253,107,29)" fg:x="1093" fg:w="9"/><text x="37.4522%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="37.4745%" y="1125" width="0.0340%" height="15" fill="rgb(252,179,29)" fg:x="1101" fg:w="1"/><text x="37.7245%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (6 samples, 0.20%)</title><rect x="37.5085%" y="1141" width="0.2042%" height="15" fill="rgb(238,194,6)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (6 samples, 0.20%)</title><rect x="37.5085%" y="1125" width="0.2042%" height="15" fill="rgb(238,164,29)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (6 samples, 0.20%)</title><rect x="37.5085%" y="1109" width="0.2042%" height="15" fill="rgb(224,25,9)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (6 samples, 0.20%)</title><rect x="37.5085%" y="1093" width="0.2042%" height="15" fill="rgb(244,153,23)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (6 samples, 0.20%)</title><rect x="37.5085%" y="1077" width="0.2042%" height="15" fill="rgb(212,203,14)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (6 samples, 0.20%)</title><rect x="37.5085%" y="1061" width="0.2042%" height="15" fill="rgb(220,164,20)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (6 samples, 0.20%)</title><rect x="37.5085%" y="1045" width="0.2042%" height="15" fill="rgb(222,203,48)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1055.50"></text></g><g><title>Coin::Coin (6 samples, 0.20%)</title><rect x="37.5085%" y="1029" width="0.2042%" height="15" fill="rgb(215,159,22)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (6 samples, 0.20%)</title><rect x="37.5085%" y="1013" width="0.2042%" height="15" fill="rgb(216,183,47)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1023.50"></text></g><g><title>CScript::CScript (6 samples, 0.20%)</title><rect x="37.5085%" y="997" width="0.2042%" height="15" fill="rgb(229,195,25)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (6 samples, 0.20%)</title><rect x="37.5085%" y="981" width="0.2042%" height="15" fill="rgb(224,132,51)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (6 samples, 0.20%)</title><rect x="37.5085%" y="965" width="0.2042%" height="15" fill="rgb(240,63,7)" fg:x="1102" fg:w="6"/><text x="37.7585%" y="975.50"></text></g><g><title>leveldb::Block::Iter::Compare (1 samples, 0.03%)</title><rect x="37.7127%" y="837" width="0.0340%" height="15" fill="rgb(249,182,41)" fg:x="1108" fg:w="1"/><text x="37.9627%" y="847.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="37.7127%" y="821" width="0.0340%" height="15" fill="rgb(243,47,26)" fg:x="1108" fg:w="1"/><text x="37.9627%" y="831.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.03%)</title><rect x="37.7127%" y="805" width="0.0340%" height="15" fill="rgb(233,48,2)" fg:x="1108" fg:w="1"/><text x="37.9627%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.07%)</title><rect x="37.7127%" y="853" width="0.0681%" height="15" fill="rgb(244,165,34)" fg:x="1108" fg:w="2"/><text x="37.9627%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.03%)</title><rect x="37.7468%" y="837" width="0.0340%" height="15" fill="rgb(207,89,7)" fg:x="1109" fg:w="1"/><text x="37.9968%" y="847.50"></text></g><g><title>leveldb::Block::Iter::Compare (1 samples, 0.03%)</title><rect x="37.7468%" y="821" width="0.0340%" height="15" fill="rgb(244,117,36)" fg:x="1109" fg:w="1"/><text x="37.9968%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="37.7468%" y="805" width="0.0340%" height="15" fill="rgb(226,144,34)" fg:x="1109" fg:w="1"/><text x="37.9968%" y="815.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.03%)</title><rect x="37.7468%" y="789" width="0.0340%" height="15" fill="rgb(213,23,19)" fg:x="1109" fg:w="1"/><text x="37.9968%" y="799.50"></text></g><g><title>DecodeEntry (1 samples, 0.03%)</title><rect x="37.7468%" y="773" width="0.0340%" height="15" fill="rgb(217,75,12)" fg:x="1109" fg:w="1"/><text x="37.9968%" y="783.50"></text></g><g><title>leveldb::crc32c::Unmask (1 samples, 0.03%)</title><rect x="37.7808%" y="821" width="0.0340%" height="15" fill="rgb(224,159,17)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="805" width="0.0340%" height="15" fill="rgb(217,118,1)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="789" width="0.0340%" height="15" fill="rgb(232,180,48)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="773" width="0.0340%" height="15" fill="rgb(230,27,33)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="757" width="0.0340%" height="15" fill="rgb(205,31,21)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="741" width="0.0340%" height="15" fill="rgb(253,59,4)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="725" width="0.0340%" height="15" fill="rgb(224,201,9)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="709" width="0.0340%" height="15" fill="rgb(229,206,30)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="693" width="0.0340%" height="15" fill="rgb(212,67,47)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="677" width="0.0340%" height="15" fill="rgb(211,96,50)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="37.7808%" y="661" width="0.0340%" height="15" fill="rgb(252,114,18)" fg:x="1110" fg:w="1"/><text x="38.0308%" y="671.50"></text></g><g><title>leveldb::crc32c::Value (8 samples, 0.27%)</title><rect x="37.8148%" y="821" width="0.2723%" height="15" fill="rgb(223,58,37)" fg:x="1111" fg:w="8"/><text x="38.0648%" y="831.50"></text></g><g><title>crc32c::ExtendSse42 (8 samples, 0.27%)</title><rect x="37.8148%" y="805" width="0.2723%" height="15" fill="rgb(237,70,4)" fg:x="1111" fg:w="8"/><text x="38.0648%" y="815.50"></text></g><g><title>_mm_crc32_u64 (4 samples, 0.14%)</title><rect x="37.9510%" y="789" width="0.1361%" height="15" fill="rgb(244,85,46)" fg:x="1115" fg:w="4"/><text x="38.2010%" y="799.50"></text></g><g><title>CCoinsViewDB::GetCoin (12 samples, 0.41%)</title><rect x="37.7127%" y="981" width="0.4084%" height="15" fill="rgb(223,39,52)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="991.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (12 samples, 0.41%)</title><rect x="37.7127%" y="965" width="0.4084%" height="15" fill="rgb(218,200,14)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="975.50"></text></g><g><title>leveldb::DBImpl::Get (12 samples, 0.41%)</title><rect x="37.7127%" y="949" width="0.4084%" height="15" fill="rgb(208,171,16)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="959.50"></text></g><g><title>leveldb::Version::Get (12 samples, 0.41%)</title><rect x="37.7127%" y="933" width="0.4084%" height="15" fill="rgb(234,200,18)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="943.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (12 samples, 0.41%)</title><rect x="37.7127%" y="917" width="0.4084%" height="15" fill="rgb(228,45,11)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="927.50"></text></g><g><title>leveldb::Version::Get (12 samples, 0.41%)</title><rect x="37.7127%" y="901" width="0.4084%" height="15" fill="rgb(237,182,11)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="911.50"></text></g><g><title>leveldb::TableCache::Get (12 samples, 0.41%)</title><rect x="37.7127%" y="885" width="0.4084%" height="15" fill="rgb(241,175,49)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="895.50"></text></g><g><title>leveldb::Table::InternalGet (12 samples, 0.41%)</title><rect x="37.7127%" y="869" width="0.4084%" height="15" fill="rgb(247,38,35)" fg:x="1108" fg:w="12"/><text x="37.9627%" y="879.50"></text></g><g><title>leveldb::Table::BlockReader (10 samples, 0.34%)</title><rect x="37.7808%" y="853" width="0.3404%" height="15" fill="rgb(228,39,49)" fg:x="1110" fg:w="10"/><text x="38.0308%" y="863.50"></text></g><g><title>leveldb::ReadBlock (10 samples, 0.34%)</title><rect x="37.7808%" y="837" width="0.3404%" height="15" fill="rgb(226,101,26)" fg:x="1110" fg:w="10"/><text x="38.0308%" y="847.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="38.0871%" y="821" width="0.0340%" height="15" fill="rgb(206,141,19)" fg:x="1119" fg:w="1"/><text x="38.3371%" y="831.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="38.0871%" y="805" width="0.0340%" height="15" fill="rgb(211,200,13)" fg:x="1119" fg:w="1"/><text x="38.3371%" y="815.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="38.0871%" y="789" width="0.0340%" height="15" fill="rgb(241,121,6)" fg:x="1119" fg:w="1"/><text x="38.3371%" y="799.50"></text></g><g><title>CCoinsViewDB::GetCoin (13 samples, 0.44%)</title><rect x="37.7127%" y="997" width="0.4425%" height="15" fill="rgb(234,221,29)" fg:x="1108" fg:w="13"/><text x="37.9627%" y="1007.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="981" width="0.0340%" height="15" fill="rgb(229,136,5)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="991.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="965" width="0.0340%" height="15" fill="rgb(238,36,11)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="975.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="949" width="0.0340%" height="15" fill="rgb(251,55,41)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="959.50"></text></g><g><title>Serialize&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="933" width="0.0340%" height="15" fill="rgb(242,34,40)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="943.50"></text></g><g><title>Ser&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="917" width="0.0340%" height="15" fill="rgb(215,42,17)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="927.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="901" width="0.0340%" height="15" fill="rgb(207,44,46)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="911.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="885" width="0.0340%" height="15" fill="rgb(211,206,28)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="895.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="869" width="0.0340%" height="15" fill="rgb(237,167,16)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="879.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="853" width="0.0340%" height="15" fill="rgb(233,66,6)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="863.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="837" width="0.0340%" height="15" fill="rgb(246,123,29)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="847.50"></text></g><g><title>DataStream::write (1 samples, 0.03%)</title><rect x="38.1212%" y="821" width="0.0340%" height="15" fill="rgb(209,62,40)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="831.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="805" width="0.0340%" height="15" fill="rgb(218,4,25)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="815.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="38.1212%" y="789" width="0.0340%" height="15" fill="rgb(253,91,49)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="799.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="773" width="0.0340%" height="15" fill="rgb(228,155,29)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="783.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.1212%" y="757" width="0.0340%" height="15" fill="rgb(243,57,37)" fg:x="1120" fg:w="1"/><text x="38.3712%" y="767.50"></text></g><g><title>CCoinsViewBacked::GetCoin (14 samples, 0.48%)</title><rect x="37.7127%" y="1013" width="0.4765%" height="15" fill="rgb(244,167,17)" fg:x="1108" fg:w="14"/><text x="37.9627%" y="1023.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="38.1552%" y="997" width="0.0340%" height="15" fill="rgb(207,181,38)" fg:x="1121" fg:w="1"/><text x="38.4052%" y="1007.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (15 samples, 0.51%)</title><rect x="37.7127%" y="1061" width="0.5106%" height="15" fill="rgb(211,8,23)" fg:x="1108" fg:w="15"/><text x="37.9627%" y="1071.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (15 samples, 0.51%)</title><rect x="37.7127%" y="1045" width="0.5106%" height="15" fill="rgb(235,11,44)" fg:x="1108" fg:w="15"/><text x="37.9627%" y="1055.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (15 samples, 0.51%)</title><rect x="37.7127%" y="1029" width="0.5106%" height="15" fill="rgb(248,18,52)" fg:x="1108" fg:w="15"/><text x="37.9627%" y="1039.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="38.1892%" y="1013" width="0.0340%" height="15" fill="rgb(208,4,7)" fg:x="1122" fg:w="1"/><text x="38.4392%" y="1023.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.03%)</title><rect x="38.1892%" y="997" width="0.0340%" height="15" fill="rgb(240,17,39)" fg:x="1122" fg:w="1"/><text x="38.4392%" y="1007.50"></text></g><g><title>ReadLE64 (1 samples, 0.03%)</title><rect x="38.1892%" y="981" width="0.0340%" height="15" fill="rgb(207,170,3)" fg:x="1122" fg:w="1"/><text x="38.4392%" y="991.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="38.1892%" y="965" width="0.0340%" height="15" fill="rgb(236,100,52)" fg:x="1122" fg:w="1"/><text x="38.4392%" y="975.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="38.2233%" y="1013" width="0.0340%" height="15" fill="rgb(246,78,51)" fg:x="1123" fg:w="1"/><text x="38.4733%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.03%)</title><rect x="38.2233%" y="997" width="0.0340%" height="15" fill="rgb(211,17,15)" fg:x="1123" fg:w="1"/><text x="38.4733%" y="1007.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="38.2233%" y="981" width="0.0340%" height="15" fill="rgb(209,59,46)" fg:x="1123" fg:w="1"/><text x="38.4733%" y="991.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="38.2233%" y="965" width="0.0340%" height="15" fill="rgb(210,92,25)" fg:x="1123" fg:w="1"/><text x="38.4733%" y="975.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="38.2233%" y="949" width="0.0340%" height="15" fill="rgb(238,174,52)" fg:x="1123" fg:w="1"/><text x="38.4733%" y="959.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="38.2233%" y="933" width="0.0340%" height="15" fill="rgb(230,73,7)" fg:x="1123" fg:w="1"/><text x="38.4733%" y="943.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.03%)</title><rect x="38.2573%" y="1013" width="0.0340%" height="15" fill="rgb(243,124,40)" fg:x="1124" fg:w="1"/><text x="38.5073%" y="1023.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="38.2914%" y="1013" width="0.0681%" height="15" fill="rgb(244,170,11)" fg:x="1125" fg:w="2"/><text x="38.5414%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.3254%" y="997" width="0.0340%" height="15" fill="rgb(207,114,54)" fg:x="1126" fg:w="1"/><text x="38.5754%" y="1007.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.3254%" y="981" width="0.0340%" height="15" fill="rgb(205,42,20)" fg:x="1126" fg:w="1"/><text x="38.5754%" y="991.50"></text></g><g><title>CCoinsViewCache::FetchCoin (20 samples, 0.68%)</title><rect x="37.7127%" y="1077" width="0.6807%" height="15" fill="rgb(230,30,28)" fg:x="1108" fg:w="20"/><text x="37.9627%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (5 samples, 0.17%)</title><rect x="38.2233%" y="1061" width="0.1702%" height="15" fill="rgb(205,73,54)" fg:x="1123" fg:w="5"/><text x="38.4733%" y="1071.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (5 samples, 0.17%)</title><rect x="38.2233%" y="1045" width="0.1702%" height="15" fill="rgb(254,227,23)" fg:x="1123" fg:w="5"/><text x="38.4733%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.17%)</title><rect x="38.2233%" y="1029" width="0.1702%" height="15" fill="rgb(228,202,34)" fg:x="1123" fg:w="5"/><text x="38.4733%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.03%)</title><rect x="38.3594%" y="1013" width="0.0340%" height="15" fill="rgb(222,225,37)" fg:x="1127" fg:w="1"/><text x="38.6094%" y="1023.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="38.3935%" y="1077" width="0.0681%" height="15" fill="rgb(221,14,54)" fg:x="1128" fg:w="2"/><text x="38.6435%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.4275%" y="1061" width="0.0340%" height="15" fill="rgb(254,102,2)" fg:x="1129" fg:w="1"/><text x="38.6775%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.4275%" y="1045" width="0.0340%" height="15" fill="rgb(232,104,17)" fg:x="1129" fg:w="1"/><text x="38.6775%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="1077" width="0.0340%" height="15" fill="rgb(250,220,14)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="1061" width="0.0340%" height="15" fill="rgb(241,158,9)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="1045" width="0.0340%" height="15" fill="rgb(246,9,43)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="1029" width="0.0340%" height="15" fill="rgb(206,73,33)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="1013" width="0.0340%" height="15" fill="rgb(222,79,8)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="997" width="0.0340%" height="15" fill="rgb(234,8,54)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="1007.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="38.4615%" y="981" width="0.0340%" height="15" fill="rgb(209,134,38)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="965" width="0.0340%" height="15" fill="rgb(230,127,29)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="949" width="0.0340%" height="15" fill="rgb(242,44,41)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="933" width="0.0340%" height="15" fill="rgb(222,56,43)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="917" width="0.0340%" height="15" fill="rgb(238,39,47)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="901" width="0.0340%" height="15" fill="rgb(226,79,43)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="885" width="0.0340%" height="15" fill="rgb(242,105,53)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.4615%" y="869" width="0.0340%" height="15" fill="rgb(251,132,46)" fg:x="1130" fg:w="1"/><text x="38.7115%" y="879.50"></text></g><g><title>CCoinsViewCache::GetCoin (24 samples, 0.82%)</title><rect x="37.7127%" y="1093" width="0.8169%" height="15" fill="rgb(231,77,14)" fg:x="1108" fg:w="24"/><text x="37.9627%" y="1103.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.03%)</title><rect x="38.4956%" y="1077" width="0.0340%" height="15" fill="rgb(240,135,9)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="1087.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.03%)</title><rect x="38.4956%" y="1061" width="0.0340%" height="15" fill="rgb(248,109,14)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="1071.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="38.4956%" y="1045" width="0.0340%" height="15" fill="rgb(227,146,52)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="1055.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="38.4956%" y="1029" width="0.0340%" height="15" fill="rgb(232,54,3)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="1039.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="38.4956%" y="1013" width="0.0340%" height="15" fill="rgb(229,201,43)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="1023.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="38.4956%" y="997" width="0.0340%" height="15" fill="rgb(252,161,33)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="1007.50"></text></g><g><title>Coin::Coin (1 samples, 0.03%)</title><rect x="38.4956%" y="981" width="0.0340%" height="15" fill="rgb(226,146,40)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="991.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="38.4956%" y="965" width="0.0340%" height="15" fill="rgb(219,47,25)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="975.50"></text></g><g><title>CScript::CScript (1 samples, 0.03%)</title><rect x="38.4956%" y="949" width="0.0340%" height="15" fill="rgb(250,135,13)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="959.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.03%)</title><rect x="38.4956%" y="933" width="0.0340%" height="15" fill="rgb(219,229,18)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="943.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.03%)</title><rect x="38.4956%" y="917" width="0.0340%" height="15" fill="rgb(217,152,27)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="927.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="38.4956%" y="901" width="0.0340%" height="15" fill="rgb(225,71,47)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="911.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="38.4956%" y="885" width="0.0340%" height="15" fill="rgb(220,139,14)" fg:x="1131" fg:w="1"/><text x="38.7456%" y="895.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="38.5296%" y="1045" width="0.0340%" height="15" fill="rgb(247,54,32)" fg:x="1132" fg:w="1"/><text x="38.7796%" y="1055.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.03%)</title><rect x="38.5296%" y="1029" width="0.0340%" height="15" fill="rgb(252,131,39)" fg:x="1132" fg:w="1"/><text x="38.7796%" y="1039.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.03%)</title><rect x="38.5296%" y="1013" width="0.0340%" height="15" fill="rgb(210,108,39)" fg:x="1132" fg:w="1"/><text x="38.7796%" y="1023.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="38.5296%" y="997" width="0.0340%" height="15" fill="rgb(205,23,29)" fg:x="1132" fg:w="1"/><text x="38.7796%" y="1007.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.07%)</title><rect x="38.5636%" y="1045" width="0.0681%" height="15" fill="rgb(246,139,46)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="1055.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.07%)</title><rect x="38.5636%" y="1029" width="0.0681%" height="15" fill="rgb(250,81,26)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="1039.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.07%)</title><rect x="38.5636%" y="1013" width="0.0681%" height="15" fill="rgb(214,104,7)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="1023.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="38.5636%" y="997" width="0.0681%" height="15" fill="rgb(233,189,8)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="1007.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="38.5636%" y="981" width="0.0681%" height="15" fill="rgb(228,141,17)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="991.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="38.5636%" y="965" width="0.0681%" height="15" fill="rgb(247,157,1)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="975.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="38.5636%" y="949" width="0.0681%" height="15" fill="rgb(249,225,5)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="959.50"></text></g><g><title>Coin::Coin (2 samples, 0.07%)</title><rect x="38.5636%" y="933" width="0.0681%" height="15" fill="rgb(242,55,13)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="943.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.07%)</title><rect x="38.5636%" y="917" width="0.0681%" height="15" fill="rgb(230,49,50)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="927.50"></text></g><g><title>CScript::CScript (2 samples, 0.07%)</title><rect x="38.5636%" y="901" width="0.0681%" height="15" fill="rgb(241,111,38)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="911.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.07%)</title><rect x="38.5636%" y="885" width="0.0681%" height="15" fill="rgb(252,155,4)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="895.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.07%)</title><rect x="38.5636%" y="869" width="0.0681%" height="15" fill="rgb(212,69,32)" fg:x="1133" fg:w="2"/><text x="38.8136%" y="879.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="38.6317%" y="1045" width="0.0340%" height="15" fill="rgb(243,107,47)" fg:x="1135" fg:w="1"/><text x="38.8817%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.6317%" y="1029" width="0.0340%" height="15" fill="rgb(247,130,12)" fg:x="1135" fg:w="1"/><text x="38.8817%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.6317%" y="1013" width="0.0340%" height="15" fill="rgb(233,74,16)" fg:x="1135" fg:w="1"/><text x="38.8817%" y="1023.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="38.6658%" y="965" width="0.0340%" height="15" fill="rgb(208,58,18)" fg:x="1136" fg:w="1"/><text x="38.9158%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (6 samples, 0.20%)</title><rect x="38.5296%" y="1061" width="0.2042%" height="15" fill="rgb(242,225,1)" fg:x="1132" fg:w="6"/><text x="38.7796%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.07%)</title><rect x="38.6658%" y="1045" width="0.0681%" height="15" fill="rgb(249,39,40)" fg:x="1136" fg:w="2"/><text x="38.9158%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.07%)</title><rect x="38.6658%" y="1029" width="0.0681%" height="15" fill="rgb(207,72,44)" fg:x="1136" fg:w="2"/><text x="38.9158%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.07%)</title><rect x="38.6658%" y="1013" width="0.0681%" height="15" fill="rgb(215,193,12)" fg:x="1136" fg:w="2"/><text x="38.9158%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.07%)</title><rect x="38.6658%" y="997" width="0.0681%" height="15" fill="rgb(248,41,39)" fg:x="1136" fg:w="2"/><text x="38.9158%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.07%)</title><rect x="38.6658%" y="981" width="0.0681%" height="15" fill="rgb(253,85,4)" fg:x="1136" fg:w="2"/><text x="38.9158%" y="991.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.03%)</title><rect x="38.6998%" y="965" width="0.0340%" height="15" fill="rgb(243,70,31)" fg:x="1137" fg:w="1"/><text x="38.9498%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (4 samples, 0.14%)</title><rect x="38.7338%" y="1045" width="0.1361%" height="15" fill="rgb(253,195,26)" fg:x="1138" fg:w="4"/><text x="38.9838%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.14%)</title><rect x="38.7338%" y="1029" width="0.1361%" height="15" fill="rgb(243,42,11)" fg:x="1138" fg:w="4"/><text x="38.9838%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.14%)</title><rect x="38.7338%" y="1013" width="0.1361%" height="15" fill="rgb(239,66,17)" fg:x="1138" fg:w="4"/><text x="38.9838%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.14%)</title><rect x="38.7338%" y="997" width="0.1361%" height="15" fill="rgb(217,132,21)" fg:x="1138" fg:w="4"/><text x="38.9838%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.14%)</title><rect x="38.7338%" y="981" width="0.1361%" height="15" fill="rgb(252,202,21)" fg:x="1138" fg:w="4"/><text x="38.9838%" y="991.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.14%)</title><rect x="38.7338%" y="965" width="0.1361%" height="15" fill="rgb(233,98,36)" fg:x="1138" fg:w="4"/><text x="38.9838%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="38.8019%" y="949" width="0.0681%" height="15" fill="rgb(216,153,54)" fg:x="1140" fg:w="2"/><text x="39.0519%" y="959.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.07%)</title><rect x="38.8019%" y="933" width="0.0681%" height="15" fill="rgb(250,99,7)" fg:x="1140" fg:w="2"/><text x="39.0519%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="1013" width="0.0340%" height="15" fill="rgb(207,56,50)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="997" width="0.0340%" height="15" fill="rgb(244,61,34)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="981" width="0.0340%" height="15" fill="rgb(241,50,38)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="965" width="0.0340%" height="15" fill="rgb(212,166,30)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="949" width="0.0340%" height="15" fill="rgb(249,127,32)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="933" width="0.0340%" height="15" fill="rgb(209,103,0)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="943.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="38.8700%" y="917" width="0.0340%" height="15" fill="rgb(238,209,51)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="901" width="0.0340%" height="15" fill="rgb(237,56,23)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="885" width="0.0340%" height="15" fill="rgb(215,153,46)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="38.8700%" y="869" width="0.0340%" height="15" fill="rgb(224,49,31)" fg:x="1142" fg:w="1"/><text x="39.1200%" y="879.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (7 samples, 0.24%)</title><rect x="38.7338%" y="1061" width="0.2383%" height="15" fill="rgb(250,18,42)" fg:x="1138" fg:w="7"/><text x="38.9838%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (3 samples, 0.10%)</title><rect x="38.8700%" y="1045" width="0.1021%" height="15" fill="rgb(215,176,39)" fg:x="1142" fg:w="3"/><text x="39.1200%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (3 samples, 0.10%)</title><rect x="38.8700%" y="1029" width="0.1021%" height="15" fill="rgb(223,77,29)" fg:x="1142" fg:w="3"/><text x="39.1200%" y="1039.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.07%)</title><rect x="38.9040%" y="1013" width="0.0681%" height="15" fill="rgb(234,94,52)" fg:x="1143" fg:w="2"/><text x="39.1540%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.07%)</title><rect x="38.9040%" y="997" width="0.0681%" height="15" fill="rgb(220,154,50)" fg:x="1143" fg:w="2"/><text x="39.1540%" y="1007.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.07%)</title><rect x="38.9040%" y="981" width="0.0681%" height="15" fill="rgb(212,11,10)" fg:x="1143" fg:w="2"/><text x="39.1540%" y="991.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.07%)</title><rect x="38.9040%" y="965" width="0.0681%" height="15" fill="rgb(205,166,19)" fg:x="1143" fg:w="2"/><text x="39.1540%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.9381%" y="949" width="0.0340%" height="15" fill="rgb(244,198,16)" fg:x="1144" fg:w="1"/><text x="39.1881%" y="959.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="38.9381%" y="933" width="0.0340%" height="15" fill="rgb(219,69,12)" fg:x="1144" fg:w="1"/><text x="39.1881%" y="943.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="38.9721%" y="1045" width="0.0340%" height="15" fill="rgb(245,30,7)" fg:x="1145" fg:w="1"/><text x="39.2221%" y="1055.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="39.0061%" y="1045" width="0.0340%" height="15" fill="rgb(218,221,48)" fg:x="1146" fg:w="1"/><text x="39.2561%" y="1055.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="39.0061%" y="1029" width="0.0340%" height="15" fill="rgb(216,66,15)" fg:x="1146" fg:w="1"/><text x="39.2561%" y="1039.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="39.0061%" y="1013" width="0.0340%" height="15" fill="rgb(226,122,50)" fg:x="1146" fg:w="1"/><text x="39.2561%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.10%)</title><rect x="38.9721%" y="1061" width="0.1021%" height="15" fill="rgb(239,156,16)" fg:x="1145" fg:w="3"/><text x="39.2221%" y="1071.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="39.0402%" y="1045" width="0.0340%" height="15" fill="rgb(224,27,38)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="1055.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="39.0402%" y="1029" width="0.0340%" height="15" fill="rgb(224,39,27)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="39.0402%" y="1013" width="0.0340%" height="15" fill="rgb(215,92,29)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="1023.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="39.0402%" y="997" width="0.0340%" height="15" fill="rgb(207,159,16)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="1007.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="39.0402%" y="981" width="0.0340%" height="15" fill="rgb(238,163,47)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="991.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.03%)</title><rect x="39.0402%" y="965" width="0.0340%" height="15" fill="rgb(219,91,49)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="949" width="0.0340%" height="15" fill="rgb(227,167,31)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="933" width="0.0340%" height="15" fill="rgb(234,80,54)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="917" width="0.0340%" height="15" fill="rgb(212,114,2)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="901" width="0.0340%" height="15" fill="rgb(234,50,24)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="885" width="0.0340%" height="15" fill="rgb(221,68,8)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="869" width="0.0340%" height="15" fill="rgb(254,180,31)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="853" width="0.0340%" height="15" fill="rgb(247,130,50)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="837" width="0.0340%" height="15" fill="rgb(211,109,4)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="821" width="0.0340%" height="15" fill="rgb(238,50,21)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="805" width="0.0340%" height="15" fill="rgb(225,57,45)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="39.0402%" y="789" width="0.0340%" height="15" fill="rgb(209,196,50)" fg:x="1147" fg:w="1"/><text x="39.2902%" y="799.50"></text></g><g><title>CCoinsViewCache::FetchCoin (41 samples, 1.40%)</title><rect x="37.7127%" y="1109" width="1.3955%" height="15" fill="rgb(242,140,13)" fg:x="1108" fg:w="41"/><text x="37.9627%" y="1119.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (17 samples, 0.58%)</title><rect x="38.5296%" y="1093" width="0.5786%" height="15" fill="rgb(217,111,7)" fg:x="1132" fg:w="17"/><text x="38.7796%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (17 samples, 0.58%)</title><rect x="38.5296%" y="1077" width="0.5786%" height="15" fill="rgb(253,193,51)" fg:x="1132" fg:w="17"/><text x="38.7796%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="39.0742%" y="1061" width="0.0340%" height="15" fill="rgb(252,70,29)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="39.0742%" y="1045" width="0.0340%" height="15" fill="rgb(232,127,12)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="1055.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.03%)</title><rect x="39.0742%" y="1029" width="0.0340%" height="15" fill="rgb(211,180,21)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="1039.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.03%)</title><rect x="39.0742%" y="1013" width="0.0340%" height="15" fill="rgb(229,72,13)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="1023.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.03%)</title><rect x="39.0742%" y="997" width="0.0340%" height="15" fill="rgb(240,211,49)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="1007.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="39.0742%" y="981" width="0.0340%" height="15" fill="rgb(219,149,40)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="991.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="39.0742%" y="965" width="0.0340%" height="15" fill="rgb(210,127,46)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="975.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="39.0742%" y="949" width="0.0340%" height="15" fill="rgb(220,106,7)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="959.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.03%)</title><rect x="39.0742%" y="933" width="0.0340%" height="15" fill="rgb(249,31,22)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="943.50"></text></g><g><title>Coin::Coin (1 samples, 0.03%)</title><rect x="39.0742%" y="917" width="0.0340%" height="15" fill="rgb(253,1,49)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="927.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="39.0742%" y="901" width="0.0340%" height="15" fill="rgb(227,144,33)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="911.50"></text></g><g><title>CScript::CScript (1 samples, 0.03%)</title><rect x="39.0742%" y="885" width="0.0340%" height="15" fill="rgb(249,163,44)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="895.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.03%)</title><rect x="39.0742%" y="869" width="0.0340%" height="15" fill="rgb(234,15,39)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="879.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="39.0742%" y="853" width="0.0340%" height="15" fill="rgb(207,66,16)" fg:x="1148" fg:w="1"/><text x="39.3242%" y="863.50"></text></g><g><title>CCoinsViewCache::HaveInputs (43 samples, 1.46%)</title><rect x="37.7127%" y="1141" width="1.4636%" height="15" fill="rgb(233,112,24)" fg:x="1108" fg:w="43"/><text x="37.9627%" y="1151.50"></text></g><g><title>CCoinsViewCache::HaveCoin (43 samples, 1.46%)</title><rect x="37.7127%" y="1125" width="1.4636%" height="15" fill="rgb(230,90,22)" fg:x="1108" fg:w="43"/><text x="37.9627%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.07%)</title><rect x="39.1082%" y="1109" width="0.0681%" height="15" fill="rgb(229,61,13)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1119.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.07%)</title><rect x="39.1082%" y="1093" width="0.0681%" height="15" fill="rgb(225,57,24)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1103.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.07%)</title><rect x="39.1082%" y="1077" width="0.0681%" height="15" fill="rgb(208,169,48)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="39.1082%" y="1061" width="0.0681%" height="15" fill="rgb(244,218,51)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1071.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="39.1082%" y="1045" width="0.0681%" height="15" fill="rgb(214,148,10)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="39.1082%" y="1029" width="0.0681%" height="15" fill="rgb(225,174,27)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1039.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.07%)</title><rect x="39.1082%" y="1013" width="0.0681%" height="15" fill="rgb(230,96,26)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1023.50"></text></g><g><title>Coin::Coin (2 samples, 0.07%)</title><rect x="39.1082%" y="997" width="0.0681%" height="15" fill="rgb(232,10,30)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="1007.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.07%)</title><rect x="39.1082%" y="981" width="0.0681%" height="15" fill="rgb(222,8,50)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="991.50"></text></g><g><title>CScript::CScript (2 samples, 0.07%)</title><rect x="39.1082%" y="965" width="0.0681%" height="15" fill="rgb(213,81,27)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="975.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.07%)</title><rect x="39.1082%" y="949" width="0.0681%" height="15" fill="rgb(245,50,10)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="959.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.07%)</title><rect x="39.1082%" y="933" width="0.0681%" height="15" fill="rgb(216,100,18)" fg:x="1149" fg:w="2"/><text x="39.3582%" y="943.50"></text></g><g><title>Consensus::CheckTxInputs (59 samples, 2.01%)</title><rect x="37.2022%" y="1157" width="2.0082%" height="15" fill="rgb(236,147,54)" fg:x="1093" fg:w="59"/><text x="37.4522%" y="1167.50">C..</text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="39.1763%" y="1141" width="0.0340%" height="15" fill="rgb(205,143,26)" fg:x="1151" fg:w="1"/><text x="39.4263%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="39.1763%" y="1125" width="0.0340%" height="15" fill="rgb(236,26,9)" fg:x="1151" fg:w="1"/><text x="39.4263%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="39.1763%" y="1109" width="0.0340%" height="15" fill="rgb(221,165,53)" fg:x="1151" fg:w="1"/><text x="39.4263%" y="1119.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.03%)</title><rect x="39.2103%" y="1141" width="0.0340%" height="15" fill="rgb(214,110,17)" fg:x="1152" fg:w="1"/><text x="39.4603%" y="1151.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.03%)</title><rect x="39.2103%" y="1125" width="0.0340%" height="15" fill="rgb(237,197,12)" fg:x="1152" fg:w="1"/><text x="39.4603%" y="1135.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.03%)</title><rect x="39.2103%" y="1109" width="0.0340%" height="15" fill="rgb(205,84,17)" fg:x="1152" fg:w="1"/><text x="39.4603%" y="1119.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="39.2103%" y="1093" width="0.0340%" height="15" fill="rgb(237,18,45)" fg:x="1152" fg:w="1"/><text x="39.4603%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.07%)</title><rect x="39.2444%" y="1141" width="0.0681%" height="15" fill="rgb(221,87,14)" fg:x="1153" fg:w="2"/><text x="39.4944%" y="1151.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.03%)</title><rect x="39.3125%" y="1141" width="0.0340%" height="15" fill="rgb(238,186,15)" fg:x="1155" fg:w="1"/><text x="39.5625%" y="1151.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.03%)</title><rect x="39.3465%" y="1141" width="0.0340%" height="15" fill="rgb(208,115,11)" fg:x="1156" fg:w="1"/><text x="39.5965%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="39.3805%" y="1141" width="0.0340%" height="15" fill="rgb(254,175,0)" fg:x="1157" fg:w="1"/><text x="39.6305%" y="1151.50"></text></g><g><title>EvaluateSequenceLocks (7 samples, 0.24%)</title><rect x="39.2103%" y="1157" width="0.2383%" height="15" fill="rgb(227,24,42)" fg:x="1152" fg:w="7"/><text x="39.4603%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="39.4146%" y="1141" width="0.0340%" height="15" fill="rgb(223,211,37)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.03%)</title><rect x="39.4146%" y="1125" width="0.0340%" height="15" fill="rgb(235,49,27)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.03%)</title><rect x="39.4146%" y="1109" width="0.0340%" height="15" fill="rgb(254,97,51)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1119.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.03%)</title><rect x="39.4146%" y="1093" width="0.0340%" height="15" fill="rgb(249,51,40)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1103.50"></text></g><g><title>operator== (1 samples, 0.03%)</title><rect x="39.4146%" y="1077" width="0.0340%" height="15" fill="rgb(210,128,45)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1087.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.03%)</title><rect x="39.4146%" y="1061" width="0.0340%" height="15" fill="rgb(224,137,50)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1071.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.03%)</title><rect x="39.4146%" y="1045" width="0.0340%" height="15" fill="rgb(242,15,9)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1055.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.03%)</title><rect x="39.4146%" y="1029" width="0.0340%" height="15" fill="rgb(233,187,41)" fg:x="1158" fg:w="1"/><text x="39.6646%" y="1039.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.03%)</title><rect x="39.4486%" y="1109" width="0.0340%" height="15" fill="rgb(227,2,29)" fg:x="1159" fg:w="1"/><text x="39.6986%" y="1119.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.03%)</title><rect x="39.4486%" y="1093" width="0.0340%" height="15" fill="rgb(222,70,3)" fg:x="1159" fg:w="1"/><text x="39.6986%" y="1103.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.03%)</title><rect x="39.4486%" y="1077" width="0.0340%" height="15" fill="rgb(213,11,42)" fg:x="1159" fg:w="1"/><text x="39.6986%" y="1087.50"></text></g><g><title>GetBlockProof (3 samples, 0.10%)</title><rect x="39.4486%" y="1141" width="0.1021%" height="15" fill="rgb(225,150,9)" fg:x="1159" fg:w="3"/><text x="39.6986%" y="1151.50"></text></g><g><title>operator/ (3 samples, 0.10%)</title><rect x="39.4486%" y="1125" width="0.1021%" height="15" fill="rgb(230,162,45)" fg:x="1159" fg:w="3"/><text x="39.6986%" y="1135.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (2 samples, 0.07%)</title><rect x="39.4826%" y="1109" width="0.0681%" height="15" fill="rgb(222,14,52)" fg:x="1160" fg:w="2"/><text x="39.7326%" y="1119.50"></text></g><g><title>GetBlockProofEquivalentTime (4 samples, 0.14%)</title><rect x="39.4486%" y="1157" width="0.1361%" height="15" fill="rgb(254,198,14)" fg:x="1159" fg:w="4"/><text x="39.6986%" y="1167.50"></text></g><g><title>operator/ (1 samples, 0.03%)</title><rect x="39.5507%" y="1141" width="0.0340%" height="15" fill="rgb(220,217,30)" fg:x="1162" fg:w="1"/><text x="39.8007%" y="1151.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.03%)</title><rect x="39.5507%" y="1125" width="0.0340%" height="15" fill="rgb(215,146,41)" fg:x="1162" fg:w="1"/><text x="39.8007%" y="1135.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.03%)</title><rect x="39.5507%" y="1109" width="0.0340%" height="15" fill="rgb(217,27,36)" fg:x="1162" fg:w="1"/><text x="39.8007%" y="1119.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.03%)</title><rect x="39.5507%" y="1093" width="0.0340%" height="15" fill="rgb(219,218,39)" fg:x="1162" fg:w="1"/><text x="39.8007%" y="1103.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="39.5848%" y="1141" width="0.0340%" height="15" fill="rgb(219,4,42)" fg:x="1163" fg:w="1"/><text x="39.8348%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.03%)</title><rect x="39.5848%" y="1125" width="0.0340%" height="15" fill="rgb(249,119,36)" fg:x="1163" fg:w="1"/><text x="39.8348%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="39.5848%" y="1109" width="0.0340%" height="15" fill="rgb(209,23,33)" fg:x="1163" fg:w="1"/><text x="39.8348%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.03%)</title><rect x="39.5848%" y="1093" width="0.0340%" height="15" fill="rgb(211,10,0)" fg:x="1163" fg:w="1"/><text x="39.8348%" y="1103.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.07%)</title><rect x="39.6188%" y="1141" width="0.0681%" height="15" fill="rgb(208,99,37)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1125" width="0.0681%" height="15" fill="rgb(213,132,31)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1135.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1109" width="0.0681%" height="15" fill="rgb(243,129,40)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1119.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1093" width="0.0681%" height="15" fill="rgb(210,66,33)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1103.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1077" width="0.0681%" height="15" fill="rgb(209,189,4)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1087.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1061" width="0.0681%" height="15" fill="rgb(214,107,37)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1071.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1045" width="0.0681%" height="15" fill="rgb(245,88,54)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1029" width="0.0681%" height="15" fill="rgb(205,146,20)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1039.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="1013" width="0.0681%" height="15" fill="rgb(220,161,25)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1023.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="997" width="0.0681%" height="15" fill="rgb(215,152,15)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="1007.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="39.6188%" y="981" width="0.0681%" height="15" fill="rgb(233,192,44)" fg:x="1164" fg:w="2"/><text x="39.8688%" y="991.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="39.6869%" y="1125" width="0.0340%" height="15" fill="rgb(240,170,46)" fg:x="1166" fg:w="1"/><text x="39.9369%" y="1135.50"></text></g><g><title>CScript::IsWitnessProgram (2 samples, 0.07%)</title><rect x="39.7209%" y="1125" width="0.0681%" height="15" fill="rgb(207,104,33)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (2 samples, 0.07%)</title><rect x="39.7209%" y="1109" width="0.0681%" height="15" fill="rgb(219,21,39)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1119.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.07%)</title><rect x="39.7209%" y="1093" width="0.0681%" height="15" fill="rgb(214,133,29)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1103.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="39.7209%" y="1077" width="0.0681%" height="15" fill="rgb(226,93,6)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1087.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="39.7209%" y="1061" width="0.0681%" height="15" fill="rgb(252,222,34)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1071.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (2 samples, 0.07%)</title><rect x="39.7209%" y="1045" width="0.0681%" height="15" fill="rgb(252,92,48)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1055.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (2 samples, 0.07%)</title><rect x="39.7209%" y="1029" width="0.0681%" height="15" fill="rgb(245,223,24)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1039.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (2 samples, 0.07%)</title><rect x="39.7209%" y="1013" width="0.0681%" height="15" fill="rgb(205,176,3)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1023.50"></text></g><g><title>operator new (2 samples, 0.07%)</title><rect x="39.7209%" y="997" width="0.0681%" height="15" fill="rgb(235,151,15)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="1007.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="39.7209%" y="981" width="0.0681%" height="15" fill="rgb(237,209,11)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="991.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="39.7209%" y="965" width="0.0681%" height="15" fill="rgb(243,227,24)" fg:x="1167" fg:w="2"/><text x="39.9709%" y="975.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="39.7549%" y="949" width="0.0340%" height="15" fill="rgb(239,193,16)" fg:x="1168" fg:w="1"/><text x="40.0049%" y="959.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.14%)</title><rect x="39.7890%" y="1125" width="0.1361%" height="15" fill="rgb(231,27,9)" fg:x="1169" fg:w="4"/><text x="40.0390%" y="1135.50"></text></g><g><title>CountWitnessSigOps (8 samples, 0.27%)</title><rect x="39.6869%" y="1141" width="0.2723%" height="15" fill="rgb(219,169,10)" fg:x="1166" fg:w="8"/><text x="39.9369%" y="1151.50"></text></g><g><title>WitnessSigOps (1 samples, 0.03%)</title><rect x="39.9251%" y="1125" width="0.0340%" height="15" fill="rgb(244,229,43)" fg:x="1173" fg:w="1"/><text x="40.1751%" y="1135.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.03%)</title><rect x="39.9592%" y="1125" width="0.0340%" height="15" fill="rgb(254,38,20)" fg:x="1174" fg:w="1"/><text x="40.2092%" y="1135.50"></text></g><g><title>CBlockIndex::GetBlockTime (1 samples, 0.03%)</title><rect x="39.9592%" y="1109" width="0.0340%" height="15" fill="rgb(250,47,30)" fg:x="1174" fg:w="1"/><text x="40.2092%" y="1119.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.03%)</title><rect x="39.9932%" y="1093" width="0.0340%" height="15" fill="rgb(224,124,36)" fg:x="1175" fg:w="1"/><text x="40.2432%" y="1103.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.03%)</title><rect x="39.9932%" y="1077" width="0.0340%" height="15" fill="rgb(246,68,51)" fg:x="1175" fg:w="1"/><text x="40.2432%" y="1087.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.03%)</title><rect x="39.9932%" y="1061" width="0.0340%" height="15" fill="rgb(253,43,49)" fg:x="1175" fg:w="1"/><text x="40.2432%" y="1071.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.03%)</title><rect x="39.9932%" y="1045" width="0.0340%" height="15" fill="rgb(219,54,36)" fg:x="1175" fg:w="1"/><text x="40.2432%" y="1055.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.03%)</title><rect x="39.9932%" y="1029" width="0.0340%" height="15" fill="rgb(227,133,34)" fg:x="1175" fg:w="1"/><text x="40.2432%" y="1039.50"></text></g><g><title>CScript::GetSigOpCount (2 samples, 0.07%)</title><rect x="39.9932%" y="1125" width="0.0681%" height="15" fill="rgb(247,227,15)" fg:x="1175" fg:w="2"/><text x="40.2432%" y="1135.50"></text></g><g><title>CScript::GetOp (2 samples, 0.07%)</title><rect x="39.9932%" y="1109" width="0.0681%" height="15" fill="rgb(229,96,14)" fg:x="1175" fg:w="2"/><text x="40.2432%" y="1119.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.03%)</title><rect x="40.0272%" y="1093" width="0.0340%" height="15" fill="rgb(220,79,17)" fg:x="1176" fg:w="1"/><text x="40.2772%" y="1103.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.03%)</title><rect x="40.0613%" y="1125" width="0.0340%" height="15" fill="rgb(205,131,53)" fg:x="1177" fg:w="1"/><text x="40.3113%" y="1135.50"></text></g><g><title>GetScriptOp (1 samples, 0.03%)</title><rect x="40.0953%" y="1125" width="0.0340%" height="15" fill="rgb(209,50,29)" fg:x="1178" fg:w="1"/><text x="40.3453%" y="1135.50"></text></g><g><title>GetLegacySigOpCount (6 samples, 0.20%)</title><rect x="39.9592%" y="1141" width="0.2042%" height="15" fill="rgb(245,86,46)" fg:x="1174" fg:w="6"/><text x="40.2092%" y="1151.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.03%)</title><rect x="40.1293%" y="1125" width="0.0340%" height="15" fill="rgb(235,66,46)" fg:x="1179" fg:w="1"/><text x="40.3793%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.03%)</title><rect x="40.1634%" y="1045" width="0.0340%" height="15" fill="rgb(232,148,31)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="40.1634%" y="1029" width="0.0340%" height="15" fill="rgb(217,149,8)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="40.1634%" y="1013" width="0.0340%" height="15" fill="rgb(209,183,11)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="1023.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="40.1634%" y="997" width="0.0340%" height="15" fill="rgb(208,55,20)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="1007.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="40.1634%" y="981" width="0.0340%" height="15" fill="rgb(218,39,14)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="991.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="40.1634%" y="965" width="0.0340%" height="15" fill="rgb(216,169,33)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="975.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="40.1634%" y="949" width="0.0340%" height="15" fill="rgb(233,80,24)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="959.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.1634%" y="933" width="0.0340%" height="15" fill="rgb(213,179,31)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="943.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.1634%" y="917" width="0.0340%" height="15" fill="rgb(209,19,5)" fg:x="1180" fg:w="1"/><text x="40.4134%" y="927.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.07%)</title><rect x="40.1634%" y="1093" width="0.0681%" height="15" fill="rgb(219,18,35)" fg:x="1180" fg:w="2"/><text x="40.4134%" y="1103.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (2 samples, 0.07%)</title><rect x="40.1634%" y="1077" width="0.0681%" height="15" fill="rgb(209,169,16)" fg:x="1180" fg:w="2"/><text x="40.4134%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (2 samples, 0.07%)</title><rect x="40.1634%" y="1061" width="0.0681%" height="15" fill="rgb(245,90,51)" fg:x="1180" fg:w="2"/><text x="40.4134%" y="1071.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="40.1974%" y="1045" width="0.0340%" height="15" fill="rgb(220,99,45)" fg:x="1181" fg:w="1"/><text x="40.4474%" y="1055.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="40.1974%" y="1029" width="0.0340%" height="15" fill="rgb(249,89,25)" fg:x="1181" fg:w="1"/><text x="40.4474%" y="1039.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="40.1974%" y="1013" width="0.0340%" height="15" fill="rgb(239,193,0)" fg:x="1181" fg:w="1"/><text x="40.4474%" y="1023.50"></text></g><g><title>CCoinsViewCache::AccessCoin (3 samples, 0.10%)</title><rect x="40.1634%" y="1109" width="0.1021%" height="15" fill="rgb(231,126,1)" fg:x="1180" fg:w="3"/><text x="40.4134%" y="1119.50"></text></g><g><title>GetScriptOp (1 samples, 0.03%)</title><rect x="40.2314%" y="1093" width="0.0340%" height="15" fill="rgb(243,166,3)" fg:x="1182" fg:w="1"/><text x="40.4814%" y="1103.50"></text></g><g><title>GetP2SHSigOpCount (4 samples, 0.14%)</title><rect x="40.1634%" y="1141" width="0.1361%" height="15" fill="rgb(223,22,34)" fg:x="1180" fg:w="4"/><text x="40.4134%" y="1151.50"></text></g><g><title>GetP2SHSigOpCount (4 samples, 0.14%)</title><rect x="40.1634%" y="1125" width="0.1361%" height="15" fill="rgb(251,52,51)" fg:x="1180" fg:w="4"/><text x="40.4134%" y="1135.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="40.2655%" y="1109" width="0.0340%" height="15" fill="rgb(221,165,28)" fg:x="1183" fg:w="1"/><text x="40.5155%" y="1119.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.03%)</title><rect x="40.2995%" y="1141" width="0.0340%" height="15" fill="rgb(218,121,47)" fg:x="1184" fg:w="1"/><text x="40.5495%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="40.3336%" y="1141" width="0.0340%" height="15" fill="rgb(209,120,9)" fg:x="1185" fg:w="1"/><text x="40.5836%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.3336%" y="1125" width="0.0340%" height="15" fill="rgb(236,68,12)" fg:x="1185" fg:w="1"/><text x="40.5836%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.3336%" y="1109" width="0.0340%" height="15" fill="rgb(225,194,26)" fg:x="1185" fg:w="1"/><text x="40.5836%" y="1119.50"></text></g><g><title>GetTransactionSigOpCost (24 samples, 0.82%)</title><rect x="39.5848%" y="1157" width="0.8169%" height="15" fill="rgb(231,84,39)" fg:x="1163" fg:w="24"/><text x="39.8348%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="40.3676%" y="1141" width="0.0340%" height="15" fill="rgb(210,11,45)" fg:x="1186" fg:w="1"/><text x="40.6176%" y="1151.50"></text></g><g><title>SequenceLocks (1 samples, 0.03%)</title><rect x="40.4016%" y="1157" width="0.0340%" height="15" fill="rgb(224,54,52)" fg:x="1187" fg:w="1"/><text x="40.6516%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="40.4016%" y="1141" width="0.0340%" height="15" fill="rgb(238,102,14)" fg:x="1187" fg:w="1"/><text x="40.6516%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="40.4357%" y="1157" width="0.0340%" height="15" fill="rgb(243,160,52)" fg:x="1188" fg:w="1"/><text x="40.6857%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.4357%" y="1141" width="0.0340%" height="15" fill="rgb(216,114,19)" fg:x="1188" fg:w="1"/><text x="40.6857%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.4357%" y="1125" width="0.0340%" height="15" fill="rgb(244,166,37)" fg:x="1188" fg:w="1"/><text x="40.6857%" y="1135.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.03%)</title><rect x="40.4697%" y="1141" width="0.0340%" height="15" fill="rgb(246,29,44)" fg:x="1189" fg:w="1"/><text x="40.7197%" y="1151.50"></text></g><g><title>UpdateCoins (2 samples, 0.07%)</title><rect x="40.4697%" y="1157" width="0.0681%" height="15" fill="rgb(215,56,53)" fg:x="1189" fg:w="2"/><text x="40.7197%" y="1167.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.03%)</title><rect x="40.5037%" y="1141" width="0.0340%" height="15" fill="rgb(217,60,2)" fg:x="1190" fg:w="1"/><text x="40.7537%" y="1151.50"></text></g><g><title>AllocateFileRange (1 samples, 0.03%)</title><rect x="40.5378%" y="1109" width="0.0340%" height="15" fill="rgb(207,26,24)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1119.50"></text></g><g><title>posix_fallocate (1 samples, 0.03%)</title><rect x="40.5378%" y="1093" width="0.0340%" height="15" fill="rgb(252,210,15)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.5378%" y="1077" width="0.0340%" height="15" fill="rgb(253,209,26)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.5378%" y="1061" width="0.0340%" height="15" fill="rgb(238,170,14)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.5378%" y="1045" width="0.0340%" height="15" fill="rgb(216,178,15)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.5378%" y="1029" width="0.0340%" height="15" fill="rgb(250,197,2)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="40.5378%" y="1013" width="0.0340%" height="15" fill="rgb(212,70,42)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="40.5378%" y="997" width="0.0340%" height="15" fill="rgb(227,213,9)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="1007.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="40.5378%" y="981" width="0.0340%" height="15" fill="rgb(245,99,25)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="991.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="40.5378%" y="965" width="0.0340%" height="15" fill="rgb(250,82,29)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="975.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="40.5378%" y="949" width="0.0340%" height="15" fill="rgb(241,226,54)" fg:x="1191" fg:w="1"/><text x="40.7878%" y="959.50"></text></g><g><title>node::BlockManager::FindUndoPos (2 samples, 0.07%)</title><rect x="40.5378%" y="1141" width="0.0681%" height="15" fill="rgb(221,99,41)" fg:x="1191" fg:w="2"/><text x="40.7878%" y="1151.50"></text></g><g><title>FlatFileSeq::Allocate (2 samples, 0.07%)</title><rect x="40.5378%" y="1125" width="0.0681%" height="15" fill="rgb(213,90,21)" fg:x="1191" fg:w="2"/><text x="40.7878%" y="1135.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.03%)</title><rect x="40.5718%" y="1109" width="0.0340%" height="15" fill="rgb(205,208,24)" fg:x="1192" fg:w="1"/><text x="40.8218%" y="1119.50"></text></g><g><title>__fopen_internal (1 samples, 0.03%)</title><rect x="40.5718%" y="1093" width="0.0340%" height="15" fill="rgb(246,31,12)" fg:x="1192" fg:w="1"/><text x="40.8218%" y="1103.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="40.5718%" y="1077" width="0.0340%" height="15" fill="rgb(213,154,6)" fg:x="1192" fg:w="1"/><text x="40.8218%" y="1087.50"></text></g><g><title>_IO_file_open (1 samples, 0.03%)</title><rect x="40.5718%" y="1061" width="0.0340%" height="15" fill="rgb(222,163,29)" fg:x="1192" fg:w="1"/><text x="40.8218%" y="1071.50"></text></g><g><title>__GI___libc_open (1 samples, 0.03%)</title><rect x="40.5718%" y="1045" width="0.0340%" height="15" fill="rgb(227,201,8)" fg:x="1192" fg:w="1"/><text x="40.8218%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.5718%" y="1029" width="0.0340%" height="15" fill="rgb(233,9,32)" fg:x="1192" fg:w="1"/><text x="40.8218%" y="1039.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="40.6739%" y="901" width="0.0681%" height="15" fill="rgb(217,54,24)" fg:x="1195" fg:w="2"/><text x="40.9239%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="40.6739%" y="885" width="0.0681%" height="15" fill="rgb(235,192,0)" fg:x="1195" fg:w="2"/><text x="40.9239%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="40.6739%" y="869" width="0.0681%" height="15" fill="rgb(235,45,9)" fg:x="1195" fg:w="2"/><text x="40.9239%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="40.6739%" y="853" width="0.0681%" height="15" fill="rgb(246,42,40)" fg:x="1195" fg:w="2"/><text x="40.9239%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.7080%" y="837" width="0.0340%" height="15" fill="rgb(248,111,24)" fg:x="1196" fg:w="1"/><text x="40.9580%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.7080%" y="821" width="0.0340%" height="15" fill="rgb(249,65,22)" fg:x="1196" fg:w="1"/><text x="40.9580%" y="831.50"></text></g><g><title>AutoFile::~AutoFile (5 samples, 0.17%)</title><rect x="40.6059%" y="1125" width="0.1702%" height="15" fill="rgb(238,111,51)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1135.50"></text></g><g><title>AutoFile::fclose (5 samples, 0.17%)</title><rect x="40.6059%" y="1109" width="0.1702%" height="15" fill="rgb(250,118,22)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1119.50"></text></g><g><title>fclose@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="40.6059%" y="1093" width="0.1702%" height="15" fill="rgb(234,84,26)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1103.50"></text></g><g><title>_IO_file_close_it@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="40.6059%" y="1077" width="0.1702%" height="15" fill="rgb(243,172,12)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1087.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="40.6059%" y="1061" width="0.1702%" height="15" fill="rgb(236,150,49)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1071.50"></text></g><g><title>new_do_write (5 samples, 0.17%)</title><rect x="40.6059%" y="1045" width="0.1702%" height="15" fill="rgb(225,197,26)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1055.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="40.6059%" y="1029" width="0.1702%" height="15" fill="rgb(214,17,42)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1039.50"></text></g><g><title>__GI___libc_write (5 samples, 0.17%)</title><rect x="40.6059%" y="1013" width="0.1702%" height="15" fill="rgb(224,165,40)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="40.6059%" y="997" width="0.1702%" height="15" fill="rgb(246,100,4)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="40.6059%" y="981" width="0.1702%" height="15" fill="rgb(222,103,0)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="40.6059%" y="965" width="0.1702%" height="15" fill="rgb(227,189,26)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="40.6059%" y="949" width="0.1702%" height="15" fill="rgb(214,202,17)" fg:x="1193" fg:w="5"/><text x="40.8559%" y="959.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="40.6739%" y="933" width="0.1021%" height="15" fill="rgb(229,111,3)" fg:x="1195" fg:w="3"/><text x="40.9239%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="40.6739%" y="917" width="0.1021%" height="15" fill="rgb(229,172,15)" fg:x="1195" fg:w="3"/><text x="40.9239%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="40.7420%" y="901" width="0.0340%" height="15" fill="rgb(230,224,35)" fg:x="1197" fg:w="1"/><text x="40.9920%" y="911.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="677" width="0.0340%" height="15" fill="rgb(251,141,6)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="687.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="661" width="0.0340%" height="15" fill="rgb(225,208,6)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="671.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="645" width="0.0340%" height="15" fill="rgb(246,181,16)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="655.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.03%)</title><rect x="40.7760%" y="629" width="0.0340%" height="15" fill="rgb(227,129,36)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="613" width="0.0340%" height="15" fill="rgb(248,117,24)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="623.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="597" width="0.0340%" height="15" fill="rgb(214,185,35)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="607.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="581" width="0.0340%" height="15" fill="rgb(236,150,34)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="591.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="565" width="0.0340%" height="15" fill="rgb(243,228,27)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="575.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="40.7760%" y="549" width="0.0340%" height="15" fill="rgb(245,77,44)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="559.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="40.7760%" y="533" width="0.0340%" height="15" fill="rgb(235,214,42)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="543.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="40.7760%" y="517" width="0.0340%" height="15" fill="rgb(221,74,3)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="527.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="40.7760%" y="501" width="0.0340%" height="15" fill="rgb(206,121,29)" fg:x="1198" fg:w="1"/><text x="41.0260%" y="511.50"></text></g><g><title>CSHA256::Write (2 samples, 0.07%)</title><rect x="40.8101%" y="581" width="0.0681%" height="15" fill="rgb(249,131,53)" fg:x="1199" fg:w="2"/><text x="41.0601%" y="591.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="40.8441%" y="565" width="0.0340%" height="15" fill="rgb(236,170,29)" fg:x="1200" fg:w="1"/><text x="41.0941%" y="575.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="40.8441%" y="549" width="0.0340%" height="15" fill="rgb(247,96,15)" fg:x="1200" fg:w="1"/><text x="41.0941%" y="559.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="40.8441%" y="533" width="0.0340%" height="15" fill="rgb(211,210,7)" fg:x="1200" fg:w="1"/><text x="41.0941%" y="543.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (3 samples, 0.10%)</title><rect x="40.8101%" y="629" width="0.1021%" height="15" fill="rgb(240,88,50)" fg:x="1199" fg:w="3"/><text x="41.0601%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (3 samples, 0.10%)</title><rect x="40.8101%" y="613" width="0.1021%" height="15" fill="rgb(209,229,26)" fg:x="1199" fg:w="3"/><text x="41.0601%" y="623.50"></text></g><g><title>HashWriter::write (3 samples, 0.10%)</title><rect x="40.8101%" y="597" width="0.1021%" height="15" fill="rgb(210,68,23)" fg:x="1199" fg:w="3"/><text x="41.0601%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="40.8781%" y="581" width="0.0340%" height="15" fill="rgb(229,180,13)" fg:x="1201" fg:w="1"/><text x="41.1281%" y="591.50"></text></g><g><title>QuadRound (1 samples, 0.03%)</title><rect x="40.8781%" y="565" width="0.0340%" height="15" fill="rgb(236,53,44)" fg:x="1201" fg:w="1"/><text x="41.1281%" y="575.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.03%)</title><rect x="40.8781%" y="549" width="0.0340%" height="15" fill="rgb(244,214,29)" fg:x="1201" fg:w="1"/><text x="41.1281%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (5 samples, 0.17%)</title><rect x="40.7760%" y="773" width="0.1702%" height="15" fill="rgb(220,75,29)" fg:x="1198" fg:w="5"/><text x="41.0260%" y="783.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (5 samples, 0.17%)</title><rect x="40.7760%" y="757" width="0.1702%" height="15" fill="rgb(214,183,37)" fg:x="1198" fg:w="5"/><text x="41.0260%" y="767.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (5 samples, 0.17%)</title><rect x="40.7760%" y="741" width="0.1702%" height="15" fill="rgb(239,117,29)" fg:x="1198" fg:w="5"/><text x="41.0260%" y="751.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (5 samples, 0.17%)</title><rect x="40.7760%" y="725" width="0.1702%" height="15" fill="rgb(237,171,35)" fg:x="1198" fg:w="5"/><text x="41.0260%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.17%)</title><rect x="40.7760%" y="709" width="0.1702%" height="15" fill="rgb(229,178,53)" fg:x="1198" fg:w="5"/><text x="41.0260%" y="719.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.17%)</title><rect x="40.7760%" y="693" width="0.1702%" height="15" fill="rgb(210,102,19)" fg:x="1198" fg:w="5"/><text x="41.0260%" y="703.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.14%)</title><rect x="40.8101%" y="677" width="0.1361%" height="15" fill="rgb(235,127,22)" fg:x="1199" fg:w="4"/><text x="41.0601%" y="687.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (4 samples, 0.14%)</title><rect x="40.8101%" y="661" width="0.1361%" height="15" fill="rgb(244,31,31)" fg:x="1199" fg:w="4"/><text x="41.0601%" y="671.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (4 samples, 0.14%)</title><rect x="40.8101%" y="645" width="0.1361%" height="15" fill="rgb(231,43,21)" fg:x="1199" fg:w="4"/><text x="41.0601%" y="655.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.03%)</title><rect x="40.9122%" y="629" width="0.0340%" height="15" fill="rgb(217,131,35)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="40.9122%" y="613" width="0.0340%" height="15" fill="rgb(221,149,4)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="623.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="40.9122%" y="597" width="0.0340%" height="15" fill="rgb(232,170,28)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="607.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (1 samples, 0.03%)</title><rect x="40.9122%" y="581" width="0.0340%" height="15" fill="rgb(238,56,10)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="591.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="40.9122%" y="565" width="0.0340%" height="15" fill="rgb(235,196,14)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="575.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="40.9122%" y="549" width="0.0340%" height="15" fill="rgb(216,45,48)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="559.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="40.9122%" y="533" width="0.0340%" height="15" fill="rgb(238,213,17)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="543.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="40.9122%" y="517" width="0.0340%" height="15" fill="rgb(212,13,2)" fg:x="1202" fg:w="1"/><text x="41.1622%" y="527.50"></text></g><g><title>QuadRound (2 samples, 0.07%)</title><rect x="40.9462%" y="709" width="0.0681%" height="15" fill="rgb(240,114,20)" fg:x="1203" fg:w="2"/><text x="41.1962%" y="719.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.07%)</title><rect x="40.9462%" y="693" width="0.0681%" height="15" fill="rgb(228,41,40)" fg:x="1203" fg:w="2"/><text x="41.1962%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.10%)</title><rect x="40.9462%" y="725" width="0.1021%" height="15" fill="rgb(244,132,35)" fg:x="1203" fg:w="3"/><text x="41.1962%" y="735.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="41.0143%" y="709" width="0.0340%" height="15" fill="rgb(253,189,4)" fg:x="1205" fg:w="1"/><text x="41.2643%" y="719.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="41.0143%" y="693" width="0.0340%" height="15" fill="rgb(224,37,19)" fg:x="1205" fg:w="1"/><text x="41.2643%" y="703.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.03%)</title><rect x="41.0483%" y="677" width="0.0340%" height="15" fill="rgb(235,223,18)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="687.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.03%)</title><rect x="41.0483%" y="661" width="0.0340%" height="15" fill="rgb(235,163,25)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="645" width="0.0340%" height="15" fill="rgb(217,145,28)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="655.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="629" width="0.0340%" height="15" fill="rgb(223,223,32)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="639.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="613" width="0.0340%" height="15" fill="rgb(227,189,39)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="623.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="597" width="0.0340%" height="15" fill="rgb(248,10,22)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="581" width="0.0340%" height="15" fill="rgb(248,46,39)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="591.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="565" width="0.0340%" height="15" fill="rgb(248,113,48)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="575.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="549" width="0.0340%" height="15" fill="rgb(245,16,25)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="533" width="0.0340%" height="15" fill="rgb(249,152,16)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="517" width="0.0340%" height="15" fill="rgb(250,16,1)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="501" width="0.0340%" height="15" fill="rgb(249,138,3)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="485" width="0.0340%" height="15" fill="rgb(227,71,41)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="469" width="0.0340%" height="15" fill="rgb(209,184,23)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="479.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="453" width="0.0340%" height="15" fill="rgb(223,215,31)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="463.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="437" width="0.0340%" height="15" fill="rgb(210,146,28)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="447.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="421" width="0.0340%" height="15" fill="rgb(209,183,41)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="405" width="0.0340%" height="15" fill="rgb(209,224,45)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="415.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="389" width="0.0340%" height="15" fill="rgb(224,209,51)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="399.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="373" width="0.0340%" height="15" fill="rgb(223,17,39)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="383.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="357" width="0.0340%" height="15" fill="rgb(234,204,37)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="367.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="41.0483%" y="341" width="0.0340%" height="15" fill="rgb(236,120,5)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="351.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::size (1 samples, 0.03%)</title><rect x="41.0483%" y="325" width="0.0340%" height="15" fill="rgb(248,97,27)" fg:x="1206" fg:w="1"/><text x="41.2983%" y="335.50"></text></g><g><title>ShiftMessageA (1 samples, 0.03%)</title><rect x="41.0824%" y="645" width="0.0340%" height="15" fill="rgb(240,66,17)" fg:x="1207" fg:w="1"/><text x="41.3324%" y="655.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.03%)</title><rect x="41.0824%" y="629" width="0.0340%" height="15" fill="rgb(210,79,3)" fg:x="1207" fg:w="1"/><text x="41.3324%" y="639.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (6 samples, 0.20%)</title><rect x="40.9462%" y="773" width="0.2042%" height="15" fill="rgb(214,176,27)" fg:x="1203" fg:w="6"/><text x="41.1962%" y="783.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (6 samples, 0.20%)</title><rect x="40.9462%" y="757" width="0.2042%" height="15" fill="rgb(235,185,3)" fg:x="1203" fg:w="6"/><text x="41.1962%" y="767.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (6 samples, 0.20%)</title><rect x="40.9462%" y="741" width="0.2042%" height="15" fill="rgb(227,24,12)" fg:x="1203" fg:w="6"/><text x="41.1962%" y="751.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (3 samples, 0.10%)</title><rect x="41.0483%" y="725" width="0.1021%" height="15" fill="rgb(252,169,48)" fg:x="1206" fg:w="3"/><text x="41.2983%" y="735.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (3 samples, 0.10%)</title><rect x="41.0483%" y="709" width="0.1021%" height="15" fill="rgb(212,65,1)" fg:x="1206" fg:w="3"/><text x="41.2983%" y="719.50"></text></g><g><title>HashWriter::write (3 samples, 0.10%)</title><rect x="41.0483%" y="693" width="0.1021%" height="15" fill="rgb(242,39,24)" fg:x="1206" fg:w="3"/><text x="41.2983%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.07%)</title><rect x="41.0824%" y="677" width="0.0681%" height="15" fill="rgb(249,32,23)" fg:x="1207" fg:w="2"/><text x="41.3324%" y="687.50"></text></g><g><title>ShiftMessageB (2 samples, 0.07%)</title><rect x="41.0824%" y="661" width="0.0681%" height="15" fill="rgb(251,195,23)" fg:x="1207" fg:w="2"/><text x="41.3324%" y="671.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="41.1164%" y="645" width="0.0340%" height="15" fill="rgb(236,174,8)" fg:x="1208" fg:w="1"/><text x="41.3664%" y="655.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="41.1164%" y="629" width="0.0340%" height="15" fill="rgb(220,197,8)" fg:x="1208" fg:w="1"/><text x="41.3664%" y="639.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="41.1504%" y="725" width="0.0340%" height="15" fill="rgb(240,108,37)" fg:x="1209" fg:w="1"/><text x="41.4004%" y="735.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (13 samples, 0.44%)</title><rect x="40.7760%" y="789" width="0.4425%" height="15" fill="rgb(232,176,24)" fg:x="1198" fg:w="13"/><text x="41.0260%" y="799.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="41.1504%" y="773" width="0.0681%" height="15" fill="rgb(243,35,29)" fg:x="1209" fg:w="2"/><text x="41.4004%" y="783.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="41.1504%" y="757" width="0.0681%" height="15" fill="rgb(210,37,18)" fg:x="1209" fg:w="2"/><text x="41.4004%" y="767.50"></text></g><g><title>HashWriter::write (2 samples, 0.07%)</title><rect x="41.1504%" y="741" width="0.0681%" height="15" fill="rgb(224,184,40)" fg:x="1209" fg:w="2"/><text x="41.4004%" y="751.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="41.1845%" y="725" width="0.0340%" height="15" fill="rgb(236,39,29)" fg:x="1210" fg:w="1"/><text x="41.4345%" y="735.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (14 samples, 0.48%)</title><rect x="40.7760%" y="1125" width="0.4765%" height="15" fill="rgb(232,48,39)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1135.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="1109" width="0.4765%" height="15" fill="rgb(236,34,42)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1119.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="1093" width="0.4765%" height="15" fill="rgb(243,106,37)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1103.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="1077" width="0.4765%" height="15" fill="rgb(218,96,6)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1087.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="1061" width="0.4765%" height="15" fill="rgb(235,130,12)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="1045" width="0.4765%" height="15" fill="rgb(231,95,0)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1055.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="1029" width="0.4765%" height="15" fill="rgb(228,12,23)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1039.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="1013" width="0.4765%" height="15" fill="rgb(216,12,1)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1023.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="997" width="0.4765%" height="15" fill="rgb(219,59,3)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="1007.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="981" width="0.4765%" height="15" fill="rgb(215,208,46)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="991.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="965" width="0.4765%" height="15" fill="rgb(254,224,29)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="975.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="949" width="0.4765%" height="15" fill="rgb(232,14,29)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="959.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="933" width="0.4765%" height="15" fill="rgb(208,45,52)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="943.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="917" width="0.4765%" height="15" fill="rgb(234,191,28)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="927.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="901" width="0.4765%" height="15" fill="rgb(244,67,43)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="911.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="885" width="0.4765%" height="15" fill="rgb(236,189,24)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="869" width="0.4765%" height="15" fill="rgb(239,214,33)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="879.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="853" width="0.4765%" height="15" fill="rgb(226,176,41)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="863.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="837" width="0.4765%" height="15" fill="rgb(248,47,8)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="821" width="0.4765%" height="15" fill="rgb(218,81,44)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="831.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (14 samples, 0.48%)</title><rect x="40.7760%" y="805" width="0.4765%" height="15" fill="rgb(213,98,6)" fg:x="1198" fg:w="14"/><text x="41.0260%" y="815.50"></text></g><g><title>void WriteCompactSize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.2185%" y="789" width="0.0340%" height="15" fill="rgb(222,85,22)" fg:x="1211" fg:w="1"/><text x="41.4685%" y="799.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="41.2185%" y="773" width="0.0340%" height="15" fill="rgb(239,46,39)" fg:x="1211" fg:w="1"/><text x="41.4685%" y="783.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="41.2185%" y="757" width="0.0340%" height="15" fill="rgb(237,12,29)" fg:x="1211" fg:w="1"/><text x="41.4685%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="41.2185%" y="741" width="0.0340%" height="15" fill="rgb(214,77,8)" fg:x="1211" fg:w="1"/><text x="41.4685%" y="751.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="41.2185%" y="725" width="0.0340%" height="15" fill="rgb(217,168,37)" fg:x="1211" fg:w="1"/><text x="41.4685%" y="735.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="41.2185%" y="709" width="0.0340%" height="15" fill="rgb(221,217,23)" fg:x="1211" fg:w="1"/><text x="41.4685%" y="719.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.03%)</title><rect x="41.2185%" y="693" width="0.0340%" height="15" fill="rgb(243,229,36)" fg:x="1211" fg:w="1"/><text x="41.4685%" y="703.50"></text></g><g><title>FlatFileSeq::FileName (1 samples, 0.03%)</title><rect x="41.2526%" y="1093" width="0.0340%" height="15" fill="rgb(251,163,40)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, int&gt; (1 samples, 0.03%)</title><rect x="41.2526%" y="1077" width="0.0340%" height="15" fill="rgb(237,222,12)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="1087.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (1 samples, 0.03%)</title><rect x="41.2526%" y="1061" width="0.0340%" height="15" fill="rgb(248,132,6)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="1071.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (1 samples, 0.03%)</title><rect x="41.2526%" y="1045" width="0.0340%" height="15" fill="rgb(227,167,50)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign&lt;char*, void&gt; (1 samples, 0.03%)</title><rect x="41.2526%" y="1029" width="0.0340%" height="15" fill="rgb(242,84,37)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::replace (1 samples, 0.03%)</title><rect x="41.2526%" y="1013" width="0.0340%" height="15" fill="rgb(212,4,50)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="1023.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="41.2526%" y="997" width="0.0340%" height="15" fill="rgb(230,228,32)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="1007.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.03%)</title><rect x="41.2526%" y="981" width="0.0340%" height="15" fill="rgb(248,217,23)" fg:x="1212" fg:w="1"/><text x="41.5026%" y="991.50"></text></g><g><title>FlatFileSeq::Open (3 samples, 0.10%)</title><rect x="41.2866%" y="1093" width="0.1021%" height="15" fill="rgb(238,197,32)" fg:x="1213" fg:w="3"/><text x="41.5366%" y="1103.50"></text></g><g><title>std::filesystem::create_directories (3 samples, 0.10%)</title><rect x="41.2866%" y="1077" width="0.1021%" height="15" fill="rgb(236,106,1)" fg:x="1213" fg:w="3"/><text x="41.5366%" y="1087.50"></text></g><g><title>std::filesystem::create_directories (3 samples, 0.10%)</title><rect x="41.2866%" y="1061" width="0.1021%" height="15" fill="rgb(219,228,13)" fg:x="1213" fg:w="3"/><text x="41.5366%" y="1071.50"></text></g><g><title>std::filesystem::status (3 samples, 0.10%)</title><rect x="41.2866%" y="1045" width="0.1021%" height="15" fill="rgb(238,30,35)" fg:x="1213" fg:w="3"/><text x="41.5366%" y="1055.50"></text></g><g><title>__GI___fstatat64 (3 samples, 0.10%)</title><rect x="41.2866%" y="1029" width="0.1021%" height="15" fill="rgb(236,70,23)" fg:x="1213" fg:w="3"/><text x="41.5366%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="41.2866%" y="1013" width="0.1021%" height="15" fill="rgb(249,104,48)" fg:x="1213" fg:w="3"/><text x="41.5366%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="41.2866%" y="997" width="0.1021%" height="15" fill="rgb(254,117,50)" fg:x="1213" fg:w="3"/><text x="41.5366%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="41.3206%" y="981" width="0.0681%" height="15" fill="rgb(223,152,4)" fg:x="1214" fg:w="2"/><text x="41.5706%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="41.3206%" y="965" width="0.0681%" height="15" fill="rgb(245,6,2)" fg:x="1214" fg:w="2"/><text x="41.5706%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="41.3206%" y="949" width="0.0681%" height="15" fill="rgb(249,150,24)" fg:x="1214" fg:w="2"/><text x="41.5706%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="41.3206%" y="933" width="0.0681%" height="15" fill="rgb(228,185,42)" fg:x="1214" fg:w="2"/><text x="41.5706%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="41.3206%" y="917" width="0.0681%" height="15" fill="rgb(226,39,33)" fg:x="1214" fg:w="2"/><text x="41.5706%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="41.3206%" y="901" width="0.0681%" height="15" fill="rgb(221,166,19)" fg:x="1214" fg:w="2"/><text x="41.5706%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="41.3206%" y="885" width="0.0681%" height="15" fill="rgb(209,109,2)" fg:x="1214" fg:w="2"/><text x="41.5706%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="41.3547%" y="869" width="0.0340%" height="15" fill="rgb(252,216,26)" fg:x="1215" fg:w="1"/><text x="41.6047%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="41.3547%" y="853" width="0.0340%" height="15" fill="rgb(227,173,36)" fg:x="1215" fg:w="1"/><text x="41.6047%" y="863.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="41.6270%" y="917" width="0.0340%" height="15" fill="rgb(209,90,7)" fg:x="1223" fg:w="1"/><text x="41.8770%" y="927.50"></text></g><g><title>__fopen_internal (14 samples, 0.48%)</title><rect x="41.3887%" y="1093" width="0.4765%" height="15" fill="rgb(250,194,11)" fg:x="1216" fg:w="14"/><text x="41.6387%" y="1103.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (14 samples, 0.48%)</title><rect x="41.3887%" y="1077" width="0.4765%" height="15" fill="rgb(220,72,50)" fg:x="1216" fg:w="14"/><text x="41.6387%" y="1087.50"></text></g><g><title>_IO_file_open (14 samples, 0.48%)</title><rect x="41.3887%" y="1061" width="0.4765%" height="15" fill="rgb(222,106,48)" fg:x="1216" fg:w="14"/><text x="41.6387%" y="1071.50"></text></g><g><title>__GI___libc_open (14 samples, 0.48%)</title><rect x="41.3887%" y="1045" width="0.4765%" height="15" fill="rgb(216,220,45)" fg:x="1216" fg:w="14"/><text x="41.6387%" y="1055.50"></text></g><g><title>[unknown] (14 samples, 0.48%)</title><rect x="41.3887%" y="1029" width="0.4765%" height="15" fill="rgb(234,112,18)" fg:x="1216" fg:w="14"/><text x="41.6387%" y="1039.50"></text></g><g><title>[unknown] (14 samples, 0.48%)</title><rect x="41.3887%" y="1013" width="0.4765%" height="15" fill="rgb(206,179,9)" fg:x="1216" fg:w="14"/><text x="41.6387%" y="1023.50"></text></g><g><title>[unknown] (14 samples, 0.48%)</title><rect x="41.3887%" y="997" width="0.4765%" height="15" fill="rgb(215,115,40)" fg:x="1216" fg:w="14"/><text x="41.6387%" y="1007.50"></text></g><g><title>[unknown] (13 samples, 0.44%)</title><rect x="41.4227%" y="981" width="0.4425%" height="15" fill="rgb(222,69,34)" fg:x="1217" fg:w="13"/><text x="41.6727%" y="991.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="41.5248%" y="965" width="0.3404%" height="15" fill="rgb(209,161,10)" fg:x="1220" fg:w="10"/><text x="41.7748%" y="975.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="41.5589%" y="949" width="0.3063%" height="15" fill="rgb(217,6,38)" fg:x="1221" fg:w="9"/><text x="41.8089%" y="959.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="41.5929%" y="933" width="0.2723%" height="15" fill="rgb(229,229,48)" fg:x="1222" fg:w="8"/><text x="41.8429%" y="943.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="41.6610%" y="917" width="0.2042%" height="15" fill="rgb(225,21,28)" fg:x="1224" fg:w="6"/><text x="41.9110%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="41.7631%" y="901" width="0.1021%" height="15" fill="rgb(206,33,13)" fg:x="1227" fg:w="3"/><text x="42.0131%" y="911.50"></text></g><g><title>create_directories (9 samples, 0.31%)</title><rect x="41.8652%" y="1093" width="0.3063%" height="15" fill="rgb(242,178,17)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="1103.50"></text></g><g><title>std::filesystem::is_symlink (9 samples, 0.31%)</title><rect x="41.8652%" y="1077" width="0.3063%" height="15" fill="rgb(220,162,5)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="1087.50"></text></g><g><title>std::filesystem::symlink_status (9 samples, 0.31%)</title><rect x="41.8652%" y="1061" width="0.3063%" height="15" fill="rgb(210,33,43)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="1071.50"></text></g><g><title>std::filesystem::symlink_status (9 samples, 0.31%)</title><rect x="41.8652%" y="1045" width="0.3063%" height="15" fill="rgb(216,116,54)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="1055.50"></text></g><g><title>__GI___fstatat64 (9 samples, 0.31%)</title><rect x="41.8652%" y="1029" width="0.3063%" height="15" fill="rgb(249,92,24)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="1039.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="41.8652%" y="1013" width="0.3063%" height="15" fill="rgb(231,189,14)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="1023.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="41.8652%" y="997" width="0.3063%" height="15" fill="rgb(230,8,41)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="1007.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="41.8652%" y="981" width="0.3063%" height="15" fill="rgb(249,7,27)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="991.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="41.8652%" y="965" width="0.3063%" height="15" fill="rgb(232,86,5)" fg:x="1230" fg:w="9"/><text x="42.1152%" y="975.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="41.8993%" y="949" width="0.2723%" height="15" fill="rgb(224,175,18)" fg:x="1231" fg:w="8"/><text x="42.1493%" y="959.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="41.8993%" y="933" width="0.2723%" height="15" fill="rgb(220,129,12)" fg:x="1231" fg:w="8"/><text x="42.1493%" y="943.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="41.9673%" y="917" width="0.2042%" height="15" fill="rgb(210,19,36)" fg:x="1233" fg:w="6"/><text x="42.2173%" y="927.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="41.9673%" y="901" width="0.2042%" height="15" fill="rgb(219,96,14)" fg:x="1233" fg:w="6"/><text x="42.2173%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="42.0014%" y="885" width="0.1702%" height="15" fill="rgb(249,106,1)" fg:x="1234" fg:w="5"/><text x="42.2514%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="42.0694%" y="869" width="0.1021%" height="15" fill="rgb(249,155,20)" fg:x="1236" fg:w="3"/><text x="42.3194%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="42.1035%" y="853" width="0.0681%" height="15" fill="rgb(244,168,9)" fg:x="1237" fg:w="2"/><text x="42.3535%" y="863.50"></text></g><g><title>_IO_doallocbuf (1 samples, 0.03%)</title><rect x="42.1715%" y="1061" width="0.0340%" height="15" fill="rgb(216,23,50)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="1071.50"></text></g><g><title>_IO_file_doallocate (1 samples, 0.03%)</title><rect x="42.1715%" y="1045" width="0.0340%" height="15" fill="rgb(224,219,20)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="1055.50"></text></g><g><title>__fstat64 (1 samples, 0.03%)</title><rect x="42.1715%" y="1029" width="0.0340%" height="15" fill="rgb(222,156,15)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="42.1715%" y="1013" width="0.0340%" height="15" fill="rgb(231,97,17)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="42.1715%" y="997" width="0.0340%" height="15" fill="rgb(218,70,48)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="42.1715%" y="981" width="0.0340%" height="15" fill="rgb(212,196,52)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="42.1715%" y="965" width="0.0340%" height="15" fill="rgb(243,203,18)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="42.1715%" y="949" width="0.0340%" height="15" fill="rgb(252,125,41)" fg:x="1239" fg:w="1"/><text x="42.4215%" y="959.50"></text></g><g><title>fseek (5 samples, 0.17%)</title><rect x="42.1715%" y="1093" width="0.1702%" height="15" fill="rgb(223,180,33)" fg:x="1239" fg:w="5"/><text x="42.4215%" y="1103.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="42.1715%" y="1077" width="0.1702%" height="15" fill="rgb(254,159,46)" fg:x="1239" fg:w="5"/><text x="42.4215%" y="1087.50"></text></g><g><title>read (4 samples, 0.14%)</title><rect x="42.2056%" y="1061" width="0.1361%" height="15" fill="rgb(254,38,10)" fg:x="1240" fg:w="4"/><text x="42.4556%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="42.2056%" y="1045" width="0.1361%" height="15" fill="rgb(208,217,32)" fg:x="1240" fg:w="4"/><text x="42.4556%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="42.2056%" y="1029" width="0.1361%" height="15" fill="rgb(221,120,13)" fg:x="1240" fg:w="4"/><text x="42.4556%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="42.2056%" y="1013" width="0.1361%" height="15" fill="rgb(246,54,52)" fg:x="1240" fg:w="4"/><text x="42.4556%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="42.2396%" y="997" width="0.1021%" height="15" fill="rgb(242,34,25)" fg:x="1241" fg:w="3"/><text x="42.4896%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="42.2396%" y="981" width="0.1021%" height="15" fill="rgb(247,209,9)" fg:x="1241" fg:w="3"/><text x="42.4896%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="42.2396%" y="965" width="0.1021%" height="15" fill="rgb(228,71,26)" fg:x="1241" fg:w="3"/><text x="42.4896%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="42.2737%" y="949" width="0.0681%" height="15" fill="rgb(222,145,49)" fg:x="1242" fg:w="2"/><text x="42.5237%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="42.2737%" y="933" width="0.0681%" height="15" fill="rgb(218,121,17)" fg:x="1242" fg:w="2"/><text x="42.5237%" y="943.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="42.3077%" y="917" width="0.0340%" height="15" fill="rgb(244,50,7)" fg:x="1243" fg:w="1"/><text x="42.5577%" y="927.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="42.3077%" y="901" width="0.0340%" height="15" fill="rgb(246,229,37)" fg:x="1243" fg:w="1"/><text x="42.5577%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="42.3077%" y="885" width="0.0340%" height="15" fill="rgb(225,18,5)" fg:x="1243" fg:w="1"/><text x="42.5577%" y="895.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="42.3077%" y="869" width="0.0340%" height="15" fill="rgb(213,204,8)" fg:x="1243" fg:w="1"/><text x="42.5577%" y="879.50"></text></g><g><title>node::BlockManager::OpenUndoFile (34 samples, 1.16%)</title><rect x="41.2526%" y="1125" width="1.1572%" height="15" fill="rgb(238,103,6)" fg:x="1212" fg:w="34"/><text x="41.5026%" y="1135.50"></text></g><g><title>FlatFileSeq::Open (34 samples, 1.16%)</title><rect x="41.2526%" y="1109" width="1.1572%" height="15" fill="rgb(222,25,35)" fg:x="1212" fg:w="34"/><text x="41.5026%" y="1119.50"></text></g><g><title>std::filesystem::__cxx11::path::parent_path (2 samples, 0.07%)</title><rect x="42.3417%" y="1093" width="0.0681%" height="15" fill="rgb(213,203,35)" fg:x="1244" fg:w="2"/><text x="42.5917%" y="1103.50"></text></g><g><title>std::filesystem::__cxx11::path::_M_split_cmpts (2 samples, 0.07%)</title><rect x="42.3417%" y="1077" width="0.0681%" height="15" fill="rgb(221,79,53)" fg:x="1244" fg:w="2"/><text x="42.5917%" y="1087.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="421" width="0.0340%" height="15" fill="rgb(243,200,35)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="431.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="405" width="0.0340%" height="15" fill="rgb(248,60,25)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="415.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="389" width="0.0340%" height="15" fill="rgb(227,53,46)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="399.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="373" width="0.0340%" height="15" fill="rgb(216,120,32)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="383.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="357" width="0.0340%" height="15" fill="rgb(220,134,1)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="367.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="341" width="0.0340%" height="15" fill="rgb(237,168,5)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="351.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="325" width="0.0340%" height="15" fill="rgb(231,100,33)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="335.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="309" width="0.0340%" height="15" fill="rgb(236,177,47)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="319.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="293" width="0.0340%" height="15" fill="rgb(235,7,49)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="303.50"></text></g><g><title>Span&lt;unsigned char const&gt;::Span&lt;CScript&gt; (1 samples, 0.03%)</title><rect x="42.4098%" y="277" width="0.0340%" height="15" fill="rgb(232,119,22)" fg:x="1246" fg:w="1"/><text x="42.6598%" y="287.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="661" width="0.0681%" height="15" fill="rgb(254,73,53)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="671.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="645" width="0.0681%" height="15" fill="rgb(251,35,20)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="655.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="629" width="0.0681%" height="15" fill="rgb(241,119,20)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="613" width="0.0681%" height="15" fill="rgb(207,102,14)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="597" width="0.0681%" height="15" fill="rgb(248,201,50)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="581" width="0.0681%" height="15" fill="rgb(222,185,44)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="591.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="565" width="0.0681%" height="15" fill="rgb(218,107,18)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="575.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="549" width="0.0681%" height="15" fill="rgb(237,177,39)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="559.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="533" width="0.0681%" height="15" fill="rgb(246,69,6)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="517" width="0.0681%" height="15" fill="rgb(234,208,37)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="527.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="501" width="0.0681%" height="15" fill="rgb(225,4,6)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="511.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="485" width="0.0681%" height="15" fill="rgb(233,45,0)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="495.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="469" width="0.0681%" height="15" fill="rgb(226,136,5)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="479.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="453" width="0.0681%" height="15" fill="rgb(211,91,47)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="463.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (2 samples, 0.07%)</title><rect x="42.4098%" y="437" width="0.0681%" height="15" fill="rgb(242,88,51)" fg:x="1246" fg:w="2"/><text x="42.6598%" y="447.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.4438%" y="421" width="0.0340%" height="15" fill="rgb(230,91,28)" fg:x="1247" fg:w="1"/><text x="42.6938%" y="431.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.4438%" y="405" width="0.0340%" height="15" fill="rgb(254,186,29)" fg:x="1247" fg:w="1"/><text x="42.6938%" y="415.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.03%)</title><rect x="42.4438%" y="389" width="0.0340%" height="15" fill="rgb(238,6,4)" fg:x="1247" fg:w="1"/><text x="42.6938%" y="399.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="42.4438%" y="373" width="0.0340%" height="15" fill="rgb(221,151,16)" fg:x="1247" fg:w="1"/><text x="42.6938%" y="383.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (3 samples, 0.10%)</title><rect x="42.4098%" y="757" width="0.1021%" height="15" fill="rgb(251,143,52)" fg:x="1246" fg:w="3"/><text x="42.6598%" y="767.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (3 samples, 0.10%)</title><rect x="42.4098%" y="741" width="0.1021%" height="15" fill="rgb(206,90,15)" fg:x="1246" fg:w="3"/><text x="42.6598%" y="751.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (3 samples, 0.10%)</title><rect x="42.4098%" y="725" width="0.1021%" height="15" fill="rgb(218,35,8)" fg:x="1246" fg:w="3"/><text x="42.6598%" y="735.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (3 samples, 0.10%)</title><rect x="42.4098%" y="709" width="0.1021%" height="15" fill="rgb(239,215,6)" fg:x="1246" fg:w="3"/><text x="42.6598%" y="719.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.10%)</title><rect x="42.4098%" y="693" width="0.1021%" height="15" fill="rgb(245,116,39)" fg:x="1246" fg:w="3"/><text x="42.6598%" y="703.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.10%)</title><rect x="42.4098%" y="677" width="0.1021%" height="15" fill="rgb(242,65,28)" fg:x="1246" fg:w="3"/><text x="42.6598%" y="687.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.4779%" y="661" width="0.0340%" height="15" fill="rgb(252,132,53)" fg:x="1248" fg:w="1"/><text x="42.7279%" y="671.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.4779%" y="645" width="0.0340%" height="15" fill="rgb(224,159,50)" fg:x="1248" fg:w="1"/><text x="42.7279%" y="655.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.4779%" y="629" width="0.0340%" height="15" fill="rgb(224,93,4)" fg:x="1248" fg:w="1"/><text x="42.7279%" y="639.50"></text></g><g><title>CompressAmount (1 samples, 0.03%)</title><rect x="42.4779%" y="613" width="0.0340%" height="15" fill="rgb(208,81,34)" fg:x="1248" fg:w="1"/><text x="42.7279%" y="623.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (57 samples, 1.94%)</title><rect x="40.6059%" y="1141" width="1.9401%" height="15" fill="rgb(233,92,54)" fg:x="1193" fg:w="57"/><text x="40.8559%" y="1151.50">n..</text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="1125" width="0.1361%" height="15" fill="rgb(237,21,14)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1135.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (4 samples, 0.14%)</title><rect x="42.4098%" y="1109" width="0.1361%" height="15" fill="rgb(249,128,51)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="1093" width="0.1361%" height="15" fill="rgb(223,129,24)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1103.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="1077" width="0.1361%" height="15" fill="rgb(231,168,25)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1087.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="1061" width="0.1361%" height="15" fill="rgb(224,39,20)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1071.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="1045" width="0.1361%" height="15" fill="rgb(225,152,53)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1055.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="1029" width="0.1361%" height="15" fill="rgb(252,17,24)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1039.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="1013" width="0.1361%" height="15" fill="rgb(250,114,30)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1023.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="997" width="0.1361%" height="15" fill="rgb(229,5,4)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="1007.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="981" width="0.1361%" height="15" fill="rgb(225,176,49)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="991.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="965" width="0.1361%" height="15" fill="rgb(224,221,49)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="975.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="949" width="0.1361%" height="15" fill="rgb(253,169,27)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="959.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="933" width="0.1361%" height="15" fill="rgb(211,206,16)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="943.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="917" width="0.1361%" height="15" fill="rgb(244,87,35)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="927.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="901" width="0.1361%" height="15" fill="rgb(246,28,10)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="911.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="885" width="0.1361%" height="15" fill="rgb(229,12,44)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="895.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="869" width="0.1361%" height="15" fill="rgb(210,145,37)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="879.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="853" width="0.1361%" height="15" fill="rgb(227,112,52)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="863.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="837" width="0.1361%" height="15" fill="rgb(238,155,34)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="847.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="821" width="0.1361%" height="15" fill="rgb(239,226,36)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="805" width="0.1361%" height="15" fill="rgb(230,16,23)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="815.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="789" width="0.1361%" height="15" fill="rgb(236,171,36)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="799.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="42.4098%" y="773" width="0.1361%" height="15" fill="rgb(221,22,14)" fg:x="1246" fg:w="4"/><text x="42.6598%" y="783.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5119%" y="757" width="0.0340%" height="15" fill="rgb(242,43,11)" fg:x="1249" fg:w="1"/><text x="42.7619%" y="767.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5119%" y="741" width="0.0340%" height="15" fill="rgb(232,69,23)" fg:x="1249" fg:w="1"/><text x="42.7619%" y="751.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (1 samples, 0.03%)</title><rect x="42.5119%" y="725" width="0.0340%" height="15" fill="rgb(216,180,54)" fg:x="1249" fg:w="1"/><text x="42.7619%" y="735.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="42.5119%" y="709" width="0.0340%" height="15" fill="rgb(216,5,24)" fg:x="1249" fg:w="1"/><text x="42.7619%" y="719.50"></text></g><g><title>std::set&lt;CBlockIndex*, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::insert (1 samples, 0.03%)</title><rect x="42.5459%" y="1141" width="0.0340%" height="15" fill="rgb(225,89,9)" fg:x="1250" fg:w="1"/><text x="42.7959%" y="1151.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;CBlockIndex*&gt;, bool&gt; std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_insert_unique&lt;CBlockIndex*&gt; (1 samples, 0.03%)</title><rect x="42.5459%" y="1125" width="0.0340%" height="15" fill="rgb(243,75,33)" fg:x="1250" fg:w="1"/><text x="42.7959%" y="1135.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (1 samples, 0.03%)</title><rect x="42.5459%" y="1109" width="0.0340%" height="15" fill="rgb(247,141,45)" fg:x="1250" fg:w="1"/><text x="42.7959%" y="1119.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (61 samples, 2.08%)</title><rect x="40.5378%" y="1157" width="2.0762%" height="15" fill="rgb(232,177,36)" fg:x="1191" fg:w="61"/><text x="40.7878%" y="1167.50">n..</text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1141" width="0.0340%" height="15" fill="rgb(219,125,36)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1151.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.03%)</title><rect x="42.5800%" y="1125" width="0.0340%" height="15" fill="rgb(227,94,9)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1109" width="0.0340%" height="15" fill="rgb(240,34,52)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1119.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1093" width="0.0340%" height="15" fill="rgb(216,45,12)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1103.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1077" width="0.0340%" height="15" fill="rgb(246,21,19)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1087.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1061" width="0.0340%" height="15" fill="rgb(213,98,42)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1045" width="0.0340%" height="15" fill="rgb(250,136,47)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1055.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1029" width="0.0340%" height="15" fill="rgb(251,124,27)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="1013" width="0.0340%" height="15" fill="rgb(229,180,14)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1023.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="997" width="0.0340%" height="15" fill="rgb(245,216,25)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="1007.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="981" width="0.0340%" height="15" fill="rgb(251,43,5)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="991.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="965" width="0.0340%" height="15" fill="rgb(250,128,24)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="975.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="949" width="0.0340%" height="15" fill="rgb(217,117,27)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="959.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="933" width="0.0340%" height="15" fill="rgb(245,147,4)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="943.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="917" width="0.0340%" height="15" fill="rgb(242,201,35)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="927.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="901" width="0.0340%" height="15" fill="rgb(218,181,1)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="911.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="885" width="0.0340%" height="15" fill="rgb(222,6,29)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="895.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="869" width="0.0340%" height="15" fill="rgb(208,186,3)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="879.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="853" width="0.0340%" height="15" fill="rgb(216,36,26)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="863.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="837" width="0.0340%" height="15" fill="rgb(248,201,23)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="821" width="0.0340%" height="15" fill="rgb(251,170,31)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="831.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="805" width="0.0340%" height="15" fill="rgb(207,110,25)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="815.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="789" width="0.0340%" height="15" fill="rgb(250,54,15)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="799.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="773" width="0.0340%" height="15" fill="rgb(227,68,33)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="783.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="757" width="0.0340%" height="15" fill="rgb(238,34,41)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="767.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="741" width="0.0340%" height="15" fill="rgb(220,11,15)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="751.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="725" width="0.0340%" height="15" fill="rgb(246,111,35)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="709" width="0.0340%" height="15" fill="rgb(209,88,53)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="719.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="693" width="0.0340%" height="15" fill="rgb(231,185,47)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="677" width="0.0340%" height="15" fill="rgb(233,154,1)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="687.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="661" width="0.0340%" height="15" fill="rgb(225,15,46)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="671.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (1 samples, 0.03%)</title><rect x="42.5800%" y="645" width="0.0340%" height="15" fill="rgb(211,135,41)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="655.50"></text></g><g><title>CompressAmount (1 samples, 0.03%)</title><rect x="42.5800%" y="629" width="0.0340%" height="15" fill="rgb(208,54,0)" fg:x="1251" fg:w="1"/><text x="42.8300%" y="639.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.03%)</title><rect x="42.6140%" y="1157" width="0.0340%" height="15" fill="rgb(244,136,14)" fg:x="1252" fg:w="1"/><text x="42.8640%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.03%)</title><rect x="42.6140%" y="1141" width="0.0340%" height="15" fill="rgb(241,56,14)" fg:x="1252" fg:w="1"/><text x="42.8640%" y="1151.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.03%)</title><rect x="42.6140%" y="1125" width="0.0340%" height="15" fill="rgb(205,80,24)" fg:x="1252" fg:w="1"/><text x="42.8640%" y="1135.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="42.6140%" y="1109" width="0.0340%" height="15" fill="rgb(220,57,4)" fg:x="1252" fg:w="1"/><text x="42.8640%" y="1119.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (1 samples, 0.03%)</title><rect x="42.6140%" y="1093" width="0.0340%" height="15" fill="rgb(226,193,50)" fg:x="1252" fg:w="1"/><text x="42.8640%" y="1103.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (1 samples, 0.03%)</title><rect x="42.6481%" y="1157" width="0.0340%" height="15" fill="rgb(231,168,22)" fg:x="1253" fg:w="1"/><text x="42.8981%" y="1167.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (1 samples, 0.03%)</title><rect x="42.6481%" y="1141" width="0.0340%" height="15" fill="rgb(254,215,14)" fg:x="1253" fg:w="1"/><text x="42.8981%" y="1151.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.03%)</title><rect x="42.6481%" y="1125" width="0.0340%" height="15" fill="rgb(211,115,16)" fg:x="1253" fg:w="1"/><text x="42.8981%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_Vector_base (1 samples, 0.03%)</title><rect x="42.6821%" y="1141" width="0.0340%" height="15" fill="rgb(236,210,16)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_create_storage (1 samples, 0.03%)</title><rect x="42.6821%" y="1125" width="0.0340%" height="15" fill="rgb(221,94,12)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="42.6821%" y="1109" width="0.0340%" height="15" fill="rgb(235,218,49)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="42.6821%" y="1093" width="0.0340%" height="15" fill="rgb(217,114,14)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;PrecomputedTransactionData&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="42.6821%" y="1077" width="0.0340%" height="15" fill="rgb(216,145,22)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1087.50"></text></g><g><title>std::allocator&lt;PrecomputedTransactionData&gt;::allocate (1 samples, 0.03%)</title><rect x="42.6821%" y="1061" width="0.0340%" height="15" fill="rgb(217,112,39)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;PrecomputedTransactionData&gt;::allocate (1 samples, 0.03%)</title><rect x="42.6821%" y="1045" width="0.0340%" height="15" fill="rgb(225,85,32)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1055.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="42.6821%" y="1029" width="0.0340%" height="15" fill="rgb(245,209,47)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1039.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="42.6821%" y="1013" width="0.0340%" height="15" fill="rgb(218,220,15)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1023.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="42.6821%" y="997" width="0.0340%" height="15" fill="rgb(222,202,31)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="1007.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="42.6821%" y="981" width="0.0340%" height="15" fill="rgb(243,203,4)" fg:x="1254" fg:w="1"/><text x="42.9321%" y="991.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (4 samples, 0.14%)</title><rect x="42.6821%" y="1157" width="0.1361%" height="15" fill="rgb(237,92,17)" fg:x="1254" fg:w="4"/><text x="42.9321%" y="1167.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (3 samples, 0.10%)</title><rect x="42.7161%" y="1141" width="0.1021%" height="15" fill="rgb(231,119,7)" fg:x="1255" fg:w="3"/><text x="42.9661%" y="1151.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (3 samples, 0.10%)</title><rect x="42.7161%" y="1125" width="0.1021%" height="15" fill="rgb(237,82,41)" fg:x="1255" fg:w="3"/><text x="42.9661%" y="1135.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (3 samples, 0.10%)</title><rect x="42.7161%" y="1109" width="0.1021%" height="15" fill="rgb(226,81,48)" fg:x="1255" fg:w="3"/><text x="42.9661%" y="1119.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (3 samples, 0.10%)</title><rect x="42.7161%" y="1093" width="0.1021%" height="15" fill="rgb(234,70,51)" fg:x="1255" fg:w="3"/><text x="42.9661%" y="1103.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (3 samples, 0.10%)</title><rect x="42.7161%" y="1077" width="0.1021%" height="15" fill="rgb(251,86,4)" fg:x="1255" fg:w="3"/><text x="42.9661%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="42.7842%" y="1061" width="0.0340%" height="15" fill="rgb(244,144,28)" fg:x="1257" fg:w="1"/><text x="43.0342%" y="1071.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (2 samples, 0.07%)</title><rect x="42.8182%" y="1157" width="0.0681%" height="15" fill="rgb(232,161,39)" fg:x="1258" fg:w="2"/><text x="43.0682%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (2 samples, 0.07%)</title><rect x="42.8182%" y="1141" width="0.0681%" height="15" fill="rgb(247,34,51)" fg:x="1258" fg:w="2"/><text x="43.0682%" y="1151.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (2 samples, 0.07%)</title><rect x="42.8182%" y="1125" width="0.0681%" height="15" fill="rgb(225,132,2)" fg:x="1258" fg:w="2"/><text x="43.0682%" y="1135.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (2 samples, 0.07%)</title><rect x="42.8182%" y="1109" width="0.0681%" height="15" fill="rgb(209,159,44)" fg:x="1258" fg:w="2"/><text x="43.0682%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (1 samples, 0.03%)</title><rect x="42.8523%" y="1093" width="0.0340%" height="15" fill="rgb(251,214,1)" fg:x="1259" fg:w="1"/><text x="43.1023%" y="1103.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (1 samples, 0.03%)</title><rect x="42.8523%" y="1077" width="0.0340%" height="15" fill="rgb(247,84,47)" fg:x="1259" fg:w="1"/><text x="43.1023%" y="1087.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (1 samples, 0.03%)</title><rect x="42.8523%" y="1061" width="0.0340%" height="15" fill="rgb(240,111,43)" fg:x="1259" fg:w="1"/><text x="43.1023%" y="1071.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="42.8523%" y="1045" width="0.0340%" height="15" fill="rgb(215,214,35)" fg:x="1259" fg:w="1"/><text x="43.1023%" y="1055.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (1 samples, 0.03%)</title><rect x="42.8863%" y="1109" width="0.0340%" height="15" fill="rgb(248,207,23)" fg:x="1260" fg:w="1"/><text x="43.1363%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.03%)</title><rect x="42.8863%" y="1093" width="0.0340%" height="15" fill="rgb(214,186,4)" fg:x="1260" fg:w="1"/><text x="43.1363%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.03%)</title><rect x="42.8863%" y="1077" width="0.0340%" height="15" fill="rgb(220,133,22)" fg:x="1260" fg:w="1"/><text x="43.1363%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.03%)</title><rect x="42.8863%" y="1061" width="0.0340%" height="15" fill="rgb(239,134,19)" fg:x="1260" fg:w="1"/><text x="43.1363%" y="1071.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="42.9204%" y="1109" width="0.0340%" height="15" fill="rgb(250,140,9)" fg:x="1261" fg:w="1"/><text x="43.1704%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::insert (1 samples, 0.03%)</title><rect x="42.9204%" y="1093" width="0.0340%" height="15" fill="rgb(225,59,14)" fg:x="1261" fg:w="1"/><text x="43.1704%" y="1103.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="42.9204%" y="1077" width="0.0340%" height="15" fill="rgb(214,152,51)" fg:x="1261" fg:w="1"/><text x="43.1704%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.03%)</title><rect x="42.9204%" y="1061" width="0.0340%" height="15" fill="rgb(251,227,43)" fg:x="1261" fg:w="1"/><text x="43.1704%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.03%)</title><rect x="42.9204%" y="1045" width="0.0340%" height="15" fill="rgb(241,96,17)" fg:x="1261" fg:w="1"/><text x="43.1704%" y="1055.50"></text></g><g><title>BCLog::Logger::GetLogPrefix[abi:cxx11] (1 samples, 0.03%)</title><rect x="42.9544%" y="1109" width="0.0340%" height="15" fill="rgb(234,198,43)" fg:x="1262" fg:w="1"/><text x="43.2044%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.03%)</title><rect x="42.9544%" y="1093" width="0.0340%" height="15" fill="rgb(220,108,29)" fg:x="1262" fg:w="1"/><text x="43.2044%" y="1103.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.03%)</title><rect x="42.9544%" y="1077" width="0.0340%" height="15" fill="rgb(226,163,33)" fg:x="1262" fg:w="1"/><text x="43.2044%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (1 samples, 0.03%)</title><rect x="42.9544%" y="1061" width="0.0340%" height="15" fill="rgb(205,194,45)" fg:x="1262" fg:w="1"/><text x="43.2044%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="42.9544%" y="1045" width="0.0340%" height="15" fill="rgb(206,143,44)" fg:x="1262" fg:w="1"/><text x="43.2044%" y="1055.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.03%)</title><rect x="42.9544%" y="1029" width="0.0340%" height="15" fill="rgb(236,136,36)" fg:x="1262" fg:w="1"/><text x="43.2044%" y="1039.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="43.2267%" y="917" width="0.0681%" height="15" fill="rgb(249,172,42)" fg:x="1270" fg:w="2"/><text x="43.4767%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="43.2267%" y="901" width="0.0681%" height="15" fill="rgb(216,139,23)" fg:x="1270" fg:w="2"/><text x="43.4767%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="43.2267%" y="885" width="0.0681%" height="15" fill="rgb(207,166,20)" fg:x="1270" fg:w="2"/><text x="43.4767%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="43.2267%" y="869" width="0.0681%" height="15" fill="rgb(210,209,22)" fg:x="1270" fg:w="2"/><text x="43.4767%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.2607%" y="853" width="0.0340%" height="15" fill="rgb(232,118,20)" fg:x="1271" fg:w="1"/><text x="43.5107%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.2607%" y="837" width="0.0340%" height="15" fill="rgb(238,113,42)" fg:x="1271" fg:w="1"/><text x="43.5107%" y="847.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="43.3628%" y="869" width="0.0340%" height="15" fill="rgb(231,42,5)" fg:x="1274" fg:w="1"/><text x="43.6128%" y="879.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="43.3628%" y="853" width="0.0340%" height="15" fill="rgb(243,166,24)" fg:x="1274" fg:w="1"/><text x="43.6128%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.3628%" y="837" width="0.0340%" height="15" fill="rgb(237,226,12)" fg:x="1274" fg:w="1"/><text x="43.6128%" y="847.50"></text></g><g><title>BCLog::Logger::LogPrintStr (16 samples, 0.54%)</title><rect x="42.8863%" y="1141" width="0.5446%" height="15" fill="rgb(229,133,24)" fg:x="1260" fg:w="16"/><text x="43.1363%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (16 samples, 0.54%)</title><rect x="42.8863%" y="1125" width="0.5446%" height="15" fill="rgb(238,33,43)" fg:x="1260" fg:w="16"/><text x="43.1363%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (13 samples, 0.44%)</title><rect x="42.9884%" y="1109" width="0.4425%" height="15" fill="rgb(227,59,38)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1119.50"></text></g><g><title>_IO_fwrite (13 samples, 0.44%)</title><rect x="42.9884%" y="1093" width="0.4425%" height="15" fill="rgb(230,97,0)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1103.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.44%)</title><rect x="42.9884%" y="1077" width="0.4425%" height="15" fill="rgb(250,173,50)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1087.50"></text></g><g><title>new_do_write (13 samples, 0.44%)</title><rect x="42.9884%" y="1061" width="0.4425%" height="15" fill="rgb(240,15,50)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1071.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (13 samples, 0.44%)</title><rect x="42.9884%" y="1045" width="0.4425%" height="15" fill="rgb(221,93,22)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1055.50"></text></g><g><title>__GI___libc_write (13 samples, 0.44%)</title><rect x="42.9884%" y="1029" width="0.4425%" height="15" fill="rgb(245,180,53)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1039.50"></text></g><g><title>[unknown] (13 samples, 0.44%)</title><rect x="42.9884%" y="1013" width="0.4425%" height="15" fill="rgb(231,88,51)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1023.50"></text></g><g><title>[unknown] (13 samples, 0.44%)</title><rect x="42.9884%" y="997" width="0.4425%" height="15" fill="rgb(240,58,21)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="1007.50"></text></g><g><title>[unknown] (13 samples, 0.44%)</title><rect x="42.9884%" y="981" width="0.4425%" height="15" fill="rgb(237,21,10)" fg:x="1263" fg:w="13"/><text x="43.2384%" y="991.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="43.0225%" y="965" width="0.4084%" height="15" fill="rgb(218,43,11)" fg:x="1264" fg:w="12"/><text x="43.2725%" y="975.50"></text></g><g><title>[[ext4]] (8 samples, 0.27%)</title><rect x="43.1586%" y="949" width="0.2723%" height="15" fill="rgb(218,221,29)" fg:x="1268" fg:w="8"/><text x="43.4086%" y="959.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="43.1926%" y="933" width="0.2383%" height="15" fill="rgb(214,118,42)" fg:x="1269" fg:w="7"/><text x="43.4426%" y="943.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="43.2948%" y="917" width="0.1361%" height="15" fill="rgb(251,200,26)" fg:x="1272" fg:w="4"/><text x="43.5448%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="43.3288%" y="901" width="0.1021%" height="15" fill="rgb(237,101,39)" fg:x="1273" fg:w="3"/><text x="43.5788%" y="911.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="43.3628%" y="885" width="0.0681%" height="15" fill="rgb(251,117,11)" fg:x="1274" fg:w="2"/><text x="43.6128%" y="895.50"></text></g><g><title>[[jbd2]] (1 samples, 0.03%)</title><rect x="43.3969%" y="869" width="0.0340%" height="15" fill="rgb(216,223,23)" fg:x="1275" fg:w="1"/><text x="43.6469%" y="879.50"></text></g><g><title>[[jbd2]] (1 samples, 0.03%)</title><rect x="43.3969%" y="853" width="0.0340%" height="15" fill="rgb(251,54,12)" fg:x="1275" fg:w="1"/><text x="43.6469%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.3969%" y="837" width="0.0340%" height="15" fill="rgb(254,176,54)" fg:x="1275" fg:w="1"/><text x="43.6469%" y="847.50"></text></g><g><title>[bitcoind-base] (1 samples, 0.03%)</title><rect x="43.4309%" y="1141" width="0.0340%" height="15" fill="rgb(210,32,8)" fg:x="1276" fg:w="1"/><text x="43.6809%" y="1151.50"></text></g><g><title>std::ios_base::~ios_base (1 samples, 0.03%)</title><rect x="43.4309%" y="1125" width="0.0340%" height="15" fill="rgb(235,52,38)" fg:x="1276" fg:w="1"/><text x="43.6809%" y="1135.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="43.4649%" y="1029" width="0.0340%" height="15" fill="rgb(231,4,44)" fg:x="1277" fg:w="1"/><text x="43.7149%" y="1039.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (19 samples, 0.65%)</title><rect x="42.8863%" y="1157" width="0.6467%" height="15" fill="rgb(249,2,32)" fg:x="1260" fg:w="19"/><text x="43.1363%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;double, double, double&gt; (2 samples, 0.07%)</title><rect x="43.4649%" y="1141" width="0.0681%" height="15" fill="rgb(224,65,26)" fg:x="1277" fg:w="2"/><text x="43.7149%" y="1151.50"></text></g><g><title>void tinyformat::format&lt;double, double, double&gt; (2 samples, 0.07%)</title><rect x="43.4649%" y="1125" width="0.0681%" height="15" fill="rgb(250,73,40)" fg:x="1277" fg:w="2"/><text x="43.7149%" y="1135.50"></text></g><g><title>tinyformat::vformat (2 samples, 0.07%)</title><rect x="43.4649%" y="1109" width="0.0681%" height="15" fill="rgb(253,177,16)" fg:x="1277" fg:w="2"/><text x="43.7149%" y="1119.50"></text></g><g><title>tinyformat::detail::formatImpl (2 samples, 0.07%)</title><rect x="43.4649%" y="1093" width="0.0681%" height="15" fill="rgb(217,32,34)" fg:x="1277" fg:w="2"/><text x="43.7149%" y="1103.50"></text></g><g><title>tinyformat::detail::FormatArg::format (2 samples, 0.07%)</title><rect x="43.4649%" y="1077" width="0.0681%" height="15" fill="rgb(212,7,10)" fg:x="1277" fg:w="2"/><text x="43.7149%" y="1087.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (2 samples, 0.07%)</title><rect x="43.4649%" y="1061" width="0.0681%" height="15" fill="rgb(245,89,8)" fg:x="1277" fg:w="2"/><text x="43.7149%" y="1071.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (2 samples, 0.07%)</title><rect x="43.4649%" y="1045" width="0.0681%" height="15" fill="rgb(237,16,53)" fg:x="1277" fg:w="2"/><text x="43.7149%" y="1055.50"></text></g><g><title>__printf_buffer_write (1 samples, 0.03%)</title><rect x="43.4990%" y="1029" width="0.0340%" height="15" fill="rgb(250,204,30)" fg:x="1278" fg:w="1"/><text x="43.7490%" y="1039.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="43.5330%" y="1109" width="0.0340%" height="15" fill="rgb(208,77,27)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1119.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="43.5330%" y="1093" width="0.0340%" height="15" fill="rgb(250,204,28)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1103.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="43.5330%" y="1077" width="0.0340%" height="15" fill="rgb(244,63,21)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="43.5330%" y="1061" width="0.0340%" height="15" fill="rgb(236,85,44)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1071.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (1 samples, 0.03%)</title><rect x="43.5330%" y="1045" width="0.0340%" height="15" fill="rgb(215,98,4)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1055.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (1 samples, 0.03%)</title><rect x="43.5330%" y="1029" width="0.0340%" height="15" fill="rgb(235,38,11)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1039.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="43.5330%" y="1013" width="0.0340%" height="15" fill="rgb(254,186,25)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1023.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="43.5330%" y="997" width="0.0340%" height="15" fill="rgb(225,55,31)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="1007.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="43.5330%" y="981" width="0.0340%" height="15" fill="rgb(211,15,21)" fg:x="1279" fg:w="1"/><text x="43.7830%" y="991.50"></text></g><g><title>BCLog::Logger::LogPrintStr (4 samples, 0.14%)</title><rect x="43.5330%" y="1141" width="0.1361%" height="15" fill="rgb(215,187,41)" fg:x="1279" fg:w="4"/><text x="43.7830%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (4 samples, 0.14%)</title><rect x="43.5330%" y="1125" width="0.1361%" height="15" fill="rgb(248,69,32)" fg:x="1279" fg:w="4"/><text x="43.7830%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (3 samples, 0.10%)</title><rect x="43.5671%" y="1109" width="0.1021%" height="15" fill="rgb(252,102,52)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1119.50"></text></g><g><title>_IO_fwrite (3 samples, 0.10%)</title><rect x="43.5671%" y="1093" width="0.1021%" height="15" fill="rgb(253,140,32)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1103.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="43.5671%" y="1077" width="0.1021%" height="15" fill="rgb(216,56,42)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1087.50"></text></g><g><title>new_do_write (3 samples, 0.10%)</title><rect x="43.5671%" y="1061" width="0.1021%" height="15" fill="rgb(216,184,14)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1071.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="43.5671%" y="1045" width="0.1021%" height="15" fill="rgb(237,187,27)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1055.50"></text></g><g><title>__GI___libc_write (3 samples, 0.10%)</title><rect x="43.5671%" y="1029" width="0.1021%" height="15" fill="rgb(219,65,3)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="43.5671%" y="1013" width="0.1021%" height="15" fill="rgb(245,83,25)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="43.5671%" y="997" width="0.1021%" height="15" fill="rgb(214,205,45)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="43.5671%" y="981" width="0.1021%" height="15" fill="rgb(241,20,18)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="43.5671%" y="965" width="0.1021%" height="15" fill="rgb(232,163,23)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="975.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="43.5671%" y="949" width="0.1021%" height="15" fill="rgb(214,5,46)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="43.5671%" y="933" width="0.1021%" height="15" fill="rgb(229,78,17)" fg:x="1280" fg:w="3"/><text x="43.8171%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.6351%" y="917" width="0.0340%" height="15" fill="rgb(248,89,10)" fg:x="1282" fg:w="1"/><text x="43.8851%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.6351%" y="901" width="0.0340%" height="15" fill="rgb(248,54,15)" fg:x="1282" fg:w="1"/><text x="43.8851%" y="911.50"></text></g><g><title>void LogPrintFormatInternal&lt;int, double, double, double, double&gt; (5 samples, 0.17%)</title><rect x="43.5330%" y="1157" width="0.1702%" height="15" fill="rgb(223,116,6)" fg:x="1279" fg:w="5"/><text x="43.7830%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="43.6692%" y="1141" width="0.0340%" height="15" fill="rgb(205,125,38)" fg:x="1283" fg:w="1"/><text x="43.9192%" y="1151.50"></text></g><g><title>void tinyformat::format&lt;int, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="43.6692%" y="1125" width="0.0340%" height="15" fill="rgb(251,78,38)" fg:x="1283" fg:w="1"/><text x="43.9192%" y="1135.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="43.6692%" y="1109" width="0.0340%" height="15" fill="rgb(253,78,28)" fg:x="1283" fg:w="1"/><text x="43.9192%" y="1119.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (1 samples, 0.03%)</title><rect x="43.6692%" y="1093" width="0.0340%" height="15" fill="rgb(209,120,3)" fg:x="1283" fg:w="1"/><text x="43.9192%" y="1103.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="43.7032%" y="1109" width="0.0340%" height="15" fill="rgb(238,229,9)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1119.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="43.7032%" y="1093" width="0.0340%" height="15" fill="rgb(253,159,18)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1103.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="43.7032%" y="1077" width="0.0340%" height="15" fill="rgb(244,42,34)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="43.7032%" y="1061" width="0.0340%" height="15" fill="rgb(224,8,7)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1071.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.03%)</title><rect x="43.7032%" y="1045" width="0.0340%" height="15" fill="rgb(210,201,45)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1055.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringbuf (1 samples, 0.03%)</title><rect x="43.7032%" y="1029" width="0.0340%" height="15" fill="rgb(252,185,21)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1039.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::basic_streambuf (1 samples, 0.03%)</title><rect x="43.7032%" y="1013" width="0.0340%" height="15" fill="rgb(223,131,1)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1023.50"></text></g><g><title>std::locale::locale (1 samples, 0.03%)</title><rect x="43.7032%" y="997" width="0.0340%" height="15" fill="rgb(245,141,16)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="1007.50"></text></g><g><title>std::locale::_S_initialize (1 samples, 0.03%)</title><rect x="43.7032%" y="981" width="0.0340%" height="15" fill="rgb(229,55,45)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="991.50"></text></g><g><title>std::locale::locale (1 samples, 0.03%)</title><rect x="43.7032%" y="965" width="0.0340%" height="15" fill="rgb(208,92,15)" fg:x="1284" fg:w="1"/><text x="43.9532%" y="975.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="43.7713%" y="901" width="0.0340%" height="15" fill="rgb(234,185,47)" fg:x="1286" fg:w="1"/><text x="44.0213%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="43.7713%" y="885" width="0.0340%" height="15" fill="rgb(253,104,50)" fg:x="1286" fg:w="1"/><text x="44.0213%" y="895.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="43.7713%" y="917" width="0.1021%" height="15" fill="rgb(205,70,7)" fg:x="1286" fg:w="3"/><text x="44.0213%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="43.8053%" y="901" width="0.0681%" height="15" fill="rgb(240,178,43)" fg:x="1287" fg:w="2"/><text x="44.0553%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.8393%" y="885" width="0.0340%" height="15" fill="rgb(214,112,2)" fg:x="1288" fg:w="1"/><text x="44.0893%" y="895.50"></text></g><g><title>[[ext4]] (6 samples, 0.20%)</title><rect x="43.7372%" y="949" width="0.2042%" height="15" fill="rgb(206,46,17)" fg:x="1285" fg:w="6"/><text x="43.9872%" y="959.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="43.7372%" y="933" width="0.2042%" height="15" fill="rgb(225,220,16)" fg:x="1285" fg:w="6"/><text x="43.9872%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="43.8734%" y="917" width="0.0681%" height="15" fill="rgb(238,65,40)" fg:x="1289" fg:w="2"/><text x="44.1234%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="43.8734%" y="901" width="0.0681%" height="15" fill="rgb(230,151,21)" fg:x="1289" fg:w="2"/><text x="44.1234%" y="911.50"></text></g><g><title>BCLog::Logger::LogPrintStr (8 samples, 0.27%)</title><rect x="43.7032%" y="1141" width="0.2723%" height="15" fill="rgb(218,58,49)" fg:x="1284" fg:w="8"/><text x="43.9532%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (8 samples, 0.27%)</title><rect x="43.7032%" y="1125" width="0.2723%" height="15" fill="rgb(219,179,14)" fg:x="1284" fg:w="8"/><text x="43.9532%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (7 samples, 0.24%)</title><rect x="43.7372%" y="1109" width="0.2383%" height="15" fill="rgb(223,72,1)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1119.50"></text></g><g><title>_IO_fwrite (7 samples, 0.24%)</title><rect x="43.7372%" y="1093" width="0.2383%" height="15" fill="rgb(238,126,10)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1103.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.24%)</title><rect x="43.7372%" y="1077" width="0.2383%" height="15" fill="rgb(224,206,38)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1087.50"></text></g><g><title>new_do_write (7 samples, 0.24%)</title><rect x="43.7372%" y="1061" width="0.2383%" height="15" fill="rgb(212,201,54)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1071.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (7 samples, 0.24%)</title><rect x="43.7372%" y="1045" width="0.2383%" height="15" fill="rgb(218,154,48)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1055.50"></text></g><g><title>__GI___libc_write (7 samples, 0.24%)</title><rect x="43.7372%" y="1029" width="0.2383%" height="15" fill="rgb(232,93,24)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="43.7372%" y="1013" width="0.2383%" height="15" fill="rgb(245,30,21)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="43.7372%" y="997" width="0.2383%" height="15" fill="rgb(242,148,29)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="43.7372%" y="981" width="0.2383%" height="15" fill="rgb(244,153,54)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="991.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="43.7372%" y="965" width="0.2383%" height="15" fill="rgb(252,87,22)" fg:x="1285" fg:w="7"/><text x="43.9872%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.9415%" y="949" width="0.0340%" height="15" fill="rgb(210,51,29)" fg:x="1291" fg:w="1"/><text x="44.1915%" y="959.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="43.9755%" y="1093" width="0.0340%" height="15" fill="rgb(242,136,47)" fg:x="1292" fg:w="1"/><text x="44.2255%" y="1103.50"></text></g><g><title>tinyformat::detail::FormatArg::format (1 samples, 0.03%)</title><rect x="43.9755%" y="1077" width="0.0340%" height="15" fill="rgb(238,68,4)" fg:x="1292" fg:w="1"/><text x="44.2255%" y="1087.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (1 samples, 0.03%)</title><rect x="43.9755%" y="1061" width="0.0340%" height="15" fill="rgb(242,161,30)" fg:x="1292" fg:w="1"/><text x="44.2255%" y="1071.50"></text></g><g><title>__printf_fp_buffer_1.isra.0 (1 samples, 0.03%)</title><rect x="43.9755%" y="1045" width="0.0340%" height="15" fill="rgb(218,58,44)" fg:x="1292" fg:w="1"/><text x="44.2255%" y="1055.50"></text></g><g><title>Chainstate::ConnectBlock (595 samples, 20.25%)</title><rect x="23.7917%" y="1173" width="20.2519%" height="15" fill="rgb(252,125,32)" fg:x="699" fg:w="595"/><text x="24.0417%" y="1183.50">Chainstate::ConnectBlock</text></g><g><title>void LogPrintFormatInternal&lt;unsigned int, double, double, double, double, double&gt; (10 samples, 0.34%)</title><rect x="43.7032%" y="1157" width="0.3404%" height="15" fill="rgb(219,178,0)" fg:x="1284" fg:w="10"/><text x="43.9532%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;unsigned int, double, double, double, double, double&gt; (2 samples, 0.07%)</title><rect x="43.9755%" y="1141" width="0.0681%" height="15" fill="rgb(213,152,7)" fg:x="1292" fg:w="2"/><text x="44.2255%" y="1151.50"></text></g><g><title>void tinyformat::format&lt;unsigned int, double, double, double, double, double&gt; (2 samples, 0.07%)</title><rect x="43.9755%" y="1125" width="0.0681%" height="15" fill="rgb(249,109,34)" fg:x="1292" fg:w="2"/><text x="44.2255%" y="1135.50"></text></g><g><title>tinyformat::vformat (2 samples, 0.07%)</title><rect x="43.9755%" y="1109" width="0.0681%" height="15" fill="rgb(232,96,21)" fg:x="1292" fg:w="2"/><text x="44.2255%" y="1119.50"></text></g><g><title>void LogPrintFormatInternal&lt;unsigned int, double, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="44.0095%" y="1093" width="0.0340%" height="15" fill="rgb(228,27,39)" fg:x="1293" fg:w="1"/><text x="44.2595%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;unsigned int, double, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="44.0095%" y="1077" width="0.0340%" height="15" fill="rgb(211,182,52)" fg:x="1293" fg:w="1"/><text x="44.2595%" y="1087.50"></text></g><g><title>void tinyformat::format&lt;unsigned int, double, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="44.0095%" y="1061" width="0.0340%" height="15" fill="rgb(234,178,38)" fg:x="1293" fg:w="1"/><text x="44.2595%" y="1071.50"></text></g><g><title>tinyformat::detail::FormatListN&lt;6&gt; tinyformat::makeFormatList&lt;unsigned int, double, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="44.0095%" y="1045" width="0.0340%" height="15" fill="rgb(221,111,3)" fg:x="1293" fg:w="1"/><text x="44.2595%" y="1055.50"></text></g><g><title>tinyformat::detail::FormatListN&lt;6&gt;::FormatListN&lt;unsigned int, double, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="44.0095%" y="1029" width="0.0340%" height="15" fill="rgb(228,175,21)" fg:x="1293" fg:w="1"/><text x="44.2595%" y="1039.50"></text></g><g><title>tinyformat::detail::FormatArg::FormatArg&lt;double&gt; (1 samples, 0.03%)</title><rect x="44.0095%" y="1013" width="0.0340%" height="15" fill="rgb(228,174,43)" fg:x="1293" fg:w="1"/><text x="44.2595%" y="1023.50"></text></g><g><title>Chainstate::ConnectTip (1 samples, 0.03%)</title><rect x="44.0436%" y="1173" width="0.0340%" height="15" fill="rgb(211,191,0)" fg:x="1294" fg:w="1"/><text x="44.2936%" y="1183.50"></text></g><g><title>Chainstate::FlushStateToDisk (1 samples, 0.03%)</title><rect x="44.0436%" y="1157" width="0.0340%" height="15" fill="rgb(253,117,3)" fg:x="1294" fg:w="1"/><text x="44.2936%" y="1167.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (1 samples, 0.03%)</title><rect x="44.0436%" y="1141" width="0.0340%" height="15" fill="rgb(241,127,19)" fg:x="1294" fg:w="1"/><text x="44.2936%" y="1151.50"></text></g><g><title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (1 samples, 0.03%)</title><rect x="44.0436%" y="1125" width="0.0340%" height="15" fill="rgb(218,103,12)" fg:x="1294" fg:w="1"/><text x="44.2936%" y="1135.50"></text></g><g><title>Chainstate::UpdateTip (1 samples, 0.03%)</title><rect x="44.0776%" y="1157" width="0.0340%" height="15" fill="rgb(236,214,43)" fg:x="1295" fg:w="1"/><text x="44.3276%" y="1167.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="44.1116%" y="1141" width="0.0340%" height="15" fill="rgb(244,144,19)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="44.1116%" y="1125" width="0.0340%" height="15" fill="rgb(246,188,10)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1135.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="44.1116%" y="1109" width="0.0340%" height="15" fill="rgb(212,193,33)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1119.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="44.1116%" y="1093" width="0.0340%" height="15" fill="rgb(241,51,29)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1103.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="44.1116%" y="1077" width="0.0340%" height="15" fill="rgb(211,58,19)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1087.50"></text></g><g><title>tinyformat::detail::FormatArg::format (1 samples, 0.03%)</title><rect x="44.1116%" y="1061" width="0.0340%" height="15" fill="rgb(229,111,26)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1071.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;long&gt; (1 samples, 0.03%)</title><rect x="44.1116%" y="1045" width="0.0340%" height="15" fill="rgb(213,115,40)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1055.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (1 samples, 0.03%)</title><rect x="44.1116%" y="1029" width="0.0340%" height="15" fill="rgb(209,56,44)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1039.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="44.1116%" y="1013" width="0.0340%" height="15" fill="rgb(230,108,32)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1023.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.03%)</title><rect x="44.1116%" y="997" width="0.0340%" height="15" fill="rgb(216,165,31)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="1007.50"></text></g><g><title>std::ostream::operator&lt;&lt;(int) (1 samples, 0.03%)</title><rect x="44.1116%" y="981" width="0.0340%" height="15" fill="rgb(218,122,21)" fg:x="1296" fg:w="1"/><text x="44.3616%" y="991.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (1 samples, 0.03%)</title><rect x="44.1457%" y="1093" width="0.0340%" height="15" fill="rgb(223,224,47)" fg:x="1297" fg:w="1"/><text x="44.3957%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.03%)</title><rect x="44.1457%" y="1077" width="0.0340%" height="15" fill="rgb(238,102,44)" fg:x="1297" fg:w="1"/><text x="44.3957%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.03%)</title><rect x="44.1457%" y="1061" width="0.0340%" height="15" fill="rgb(236,46,40)" fg:x="1297" fg:w="1"/><text x="44.3957%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.03%)</title><rect x="44.1457%" y="1045" width="0.0340%" height="15" fill="rgb(247,202,50)" fg:x="1297" fg:w="1"/><text x="44.3957%" y="1055.50"></text></g><g><title>Chainstate::UpdateTip (5 samples, 0.17%)</title><rect x="44.0776%" y="1173" width="0.1702%" height="15" fill="rgb(209,99,20)" fg:x="1295" fg:w="5"/><text x="44.3276%" y="1183.50"></text></g><g><title>UpdateTipLog (4 samples, 0.14%)</title><rect x="44.1116%" y="1157" width="0.1361%" height="15" fill="rgb(252,27,34)" fg:x="1296" fg:w="4"/><text x="44.3616%" y="1167.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, int, double, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, double, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="44.1457%" y="1141" width="0.1021%" height="15" fill="rgb(215,206,23)" fg:x="1297" fg:w="3"/><text x="44.3957%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr (3 samples, 0.10%)</title><rect x="44.1457%" y="1125" width="0.1021%" height="15" fill="rgb(212,135,36)" fg:x="1297" fg:w="3"/><text x="44.3957%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (3 samples, 0.10%)</title><rect x="44.1457%" y="1109" width="0.1021%" height="15" fill="rgb(240,189,1)" fg:x="1297" fg:w="3"/><text x="44.3957%" y="1119.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (2 samples, 0.07%)</title><rect x="44.1797%" y="1093" width="0.0681%" height="15" fill="rgb(242,56,20)" fg:x="1298" fg:w="2"/><text x="44.4297%" y="1103.50"></text></g><g><title>_IO_fwrite (2 samples, 0.07%)</title><rect x="44.1797%" y="1077" width="0.0681%" height="15" fill="rgb(247,132,33)" fg:x="1298" fg:w="2"/><text x="44.4297%" y="1087.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="44.1797%" y="1061" width="0.0681%" height="15" fill="rgb(208,149,11)" fg:x="1298" fg:w="2"/><text x="44.4297%" y="1071.50"></text></g><g><title>new_do_write (2 samples, 0.07%)</title><rect x="44.1797%" y="1045" width="0.0681%" height="15" fill="rgb(211,33,11)" fg:x="1298" fg:w="2"/><text x="44.4297%" y="1055.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="44.2138%" y="1029" width="0.0340%" height="15" fill="rgb(221,29,38)" fg:x="1299" fg:w="1"/><text x="44.4638%" y="1039.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="44.2138%" y="1013" width="0.0340%" height="15" fill="rgb(206,182,49)" fg:x="1299" fg:w="1"/><text x="44.4638%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="44.2138%" y="997" width="0.0340%" height="15" fill="rgb(216,140,1)" fg:x="1299" fg:w="1"/><text x="44.4638%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="44.2138%" y="981" width="0.0340%" height="15" fill="rgb(232,57,40)" fg:x="1299" fg:w="1"/><text x="44.4638%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="44.2138%" y="965" width="0.0340%" height="15" fill="rgb(224,186,18)" fg:x="1299" fg:w="1"/><text x="44.4638%" y="975.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.17%)</title><rect x="44.2478%" y="1173" width="0.1702%" height="15" fill="rgb(215,121,11)" fg:x="1300" fg:w="5"/><text x="44.4978%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="44.3159%" y="1157" width="0.1021%" height="15" fill="rgb(245,147,10)" fg:x="1302" fg:w="3"/><text x="44.5659%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.10%)</title><rect x="44.3159%" y="1141" width="0.1021%" height="15" fill="rgb(238,153,13)" fg:x="1302" fg:w="3"/><text x="44.5659%" y="1151.50"></text></g><g><title>HexStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="44.4180%" y="1157" width="0.0340%" height="15" fill="rgb(233,108,0)" fg:x="1305" fg:w="1"/><text x="44.6680%" y="1167.50"></text></g><g><title>ChainstateManager::ActiveChain (1 samples, 0.03%)</title><rect x="44.4520%" y="1109" width="0.0340%" height="15" fill="rgb(212,157,17)" fg:x="1306" fg:w="1"/><text x="44.7020%" y="1119.50"></text></g><g><title>Iterate&lt;ValidationSignals::BlockChecked(const CBlock&amp;, const BlockValidationState&amp;)::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (2 samples, 0.07%)</title><rect x="44.4520%" y="1157" width="0.0681%" height="15" fill="rgb(225,213,38)" fg:x="1306" fg:w="2"/><text x="44.7020%" y="1167.50"></text></g><g><title>ValidationSignals::BlockChecked (2 samples, 0.07%)</title><rect x="44.4520%" y="1141" width="0.0681%" height="15" fill="rgb(248,16,11)" fg:x="1306" fg:w="2"/><text x="44.7020%" y="1151.50"></text></g><g><title>ChainstateManager::IsInitialBlockDownload (2 samples, 0.07%)</title><rect x="44.4520%" y="1125" width="0.0681%" height="15" fill="rgb(241,33,4)" fg:x="1306" fg:w="2"/><text x="44.7020%" y="1135.50"></text></g><g><title>operator&lt;(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.03%)</title><rect x="44.4860%" y="1109" width="0.0340%" height="15" fill="rgb(222,26,43)" fg:x="1307" fg:w="1"/><text x="44.7360%" y="1119.50"></text></g><g><title>ChainstateManager::IsInitialBlockDownload (1 samples, 0.03%)</title><rect x="44.4860%" y="1093" width="0.0340%" height="15" fill="rgb(243,29,36)" fg:x="1307" fg:w="1"/><text x="44.7360%" y="1103.50"></text></g><g><title>node::BlockManager::LoadingBlocks (1 samples, 0.03%)</title><rect x="44.4860%" y="1077" width="0.0340%" height="15" fill="rgb(241,9,27)" fg:x="1307" fg:w="1"/><text x="44.7360%" y="1087.50"></text></g><g><title>std::atomic&lt;bool&gt;::operator bool (1 samples, 0.03%)</title><rect x="44.4860%" y="1061" width="0.0340%" height="15" fill="rgb(205,117,26)" fg:x="1307" fg:w="1"/><text x="44.7360%" y="1071.50"></text></g><g><title>std::__atomic_base&lt;bool&gt;::load (1 samples, 0.03%)</title><rect x="44.4860%" y="1045" width="0.0340%" height="15" fill="rgb(209,80,39)" fg:x="1307" fg:w="1"/><text x="44.7360%" y="1055.50"></text></g><g><title>ValidationSignals::BlockChecked (4 samples, 0.14%)</title><rect x="44.4180%" y="1173" width="0.1361%" height="15" fill="rgb(239,155,6)" fg:x="1305" fg:w="4"/><text x="44.6680%" y="1183.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [13], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="44.5201%" y="1157" width="0.0340%" height="15" fill="rgb(212,104,12)" fg:x="1308" fg:w="1"/><text x="44.7701%" y="1167.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.03%)</title><rect x="44.5201%" y="1141" width="0.0340%" height="15" fill="rgb(234,204,3)" fg:x="1308" fg:w="1"/><text x="44.7701%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.03%)</title><rect x="44.5201%" y="1125" width="0.0340%" height="15" fill="rgb(251,218,7)" fg:x="1308" fg:w="1"/><text x="44.7701%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.03%)</title><rect x="44.5201%" y="1109" width="0.0340%" height="15" fill="rgb(221,81,32)" fg:x="1308" fg:w="1"/><text x="44.7701%" y="1119.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="44.5201%" y="1093" width="0.0340%" height="15" fill="rgb(214,152,26)" fg:x="1308" fg:w="1"/><text x="44.7701%" y="1103.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="44.5201%" y="1077" width="0.0340%" height="15" fill="rgb(223,22,3)" fg:x="1308" fg:w="1"/><text x="44.7701%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.03%)</title><rect x="44.5541%" y="1173" width="0.0340%" height="15" fill="rgb(207,174,7)" fg:x="1309" fg:w="1"/><text x="44.8041%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="44.5541%" y="1157" width="0.0340%" height="15" fill="rgb(224,19,52)" fg:x="1309" fg:w="1"/><text x="44.8041%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="44.5541%" y="1141" width="0.0340%" height="15" fill="rgb(228,24,14)" fg:x="1309" fg:w="1"/><text x="44.8041%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="44.5541%" y="1125" width="0.0340%" height="15" fill="rgb(230,153,43)" fg:x="1309" fg:w="1"/><text x="44.8041%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.03%)</title><rect x="44.5541%" y="1109" width="0.0340%" height="15" fill="rgb(231,106,12)" fg:x="1309" fg:w="1"/><text x="44.8041%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.03%)</title><rect x="44.5541%" y="1093" width="0.0340%" height="15" fill="rgb(215,92,2)" fg:x="1309" fg:w="1"/><text x="44.8041%" y="1103.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="44.5882%" y="1109" width="0.0340%" height="15" fill="rgb(249,143,25)" fg:x="1310" fg:w="1"/><text x="44.8382%" y="1119.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="44.5882%" y="1093" width="0.0340%" height="15" fill="rgb(252,7,35)" fg:x="1310" fg:w="1"/><text x="44.8382%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="44.5882%" y="1077" width="0.0340%" height="15" fill="rgb(216,69,40)" fg:x="1310" fg:w="1"/><text x="44.8382%" y="1087.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="44.5882%" y="1061" width="0.0340%" height="15" fill="rgb(240,36,33)" fg:x="1310" fg:w="1"/><text x="44.8382%" y="1071.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="44.5882%" y="1045" width="0.0340%" height="15" fill="rgb(231,128,14)" fg:x="1310" fg:w="1"/><text x="44.8382%" y="1055.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="44.5882%" y="1029" width="0.0340%" height="15" fill="rgb(245,143,14)" fg:x="1310" fg:w="1"/><text x="44.8382%" y="1039.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="44.5882%" y="1013" width="0.0340%" height="15" fill="rgb(222,130,28)" fg:x="1310" fg:w="1"/><text x="44.8382%" y="1023.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (2 samples, 0.07%)</title><rect x="44.5882%" y="1125" width="0.0681%" height="15" fill="rgb(212,10,48)" fg:x="1310" fg:w="2"/><text x="44.8382%" y="1135.50"></text></g><g><title>util::ThreadGetInternalName[abi:cxx11] (1 samples, 0.03%)</title><rect x="44.6222%" y="1109" width="0.0340%" height="15" fill="rgb(254,118,45)" fg:x="1311" fg:w="1"/><text x="44.8722%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.03%)</title><rect x="44.6222%" y="1093" width="0.0340%" height="15" fill="rgb(228,6,45)" fg:x="1311" fg:w="1"/><text x="44.8722%" y="1103.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.03%)</title><rect x="44.6222%" y="1077" width="0.0340%" height="15" fill="rgb(241,18,35)" fg:x="1311" fg:w="1"/><text x="44.8722%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (1 samples, 0.03%)</title><rect x="44.6222%" y="1061" width="0.0340%" height="15" fill="rgb(227,214,53)" fg:x="1311" fg:w="1"/><text x="44.8722%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="44.6222%" y="1045" width="0.0340%" height="15" fill="rgb(224,107,51)" fg:x="1311" fg:w="1"/><text x="44.8722%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="44.6222%" y="1029" width="0.0340%" height="15" fill="rgb(248,60,28)" fg:x="1311" fg:w="1"/><text x="44.8722%" y="1039.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="44.6222%" y="1013" width="0.0340%" height="15" fill="rgb(249,101,23)" fg:x="1311" fg:w="1"/><text x="44.8722%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="44.6562%" y="949" width="0.0340%" height="15" fill="rgb(228,51,19)" fg:x="1312" fg:w="1"/><text x="44.9062%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="44.6562%" y="933" width="0.0340%" height="15" fill="rgb(213,20,6)" fg:x="1312" fg:w="1"/><text x="44.9062%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="44.6562%" y="917" width="0.0340%" height="15" fill="rgb(212,124,10)" fg:x="1312" fg:w="1"/><text x="44.9062%" y="927.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="44.6562%" y="965" width="0.1702%" height="15" fill="rgb(248,3,40)" fg:x="1312" fg:w="5"/><text x="44.9062%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.6903%" y="949" width="0.1361%" height="15" fill="rgb(223,178,23)" fg:x="1313" fg:w="4"/><text x="44.9403%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.6903%" y="933" width="0.1361%" height="15" fill="rgb(240,132,45)" fg:x="1313" fg:w="4"/><text x="44.9403%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="44.7583%" y="917" width="0.0681%" height="15" fill="rgb(245,164,36)" fg:x="1315" fg:w="2"/><text x="45.0083%" y="927.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="44.7583%" y="901" width="0.0681%" height="15" fill="rgb(231,188,53)" fg:x="1315" fg:w="2"/><text x="45.0083%" y="911.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="44.7583%" y="885" width="0.0681%" height="15" fill="rgb(237,198,39)" fg:x="1315" fg:w="2"/><text x="45.0083%" y="895.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="44.7583%" y="869" width="0.0681%" height="15" fill="rgb(223,120,35)" fg:x="1315" fg:w="2"/><text x="45.0083%" y="879.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="44.7924%" y="853" width="0.0340%" height="15" fill="rgb(253,107,49)" fg:x="1316" fg:w="1"/><text x="45.0424%" y="863.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="44.7924%" y="837" width="0.0340%" height="15" fill="rgb(216,44,31)" fg:x="1316" fg:w="1"/><text x="45.0424%" y="847.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="44.7924%" y="821" width="0.0340%" height="15" fill="rgb(253,87,21)" fg:x="1316" fg:w="1"/><text x="45.0424%" y="831.50"></text></g><g><title>[[crc32c_intel]] (1 samples, 0.03%)</title><rect x="44.7924%" y="805" width="0.0340%" height="15" fill="rgb(226,18,2)" fg:x="1316" fg:w="1"/><text x="45.0424%" y="815.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (9 samples, 0.31%)</title><rect x="44.5882%" y="1141" width="0.3063%" height="15" fill="rgb(216,8,46)" fg:x="1310" fg:w="9"/><text x="44.8382%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (7 samples, 0.24%)</title><rect x="44.6562%" y="1125" width="0.2383%" height="15" fill="rgb(226,140,39)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1135.50"></text></g><g><title>_IO_fwrite (7 samples, 0.24%)</title><rect x="44.6562%" y="1109" width="0.2383%" height="15" fill="rgb(221,194,54)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1119.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (7 samples, 0.24%)</title><rect x="44.6562%" y="1093" width="0.2383%" height="15" fill="rgb(213,92,11)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1103.50"></text></g><g><title>new_do_write (7 samples, 0.24%)</title><rect x="44.6562%" y="1077" width="0.2383%" height="15" fill="rgb(229,162,46)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1087.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (7 samples, 0.24%)</title><rect x="44.6562%" y="1061" width="0.2383%" height="15" fill="rgb(214,111,36)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1071.50"></text></g><g><title>__GI___libc_write (7 samples, 0.24%)</title><rect x="44.6562%" y="1045" width="0.2383%" height="15" fill="rgb(207,6,21)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1055.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="44.6562%" y="1029" width="0.2383%" height="15" fill="rgb(213,127,38)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="44.6562%" y="1013" width="0.2383%" height="15" fill="rgb(238,118,32)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="44.6562%" y="997" width="0.2383%" height="15" fill="rgb(240,139,39)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="44.6562%" y="981" width="0.2383%" height="15" fill="rgb(235,10,37)" fg:x="1312" fg:w="7"/><text x="44.9062%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="44.8264%" y="965" width="0.0681%" height="15" fill="rgb(249,171,38)" fg:x="1317" fg:w="2"/><text x="45.0764%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="44.8604%" y="949" width="0.0340%" height="15" fill="rgb(242,144,32)" fg:x="1318" fg:w="1"/><text x="45.1104%" y="959.50"></text></g><g><title>void LogPrintFormatInternal&lt;&gt; (13 samples, 0.44%)</title><rect x="44.5882%" y="1173" width="0.4425%" height="15" fill="rgb(217,117,21)" fg:x="1310" fg:w="13"/><text x="44.8382%" y="1183.50"></text></g><g><title>BCLog::Logger::LogPrintStr (13 samples, 0.44%)</title><rect x="44.5882%" y="1157" width="0.4425%" height="15" fill="rgb(249,87,1)" fg:x="1310" fg:w="13"/><text x="44.8382%" y="1167.50"></text></g><g><title>StdLockGuard::StdLockGuard (4 samples, 0.14%)</title><rect x="44.8945%" y="1141" width="0.1361%" height="15" fill="rgb(248,196,48)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1151.50"></text></g><g><title>std::lock_guard&lt;StdMutex&gt;::lock_guard (4 samples, 0.14%)</title><rect x="44.8945%" y="1125" width="0.1361%" height="15" fill="rgb(251,206,33)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1135.50"></text></g><g><title>std::mutex::lock (4 samples, 0.14%)</title><rect x="44.8945%" y="1109" width="0.1361%" height="15" fill="rgb(232,141,28)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1119.50"></text></g><g><title>BCLog::Logger::LogPrintStr (4 samples, 0.14%)</title><rect x="44.8945%" y="1093" width="0.1361%" height="15" fill="rgb(209,167,14)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1103.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.14%)</title><rect x="44.8945%" y="1077" width="0.1361%" height="15" fill="rgb(225,11,50)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1087.50"></text></g><g><title>__GI___lll_lock_wait (4 samples, 0.14%)</title><rect x="44.8945%" y="1061" width="0.1361%" height="15" fill="rgb(209,50,20)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.8945%" y="1045" width="0.1361%" height="15" fill="rgb(212,17,46)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.8945%" y="1029" width="0.1361%" height="15" fill="rgb(216,101,39)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.8945%" y="1013" width="0.1361%" height="15" fill="rgb(212,228,48)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.8945%" y="997" width="0.1361%" height="15" fill="rgb(250,6,50)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.8945%" y="981" width="0.1361%" height="15" fill="rgb(250,160,48)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.8945%" y="965" width="0.1361%" height="15" fill="rgb(244,216,33)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="44.8945%" y="949" width="0.1361%" height="15" fill="rgb(207,157,5)" fg:x="1319" fg:w="4"/><text x="45.1445%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="933" width="0.1021%" height="15" fill="rgb(228,199,8)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="917" width="0.1021%" height="15" fill="rgb(227,80,20)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="901" width="0.1021%" height="15" fill="rgb(222,9,33)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="885" width="0.1021%" height="15" fill="rgb(239,44,28)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="869" width="0.1021%" height="15" fill="rgb(249,187,43)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="853" width="0.1021%" height="15" fill="rgb(216,141,28)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="837" width="0.1021%" height="15" fill="rgb(230,154,53)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="821" width="0.1021%" height="15" fill="rgb(227,82,4)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="44.9285%" y="805" width="0.1021%" height="15" fill="rgb(220,107,16)" fg:x="1320" fg:w="3"/><text x="45.1785%" y="815.50"></text></g><g><title>BCLog::Logger::GetLogPrefix[abi:cxx11] (1 samples, 0.03%)</title><rect x="45.0306%" y="1093" width="0.0340%" height="15" fill="rgb(207,187,2)" fg:x="1323" fg:w="1"/><text x="45.2806%" y="1103.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (2 samples, 0.07%)</title><rect x="45.0306%" y="1125" width="0.0681%" height="15" fill="rgb(210,162,52)" fg:x="1323" fg:w="2"/><text x="45.2806%" y="1135.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (2 samples, 0.07%)</title><rect x="45.0306%" y="1109" width="0.0681%" height="15" fill="rgb(217,216,49)" fg:x="1323" fg:w="2"/><text x="45.2806%" y="1119.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="45.0647%" y="1093" width="0.0340%" height="15" fill="rgb(218,146,49)" fg:x="1324" fg:w="1"/><text x="45.3147%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="45.0647%" y="1077" width="0.0340%" height="15" fill="rgb(216,55,40)" fg:x="1324" fg:w="1"/><text x="45.3147%" y="1087.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="45.0647%" y="1061" width="0.0340%" height="15" fill="rgb(208,196,21)" fg:x="1324" fg:w="1"/><text x="45.3147%" y="1071.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="45.0647%" y="1045" width="0.0340%" height="15" fill="rgb(242,117,42)" fg:x="1324" fg:w="1"/><text x="45.3147%" y="1055.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="45.0647%" y="1029" width="0.0340%" height="15" fill="rgb(210,11,23)" fg:x="1324" fg:w="1"/><text x="45.3147%" y="1039.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.03%)</title><rect x="45.0647%" y="1013" width="0.0340%" height="15" fill="rgb(217,110,2)" fg:x="1324" fg:w="1"/><text x="45.3147%" y="1023.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.03%)</title><rect x="45.0647%" y="997" width="0.0340%" height="15" fill="rgb(229,77,54)" fg:x="1324" fg:w="1"/><text x="45.3147%" y="1007.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="45.1327%" y="1077" width="0.0340%" height="15" fill="rgb(218,53,16)" fg:x="1326" fg:w="1"/><text x="45.3827%" y="1087.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="45.2689%" y="933" width="0.1021%" height="15" fill="rgb(215,38,13)" fg:x="1330" fg:w="3"/><text x="45.5189%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="45.3029%" y="917" width="0.0681%" height="15" fill="rgb(235,42,18)" fg:x="1331" fg:w="2"/><text x="45.5529%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.3370%" y="901" width="0.0340%" height="15" fill="rgb(219,66,54)" fg:x="1332" fg:w="1"/><text x="45.5870%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.3370%" y="885" width="0.0340%" height="15" fill="rgb(222,205,4)" fg:x="1332" fg:w="1"/><text x="45.5870%" y="895.50"></text></g><g><title>[[ext4]] (6 samples, 0.20%)</title><rect x="45.2349%" y="965" width="0.2042%" height="15" fill="rgb(227,213,46)" fg:x="1329" fg:w="6"/><text x="45.4849%" y="975.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="45.2349%" y="949" width="0.2042%" height="15" fill="rgb(250,145,42)" fg:x="1329" fg:w="6"/><text x="45.4849%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="45.3710%" y="933" width="0.0681%" height="15" fill="rgb(219,15,2)" fg:x="1333" fg:w="2"/><text x="45.6210%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.4050%" y="917" width="0.0340%" height="15" fill="rgb(231,181,52)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="927.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="45.4050%" y="901" width="0.0340%" height="15" fill="rgb(235,1,42)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="45.4050%" y="885" width="0.0340%" height="15" fill="rgb(249,88,27)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="895.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="45.4050%" y="869" width="0.0340%" height="15" fill="rgb(235,145,16)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="879.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="45.4050%" y="853" width="0.0340%" height="15" fill="rgb(237,114,19)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="863.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="45.4050%" y="837" width="0.0340%" height="15" fill="rgb(238,51,50)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="847.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="45.4050%" y="821" width="0.0340%" height="15" fill="rgb(205,194,25)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.4050%" y="805" width="0.0340%" height="15" fill="rgb(215,203,17)" fg:x="1334" fg:w="1"/><text x="45.6550%" y="815.50"></text></g><g><title>BCLog::Logger::LogPrintStr (15 samples, 0.51%)</title><rect x="45.0306%" y="1157" width="0.5106%" height="15" fill="rgb(233,112,49)" fg:x="1323" fg:w="15"/><text x="45.2806%" y="1167.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (15 samples, 0.51%)</title><rect x="45.0306%" y="1141" width="0.5106%" height="15" fill="rgb(241,130,26)" fg:x="1323" fg:w="15"/><text x="45.2806%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (13 samples, 0.44%)</title><rect x="45.0987%" y="1125" width="0.4425%" height="15" fill="rgb(252,223,19)" fg:x="1325" fg:w="13"/><text x="45.3487%" y="1135.50"></text></g><g><title>_IO_fwrite (13 samples, 0.44%)</title><rect x="45.0987%" y="1109" width="0.4425%" height="15" fill="rgb(211,95,25)" fg:x="1325" fg:w="13"/><text x="45.3487%" y="1119.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (13 samples, 0.44%)</title><rect x="45.0987%" y="1093" width="0.4425%" height="15" fill="rgb(251,182,27)" fg:x="1325" fg:w="13"/><text x="45.3487%" y="1103.50"></text></g><g><title>new_do_write (11 samples, 0.37%)</title><rect x="45.1668%" y="1077" width="0.3744%" height="15" fill="rgb(238,24,4)" fg:x="1327" fg:w="11"/><text x="45.4168%" y="1087.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (11 samples, 0.37%)</title><rect x="45.1668%" y="1061" width="0.3744%" height="15" fill="rgb(224,220,25)" fg:x="1327" fg:w="11"/><text x="45.4168%" y="1071.50"></text></g><g><title>__GI___libc_write (11 samples, 0.37%)</title><rect x="45.1668%" y="1045" width="0.3744%" height="15" fill="rgb(239,133,26)" fg:x="1327" fg:w="11"/><text x="45.4168%" y="1055.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="45.1668%" y="1029" width="0.3744%" height="15" fill="rgb(211,94,48)" fg:x="1327" fg:w="11"/><text x="45.4168%" y="1039.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="45.1668%" y="1013" width="0.3744%" height="15" fill="rgb(239,87,6)" fg:x="1327" fg:w="11"/><text x="45.4168%" y="1023.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="45.1668%" y="997" width="0.3744%" height="15" fill="rgb(227,62,0)" fg:x="1327" fg:w="11"/><text x="45.4168%" y="1007.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="45.1668%" y="981" width="0.3744%" height="15" fill="rgb(211,226,4)" fg:x="1327" fg:w="11"/><text x="45.4168%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="45.4391%" y="965" width="0.1021%" height="15" fill="rgb(253,38,52)" fg:x="1335" fg:w="3"/><text x="45.6891%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="45.4731%" y="949" width="0.0681%" height="15" fill="rgb(229,126,40)" fg:x="1336" fg:w="2"/><text x="45.7231%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.5071%" y="933" width="0.0340%" height="15" fill="rgb(229,165,44)" fg:x="1337" fg:w="1"/><text x="45.7571%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.5071%" y="917" width="0.0340%" height="15" fill="rgb(247,95,47)" fg:x="1337" fg:w="1"/><text x="45.7571%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.5071%" y="901" width="0.0340%" height="15" fill="rgb(216,140,30)" fg:x="1337" fg:w="1"/><text x="45.7571%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.5071%" y="885" width="0.0340%" height="15" fill="rgb(246,214,8)" fg:x="1337" fg:w="1"/><text x="45.7571%" y="895.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="45.5071%" y="869" width="0.0340%" height="15" fill="rgb(227,224,15)" fg:x="1337" fg:w="1"/><text x="45.7571%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="45.5071%" y="853" width="0.0340%" height="15" fill="rgb(233,175,4)" fg:x="1337" fg:w="1"/><text x="45.7571%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (1 samples, 0.03%)</title><rect x="45.5412%" y="1093" width="0.0340%" height="15" fill="rgb(221,66,45)" fg:x="1338" fg:w="1"/><text x="45.7912%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="45.5412%" y="1077" width="0.0340%" height="15" fill="rgb(221,178,18)" fg:x="1338" fg:w="1"/><text x="45.7912%" y="1087.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.03%)</title><rect x="45.5412%" y="1061" width="0.0340%" height="15" fill="rgb(213,81,29)" fg:x="1338" fg:w="1"/><text x="45.7912%" y="1071.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (1 samples, 0.03%)</title><rect x="45.5752%" y="1093" width="0.0340%" height="15" fill="rgb(220,89,49)" fg:x="1339" fg:w="1"/><text x="45.8252%" y="1103.50"></text></g><g><title>__printf_buffer_write (1 samples, 0.03%)</title><rect x="45.6093%" y="1045" width="0.0340%" height="15" fill="rgb(227,60,33)" fg:x="1340" fg:w="1"/><text x="45.8593%" y="1055.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (3 samples, 0.10%)</title><rect x="45.6093%" y="1061" width="0.1021%" height="15" fill="rgb(205,113,12)" fg:x="1340" fg:w="3"/><text x="45.8593%" y="1071.50"></text></g><g><title>std::__convert_from_v (2 samples, 0.07%)</title><rect x="45.6433%" y="1045" width="0.0681%" height="15" fill="rgb(211,32,1)" fg:x="1341" fg:w="2"/><text x="45.8933%" y="1055.50"></text></g><g><title>___vsnprintf (2 samples, 0.07%)</title><rect x="45.6433%" y="1029" width="0.0681%" height="15" fill="rgb(246,2,12)" fg:x="1341" fg:w="2"/><text x="45.8933%" y="1039.50"></text></g><g><title>__printf_buffer (2 samples, 0.07%)</title><rect x="45.6433%" y="1013" width="0.0681%" height="15" fill="rgb(243,37,27)" fg:x="1341" fg:w="2"/><text x="45.8933%" y="1023.50"></text></g><g><title>__printf_fp_l_buffer (2 samples, 0.07%)</title><rect x="45.6433%" y="997" width="0.0681%" height="15" fill="rgb(248,211,31)" fg:x="1341" fg:w="2"/><text x="45.8933%" y="1007.50"></text></g><g><title>__printf_fp_buffer_1.isra.0 (2 samples, 0.07%)</title><rect x="45.6433%" y="981" width="0.0681%" height="15" fill="rgb(242,146,47)" fg:x="1341" fg:w="2"/><text x="45.8933%" y="991.50"></text></g><g><title>tinyformat::detail::parseWidthOrPrecision (2 samples, 0.07%)</title><rect x="45.7114%" y="1061" width="0.0681%" height="15" fill="rgb(206,70,20)" fg:x="1343" fg:w="2"/><text x="45.9614%" y="1071.50"></text></g><g><title>tinyformat::detail::FormatArg::format (6 samples, 0.20%)</title><rect x="45.6093%" y="1093" width="0.2042%" height="15" fill="rgb(215,10,51)" fg:x="1340" fg:w="6"/><text x="45.8593%" y="1103.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (6 samples, 0.20%)</title><rect x="45.6093%" y="1077" width="0.2042%" height="15" fill="rgb(243,178,53)" fg:x="1340" fg:w="6"/><text x="45.8593%" y="1087.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (1 samples, 0.03%)</title><rect x="45.7794%" y="1061" width="0.0340%" height="15" fill="rgb(233,221,20)" fg:x="1345" fg:w="1"/><text x="46.0294%" y="1071.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (24 samples, 0.82%)</title><rect x="45.0306%" y="1173" width="0.8169%" height="15" fill="rgb(218,95,35)" fg:x="1323" fg:w="24"/><text x="45.2806%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;double, double, double&gt; (9 samples, 0.31%)</title><rect x="45.5412%" y="1157" width="0.3063%" height="15" fill="rgb(229,13,5)" fg:x="1338" fg:w="9"/><text x="45.7912%" y="1167.50"></text></g><g><title>void tinyformat::format&lt;double, double, double&gt; (9 samples, 0.31%)</title><rect x="45.5412%" y="1141" width="0.3063%" height="15" fill="rgb(252,164,30)" fg:x="1338" fg:w="9"/><text x="45.7912%" y="1151.50"></text></g><g><title>tinyformat::vformat (9 samples, 0.31%)</title><rect x="45.5412%" y="1125" width="0.3063%" height="15" fill="rgb(232,68,36)" fg:x="1338" fg:w="9"/><text x="45.7912%" y="1135.50"></text></g><g><title>tinyformat::detail::formatImpl (9 samples, 0.31%)</title><rect x="45.5412%" y="1109" width="0.3063%" height="15" fill="rgb(219,59,54)" fg:x="1338" fg:w="9"/><text x="45.7912%" y="1119.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.03%)</title><rect x="45.8135%" y="1093" width="0.0340%" height="15" fill="rgb(250,92,33)" fg:x="1346" fg:w="1"/><text x="46.0635%" y="1103.50"></text></g><g><title>std::ostream::write (1 samples, 0.03%)</title><rect x="45.8135%" y="1077" width="0.0340%" height="15" fill="rgb(229,162,54)" fg:x="1346" fg:w="1"/><text x="46.0635%" y="1087.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="45.8135%" y="1061" width="0.0340%" height="15" fill="rgb(244,114,52)" fg:x="1346" fg:w="1"/><text x="46.0635%" y="1071.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.03%)</title><rect x="45.8135%" y="1045" width="0.0340%" height="15" fill="rgb(212,211,43)" fg:x="1346" fg:w="1"/><text x="46.0635%" y="1055.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="45.8135%" y="1029" width="0.0340%" height="15" fill="rgb(226,147,8)" fg:x="1346" fg:w="1"/><text x="46.0635%" y="1039.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="45.8475%" y="1125" width="0.0340%" height="15" fill="rgb(226,23,13)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1135.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="45.8475%" y="1109" width="0.0340%" height="15" fill="rgb(240,63,4)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1119.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="45.8475%" y="1093" width="0.0340%" height="15" fill="rgb(221,1,32)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="45.8475%" y="1077" width="0.0340%" height="15" fill="rgb(242,117,10)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1087.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="45.8475%" y="1061" width="0.0340%" height="15" fill="rgb(249,172,44)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1071.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="45.8475%" y="1045" width="0.0340%" height="15" fill="rgb(244,46,45)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1055.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="45.8475%" y="1029" width="0.0340%" height="15" fill="rgb(206,43,17)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1039.50"></text></g><g><title>tinyformat::detail::FormatArg::format (1 samples, 0.03%)</title><rect x="45.8475%" y="1013" width="0.0340%" height="15" fill="rgb(239,218,39)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1023.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;long&gt; (1 samples, 0.03%)</title><rect x="45.8475%" y="997" width="0.0340%" height="15" fill="rgb(208,169,54)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="1007.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (1 samples, 0.03%)</title><rect x="45.8475%" y="981" width="0.0340%" height="15" fill="rgb(247,25,42)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="991.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="45.8475%" y="965" width="0.0340%" height="15" fill="rgb(226,23,31)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="975.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="45.8475%" y="949" width="0.0340%" height="15" fill="rgb(247,16,28)" fg:x="1347" fg:w="1"/><text x="46.0975%" y="959.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="46.0177%" y="965" width="0.0340%" height="15" fill="rgb(231,147,38)" fg:x="1352" fg:w="1"/><text x="46.2677%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0177%" y="949" width="0.0340%" height="15" fill="rgb(253,81,48)" fg:x="1352" fg:w="1"/><text x="46.2677%" y="959.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="46.0177%" y="933" width="0.0340%" height="15" fill="rgb(249,222,43)" fg:x="1352" fg:w="1"/><text x="46.2677%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0177%" y="917" width="0.0340%" height="15" fill="rgb(221,3,27)" fg:x="1352" fg:w="1"/><text x="46.2677%" y="927.50"></text></g><g><title>Chainstate::ConnectTip (812 samples, 27.64%)</title><rect x="18.4479%" y="1189" width="27.6378%" height="15" fill="rgb(228,180,5)" fg:x="542" fg:w="812"/><text x="18.6979%" y="1199.50">Chainstate::ConnectTip</text></g><g><title>void LogPrintFormatInternal&lt;double&gt; (7 samples, 0.24%)</title><rect x="45.8475%" y="1173" width="0.2383%" height="15" fill="rgb(227,131,42)" fg:x="1347" fg:w="7"/><text x="46.0975%" y="1183.50"></text></g><g><title>BCLog::Logger::LogPrintStr (7 samples, 0.24%)</title><rect x="45.8475%" y="1157" width="0.2383%" height="15" fill="rgb(212,3,39)" fg:x="1347" fg:w="7"/><text x="46.0975%" y="1167.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (7 samples, 0.24%)</title><rect x="45.8475%" y="1141" width="0.2383%" height="15" fill="rgb(226,45,5)" fg:x="1347" fg:w="7"/><text x="46.0975%" y="1151.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (6 samples, 0.20%)</title><rect x="45.8816%" y="1125" width="0.2042%" height="15" fill="rgb(215,167,45)" fg:x="1348" fg:w="6"/><text x="46.1316%" y="1135.50"></text></g><g><title>_IO_fwrite (6 samples, 0.20%)</title><rect x="45.8816%" y="1109" width="0.2042%" height="15" fill="rgb(250,218,53)" fg:x="1348" fg:w="6"/><text x="46.1316%" y="1119.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (6 samples, 0.20%)</title><rect x="45.8816%" y="1093" width="0.2042%" height="15" fill="rgb(207,140,0)" fg:x="1348" fg:w="6"/><text x="46.1316%" y="1103.50"></text></g><g><title>new_do_write (5 samples, 0.17%)</title><rect x="45.9156%" y="1077" width="0.1702%" height="15" fill="rgb(238,133,51)" fg:x="1349" fg:w="5"/><text x="46.1656%" y="1087.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="45.9156%" y="1061" width="0.1702%" height="15" fill="rgb(218,203,53)" fg:x="1349" fg:w="5"/><text x="46.1656%" y="1071.50"></text></g><g><title>__GI___libc_write (5 samples, 0.17%)</title><rect x="45.9156%" y="1045" width="0.1702%" height="15" fill="rgb(226,184,25)" fg:x="1349" fg:w="5"/><text x="46.1656%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="45.9156%" y="1029" width="0.1702%" height="15" fill="rgb(231,121,21)" fg:x="1349" fg:w="5"/><text x="46.1656%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="45.9156%" y="1013" width="0.1702%" height="15" fill="rgb(251,14,34)" fg:x="1349" fg:w="5"/><text x="46.1656%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="45.9156%" y="997" width="0.1702%" height="15" fill="rgb(249,193,11)" fg:x="1349" fg:w="5"/><text x="46.1656%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="45.9496%" y="981" width="0.1361%" height="15" fill="rgb(220,172,37)" fg:x="1350" fg:w="4"/><text x="46.1996%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0517%" y="965" width="0.0340%" height="15" fill="rgb(231,229,43)" fg:x="1353" fg:w="1"/><text x="46.3017%" y="975.50"></text></g><g><title>Chainstate::PruneBlockIndexCandidates (1 samples, 0.03%)</title><rect x="46.0858%" y="1189" width="0.0340%" height="15" fill="rgb(250,161,5)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1199.50"></text></g><g><title>std::set&lt;CBlockIndex*, node::CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::erase[abi:cxx11] (1 samples, 0.03%)</title><rect x="46.0858%" y="1173" width="0.0340%" height="15" fill="rgb(218,225,18)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, node::CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::erase[abi:cxx11] (1 samples, 0.03%)</title><rect x="46.0858%" y="1157" width="0.0340%" height="15" fill="rgb(245,45,42)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, node::CBlockIndexWorkComparator, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_erase_aux (1 samples, 0.03%)</title><rect x="46.0858%" y="1141" width="0.0340%" height="15" fill="rgb(211,115,1)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1151.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (1 samples, 0.03%)</title><rect x="46.0858%" y="1125" width="0.0340%" height="15" fill="rgb(248,133,52)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="1109" width="0.0340%" height="15" fill="rgb(238,100,21)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="1093" width="0.0340%" height="15" fill="rgb(247,144,11)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="1077" width="0.0340%" height="15" fill="rgb(206,164,16)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="1061" width="0.0340%" height="15" fill="rgb(222,34,3)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="1045" width="0.0340%" height="15" fill="rgb(248,82,4)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="1029" width="0.0340%" height="15" fill="rgb(228,81,46)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1039.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="46.0858%" y="1013" width="0.0340%" height="15" fill="rgb(227,67,47)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="997" width="0.0340%" height="15" fill="rgb(215,93,53)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="981" width="0.0340%" height="15" fill="rgb(248,194,39)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="965" width="0.0340%" height="15" fill="rgb(215,5,19)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="949" width="0.0340%" height="15" fill="rgb(226,215,51)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="933" width="0.0340%" height="15" fill="rgb(225,56,26)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="917" width="0.0340%" height="15" fill="rgb(222,75,29)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="901" width="0.0340%" height="15" fill="rgb(236,139,6)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="885" width="0.0340%" height="15" fill="rgb(223,137,36)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="869" width="0.0340%" height="15" fill="rgb(226,99,2)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="853" width="0.0340%" height="15" fill="rgb(206,133,23)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="837" width="0.0340%" height="15" fill="rgb(243,173,15)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.0858%" y="821" width="0.0340%" height="15" fill="rgb(228,69,28)" fg:x="1354" fg:w="1"/><text x="46.3358%" y="831.50"></text></g><g><title>CSHA512::Write (2 samples, 0.07%)</title><rect x="46.1198%" y="1013" width="0.0681%" height="15" fill="rgb(212,51,22)" fg:x="1355" fg:w="2"/><text x="46.3698%" y="1023.50"></text></g><g><title>Transform (2 samples, 0.07%)</title><rect x="46.1198%" y="997" width="0.0681%" height="15" fill="rgb(227,113,0)" fg:x="1355" fg:w="2"/><text x="46.3698%" y="1007.50"></text></g><g><title>Round (1 samples, 0.03%)</title><rect x="46.1538%" y="981" width="0.0340%" height="15" fill="rgb(252,84,27)" fg:x="1356" fg:w="1"/><text x="46.4038%" y="991.50"></text></g><g><title>CSHA512::Finalize (3 samples, 0.10%)</title><rect x="46.1198%" y="1029" width="0.1021%" height="15" fill="rgb(223,145,39)" fg:x="1355" fg:w="3"/><text x="46.3698%" y="1039.50"></text></g><g><title>WriteBE64 (1 samples, 0.03%)</title><rect x="46.1879%" y="1013" width="0.0340%" height="15" fill="rgb(239,219,30)" fg:x="1357" fg:w="1"/><text x="46.4379%" y="1023.50"></text></g><g><title>htobe64_internal (1 samples, 0.03%)</title><rect x="46.1879%" y="997" width="0.0340%" height="15" fill="rgb(224,196,39)" fg:x="1357" fg:w="1"/><text x="46.4379%" y="1007.50"></text></g><g><title>internal_bswap_64 (1 samples, 0.03%)</title><rect x="46.1879%" y="981" width="0.0340%" height="15" fill="rgb(205,35,43)" fg:x="1357" fg:w="1"/><text x="46.4379%" y="991.50"></text></g><g><title>ChaCha20Aligned::ChaCha20Aligned (1 samples, 0.03%)</title><rect x="46.2219%" y="1029" width="0.0340%" height="15" fill="rgb(228,201,21)" fg:x="1358" fg:w="1"/><text x="46.4719%" y="1039.50"></text></g><g><title>DisconnectedBlockTransactions::DisconnectedBlockTransactions (5 samples, 0.17%)</title><rect x="46.1198%" y="1189" width="0.1702%" height="15" fill="rgb(237,118,16)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1199.50"></text></g><g><title>std::unordered_map&lt;uint256, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; &gt;::unordered_map (5 samples, 0.17%)</title><rect x="46.1198%" y="1173" width="0.1702%" height="15" fill="rgb(241,17,19)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.17%)</title><rect x="46.1198%" y="1157" width="0.1702%" height="15" fill="rgb(214,10,25)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable_base (5 samples, 0.17%)</title><rect x="46.1198%" y="1141" width="0.1702%" height="15" fill="rgb(238,37,29)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, std::_List_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;, std::__detail::_Select1st, SaltedTxidHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_Hash_code_base (5 samples, 0.17%)</title><rect x="46.1198%" y="1125" width="0.1702%" height="15" fill="rgb(253,83,25)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;1, SaltedTxidHasher, false&gt;::_Hashtable_ebo_helper (5 samples, 0.17%)</title><rect x="46.1198%" y="1109" width="0.1702%" height="15" fill="rgb(234,192,12)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1119.50"></text></g><g><title>SaltedTxidHasher::SaltedTxidHasher (5 samples, 0.17%)</title><rect x="46.1198%" y="1093" width="0.1702%" height="15" fill="rgb(241,216,45)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1103.50"></text></g><g><title>FastRandomContext::rand64 (5 samples, 0.17%)</title><rect x="46.1198%" y="1077" width="0.1702%" height="15" fill="rgb(242,22,33)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1087.50"></text></g><g><title>FastRandomContext::RandomSeed (5 samples, 0.17%)</title><rect x="46.1198%" y="1061" width="0.1702%" height="15" fill="rgb(231,105,49)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1071.50"></text></g><g><title>GetRandHash (5 samples, 0.17%)</title><rect x="46.1198%" y="1045" width="0.1702%" height="15" fill="rgb(218,204,15)" fg:x="1355" fg:w="5"/><text x="46.3698%" y="1055.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1 samples, 0.03%)</title><rect x="46.2560%" y="1029" width="0.0340%" height="15" fill="rgb(235,138,41)" fg:x="1359" fg:w="1"/><text x="46.5060%" y="1039.50"></text></g><g><title>Chainstate::ActivateBestChainStep (819 samples, 27.88%)</title><rect x="18.4479%" y="1205" width="27.8761%" height="15" fill="rgb(246,0,9)" fg:x="542" fg:w="819"/><text x="18.6979%" y="1215.50">Chainstate::ActivateBestChainStep</text></g><g><title>pthread_mutex_unlock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="46.2900%" y="1189" width="0.0340%" height="15" fill="rgb(210,74,4)" fg:x="1360" fg:w="1"/><text x="46.5400%" y="1199.50"></text></g><g><title>ValidationSignals::ActiveTipChange (1 samples, 0.03%)</title><rect x="46.3240%" y="1189" width="0.0340%" height="15" fill="rgb(250,60,41)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1199.50"></text></g><g><title>BCLog::Logger::WillLogCategoryLevel (1 samples, 0.03%)</title><rect x="46.3240%" y="1173" width="0.0340%" height="15" fill="rgb(220,115,12)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1183.50"></text></g><g><title>StdLockGuard::StdLockGuard (1 samples, 0.03%)</title><rect x="46.3240%" y="1157" width="0.0340%" height="15" fill="rgb(237,100,13)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1167.50"></text></g><g><title>std::lock_guard&lt;StdMutex&gt;::lock_guard (1 samples, 0.03%)</title><rect x="46.3240%" y="1141" width="0.0340%" height="15" fill="rgb(213,55,26)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1151.50"></text></g><g><title>std::mutex::lock (1 samples, 0.03%)</title><rect x="46.3240%" y="1125" width="0.0340%" height="15" fill="rgb(216,17,4)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1135.50"></text></g><g><title>BCLog::Logger::WillLogCategoryLevel (1 samples, 0.03%)</title><rect x="46.3240%" y="1109" width="0.0340%" height="15" fill="rgb(220,153,47)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1119.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="46.3240%" y="1093" width="0.0340%" height="15" fill="rgb(215,131,9)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1103.50"></text></g><g><title>__GI___lll_lock_wait (1 samples, 0.03%)</title><rect x="46.3240%" y="1077" width="0.0340%" height="15" fill="rgb(233,46,42)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="1061" width="0.0340%" height="15" fill="rgb(226,86,7)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="1045" width="0.0340%" height="15" fill="rgb(239,226,21)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="1029" width="0.0340%" height="15" fill="rgb(244,137,22)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="1013" width="0.0340%" height="15" fill="rgb(211,139,35)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="997" width="0.0340%" height="15" fill="rgb(214,62,50)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="981" width="0.0340%" height="15" fill="rgb(212,113,44)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="965" width="0.0340%" height="15" fill="rgb(226,150,43)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="949" width="0.0340%" height="15" fill="rgb(250,71,37)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="933" width="0.0340%" height="15" fill="rgb(219,76,19)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3240%" y="917" width="0.0340%" height="15" fill="rgb(250,39,11)" fg:x="1361" fg:w="1"/><text x="46.5740%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1189" width="0.0340%" height="15" fill="rgb(230,64,31)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1173" width="0.0340%" height="15" fill="rgb(208,222,23)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1157" width="0.0340%" height="15" fill="rgb(227,125,18)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1141" width="0.0340%" height="15" fill="rgb(234,210,9)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1125" width="0.0340%" height="15" fill="rgb(217,127,24)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1109" width="0.0340%" height="15" fill="rgb(239,141,48)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1119.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="46.3581%" y="1093" width="0.0340%" height="15" fill="rgb(227,109,8)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1077" width="0.0340%" height="15" fill="rgb(235,184,23)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1061" width="0.0340%" height="15" fill="rgb(227,226,48)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1045" width="0.0340%" height="15" fill="rgb(206,150,11)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1029" width="0.0340%" height="15" fill="rgb(254,2,33)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="1013" width="0.0340%" height="15" fill="rgb(243,160,20)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="997" width="0.0340%" height="15" fill="rgb(218,208,30)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="981" width="0.0340%" height="15" fill="rgb(224,120,49)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="965" width="0.0340%" height="15" fill="rgb(246,12,2)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="949" width="0.0340%" height="15" fill="rgb(236,117,3)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="933" width="0.0340%" height="15" fill="rgb(216,128,52)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="917" width="0.0340%" height="15" fill="rgb(246,145,19)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.3581%" y="901" width="0.0340%" height="15" fill="rgb(222,11,46)" fg:x="1362" fg:w="1"/><text x="46.6081%" y="911.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="46.3921%" y="1141" width="0.0340%" height="15" fill="rgb(245,82,36)" fg:x="1363" fg:w="1"/><text x="46.6421%" y="1151.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="46.3921%" y="1125" width="0.0340%" height="15" fill="rgb(250,73,51)" fg:x="1363" fg:w="1"/><text x="46.6421%" y="1135.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="46.3921%" y="1109" width="0.0340%" height="15" fill="rgb(221,189,23)" fg:x="1363" fg:w="1"/><text x="46.6421%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="46.3921%" y="1093" width="0.0340%" height="15" fill="rgb(210,33,7)" fg:x="1363" fg:w="1"/><text x="46.6421%" y="1103.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="46.3921%" y="1077" width="0.0340%" height="15" fill="rgb(210,107,22)" fg:x="1363" fg:w="1"/><text x="46.6421%" y="1087.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="46.3921%" y="1061" width="0.0340%" height="15" fill="rgb(222,116,37)" fg:x="1363" fg:w="1"/><text x="46.6421%" y="1071.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="46.3921%" y="1045" width="0.0340%" height="15" fill="rgb(254,17,48)" fg:x="1363" fg:w="1"/><text x="46.6421%" y="1055.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="46.4942%" y="949" width="0.0681%" height="15" fill="rgb(224,36,32)" fg:x="1366" fg:w="2"/><text x="46.7442%" y="959.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="46.5283%" y="933" width="0.0340%" height="15" fill="rgb(232,90,46)" fg:x="1367" fg:w="1"/><text x="46.7783%" y="943.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="46.5283%" y="917" width="0.0340%" height="15" fill="rgb(241,66,40)" fg:x="1367" fg:w="1"/><text x="46.7783%" y="927.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="46.5283%" y="901" width="0.0340%" height="15" fill="rgb(249,184,29)" fg:x="1367" fg:w="1"/><text x="46.7783%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="46.5283%" y="885" width="0.0340%" height="15" fill="rgb(231,181,1)" fg:x="1367" fg:w="1"/><text x="46.7783%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.5283%" y="869" width="0.0340%" height="15" fill="rgb(224,94,2)" fg:x="1367" fg:w="1"/><text x="46.7783%" y="879.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="46.4942%" y="981" width="0.1021%" height="15" fill="rgb(229,170,15)" fg:x="1366" fg:w="3"/><text x="46.7442%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="46.4942%" y="965" width="0.1021%" height="15" fill="rgb(240,127,35)" fg:x="1366" fg:w="3"/><text x="46.7442%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.5623%" y="949" width="0.0340%" height="15" fill="rgb(248,196,34)" fg:x="1368" fg:w="1"/><text x="46.8123%" y="959.50"></text></g><g><title>__GI___libc_write (5 samples, 0.17%)</title><rect x="46.4602%" y="1061" width="0.1702%" height="15" fill="rgb(236,137,7)" fg:x="1365" fg:w="5"/><text x="46.7102%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="46.4602%" y="1045" width="0.1702%" height="15" fill="rgb(235,127,16)" fg:x="1365" fg:w="5"/><text x="46.7102%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="46.4602%" y="1029" width="0.1702%" height="15" fill="rgb(250,192,54)" fg:x="1365" fg:w="5"/><text x="46.7102%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="46.4602%" y="1013" width="0.1702%" height="15" fill="rgb(218,98,20)" fg:x="1365" fg:w="5"/><text x="46.7102%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="46.4942%" y="997" width="0.1361%" height="15" fill="rgb(230,176,47)" fg:x="1366" fg:w="4"/><text x="46.7442%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.5963%" y="981" width="0.0340%" height="15" fill="rgb(244,2,33)" fg:x="1369" fg:w="1"/><text x="46.8463%" y="991.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (8 samples, 0.27%)</title><rect x="46.3921%" y="1157" width="0.2723%" height="15" fill="rgb(231,100,17)" fg:x="1363" fg:w="8"/><text x="46.6421%" y="1167.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (7 samples, 0.24%)</title><rect x="46.4261%" y="1141" width="0.2383%" height="15" fill="rgb(245,23,12)" fg:x="1364" fg:w="7"/><text x="46.6761%" y="1151.50"></text></g><g><title>_IO_fwrite (6 samples, 0.20%)</title><rect x="46.4602%" y="1125" width="0.2042%" height="15" fill="rgb(249,55,22)" fg:x="1365" fg:w="6"/><text x="46.7102%" y="1135.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (6 samples, 0.20%)</title><rect x="46.4602%" y="1109" width="0.2042%" height="15" fill="rgb(207,134,9)" fg:x="1365" fg:w="6"/><text x="46.7102%" y="1119.50"></text></g><g><title>new_do_write (6 samples, 0.20%)</title><rect x="46.4602%" y="1093" width="0.2042%" height="15" fill="rgb(218,134,0)" fg:x="1365" fg:w="6"/><text x="46.7102%" y="1103.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (6 samples, 0.20%)</title><rect x="46.4602%" y="1077" width="0.2042%" height="15" fill="rgb(213,212,33)" fg:x="1365" fg:w="6"/><text x="46.7102%" y="1087.50"></text></g><g><title>new_do_write (1 samples, 0.03%)</title><rect x="46.6304%" y="1061" width="0.0340%" height="15" fill="rgb(252,106,18)" fg:x="1370" fg:w="1"/><text x="46.8804%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.6304%" y="1045" width="0.0340%" height="15" fill="rgb(208,126,42)" fg:x="1370" fg:w="1"/><text x="46.8804%" y="1055.50"></text></g><g><title>ValidationSignals::ActiveTipChange (16 samples, 0.54%)</title><rect x="46.3240%" y="1205" width="0.5446%" height="15" fill="rgb(246,175,29)" fg:x="1361" fg:w="16"/><text x="46.5740%" y="1215.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [16], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; (14 samples, 0.48%)</title><rect x="46.3921%" y="1189" width="0.4765%" height="15" fill="rgb(215,13,50)" fg:x="1363" fg:w="14"/><text x="46.6421%" y="1199.50"></text></g><g><title>BCLog::Logger::LogPrintStr (14 samples, 0.48%)</title><rect x="46.3921%" y="1173" width="0.4765%" height="15" fill="rgb(216,172,15)" fg:x="1363" fg:w="14"/><text x="46.6421%" y="1183.50"></text></g><g><title>StdLockGuard::StdLockGuard (6 samples, 0.20%)</title><rect x="46.6644%" y="1157" width="0.2042%" height="15" fill="rgb(212,103,13)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1167.50"></text></g><g><title>std::lock_guard&lt;StdMutex&gt;::lock_guard (6 samples, 0.20%)</title><rect x="46.6644%" y="1141" width="0.2042%" height="15" fill="rgb(231,171,36)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1151.50"></text></g><g><title>std::mutex::lock (6 samples, 0.20%)</title><rect x="46.6644%" y="1125" width="0.2042%" height="15" fill="rgb(250,123,20)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr (6 samples, 0.20%)</title><rect x="46.6644%" y="1109" width="0.2042%" height="15" fill="rgb(212,53,50)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1119.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (6 samples, 0.20%)</title><rect x="46.6644%" y="1093" width="0.2042%" height="15" fill="rgb(243,54,12)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1103.50"></text></g><g><title>__GI___lll_lock_wait (6 samples, 0.20%)</title><rect x="46.6644%" y="1077" width="0.2042%" height="15" fill="rgb(234,101,34)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="1061" width="0.2042%" height="15" fill="rgb(254,67,22)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="1045" width="0.2042%" height="15" fill="rgb(250,35,47)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="1029" width="0.2042%" height="15" fill="rgb(226,126,38)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="1013" width="0.2042%" height="15" fill="rgb(216,138,53)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1023.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="997" width="0.2042%" height="15" fill="rgb(246,199,43)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="981" width="0.2042%" height="15" fill="rgb(232,125,11)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="965" width="0.2042%" height="15" fill="rgb(218,219,45)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="975.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="46.6644%" y="949" width="0.2042%" height="15" fill="rgb(216,102,54)" fg:x="1371" fg:w="6"/><text x="46.9144%" y="959.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="46.6984%" y="933" width="0.1702%" height="15" fill="rgb(250,228,7)" fg:x="1372" fg:w="5"/><text x="46.9484%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="46.6984%" y="917" width="0.1702%" height="15" fill="rgb(226,125,25)" fg:x="1372" fg:w="5"/><text x="46.9484%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="46.7665%" y="901" width="0.1021%" height="15" fill="rgb(224,165,27)" fg:x="1374" fg:w="3"/><text x="47.0165%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="46.7665%" y="885" width="0.1021%" height="15" fill="rgb(233,86,3)" fg:x="1374" fg:w="3"/><text x="47.0165%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.8346%" y="869" width="0.0340%" height="15" fill="rgb(228,116,20)" fg:x="1376" fg:w="1"/><text x="47.0846%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="46.8346%" y="853" width="0.0340%" height="15" fill="rgb(209,192,17)" fg:x="1376" fg:w="1"/><text x="47.0846%" y="863.50"></text></g><g><title>std::function&lt;void ()&gt;::~function (1 samples, 0.03%)</title><rect x="46.8686%" y="1189" width="0.0340%" height="15" fill="rgb(224,88,34)" fg:x="1377" fg:w="1"/><text x="47.1186%" y="1199.50"></text></g><g><title>std::_Function_base::~_Function_base (1 samples, 0.03%)</title><rect x="46.8686%" y="1173" width="0.0340%" height="15" fill="rgb(233,38,6)" fg:x="1377" fg:w="1"/><text x="47.1186%" y="1183.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (3 samples, 0.10%)</title><rect x="46.9027%" y="1141" width="0.1021%" height="15" fill="rgb(212,59,30)" fg:x="1378" fg:w="3"/><text x="47.1527%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.03%)</title><rect x="46.9707%" y="1125" width="0.0340%" height="15" fill="rgb(213,80,3)" fg:x="1380" fg:w="1"/><text x="47.2207%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.03%)</title><rect x="46.9707%" y="1109" width="0.0340%" height="15" fill="rgb(251,178,7)" fg:x="1380" fg:w="1"/><text x="47.2207%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.03%)</title><rect x="46.9707%" y="1093" width="0.0340%" height="15" fill="rgb(213,154,26)" fg:x="1380" fg:w="1"/><text x="47.2207%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="46.9707%" y="1077" width="0.0340%" height="15" fill="rgb(238,165,49)" fg:x="1380" fg:w="1"/><text x="47.2207%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="46.9707%" y="1061" width="0.0340%" height="15" fill="rgb(248,91,46)" fg:x="1380" fg:w="1"/><text x="47.2207%" y="1071.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="46.9707%" y="1045" width="0.0340%" height="15" fill="rgb(244,21,52)" fg:x="1380" fg:w="1"/><text x="47.2207%" y="1055.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="47.0048%" y="1141" width="0.0340%" height="15" fill="rgb(247,122,20)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::insert (1 samples, 0.03%)</title><rect x="47.0048%" y="1125" width="0.0340%" height="15" fill="rgb(218,27,9)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign&lt;char*, void&gt; (1 samples, 0.03%)</title><rect x="47.0048%" y="1109" width="0.0340%" height="15" fill="rgb(246,7,6)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::replace (1 samples, 0.03%)</title><rect x="47.0048%" y="1093" width="0.0340%" height="15" fill="rgb(227,135,54)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::replace (1 samples, 0.03%)</title><rect x="47.0048%" y="1077" width="0.0340%" height="15" fill="rgb(247,14,11)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.03%)</title><rect x="47.0048%" y="1061" width="0.0340%" height="15" fill="rgb(206,149,34)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.03%)</title><rect x="47.0048%" y="1045" width="0.0340%" height="15" fill="rgb(227,228,4)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (1 samples, 0.03%)</title><rect x="47.0048%" y="1029" width="0.0340%" height="15" fill="rgb(238,218,28)" fg:x="1381" fg:w="1"/><text x="47.2548%" y="1039.50"></text></g><g><title>ValidationSignals::BlockConnected (7 samples, 0.24%)</title><rect x="46.8686%" y="1205" width="0.2383%" height="15" fill="rgb(252,86,40)" fg:x="1377" fg:w="7"/><text x="47.1186%" y="1215.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; (6 samples, 0.20%)</title><rect x="46.9027%" y="1189" width="0.2042%" height="15" fill="rgb(251,225,11)" fg:x="1378" fg:w="6"/><text x="47.1527%" y="1199.50"></text></g><g><title>BCLog::Logger::LogPrintStr (6 samples, 0.20%)</title><rect x="46.9027%" y="1173" width="0.2042%" height="15" fill="rgb(206,46,49)" fg:x="1378" fg:w="6"/><text x="47.1527%" y="1183.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (6 samples, 0.20%)</title><rect x="46.9027%" y="1157" width="0.2042%" height="15" fill="rgb(245,128,24)" fg:x="1378" fg:w="6"/><text x="47.1527%" y="1167.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (2 samples, 0.07%)</title><rect x="47.0388%" y="1141" width="0.0681%" height="15" fill="rgb(219,177,34)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1151.50"></text></g><g><title>_IO_fwrite (2 samples, 0.07%)</title><rect x="47.0388%" y="1125" width="0.0681%" height="15" fill="rgb(218,60,48)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1135.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="47.0388%" y="1109" width="0.0681%" height="15" fill="rgb(221,11,5)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1119.50"></text></g><g><title>new_do_write (2 samples, 0.07%)</title><rect x="47.0388%" y="1093" width="0.0681%" height="15" fill="rgb(220,148,13)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1103.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="47.0388%" y="1077" width="0.0681%" height="15" fill="rgb(210,16,3)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1087.50"></text></g><g><title>__GI___libc_write (2 samples, 0.07%)</title><rect x="47.0388%" y="1061" width="0.0681%" height="15" fill="rgb(236,80,2)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.0388%" y="1045" width="0.0681%" height="15" fill="rgb(239,129,19)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.0388%" y="1029" width="0.0681%" height="15" fill="rgb(220,106,35)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.0388%" y="1013" width="0.0681%" height="15" fill="rgb(252,139,45)" fg:x="1382" fg:w="2"/><text x="47.2888%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.0728%" y="997" width="0.0340%" height="15" fill="rgb(229,8,36)" fg:x="1383" fg:w="1"/><text x="47.3228%" y="1007.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.03%)</title><rect x="47.1069%" y="1093" width="0.0340%" height="15" fill="rgb(230,126,33)" fg:x="1384" fg:w="1"/><text x="47.3569%" y="1103.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.03%)</title><rect x="47.1069%" y="1077" width="0.0340%" height="15" fill="rgb(239,140,21)" fg:x="1384" fg:w="1"/><text x="47.3569%" y="1087.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (2 samples, 0.07%)</title><rect x="47.1069%" y="1141" width="0.0681%" height="15" fill="rgb(254,104,9)" fg:x="1384" fg:w="2"/><text x="47.3569%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (2 samples, 0.07%)</title><rect x="47.1069%" y="1125" width="0.0681%" height="15" fill="rgb(239,52,14)" fg:x="1384" fg:w="2"/><text x="47.3569%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (2 samples, 0.07%)</title><rect x="47.1069%" y="1109" width="0.0681%" height="15" fill="rgb(208,227,44)" fg:x="1384" fg:w="2"/><text x="47.3569%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.03%)</title><rect x="47.1409%" y="1093" width="0.0340%" height="15" fill="rgb(246,18,19)" fg:x="1385" fg:w="1"/><text x="47.3909%" y="1103.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="47.1749%" y="1141" width="0.0340%" height="15" fill="rgb(235,228,25)" fg:x="1386" fg:w="1"/><text x="47.4249%" y="1151.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="47.1749%" y="1125" width="0.0340%" height="15" fill="rgb(240,156,20)" fg:x="1386" fg:w="1"/><text x="47.4249%" y="1135.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="47.1749%" y="1109" width="0.0340%" height="15" fill="rgb(224,8,20)" fg:x="1386" fg:w="1"/><text x="47.4249%" y="1119.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="47.1749%" y="1093" width="0.0340%" height="15" fill="rgb(214,12,52)" fg:x="1386" fg:w="1"/><text x="47.4249%" y="1103.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="47.1749%" y="1077" width="0.0340%" height="15" fill="rgb(211,220,47)" fg:x="1386" fg:w="1"/><text x="47.4249%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.2430%" y="933" width="0.0340%" height="15" fill="rgb(250,173,5)" fg:x="1388" fg:w="1"/><text x="47.4930%" y="943.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.2430%" y="917" width="0.0340%" height="15" fill="rgb(250,125,52)" fg:x="1388" fg:w="1"/><text x="47.4930%" y="927.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.2430%" y="901" width="0.0340%" height="15" fill="rgb(209,133,18)" fg:x="1388" fg:w="1"/><text x="47.4930%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.2430%" y="885" width="0.0340%" height="15" fill="rgb(216,173,22)" fg:x="1388" fg:w="1"/><text x="47.4930%" y="895.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="47.2430%" y="949" width="0.0681%" height="15" fill="rgb(205,3,22)" fg:x="1388" fg:w="2"/><text x="47.4930%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.2771%" y="933" width="0.0340%" height="15" fill="rgb(248,22,20)" fg:x="1389" fg:w="1"/><text x="47.5271%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.2771%" y="917" width="0.0340%" height="15" fill="rgb(233,6,29)" fg:x="1389" fg:w="1"/><text x="47.5271%" y="927.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="47.2430%" y="981" width="0.1021%" height="15" fill="rgb(240,22,54)" fg:x="1388" fg:w="3"/><text x="47.4930%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="47.2430%" y="965" width="0.1021%" height="15" fill="rgb(231,133,32)" fg:x="1388" fg:w="3"/><text x="47.4930%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.3111%" y="949" width="0.0340%" height="15" fill="rgb(248,193,4)" fg:x="1390" fg:w="1"/><text x="47.5611%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.3111%" y="933" width="0.0340%" height="15" fill="rgb(211,178,46)" fg:x="1390" fg:w="1"/><text x="47.5611%" y="943.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (5 samples, 0.17%)</title><rect x="47.2090%" y="1141" width="0.1702%" height="15" fill="rgb(224,5,42)" fg:x="1387" fg:w="5"/><text x="47.4590%" y="1151.50"></text></g><g><title>_IO_fwrite (5 samples, 0.17%)</title><rect x="47.2090%" y="1125" width="0.1702%" height="15" fill="rgb(239,176,25)" fg:x="1387" fg:w="5"/><text x="47.4590%" y="1135.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (5 samples, 0.17%)</title><rect x="47.2090%" y="1109" width="0.1702%" height="15" fill="rgb(245,187,50)" fg:x="1387" fg:w="5"/><text x="47.4590%" y="1119.50"></text></g><g><title>new_do_write (5 samples, 0.17%)</title><rect x="47.2090%" y="1093" width="0.1702%" height="15" fill="rgb(248,24,15)" fg:x="1387" fg:w="5"/><text x="47.4590%" y="1103.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (4 samples, 0.14%)</title><rect x="47.2430%" y="1077" width="0.1361%" height="15" fill="rgb(205,166,13)" fg:x="1388" fg:w="4"/><text x="47.4930%" y="1087.50"></text></g><g><title>__GI___libc_write (4 samples, 0.14%)</title><rect x="47.2430%" y="1061" width="0.1361%" height="15" fill="rgb(208,114,23)" fg:x="1388" fg:w="4"/><text x="47.4930%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="47.2430%" y="1045" width="0.1361%" height="15" fill="rgb(239,127,18)" fg:x="1388" fg:w="4"/><text x="47.4930%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="47.2430%" y="1029" width="0.1361%" height="15" fill="rgb(219,154,28)" fg:x="1388" fg:w="4"/><text x="47.4930%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="47.2430%" y="1013" width="0.1361%" height="15" fill="rgb(225,157,23)" fg:x="1388" fg:w="4"/><text x="47.4930%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="47.2430%" y="997" width="0.1361%" height="15" fill="rgb(219,8,6)" fg:x="1388" fg:w="4"/><text x="47.4930%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.3451%" y="981" width="0.0340%" height="15" fill="rgb(212,47,6)" fg:x="1391" fg:w="1"/><text x="47.5951%" y="991.50"></text></g><g><title>BCLog::Logger::LogPrintStr (9 samples, 0.31%)</title><rect x="47.1069%" y="1173" width="0.3063%" height="15" fill="rgb(224,190,4)" fg:x="1384" fg:w="9"/><text x="47.3569%" y="1183.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (9 samples, 0.31%)</title><rect x="47.1069%" y="1157" width="0.3063%" height="15" fill="rgb(239,183,29)" fg:x="1384" fg:w="9"/><text x="47.3569%" y="1167.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="47.3792%" y="1141" width="0.0340%" height="15" fill="rgb(213,57,7)" fg:x="1392" fg:w="1"/><text x="47.6292%" y="1151.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (2 samples, 0.07%)</title><rect x="47.4132%" y="1173" width="0.0681%" height="15" fill="rgb(216,148,1)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1183.50"></text></g><g><title>__GI___lll_lock_wake (2 samples, 0.07%)</title><rect x="47.4132%" y="1157" width="0.0681%" height="15" fill="rgb(236,182,29)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.4132%" y="1141" width="0.0681%" height="15" fill="rgb(244,120,48)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.4132%" y="1125" width="0.0681%" height="15" fill="rgb(206,71,34)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.4132%" y="1109" width="0.0681%" height="15" fill="rgb(242,32,6)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.4132%" y="1093" width="0.0681%" height="15" fill="rgb(241,35,3)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.4132%" y="1077" width="0.0681%" height="15" fill="rgb(222,62,19)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.4132%" y="1061" width="0.0681%" height="15" fill="rgb(223,110,41)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.4132%" y="1045" width="0.0681%" height="15" fill="rgb(208,224,4)" fg:x="1393" fg:w="2"/><text x="47.6632%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.4472%" y="1029" width="0.0340%" height="15" fill="rgb(241,137,19)" fg:x="1394" fg:w="1"/><text x="47.6972%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.4472%" y="1013" width="0.0340%" height="15" fill="rgb(244,24,17)" fg:x="1394" fg:w="1"/><text x="47.6972%" y="1023.50"></text></g><g><title>ValidationSignals::UpdatedBlockTip (12 samples, 0.41%)</title><rect x="47.1069%" y="1205" width="0.4084%" height="15" fill="rgb(245,178,49)" fg:x="1384" fg:w="12"/><text x="47.3569%" y="1215.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (12 samples, 0.41%)</title><rect x="47.1069%" y="1189" width="0.4084%" height="15" fill="rgb(219,160,38)" fg:x="1384" fg:w="12"/><text x="47.3569%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.03%)</title><rect x="47.4813%" y="1173" width="0.0340%" height="15" fill="rgb(228,137,14)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1183.50"></text></g><g><title>void tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.03%)</title><rect x="47.4813%" y="1157" width="0.0340%" height="15" fill="rgb(237,134,11)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1167.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="47.4813%" y="1141" width="0.0340%" height="15" fill="rgb(211,126,44)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1151.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="47.4813%" y="1125" width="0.0340%" height="15" fill="rgb(226,171,33)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1135.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.03%)</title><rect x="47.4813%" y="1109" width="0.0340%" height="15" fill="rgb(253,99,13)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.03%)</title><rect x="47.4813%" y="1093" width="0.0340%" height="15" fill="rgb(244,48,7)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1103.50"></text></g><g><title>void tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.03%)</title><rect x="47.4813%" y="1077" width="0.0340%" height="15" fill="rgb(244,217,54)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1087.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="47.4813%" y="1061" width="0.0340%" height="15" fill="rgb(224,15,18)" fg:x="1395" fg:w="1"/><text x="47.7313%" y="1071.50"></text></g><g><title>Chainstate::ActivateBestChain (855 samples, 29.10%)</title><rect x="18.4479%" y="1221" width="29.1014%" height="15" fill="rgb(244,99,12)" fg:x="542" fg:w="855"/><text x="18.6979%" y="1231.50">Chainstate::ActivateBestChain</text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="47.5153%" y="1205" width="0.0340%" height="15" fill="rgb(233,226,8)" fg:x="1396" fg:w="1"/><text x="47.7653%" y="1215.50"></text></g><g><title>ChainstateManager::ReceivedBlockTransactions (1 samples, 0.03%)</title><rect x="47.5494%" y="1189" width="0.0340%" height="15" fill="rgb(229,211,3)" fg:x="1397" fg:w="1"/><text x="47.7994%" y="1199.50"></text></g><g><title>std::deque&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::deque (1 samples, 0.03%)</title><rect x="47.5494%" y="1173" width="0.0340%" height="15" fill="rgb(216,140,21)" fg:x="1397" fg:w="1"/><text x="47.7994%" y="1183.50"></text></g><g><title>std::_Deque_base&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::_Deque_base (1 samples, 0.03%)</title><rect x="47.5494%" y="1157" width="0.0340%" height="15" fill="rgb(234,122,30)" fg:x="1397" fg:w="1"/><text x="47.7994%" y="1167.50"></text></g><g><title>std::_Deque_base&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::_Deque_impl::_Deque_impl (1 samples, 0.03%)</title><rect x="47.5494%" y="1141" width="0.0340%" height="15" fill="rgb(236,25,46)" fg:x="1397" fg:w="1"/><text x="47.7994%" y="1151.50"></text></g><g><title>std::_Deque_base&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::_Deque_impl_data::_Deque_impl_data (1 samples, 0.03%)</title><rect x="47.5494%" y="1125" width="0.0340%" height="15" fill="rgb(217,52,54)" fg:x="1397" fg:w="1"/><text x="47.7994%" y="1135.50"></text></g><g><title>std::_Deque_iterator&lt;CBlockIndex*, CBlockIndex*&amp;, CBlockIndex**&gt;::_Deque_iterator (1 samples, 0.03%)</title><rect x="47.5494%" y="1109" width="0.0340%" height="15" fill="rgb(222,29,26)" fg:x="1397" fg:w="1"/><text x="47.7994%" y="1119.50"></text></g><g><title>ChainstateManager::ReceivedBlockTransactions (2 samples, 0.07%)</title><rect x="47.5494%" y="1205" width="0.0681%" height="15" fill="rgb(216,177,29)" fg:x="1397" fg:w="2"/><text x="47.7994%" y="1215.50"></text></g><g><title>std::set&lt;CBlockIndex*, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::insert (1 samples, 0.03%)</title><rect x="47.5834%" y="1189" width="0.0340%" height="15" fill="rgb(247,136,51)" fg:x="1398" fg:w="1"/><text x="47.8334%" y="1199.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;CBlockIndex*&gt;, bool&gt; std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_insert_unique&lt;CBlockIndex* const&amp;&gt; (1 samples, 0.03%)</title><rect x="47.5834%" y="1173" width="0.0340%" height="15" fill="rgb(231,47,47)" fg:x="1398" fg:w="1"/><text x="47.8334%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.03%)</title><rect x="47.5834%" y="1157" width="0.0340%" height="15" fill="rgb(211,192,36)" fg:x="1398" fg:w="1"/><text x="47.8334%" y="1167.50"></text></g><g><title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_S_right (1 samples, 0.03%)</title><rect x="47.5834%" y="1141" width="0.0340%" height="15" fill="rgb(229,156,32)" fg:x="1398" fg:w="1"/><text x="47.8334%" y="1151.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.03%)</title><rect x="47.6174%" y="1189" width="0.0340%" height="15" fill="rgb(248,213,20)" fg:x="1399" fg:w="1"/><text x="47.8674%" y="1199.50"></text></g><g><title>CBlockIndex::GetBlockTime (1 samples, 0.03%)</title><rect x="47.6174%" y="1173" width="0.0340%" height="15" fill="rgb(217,64,7)" fg:x="1399" fg:w="1"/><text x="47.8674%" y="1183.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="47.6515%" y="869" width="0.0340%" height="15" fill="rgb(232,142,8)" fg:x="1400" fg:w="1"/><text x="47.9015%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.03%)</title><rect x="47.6515%" y="853" width="0.0340%" height="15" fill="rgb(224,92,44)" fg:x="1400" fg:w="1"/><text x="47.9015%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="47.6515%" y="837" width="0.0340%" height="15" fill="rgb(214,169,17)" fg:x="1400" fg:w="1"/><text x="47.9015%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="47.6515%" y="821" width="0.0340%" height="15" fill="rgb(210,59,37)" fg:x="1400" fg:w="1"/><text x="47.9015%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="47.6515%" y="805" width="0.0340%" height="15" fill="rgb(214,116,48)" fg:x="1400" fg:w="1"/><text x="47.9015%" y="815.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.03%)</title><rect x="47.6515%" y="789" width="0.0340%" height="15" fill="rgb(244,191,6)" fg:x="1400" fg:w="1"/><text x="47.9015%" y="799.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="47.6515%" y="885" width="0.0681%" height="15" fill="rgb(241,50,52)" fg:x="1400" fg:w="2"/><text x="47.9015%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="47.6855%" y="869" width="0.0340%" height="15" fill="rgb(236,75,39)" fg:x="1401" fg:w="1"/><text x="47.9355%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="47.6855%" y="853" width="0.0340%" height="15" fill="rgb(236,99,0)" fg:x="1401" fg:w="1"/><text x="47.9355%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="47.6855%" y="837" width="0.0340%" height="15" fill="rgb(207,202,15)" fg:x="1401" fg:w="1"/><text x="47.9355%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="47.6855%" y="821" width="0.0340%" height="15" fill="rgb(233,207,14)" fg:x="1401" fg:w="1"/><text x="47.9355%" y="831.50"></text></g><g><title>ContextualCheckBlock (4 samples, 0.14%)</title><rect x="47.6174%" y="1205" width="0.1361%" height="15" fill="rgb(226,27,51)" fg:x="1399" fg:w="4"/><text x="47.8674%" y="1215.50"></text></g><g><title>GetBlockWeight (3 samples, 0.10%)</title><rect x="47.6515%" y="1189" width="0.1021%" height="15" fill="rgb(206,104,42)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1199.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1173" width="0.1021%" height="15" fill="rgb(212,225,4)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1183.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (3 samples, 0.10%)</title><rect x="47.6515%" y="1157" width="0.1021%" height="15" fill="rgb(233,96,42)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1167.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1141" width="0.1021%" height="15" fill="rgb(229,21,32)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1151.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1125" width="0.1021%" height="15" fill="rgb(226,216,24)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1109" width="0.1021%" height="15" fill="rgb(221,163,17)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1119.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1093" width="0.1021%" height="15" fill="rgb(216,216,42)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1103.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1077" width="0.1021%" height="15" fill="rgb(240,118,7)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1087.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1061" width="0.1021%" height="15" fill="rgb(221,67,37)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1045" width="0.1021%" height="15" fill="rgb(241,32,44)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1055.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1029" width="0.1021%" height="15" fill="rgb(235,204,43)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="1013" width="0.1021%" height="15" fill="rgb(213,116,10)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="997" width="0.1021%" height="15" fill="rgb(239,15,48)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="1007.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="981" width="0.1021%" height="15" fill="rgb(207,123,36)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="991.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="965" width="0.1021%" height="15" fill="rgb(209,103,30)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="975.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="949" width="0.1021%" height="15" fill="rgb(238,100,19)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="933" width="0.1021%" height="15" fill="rgb(244,30,14)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="943.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="917" width="0.1021%" height="15" fill="rgb(249,174,6)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="927.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="47.6515%" y="901" width="0.1021%" height="15" fill="rgb(235,213,41)" fg:x="1400" fg:w="3"/><text x="47.9015%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="47.7195%" y="885" width="0.0340%" height="15" fill="rgb(213,118,6)" fg:x="1402" fg:w="1"/><text x="47.9695%" y="895.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="47.7876%" y="917" width="0.1021%" height="15" fill="rgb(235,44,51)" fg:x="1404" fg:w="3"/><text x="48.0376%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="47.7876%" y="901" width="0.1021%" height="15" fill="rgb(217,9,53)" fg:x="1404" fg:w="3"/><text x="48.0376%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="47.7876%" y="885" width="0.1021%" height="15" fill="rgb(237,172,34)" fg:x="1404" fg:w="3"/><text x="48.0376%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="47.7876%" y="869" width="0.1021%" height="15" fill="rgb(206,206,11)" fg:x="1404" fg:w="3"/><text x="48.0376%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="853" width="0.0681%" height="15" fill="rgb(214,149,29)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="837" width="0.0681%" height="15" fill="rgb(208,123,3)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="847.50"></text></g><g><title>[[nvme]] (2 samples, 0.07%)</title><rect x="47.8216%" y="821" width="0.0681%" height="15" fill="rgb(229,126,4)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="831.50"></text></g><g><title>[[nvme]] (2 samples, 0.07%)</title><rect x="47.8216%" y="805" width="0.0681%" height="15" fill="rgb(222,92,36)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="789" width="0.0681%" height="15" fill="rgb(216,39,41)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="773" width="0.0681%" height="15" fill="rgb(253,127,28)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="757" width="0.0681%" height="15" fill="rgb(249,152,51)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="741" width="0.0681%" height="15" fill="rgb(209,123,42)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="725" width="0.0681%" height="15" fill="rgb(241,118,22)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="47.8216%" y="709" width="0.0681%" height="15" fill="rgb(208,25,7)" fg:x="1405" fg:w="2"/><text x="48.0716%" y="719.50"></text></g><g><title>FlatFileSeq::Flush (5 samples, 0.17%)</title><rect x="47.7536%" y="1157" width="0.1702%" height="15" fill="rgb(243,144,39)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1167.50"></text></g><g><title>FileCommit (5 samples, 0.17%)</title><rect x="47.7536%" y="1141" width="0.1702%" height="15" fill="rgb(250,50,5)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1151.50"></text></g><g><title>fdatasync (5 samples, 0.17%)</title><rect x="47.7536%" y="1125" width="0.1702%" height="15" fill="rgb(207,67,11)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="47.7536%" y="1109" width="0.1702%" height="15" fill="rgb(245,204,40)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="47.7536%" y="1093" width="0.1702%" height="15" fill="rgb(238,228,24)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="47.7536%" y="1077" width="0.1702%" height="15" fill="rgb(217,116,22)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1087.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="47.7536%" y="1061" width="0.1702%" height="15" fill="rgb(234,98,12)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="47.7536%" y="1045" width="0.1702%" height="15" fill="rgb(242,170,50)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="47.7536%" y="1029" width="0.1702%" height="15" fill="rgb(235,7,5)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="47.7536%" y="1013" width="0.1702%" height="15" fill="rgb(241,114,28)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="47.7536%" y="997" width="0.1702%" height="15" fill="rgb(246,112,42)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="1007.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="47.7536%" y="981" width="0.1702%" height="15" fill="rgb(248,228,14)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="991.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="47.7536%" y="965" width="0.1702%" height="15" fill="rgb(208,133,18)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="975.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="47.7536%" y="949" width="0.1702%" height="15" fill="rgb(207,35,49)" fg:x="1403" fg:w="5"/><text x="48.0036%" y="959.50"></text></g><g><title>[[ext4]] (4 samples, 0.14%)</title><rect x="47.7876%" y="933" width="0.1361%" height="15" fill="rgb(205,68,36)" fg:x="1404" fg:w="4"/><text x="48.0376%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.8897%" y="917" width="0.0340%" height="15" fill="rgb(245,62,40)" fg:x="1407" fg:w="1"/><text x="48.1397%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.8897%" y="901" width="0.0340%" height="15" fill="rgb(228,27,24)" fg:x="1407" fg:w="1"/><text x="48.1397%" y="911.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (6 samples, 0.20%)</title><rect x="47.7536%" y="1189" width="0.2042%" height="15" fill="rgb(253,19,12)" fg:x="1403" fg:w="6"/><text x="48.0036%" y="1199.50"></text></g><g><title>node::BlockManager::FlushBlockFile (6 samples, 0.20%)</title><rect x="47.7536%" y="1173" width="0.2042%" height="15" fill="rgb(232,28,20)" fg:x="1403" fg:w="6"/><text x="48.0036%" y="1183.50"></text></g><g><title>node::BlockManager::FlushUndoFile (1 samples, 0.03%)</title><rect x="47.9238%" y="1157" width="0.0340%" height="15" fill="rgb(218,35,51)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1167.50"></text></g><g><title>FlatFileSeq::Flush (1 samples, 0.03%)</title><rect x="47.9238%" y="1141" width="0.0340%" height="15" fill="rgb(212,90,40)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1151.50"></text></g><g><title>FileCommit (1 samples, 0.03%)</title><rect x="47.9238%" y="1125" width="0.0340%" height="15" fill="rgb(220,172,12)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1135.50"></text></g><g><title>fdatasync (1 samples, 0.03%)</title><rect x="47.9238%" y="1109" width="0.0340%" height="15" fill="rgb(226,159,20)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="1093" width="0.0340%" height="15" fill="rgb(234,205,16)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="1077" width="0.0340%" height="15" fill="rgb(207,9,39)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="1061" width="0.0340%" height="15" fill="rgb(249,143,15)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.9238%" y="1045" width="0.0340%" height="15" fill="rgb(253,133,29)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="1029" width="0.0340%" height="15" fill="rgb(221,187,0)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="1013" width="0.0340%" height="15" fill="rgb(205,204,26)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="997" width="0.0340%" height="15" fill="rgb(224,68,54)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="981" width="0.0340%" height="15" fill="rgb(209,67,4)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="991.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.9238%" y="965" width="0.0340%" height="15" fill="rgb(228,229,18)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="975.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.9238%" y="949" width="0.0340%" height="15" fill="rgb(231,89,13)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="959.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="47.9238%" y="933" width="0.0340%" height="15" fill="rgb(210,182,18)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.9238%" y="917" width="0.0340%" height="15" fill="rgb(240,105,2)" fg:x="1408" fg:w="1"/><text x="48.1738%" y="927.50"></text></g><g><title>AutoFile::write (4 samples, 0.14%)</title><rect x="47.9578%" y="1045" width="0.1361%" height="15" fill="rgb(207,170,50)" fg:x="1409" fg:w="4"/><text x="48.2078%" y="1055.50"></text></g><g><title>util::Xor (4 samples, 0.14%)</title><rect x="47.9578%" y="1029" width="0.1361%" height="15" fill="rgb(232,133,24)" fg:x="1409" fg:w="4"/><text x="48.2078%" y="1039.50"></text></g><g><title>std::operator^= (2 samples, 0.07%)</title><rect x="48.0259%" y="1013" width="0.0681%" height="15" fill="rgb(235,166,27)" fg:x="1411" fg:w="2"/><text x="48.2759%" y="1023.50"></text></g><g><title>std::operator^ (2 samples, 0.07%)</title><rect x="48.0259%" y="997" width="0.0681%" height="15" fill="rgb(209,19,13)" fg:x="1411" fg:w="2"/><text x="48.2759%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader&gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="1029" width="0.0340%" height="15" fill="rgb(226,79,39)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="1039.50"></text></g><g><title>void CBlockHeader::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="1013" width="0.0340%" height="15" fill="rgb(222,163,10)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="1023.50"></text></g><g><title>void CBlockHeader::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="997" width="0.0340%" height="15" fill="rgb(214,44,19)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="1007.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="981" width="0.0340%" height="15" fill="rgb(210,217,13)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="965" width="0.0340%" height="15" fill="rgb(237,61,54)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="975.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="949" width="0.0340%" height="15" fill="rgb(226,184,24)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, uint256&gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="933" width="0.0340%" height="15" fill="rgb(223,226,4)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="943.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="917" width="0.0340%" height="15" fill="rgb(210,26,41)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="927.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.03%)</title><rect x="48.0939%" y="901" width="0.0340%" height="15" fill="rgb(220,221,6)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (1 samples, 0.03%)</title><rect x="48.0939%" y="885" width="0.0340%" height="15" fill="rgb(225,89,49)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="48.0939%" y="869" width="0.0340%" height="15" fill="rgb(218,70,45)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="879.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="48.0939%" y="853" width="0.0340%" height="15" fill="rgb(238,166,21)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="863.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="48.0939%" y="837" width="0.0340%" height="15" fill="rgb(224,141,44)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.0939%" y="821" width="0.0340%" height="15" fill="rgb(230,12,49)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="831.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.0939%" y="805" width="0.0340%" height="15" fill="rgb(212,174,12)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="815.50"></text></g><g><title>new_do_write (1 samples, 0.03%)</title><rect x="48.0939%" y="789" width="0.0340%" height="15" fill="rgb(246,67,9)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.0939%" y="773" width="0.0340%" height="15" fill="rgb(239,35,23)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="783.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="48.0939%" y="757" width="0.0340%" height="15" fill="rgb(211,167,0)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.0939%" y="741" width="0.0340%" height="15" fill="rgb(225,119,45)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.0939%" y="725" width="0.0340%" height="15" fill="rgb(210,162,6)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.0939%" y="709" width="0.0340%" height="15" fill="rgb(208,118,35)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.0939%" y="693" width="0.0340%" height="15" fill="rgb(239,4,53)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="703.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.0939%" y="677" width="0.0340%" height="15" fill="rgb(213,130,21)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.0939%" y="661" width="0.0340%" height="15" fill="rgb(235,148,0)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.0939%" y="645" width="0.0340%" height="15" fill="rgb(244,224,18)" fg:x="1413" fg:w="1"/><text x="48.3439%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.1280%" y="597" width="0.0340%" height="15" fill="rgb(211,214,4)" fg:x="1414" fg:w="1"/><text x="48.3780%" y="607.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.1280%" y="581" width="0.0340%" height="15" fill="rgb(206,119,25)" fg:x="1414" fg:w="1"/><text x="48.3780%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="48.1280%" y="565" width="0.0340%" height="15" fill="rgb(243,93,47)" fg:x="1414" fg:w="1"/><text x="48.3780%" y="575.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="48.1280%" y="549" width="0.0340%" height="15" fill="rgb(224,194,6)" fg:x="1414" fg:w="1"/><text x="48.3780%" y="559.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="48.1280%" y="533" width="0.0340%" height="15" fill="rgb(243,229,6)" fg:x="1414" fg:w="1"/><text x="48.3780%" y="543.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.2301%" y="277" width="0.0340%" height="15" fill="rgb(207,23,50)" fg:x="1417" fg:w="1"/><text x="48.4801%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2301%" y="261" width="0.0340%" height="15" fill="rgb(253,192,32)" fg:x="1417" fg:w="1"/><text x="48.4801%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2301%" y="245" width="0.0340%" height="15" fill="rgb(213,21,6)" fg:x="1417" fg:w="1"/><text x="48.4801%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2301%" y="229" width="0.0340%" height="15" fill="rgb(243,151,13)" fg:x="1417" fg:w="1"/><text x="48.4801%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2301%" y="213" width="0.0340%" height="15" fill="rgb(233,165,41)" fg:x="1417" fg:w="1"/><text x="48.4801%" y="223.50"></text></g><g><title>_IO_fwrite (3 samples, 0.10%)</title><rect x="48.1961%" y="485" width="0.1021%" height="15" fill="rgb(246,176,45)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="495.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="48.1961%" y="469" width="0.1021%" height="15" fill="rgb(217,170,52)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="479.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="48.1961%" y="453" width="0.1021%" height="15" fill="rgb(214,203,54)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="463.50"></text></g><g><title>new_do_write (3 samples, 0.10%)</title><rect x="48.1961%" y="437" width="0.1021%" height="15" fill="rgb(248,215,49)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="447.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="48.1961%" y="421" width="0.1021%" height="15" fill="rgb(208,46,10)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="431.50"></text></g><g><title>__GI___libc_write (3 samples, 0.10%)</title><rect x="48.1961%" y="405" width="0.1021%" height="15" fill="rgb(254,5,31)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.1961%" y="389" width="0.1021%" height="15" fill="rgb(222,104,33)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.1961%" y="373" width="0.1021%" height="15" fill="rgb(248,49,16)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.1961%" y="357" width="0.1021%" height="15" fill="rgb(232,198,41)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.1961%" y="341" width="0.1021%" height="15" fill="rgb(214,125,3)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="351.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="48.1961%" y="325" width="0.1021%" height="15" fill="rgb(229,220,28)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.1961%" y="309" width="0.1021%" height="15" fill="rgb(222,64,37)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="319.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="48.1961%" y="293" width="0.1021%" height="15" fill="rgb(249,184,13)" fg:x="1416" fg:w="3"/><text x="48.4461%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2641%" y="277" width="0.0340%" height="15" fill="rgb(252,176,6)" fg:x="1418" fg:w="1"/><text x="48.5141%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2641%" y="261" width="0.0340%" height="15" fill="rgb(228,153,7)" fg:x="1418" fg:w="1"/><text x="48.5141%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2641%" y="245" width="0.0340%" height="15" fill="rgb(242,193,5)" fg:x="1418" fg:w="1"/><text x="48.5141%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.2641%" y="229" width="0.0340%" height="15" fill="rgb(232,140,9)" fg:x="1418" fg:w="1"/><text x="48.5141%" y="239.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.2982%" y="485" width="0.0340%" height="15" fill="rgb(213,222,16)" fg:x="1419" fg:w="1"/><text x="48.5482%" y="495.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.2982%" y="469" width="0.0340%" height="15" fill="rgb(222,75,50)" fg:x="1419" fg:w="1"/><text x="48.5482%" y="479.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.2982%" y="453" width="0.0340%" height="15" fill="rgb(205,180,2)" fg:x="1419" fg:w="1"/><text x="48.5482%" y="463.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.2982%" y="437" width="0.0340%" height="15" fill="rgb(216,34,7)" fg:x="1419" fg:w="1"/><text x="48.5482%" y="447.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.03%)</title><rect x="48.2982%" y="421" width="0.0340%" height="15" fill="rgb(253,16,32)" fg:x="1419" fg:w="1"/><text x="48.5482%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (7 samples, 0.24%)</title><rect x="48.1280%" y="693" width="0.2383%" height="15" fill="rgb(208,97,28)" fg:x="1414" fg:w="7"/><text x="48.3780%" y="703.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.24%)</title><rect x="48.1280%" y="677" width="0.2383%" height="15" fill="rgb(225,92,11)" fg:x="1414" fg:w="7"/><text x="48.3780%" y="687.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.24%)</title><rect x="48.1280%" y="661" width="0.2383%" height="15" fill="rgb(243,38,12)" fg:x="1414" fg:w="7"/><text x="48.3780%" y="671.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (7 samples, 0.24%)</title><rect x="48.1280%" y="645" width="0.2383%" height="15" fill="rgb(208,139,16)" fg:x="1414" fg:w="7"/><text x="48.3780%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (7 samples, 0.24%)</title><rect x="48.1280%" y="629" width="0.2383%" height="15" fill="rgb(227,24,9)" fg:x="1414" fg:w="7"/><text x="48.3780%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (7 samples, 0.24%)</title><rect x="48.1280%" y="613" width="0.2383%" height="15" fill="rgb(206,62,11)" fg:x="1414" fg:w="7"/><text x="48.3780%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (6 samples, 0.20%)</title><rect x="48.1620%" y="597" width="0.2042%" height="15" fill="rgb(228,134,27)" fg:x="1415" fg:w="6"/><text x="48.4120%" y="607.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="48.1620%" y="581" width="0.2042%" height="15" fill="rgb(205,55,33)" fg:x="1415" fg:w="6"/><text x="48.4120%" y="591.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="48.1620%" y="565" width="0.2042%" height="15" fill="rgb(243,75,43)" fg:x="1415" fg:w="6"/><text x="48.4120%" y="575.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (6 samples, 0.20%)</title><rect x="48.1620%" y="549" width="0.2042%" height="15" fill="rgb(223,27,42)" fg:x="1415" fg:w="6"/><text x="48.4120%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (6 samples, 0.20%)</title><rect x="48.1620%" y="533" width="0.2042%" height="15" fill="rgb(232,189,33)" fg:x="1415" fg:w="6"/><text x="48.4120%" y="543.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (6 samples, 0.20%)</title><rect x="48.1620%" y="517" width="0.2042%" height="15" fill="rgb(210,9,39)" fg:x="1415" fg:w="6"/><text x="48.4120%" y="527.50"></text></g><g><title>AutoFile::write (6 samples, 0.20%)</title><rect x="48.1620%" y="501" width="0.2042%" height="15" fill="rgb(242,85,26)" fg:x="1415" fg:w="6"/><text x="48.4120%" y="511.50"></text></g><g><title>util::Xor (1 samples, 0.03%)</title><rect x="48.3322%" y="485" width="0.0340%" height="15" fill="rgb(248,44,4)" fg:x="1420" fg:w="1"/><text x="48.5822%" y="495.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (8 samples, 0.27%)</title><rect x="48.1280%" y="885" width="0.2723%" height="15" fill="rgb(250,96,46)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="869" width="0.2723%" height="15" fill="rgb(229,116,26)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="853" width="0.2723%" height="15" fill="rgb(246,94,34)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="837" width="0.2723%" height="15" fill="rgb(251,73,21)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="821" width="0.2723%" height="15" fill="rgb(254,121,25)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="805" width="0.2723%" height="15" fill="rgb(215,161,49)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="789" width="0.2723%" height="15" fill="rgb(221,43,13)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="799.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="773" width="0.2723%" height="15" fill="rgb(249,5,37)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="783.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="757" width="0.2723%" height="15" fill="rgb(226,25,44)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="767.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="741" width="0.2723%" height="15" fill="rgb(238,189,16)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="725" width="0.2723%" height="15" fill="rgb(251,186,8)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (8 samples, 0.27%)</title><rect x="48.1280%" y="709" width="0.2723%" height="15" fill="rgb(254,34,31)" fg:x="1414" fg:w="8"/><text x="48.3780%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="693" width="0.0340%" height="15" fill="rgb(225,215,27)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="703.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="677" width="0.0340%" height="15" fill="rgb(221,192,48)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="687.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="661" width="0.0340%" height="15" fill="rgb(219,137,20)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="671.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="645" width="0.0340%" height="15" fill="rgb(219,84,11)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="629" width="0.0340%" height="15" fill="rgb(224,10,23)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="613" width="0.0340%" height="15" fill="rgb(248,22,39)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="597" width="0.0340%" height="15" fill="rgb(212,154,20)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="607.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="581" width="0.0340%" height="15" fill="rgb(236,199,50)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="591.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.3662%" y="565" width="0.0340%" height="15" fill="rgb(211,9,17)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="575.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="48.3662%" y="549" width="0.0340%" height="15" fill="rgb(243,216,36)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="559.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="48.3662%" y="533" width="0.0340%" height="15" fill="rgb(250,2,10)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="543.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="48.3662%" y="517" width="0.0340%" height="15" fill="rgb(226,50,48)" fg:x="1421" fg:w="1"/><text x="48.6162%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.4003%" y="693" width="0.0340%" height="15" fill="rgb(243,81,16)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="703.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="48.4003%" y="677" width="0.0340%" height="15" fill="rgb(250,14,2)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="48.4003%" y="661" width="0.0340%" height="15" fill="rgb(233,135,29)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="671.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="48.4003%" y="645" width="0.0340%" height="15" fill="rgb(224,64,43)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="655.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="48.4003%" y="629" width="0.0340%" height="15" fill="rgb(238,84,13)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.4003%" y="613" width="0.0340%" height="15" fill="rgb(253,48,26)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="623.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.4003%" y="597" width="0.0340%" height="15" fill="rgb(205,223,31)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="607.50"></text></g><g><title>new_do_write (1 samples, 0.03%)</title><rect x="48.4003%" y="581" width="0.0340%" height="15" fill="rgb(221,41,32)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.4003%" y="565" width="0.0340%" height="15" fill="rgb(213,158,31)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="575.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="48.4003%" y="549" width="0.0340%" height="15" fill="rgb(245,126,43)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.4003%" y="533" width="0.0340%" height="15" fill="rgb(227,7,22)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.4003%" y="517" width="0.0340%" height="15" fill="rgb(252,90,44)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.4003%" y="501" width="0.0340%" height="15" fill="rgb(253,91,0)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.4003%" y="485" width="0.0340%" height="15" fill="rgb(252,175,49)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="495.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.4003%" y="469" width="0.0340%" height="15" fill="rgb(246,150,1)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.4003%" y="453" width="0.0340%" height="15" fill="rgb(241,192,25)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="463.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.4003%" y="437" width="0.0340%" height="15" fill="rgb(239,187,11)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="447.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.4003%" y="421" width="0.0340%" height="15" fill="rgb(218,202,51)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="431.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.4003%" y="405" width="0.0340%" height="15" fill="rgb(225,176,8)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="415.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.4003%" y="389" width="0.0340%" height="15" fill="rgb(219,122,41)" fg:x="1422" fg:w="1"/><text x="48.6503%" y="399.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="48.4343%" y="581" width="0.0340%" height="15" fill="rgb(248,140,20)" fg:x="1423" fg:w="1"/><text x="48.6843%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.4343%" y="565" width="0.0340%" height="15" fill="rgb(245,41,37)" fg:x="1423" fg:w="1"/><text x="48.6843%" y="575.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="48.5705%" y="341" width="0.1021%" height="15" fill="rgb(235,82,39)" fg:x="1427" fg:w="3"/><text x="48.8205%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="48.6045%" y="325" width="0.0681%" height="15" fill="rgb(230,108,42)" fg:x="1428" fg:w="2"/><text x="48.8545%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.6385%" y="309" width="0.0340%" height="15" fill="rgb(215,150,50)" fg:x="1429" fg:w="1"/><text x="48.8885%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.6385%" y="293" width="0.0340%" height="15" fill="rgb(233,212,5)" fg:x="1429" fg:w="1"/><text x="48.8885%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.6385%" y="277" width="0.0340%" height="15" fill="rgb(245,80,22)" fg:x="1429" fg:w="1"/><text x="48.8885%" y="287.50"></text></g><g><title>[[ext4]] (7 samples, 0.24%)</title><rect x="48.5705%" y="357" width="0.2383%" height="15" fill="rgb(238,129,16)" fg:x="1427" fg:w="7"/><text x="48.8205%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="48.6726%" y="341" width="0.1361%" height="15" fill="rgb(240,19,0)" fg:x="1430" fg:w="4"/><text x="48.9226%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="48.6726%" y="325" width="0.1361%" height="15" fill="rgb(232,42,35)" fg:x="1430" fg:w="4"/><text x="48.9226%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="48.6726%" y="309" width="0.1361%" height="15" fill="rgb(223,130,24)" fg:x="1430" fg:w="4"/><text x="48.9226%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="48.6726%" y="293" width="0.1361%" height="15" fill="rgb(237,16,22)" fg:x="1430" fg:w="4"/><text x="48.9226%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.7066%" y="277" width="0.1021%" height="15" fill="rgb(248,192,20)" fg:x="1431" fg:w="3"/><text x="48.9566%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.7747%" y="261" width="0.0340%" height="15" fill="rgb(233,167,2)" fg:x="1433" fg:w="1"/><text x="49.0247%" y="271.50"></text></g><g><title>_IO_fwrite (13 samples, 0.44%)</title><rect x="48.4683%" y="549" width="0.4425%" height="15" fill="rgb(252,71,44)" fg:x="1424" fg:w="13"/><text x="48.7183%" y="559.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (12 samples, 0.41%)</title><rect x="48.5024%" y="533" width="0.4084%" height="15" fill="rgb(238,37,47)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="543.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (12 samples, 0.41%)</title><rect x="48.5024%" y="517" width="0.4084%" height="15" fill="rgb(214,202,54)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="527.50"></text></g><g><title>new_do_write (12 samples, 0.41%)</title><rect x="48.5024%" y="501" width="0.4084%" height="15" fill="rgb(254,165,40)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="511.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (12 samples, 0.41%)</title><rect x="48.5024%" y="485" width="0.4084%" height="15" fill="rgb(246,173,38)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="495.50"></text></g><g><title>__GI___libc_write (12 samples, 0.41%)</title><rect x="48.5024%" y="469" width="0.4084%" height="15" fill="rgb(215,3,27)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="479.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="48.5024%" y="453" width="0.4084%" height="15" fill="rgb(239,169,51)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="463.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="48.5024%" y="437" width="0.4084%" height="15" fill="rgb(212,5,25)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="447.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="48.5024%" y="421" width="0.4084%" height="15" fill="rgb(243,45,17)" fg:x="1425" fg:w="12"/><text x="48.7524%" y="431.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="48.5364%" y="405" width="0.3744%" height="15" fill="rgb(242,97,9)" fg:x="1426" fg:w="11"/><text x="48.7864%" y="415.50"></text></g><g><title>[[ext4]] (10 samples, 0.34%)</title><rect x="48.5705%" y="389" width="0.3404%" height="15" fill="rgb(228,71,31)" fg:x="1427" fg:w="10"/><text x="48.8205%" y="399.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="48.5705%" y="373" width="0.3404%" height="15" fill="rgb(252,184,16)" fg:x="1427" fg:w="10"/><text x="48.8205%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.8087%" y="357" width="0.1021%" height="15" fill="rgb(236,169,46)" fg:x="1434" fg:w="3"/><text x="49.0587%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="48.8087%" y="341" width="0.1021%" height="15" fill="rgb(207,17,47)" fg:x="1434" fg:w="3"/><text x="49.0587%" y="351.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.8768%" y="325" width="0.0340%" height="15" fill="rgb(206,201,28)" fg:x="1436" fg:w="1"/><text x="49.1268%" y="335.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.8768%" y="309" width="0.0340%" height="15" fill="rgb(224,184,23)" fg:x="1436" fg:w="1"/><text x="49.1268%" y="319.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.8768%" y="293" width="0.0340%" height="15" fill="rgb(208,139,48)" fg:x="1436" fg:w="1"/><text x="49.1268%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.8768%" y="277" width="0.0340%" height="15" fill="rgb(208,130,10)" fg:x="1436" fg:w="1"/><text x="49.1268%" y="287.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (14 samples, 0.48%)</title><rect x="48.4683%" y="581" width="0.4765%" height="15" fill="rgb(211,213,45)" fg:x="1424" fg:w="14"/><text x="48.7183%" y="591.50"></text></g><g><title>AutoFile::write (14 samples, 0.48%)</title><rect x="48.4683%" y="565" width="0.4765%" height="15" fill="rgb(235,100,30)" fg:x="1424" fg:w="14"/><text x="48.7183%" y="575.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.9108%" y="549" width="0.0340%" height="15" fill="rgb(206,144,31)" fg:x="1437" fg:w="1"/><text x="49.1608%" y="559.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.9108%" y="533" width="0.0340%" height="15" fill="rgb(224,200,26)" fg:x="1437" fg:w="1"/><text x="49.1608%" y="543.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.9108%" y="517" width="0.0340%" height="15" fill="rgb(247,104,53)" fg:x="1437" fg:w="1"/><text x="49.1608%" y="527.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.03%)</title><rect x="48.9108%" y="501" width="0.0340%" height="15" fill="rgb(220,14,17)" fg:x="1437" fg:w="1"/><text x="49.1608%" y="511.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.03%)</title><rect x="48.9108%" y="485" width="0.0340%" height="15" fill="rgb(230,140,40)" fg:x="1437" fg:w="1"/><text x="49.1608%" y="495.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (18 samples, 0.61%)</title><rect x="48.4003%" y="885" width="0.6127%" height="15" fill="rgb(229,2,41)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="869" width="0.6127%" height="15" fill="rgb(232,89,16)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="853" width="0.6127%" height="15" fill="rgb(247,59,52)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="837" width="0.6127%" height="15" fill="rgb(226,110,21)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="821" width="0.6127%" height="15" fill="rgb(224,176,43)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="805" width="0.6127%" height="15" fill="rgb(221,73,6)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="789" width="0.6127%" height="15" fill="rgb(232,78,19)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="799.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="773" width="0.6127%" height="15" fill="rgb(233,112,48)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="783.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="757" width="0.6127%" height="15" fill="rgb(243,131,47)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="767.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="741" width="0.6127%" height="15" fill="rgb(226,51,1)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="725" width="0.6127%" height="15" fill="rgb(247,58,7)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (18 samples, 0.61%)</title><rect x="48.4003%" y="709" width="0.6127%" height="15" fill="rgb(209,7,32)" fg:x="1422" fg:w="18"/><text x="48.6503%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (17 samples, 0.58%)</title><rect x="48.4343%" y="693" width="0.5786%" height="15" fill="rgb(209,39,41)" fg:x="1423" fg:w="17"/><text x="48.6843%" y="703.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.58%)</title><rect x="48.4343%" y="677" width="0.5786%" height="15" fill="rgb(226,182,46)" fg:x="1423" fg:w="17"/><text x="48.6843%" y="687.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (17 samples, 0.58%)</title><rect x="48.4343%" y="661" width="0.5786%" height="15" fill="rgb(230,219,10)" fg:x="1423" fg:w="17"/><text x="48.6843%" y="671.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (17 samples, 0.58%)</title><rect x="48.4343%" y="645" width="0.5786%" height="15" fill="rgb(227,175,30)" fg:x="1423" fg:w="17"/><text x="48.6843%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.58%)</title><rect x="48.4343%" y="629" width="0.5786%" height="15" fill="rgb(217,2,50)" fg:x="1423" fg:w="17"/><text x="48.6843%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (17 samples, 0.58%)</title><rect x="48.4343%" y="613" width="0.5786%" height="15" fill="rgb(229,160,0)" fg:x="1423" fg:w="17"/><text x="48.6843%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (17 samples, 0.58%)</title><rect x="48.4343%" y="597" width="0.5786%" height="15" fill="rgb(207,78,37)" fg:x="1423" fg:w="17"/><text x="48.6843%" y="607.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="48.9449%" y="581" width="0.0681%" height="15" fill="rgb(225,57,0)" fg:x="1438" fg:w="2"/><text x="49.1949%" y="591.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="48.9449%" y="565" width="0.0681%" height="15" fill="rgb(232,154,2)" fg:x="1438" fg:w="2"/><text x="49.1949%" y="575.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.07%)</title><rect x="48.9449%" y="549" width="0.0681%" height="15" fill="rgb(241,212,25)" fg:x="1438" fg:w="2"/><text x="49.1949%" y="559.50"></text></g><g><title>AutoFile::write (2 samples, 0.07%)</title><rect x="48.9449%" y="533" width="0.0681%" height="15" fill="rgb(226,69,20)" fg:x="1438" fg:w="2"/><text x="49.1949%" y="543.50"></text></g><g><title>_IO_fwrite (2 samples, 0.07%)</title><rect x="48.9449%" y="517" width="0.0681%" height="15" fill="rgb(247,184,54)" fg:x="1438" fg:w="2"/><text x="49.1949%" y="527.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.9789%" y="501" width="0.0340%" height="15" fill="rgb(210,145,0)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="511.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.9789%" y="485" width="0.0340%" height="15" fill="rgb(253,82,12)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="495.50"></text></g><g><title>new_do_write (1 samples, 0.03%)</title><rect x="48.9789%" y="469" width="0.0340%" height="15" fill="rgb(245,42,11)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="479.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="48.9789%" y="453" width="0.0340%" height="15" fill="rgb(219,147,32)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="463.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="48.9789%" y="437" width="0.0340%" height="15" fill="rgb(246,12,7)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="421" width="0.0340%" height="15" fill="rgb(243,50,9)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="405" width="0.0340%" height="15" fill="rgb(219,149,6)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="389" width="0.0340%" height="15" fill="rgb(241,51,42)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="373" width="0.0340%" height="15" fill="rgb(226,128,27)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="383.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.9789%" y="357" width="0.0340%" height="15" fill="rgb(244,144,4)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="341" width="0.0340%" height="15" fill="rgb(221,4,13)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="351.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="48.9789%" y="325" width="0.0340%" height="15" fill="rgb(208,170,28)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="309" width="0.0340%" height="15" fill="rgb(226,131,13)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="293" width="0.0340%" height="15" fill="rgb(215,72,41)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="48.9789%" y="277" width="0.0340%" height="15" fill="rgb(243,108,20)" fg:x="1439" fg:w="1"/><text x="49.2289%" y="287.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="49.1150%" y="517" width="0.0340%" height="15" fill="rgb(230,189,17)" fg:x="1443" fg:w="1"/><text x="49.3650%" y="527.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="49.1150%" y="533" width="0.1021%" height="15" fill="rgb(220,50,17)" fg:x="1443" fg:w="3"/><text x="49.3650%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="49.1491%" y="517" width="0.0681%" height="15" fill="rgb(248,152,48)" fg:x="1444" fg:w="2"/><text x="49.3991%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.1831%" y="501" width="0.0340%" height="15" fill="rgb(244,91,11)" fg:x="1445" fg:w="1"/><text x="49.4331%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.1831%" y="485" width="0.0340%" height="15" fill="rgb(220,157,5)" fg:x="1445" fg:w="1"/><text x="49.4331%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.1831%" y="469" width="0.0340%" height="15" fill="rgb(253,137,8)" fg:x="1445" fg:w="1"/><text x="49.4331%" y="479.50"></text></g><g><title>[[ext4]] (17 samples, 0.58%)</title><rect x="49.0810%" y="581" width="0.5786%" height="15" fill="rgb(217,137,51)" fg:x="1442" fg:w="17"/><text x="49.3310%" y="591.50"></text></g><g><title>[unknown] (17 samples, 0.58%)</title><rect x="49.0810%" y="565" width="0.5786%" height="15" fill="rgb(218,209,53)" fg:x="1442" fg:w="17"/><text x="49.3310%" y="575.50"></text></g><g><title>[[ext4]] (17 samples, 0.58%)</title><rect x="49.0810%" y="549" width="0.5786%" height="15" fill="rgb(249,137,25)" fg:x="1442" fg:w="17"/><text x="49.3310%" y="559.50"></text></g><g><title>[unknown] (13 samples, 0.44%)</title><rect x="49.2172%" y="533" width="0.4425%" height="15" fill="rgb(239,155,26)" fg:x="1446" fg:w="13"/><text x="49.4672%" y="543.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="49.2512%" y="517" width="0.4084%" height="15" fill="rgb(227,85,46)" fg:x="1447" fg:w="12"/><text x="49.5012%" y="527.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="49.3193%" y="501" width="0.3404%" height="15" fill="rgb(251,107,43)" fg:x="1449" fg:w="10"/><text x="49.5693%" y="511.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="49.3533%" y="485" width="0.3063%" height="15" fill="rgb(234,170,33)" fg:x="1450" fg:w="9"/><text x="49.6033%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="49.4214%" y="469" width="0.2383%" height="15" fill="rgb(206,29,35)" fg:x="1452" fg:w="7"/><text x="49.6714%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="49.5916%" y="453" width="0.0681%" height="15" fill="rgb(227,138,25)" fg:x="1457" fg:w="2"/><text x="49.8416%" y="463.50"></text></g><g><title>__GI___libc_write (20 samples, 0.68%)</title><rect x="49.0470%" y="661" width="0.6807%" height="15" fill="rgb(249,131,35)" fg:x="1441" fg:w="20"/><text x="49.2970%" y="671.50"></text></g><g><title>[unknown] (20 samples, 0.68%)</title><rect x="49.0470%" y="645" width="0.6807%" height="15" fill="rgb(239,6,40)" fg:x="1441" fg:w="20"/><text x="49.2970%" y="655.50"></text></g><g><title>[unknown] (20 samples, 0.68%)</title><rect x="49.0470%" y="629" width="0.6807%" height="15" fill="rgb(246,136,47)" fg:x="1441" fg:w="20"/><text x="49.2970%" y="639.50"></text></g><g><title>[unknown] (20 samples, 0.68%)</title><rect x="49.0470%" y="613" width="0.6807%" height="15" fill="rgb(253,58,26)" fg:x="1441" fg:w="20"/><text x="49.2970%" y="623.50"></text></g><g><title>[unknown] (20 samples, 0.68%)</title><rect x="49.0470%" y="597" width="0.6807%" height="15" fill="rgb(237,141,10)" fg:x="1441" fg:w="20"/><text x="49.2970%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="49.6596%" y="581" width="0.0681%" height="15" fill="rgb(234,156,12)" fg:x="1459" fg:w="2"/><text x="49.9096%" y="591.50"></text></g><g><title>_IO_fwrite (21 samples, 0.71%)</title><rect x="49.0470%" y="741" width="0.7148%" height="15" fill="rgb(243,224,36)" fg:x="1441" fg:w="21"/><text x="49.2970%" y="751.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (21 samples, 0.71%)</title><rect x="49.0470%" y="725" width="0.7148%" height="15" fill="rgb(205,229,51)" fg:x="1441" fg:w="21"/><text x="49.2970%" y="735.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (21 samples, 0.71%)</title><rect x="49.0470%" y="709" width="0.7148%" height="15" fill="rgb(223,189,4)" fg:x="1441" fg:w="21"/><text x="49.2970%" y="719.50"></text></g><g><title>new_do_write (21 samples, 0.71%)</title><rect x="49.0470%" y="693" width="0.7148%" height="15" fill="rgb(249,167,54)" fg:x="1441" fg:w="21"/><text x="49.2970%" y="703.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (21 samples, 0.71%)</title><rect x="49.0470%" y="677" width="0.7148%" height="15" fill="rgb(218,34,28)" fg:x="1441" fg:w="21"/><text x="49.2970%" y="687.50"></text></g><g><title>new_do_write (1 samples, 0.03%)</title><rect x="49.7277%" y="661" width="0.0340%" height="15" fill="rgb(232,109,42)" fg:x="1461" fg:w="1"/><text x="49.9777%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="49.7277%" y="645" width="0.0340%" height="15" fill="rgb(248,214,46)" fg:x="1461" fg:w="1"/><text x="49.9777%" y="655.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (32 samples, 1.09%)</title><rect x="49.0129%" y="773" width="1.0892%" height="15" fill="rgb(244,216,40)" fg:x="1440" fg:w="32"/><text x="49.2629%" y="783.50"></text></g><g><title>AutoFile::write (32 samples, 1.09%)</title><rect x="49.0129%" y="757" width="1.0892%" height="15" fill="rgb(231,226,31)" fg:x="1440" fg:w="32"/><text x="49.2629%" y="767.50"></text></g><g><title>util::Xor (10 samples, 0.34%)</title><rect x="49.7617%" y="741" width="0.3404%" height="15" fill="rgb(238,38,43)" fg:x="1462" fg:w="10"/><text x="50.0117%" y="751.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (33 samples, 1.12%)</title><rect x="49.0129%" y="805" width="1.1232%" height="15" fill="rgb(208,88,43)" fg:x="1440" fg:w="33"/><text x="49.2629%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (33 samples, 1.12%)</title><rect x="49.0129%" y="789" width="1.1232%" height="15" fill="rgb(205,136,37)" fg:x="1440" fg:w="33"/><text x="49.2629%" y="799.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.1021%" y="773" width="0.0340%" height="15" fill="rgb(237,34,14)" fg:x="1472" fg:w="1"/><text x="50.3521%" y="783.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.1021%" y="757" width="0.0340%" height="15" fill="rgb(236,193,44)" fg:x="1472" fg:w="1"/><text x="50.3521%" y="767.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="50.1021%" y="741" width="0.0340%" height="15" fill="rgb(231,48,10)" fg:x="1472" fg:w="1"/><text x="50.3521%" y="751.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="50.1021%" y="725" width="0.0340%" height="15" fill="rgb(213,141,34)" fg:x="1472" fg:w="1"/><text x="50.3521%" y="735.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="50.1021%" y="709" width="0.0340%" height="15" fill="rgb(249,130,34)" fg:x="1472" fg:w="1"/><text x="50.3521%" y="719.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (34 samples, 1.16%)</title><rect x="49.0129%" y="885" width="1.1572%" height="15" fill="rgb(219,42,41)" fg:x="1440" fg:w="34"/><text x="49.2629%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (34 samples, 1.16%)</title><rect x="49.0129%" y="869" width="1.1572%" height="15" fill="rgb(224,100,54)" fg:x="1440" fg:w="34"/><text x="49.2629%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (34 samples, 1.16%)</title><rect x="49.0129%" y="853" width="1.1572%" height="15" fill="rgb(229,200,27)" fg:x="1440" fg:w="34"/><text x="49.2629%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 1.16%)</title><rect x="49.0129%" y="837" width="1.1572%" height="15" fill="rgb(217,118,10)" fg:x="1440" fg:w="34"/><text x="49.2629%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (34 samples, 1.16%)</title><rect x="49.0129%" y="821" width="1.1572%" height="15" fill="rgb(206,22,3)" fg:x="1440" fg:w="34"/><text x="49.2629%" y="831.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.1361%" y="805" width="0.0340%" height="15" fill="rgb(232,163,46)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="815.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.1361%" y="789" width="0.0340%" height="15" fill="rgb(206,95,13)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="799.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="50.1361%" y="773" width="0.0340%" height="15" fill="rgb(253,154,18)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="783.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="50.1361%" y="757" width="0.0340%" height="15" fill="rgb(219,32,23)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="741" width="0.0340%" height="15" fill="rgb(230,191,45)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="725" width="0.0340%" height="15" fill="rgb(229,64,36)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="709" width="0.0340%" height="15" fill="rgb(205,129,25)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="693" width="0.0340%" height="15" fill="rgb(254,112,7)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="677" width="0.0340%" height="15" fill="rgb(226,53,48)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="661" width="0.0340%" height="15" fill="rgb(214,153,38)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="645" width="0.0340%" height="15" fill="rgb(243,101,7)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="629" width="0.0340%" height="15" fill="rgb(240,140,22)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="613" width="0.0340%" height="15" fill="rgb(235,114,2)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="597" width="0.0340%" height="15" fill="rgb(242,59,12)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="581" width="0.0340%" height="15" fill="rgb(252,134,9)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="565" width="0.0340%" height="15" fill="rgb(236,4,44)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.1361%" y="549" width="0.0340%" height="15" fill="rgb(254,172,41)" fg:x="1473" fg:w="1"/><text x="50.3861%" y="559.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (1 samples, 0.03%)</title><rect x="50.1702%" y="885" width="0.0340%" height="15" fill="rgb(244,63,20)" fg:x="1474" fg:w="1"/><text x="50.4202%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.1702%" y="869" width="0.0340%" height="15" fill="rgb(250,73,31)" fg:x="1474" fg:w="1"/><text x="50.4202%" y="879.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.1702%" y="853" width="0.0340%" height="15" fill="rgb(241,38,36)" fg:x="1474" fg:w="1"/><text x="50.4202%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="50.1702%" y="837" width="0.0340%" height="15" fill="rgb(245,211,2)" fg:x="1474" fg:w="1"/><text x="50.4202%" y="847.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="50.1702%" y="821" width="0.0340%" height="15" fill="rgb(206,120,28)" fg:x="1474" fg:w="1"/><text x="50.4202%" y="831.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="50.1702%" y="805" width="0.0340%" height="15" fill="rgb(211,59,34)" fg:x="1474" fg:w="1"/><text x="50.4202%" y="815.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (67 samples, 2.28%)</title><rect x="47.9578%" y="1173" width="2.2805%" height="15" fill="rgb(233,168,5)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1183.50">A..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (67 samples, 2.28%)</title><rect x="47.9578%" y="1157" width="2.2805%" height="15" fill="rgb(234,33,13)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1167.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (67 samples, 2.28%)</title><rect x="47.9578%" y="1141" width="2.2805%" height="15" fill="rgb(231,150,26)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1151.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (67 samples, 2.28%)</title><rect x="47.9578%" y="1125" width="2.2805%" height="15" fill="rgb(217,191,4)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1135.50">v..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (67 samples, 2.28%)</title><rect x="47.9578%" y="1109" width="2.2805%" height="15" fill="rgb(246,198,38)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1119.50">v..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (67 samples, 2.28%)</title><rect x="47.9578%" y="1093" width="2.2805%" height="15" fill="rgb(245,64,37)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1103.50">v..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (67 samples, 2.28%)</title><rect x="47.9578%" y="1077" width="2.2805%" height="15" fill="rgb(250,30,36)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1087.50">v..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (67 samples, 2.28%)</title><rect x="47.9578%" y="1061" width="2.2805%" height="15" fill="rgb(217,86,53)" fg:x="1409" fg:w="67"/><text x="48.2078%" y="1071.50">v..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (63 samples, 2.14%)</title><rect x="48.0939%" y="1045" width="2.1443%" height="15" fill="rgb(228,157,16)" fg:x="1413" fg:w="63"/><text x="48.3439%" y="1055.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="1029" width="2.1103%" height="15" fill="rgb(217,59,31)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="1039.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="1013" width="2.1103%" height="15" fill="rgb(237,138,41)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="1023.50">v..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="997" width="2.1103%" height="15" fill="rgb(227,91,49)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="1007.50">v..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="981" width="2.1103%" height="15" fill="rgb(247,21,44)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="991.50">v..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="965" width="2.1103%" height="15" fill="rgb(219,210,51)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="975.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="949" width="2.1103%" height="15" fill="rgb(209,140,6)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="959.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="933" width="2.1103%" height="15" fill="rgb(221,188,24)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="943.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="917" width="2.1103%" height="15" fill="rgb(232,154,20)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="927.50">v..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (62 samples, 2.11%)</title><rect x="48.1280%" y="901" width="2.1103%" height="15" fill="rgb(244,137,50)" fg:x="1414" fg:w="62"/><text x="48.3780%" y="911.50">v..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.03%)</title><rect x="50.2042%" y="885" width="0.0340%" height="15" fill="rgb(225,185,43)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.2042%" y="869" width="0.0340%" height="15" fill="rgb(213,205,38)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="879.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="50.2042%" y="853" width="0.0340%" height="15" fill="rgb(236,73,12)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="50.2042%" y="837" width="0.0340%" height="15" fill="rgb(235,219,13)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="847.50"></text></g><g><title>AutoFile::write (1 samples, 0.03%)</title><rect x="50.2042%" y="821" width="0.0340%" height="15" fill="rgb(218,59,36)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="831.50"></text></g><g><title>_IO_fwrite (1 samples, 0.03%)</title><rect x="50.2042%" y="805" width="0.0340%" height="15" fill="rgb(205,110,39)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="815.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="50.2042%" y="789" width="0.0340%" height="15" fill="rgb(218,206,42)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="799.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="50.2042%" y="773" width="0.0340%" height="15" fill="rgb(248,125,24)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="783.50"></text></g><g><title>new_do_write (1 samples, 0.03%)</title><rect x="50.2042%" y="757" width="0.0340%" height="15" fill="rgb(242,28,27)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="767.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="50.2042%" y="741" width="0.0340%" height="15" fill="rgb(216,228,15)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="751.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="50.2042%" y="725" width="0.0340%" height="15" fill="rgb(235,116,46)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2042%" y="709" width="0.0340%" height="15" fill="rgb(224,18,32)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2042%" y="693" width="0.0340%" height="15" fill="rgb(252,5,12)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2042%" y="677" width="0.0340%" height="15" fill="rgb(251,36,5)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2042%" y="661" width="0.0340%" height="15" fill="rgb(217,53,14)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="671.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="50.2042%" y="645" width="0.0340%" height="15" fill="rgb(215,86,45)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2042%" y="629" width="0.0340%" height="15" fill="rgb(242,169,11)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="50.2042%" y="613" width="0.0340%" height="15" fill="rgb(211,213,45)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2042%" y="597" width="0.0340%" height="15" fill="rgb(205,88,11)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2042%" y="581" width="0.0340%" height="15" fill="rgb(252,69,26)" fg:x="1475" fg:w="1"/><text x="50.4542%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="50.2723%" y="1061" width="0.0340%" height="15" fill="rgb(246,123,37)" fg:x="1477" fg:w="1"/><text x="50.5223%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.2723%" y="1045" width="0.0340%" height="15" fill="rgb(212,205,5)" fg:x="1477" fg:w="1"/><text x="50.5223%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="50.3063%" y="917" width="0.0340%" height="15" fill="rgb(253,148,0)" fg:x="1478" fg:w="1"/><text x="50.5563%" y="927.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="50.3063%" y="901" width="0.0340%" height="15" fill="rgb(239,22,4)" fg:x="1478" fg:w="1"/><text x="50.5563%" y="911.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="50.3063%" y="933" width="0.1021%" height="15" fill="rgb(226,26,53)" fg:x="1478" fg:w="3"/><text x="50.5563%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.3404%" y="917" width="0.0681%" height="15" fill="rgb(225,229,45)" fg:x="1479" fg:w="2"/><text x="50.5904%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.3404%" y="901" width="0.0681%" height="15" fill="rgb(220,60,37)" fg:x="1479" fg:w="2"/><text x="50.5904%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.3404%" y="885" width="0.0681%" height="15" fill="rgb(217,180,35)" fg:x="1479" fg:w="2"/><text x="50.5904%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.3404%" y="869" width="0.0681%" height="15" fill="rgb(229,7,53)" fg:x="1479" fg:w="2"/><text x="50.5904%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.3744%" y="853" width="0.0340%" height="15" fill="rgb(254,137,3)" fg:x="1480" fg:w="1"/><text x="50.6244%" y="863.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (6 samples, 0.20%)</title><rect x="50.2723%" y="1109" width="0.2042%" height="15" fill="rgb(215,140,41)" fg:x="1477" fg:w="6"/><text x="50.5223%" y="1119.50"></text></g><g><title>new_do_write (6 samples, 0.20%)</title><rect x="50.2723%" y="1093" width="0.2042%" height="15" fill="rgb(250,80,15)" fg:x="1477" fg:w="6"/><text x="50.5223%" y="1103.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (6 samples, 0.20%)</title><rect x="50.2723%" y="1077" width="0.2042%" height="15" fill="rgb(252,191,6)" fg:x="1477" fg:w="6"/><text x="50.5223%" y="1087.50"></text></g><g><title>__GI___libc_write (5 samples, 0.17%)</title><rect x="50.3063%" y="1061" width="0.1702%" height="15" fill="rgb(246,217,18)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="50.3063%" y="1045" width="0.1702%" height="15" fill="rgb(223,93,7)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="50.3063%" y="1029" width="0.1702%" height="15" fill="rgb(225,55,52)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="50.3063%" y="1013" width="0.1702%" height="15" fill="rgb(240,31,24)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="50.3063%" y="997" width="0.1702%" height="15" fill="rgb(205,56,52)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="1007.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="50.3063%" y="981" width="0.1702%" height="15" fill="rgb(246,146,12)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="50.3063%" y="965" width="0.1702%" height="15" fill="rgb(239,84,36)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="975.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="50.3063%" y="949" width="0.1702%" height="15" fill="rgb(207,41,40)" fg:x="1478" fg:w="5"/><text x="50.5563%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.4084%" y="933" width="0.0681%" height="15" fill="rgb(241,179,25)" fg:x="1481" fg:w="2"/><text x="50.6584%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.4084%" y="917" width="0.0681%" height="15" fill="rgb(210,0,34)" fg:x="1481" fg:w="2"/><text x="50.6584%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.4084%" y="901" width="0.0681%" height="15" fill="rgb(225,217,29)" fg:x="1481" fg:w="2"/><text x="50.6584%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.4084%" y="885" width="0.0681%" height="15" fill="rgb(216,191,38)" fg:x="1481" fg:w="2"/><text x="50.6584%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.4425%" y="869" width="0.0340%" height="15" fill="rgb(232,140,52)" fg:x="1482" fg:w="1"/><text x="50.6925%" y="879.50"></text></g><g><title>_IO_setb (1 samples, 0.03%)</title><rect x="50.4765%" y="1109" width="0.0340%" height="15" fill="rgb(223,158,51)" fg:x="1483" fg:w="1"/><text x="50.7265%" y="1119.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="50.4765%" y="1093" width="0.0340%" height="15" fill="rgb(235,29,51)" fg:x="1483" fg:w="1"/><text x="50.7265%" y="1103.50"></text></g><g><title>AutoFile::~AutoFile (10 samples, 0.34%)</title><rect x="50.2383%" y="1173" width="0.3404%" height="15" fill="rgb(215,181,18)" fg:x="1476" fg:w="10"/><text x="50.4883%" y="1183.50"></text></g><g><title>AutoFile::fclose (10 samples, 0.34%)</title><rect x="50.2383%" y="1157" width="0.3404%" height="15" fill="rgb(227,125,34)" fg:x="1476" fg:w="10"/><text x="50.4883%" y="1167.50"></text></g><g><title>fclose@@GLIBC_2.2.5 (10 samples, 0.34%)</title><rect x="50.2383%" y="1141" width="0.3404%" height="15" fill="rgb(230,197,49)" fg:x="1476" fg:w="10"/><text x="50.4883%" y="1151.50"></text></g><g><title>_IO_file_close_it@@GLIBC_2.2.5 (10 samples, 0.34%)</title><rect x="50.2383%" y="1125" width="0.3404%" height="15" fill="rgb(239,141,16)" fg:x="1476" fg:w="10"/><text x="50.4883%" y="1135.50"></text></g><g><title>__close_nocancel (2 samples, 0.07%)</title><rect x="50.5106%" y="1109" width="0.0681%" height="15" fill="rgb(225,105,43)" fg:x="1484" fg:w="2"/><text x="50.7606%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.5106%" y="1093" width="0.0681%" height="15" fill="rgb(214,131,14)" fg:x="1484" fg:w="2"/><text x="50.7606%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.5106%" y="1077" width="0.0681%" height="15" fill="rgb(229,177,11)" fg:x="1484" fg:w="2"/><text x="50.7606%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.5106%" y="1061" width="0.0681%" height="15" fill="rgb(231,180,14)" fg:x="1484" fg:w="2"/><text x="50.7606%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.5106%" y="1045" width="0.0681%" height="15" fill="rgb(232,88,2)" fg:x="1484" fg:w="2"/><text x="50.7606%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.5106%" y="1029" width="0.0681%" height="15" fill="rgb(205,220,8)" fg:x="1484" fg:w="2"/><text x="50.7606%" y="1039.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.03%)</title><rect x="50.5786%" y="1109" width="0.0340%" height="15" fill="rgb(225,23,53)" fg:x="1486" fg:w="1"/><text x="50.8286%" y="1119.50"></text></g><g><title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream (1 samples, 0.03%)</title><rect x="50.5786%" y="1093" width="0.0340%" height="15" fill="rgb(213,62,29)" fg:x="1486" fg:w="1"/><text x="50.8286%" y="1103.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.03%)</title><rect x="50.5786%" y="1077" width="0.0340%" height="15" fill="rgb(227,75,7)" fg:x="1486" fg:w="1"/><text x="50.8286%" y="1087.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.03%)</title><rect x="50.5786%" y="1061" width="0.0340%" height="15" fill="rgb(207,105,14)" fg:x="1486" fg:w="1"/><text x="50.8286%" y="1071.50"></text></g><g><title>std::locale::operator= (1 samples, 0.03%)</title><rect x="50.5786%" y="1045" width="0.0340%" height="15" fill="rgb(245,62,29)" fg:x="1486" fg:w="1"/><text x="50.8286%" y="1055.50"></text></g><g><title>FlatFileSeq::FileName (2 samples, 0.07%)</title><rect x="50.5786%" y="1141" width="0.0681%" height="15" fill="rgb(236,202,4)" fg:x="1486" fg:w="2"/><text x="50.8286%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, int&gt; (2 samples, 0.07%)</title><rect x="50.5786%" y="1125" width="0.0681%" height="15" fill="rgb(250,67,1)" fg:x="1486" fg:w="2"/><text x="50.8286%" y="1135.50"></text></g><g><title>void tinyformat::format&lt;char const*, int&gt; (1 samples, 0.03%)</title><rect x="50.6127%" y="1109" width="0.0340%" height="15" fill="rgb(253,115,44)" fg:x="1487" fg:w="1"/><text x="50.8627%" y="1119.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="50.6127%" y="1093" width="0.0340%" height="15" fill="rgb(251,139,18)" fg:x="1487" fg:w="1"/><text x="50.8627%" y="1103.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (1 samples, 0.03%)</title><rect x="50.6127%" y="1077" width="0.0340%" height="15" fill="rgb(218,22,32)" fg:x="1487" fg:w="1"/><text x="50.8627%" y="1087.50"></text></g><g><title>FlatFileSeq::Open (6 samples, 0.20%)</title><rect x="50.6467%" y="1141" width="0.2042%" height="15" fill="rgb(243,53,5)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1151.50"></text></g><g><title>std::filesystem::create_directories (6 samples, 0.20%)</title><rect x="50.6467%" y="1125" width="0.2042%" height="15" fill="rgb(227,56,16)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1135.50"></text></g><g><title>std::filesystem::create_directories (6 samples, 0.20%)</title><rect x="50.6467%" y="1109" width="0.2042%" height="15" fill="rgb(245,53,0)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1119.50"></text></g><g><title>std::filesystem::status (6 samples, 0.20%)</title><rect x="50.6467%" y="1093" width="0.2042%" height="15" fill="rgb(216,170,35)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1103.50"></text></g><g><title>__GI___fstatat64 (6 samples, 0.20%)</title><rect x="50.6467%" y="1077" width="0.2042%" height="15" fill="rgb(211,200,8)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="50.6467%" y="1061" width="0.2042%" height="15" fill="rgb(228,204,44)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="50.6467%" y="1045" width="0.2042%" height="15" fill="rgb(214,121,17)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="50.6467%" y="1029" width="0.2042%" height="15" fill="rgb(233,64,38)" fg:x="1488" fg:w="6"/><text x="50.8967%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="50.6807%" y="1013" width="0.1702%" height="15" fill="rgb(253,54,19)" fg:x="1489" fg:w="5"/><text x="50.9307%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="50.7148%" y="997" width="0.1361%" height="15" fill="rgb(253,94,18)" fg:x="1490" fg:w="4"/><text x="50.9648%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="50.7148%" y="981" width="0.1361%" height="15" fill="rgb(227,57,52)" fg:x="1490" fg:w="4"/><text x="50.9648%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="50.7488%" y="965" width="0.1021%" height="15" fill="rgb(230,228,50)" fg:x="1491" fg:w="3"/><text x="50.9988%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="50.7488%" y="949" width="0.1021%" height="15" fill="rgb(217,205,27)" fg:x="1491" fg:w="3"/><text x="50.9988%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.7828%" y="933" width="0.0681%" height="15" fill="rgb(252,71,50)" fg:x="1492" fg:w="2"/><text x="51.0328%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="50.7828%" y="917" width="0.0681%" height="15" fill="rgb(209,86,4)" fg:x="1492" fg:w="2"/><text x="51.0328%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="50.8169%" y="901" width="0.0340%" height="15" fill="rgb(229,94,0)" fg:x="1493" fg:w="1"/><text x="51.0669%" y="911.50"></text></g><g><title>__fopen_internal (14 samples, 0.48%)</title><rect x="50.8509%" y="1141" width="0.4765%" height="15" fill="rgb(252,223,21)" fg:x="1494" fg:w="14"/><text x="51.1009%" y="1151.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (14 samples, 0.48%)</title><rect x="50.8509%" y="1125" width="0.4765%" height="15" fill="rgb(230,210,4)" fg:x="1494" fg:w="14"/><text x="51.1009%" y="1135.50"></text></g><g><title>_IO_file_open (14 samples, 0.48%)</title><rect x="50.8509%" y="1109" width="0.4765%" height="15" fill="rgb(240,149,38)" fg:x="1494" fg:w="14"/><text x="51.1009%" y="1119.50"></text></g><g><title>__GI___libc_open (14 samples, 0.48%)</title><rect x="50.8509%" y="1093" width="0.4765%" height="15" fill="rgb(254,105,20)" fg:x="1494" fg:w="14"/><text x="51.1009%" y="1103.50"></text></g><g><title>[unknown] (14 samples, 0.48%)</title><rect x="50.8509%" y="1077" width="0.4765%" height="15" fill="rgb(253,87,46)" fg:x="1494" fg:w="14"/><text x="51.1009%" y="1087.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="50.9190%" y="1061" width="0.4084%" height="15" fill="rgb(253,116,33)" fg:x="1496" fg:w="12"/><text x="51.1690%" y="1071.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="50.9190%" y="1045" width="0.4084%" height="15" fill="rgb(229,198,5)" fg:x="1496" fg:w="12"/><text x="51.1690%" y="1055.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="50.9190%" y="1029" width="0.4084%" height="15" fill="rgb(242,38,37)" fg:x="1496" fg:w="12"/><text x="51.1690%" y="1039.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="50.9871%" y="1013" width="0.3404%" height="15" fill="rgb(242,69,53)" fg:x="1498" fg:w="10"/><text x="51.2371%" y="1023.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="50.9871%" y="997" width="0.3404%" height="15" fill="rgb(249,80,16)" fg:x="1498" fg:w="10"/><text x="51.2371%" y="1007.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="50.9871%" y="981" width="0.3404%" height="15" fill="rgb(206,128,11)" fg:x="1498" fg:w="10"/><text x="51.2371%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="51.1232%" y="965" width="0.2042%" height="15" fill="rgb(212,35,20)" fg:x="1502" fg:w="6"/><text x="51.3732%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="51.1572%" y="949" width="0.1702%" height="15" fill="rgb(236,79,13)" fg:x="1503" fg:w="5"/><text x="51.4072%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="51.2253%" y="933" width="0.1021%" height="15" fill="rgb(233,123,3)" fg:x="1505" fg:w="3"/><text x="51.4753%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.2934%" y="917" width="0.0340%" height="15" fill="rgb(214,93,52)" fg:x="1507" fg:w="1"/><text x="51.5434%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.2934%" y="901" width="0.0340%" height="15" fill="rgb(251,37,40)" fg:x="1507" fg:w="1"/><text x="51.5434%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.2934%" y="885" width="0.0340%" height="15" fill="rgb(227,80,54)" fg:x="1507" fg:w="1"/><text x="51.5434%" y="895.50"></text></g><g><title>create_directories (6 samples, 0.20%)</title><rect x="51.3274%" y="1141" width="0.2042%" height="15" fill="rgb(254,48,11)" fg:x="1508" fg:w="6"/><text x="51.5774%" y="1151.50"></text></g><g><title>std::filesystem::is_symlink (6 samples, 0.20%)</title><rect x="51.3274%" y="1125" width="0.2042%" height="15" fill="rgb(235,193,26)" fg:x="1508" fg:w="6"/><text x="51.5774%" y="1135.50"></text></g><g><title>std::filesystem::symlink_status (6 samples, 0.20%)</title><rect x="51.3274%" y="1109" width="0.2042%" height="15" fill="rgb(229,99,21)" fg:x="1508" fg:w="6"/><text x="51.5774%" y="1119.50"></text></g><g><title>std::filesystem::symlink_status (6 samples, 0.20%)</title><rect x="51.3274%" y="1093" width="0.2042%" height="15" fill="rgb(211,140,41)" fg:x="1508" fg:w="6"/><text x="51.5774%" y="1103.50"></text></g><g><title>__GI___fstatat64 (6 samples, 0.20%)</title><rect x="51.3274%" y="1077" width="0.2042%" height="15" fill="rgb(240,227,30)" fg:x="1508" fg:w="6"/><text x="51.5774%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="51.3615%" y="1061" width="0.1702%" height="15" fill="rgb(215,224,45)" fg:x="1509" fg:w="5"/><text x="51.6115%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="51.3615%" y="1045" width="0.1702%" height="15" fill="rgb(206,123,31)" fg:x="1509" fg:w="5"/><text x="51.6115%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="51.3615%" y="1029" width="0.1702%" height="15" fill="rgb(210,138,16)" fg:x="1509" fg:w="5"/><text x="51.6115%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="51.3615%" y="1013" width="0.1702%" height="15" fill="rgb(228,57,28)" fg:x="1509" fg:w="5"/><text x="51.6115%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="51.3615%" y="997" width="0.1702%" height="15" fill="rgb(242,170,10)" fg:x="1509" fg:w="5"/><text x="51.6115%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="51.3955%" y="981" width="0.1361%" height="15" fill="rgb(228,214,39)" fg:x="1510" fg:w="4"/><text x="51.6455%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="51.3955%" y="965" width="0.1361%" height="15" fill="rgb(218,179,33)" fg:x="1510" fg:w="4"/><text x="51.6455%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="51.4295%" y="949" width="0.1021%" height="15" fill="rgb(235,193,39)" fg:x="1511" fg:w="3"/><text x="51.6795%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="51.4295%" y="933" width="0.1021%" height="15" fill="rgb(219,221,36)" fg:x="1511" fg:w="3"/><text x="51.6795%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.4976%" y="917" width="0.0340%" height="15" fill="rgb(248,218,19)" fg:x="1513" fg:w="1"/><text x="51.7476%" y="927.50"></text></g><g><title>__fstat64 (1 samples, 0.03%)</title><rect x="51.5317%" y="1077" width="0.0340%" height="15" fill="rgb(205,50,9)" fg:x="1514" fg:w="1"/><text x="51.7817%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.5317%" y="1061" width="0.0340%" height="15" fill="rgb(238,81,28)" fg:x="1514" fg:w="1"/><text x="51.7817%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.5317%" y="1045" width="0.0340%" height="15" fill="rgb(235,110,19)" fg:x="1514" fg:w="1"/><text x="51.7817%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.5317%" y="1029" width="0.0340%" height="15" fill="rgb(214,7,14)" fg:x="1514" fg:w="1"/><text x="51.7817%" y="1039.50"></text></g><g><title>_IO_doallocbuf (12 samples, 0.41%)</title><rect x="51.5317%" y="1109" width="0.4084%" height="15" fill="rgb(211,77,3)" fg:x="1514" fg:w="12"/><text x="51.7817%" y="1119.50"></text></g><g><title>_IO_file_doallocate (12 samples, 0.41%)</title><rect x="51.5317%" y="1093" width="0.4084%" height="15" fill="rgb(229,5,9)" fg:x="1514" fg:w="12"/><text x="51.7817%" y="1103.50"></text></g><g><title>malloc (11 samples, 0.37%)</title><rect x="51.5657%" y="1077" width="0.3744%" height="15" fill="rgb(225,90,11)" fg:x="1515" fg:w="11"/><text x="51.8157%" y="1087.50"></text></g><g><title>_int_malloc (11 samples, 0.37%)</title><rect x="51.5657%" y="1061" width="0.3744%" height="15" fill="rgb(242,56,8)" fg:x="1515" fg:w="11"/><text x="51.8157%" y="1071.50"></text></g><g><title>malloc_consolidate (8 samples, 0.27%)</title><rect x="51.6678%" y="1045" width="0.2723%" height="15" fill="rgb(249,212,39)" fg:x="1518" fg:w="8"/><text x="51.9178%" y="1055.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.03%)</title><rect x="51.9061%" y="1029" width="0.0340%" height="15" fill="rgb(236,90,9)" fg:x="1525" fg:w="1"/><text x="52.1561%" y="1039.50"></text></g><g><title>llseek@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="51.9401%" y="1109" width="0.0340%" height="15" fill="rgb(206,88,35)" fg:x="1526" fg:w="1"/><text x="52.1901%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="51.9401%" y="1093" width="0.0340%" height="15" fill="rgb(205,126,30)" fg:x="1526" fg:w="1"/><text x="52.1901%" y="1103.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="52.0762%" y="901" width="0.0681%" height="15" fill="rgb(230,176,12)" fg:x="1530" fg:w="2"/><text x="52.3262%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="52.1103%" y="885" width="0.0340%" height="15" fill="rgb(243,19,9)" fg:x="1531" fg:w="1"/><text x="52.3603%" y="895.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="52.0762%" y="965" width="0.1021%" height="15" fill="rgb(245,171,17)" fg:x="1530" fg:w="3"/><text x="52.3262%" y="975.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="52.0762%" y="949" width="0.1021%" height="15" fill="rgb(227,52,21)" fg:x="1530" fg:w="3"/><text x="52.3262%" y="959.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="52.0762%" y="933" width="0.1021%" height="15" fill="rgb(238,69,14)" fg:x="1530" fg:w="3"/><text x="52.3262%" y="943.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="52.0762%" y="917" width="0.1021%" height="15" fill="rgb(241,156,39)" fg:x="1530" fg:w="3"/><text x="52.3262%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="52.1443%" y="901" width="0.0340%" height="15" fill="rgb(212,227,28)" fg:x="1532" fg:w="1"/><text x="52.3943%" y="911.50"></text></g><g><title>node::BlockManager::OpenBlockFile (48 samples, 1.63%)</title><rect x="50.5786%" y="1173" width="1.6338%" height="15" fill="rgb(209,118,27)" fg:x="1486" fg:w="48"/><text x="50.8286%" y="1183.50"></text></g><g><title>FlatFileSeq::Open (48 samples, 1.63%)</title><rect x="50.5786%" y="1157" width="1.6338%" height="15" fill="rgb(226,102,5)" fg:x="1486" fg:w="48"/><text x="50.8286%" y="1167.50"></text></g><g><title>fseek (20 samples, 0.68%)</title><rect x="51.5317%" y="1141" width="0.6807%" height="15" fill="rgb(223,34,3)" fg:x="1514" fg:w="20"/><text x="51.7817%" y="1151.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (20 samples, 0.68%)</title><rect x="51.5317%" y="1125" width="0.6807%" height="15" fill="rgb(221,81,38)" fg:x="1514" fg:w="20"/><text x="51.7817%" y="1135.50"></text></g><g><title>read (7 samples, 0.24%)</title><rect x="51.9741%" y="1109" width="0.2383%" height="15" fill="rgb(236,219,28)" fg:x="1527" fg:w="7"/><text x="52.2241%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="51.9741%" y="1093" width="0.2383%" height="15" fill="rgb(213,200,14)" fg:x="1527" fg:w="7"/><text x="52.2241%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="51.9741%" y="1077" width="0.2383%" height="15" fill="rgb(240,33,19)" fg:x="1527" fg:w="7"/><text x="52.2241%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="51.9741%" y="1061" width="0.2383%" height="15" fill="rgb(233,113,27)" fg:x="1527" fg:w="7"/><text x="52.2241%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="52.0082%" y="1045" width="0.2042%" height="15" fill="rgb(220,221,18)" fg:x="1528" fg:w="6"/><text x="52.2582%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="52.0082%" y="1029" width="0.2042%" height="15" fill="rgb(238,92,8)" fg:x="1528" fg:w="6"/><text x="52.2582%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="52.0082%" y="1013" width="0.2042%" height="15" fill="rgb(222,164,16)" fg:x="1528" fg:w="6"/><text x="52.2582%" y="1023.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="52.0082%" y="997" width="0.2042%" height="15" fill="rgb(241,119,3)" fg:x="1528" fg:w="6"/><text x="52.2582%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="52.0422%" y="981" width="0.1702%" height="15" fill="rgb(241,44,8)" fg:x="1529" fg:w="5"/><text x="52.2922%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="52.1784%" y="965" width="0.0340%" height="15" fill="rgb(230,36,40)" fg:x="1533" fg:w="1"/><text x="52.4284%" y="975.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="52.2124%" y="869" width="0.0681%" height="15" fill="rgb(243,16,36)" fg:x="1534" fg:w="2"/><text x="52.4624%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (2 samples, 0.07%)</title><rect x="52.2124%" y="853" width="0.0681%" height="15" fill="rgb(231,4,26)" fg:x="1534" fg:w="2"/><text x="52.4624%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="52.2124%" y="837" width="0.0681%" height="15" fill="rgb(240,9,31)" fg:x="1534" fg:w="2"/><text x="52.4624%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="52.2124%" y="821" width="0.0681%" height="15" fill="rgb(207,173,15)" fg:x="1534" fg:w="2"/><text x="52.4624%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="52.2124%" y="805" width="0.0681%" height="15" fill="rgb(224,192,53)" fg:x="1534" fg:w="2"/><text x="52.4624%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="1029" width="0.1361%" height="15" fill="rgb(223,67,28)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="1013" width="0.1361%" height="15" fill="rgb(211,20,47)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="1023.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="997" width="0.1361%" height="15" fill="rgb(240,228,2)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="1007.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="981" width="0.1361%" height="15" fill="rgb(248,151,12)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="991.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="965" width="0.1361%" height="15" fill="rgb(244,8,39)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="975.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="949" width="0.1361%" height="15" fill="rgb(222,26,8)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="933" width="0.1361%" height="15" fill="rgb(213,106,44)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="943.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="917" width="0.1361%" height="15" fill="rgb(214,129,20)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="927.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="901" width="0.1361%" height="15" fill="rgb(212,32,13)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.14%)</title><rect x="52.2124%" y="885" width="0.1361%" height="15" fill="rgb(208,168,33)" fg:x="1534" fg:w="4"/><text x="52.4624%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="52.2805%" y="869" width="0.0681%" height="15" fill="rgb(231,207,8)" fg:x="1536" fg:w="2"/><text x="52.5305%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="52.2805%" y="853" width="0.0681%" height="15" fill="rgb(235,219,23)" fg:x="1536" fg:w="2"/><text x="52.5305%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="52.2805%" y="837" width="0.0681%" height="15" fill="rgb(226,216,26)" fg:x="1536" fg:w="2"/><text x="52.5305%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="52.2805%" y="821" width="0.0681%" height="15" fill="rgb(239,137,16)" fg:x="1536" fg:w="2"/><text x="52.5305%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="52.2805%" y="805" width="0.0681%" height="15" fill="rgb(207,12,36)" fg:x="1536" fg:w="2"/><text x="52.5305%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="789" width="0.0340%" height="15" fill="rgb(210,214,24)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="773" width="0.0340%" height="15" fill="rgb(206,56,30)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="757" width="0.0340%" height="15" fill="rgb(228,143,26)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="767.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="741" width="0.0340%" height="15" fill="rgb(216,218,46)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="751.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="725" width="0.0340%" height="15" fill="rgb(206,6,19)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="709" width="0.0340%" height="15" fill="rgb(239,177,51)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="693" width="0.0340%" height="15" fill="rgb(216,55,25)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="677" width="0.0340%" height="15" fill="rgb(231,163,29)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="687.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="661" width="0.0340%" height="15" fill="rgb(232,149,50)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="671.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.3145%" y="645" width="0.0340%" height="15" fill="rgb(223,142,48)" fg:x="1537" fg:w="1"/><text x="52.5645%" y="655.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (131 samples, 4.46%)</title><rect x="47.9578%" y="1189" width="4.4588%" height="15" fill="rgb(245,83,23)" fg:x="1409" fg:w="131"/><text x="48.2078%" y="1199.50">node:..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1173" width="0.2042%" height="15" fill="rgb(224,63,2)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1183.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (6 samples, 0.20%)</title><rect x="52.2124%" y="1157" width="0.2042%" height="15" fill="rgb(218,65,53)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1167.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1141" width="0.2042%" height="15" fill="rgb(221,84,29)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1151.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1125" width="0.2042%" height="15" fill="rgb(234,0,32)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1109" width="0.2042%" height="15" fill="rgb(206,20,16)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1119.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1093" width="0.2042%" height="15" fill="rgb(244,172,18)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1103.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1077" width="0.2042%" height="15" fill="rgb(254,133,1)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1087.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1061" width="0.2042%" height="15" fill="rgb(222,206,41)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1071.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6 samples, 0.20%)</title><rect x="52.2124%" y="1045" width="0.2042%" height="15" fill="rgb(212,3,42)" fg:x="1534" fg:w="6"/><text x="52.4624%" y="1055.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="52.3485%" y="1029" width="0.0681%" height="15" fill="rgb(241,11,4)" fg:x="1538" fg:w="2"/><text x="52.5985%" y="1039.50"></text></g><g><title>void ser_writedata16&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.3826%" y="1013" width="0.0340%" height="15" fill="rgb(205,19,26)" fg:x="1539" fg:w="1"/><text x="52.6326%" y="1023.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="52.3826%" y="997" width="0.0340%" height="15" fill="rgb(210,179,32)" fg:x="1539" fg:w="1"/><text x="52.6326%" y="1007.50"></text></g><g><title>SizeComputer::write (1 samples, 0.03%)</title><rect x="52.3826%" y="981" width="0.0340%" height="15" fill="rgb(227,116,49)" fg:x="1539" fg:w="1"/><text x="52.6326%" y="991.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="52.4506%" y="885" width="0.0340%" height="15" fill="rgb(211,146,6)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="869" width="0.0340%" height="15" fill="rgb(219,44,39)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="853" width="0.0340%" height="15" fill="rgb(234,128,11)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="837" width="0.0340%" height="15" fill="rgb(220,183,53)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="821" width="0.0340%" height="15" fill="rgb(213,219,32)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="805" width="0.0340%" height="15" fill="rgb(232,156,16)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="789" width="0.0340%" height="15" fill="rgb(246,135,34)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="773" width="0.0340%" height="15" fill="rgb(241,99,0)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="783.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="757" width="0.0340%" height="15" fill="rgb(222,103,45)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="741" width="0.0340%" height="15" fill="rgb(212,57,4)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="751.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="725" width="0.0340%" height="15" fill="rgb(215,68,47)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="709" width="0.0340%" height="15" fill="rgb(230,84,2)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="693" width="0.0340%" height="15" fill="rgb(220,102,14)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="703.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="677" width="0.0340%" height="15" fill="rgb(240,10,32)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="687.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="661" width="0.0340%" height="15" fill="rgb(215,47,27)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="52.4506%" y="645" width="0.0340%" height="15" fill="rgb(233,188,43)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="629" width="0.0340%" height="15" fill="rgb(253,190,1)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="613" width="0.0340%" height="15" fill="rgb(206,114,52)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="597" width="0.0340%" height="15" fill="rgb(233,120,37)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.4506%" y="581" width="0.0340%" height="15" fill="rgb(214,52,39)" fg:x="1541" fg:w="1"/><text x="52.7006%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.4847%" y="805" width="0.0340%" height="15" fill="rgb(223,80,29)" fg:x="1542" fg:w="1"/><text x="52.7347%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4847%" y="789" width="0.0340%" height="15" fill="rgb(230,101,40)" fg:x="1542" fg:w="1"/><text x="52.7347%" y="799.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4847%" y="773" width="0.0340%" height="15" fill="rgb(219,211,8)" fg:x="1542" fg:w="1"/><text x="52.7347%" y="783.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.4847%" y="757" width="0.0340%" height="15" fill="rgb(252,126,28)" fg:x="1542" fg:w="1"/><text x="52.7347%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="52.4847%" y="741" width="0.0340%" height="15" fill="rgb(215,56,38)" fg:x="1542" fg:w="1"/><text x="52.7347%" y="751.50"></text></g><g><title>SizeComputer::write (1 samples, 0.03%)</title><rect x="52.4847%" y="725" width="0.0340%" height="15" fill="rgb(249,55,44)" fg:x="1542" fg:w="1"/><text x="52.7347%" y="735.50"></text></g><g><title>node::BlockManager::SaveBlockToDisk (141 samples, 4.80%)</title><rect x="47.7536%" y="1205" width="4.7992%" height="15" fill="rgb(220,221,32)" fg:x="1403" fg:w="141"/><text x="48.0036%" y="1215.50">node::..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1189" width="0.1361%" height="15" fill="rgb(212,216,41)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1199.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (4 samples, 0.14%)</title><rect x="52.4166%" y="1173" width="0.1361%" height="15" fill="rgb(228,213,43)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1183.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1157" width="0.1361%" height="15" fill="rgb(211,31,26)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1167.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1141" width="0.1361%" height="15" fill="rgb(229,202,19)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1125" width="0.1361%" height="15" fill="rgb(229,105,46)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1135.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1109" width="0.1361%" height="15" fill="rgb(235,108,1)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1119.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1093" width="0.1361%" height="15" fill="rgb(245,111,35)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1103.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1077" width="0.1361%" height="15" fill="rgb(219,185,31)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1061" width="0.1361%" height="15" fill="rgb(214,4,43)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1071.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="52.4166%" y="1045" width="0.1361%" height="15" fill="rgb(235,227,40)" fg:x="1540" fg:w="4"/><text x="52.6666%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="1029" width="0.1021%" height="15" fill="rgb(230,88,30)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="1013" width="0.1021%" height="15" fill="rgb(216,217,1)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="1023.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="997" width="0.1021%" height="15" fill="rgb(248,139,50)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="1007.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="981" width="0.1021%" height="15" fill="rgb(233,1,21)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="991.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="965" width="0.1021%" height="15" fill="rgb(215,183,12)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="949" width="0.1021%" height="15" fill="rgb(229,104,42)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="933" width="0.1021%" height="15" fill="rgb(243,34,48)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="943.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="917" width="0.1021%" height="15" fill="rgb(239,11,44)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="927.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="52.4506%" y="901" width="0.1021%" height="15" fill="rgb(231,98,35)" fg:x="1541" fg:w="3"/><text x="52.7006%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="52.4847%" y="885" width="0.0681%" height="15" fill="rgb(233,28,25)" fg:x="1542" fg:w="2"/><text x="52.7347%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="52.4847%" y="869" width="0.0681%" height="15" fill="rgb(234,123,11)" fg:x="1542" fg:w="2"/><text x="52.7347%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="52.4847%" y="853" width="0.0681%" height="15" fill="rgb(220,69,3)" fg:x="1542" fg:w="2"/><text x="52.7347%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="52.4847%" y="837" width="0.0681%" height="15" fill="rgb(214,64,36)" fg:x="1542" fg:w="2"/><text x="52.7347%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="52.4847%" y="821" width="0.0681%" height="15" fill="rgb(211,138,32)" fg:x="1542" fg:w="2"/><text x="52.7347%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="805" width="0.0340%" height="15" fill="rgb(213,118,47)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="789" width="0.0340%" height="15" fill="rgb(243,124,49)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="773" width="0.0340%" height="15" fill="rgb(221,30,28)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="783.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="757" width="0.0340%" height="15" fill="rgb(246,37,13)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="741" width="0.0340%" height="15" fill="rgb(249,66,14)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="751.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="725" width="0.0340%" height="15" fill="rgb(213,166,5)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="709" width="0.0340%" height="15" fill="rgb(221,66,24)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="693" width="0.0340%" height="15" fill="rgb(210,132,17)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="703.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="677" width="0.0340%" height="15" fill="rgb(243,202,5)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="687.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="661" width="0.0340%" height="15" fill="rgb(233,70,48)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="52.5187%" y="645" width="0.0340%" height="15" fill="rgb(238,41,26)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="629" width="0.0340%" height="15" fill="rgb(241,19,31)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="613" width="0.0340%" height="15" fill="rgb(214,76,10)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="623.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="597" width="0.0340%" height="15" fill="rgb(254,202,22)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="607.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="581" width="0.0340%" height="15" fill="rgb(214,72,24)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="565" width="0.0340%" height="15" fill="rgb(221,92,46)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="549" width="0.0340%" height="15" fill="rgb(246,13,50)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="559.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="533" width="0.0340%" height="15" fill="rgb(240,165,38)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="543.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="517" width="0.0340%" height="15" fill="rgb(241,24,51)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="527.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="501" width="0.0340%" height="15" fill="rgb(227,51,44)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="485" width="0.0340%" height="15" fill="rgb(231,121,3)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="469" width="0.0340%" height="15" fill="rgb(245,3,41)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="453" width="0.0340%" height="15" fill="rgb(214,13,26)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="463.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="437" width="0.0340%" height="15" fill="rgb(252,75,11)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="447.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="421" width="0.0340%" height="15" fill="rgb(218,226,17)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="431.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="405" width="0.0340%" height="15" fill="rgb(248,89,38)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="389" width="0.0340%" height="15" fill="rgb(237,73,46)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="399.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="373" width="0.0340%" height="15" fill="rgb(242,78,33)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="357" width="0.0340%" height="15" fill="rgb(235,60,3)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="367.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="52.5187%" y="341" width="0.0340%" height="15" fill="rgb(216,172,19)" fg:x="1543" fg:w="1"/><text x="52.7687%" y="351.50"></text></g><g><title>ChainstateManager::AcceptBlock (148 samples, 5.04%)</title><rect x="47.5494%" y="1221" width="5.0374%" height="15" fill="rgb(227,6,42)" fg:x="1397" fg:w="148"/><text x="47.7994%" y="1231.50">Chains..</text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.03%)</title><rect x="52.5528%" y="1205" width="0.0340%" height="15" fill="rgb(223,207,42)" fg:x="1544" fg:w="1"/><text x="52.8028%" y="1215.50"></text></g><g><title>ChainstateManager::ActiveChainstate (1 samples, 0.03%)</title><rect x="52.5528%" y="1189" width="0.0340%" height="15" fill="rgb(246,138,30)" fg:x="1544" fg:w="1"/><text x="52.8028%" y="1199.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1 samples, 0.03%)</title><rect x="52.5868%" y="1221" width="0.0340%" height="15" fill="rgb(251,199,47)" fg:x="1545" fg:w="1"/><text x="52.8368%" y="1231.50"></text></g><g><title>BlockValidationState::~BlockValidationState (1 samples, 0.03%)</title><rect x="52.5868%" y="1205" width="0.0340%" height="15" fill="rgb(228,218,44)" fg:x="1545" fg:w="1"/><text x="52.8368%" y="1215.50"></text></g><g><title>ValidationState&lt;BlockValidationResult&gt;::~ValidationState (1 samples, 0.03%)</title><rect x="52.5868%" y="1189" width="0.0340%" height="15" fill="rgb(220,68,6)" fg:x="1545" fg:w="1"/><text x="52.8368%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.03%)</title><rect x="52.5868%" y="1173" width="0.0340%" height="15" fill="rgb(240,60,26)" fg:x="1545" fg:w="1"/><text x="52.8368%" y="1183.50"></text></g><g><title>CheckBlockHeader (1 samples, 0.03%)</title><rect x="52.6208%" y="1205" width="0.0340%" height="15" fill="rgb(211,200,19)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1215.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.03%)</title><rect x="52.6208%" y="1189" width="0.0340%" height="15" fill="rgb(242,145,30)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1199.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (1 samples, 0.03%)</title><rect x="52.6208%" y="1173" width="0.0340%" height="15" fill="rgb(225,64,13)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1183.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1157" width="0.0340%" height="15" fill="rgb(218,103,35)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1167.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1141" width="0.0340%" height="15" fill="rgb(216,93,46)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1151.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1125" width="0.0340%" height="15" fill="rgb(225,159,27)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1135.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1109" width="0.0340%" height="15" fill="rgb(225,204,11)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1093" width="0.0340%" height="15" fill="rgb(205,56,4)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1103.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1077" width="0.0340%" height="15" fill="rgb(206,6,35)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1087.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1061" width="0.0340%" height="15" fill="rgb(247,73,52)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1071.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1045" width="0.0340%" height="15" fill="rgb(246,97,4)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1055.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.03%)</title><rect x="52.6208%" y="1029" width="0.0340%" height="15" fill="rgb(212,37,15)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1039.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (1 samples, 0.03%)</title><rect x="52.6208%" y="1013" width="0.0340%" height="15" fill="rgb(208,130,40)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1023.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="52.6208%" y="997" width="0.0340%" height="15" fill="rgb(236,55,29)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="1007.50"></text></g><g><title>CheckBlockHeader (1 samples, 0.03%)</title><rect x="52.6208%" y="981" width="0.0340%" height="15" fill="rgb(209,156,45)" fg:x="1546" fg:w="1"/><text x="52.8708%" y="991.50"></text></g><g><title>CMutableTransaction::CMutableTransaction (1 samples, 0.03%)</title><rect x="52.6549%" y="1173" width="0.0340%" height="15" fill="rgb(249,107,4)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1183.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::vector (1 samples, 0.03%)</title><rect x="52.6549%" y="1157" width="0.0340%" height="15" fill="rgb(227,7,13)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1167.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_base (1 samples, 0.03%)</title><rect x="52.6549%" y="1141" width="0.0340%" height="15" fill="rgb(250,129,14)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_create_storage (1 samples, 0.03%)</title><rect x="52.6549%" y="1125" width="0.0340%" height="15" fill="rgb(229,92,13)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="52.6549%" y="1109" width="0.0340%" height="15" fill="rgb(245,98,39)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="52.6549%" y="1093" width="0.0340%" height="15" fill="rgb(234,135,48)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="52.6549%" y="1077" width="0.0340%" height="15" fill="rgb(230,98,28)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1087.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (1 samples, 0.03%)</title><rect x="52.6549%" y="1061" width="0.0340%" height="15" fill="rgb(223,121,0)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (1 samples, 0.03%)</title><rect x="52.6549%" y="1045" width="0.0340%" height="15" fill="rgb(234,173,33)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1055.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="52.6549%" y="1029" width="0.0340%" height="15" fill="rgb(245,47,8)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1039.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="52.6549%" y="1013" width="0.0340%" height="15" fill="rgb(205,17,20)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1023.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="52.6549%" y="997" width="0.0340%" height="15" fill="rgb(232,151,16)" fg:x="1547" fg:w="1"/><text x="52.9049%" y="1007.50"></text></g><g><title>CMutableTransaction::GetHash (1 samples, 0.03%)</title><rect x="52.6889%" y="1173" width="0.0340%" height="15" fill="rgb(208,30,32)" fg:x="1548" fg:w="1"/><text x="52.9389%" y="1183.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.03%)</title><rect x="52.6889%" y="1157" width="0.0340%" height="15" fill="rgb(254,26,3)" fg:x="1548" fg:w="1"/><text x="52.9389%" y="1167.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.03%)</title><rect x="52.6889%" y="1141" width="0.0340%" height="15" fill="rgb(240,177,30)" fg:x="1548" fg:w="1"/><text x="52.9389%" y="1151.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="52.6889%" y="1125" width="0.0340%" height="15" fill="rgb(248,76,44)" fg:x="1548" fg:w="1"/><text x="52.9389%" y="1135.50"></text></g><g><title>QuadRound (1 samples, 0.03%)</title><rect x="52.6889%" y="1109" width="0.0340%" height="15" fill="rgb(241,186,54)" fg:x="1548" fg:w="1"/><text x="52.9389%" y="1119.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="52.6889%" y="1093" width="0.0340%" height="15" fill="rgb(249,171,29)" fg:x="1548" fg:w="1"/><text x="52.9389%" y="1103.50"></text></g><g><title>CTxOut&amp; std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::emplace_back&lt;int, CScript const&amp;&gt; (1 samples, 0.03%)</title><rect x="52.7229%" y="1173" width="0.0340%" height="15" fill="rgb(237,151,44)" fg:x="1549" fg:w="1"/><text x="52.9729%" y="1183.50"></text></g><g><title>void std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_realloc_insert&lt;COutPoint, CScript, int&gt; (1 samples, 0.03%)</title><rect x="52.7229%" y="1157" width="0.0340%" height="15" fill="rgb(228,174,30)" fg:x="1549" fg:w="1"/><text x="52.9729%" y="1167.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.07%)</title><rect x="52.7570%" y="1093" width="0.0681%" height="15" fill="rgb(252,14,37)" fg:x="1550" fg:w="2"/><text x="53.0070%" y="1103.50"></text></g><g><title>QuadRound (4 samples, 0.14%)</title><rect x="52.7570%" y="1109" width="0.1361%" height="15" fill="rgb(207,111,40)" fg:x="1550" fg:w="4"/><text x="53.0070%" y="1119.50"></text></g><g><title>_mm_sha256rnds2_epu32 (2 samples, 0.07%)</title><rect x="52.8251%" y="1093" width="0.0681%" height="15" fill="rgb(248,171,54)" fg:x="1552" fg:w="2"/><text x="53.0751%" y="1103.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.07%)</title><rect x="52.8931%" y="1077" width="0.0681%" height="15" fill="rgb(211,127,2)" fg:x="1554" fg:w="2"/><text x="53.1431%" y="1087.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.07%)</title><rect x="52.9612%" y="1077" width="0.0681%" height="15" fill="rgb(236,87,47)" fg:x="1556" fg:w="2"/><text x="53.2112%" y="1087.50"></text></g><g><title>ComputeMerkleRoot (9 samples, 0.31%)</title><rect x="52.7570%" y="1157" width="0.3063%" height="15" fill="rgb(223,190,45)" fg:x="1550" fg:w="9"/><text x="53.0070%" y="1167.50"></text></g><g><title>SHA256D64 (9 samples, 0.31%)</title><rect x="52.7570%" y="1141" width="0.3063%" height="15" fill="rgb(215,5,16)" fg:x="1550" fg:w="9"/><text x="53.0070%" y="1151.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (9 samples, 0.31%)</title><rect x="52.7570%" y="1125" width="0.3063%" height="15" fill="rgb(252,82,33)" fg:x="1550" fg:w="9"/><text x="53.0070%" y="1135.50"></text></g><g><title>ShiftMessageB (5 samples, 0.17%)</title><rect x="52.8931%" y="1109" width="0.1702%" height="15" fill="rgb(247,213,44)" fg:x="1554" fg:w="5"/><text x="53.1431%" y="1119.50"></text></g><g><title>ShiftMessageC (5 samples, 0.17%)</title><rect x="52.8931%" y="1093" width="0.1702%" height="15" fill="rgb(205,196,44)" fg:x="1554" fg:w="5"/><text x="53.1431%" y="1103.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="53.0293%" y="1077" width="0.0340%" height="15" fill="rgb(237,96,54)" fg:x="1558" fg:w="1"/><text x="53.2793%" y="1087.50"></text></g><g><title>ComputeModifiedMerkleRoot (11 samples, 0.37%)</title><rect x="52.7570%" y="1173" width="0.3744%" height="15" fill="rgb(230,113,34)" fg:x="1550" fg:w="11"/><text x="53.0070%" y="1183.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (2 samples, 0.07%)</title><rect x="53.0633%" y="1157" width="0.0681%" height="15" fill="rgb(221,224,12)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1167.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (2 samples, 0.07%)</title><rect x="53.0633%" y="1141" width="0.0681%" height="15" fill="rgb(219,112,44)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1151.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="53.0633%" y="1125" width="0.0681%" height="15" fill="rgb(210,31,13)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="53.0633%" y="1109" width="0.0681%" height="15" fill="rgb(230,25,16)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;uint256&gt; &gt;::allocate (2 samples, 0.07%)</title><rect x="53.0633%" y="1093" width="0.0681%" height="15" fill="rgb(246,108,53)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1103.50"></text></g><g><title>std::allocator&lt;uint256&gt;::allocate (2 samples, 0.07%)</title><rect x="53.0633%" y="1077" width="0.0681%" height="15" fill="rgb(241,172,50)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1087.50"></text></g><g><title>std::__new_allocator&lt;uint256&gt;::allocate (2 samples, 0.07%)</title><rect x="53.0633%" y="1061" width="0.0681%" height="15" fill="rgb(235,141,10)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1071.50"></text></g><g><title>operator new (2 samples, 0.07%)</title><rect x="53.0633%" y="1045" width="0.0681%" height="15" fill="rgb(220,174,43)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1055.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="53.0633%" y="1029" width="0.0681%" height="15" fill="rgb(215,181,40)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1039.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="53.0633%" y="1013" width="0.0681%" height="15" fill="rgb(230,97,2)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1023.50"></text></g><g><title>malloc_consolidate (2 samples, 0.07%)</title><rect x="53.0633%" y="997" width="0.0681%" height="15" fill="rgb(211,25,27)" fg:x="1559" fg:w="2"/><text x="53.3133%" y="1007.50"></text></g><g><title>FetchAndClearCommitmentSection (1 samples, 0.03%)</title><rect x="53.1314%" y="1173" width="0.0340%" height="15" fill="rgb(230,87,26)" fg:x="1561" fg:w="1"/><text x="53.3814%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, void&gt; (1 samples, 0.03%)</title><rect x="53.1314%" y="1157" width="0.0340%" height="15" fill="rgb(227,160,17)" fg:x="1561" fg:w="1"/><text x="53.3814%" y="1167.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::cbegin (1 samples, 0.03%)</title><rect x="53.1314%" y="1141" width="0.0340%" height="15" fill="rgb(244,85,34)" fg:x="1561" fg:w="1"/><text x="53.3814%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (1 samples, 0.03%)</title><rect x="53.1314%" y="1125" width="0.0340%" height="15" fill="rgb(207,70,0)" fg:x="1561" fg:w="1"/><text x="53.3814%" y="1135.50"></text></g><g><title>SignetTxs::Create (1 samples, 0.03%)</title><rect x="53.1654%" y="1173" width="0.0340%" height="15" fill="rgb(223,129,7)" fg:x="1562" fg:w="1"/><text x="53.4154%" y="1183.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="53.1654%" y="1157" width="0.0340%" height="15" fill="rgb(246,105,7)" fg:x="1562" fg:w="1"/><text x="53.4154%" y="1167.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="53.1654%" y="1141" width="0.0340%" height="15" fill="rgb(215,154,42)" fg:x="1562" fg:w="1"/><text x="53.4154%" y="1151.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="53.1654%" y="1125" width="0.0340%" height="15" fill="rgb(220,215,30)" fg:x="1562" fg:w="1"/><text x="53.4154%" y="1135.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="53.1654%" y="1109" width="0.0340%" height="15" fill="rgb(228,81,51)" fg:x="1562" fg:w="1"/><text x="53.4154%" y="1119.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="53.1995%" y="1093" width="0.0340%" height="15" fill="rgb(247,71,54)" fg:x="1563" fg:w="1"/><text x="53.4495%" y="1103.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="53.1995%" y="1077" width="0.0340%" height="15" fill="rgb(234,176,34)" fg:x="1563" fg:w="1"/><text x="53.4495%" y="1087.50"></text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="53.1995%" y="1061" width="0.0340%" height="15" fill="rgb(241,103,54)" fg:x="1563" fg:w="1"/><text x="53.4495%" y="1071.50"></text></g><g><title>SignetTxs::Create (18 samples, 0.61%)</title><rect x="52.6549%" y="1189" width="0.6127%" height="15" fill="rgb(228,22,34)" fg:x="1547" fg:w="18"/><text x="52.9049%" y="1199.50"></text></g><g><title>SignetTxs::SignetTxs&lt;CMutableTransaction, CMutableTransaction&gt; (2 samples, 0.07%)</title><rect x="53.1995%" y="1173" width="0.0681%" height="15" fill="rgb(241,179,48)" fg:x="1563" fg:w="2"/><text x="53.4495%" y="1183.50"></text></g><g><title>CTransaction::CTransaction (2 samples, 0.07%)</title><rect x="53.1995%" y="1157" width="0.0681%" height="15" fill="rgb(235,167,37)" fg:x="1563" fg:w="2"/><text x="53.4495%" y="1167.50"></text></g><g><title>CTransaction::ComputeHash (2 samples, 0.07%)</title><rect x="53.1995%" y="1141" width="0.0681%" height="15" fill="rgb(213,109,30)" fg:x="1563" fg:w="2"/><text x="53.4495%" y="1151.50"></text></g><g><title>HashWriter::GetHash (2 samples, 0.07%)</title><rect x="53.1995%" y="1125" width="0.0681%" height="15" fill="rgb(222,172,16)" fg:x="1563" fg:w="2"/><text x="53.4495%" y="1135.50"></text></g><g><title>CSHA256::Finalize (2 samples, 0.07%)</title><rect x="53.1995%" y="1109" width="0.0681%" height="15" fill="rgb(233,192,5)" fg:x="1563" fg:w="2"/><text x="53.4495%" y="1119.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="53.2335%" y="1093" width="0.0340%" height="15" fill="rgb(247,189,41)" fg:x="1564" fg:w="1"/><text x="53.4835%" y="1103.50"></text></g><g><title>QuadRound (1 samples, 0.03%)</title><rect x="53.2335%" y="1077" width="0.0340%" height="15" fill="rgb(218,134,47)" fg:x="1564" fg:w="1"/><text x="53.4835%" y="1087.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.03%)</title><rect x="53.2335%" y="1061" width="0.0340%" height="15" fill="rgb(216,29,3)" fg:x="1564" fg:w="1"/><text x="53.4835%" y="1071.50"></text></g><g><title>CScript::CScript&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="53.2675%" y="1141" width="0.0340%" height="15" fill="rgb(246,140,12)" fg:x="1565" fg:w="1"/><text x="53.5175%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="53.2675%" y="1125" width="0.0340%" height="15" fill="rgb(230,136,11)" fg:x="1565" fg:w="1"/><text x="53.5175%" y="1135.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="53.2675%" y="1109" width="0.0340%" height="15" fill="rgb(247,22,47)" fg:x="1565" fg:w="1"/><text x="53.5175%" y="1119.50"></text></g><g><title>CScript::GetOp (1 samples, 0.03%)</title><rect x="53.3016%" y="1141" width="0.0340%" height="15" fill="rgb(218,84,22)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="53.3016%" y="1125" width="0.0340%" height="15" fill="rgb(216,87,39)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1135.50"></text></g><g><title>void std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="53.3016%" y="1109" width="0.0340%" height="15" fill="rgb(221,178,8)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="53.3016%" y="1093" width="0.0340%" height="15" fill="rgb(230,42,11)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1103.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="53.3016%" y="1077" width="0.0340%" height="15" fill="rgb(237,229,4)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1087.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="53.3016%" y="1061" width="0.0340%" height="15" fill="rgb(222,31,33)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1071.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="53.3016%" y="1045" width="0.0340%" height="15" fill="rgb(210,17,39)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1055.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="53.3016%" y="1029" width="0.0340%" height="15" fill="rgb(244,93,20)" fg:x="1566" fg:w="1"/><text x="53.5516%" y="1039.50"></text></g><g><title>secp256k1_fe_impl_mul (1 samples, 0.03%)</title><rect x="53.3356%" y="1029" width="0.0340%" height="15" fill="rgb(210,40,47)" fg:x="1567" fg:w="1"/><text x="53.5856%" y="1039.50"></text></g><g><title>secp256k1_fe_sqr_inner (1 samples, 0.03%)</title><rect x="53.3356%" y="1013" width="0.0340%" height="15" fill="rgb(239,211,47)" fg:x="1567" fg:w="1"/><text x="53.5856%" y="1023.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.03%)</title><rect x="53.3696%" y="997" width="0.0340%" height="15" fill="rgb(251,223,49)" fg:x="1568" fg:w="1"/><text x="53.6196%" y="1007.50"></text></g><g><title>secp256k1_fe_mul_inner (2 samples, 0.07%)</title><rect x="53.3696%" y="1013" width="0.0681%" height="15" fill="rgb(221,149,5)" fg:x="1568" fg:w="2"/><text x="53.6196%" y="1023.50"></text></g><g><title>secp256k1_u128_rshift (1 samples, 0.03%)</title><rect x="53.4037%" y="997" width="0.0340%" height="15" fill="rgb(219,224,51)" fg:x="1569" fg:w="1"/><text x="53.6537%" y="1007.50"></text></g><g><title>secp256k1_u128_accum_mul (4 samples, 0.14%)</title><rect x="53.4717%" y="997" width="0.1361%" height="15" fill="rgb(223,7,8)" fg:x="1571" fg:w="4"/><text x="53.7217%" y="1007.50"></text></g><g><title>secp256k1_u128_mul (1 samples, 0.03%)</title><rect x="53.6079%" y="997" width="0.0340%" height="15" fill="rgb(241,217,22)" fg:x="1575" fg:w="1"/><text x="53.8579%" y="1007.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::VerifyECDSASignature (13 samples, 0.44%)</title><rect x="53.3356%" y="1125" width="0.4425%" height="15" fill="rgb(248,209,0)" fg:x="1567" fg:w="13"/><text x="53.5856%" y="1135.50"></text></g><g><title>CPubKey::Verify (13 samples, 0.44%)</title><rect x="53.3356%" y="1109" width="0.4425%" height="15" fill="rgb(217,205,4)" fg:x="1567" fg:w="13"/><text x="53.5856%" y="1119.50"></text></g><g><title>secp256k1_ec_pubkey_parse (13 samples, 0.44%)</title><rect x="53.3356%" y="1093" width="0.4425%" height="15" fill="rgb(228,124,39)" fg:x="1567" fg:w="13"/><text x="53.5856%" y="1103.50"></text></g><g><title>secp256k1_eckey_pubkey_parse (13 samples, 0.44%)</title><rect x="53.3356%" y="1077" width="0.4425%" height="15" fill="rgb(250,116,42)" fg:x="1567" fg:w="13"/><text x="53.5856%" y="1087.50"></text></g><g><title>secp256k1_ge_set_xo_var (13 samples, 0.44%)</title><rect x="53.3356%" y="1061" width="0.4425%" height="15" fill="rgb(223,202,9)" fg:x="1567" fg:w="13"/><text x="53.5856%" y="1071.50"></text></g><g><title>secp256k1_fe_sqrt (13 samples, 0.44%)</title><rect x="53.3356%" y="1045" width="0.4425%" height="15" fill="rgb(242,222,40)" fg:x="1567" fg:w="13"/><text x="53.5856%" y="1055.50"></text></g><g><title>secp256k1_fe_impl_sqr (12 samples, 0.41%)</title><rect x="53.3696%" y="1029" width="0.4084%" height="15" fill="rgb(229,99,46)" fg:x="1568" fg:w="12"/><text x="53.6196%" y="1039.50"></text></g><g><title>secp256k1_fe_sqr_inner (10 samples, 0.34%)</title><rect x="53.4377%" y="1013" width="0.3404%" height="15" fill="rgb(225,56,46)" fg:x="1570" fg:w="10"/><text x="53.6877%" y="1023.50"></text></g><g><title>secp256k1_u128_rshift (4 samples, 0.14%)</title><rect x="53.6419%" y="997" width="0.1361%" height="15" fill="rgb(227,94,5)" fg:x="1576" fg:w="4"/><text x="53.8919%" y="1007.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.03%)</title><rect x="53.7781%" y="1109" width="0.0340%" height="15" fill="rgb(205,112,38)" fg:x="1580" fg:w="1"/><text x="54.0281%" y="1119.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.03%)</title><rect x="53.7781%" y="1093" width="0.0340%" height="15" fill="rgb(231,133,46)" fg:x="1580" fg:w="1"/><text x="54.0281%" y="1103.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="53.7781%" y="1077" width="0.0340%" height="15" fill="rgb(217,16,9)" fg:x="1580" fg:w="1"/><text x="54.0281%" y="1087.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.03%)</title><rect x="53.7781%" y="1061" width="0.0340%" height="15" fill="rgb(249,173,9)" fg:x="1580" fg:w="1"/><text x="54.0281%" y="1071.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="53.8121%" y="901" width="0.0340%" height="15" fill="rgb(205,163,53)" fg:x="1581" fg:w="1"/><text x="54.0621%" y="911.50"></text></g><g><title>Unshuffle (1 samples, 0.03%)</title><rect x="53.8121%" y="885" width="0.0340%" height="15" fill="rgb(217,54,41)" fg:x="1581" fg:w="1"/><text x="54.0621%" y="895.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.03%)</title><rect x="53.8121%" y="869" width="0.0340%" height="15" fill="rgb(228,216,12)" fg:x="1581" fg:w="1"/><text x="54.0621%" y="879.50"></text></g><g><title>VerifyScript (18 samples, 0.61%)</title><rect x="53.2675%" y="1189" width="0.6127%" height="15" fill="rgb(244,228,15)" fg:x="1565" fg:w="18"/><text x="53.5175%" y="1199.50"></text></g><g><title>EvalScript (18 samples, 0.61%)</title><rect x="53.2675%" y="1173" width="0.6127%" height="15" fill="rgb(221,176,53)" fg:x="1565" fg:w="18"/><text x="53.5175%" y="1183.50"></text></g><g><title>EvalScript (18 samples, 0.61%)</title><rect x="53.2675%" y="1157" width="0.6127%" height="15" fill="rgb(205,94,34)" fg:x="1565" fg:w="18"/><text x="53.5175%" y="1167.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::CheckECDSASignature (16 samples, 0.54%)</title><rect x="53.3356%" y="1141" width="0.5446%" height="15" fill="rgb(213,110,48)" fg:x="1567" fg:w="16"/><text x="53.5856%" y="1151.50"></text></g><g><title>uint256 SignatureHash&lt;CTransaction&gt; (3 samples, 0.10%)</title><rect x="53.7781%" y="1125" width="0.1021%" height="15" fill="rgb(236,142,28)" fg:x="1580" fg:w="3"/><text x="54.0281%" y="1135.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CTransactionSignatureSerializer&lt;CTransaction&gt; &gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="1109" width="0.0681%" height="15" fill="rgb(225,135,29)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1119.50"></text></g><g><title>Serialize&lt;HashWriter, (anonymous namespace)::CTransactionSignatureSerializer&lt;CTransaction&gt; &gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="1093" width="0.0681%" height="15" fill="rgb(252,45,31)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1103.50"></text></g><g><title>Serialize&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="1077" width="0.0681%" height="15" fill="rgb(211,187,50)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1087.50"></text></g><g><title>SerializeOutput&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="1061" width="0.0681%" height="15" fill="rgb(229,109,7)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1071.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxOut&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="1045" width="0.0681%" height="15" fill="rgb(251,131,51)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1055.50"></text></g><g><title>void CTxOut::Serialize&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="1029" width="0.0681%" height="15" fill="rgb(251,180,35)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1039.50"></text></g><g><title>void CTxOut::Ser&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="1013" width="0.0681%" height="15" fill="rgb(211,46,32)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1023.50"></text></g><g><title>void CTxOut::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="997" width="0.0681%" height="15" fill="rgb(248,123,17)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, long, CScript&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="981" width="0.0681%" height="15" fill="rgb(227,141,18)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="991.50"></text></g><g><title>void SerializeMany&lt;HashWriter, long, CScript&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="965" width="0.0681%" height="15" fill="rgb(216,102,9)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="975.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="949" width="0.0681%" height="15" fill="rgb(253,47,13)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="959.50"></text></g><g><title>void ser_writedata64&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="53.8121%" y="933" width="0.0681%" height="15" fill="rgb(226,93,23)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="943.50"></text></g><g><title>HashWriter::write (2 samples, 0.07%)</title><rect x="53.8121%" y="917" width="0.0681%" height="15" fill="rgb(247,104,17)" fg:x="1581" fg:w="2"/><text x="54.0621%" y="927.50"></text></g><g><title>uint256 SignatureHash&lt;CTransaction&gt; (1 samples, 0.03%)</title><rect x="53.8462%" y="901" width="0.0340%" height="15" fill="rgb(233,203,26)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="911.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CTransactionSignatureSerializer&lt;CTransaction&gt; &gt; (1 samples, 0.03%)</title><rect x="53.8462%" y="885" width="0.0340%" height="15" fill="rgb(244,98,49)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="895.50"></text></g><g><title>Serialize&lt;HashWriter, (anonymous namespace)::CTransactionSignatureSerializer&lt;CTransaction&gt; &gt; (1 samples, 0.03%)</title><rect x="53.8462%" y="869" width="0.0340%" height="15" fill="rgb(235,134,22)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="879.50"></text></g><g><title>Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="53.8462%" y="853" width="0.0340%" height="15" fill="rgb(221,70,32)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="863.50"></text></g><g><title>SerializeInput&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="53.8462%" y="837" width="0.0340%" height="15" fill="rgb(238,15,50)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="847.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="53.8462%" y="821" width="0.0340%" height="15" fill="rgb(215,221,48)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="831.50"></text></g><g><title>void ser_writedata32&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="53.8462%" y="805" width="0.0340%" height="15" fill="rgb(236,73,3)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="815.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="53.8462%" y="789" width="0.0340%" height="15" fill="rgb(250,107,11)" fg:x="1582" fg:w="1"/><text x="54.0962%" y="799.50"></text></g><g><title>CheckSignetBlockSolution (37 samples, 1.26%)</title><rect x="52.6549%" y="1205" width="1.2594%" height="15" fill="rgb(242,39,14)" fg:x="1547" fg:w="37"/><text x="52.9049%" y="1215.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::vector (1 samples, 0.03%)</title><rect x="53.8802%" y="1189" width="0.0340%" height="15" fill="rgb(248,164,37)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1199.50"></text></g><g><title>void std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_range_initialize&lt;CTxOut const*&gt; (1 samples, 0.03%)</title><rect x="53.8802%" y="1173" width="0.0340%" height="15" fill="rgb(217,60,12)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1183.50"></text></g><g><title>CTxOut* std::__uninitialized_copy_a&lt;CTxOut const*, CTxOut*, CTxOut&gt; (1 samples, 0.03%)</title><rect x="53.8802%" y="1157" width="0.0340%" height="15" fill="rgb(240,125,29)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1167.50"></text></g><g><title>CTxOut* std::uninitialized_copy&lt;CTxOut const*, CTxOut*&gt; (1 samples, 0.03%)</title><rect x="53.8802%" y="1141" width="0.0340%" height="15" fill="rgb(208,207,28)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1151.50"></text></g><g><title>CTxOut* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;CTxOut const*, CTxOut*&gt; (1 samples, 0.03%)</title><rect x="53.8802%" y="1125" width="0.0340%" height="15" fill="rgb(209,159,27)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1135.50"></text></g><g><title>CTxOut* std::__do_uninit_copy&lt;CTxOut const*, CTxOut*&gt; (1 samples, 0.03%)</title><rect x="53.8802%" y="1109" width="0.0340%" height="15" fill="rgb(251,176,53)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1119.50"></text></g><g><title>void std::_Construct&lt;CTxOut, CTxOut const&amp;&gt; (1 samples, 0.03%)</title><rect x="53.8802%" y="1093" width="0.0340%" height="15" fill="rgb(211,85,7)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.03%)</title><rect x="53.8802%" y="1077" width="0.0340%" height="15" fill="rgb(216,64,54)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1087.50"></text></g><g><title>CScript::CScript (1 samples, 0.03%)</title><rect x="53.8802%" y="1061" width="0.0340%" height="15" fill="rgb(217,54,24)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.03%)</title><rect x="53.8802%" y="1045" width="0.0340%" height="15" fill="rgb(208,206,53)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1055.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.03%)</title><rect x="53.8802%" y="1029" width="0.0340%" height="15" fill="rgb(251,74,39)" fg:x="1583" fg:w="1"/><text x="54.1302%" y="1039.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.03%)</title><rect x="53.9483%" y="1189" width="0.0340%" height="15" fill="rgb(226,47,5)" fg:x="1585" fg:w="1"/><text x="54.1983%" y="1199.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.03%)</title><rect x="53.9483%" y="1173" width="0.0340%" height="15" fill="rgb(234,111,33)" fg:x="1585" fg:w="1"/><text x="54.1983%" y="1183.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.03%)</title><rect x="53.9483%" y="1157" width="0.0340%" height="15" fill="rgb(251,14,10)" fg:x="1585" fg:w="1"/><text x="54.1983%" y="1167.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.03%)</title><rect x="53.9483%" y="1141" width="0.0340%" height="15" fill="rgb(232,43,0)" fg:x="1585" fg:w="1"/><text x="54.1983%" y="1151.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.03%)</title><rect x="53.9483%" y="1125" width="0.0340%" height="15" fill="rgb(222,68,43)" fg:x="1585" fg:w="1"/><text x="54.1983%" y="1135.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.03%)</title><rect x="53.9483%" y="1109" width="0.0340%" height="15" fill="rgb(217,24,23)" fg:x="1585" fg:w="1"/><text x="54.1983%" y="1119.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.03%)</title><rect x="53.9483%" y="1093" width="0.0340%" height="15" fill="rgb(229,209,14)" fg:x="1585" fg:w="1"/><text x="54.1983%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.03%)</title><rect x="53.9823%" y="1173" width="0.0340%" height="15" fill="rgb(250,149,48)" fg:x="1586" fg:w="1"/><text x="54.2323%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.03%)</title><rect x="53.9823%" y="1157" width="0.0340%" height="15" fill="rgb(210,120,37)" fg:x="1586" fg:w="1"/><text x="54.2323%" y="1167.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (2 samples, 0.07%)</title><rect x="53.9823%" y="1189" width="0.0681%" height="15" fill="rgb(210,21,8)" fg:x="1586" fg:w="2"/><text x="54.2323%" y="1199.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="54.0163%" y="1173" width="0.0340%" height="15" fill="rgb(243,145,7)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1183.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (1 samples, 0.03%)</title><rect x="54.0163%" y="1157" width="0.0340%" height="15" fill="rgb(238,178,32)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1167.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (1 samples, 0.03%)</title><rect x="54.0163%" y="1141" width="0.0340%" height="15" fill="rgb(222,4,10)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1151.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="54.0163%" y="1125" width="0.0340%" height="15" fill="rgb(239,7,37)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1135.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (1 samples, 0.03%)</title><rect x="54.0163%" y="1109" width="0.0340%" height="15" fill="rgb(215,31,37)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1119.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="54.0163%" y="1093" width="0.0340%" height="15" fill="rgb(224,83,33)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1103.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="54.0163%" y="1077" width="0.0340%" height="15" fill="rgb(239,55,3)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1087.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="54.0163%" y="1061" width="0.0340%" height="15" fill="rgb(247,92,11)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1071.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="54.0163%" y="1045" width="0.0340%" height="15" fill="rgb(239,200,7)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1055.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="54.0163%" y="1029" width="0.0340%" height="15" fill="rgb(227,115,8)" fg:x="1587" fg:w="1"/><text x="54.2663%" y="1039.50"></text></g><g><title>CheckTransaction (5 samples, 0.17%)</title><rect x="53.9142%" y="1205" width="0.1702%" height="15" fill="rgb(215,189,27)" fg:x="1584" fg:w="5"/><text x="54.1642%" y="1215.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (1 samples, 0.03%)</title><rect x="54.0504%" y="1189" width="0.0340%" height="15" fill="rgb(251,216,39)" fg:x="1588" fg:w="1"/><text x="54.3004%" y="1199.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (1 samples, 0.03%)</title><rect x="54.0504%" y="1173" width="0.0340%" height="15" fill="rgb(207,29,47)" fg:x="1588" fg:w="1"/><text x="54.3004%" y="1183.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.03%)</title><rect x="54.1525%" y="1157" width="0.0340%" height="15" fill="rgb(210,71,34)" fg:x="1591" fg:w="1"/><text x="54.4025%" y="1167.50"></text></g><g><title>CScript::GetSigOpCount (5 samples, 0.17%)</title><rect x="54.0844%" y="1189" width="0.1702%" height="15" fill="rgb(253,217,51)" fg:x="1589" fg:w="5"/><text x="54.3344%" y="1199.50"></text></g><g><title>CScript::GetOp (4 samples, 0.14%)</title><rect x="54.1184%" y="1173" width="0.1361%" height="15" fill="rgb(222,117,46)" fg:x="1590" fg:w="4"/><text x="54.3684%" y="1183.50"></text></g><g><title>GetScriptOp (2 samples, 0.07%)</title><rect x="54.1865%" y="1157" width="0.0681%" height="15" fill="rgb(226,132,6)" fg:x="1592" fg:w="2"/><text x="54.4365%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.2206%" y="1141" width="0.0340%" height="15" fill="rgb(254,145,51)" fg:x="1593" fg:w="1"/><text x="54.4706%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.2206%" y="1125" width="0.0340%" height="15" fill="rgb(231,199,27)" fg:x="1593" fg:w="1"/><text x="54.4706%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.2206%" y="1109" width="0.0340%" height="15" fill="rgb(245,158,14)" fg:x="1593" fg:w="1"/><text x="54.4706%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.2206%" y="1093" width="0.0340%" height="15" fill="rgb(240,113,14)" fg:x="1593" fg:w="1"/><text x="54.4706%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.2206%" y="1077" width="0.0340%" height="15" fill="rgb(210,20,13)" fg:x="1593" fg:w="1"/><text x="54.4706%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.2206%" y="1061" width="0.0340%" height="15" fill="rgb(241,144,13)" fg:x="1593" fg:w="1"/><text x="54.4706%" y="1071.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="54.2206%" y="1045" width="0.0340%" height="15" fill="rgb(235,43,34)" fg:x="1593" fg:w="1"/><text x="54.4706%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator+ (2 samples, 0.07%)</title><rect x="54.3567%" y="1173" width="0.0681%" height="15" fill="rgb(208,36,20)" fg:x="1597" fg:w="2"/><text x="54.6067%" y="1183.50"></text></g><g><title>GetLegacySigOpCount (11 samples, 0.37%)</title><rect x="54.0844%" y="1205" width="0.3744%" height="15" fill="rgb(239,204,10)" fg:x="1589" fg:w="11"/><text x="54.3344%" y="1215.50"></text></g><g><title>GetScriptOp (6 samples, 0.20%)</title><rect x="54.2546%" y="1189" width="0.2042%" height="15" fill="rgb(217,84,43)" fg:x="1594" fg:w="6"/><text x="54.5046%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator+= (1 samples, 0.03%)</title><rect x="54.4248%" y="1173" width="0.0340%" height="15" fill="rgb(241,170,50)" fg:x="1599" fg:w="1"/><text x="54.6748%" y="1183.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (1 samples, 0.03%)</title><rect x="54.4588%" y="1205" width="0.0340%" height="15" fill="rgb(226,205,29)" fg:x="1600" fg:w="1"/><text x="54.7088%" y="1215.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="54.4929%" y="901" width="0.0340%" height="15" fill="rgb(233,113,1)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.03%)</title><rect x="54.4929%" y="885" width="0.0340%" height="15" fill="rgb(253,98,13)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="54.4929%" y="869" width="0.0340%" height="15" fill="rgb(211,115,12)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.4929%" y="853" width="0.0340%" height="15" fill="rgb(208,12,16)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="54.4929%" y="837" width="0.0340%" height="15" fill="rgb(237,193,54)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="847.50"></text></g><g><title>CheckBlock (1 samples, 0.03%)</title><rect x="54.4929%" y="821" width="0.0340%" height="15" fill="rgb(243,22,42)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="831.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::empty (1 samples, 0.03%)</title><rect x="54.4929%" y="805" width="0.0340%" height="15" fill="rgb(233,151,36)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="815.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::end (1 samples, 0.03%)</title><rect x="54.4929%" y="789" width="0.0340%" height="15" fill="rgb(237,57,45)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="799.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;CTransaction const&gt; const*, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.03%)</title><rect x="54.4929%" y="773" width="0.0340%" height="15" fill="rgb(221,88,17)" fg:x="1601" fg:w="1"/><text x="54.7429%" y="783.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1205" width="0.1021%" height="15" fill="rgb(230,79,15)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1215.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (3 samples, 0.10%)</title><rect x="54.4929%" y="1189" width="0.1021%" height="15" fill="rgb(213,57,13)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1199.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1173" width="0.1021%" height="15" fill="rgb(222,116,39)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1183.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1157" width="0.1021%" height="15" fill="rgb(245,107,2)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1141" width="0.1021%" height="15" fill="rgb(238,1,10)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1151.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1125" width="0.1021%" height="15" fill="rgb(249,4,48)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1135.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1109" width="0.1021%" height="15" fill="rgb(223,151,18)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1119.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1093" width="0.1021%" height="15" fill="rgb(227,65,43)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1077" width="0.1021%" height="15" fill="rgb(218,40,45)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1087.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1061" width="0.1021%" height="15" fill="rgb(252,121,31)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1045" width="0.1021%" height="15" fill="rgb(219,158,43)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1029" width="0.1021%" height="15" fill="rgb(231,162,42)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1039.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="1013" width="0.1021%" height="15" fill="rgb(217,179,25)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1023.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="997" width="0.1021%" height="15" fill="rgb(206,212,31)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="1007.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="981" width="0.1021%" height="15" fill="rgb(235,144,12)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="965" width="0.1021%" height="15" fill="rgb(213,51,10)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="949" width="0.1021%" height="15" fill="rgb(231,145,14)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="959.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="933" width="0.1021%" height="15" fill="rgb(235,15,28)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="943.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (3 samples, 0.10%)</title><rect x="54.4929%" y="917" width="0.1021%" height="15" fill="rgb(237,206,10)" fg:x="1601" fg:w="3"/><text x="54.7429%" y="927.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="54.5269%" y="901" width="0.0681%" height="15" fill="rgb(236,227,27)" fg:x="1602" fg:w="2"/><text x="54.7769%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.07%)</title><rect x="54.5269%" y="885" width="0.0681%" height="15" fill="rgb(246,83,35)" fg:x="1602" fg:w="2"/><text x="54.7769%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="54.5269%" y="869" width="0.0681%" height="15" fill="rgb(220,136,24)" fg:x="1602" fg:w="2"/><text x="54.7769%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="54.5269%" y="853" width="0.0681%" height="15" fill="rgb(217,3,25)" fg:x="1602" fg:w="2"/><text x="54.7769%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="54.5269%" y="837" width="0.0681%" height="15" fill="rgb(239,24,14)" fg:x="1602" fg:w="2"/><text x="54.7769%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="821" width="0.0340%" height="15" fill="rgb(244,16,53)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="805" width="0.0340%" height="15" fill="rgb(208,175,44)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="815.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="789" width="0.0340%" height="15" fill="rgb(252,18,48)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="799.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="773" width="0.0340%" height="15" fill="rgb(234,199,32)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="783.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="757" width="0.0340%" height="15" fill="rgb(225,77,54)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="741" width="0.0340%" height="15" fill="rgb(225,42,25)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="725" width="0.0340%" height="15" fill="rgb(242,227,46)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="709" width="0.0340%" height="15" fill="rgb(246,197,35)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="693" width="0.0340%" height="15" fill="rgb(215,159,26)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="677" width="0.0340%" height="15" fill="rgb(212,194,50)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="661" width="0.0340%" height="15" fill="rgb(246,132,1)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="645" width="0.0340%" height="15" fill="rgb(217,71,7)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="629" width="0.0340%" height="15" fill="rgb(252,59,32)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="54.5609%" y="613" width="0.0340%" height="15" fill="rgb(253,204,25)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.03%)</title><rect x="54.5609%" y="597" width="0.0340%" height="15" fill="rgb(232,21,16)" fg:x="1603" fg:w="1"/><text x="54.8109%" y="607.50"></text></g><g><title>CheckBlock (59 samples, 2.01%)</title><rect x="52.6208%" y="1221" width="2.0082%" height="15" fill="rgb(248,90,29)" fg:x="1546" fg:w="59"/><text x="52.8708%" y="1231.50">C..</text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.5950%" y="1205" width="0.0340%" height="15" fill="rgb(249,223,7)" fg:x="1604" fg:w="1"/><text x="54.8450%" y="1215.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1,064 samples, 36.22%)</title><rect x="18.4479%" y="1237" width="36.2151%" height="15" fill="rgb(231,119,42)" fg:x="542" fg:w="1064"/><text x="18.6979%" y="1247.50">ChainstateManager::ProcessNewBlock</text></g><g><title>ValidationSignals::BlockConnected (1 samples, 0.03%)</title><rect x="54.6290%" y="1221" width="0.0340%" height="15" fill="rgb(215,41,35)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1231.50"></text></g><g><title>~&lt;lambda&gt; (1 samples, 0.03%)</title><rect x="54.6290%" y="1205" width="0.0340%" height="15" fill="rgb(220,44,45)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1215.50"></text></g><g><title>~&lt;lambda&gt; (1 samples, 0.03%)</title><rect x="54.6290%" y="1189" width="0.0340%" height="15" fill="rgb(253,197,36)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1199.50"></text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (1 samples, 0.03%)</title><rect x="54.6290%" y="1173" width="0.0340%" height="15" fill="rgb(245,225,54)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1183.50"></text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.03%)</title><rect x="54.6290%" y="1157" width="0.0340%" height="15" fill="rgb(239,94,37)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1167.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.03%)</title><rect x="54.6290%" y="1141" width="0.0340%" height="15" fill="rgb(242,217,10)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1151.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.03%)</title><rect x="54.6290%" y="1125" width="0.0340%" height="15" fill="rgb(250,193,7)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1135.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.03%)</title><rect x="54.6290%" y="1109" width="0.0340%" height="15" fill="rgb(230,104,19)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1119.50"></text></g><g><title>__gnu_cxx::__exchange_and_add (1 samples, 0.03%)</title><rect x="54.6290%" y="1093" width="0.0340%" height="15" fill="rgb(230,181,4)" fg:x="1605" fg:w="1"/><text x="54.8790%" y="1103.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (1 samples, 0.03%)</title><rect x="54.6630%" y="1205" width="0.0340%" height="15" fill="rgb(216,219,49)" fg:x="1606" fg:w="1"/><text x="54.9130%" y="1215.50"></text></g><g><title>GetBlockProof (1 samples, 0.03%)</title><rect x="54.6630%" y="1189" width="0.0340%" height="15" fill="rgb(254,144,0)" fg:x="1606" fg:w="1"/><text x="54.9130%" y="1199.50"></text></g><g><title>operator/ (1 samples, 0.03%)</title><rect x="54.6630%" y="1173" width="0.0340%" height="15" fill="rgb(205,209,38)" fg:x="1606" fg:w="1"/><text x="54.9130%" y="1183.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.03%)</title><rect x="54.6630%" y="1157" width="0.0340%" height="15" fill="rgb(240,21,42)" fg:x="1606" fg:w="1"/><text x="54.9130%" y="1167.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="54.6971%" y="1141" width="0.0340%" height="15" fill="rgb(241,132,3)" fg:x="1607" fg:w="1"/><text x="54.9471%" y="1151.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="54.6971%" y="1125" width="0.0340%" height="15" fill="rgb(225,14,2)" fg:x="1607" fg:w="1"/><text x="54.9471%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="54.6971%" y="1109" width="0.0340%" height="15" fill="rgb(210,141,35)" fg:x="1607" fg:w="1"/><text x="54.9471%" y="1119.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="54.6971%" y="1093" width="0.0340%" height="15" fill="rgb(251,14,44)" fg:x="1607" fg:w="1"/><text x="54.9471%" y="1103.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="54.6971%" y="1077" width="0.0340%" height="15" fill="rgb(247,48,18)" fg:x="1607" fg:w="1"/><text x="54.9471%" y="1087.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="54.6971%" y="1061" width="0.0340%" height="15" fill="rgb(225,0,40)" fg:x="1607" fg:w="1"/><text x="54.9471%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::insert (1 samples, 0.03%)</title><rect x="54.7311%" y="1141" width="0.0340%" height="15" fill="rgb(221,31,33)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1151.50"></text></g><g><title>BCLog::Logger::GetLogPrefix[abi:cxx11] (1 samples, 0.03%)</title><rect x="54.7311%" y="1125" width="0.0340%" height="15" fill="rgb(237,42,40)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.03%)</title><rect x="54.7311%" y="1109" width="0.0340%" height="15" fill="rgb(233,51,29)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.03%)</title><rect x="54.7311%" y="1093" width="0.0340%" height="15" fill="rgb(226,58,20)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.03%)</title><rect x="54.7311%" y="1077" width="0.0340%" height="15" fill="rgb(208,98,7)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.03%)</title><rect x="54.7311%" y="1061" width="0.0340%" height="15" fill="rgb(228,143,44)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.03%)</title><rect x="54.7311%" y="1045" width="0.0340%" height="15" fill="rgb(246,55,38)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (1 samples, 0.03%)</title><rect x="54.7311%" y="1029" width="0.0340%" height="15" fill="rgb(247,87,16)" fg:x="1608" fg:w="1"/><text x="54.9811%" y="1039.50"></text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (4 samples, 0.14%)</title><rect x="54.6630%" y="1237" width="0.1361%" height="15" fill="rgb(234,129,42)" fg:x="1606" fg:w="4"/><text x="54.9130%" y="1247.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (4 samples, 0.14%)</title><rect x="54.6630%" y="1221" width="0.1361%" height="15" fill="rgb(220,82,16)" fg:x="1606" fg:w="4"/><text x="54.9130%" y="1231.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="54.6971%" y="1205" width="0.1021%" height="15" fill="rgb(211,88,4)" fg:x="1607" fg:w="3"/><text x="54.9471%" y="1215.50"></text></g><g><title>BCLog::Logger::LogPrintStr (3 samples, 0.10%)</title><rect x="54.6971%" y="1189" width="0.1021%" height="15" fill="rgb(248,151,21)" fg:x="1607" fg:w="3"/><text x="54.9471%" y="1199.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (3 samples, 0.10%)</title><rect x="54.6971%" y="1173" width="0.1021%" height="15" fill="rgb(238,163,6)" fg:x="1607" fg:w="3"/><text x="54.9471%" y="1183.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (3 samples, 0.10%)</title><rect x="54.6971%" y="1157" width="0.1021%" height="15" fill="rgb(209,183,11)" fg:x="1607" fg:w="3"/><text x="54.9471%" y="1167.50"></text></g><g><title>util::ThreadGetInternalName[abi:cxx11] (1 samples, 0.03%)</title><rect x="54.7651%" y="1141" width="0.0340%" height="15" fill="rgb(219,37,20)" fg:x="1609" fg:w="1"/><text x="55.0151%" y="1151.50"></text></g><g><title>CheckHeadersPoW (1 samples, 0.03%)</title><rect x="54.7992%" y="1237" width="0.0340%" height="15" fill="rgb(210,158,4)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1247.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.03%)</title><rect x="54.7992%" y="1221" width="0.0340%" height="15" fill="rgb(221,167,53)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1231.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (1 samples, 0.03%)</title><rect x="54.7992%" y="1205" width="0.0340%" height="15" fill="rgb(237,151,45)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1215.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1189" width="0.0340%" height="15" fill="rgb(231,39,3)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1199.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1173" width="0.0340%" height="15" fill="rgb(212,167,28)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1183.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1157" width="0.0340%" height="15" fill="rgb(232,178,8)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1167.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1141" width="0.0340%" height="15" fill="rgb(225,151,20)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1125" width="0.0340%" height="15" fill="rgb(238,3,37)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1135.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1109" width="0.0340%" height="15" fill="rgb(251,147,42)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1119.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1093" width="0.0340%" height="15" fill="rgb(208,173,10)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1103.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1077" width="0.0340%" height="15" fill="rgb(246,225,4)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1087.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.03%)</title><rect x="54.7992%" y="1061" width="0.0340%" height="15" fill="rgb(248,102,6)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1071.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (1 samples, 0.03%)</title><rect x="54.7992%" y="1045" width="0.0340%" height="15" fill="rgb(232,6,21)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1055.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="54.7992%" y="1029" width="0.0340%" height="15" fill="rgb(221,179,22)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1039.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="54.7992%" y="1013" width="0.0340%" height="15" fill="rgb(252,50,20)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1023.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="54.7992%" y="997" width="0.0340%" height="15" fill="rgb(222,56,38)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="1007.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="54.7992%" y="981" width="0.0340%" height="15" fill="rgb(206,193,29)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="991.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="54.7992%" y="965" width="0.0340%" height="15" fill="rgb(239,192,45)" fg:x="1610" fg:w="1"/><text x="55.0492%" y="975.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="54.8332%" y="1013" width="0.0340%" height="15" fill="rgb(254,18,36)" fg:x="1611" fg:w="1"/><text x="55.0832%" y="1023.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="54.9013%" y="757" width="0.0681%" height="15" fill="rgb(221,127,11)" fg:x="1613" fg:w="2"/><text x="55.1513%" y="767.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="54.9013%" y="741" width="0.0681%" height="15" fill="rgb(234,146,35)" fg:x="1613" fg:w="2"/><text x="55.1513%" y="751.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="54.9013%" y="725" width="0.0681%" height="15" fill="rgb(254,201,37)" fg:x="1613" fg:w="2"/><text x="55.1513%" y="735.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="54.9013%" y="709" width="0.0681%" height="15" fill="rgb(211,202,23)" fg:x="1613" fg:w="2"/><text x="55.1513%" y="719.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="54.9013%" y="693" width="0.0681%" height="15" fill="rgb(237,91,2)" fg:x="1613" fg:w="2"/><text x="55.1513%" y="703.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="54.9013%" y="677" width="0.0681%" height="15" fill="rgb(226,228,36)" fg:x="1613" fg:w="2"/><text x="55.1513%" y="687.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="661" width="0.0340%" height="15" fill="rgb(213,63,50)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="671.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="645" width="0.0340%" height="15" fill="rgb(235,194,19)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="655.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="629" width="0.0340%" height="15" fill="rgb(207,204,18)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="639.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="613" width="0.0340%" height="15" fill="rgb(248,8,7)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="623.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="597" width="0.0340%" height="15" fill="rgb(223,145,47)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="607.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="581" width="0.0340%" height="15" fill="rgb(228,84,11)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="591.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="54.9353%" y="565" width="0.0340%" height="15" fill="rgb(218,76,45)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="575.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="549" width="0.0340%" height="15" fill="rgb(223,80,15)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="533" width="0.0340%" height="15" fill="rgb(219,218,33)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="54.9353%" y="517" width="0.0340%" height="15" fill="rgb(208,51,11)" fg:x="1614" fg:w="1"/><text x="55.1853%" y="527.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.03%)</title><rect x="54.9694%" y="613" width="0.0340%" height="15" fill="rgb(229,165,39)" fg:x="1615" fg:w="1"/><text x="55.2194%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="54.9694%" y="597" width="0.0340%" height="15" fill="rgb(241,100,24)" fg:x="1615" fg:w="1"/><text x="55.2194%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (4 samples, 0.14%)</title><rect x="54.9013%" y="821" width="0.1361%" height="15" fill="rgb(228,14,23)" fg:x="1613" fg:w="4"/><text x="55.1513%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (4 samples, 0.14%)</title><rect x="54.9013%" y="805" width="0.1361%" height="15" fill="rgb(247,116,52)" fg:x="1613" fg:w="4"/><text x="55.1513%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (4 samples, 0.14%)</title><rect x="54.9013%" y="789" width="0.1361%" height="15" fill="rgb(216,149,33)" fg:x="1613" fg:w="4"/><text x="55.1513%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="54.9013%" y="773" width="0.1361%" height="15" fill="rgb(238,142,29)" fg:x="1613" fg:w="4"/><text x="55.1513%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="54.9694%" y="757" width="0.0681%" height="15" fill="rgb(224,83,40)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="767.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (2 samples, 0.07%)</title><rect x="54.9694%" y="741" width="0.0681%" height="15" fill="rgb(234,165,11)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="751.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="54.9694%" y="725" width="0.0681%" height="15" fill="rgb(215,96,23)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="735.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="54.9694%" y="709" width="0.0681%" height="15" fill="rgb(233,179,26)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="719.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (2 samples, 0.07%)</title><rect x="54.9694%" y="693" width="0.0681%" height="15" fill="rgb(225,129,33)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="703.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (2 samples, 0.07%)</title><rect x="54.9694%" y="677" width="0.0681%" height="15" fill="rgb(237,49,13)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="687.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (2 samples, 0.07%)</title><rect x="54.9694%" y="661" width="0.0681%" height="15" fill="rgb(211,3,31)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="671.50"></text></g><g><title>operator new (2 samples, 0.07%)</title><rect x="54.9694%" y="645" width="0.0681%" height="15" fill="rgb(216,152,19)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="655.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="54.9694%" y="629" width="0.0681%" height="15" fill="rgb(251,121,35)" fg:x="1615" fg:w="2"/><text x="55.2194%" y="639.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="55.0034%" y="613" width="0.0340%" height="15" fill="rgb(210,217,47)" fg:x="1616" fg:w="1"/><text x="55.2534%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="757" width="0.0340%" height="15" fill="rgb(244,116,22)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="767.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="741" width="0.0340%" height="15" fill="rgb(228,17,21)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="725" width="0.0340%" height="15" fill="rgb(240,149,34)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="735.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="709" width="0.0340%" height="15" fill="rgb(208,125,47)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="719.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="693" width="0.0340%" height="15" fill="rgb(249,186,39)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="703.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="677" width="0.0340%" height="15" fill="rgb(240,220,33)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="661" width="0.0340%" height="15" fill="rgb(243,110,23)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="645" width="0.0340%" height="15" fill="rgb(219,163,46)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="629" width="0.0340%" height="15" fill="rgb(216,126,30)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="639.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="613" width="0.0340%" height="15" fill="rgb(208,139,11)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="623.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="597" width="0.0340%" height="15" fill="rgb(213,118,36)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="607.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="581" width="0.0340%" height="15" fill="rgb(226,43,17)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="591.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="565" width="0.0340%" height="15" fill="rgb(254,217,4)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="575.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="549" width="0.0340%" height="15" fill="rgb(210,134,47)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="533" width="0.0340%" height="15" fill="rgb(237,24,49)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="543.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="517" width="0.0340%" height="15" fill="rgb(251,39,46)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="527.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.0374%" y="501" width="0.0340%" height="15" fill="rgb(251,220,3)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="511.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.03%)</title><rect x="55.0374%" y="485" width="0.0340%" height="15" fill="rgb(228,105,12)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="495.50"></text></g><g><title>DataStream::read (1 samples, 0.03%)</title><rect x="55.0374%" y="469" width="0.0340%" height="15" fill="rgb(215,196,1)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="479.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.03%)</title><rect x="55.0374%" y="453" width="0.0340%" height="15" fill="rgb(214,33,39)" fg:x="1617" fg:w="1"/><text x="55.2874%" y="463.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (3 samples, 0.10%)</title><rect x="55.0715%" y="741" width="0.1021%" height="15" fill="rgb(220,19,52)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="751.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (3 samples, 0.10%)</title><rect x="55.0715%" y="725" width="0.1021%" height="15" fill="rgb(221,78,38)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="735.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (3 samples, 0.10%)</title><rect x="55.0715%" y="709" width="0.1021%" height="15" fill="rgb(253,30,16)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="719.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (3 samples, 0.10%)</title><rect x="55.0715%" y="693" width="0.1021%" height="15" fill="rgb(242,65,0)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="703.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (3 samples, 0.10%)</title><rect x="55.0715%" y="677" width="0.1021%" height="15" fill="rgb(235,201,12)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="687.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (3 samples, 0.10%)</title><rect x="55.0715%" y="661" width="0.1021%" height="15" fill="rgb(233,161,9)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="671.50"></text></g><g><title>operator new (3 samples, 0.10%)</title><rect x="55.0715%" y="645" width="0.1021%" height="15" fill="rgb(241,207,41)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="655.50"></text></g><g><title>malloc (3 samples, 0.10%)</title><rect x="55.0715%" y="629" width="0.1021%" height="15" fill="rgb(212,69,46)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="639.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="55.0715%" y="613" width="0.1021%" height="15" fill="rgb(239,69,45)" fg:x="1618" fg:w="3"/><text x="55.3215%" y="623.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="55.1396%" y="597" width="0.0340%" height="15" fill="rgb(242,117,48)" fg:x="1620" fg:w="1"/><text x="55.3896%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (4 samples, 0.14%)</title><rect x="55.1736%" y="517" width="0.1361%" height="15" fill="rgb(228,41,36)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="527.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (4 samples, 0.14%)</title><rect x="55.1736%" y="501" width="0.1361%" height="15" fill="rgb(212,3,32)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="511.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (4 samples, 0.14%)</title><rect x="55.1736%" y="485" width="0.1361%" height="15" fill="rgb(233,41,49)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.1736%" y="469" width="0.1361%" height="15" fill="rgb(252,170,49)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.1736%" y="453" width="0.1361%" height="15" fill="rgb(229,53,26)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.1736%" y="437" width="0.1361%" height="15" fill="rgb(217,157,12)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.1736%" y="421" width="0.1361%" height="15" fill="rgb(227,17,9)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.1736%" y="405" width="0.1361%" height="15" fill="rgb(218,84,12)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.1736%" y="389" width="0.1361%" height="15" fill="rgb(212,79,24)" fg:x="1621" fg:w="4"/><text x="55.4236%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.2076%" y="373" width="0.1021%" height="15" fill="rgb(217,222,37)" fg:x="1622" fg:w="3"/><text x="55.4576%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.2076%" y="357" width="0.1021%" height="15" fill="rgb(246,208,8)" fg:x="1622" fg:w="3"/><text x="55.4576%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.2076%" y="341" width="0.1021%" height="15" fill="rgb(244,133,10)" fg:x="1622" fg:w="3"/><text x="55.4576%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.2076%" y="325" width="0.1021%" height="15" fill="rgb(209,219,41)" fg:x="1622" fg:w="3"/><text x="55.4576%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.2076%" y="309" width="0.1021%" height="15" fill="rgb(253,175,45)" fg:x="1622" fg:w="3"/><text x="55.4576%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.2076%" y="293" width="0.1021%" height="15" fill="rgb(235,100,37)" fg:x="1622" fg:w="3"/><text x="55.4576%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.2076%" y="277" width="0.1021%" height="15" fill="rgb(225,87,19)" fg:x="1622" fg:w="3"/><text x="55.4576%" y="287.50"></text></g><g><title>__lll_lock_wake_private (2 samples, 0.07%)</title><rect x="55.3097%" y="453" width="0.0681%" height="15" fill="rgb(217,152,17)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="55.3097%" y="437" width="0.0681%" height="15" fill="rgb(235,72,13)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="55.3097%" y="421" width="0.0681%" height="15" fill="rgb(233,140,18)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="55.3097%" y="405" width="0.0681%" height="15" fill="rgb(207,212,28)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="55.3097%" y="389" width="0.0681%" height="15" fill="rgb(220,130,25)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="55.3097%" y="373" width="0.0681%" height="15" fill="rgb(205,55,34)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="55.3097%" y="357" width="0.0681%" height="15" fill="rgb(237,54,35)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="55.3097%" y="341" width="0.0681%" height="15" fill="rgb(208,67,23)" fg:x="1625" fg:w="2"/><text x="55.5597%" y="351.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (3 samples, 0.10%)</title><rect x="55.3097%" y="517" width="0.1021%" height="15" fill="rgb(206,207,50)" fg:x="1625" fg:w="3"/><text x="55.5597%" y="527.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (3 samples, 0.10%)</title><rect x="55.3097%" y="501" width="0.1021%" height="15" fill="rgb(213,211,42)" fg:x="1625" fg:w="3"/><text x="55.5597%" y="511.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (3 samples, 0.10%)</title><rect x="55.3097%" y="485" width="0.1021%" height="15" fill="rgb(252,197,50)" fg:x="1625" fg:w="3"/><text x="55.5597%" y="495.50"></text></g><g><title>malloc (3 samples, 0.10%)</title><rect x="55.3097%" y="469" width="0.1021%" height="15" fill="rgb(251,211,41)" fg:x="1625" fg:w="3"/><text x="55.5597%" y="479.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="55.3778%" y="453" width="0.0340%" height="15" fill="rgb(229,211,5)" fg:x="1627" fg:w="1"/><text x="55.6278%" y="463.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.3778%" y="437" width="0.0340%" height="15" fill="rgb(239,36,31)" fg:x="1627" fg:w="1"/><text x="55.6278%" y="447.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (8 samples, 0.27%)</title><rect x="55.1736%" y="533" width="0.2723%" height="15" fill="rgb(248,67,31)" fg:x="1621" fg:w="8"/><text x="55.4236%" y="543.50"></text></g><g><title>unsigned int const&amp; std::min&lt;unsigned int&gt; (1 samples, 0.03%)</title><rect x="55.4118%" y="517" width="0.0340%" height="15" fill="rgb(249,55,44)" fg:x="1628" fg:w="1"/><text x="55.6618%" y="527.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (13 samples, 0.44%)</title><rect x="55.0374%" y="821" width="0.4425%" height="15" fill="rgb(216,82,12)" fg:x="1617" fg:w="13"/><text x="55.2874%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (13 samples, 0.44%)</title><rect x="55.0374%" y="805" width="0.4425%" height="15" fill="rgb(242,174,1)" fg:x="1617" fg:w="13"/><text x="55.2874%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (13 samples, 0.44%)</title><rect x="55.0374%" y="789" width="0.4425%" height="15" fill="rgb(208,120,29)" fg:x="1617" fg:w="13"/><text x="55.2874%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (13 samples, 0.44%)</title><rect x="55.0374%" y="773" width="0.4425%" height="15" fill="rgb(221,105,43)" fg:x="1617" fg:w="13"/><text x="55.2874%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (12 samples, 0.41%)</title><rect x="55.0715%" y="757" width="0.4084%" height="15" fill="rgb(234,124,22)" fg:x="1618" fg:w="12"/><text x="55.3215%" y="767.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="741" width="0.3063%" height="15" fill="rgb(212,23,30)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="725" width="0.3063%" height="15" fill="rgb(219,122,53)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="735.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="709" width="0.3063%" height="15" fill="rgb(248,84,24)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="719.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="693" width="0.3063%" height="15" fill="rgb(245,115,18)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="703.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="677" width="0.3063%" height="15" fill="rgb(227,176,51)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="661" width="0.3063%" height="15" fill="rgb(229,63,42)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="645" width="0.3063%" height="15" fill="rgb(247,202,24)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="629" width="0.3063%" height="15" fill="rgb(244,173,20)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="639.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="613" width="0.3063%" height="15" fill="rgb(242,81,47)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="623.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="597" width="0.3063%" height="15" fill="rgb(231,185,54)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="581" width="0.3063%" height="15" fill="rgb(243,55,32)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="591.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="565" width="0.3063%" height="15" fill="rgb(208,167,19)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="575.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (9 samples, 0.31%)</title><rect x="55.1736%" y="549" width="0.3063%" height="15" fill="rgb(231,72,35)" fg:x="1621" fg:w="9"/><text x="55.4236%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="533" width="0.0340%" height="15" fill="rgb(250,173,51)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="543.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="517" width="0.0340%" height="15" fill="rgb(209,5,22)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="501" width="0.0340%" height="15" fill="rgb(250,174,19)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="511.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="485" width="0.0340%" height="15" fill="rgb(217,3,49)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="495.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="469" width="0.0340%" height="15" fill="rgb(218,225,5)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="479.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="453" width="0.0340%" height="15" fill="rgb(236,89,11)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="463.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="437" width="0.0340%" height="15" fill="rgb(206,33,28)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="447.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="421" width="0.0340%" height="15" fill="rgb(241,56,42)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="431.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="405" width="0.0340%" height="15" fill="rgb(222,44,11)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="415.50"></text></g><g><title>unsigned long ser_readdata64&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.4459%" y="389" width="0.0340%" height="15" fill="rgb(234,111,20)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="399.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.03%)</title><rect x="55.4459%" y="373" width="0.0340%" height="15" fill="rgb(237,77,6)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="383.50"></text></g><g><title>DataStream::read (1 samples, 0.03%)</title><rect x="55.4459%" y="357" width="0.0340%" height="15" fill="rgb(235,111,23)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="367.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.03%)</title><rect x="55.4459%" y="341" width="0.0340%" height="15" fill="rgb(251,135,29)" fg:x="1629" fg:w="1"/><text x="55.6959%" y="351.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (4 samples, 0.14%)</title><rect x="55.5140%" y="741" width="0.1361%" height="15" fill="rgb(217,57,1)" fg:x="1631" fg:w="4"/><text x="55.7640%" y="751.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (3 samples, 0.10%)</title><rect x="55.5480%" y="725" width="0.1021%" height="15" fill="rgb(249,119,31)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="735.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (3 samples, 0.10%)</title><rect x="55.5480%" y="709" width="0.1021%" height="15" fill="rgb(233,164,33)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="719.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (3 samples, 0.10%)</title><rect x="55.5480%" y="693" width="0.1021%" height="15" fill="rgb(250,217,43)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="703.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (3 samples, 0.10%)</title><rect x="55.5480%" y="677" width="0.1021%" height="15" fill="rgb(232,154,50)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="687.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (3 samples, 0.10%)</title><rect x="55.5480%" y="661" width="0.1021%" height="15" fill="rgb(227,190,8)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="671.50"></text></g><g><title>operator new (3 samples, 0.10%)</title><rect x="55.5480%" y="645" width="0.1021%" height="15" fill="rgb(209,217,32)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="655.50"></text></g><g><title>malloc (3 samples, 0.10%)</title><rect x="55.5480%" y="629" width="0.1021%" height="15" fill="rgb(243,203,50)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="639.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="55.5480%" y="613" width="0.1021%" height="15" fill="rgb(232,152,27)" fg:x="1632" fg:w="3"/><text x="55.7980%" y="623.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.03%)</title><rect x="55.6501%" y="741" width="0.0340%" height="15" fill="rgb(240,34,29)" fg:x="1635" fg:w="1"/><text x="55.9001%" y="751.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (8 samples, 0.27%)</title><rect x="55.6841%" y="693" width="0.2723%" height="15" fill="rgb(215,185,52)" fg:x="1636" fg:w="8"/><text x="55.9341%" y="703.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (7 samples, 0.24%)</title><rect x="55.7182%" y="677" width="0.2383%" height="15" fill="rgb(240,89,49)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="687.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (7 samples, 0.24%)</title><rect x="55.7182%" y="661" width="0.2383%" height="15" fill="rgb(225,12,52)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="671.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (7 samples, 0.24%)</title><rect x="55.7182%" y="645" width="0.2383%" height="15" fill="rgb(239,128,45)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="655.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (7 samples, 0.24%)</title><rect x="55.7182%" y="629" width="0.2383%" height="15" fill="rgb(211,78,47)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="639.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (7 samples, 0.24%)</title><rect x="55.7182%" y="613" width="0.2383%" height="15" fill="rgb(232,31,21)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="623.50"></text></g><g><title>operator new (7 samples, 0.24%)</title><rect x="55.7182%" y="597" width="0.2383%" height="15" fill="rgb(222,168,14)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="607.50"></text></g><g><title>malloc (7 samples, 0.24%)</title><rect x="55.7182%" y="581" width="0.2383%" height="15" fill="rgb(209,128,24)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="591.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.24%)</title><rect x="55.7182%" y="565" width="0.2383%" height="15" fill="rgb(249,35,13)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="575.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="55.7182%" y="549" width="0.2383%" height="15" fill="rgb(218,7,2)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="55.7182%" y="533" width="0.2383%" height="15" fill="rgb(238,107,27)" fg:x="1637" fg:w="7"/><text x="55.9682%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="55.7522%" y="517" width="0.2042%" height="15" fill="rgb(217,88,38)" fg:x="1638" fg:w="6"/><text x="56.0022%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="55.7522%" y="501" width="0.2042%" height="15" fill="rgb(230,207,0)" fg:x="1638" fg:w="6"/><text x="56.0022%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="55.7522%" y="485" width="0.2042%" height="15" fill="rgb(249,64,54)" fg:x="1638" fg:w="6"/><text x="56.0022%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="55.7522%" y="469" width="0.2042%" height="15" fill="rgb(231,7,11)" fg:x="1638" fg:w="6"/><text x="56.0022%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="55.7522%" y="453" width="0.2042%" height="15" fill="rgb(205,149,21)" fg:x="1638" fg:w="6"/><text x="56.0022%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.8203%" y="437" width="0.1361%" height="15" fill="rgb(215,126,34)" fg:x="1640" fg:w="4"/><text x="56.0703%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="55.8203%" y="421" width="0.1361%" height="15" fill="rgb(241,132,45)" fg:x="1640" fg:w="4"/><text x="56.0703%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.8543%" y="405" width="0.1021%" height="15" fill="rgb(252,69,32)" fg:x="1641" fg:w="3"/><text x="56.1043%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="55.8543%" y="389" width="0.1021%" height="15" fill="rgb(232,204,19)" fg:x="1641" fg:w="3"/><text x="56.1043%" y="399.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.9564%" y="693" width="0.0340%" height="15" fill="rgb(249,15,47)" fg:x="1644" fg:w="1"/><text x="56.2064%" y="703.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (16 samples, 0.54%)</title><rect x="55.4799%" y="821" width="0.5446%" height="15" fill="rgb(209,227,23)" fg:x="1630" fg:w="16"/><text x="55.7299%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (16 samples, 0.54%)</title><rect x="55.4799%" y="805" width="0.5446%" height="15" fill="rgb(248,92,24)" fg:x="1630" fg:w="16"/><text x="55.7299%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (16 samples, 0.54%)</title><rect x="55.4799%" y="789" width="0.5446%" height="15" fill="rgb(247,59,2)" fg:x="1630" fg:w="16"/><text x="55.7299%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (16 samples, 0.54%)</title><rect x="55.4799%" y="773" width="0.5446%" height="15" fill="rgb(221,30,5)" fg:x="1630" fg:w="16"/><text x="55.7299%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (16 samples, 0.54%)</title><rect x="55.4799%" y="757" width="0.5446%" height="15" fill="rgb(208,108,53)" fg:x="1630" fg:w="16"/><text x="55.7299%" y="767.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (10 samples, 0.34%)</title><rect x="55.6841%" y="741" width="0.3404%" height="15" fill="rgb(211,183,26)" fg:x="1636" fg:w="10"/><text x="55.9341%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (10 samples, 0.34%)</title><rect x="55.6841%" y="725" width="0.3404%" height="15" fill="rgb(232,132,4)" fg:x="1636" fg:w="10"/><text x="55.9341%" y="735.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (10 samples, 0.34%)</title><rect x="55.6841%" y="709" width="0.3404%" height="15" fill="rgb(253,128,37)" fg:x="1636" fg:w="10"/><text x="55.9341%" y="719.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="693" width="0.0340%" height="15" fill="rgb(221,58,24)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="703.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="677" width="0.0340%" height="15" fill="rgb(230,54,45)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="687.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="661" width="0.0340%" height="15" fill="rgb(254,21,18)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="671.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="645" width="0.0340%" height="15" fill="rgb(221,108,0)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="655.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="629" width="0.0340%" height="15" fill="rgb(206,95,1)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="639.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="613" width="0.0340%" height="15" fill="rgb(237,52,5)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="623.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="597" width="0.0340%" height="15" fill="rgb(218,150,34)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="607.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="581" width="0.0340%" height="15" fill="rgb(235,194,28)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="591.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="565" width="0.0340%" height="15" fill="rgb(245,92,18)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="575.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="549" width="0.0340%" height="15" fill="rgb(253,203,53)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="559.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="533" width="0.0340%" height="15" fill="rgb(249,185,47)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="543.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="517" width="0.0340%" height="15" fill="rgb(252,194,52)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="527.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="55.9905%" y="501" width="0.0340%" height="15" fill="rgb(210,53,36)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="511.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="485" width="0.0340%" height="15" fill="rgb(237,37,25)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="495.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="469" width="0.0340%" height="15" fill="rgb(242,116,27)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="453" width="0.0340%" height="15" fill="rgb(213,185,26)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="55.9905%" y="437" width="0.0340%" height="15" fill="rgb(225,204,8)" fg:x="1645" fg:w="1"/><text x="56.2405%" y="447.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (34 samples, 1.16%)</title><rect x="54.9013%" y="869" width="1.1572%" height="15" fill="rgb(254,111,37)" fg:x="1613" fg:w="34"/><text x="55.1513%" y="879.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (34 samples, 1.16%)</title><rect x="54.9013%" y="853" width="1.1572%" height="15" fill="rgb(242,35,9)" fg:x="1613" fg:w="34"/><text x="55.1513%" y="863.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (34 samples, 1.16%)</title><rect x="54.9013%" y="837" width="1.1572%" height="15" fill="rgb(232,138,49)" fg:x="1613" fg:w="34"/><text x="55.1513%" y="847.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (1 samples, 0.03%)</title><rect x="56.0245%" y="821" width="0.0340%" height="15" fill="rgb(247,56,4)" fg:x="1646" fg:w="1"/><text x="56.2745%" y="831.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.0245%" y="805" width="0.0340%" height="15" fill="rgb(226,179,17)" fg:x="1646" fg:w="1"/><text x="56.2745%" y="815.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.0245%" y="789" width="0.0340%" height="15" fill="rgb(216,163,45)" fg:x="1646" fg:w="1"/><text x="56.2745%" y="799.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.03%)</title><rect x="56.0245%" y="773" width="0.0340%" height="15" fill="rgb(211,157,3)" fg:x="1646" fg:w="1"/><text x="56.2745%" y="783.50"></text></g><g><title>CTransaction::CTransaction (1 samples, 0.03%)</title><rect x="56.0245%" y="757" width="0.0340%" height="15" fill="rgb(234,44,20)" fg:x="1646" fg:w="1"/><text x="56.2745%" y="767.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.03%)</title><rect x="56.0245%" y="741" width="0.0340%" height="15" fill="rgb(254,138,23)" fg:x="1646" fg:w="1"/><text x="56.2745%" y="751.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="56.0585%" y="757" width="0.0340%" height="15" fill="rgb(206,119,39)" fg:x="1647" fg:w="1"/><text x="56.3085%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="56.0926%" y="757" width="0.0340%" height="15" fill="rgb(231,105,52)" fg:x="1648" fg:w="1"/><text x="56.3426%" y="767.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="56.0926%" y="741" width="0.0340%" height="15" fill="rgb(250,20,5)" fg:x="1648" fg:w="1"/><text x="56.3426%" y="751.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="56.0926%" y="725" width="0.0340%" height="15" fill="rgb(215,198,30)" fg:x="1648" fg:w="1"/><text x="56.3426%" y="735.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="56.0926%" y="709" width="0.0340%" height="15" fill="rgb(246,142,8)" fg:x="1648" fg:w="1"/><text x="56.3426%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.1266%" y="453" width="0.0340%" height="15" fill="rgb(243,26,38)" fg:x="1649" fg:w="1"/><text x="56.3766%" y="463.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.1266%" y="437" width="0.0340%" height="15" fill="rgb(205,133,28)" fg:x="1649" fg:w="1"/><text x="56.3766%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="56.1266%" y="421" width="0.0340%" height="15" fill="rgb(212,34,0)" fg:x="1649" fg:w="1"/><text x="56.3766%" y="431.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="56.1266%" y="405" width="0.0340%" height="15" fill="rgb(251,226,22)" fg:x="1649" fg:w="1"/><text x="56.3766%" y="415.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.03%)</title><rect x="56.1266%" y="389" width="0.0340%" height="15" fill="rgb(252,119,9)" fg:x="1649" fg:w="1"/><text x="56.3766%" y="399.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="56.1607%" y="341" width="0.0340%" height="15" fill="rgb(213,150,50)" fg:x="1650" fg:w="1"/><text x="56.4107%" y="351.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="56.1607%" y="325" width="0.0340%" height="15" fill="rgb(212,24,39)" fg:x="1650" fg:w="1"/><text x="56.4107%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (3 samples, 0.10%)</title><rect x="56.1266%" y="549" width="0.1021%" height="15" fill="rgb(213,46,39)" fg:x="1649" fg:w="3"/><text x="56.3766%" y="559.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="56.1266%" y="533" width="0.1021%" height="15" fill="rgb(239,106,12)" fg:x="1649" fg:w="3"/><text x="56.3766%" y="543.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="56.1266%" y="517" width="0.1021%" height="15" fill="rgb(249,229,21)" fg:x="1649" fg:w="3"/><text x="56.3766%" y="527.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (3 samples, 0.10%)</title><rect x="56.1266%" y="501" width="0.1021%" height="15" fill="rgb(212,158,3)" fg:x="1649" fg:w="3"/><text x="56.3766%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (3 samples, 0.10%)</title><rect x="56.1266%" y="485" width="0.1021%" height="15" fill="rgb(253,26,48)" fg:x="1649" fg:w="3"/><text x="56.3766%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (3 samples, 0.10%)</title><rect x="56.1266%" y="469" width="0.1021%" height="15" fill="rgb(238,178,20)" fg:x="1649" fg:w="3"/><text x="56.3766%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (2 samples, 0.07%)</title><rect x="56.1607%" y="453" width="0.0681%" height="15" fill="rgb(208,86,15)" fg:x="1650" fg:w="2"/><text x="56.4107%" y="463.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.1607%" y="437" width="0.0681%" height="15" fill="rgb(239,42,53)" fg:x="1650" fg:w="2"/><text x="56.4107%" y="447.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.1607%" y="421" width="0.0681%" height="15" fill="rgb(245,226,8)" fg:x="1650" fg:w="2"/><text x="56.4107%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.07%)</title><rect x="56.1607%" y="405" width="0.0681%" height="15" fill="rgb(216,176,32)" fg:x="1650" fg:w="2"/><text x="56.4107%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (2 samples, 0.07%)</title><rect x="56.1607%" y="389" width="0.0681%" height="15" fill="rgb(231,186,21)" fg:x="1650" fg:w="2"/><text x="56.4107%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.07%)</title><rect x="56.1607%" y="373" width="0.0681%" height="15" fill="rgb(205,95,49)" fg:x="1650" fg:w="2"/><text x="56.4107%" y="383.50"></text></g><g><title>HashWriter::write (2 samples, 0.07%)</title><rect x="56.1607%" y="357" width="0.0681%" height="15" fill="rgb(217,145,8)" fg:x="1650" fg:w="2"/><text x="56.4107%" y="367.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.03%)</title><rect x="56.1947%" y="341" width="0.0340%" height="15" fill="rgb(239,144,48)" fg:x="1651" fg:w="1"/><text x="56.4447%" y="351.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="56.2287%" y="373" width="0.0340%" height="15" fill="rgb(214,189,23)" fg:x="1652" fg:w="1"/><text x="56.4787%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (5 samples, 0.17%)</title><rect x="56.1266%" y="741" width="0.1702%" height="15" fill="rgb(229,157,17)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="725" width="0.1702%" height="15" fill="rgb(230,5,48)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="709" width="0.1702%" height="15" fill="rgb(224,156,48)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="693" width="0.1702%" height="15" fill="rgb(223,14,29)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="677" width="0.1702%" height="15" fill="rgb(229,96,36)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="661" width="0.1702%" height="15" fill="rgb(231,102,53)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="645" width="0.1702%" height="15" fill="rgb(210,77,38)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="655.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="629" width="0.1702%" height="15" fill="rgb(235,131,6)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="639.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="613" width="0.1702%" height="15" fill="rgb(252,55,38)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="623.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="597" width="0.1702%" height="15" fill="rgb(246,38,14)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="581" width="0.1702%" height="15" fill="rgb(242,27,5)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (5 samples, 0.17%)</title><rect x="56.1266%" y="565" width="0.1702%" height="15" fill="rgb(228,65,35)" fg:x="1649" fg:w="5"/><text x="56.3766%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="549" width="0.0681%" height="15" fill="rgb(245,93,11)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="533" width="0.0681%" height="15" fill="rgb(213,1,31)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="517" width="0.0681%" height="15" fill="rgb(237,205,14)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="501" width="0.0681%" height="15" fill="rgb(232,118,45)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="485" width="0.0681%" height="15" fill="rgb(218,5,6)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="469" width="0.0681%" height="15" fill="rgb(251,87,51)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="453" width="0.0681%" height="15" fill="rgb(207,225,20)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="463.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="437" width="0.0681%" height="15" fill="rgb(222,78,54)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="447.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.2287%" y="421" width="0.0681%" height="15" fill="rgb(232,85,16)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.07%)</title><rect x="56.2287%" y="405" width="0.0681%" height="15" fill="rgb(244,25,33)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="415.50"></text></g><g><title>HashWriter::write (2 samples, 0.07%)</title><rect x="56.2287%" y="389" width="0.0681%" height="15" fill="rgb(233,24,36)" fg:x="1652" fg:w="2"/><text x="56.4787%" y="399.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="56.2628%" y="373" width="0.0340%" height="15" fill="rgb(253,49,54)" fg:x="1653" fg:w="1"/><text x="56.5128%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="56.2628%" y="357" width="0.0340%" height="15" fill="rgb(245,12,22)" fg:x="1653" fg:w="1"/><text x="56.5128%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.03%)</title><rect x="56.2628%" y="341" width="0.0340%" height="15" fill="rgb(253,141,28)" fg:x="1653" fg:w="1"/><text x="56.5128%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="56.2628%" y="325" width="0.0340%" height="15" fill="rgb(225,207,27)" fg:x="1653" fg:w="1"/><text x="56.5128%" y="335.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.2628%" y="309" width="0.0340%" height="15" fill="rgb(220,84,2)" fg:x="1653" fg:w="1"/><text x="56.5128%" y="319.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="56.2628%" y="293" width="0.0340%" height="15" fill="rgb(224,37,37)" fg:x="1653" fg:w="1"/><text x="56.5128%" y="303.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="56.3308%" y="469" width="0.0340%" height="15" fill="rgb(220,143,18)" fg:x="1655" fg:w="1"/><text x="56.5808%" y="479.50"></text></g><g><title>CSHA256::Write (3 samples, 0.10%)</title><rect x="56.2968%" y="485" width="0.1021%" height="15" fill="rgb(210,88,33)" fg:x="1654" fg:w="3"/><text x="56.5468%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="469" width="0.0340%" height="15" fill="rgb(219,87,51)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="56.3649%" y="453" width="0.0340%" height="15" fill="rgb(211,7,35)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="437" width="0.0340%" height="15" fill="rgb(232,77,2)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="421" width="0.0340%" height="15" fill="rgb(249,94,25)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="405" width="0.0340%" height="15" fill="rgb(215,112,2)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="389" width="0.0340%" height="15" fill="rgb(226,115,48)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="373" width="0.0340%" height="15" fill="rgb(249,196,10)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="357" width="0.0340%" height="15" fill="rgb(237,109,14)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="367.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="341" width="0.0340%" height="15" fill="rgb(217,103,53)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="351.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="325" width="0.0340%" height="15" fill="rgb(244,137,9)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="335.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="309" width="0.0340%" height="15" fill="rgb(227,201,3)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="293" width="0.0340%" height="15" fill="rgb(243,94,6)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="277" width="0.0340%" height="15" fill="rgb(235,118,5)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="261" width="0.0340%" height="15" fill="rgb(247,10,30)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="271.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="245" width="0.0340%" height="15" fill="rgb(205,26,28)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="255.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="229" width="0.0340%" height="15" fill="rgb(206,99,35)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="239.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="213" width="0.0340%" height="15" fill="rgb(238,130,40)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="223.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="197" width="0.0340%" height="15" fill="rgb(224,126,31)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="207.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="181" width="0.0340%" height="15" fill="rgb(254,105,17)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="56.3649%" y="165" width="0.0340%" height="15" fill="rgb(216,87,36)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="175.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.03%)</title><rect x="56.3649%" y="149" width="0.0340%" height="15" fill="rgb(240,21,12)" fg:x="1656" fg:w="1"/><text x="56.6149%" y="159.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="56.2968%" y="549" width="0.1361%" height="15" fill="rgb(245,192,34)" fg:x="1654" fg:w="4"/><text x="56.5468%" y="559.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="56.2968%" y="533" width="0.1361%" height="15" fill="rgb(226,100,49)" fg:x="1654" fg:w="4"/><text x="56.5468%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.14%)</title><rect x="56.2968%" y="517" width="0.1361%" height="15" fill="rgb(245,188,27)" fg:x="1654" fg:w="4"/><text x="56.5468%" y="527.50"></text></g><g><title>HashWriter::write (4 samples, 0.14%)</title><rect x="56.2968%" y="501" width="0.1361%" height="15" fill="rgb(212,170,8)" fg:x="1654" fg:w="4"/><text x="56.5468%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="56.3989%" y="485" width="0.0340%" height="15" fill="rgb(217,113,29)" fg:x="1657" fg:w="1"/><text x="56.6489%" y="495.50"></text></g><g><title>QuadRound (1 samples, 0.03%)</title><rect x="56.3989%" y="469" width="0.0340%" height="15" fill="rgb(237,30,3)" fg:x="1657" fg:w="1"/><text x="56.6489%" y="479.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.03%)</title><rect x="56.3989%" y="453" width="0.0340%" height="15" fill="rgb(227,19,28)" fg:x="1657" fg:w="1"/><text x="56.6489%" y="463.50"></text></g><g><title>CSHA256::Write (5 samples, 0.17%)</title><rect x="56.4329%" y="405" width="0.1702%" height="15" fill="rgb(239,172,45)" fg:x="1658" fg:w="5"/><text x="56.6829%" y="415.50"></text></g><g><title>CSHA256::Write (3 samples, 0.10%)</title><rect x="56.5010%" y="389" width="0.1021%" height="15" fill="rgb(254,55,39)" fg:x="1660" fg:w="3"/><text x="56.7510%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (10 samples, 0.34%)</title><rect x="56.2968%" y="741" width="0.3404%" height="15" fill="rgb(249,208,12)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="725" width="0.3404%" height="15" fill="rgb(240,52,13)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="709" width="0.3404%" height="15" fill="rgb(252,149,13)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="719.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="693" width="0.3404%" height="15" fill="rgb(232,81,48)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="703.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="677" width="0.3404%" height="15" fill="rgb(222,144,2)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="687.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="661" width="0.3404%" height="15" fill="rgb(216,81,32)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="645" width="0.3404%" height="15" fill="rgb(244,78,51)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="655.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="629" width="0.3404%" height="15" fill="rgb(217,66,21)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="639.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="613" width="0.3404%" height="15" fill="rgb(247,101,42)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="623.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="597" width="0.3404%" height="15" fill="rgb(227,81,39)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="581" width="0.3404%" height="15" fill="rgb(220,223,44)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (10 samples, 0.34%)</title><rect x="56.2968%" y="565" width="0.3404%" height="15" fill="rgb(205,218,2)" fg:x="1654" fg:w="10"/><text x="56.5468%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (6 samples, 0.20%)</title><rect x="56.4329%" y="549" width="0.2042%" height="15" fill="rgb(212,207,28)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="559.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="56.4329%" y="533" width="0.2042%" height="15" fill="rgb(224,12,41)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="543.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="56.4329%" y="517" width="0.2042%" height="15" fill="rgb(216,118,12)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="527.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (6 samples, 0.20%)</title><rect x="56.4329%" y="501" width="0.2042%" height="15" fill="rgb(252,97,46)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="511.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.20%)</title><rect x="56.4329%" y="485" width="0.2042%" height="15" fill="rgb(244,206,19)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="495.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.20%)</title><rect x="56.4329%" y="469" width="0.2042%" height="15" fill="rgb(231,84,31)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (6 samples, 0.20%)</title><rect x="56.4329%" y="453" width="0.2042%" height="15" fill="rgb(244,133,0)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (6 samples, 0.20%)</title><rect x="56.4329%" y="437" width="0.2042%" height="15" fill="rgb(223,15,50)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="447.50"></text></g><g><title>HashWriter::write (6 samples, 0.20%)</title><rect x="56.4329%" y="421" width="0.2042%" height="15" fill="rgb(250,118,49)" fg:x="1658" fg:w="6"/><text x="56.6829%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="56.6031%" y="405" width="0.0340%" height="15" fill="rgb(248,25,38)" fg:x="1663" fg:w="1"/><text x="56.8531%" y="415.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="56.6031%" y="389" width="0.0340%" height="15" fill="rgb(215,70,14)" fg:x="1663" fg:w="1"/><text x="56.8531%" y="399.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="56.6031%" y="373" width="0.0340%" height="15" fill="rgb(215,28,15)" fg:x="1663" fg:w="1"/><text x="56.8531%" y="383.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="56.6031%" y="357" width="0.0340%" height="15" fill="rgb(243,6,28)" fg:x="1663" fg:w="1"/><text x="56.8531%" y="367.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="56.6372%" y="661" width="0.0340%" height="15" fill="rgb(222,130,1)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="671.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="56.6372%" y="645" width="0.0340%" height="15" fill="rgb(236,166,44)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="655.50"></text></g><g><title>CTransaction::ComputeHasWitness (1 samples, 0.03%)</title><rect x="56.6372%" y="629" width="0.0340%" height="15" fill="rgb(221,108,14)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="639.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.03%)</title><rect x="56.6372%" y="613" width="0.0340%" height="15" fill="rgb(252,3,45)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="623.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.03%)</title><rect x="56.6372%" y="597" width="0.0340%" height="15" fill="rgb(237,68,30)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="607.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; (1 samples, 0.03%)</title><rect x="56.6372%" y="581" width="0.0340%" height="15" fill="rgb(211,79,22)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="591.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="56.6372%" y="565" width="0.0340%" height="15" fill="rgb(252,185,21)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="575.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;const CTxIn*, std::vector&lt;CTxIn&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;CTransaction::ComputeHasWitness() const::&lt;lambda(const auto:21&amp;)&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="56.6372%" y="549" width="0.0340%" height="15" fill="rgb(225,189,26)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="559.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="56.6372%" y="533" width="0.0340%" height="15" fill="rgb(241,30,40)" fg:x="1664" fg:w="1"/><text x="56.8872%" y="543.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (19 samples, 0.65%)</title><rect x="56.0585%" y="837" width="0.6467%" height="15" fill="rgb(235,215,44)" fg:x="1647" fg:w="19"/><text x="56.3085%" y="847.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (19 samples, 0.65%)</title><rect x="56.0585%" y="821" width="0.6467%" height="15" fill="rgb(205,8,29)" fg:x="1647" fg:w="19"/><text x="56.3085%" y="831.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (19 samples, 0.65%)</title><rect x="56.0585%" y="805" width="0.6467%" height="15" fill="rgb(241,137,42)" fg:x="1647" fg:w="19"/><text x="56.3085%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (19 samples, 0.65%)</title><rect x="56.0585%" y="789" width="0.6467%" height="15" fill="rgb(237,155,2)" fg:x="1647" fg:w="19"/><text x="56.3085%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (19 samples, 0.65%)</title><rect x="56.0585%" y="773" width="0.6467%" height="15" fill="rgb(245,29,42)" fg:x="1647" fg:w="19"/><text x="56.3085%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (17 samples, 0.58%)</title><rect x="56.1266%" y="757" width="0.5786%" height="15" fill="rgb(234,101,35)" fg:x="1649" fg:w="17"/><text x="56.3766%" y="767.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (2 samples, 0.07%)</title><rect x="56.6372%" y="741" width="0.0681%" height="15" fill="rgb(228,64,37)" fg:x="1664" fg:w="2"/><text x="56.8872%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.6372%" y="725" width="0.0681%" height="15" fill="rgb(217,214,36)" fg:x="1664" fg:w="2"/><text x="56.8872%" y="735.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="56.6372%" y="709" width="0.0681%" height="15" fill="rgb(243,70,3)" fg:x="1664" fg:w="2"/><text x="56.8872%" y="719.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.07%)</title><rect x="56.6372%" y="693" width="0.0681%" height="15" fill="rgb(253,158,52)" fg:x="1664" fg:w="2"/><text x="56.8872%" y="703.50"></text></g><g><title>HashWriter::write (2 samples, 0.07%)</title><rect x="56.6372%" y="677" width="0.0681%" height="15" fill="rgb(234,111,54)" fg:x="1664" fg:w="2"/><text x="56.8872%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="661" width="0.0340%" height="15" fill="rgb(217,70,32)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="671.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="645" width="0.0340%" height="15" fill="rgb(234,18,33)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="655.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="629" width="0.0340%" height="15" fill="rgb(234,12,49)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="639.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="613" width="0.0340%" height="15" fill="rgb(236,10,21)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="623.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="597" width="0.0340%" height="15" fill="rgb(248,182,45)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="607.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="581" width="0.0340%" height="15" fill="rgb(217,95,36)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="591.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="565" width="0.0340%" height="15" fill="rgb(212,110,31)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="575.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="549" width="0.0340%" height="15" fill="rgb(206,32,53)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="559.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="56.6712%" y="533" width="0.0340%" height="15" fill="rgb(246,141,37)" fg:x="1665" fg:w="1"/><text x="56.9212%" y="543.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.03%)</title><rect x="56.7733%" y="789" width="0.0340%" height="15" fill="rgb(219,16,7)" fg:x="1668" fg:w="1"/><text x="57.0233%" y="799.50"></text></g><g><title>CSHA256::Reset (1 samples, 0.03%)</title><rect x="56.8074%" y="789" width="0.0340%" height="15" fill="rgb(230,205,45)" fg:x="1669" fg:w="1"/><text x="57.0574%" y="799.50"></text></g><g><title>CSHA256::Reset (1 samples, 0.03%)</title><rect x="56.8074%" y="773" width="0.0340%" height="15" fill="rgb(231,43,49)" fg:x="1669" fg:w="1"/><text x="57.0574%" y="783.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="56.8414%" y="789" width="0.0340%" height="15" fill="rgb(212,106,34)" fg:x="1670" fg:w="1"/><text x="57.0914%" y="799.50"></text></g><g><title>QuadRound (1 samples, 0.03%)</title><rect x="56.9095%" y="773" width="0.0340%" height="15" fill="rgb(206,83,17)" fg:x="1672" fg:w="1"/><text x="57.1595%" y="783.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.03%)</title><rect x="56.9095%" y="757" width="0.0340%" height="15" fill="rgb(244,154,49)" fg:x="1672" fg:w="1"/><text x="57.1595%" y="767.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="56.9435%" y="773" width="0.0340%" height="15" fill="rgb(244,149,49)" fg:x="1673" fg:w="1"/><text x="57.1935%" y="783.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="56.9435%" y="757" width="0.0340%" height="15" fill="rgb(227,134,18)" fg:x="1673" fg:w="1"/><text x="57.1935%" y="767.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.03%)</title><rect x="56.9435%" y="741" width="0.0340%" height="15" fill="rgb(237,116,36)" fg:x="1673" fg:w="1"/><text x="57.1935%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.14%)</title><rect x="56.8754%" y="789" width="0.1361%" height="15" fill="rgb(205,129,40)" fg:x="1671" fg:w="4"/><text x="57.1254%" y="799.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="56.9775%" y="773" width="0.0340%" height="15" fill="rgb(236,178,4)" fg:x="1674" fg:w="1"/><text x="57.2275%" y="783.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="56.9775%" y="757" width="0.0340%" height="15" fill="rgb(251,76,53)" fg:x="1674" fg:w="1"/><text x="57.2275%" y="767.50"></text></g><g><title>CSHA256::Write (10 samples, 0.34%)</title><rect x="56.7052%" y="805" width="0.3404%" height="15" fill="rgb(242,92,40)" fg:x="1666" fg:w="10"/><text x="56.9552%" y="815.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="57.0116%" y="789" width="0.0340%" height="15" fill="rgb(209,45,30)" fg:x="1675" fg:w="1"/><text x="57.2616%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.03%)</title><rect x="57.0116%" y="773" width="0.0340%" height="15" fill="rgb(218,157,36)" fg:x="1675" fg:w="1"/><text x="57.2616%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.0116%" y="757" width="0.0340%" height="15" fill="rgb(222,186,16)" fg:x="1675" fg:w="1"/><text x="57.2616%" y="767.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.0116%" y="741" width="0.0340%" height="15" fill="rgb(254,72,35)" fg:x="1675" fg:w="1"/><text x="57.2616%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="57.0116%" y="725" width="0.0340%" height="15" fill="rgb(224,25,35)" fg:x="1675" fg:w="1"/><text x="57.2616%" y="735.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="57.0116%" y="709" width="0.0340%" height="15" fill="rgb(206,135,52)" fg:x="1675" fg:w="1"/><text x="57.2616%" y="719.50"></text></g><g><title>QuadRound (3 samples, 0.10%)</title><rect x="57.0456%" y="789" width="0.1021%" height="15" fill="rgb(229,174,47)" fg:x="1676" fg:w="3"/><text x="57.2956%" y="799.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.10%)</title><rect x="57.0456%" y="773" width="0.1021%" height="15" fill="rgb(242,184,21)" fg:x="1676" fg:w="3"/><text x="57.2956%" y="783.50"></text></g><g><title>ShiftMessageA (1 samples, 0.03%)</title><rect x="57.1477%" y="773" width="0.0340%" height="15" fill="rgb(213,22,45)" fg:x="1679" fg:w="1"/><text x="57.3977%" y="783.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.03%)</title><rect x="57.1477%" y="757" width="0.0340%" height="15" fill="rgb(237,81,54)" fg:x="1679" fg:w="1"/><text x="57.3977%" y="767.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="57.1818%" y="757" width="0.0340%" height="15" fill="rgb(248,177,18)" fg:x="1680" fg:w="1"/><text x="57.4318%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (7 samples, 0.24%)</title><rect x="57.0456%" y="805" width="0.2383%" height="15" fill="rgb(254,31,16)" fg:x="1676" fg:w="7"/><text x="57.2956%" y="815.50"></text></g><g><title>ShiftMessageB (4 samples, 0.14%)</title><rect x="57.1477%" y="789" width="0.1361%" height="15" fill="rgb(235,20,31)" fg:x="1679" fg:w="4"/><text x="57.3977%" y="799.50"></text></g><g><title>ShiftMessageC (3 samples, 0.10%)</title><rect x="57.1818%" y="773" width="0.1021%" height="15" fill="rgb(240,56,43)" fg:x="1680" fg:w="3"/><text x="57.4318%" y="783.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.07%)</title><rect x="57.2158%" y="757" width="0.0681%" height="15" fill="rgb(237,197,51)" fg:x="1681" fg:w="2"/><text x="57.4658%" y="767.50"></text></g><g><title>CSHA256::Finalize (18 samples, 0.61%)</title><rect x="56.7052%" y="821" width="0.6127%" height="15" fill="rgb(241,162,44)" fg:x="1666" fg:w="18"/><text x="56.9552%" y="831.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.2839%" y="805" width="0.0340%" height="15" fill="rgb(224,23,20)" fg:x="1683" fg:w="1"/><text x="57.5339%" y="815.50"></text></g><g><title>CTransaction::ComputeHash (38 samples, 1.29%)</title><rect x="56.0585%" y="853" width="1.2934%" height="15" fill="rgb(250,109,34)" fg:x="1647" fg:w="38"/><text x="56.3085%" y="863.50"></text></g><g><title>HashWriter::GetHash (19 samples, 0.65%)</title><rect x="56.7052%" y="837" width="0.6467%" height="15" fill="rgb(214,175,50)" fg:x="1666" fg:w="19"/><text x="56.9552%" y="847.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="57.3179%" y="821" width="0.0340%" height="15" fill="rgb(213,182,5)" fg:x="1684" fg:w="1"/><text x="57.5679%" y="831.50"></text></g><g><title>CSHA256::Write (3 samples, 0.10%)</title><rect x="57.3519%" y="741" width="0.1021%" height="15" fill="rgb(209,199,19)" fg:x="1685" fg:w="3"/><text x="57.6019%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="57.4541%" y="741" width="0.0340%" height="15" fill="rgb(236,224,42)" fg:x="1688" fg:w="1"/><text x="57.7041%" y="751.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="57.4541%" y="725" width="0.0340%" height="15" fill="rgb(246,226,29)" fg:x="1688" fg:w="1"/><text x="57.7041%" y="735.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="57.4541%" y="709" width="0.0340%" height="15" fill="rgb(227,223,11)" fg:x="1688" fg:w="1"/><text x="57.7041%" y="719.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="57.4541%" y="693" width="0.0340%" height="15" fill="rgb(219,7,51)" fg:x="1688" fg:w="1"/><text x="57.7041%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.4881%" y="533" width="0.0340%" height="15" fill="rgb(245,167,10)" fg:x="1689" fg:w="1"/><text x="57.7381%" y="543.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.4881%" y="517" width="0.0340%" height="15" fill="rgb(237,224,16)" fg:x="1689" fg:w="1"/><text x="57.7381%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="57.4881%" y="501" width="0.0340%" height="15" fill="rgb(226,132,13)" fg:x="1689" fg:w="1"/><text x="57.7381%" y="511.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="57.4881%" y="485" width="0.0340%" height="15" fill="rgb(214,140,3)" fg:x="1689" fg:w="1"/><text x="57.7381%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="57.4881%" y="469" width="0.0340%" height="15" fill="rgb(221,177,4)" fg:x="1689" fg:w="1"/><text x="57.7381%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="533" width="0.0340%" height="15" fill="rgb(238,139,3)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="543.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="517" width="0.0340%" height="15" fill="rgb(216,17,39)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="527.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="501" width="0.0340%" height="15" fill="rgb(238,120,9)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="511.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="485" width="0.0340%" height="15" fill="rgb(244,92,53)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="469" width="0.0340%" height="15" fill="rgb(224,148,33)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="479.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="453" width="0.0340%" height="15" fill="rgb(243,6,36)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="437" width="0.0340%" height="15" fill="rgb(230,102,11)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="447.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="421" width="0.0340%" height="15" fill="rgb(234,148,36)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="431.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="405" width="0.0340%" height="15" fill="rgb(251,153,25)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.03%)</title><rect x="57.5221%" y="389" width="0.0340%" height="15" fill="rgb(215,129,8)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (1 samples, 0.03%)</title><rect x="57.5221%" y="373" width="0.0340%" height="15" fill="rgb(224,128,35)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="57.5221%" y="357" width="0.0340%" height="15" fill="rgb(237,56,52)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="367.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="57.5221%" y="341" width="0.0340%" height="15" fill="rgb(234,213,19)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="351.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="57.5221%" y="325" width="0.0340%" height="15" fill="rgb(252,82,23)" fg:x="1690" fg:w="1"/><text x="57.7721%" y="335.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="57.5562%" y="357" width="0.0340%" height="15" fill="rgb(254,201,21)" fg:x="1691" fg:w="1"/><text x="57.8062%" y="367.50"></text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="57.5562%" y="341" width="0.0340%" height="15" fill="rgb(250,186,11)" fg:x="1691" fg:w="1"/><text x="57.8062%" y="351.50"></text></g><g><title>ShiftMessageA (1 samples, 0.03%)</title><rect x="57.5902%" y="325" width="0.0340%" height="15" fill="rgb(211,174,5)" fg:x="1692" fg:w="1"/><text x="57.8402%" y="335.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.03%)</title><rect x="57.5902%" y="309" width="0.0340%" height="15" fill="rgb(214,121,10)" fg:x="1692" fg:w="1"/><text x="57.8402%" y="319.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.07%)</title><rect x="57.5902%" y="357" width="0.0681%" height="15" fill="rgb(241,66,2)" fg:x="1692" fg:w="2"/><text x="57.8402%" y="367.50"></text></g><g><title>ShiftMessageB (2 samples, 0.07%)</title><rect x="57.5902%" y="341" width="0.0681%" height="15" fill="rgb(220,167,19)" fg:x="1692" fg:w="2"/><text x="57.8402%" y="351.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="57.6242%" y="325" width="0.0340%" height="15" fill="rgb(231,54,50)" fg:x="1693" fg:w="1"/><text x="57.8742%" y="335.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="57.6242%" y="309" width="0.0340%" height="15" fill="rgb(239,217,53)" fg:x="1693" fg:w="1"/><text x="57.8742%" y="319.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.03%)</title><rect x="57.6583%" y="261" width="0.0340%" height="15" fill="rgb(248,8,0)" fg:x="1694" fg:w="1"/><text x="57.9083%" y="271.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="57.6583%" y="357" width="0.0681%" height="15" fill="rgb(229,118,37)" fg:x="1694" fg:w="2"/><text x="57.9083%" y="367.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="57.6583%" y="341" width="0.0681%" height="15" fill="rgb(253,223,43)" fg:x="1694" fg:w="2"/><text x="57.9083%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (2 samples, 0.07%)</title><rect x="57.6583%" y="325" width="0.0681%" height="15" fill="rgb(211,77,36)" fg:x="1694" fg:w="2"/><text x="57.9083%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="57.6583%" y="309" width="0.0681%" height="15" fill="rgb(219,3,53)" fg:x="1694" fg:w="2"/><text x="57.9083%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="57.6583%" y="293" width="0.0681%" height="15" fill="rgb(244,45,42)" fg:x="1694" fg:w="2"/><text x="57.9083%" y="303.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="57.6583%" y="277" width="0.0681%" height="15" fill="rgb(225,95,27)" fg:x="1694" fg:w="2"/><text x="57.9083%" y="287.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="261" width="0.0340%" height="15" fill="rgb(207,74,8)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="271.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="245" width="0.0340%" height="15" fill="rgb(243,63,36)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="255.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="229" width="0.0340%" height="15" fill="rgb(211,180,12)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="239.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="213" width="0.0340%" height="15" fill="rgb(254,166,49)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="223.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="197" width="0.0340%" height="15" fill="rgb(205,19,0)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="181" width="0.0340%" height="15" fill="rgb(224,172,32)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="191.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="165" width="0.0340%" height="15" fill="rgb(254,136,30)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="175.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="149" width="0.0340%" height="15" fill="rgb(246,19,35)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="159.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="133" width="0.0340%" height="15" fill="rgb(219,24,36)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="143.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="117" width="0.0340%" height="15" fill="rgb(251,55,1)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="127.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="101" width="0.0340%" height="15" fill="rgb(218,117,39)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="111.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="85" width="0.0340%" height="15" fill="rgb(248,169,11)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="95.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="69" width="0.0340%" height="15" fill="rgb(244,40,44)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="79.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="57.6923%" y="53" width="0.0340%" height="15" fill="rgb(234,62,37)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="63.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.03%)</title><rect x="57.6923%" y="37" width="0.0340%" height="15" fill="rgb(207,117,42)" fg:x="1695" fg:w="1"/><text x="57.9423%" y="47.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (8 samples, 0.27%)</title><rect x="57.4881%" y="725" width="0.2723%" height="15" fill="rgb(213,43,2)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="709" width="0.2723%" height="15" fill="rgb(244,202,51)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="693" width="0.2723%" height="15" fill="rgb(253,174,46)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="677" width="0.2723%" height="15" fill="rgb(251,23,1)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="661" width="0.2723%" height="15" fill="rgb(253,26,1)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="645" width="0.2723%" height="15" fill="rgb(216,89,31)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="629" width="0.2723%" height="15" fill="rgb(209,109,5)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="639.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="613" width="0.2723%" height="15" fill="rgb(229,63,13)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="623.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="597" width="0.2723%" height="15" fill="rgb(238,137,54)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="607.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="581" width="0.2723%" height="15" fill="rgb(228,1,9)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="565" width="0.2723%" height="15" fill="rgb(249,120,48)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (8 samples, 0.27%)</title><rect x="57.4881%" y="549" width="0.2723%" height="15" fill="rgb(209,72,36)" fg:x="1689" fg:w="8"/><text x="57.7381%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="533" width="0.2042%" height="15" fill="rgb(247,98,49)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="543.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="517" width="0.2042%" height="15" fill="rgb(233,75,36)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="527.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="501" width="0.2042%" height="15" fill="rgb(225,14,24)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="511.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="485" width="0.2042%" height="15" fill="rgb(237,193,20)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="469" width="0.2042%" height="15" fill="rgb(239,122,19)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="479.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="453" width="0.2042%" height="15" fill="rgb(231,220,10)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="437" width="0.2042%" height="15" fill="rgb(220,66,15)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="447.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="421" width="0.2042%" height="15" fill="rgb(215,171,52)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="431.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="57.5562%" y="405" width="0.2042%" height="15" fill="rgb(241,169,50)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="415.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (6 samples, 0.20%)</title><rect x="57.5562%" y="389" width="0.2042%" height="15" fill="rgb(236,189,0)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="399.50"></text></g><g><title>HashWriter::write (6 samples, 0.20%)</title><rect x="57.5562%" y="373" width="0.2042%" height="15" fill="rgb(217,147,20)" fg:x="1691" fg:w="6"/><text x="57.8062%" y="383.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.7263%" y="357" width="0.0340%" height="15" fill="rgb(206,188,39)" fg:x="1696" fg:w="1"/><text x="57.9763%" y="367.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="57.7604%" y="421" width="0.0340%" height="15" fill="rgb(227,118,25)" fg:x="1697" fg:w="1"/><text x="58.0104%" y="431.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="57.7944%" y="373" width="0.0340%" height="15" fill="rgb(248,171,40)" fg:x="1698" fg:w="1"/><text x="58.0444%" y="383.50"></text></g><g><title>CSHA256::Write (3 samples, 0.10%)</title><rect x="57.7944%" y="389" width="0.1021%" height="15" fill="rgb(251,90,54)" fg:x="1698" fg:w="3"/><text x="58.0444%" y="399.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="57.8285%" y="373" width="0.0681%" height="15" fill="rgb(234,11,46)" fg:x="1699" fg:w="2"/><text x="58.0785%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="57.8285%" y="357" width="0.0681%" height="15" fill="rgb(229,134,13)" fg:x="1699" fg:w="2"/><text x="58.0785%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.07%)</title><rect x="57.8285%" y="341" width="0.0681%" height="15" fill="rgb(223,129,3)" fg:x="1699" fg:w="2"/><text x="58.0785%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="57.8285%" y="325" width="0.0681%" height="15" fill="rgb(221,124,13)" fg:x="1699" fg:w="2"/><text x="58.0785%" y="335.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="57.8285%" y="309" width="0.0681%" height="15" fill="rgb(234,3,18)" fg:x="1699" fg:w="2"/><text x="58.0785%" y="319.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="57.8285%" y="293" width="0.0681%" height="15" fill="rgb(249,199,20)" fg:x="1699" fg:w="2"/><text x="58.0785%" y="303.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="277" width="0.0340%" height="15" fill="rgb(224,134,6)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="261" width="0.0340%" height="15" fill="rgb(254,83,26)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="271.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="245" width="0.0340%" height="15" fill="rgb(217,88,9)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="255.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="229" width="0.0340%" height="15" fill="rgb(225,73,2)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="239.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="213" width="0.0340%" height="15" fill="rgb(226,44,39)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="223.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="197" width="0.0340%" height="15" fill="rgb(228,53,17)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="207.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="181" width="0.0340%" height="15" fill="rgb(212,27,27)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="165" width="0.0340%" height="15" fill="rgb(241,50,6)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="175.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="149" width="0.0340%" height="15" fill="rgb(225,28,51)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="159.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="133" width="0.0340%" height="15" fill="rgb(215,33,16)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="143.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="117" width="0.0340%" height="15" fill="rgb(243,40,39)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="127.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="101" width="0.0340%" height="15" fill="rgb(225,11,42)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="111.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="85" width="0.0340%" height="15" fill="rgb(241,220,38)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="95.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="57.8625%" y="69" width="0.0340%" height="15" fill="rgb(244,52,35)" fg:x="1700" fg:w="1"/><text x="58.1125%" y="79.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="57.8965%" y="389" width="0.0340%" height="15" fill="rgb(246,42,46)" fg:x="1701" fg:w="1"/><text x="58.1465%" y="399.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="57.8965%" y="373" width="0.0340%" height="15" fill="rgb(205,184,13)" fg:x="1701" fg:w="1"/><text x="58.1465%" y="383.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="57.8965%" y="357" width="0.0340%" height="15" fill="rgb(209,48,36)" fg:x="1701" fg:w="1"/><text x="58.1465%" y="367.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="57.8965%" y="341" width="0.0340%" height="15" fill="rgb(244,34,51)" fg:x="1701" fg:w="1"/><text x="58.1465%" y="351.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (5 samples, 0.17%)</title><rect x="57.7944%" y="421" width="0.1702%" height="15" fill="rgb(221,107,33)" fg:x="1698" fg:w="5"/><text x="58.0444%" y="431.50"></text></g><g><title>HashWriter::write (5 samples, 0.17%)</title><rect x="57.7944%" y="405" width="0.1702%" height="15" fill="rgb(224,203,12)" fg:x="1698" fg:w="5"/><text x="58.0444%" y="415.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="57.9306%" y="389" width="0.0340%" height="15" fill="rgb(230,215,18)" fg:x="1702" fg:w="1"/><text x="58.1806%" y="399.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="57.9306%" y="373" width="0.0340%" height="15" fill="rgb(206,185,35)" fg:x="1702" fg:w="1"/><text x="58.1806%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="57.9306%" y="357" width="0.0340%" height="15" fill="rgb(228,140,34)" fg:x="1702" fg:w="1"/><text x="58.1806%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="57.9306%" y="341" width="0.0340%" height="15" fill="rgb(208,93,13)" fg:x="1702" fg:w="1"/><text x="58.1806%" y="351.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.9306%" y="325" width="0.0340%" height="15" fill="rgb(221,193,39)" fg:x="1702" fg:w="1"/><text x="58.1806%" y="335.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="57.9306%" y="309" width="0.0340%" height="15" fill="rgb(241,132,34)" fg:x="1702" fg:w="1"/><text x="58.1806%" y="319.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="57.9646%" y="421" width="0.0340%" height="15" fill="rgb(221,141,10)" fg:x="1703" fg:w="1"/><text x="58.2146%" y="431.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="57.9646%" y="405" width="0.0340%" height="15" fill="rgb(226,90,31)" fg:x="1703" fg:w="1"/><text x="58.2146%" y="415.50"></text></g><g><title>ShiftMessageA (1 samples, 0.03%)</title><rect x="57.9646%" y="389" width="0.0340%" height="15" fill="rgb(243,75,5)" fg:x="1703" fg:w="1"/><text x="58.2146%" y="399.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.03%)</title><rect x="57.9646%" y="373" width="0.0340%" height="15" fill="rgb(227,156,21)" fg:x="1703" fg:w="1"/><text x="58.2146%" y="383.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="645" width="0.2723%" height="15" fill="rgb(250,195,8)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="629" width="0.2723%" height="15" fill="rgb(220,134,5)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="639.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="613" width="0.2723%" height="15" fill="rgb(246,106,34)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="623.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="597" width="0.2723%" height="15" fill="rgb(205,1,4)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="607.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="581" width="0.2723%" height="15" fill="rgb(224,151,29)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="565" width="0.2723%" height="15" fill="rgb(251,196,0)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="549" width="0.2723%" height="15" fill="rgb(212,127,0)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="533" width="0.2723%" height="15" fill="rgb(236,71,53)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="543.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="517" width="0.2723%" height="15" fill="rgb(227,99,0)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="527.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="501" width="0.2723%" height="15" fill="rgb(239,89,21)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="511.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="485" width="0.2723%" height="15" fill="rgb(243,122,19)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="469" width="0.2723%" height="15" fill="rgb(229,192,45)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="479.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="453" width="0.2723%" height="15" fill="rgb(235,165,35)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (8 samples, 0.27%)</title><rect x="57.7604%" y="437" width="0.2723%" height="15" fill="rgb(253,202,0)" fg:x="1697" fg:w="8"/><text x="58.0104%" y="447.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="57.9986%" y="421" width="0.0340%" height="15" fill="rgb(235,51,20)" fg:x="1704" fg:w="1"/><text x="58.2486%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (9 samples, 0.31%)</title><rect x="57.7604%" y="725" width="0.3063%" height="15" fill="rgb(218,95,46)" fg:x="1697" fg:w="9"/><text x="58.0104%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (9 samples, 0.31%)</title><rect x="57.7604%" y="709" width="0.3063%" height="15" fill="rgb(212,81,10)" fg:x="1697" fg:w="9"/><text x="58.0104%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.31%)</title><rect x="57.7604%" y="693" width="0.3063%" height="15" fill="rgb(240,59,0)" fg:x="1697" fg:w="9"/><text x="58.0104%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.31%)</title><rect x="57.7604%" y="677" width="0.3063%" height="15" fill="rgb(212,191,42)" fg:x="1697" fg:w="9"/><text x="58.0104%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (9 samples, 0.31%)</title><rect x="57.7604%" y="661" width="0.3063%" height="15" fill="rgb(233,140,3)" fg:x="1697" fg:w="9"/><text x="58.0104%" y="671.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.0327%" y="645" width="0.0340%" height="15" fill="rgb(215,69,23)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="655.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.0327%" y="629" width="0.0340%" height="15" fill="rgb(240,202,20)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="58.0327%" y="613" width="0.0340%" height="15" fill="rgb(209,146,50)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="623.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="58.0327%" y="597" width="0.0340%" height="15" fill="rgb(253,102,54)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="607.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="58.0327%" y="581" width="0.0340%" height="15" fill="rgb(250,173,47)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="591.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.0327%" y="565" width="0.0340%" height="15" fill="rgb(232,142,7)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="575.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.0327%" y="549" width="0.0340%" height="15" fill="rgb(230,157,47)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="58.0327%" y="533" width="0.0340%" height="15" fill="rgb(214,177,35)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="543.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="58.0327%" y="517" width="0.0340%" height="15" fill="rgb(234,119,46)" fg:x="1705" fg:w="1"/><text x="58.2827%" y="527.50"></text></g><g><title>CSHA256::Write (3 samples, 0.10%)</title><rect x="58.1348%" y="565" width="0.1021%" height="15" fill="rgb(241,180,50)" fg:x="1708" fg:w="3"/><text x="58.3848%" y="575.50"></text></g><g><title>QuadRound (1 samples, 0.03%)</title><rect x="58.2369%" y="549" width="0.0340%" height="15" fill="rgb(221,54,25)" fg:x="1711" fg:w="1"/><text x="58.4869%" y="559.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.03%)</title><rect x="58.2369%" y="533" width="0.0340%" height="15" fill="rgb(209,157,44)" fg:x="1711" fg:w="1"/><text x="58.4869%" y="543.50"></text></g><g><title>ShiftMessageA (1 samples, 0.03%)</title><rect x="58.2709%" y="533" width="0.0340%" height="15" fill="rgb(246,115,41)" fg:x="1712" fg:w="1"/><text x="58.5209%" y="543.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.03%)</title><rect x="58.2709%" y="517" width="0.0340%" height="15" fill="rgb(229,86,1)" fg:x="1712" fg:w="1"/><text x="58.5209%" y="527.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.03%)</title><rect x="58.3050%" y="517" width="0.0340%" height="15" fill="rgb(240,108,53)" fg:x="1713" fg:w="1"/><text x="58.5550%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.14%)</title><rect x="58.2369%" y="565" width="0.1361%" height="15" fill="rgb(227,134,2)" fg:x="1711" fg:w="4"/><text x="58.4869%" y="575.50"></text></g><g><title>ShiftMessageB (3 samples, 0.10%)</title><rect x="58.2709%" y="549" width="0.1021%" height="15" fill="rgb(213,129,25)" fg:x="1712" fg:w="3"/><text x="58.5209%" y="559.50"></text></g><g><title>ShiftMessageC (2 samples, 0.07%)</title><rect x="58.3050%" y="533" width="0.0681%" height="15" fill="rgb(226,35,21)" fg:x="1713" fg:w="2"/><text x="58.5550%" y="543.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="58.3390%" y="517" width="0.0340%" height="15" fill="rgb(208,129,26)" fg:x="1714" fg:w="1"/><text x="58.5890%" y="527.50"></text></g><g><title>CSHA256::Write (12 samples, 0.41%)</title><rect x="58.0667%" y="581" width="0.4084%" height="15" fill="rgb(224,83,6)" fg:x="1706" fg:w="12"/><text x="58.3167%" y="591.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="58.3730%" y="565" width="0.1021%" height="15" fill="rgb(227,52,39)" fg:x="1715" fg:w="3"/><text x="58.6230%" y="575.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.4411%" y="549" width="0.0340%" height="15" fill="rgb(241,30,17)" fg:x="1717" fg:w="1"/><text x="58.6911%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="58.4411%" y="533" width="0.0340%" height="15" fill="rgb(246,186,42)" fg:x="1717" fg:w="1"/><text x="58.6911%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::GetStream (1 samples, 0.03%)</title><rect x="58.4411%" y="517" width="0.0340%" height="15" fill="rgb(221,169,15)" fg:x="1717" fg:w="1"/><text x="58.6911%" y="527.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="58.5092%" y="565" width="0.0340%" height="15" fill="rgb(235,108,21)" fg:x="1719" fg:w="1"/><text x="58.7592%" y="575.50"></text></g><g><title>ShiftMessageA (1 samples, 0.03%)</title><rect x="58.5092%" y="549" width="0.0340%" height="15" fill="rgb(219,148,30)" fg:x="1719" fg:w="1"/><text x="58.7592%" y="559.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.03%)</title><rect x="58.5092%" y="533" width="0.0340%" height="15" fill="rgb(220,109,5)" fg:x="1719" fg:w="1"/><text x="58.7592%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (16 samples, 0.54%)</title><rect x="58.0667%" y="613" width="0.5446%" height="15" fill="rgb(213,203,48)" fg:x="1706" fg:w="16"/><text x="58.3167%" y="623.50"></text></g><g><title>HashWriter::write (16 samples, 0.54%)</title><rect x="58.0667%" y="597" width="0.5446%" height="15" fill="rgb(244,71,33)" fg:x="1706" fg:w="16"/><text x="58.3167%" y="607.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.14%)</title><rect x="58.4752%" y="581" width="0.1361%" height="15" fill="rgb(209,23,2)" fg:x="1718" fg:w="4"/><text x="58.7252%" y="591.50"></text></g><g><title>ShiftMessageC (2 samples, 0.07%)</title><rect x="58.5432%" y="565" width="0.0681%" height="15" fill="rgb(219,97,7)" fg:x="1720" fg:w="2"/><text x="58.7932%" y="575.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.07%)</title><rect x="58.5432%" y="549" width="0.0681%" height="15" fill="rgb(216,161,23)" fg:x="1720" fg:w="2"/><text x="58.7932%" y="559.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="58.6113%" y="613" width="0.0340%" height="15" fill="rgb(207,45,42)" fg:x="1722" fg:w="1"/><text x="58.8613%" y="623.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="58.6113%" y="597" width="0.0340%" height="15" fill="rgb(241,61,4)" fg:x="1722" fg:w="1"/><text x="58.8613%" y="607.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="58.6113%" y="581" width="0.0340%" height="15" fill="rgb(236,170,1)" fg:x="1722" fg:w="1"/><text x="58.8613%" y="591.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="58.6113%" y="565" width="0.0340%" height="15" fill="rgb(239,72,5)" fg:x="1722" fg:w="1"/><text x="58.8613%" y="575.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="58.6453%" y="549" width="0.0340%" height="15" fill="rgb(214,13,50)" fg:x="1723" fg:w="1"/><text x="58.8953%" y="559.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="58.6453%" y="533" width="0.0340%" height="15" fill="rgb(224,88,9)" fg:x="1723" fg:w="1"/><text x="58.8953%" y="543.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="58.6794%" y="533" width="0.0340%" height="15" fill="rgb(238,192,34)" fg:x="1724" fg:w="1"/><text x="58.9294%" y="543.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="58.6794%" y="517" width="0.0340%" height="15" fill="rgb(217,203,50)" fg:x="1724" fg:w="1"/><text x="58.9294%" y="527.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="58.6794%" y="501" width="0.0340%" height="15" fill="rgb(241,123,32)" fg:x="1724" fg:w="1"/><text x="58.9294%" y="511.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.10%)</title><rect x="58.6794%" y="549" width="0.1021%" height="15" fill="rgb(248,151,39)" fg:x="1724" fg:w="3"/><text x="58.9294%" y="559.50"></text></g><g><title>ShiftMessageC (2 samples, 0.07%)</title><rect x="58.7134%" y="533" width="0.0681%" height="15" fill="rgb(208,89,6)" fg:x="1725" fg:w="2"/><text x="58.9634%" y="543.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.07%)</title><rect x="58.7134%" y="517" width="0.0681%" height="15" fill="rgb(254,43,26)" fg:x="1725" fg:w="2"/><text x="58.9634%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (22 samples, 0.75%)</title><rect x="58.0667%" y="725" width="0.7488%" height="15" fill="rgb(216,158,13)" fg:x="1706" fg:w="22"/><text x="58.3167%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (22 samples, 0.75%)</title><rect x="58.0667%" y="709" width="0.7488%" height="15" fill="rgb(212,47,37)" fg:x="1706" fg:w="22"/><text x="58.3167%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (22 samples, 0.75%)</title><rect x="58.0667%" y="693" width="0.7488%" height="15" fill="rgb(254,16,10)" fg:x="1706" fg:w="22"/><text x="58.3167%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.75%)</title><rect x="58.0667%" y="677" width="0.7488%" height="15" fill="rgb(223,228,16)" fg:x="1706" fg:w="22"/><text x="58.3167%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (22 samples, 0.75%)</title><rect x="58.0667%" y="661" width="0.7488%" height="15" fill="rgb(249,108,50)" fg:x="1706" fg:w="22"/><text x="58.3167%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (22 samples, 0.75%)</title><rect x="58.0667%" y="645" width="0.7488%" height="15" fill="rgb(208,220,5)" fg:x="1706" fg:w="22"/><text x="58.3167%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (22 samples, 0.75%)</title><rect x="58.0667%" y="629" width="0.7488%" height="15" fill="rgb(217,89,48)" fg:x="1706" fg:w="22"/><text x="58.3167%" y="639.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.17%)</title><rect x="58.6453%" y="613" width="0.1702%" height="15" fill="rgb(212,113,41)" fg:x="1723" fg:w="5"/><text x="58.8953%" y="623.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.17%)</title><rect x="58.6453%" y="597" width="0.1702%" height="15" fill="rgb(231,127,5)" fg:x="1723" fg:w="5"/><text x="58.8953%" y="607.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (5 samples, 0.17%)</title><rect x="58.6453%" y="581" width="0.1702%" height="15" fill="rgb(217,141,17)" fg:x="1723" fg:w="5"/><text x="58.8953%" y="591.50"></text></g><g><title>HashWriter::write (5 samples, 0.17%)</title><rect x="58.6453%" y="565" width="0.1702%" height="15" fill="rgb(245,125,54)" fg:x="1723" fg:w="5"/><text x="58.8953%" y="575.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="549" width="0.0340%" height="15" fill="rgb(248,125,3)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="559.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="58.7815%" y="533" width="0.0340%" height="15" fill="rgb(236,119,51)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="517" width="0.0340%" height="15" fill="rgb(239,99,8)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="501" width="0.0340%" height="15" fill="rgb(224,228,4)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="511.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="485" width="0.0340%" height="15" fill="rgb(220,131,45)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="495.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="469" width="0.0340%" height="15" fill="rgb(215,62,5)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="479.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="453" width="0.0340%" height="15" fill="rgb(253,12,24)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="437" width="0.0340%" height="15" fill="rgb(248,120,50)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="447.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="421" width="0.0340%" height="15" fill="rgb(245,194,10)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="431.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="405" width="0.0340%" height="15" fill="rgb(241,149,38)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="415.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="389" width="0.0340%" height="15" fill="rgb(219,215,7)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="399.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="373" width="0.0340%" height="15" fill="rgb(208,120,31)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="383.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="357" width="0.0340%" height="15" fill="rgb(244,30,8)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="367.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="341" width="0.0340%" height="15" fill="rgb(238,35,44)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="351.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="325" width="0.0340%" height="15" fill="rgb(243,218,37)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="335.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="309" width="0.0340%" height="15" fill="rgb(218,169,10)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="319.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="293" width="0.0340%" height="15" fill="rgb(221,144,10)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="303.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="277" width="0.0340%" height="15" fill="rgb(226,41,38)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="287.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="261" width="0.0340%" height="15" fill="rgb(228,3,1)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="271.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="58.7815%" y="245" width="0.0340%" height="15" fill="rgb(209,129,12)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="255.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.03%)</title><rect x="58.7815%" y="229" width="0.0340%" height="15" fill="rgb(213,136,33)" fg:x="1727" fg:w="1"/><text x="59.0315%" y="239.50"></text></g><g><title>Load (1 samples, 0.03%)</title><rect x="58.8155%" y="629" width="0.0340%" height="15" fill="rgb(209,181,29)" fg:x="1728" fg:w="1"/><text x="59.0655%" y="639.50"></text></g><g><title>_mm_shuffle_epi8 (1 samples, 0.03%)</title><rect x="58.8155%" y="613" width="0.0340%" height="15" fill="rgb(234,173,18)" fg:x="1728" fg:w="1"/><text x="59.0655%" y="623.50"></text></g><g><title>QuadRound (2 samples, 0.07%)</title><rect x="58.8496%" y="629" width="0.0681%" height="15" fill="rgb(227,73,47)" fg:x="1729" fg:w="2"/><text x="59.0996%" y="639.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.07%)</title><rect x="58.8496%" y="613" width="0.0681%" height="15" fill="rgb(234,9,34)" fg:x="1729" fg:w="2"/><text x="59.0996%" y="623.50"></text></g><g><title>ShiftMessageB (2 samples, 0.07%)</title><rect x="58.9176%" y="629" width="0.0681%" height="15" fill="rgb(235,172,15)" fg:x="1731" fg:w="2"/><text x="59.1676%" y="639.50"></text></g><g><title>ShiftMessageA (2 samples, 0.07%)</title><rect x="58.9176%" y="613" width="0.0681%" height="15" fill="rgb(245,61,2)" fg:x="1731" fg:w="2"/><text x="59.1676%" y="623.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.07%)</title><rect x="58.9176%" y="597" width="0.0681%" height="15" fill="rgb(238,39,47)" fg:x="1731" fg:w="2"/><text x="59.1676%" y="607.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (49 samples, 1.67%)</title><rect x="57.3519%" y="821" width="1.6678%" height="15" fill="rgb(234,37,24)" fg:x="1685" fg:w="49"/><text x="57.6019%" y="831.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (49 samples, 1.67%)</title><rect x="57.3519%" y="805" width="1.6678%" height="15" fill="rgb(248,223,24)" fg:x="1685" fg:w="49"/><text x="57.6019%" y="815.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (49 samples, 1.67%)</title><rect x="57.3519%" y="789" width="1.6678%" height="15" fill="rgb(223,12,15)" fg:x="1685" fg:w="49"/><text x="57.6019%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (49 samples, 1.67%)</title><rect x="57.3519%" y="773" width="1.6678%" height="15" fill="rgb(249,6,3)" fg:x="1685" fg:w="49"/><text x="57.6019%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (49 samples, 1.67%)</title><rect x="57.3519%" y="757" width="1.6678%" height="15" fill="rgb(237,105,33)" fg:x="1685" fg:w="49"/><text x="57.6019%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (45 samples, 1.53%)</title><rect x="57.4881%" y="741" width="1.5317%" height="15" fill="rgb(252,208,35)" fg:x="1689" fg:w="45"/><text x="57.7381%" y="751.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (6 samples, 0.20%)</title><rect x="58.8155%" y="725" width="0.2042%" height="15" fill="rgb(215,181,35)" fg:x="1728" fg:w="6"/><text x="59.0655%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="58.8155%" y="709" width="0.2042%" height="15" fill="rgb(246,212,3)" fg:x="1728" fg:w="6"/><text x="59.0655%" y="719.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.20%)</title><rect x="58.8155%" y="693" width="0.2042%" height="15" fill="rgb(247,156,24)" fg:x="1728" fg:w="6"/><text x="59.0655%" y="703.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (6 samples, 0.20%)</title><rect x="58.8155%" y="677" width="0.2042%" height="15" fill="rgb(248,9,31)" fg:x="1728" fg:w="6"/><text x="59.0655%" y="687.50"></text></g><g><title>HashWriter::write (6 samples, 0.20%)</title><rect x="58.8155%" y="661" width="0.2042%" height="15" fill="rgb(234,26,45)" fg:x="1728" fg:w="6"/><text x="59.0655%" y="671.50"></text></g><g><title>sha256_x86_shani::Transform (6 samples, 0.20%)</title><rect x="58.8155%" y="645" width="0.2042%" height="15" fill="rgb(249,11,32)" fg:x="1728" fg:w="6"/><text x="59.0655%" y="655.50"></text></g><g><title>Shuffle (1 samples, 0.03%)</title><rect x="58.9857%" y="629" width="0.0340%" height="15" fill="rgb(249,162,33)" fg:x="1733" fg:w="1"/><text x="59.2357%" y="639.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.03%)</title><rect x="58.9857%" y="613" width="0.0340%" height="15" fill="rgb(232,4,32)" fg:x="1733" fg:w="1"/><text x="59.2357%" y="623.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.03%)</title><rect x="59.0197%" y="789" width="0.0340%" height="15" fill="rgb(212,5,45)" fg:x="1734" fg:w="1"/><text x="59.2697%" y="799.50"></text></g><g><title>WriteBE32 (1 samples, 0.03%)</title><rect x="59.0197%" y="773" width="0.0340%" height="15" fill="rgb(227,95,13)" fg:x="1734" fg:w="1"/><text x="59.2697%" y="783.50"></text></g><g><title>htobe32_internal (1 samples, 0.03%)</title><rect x="59.0197%" y="757" width="0.0340%" height="15" fill="rgb(223,205,10)" fg:x="1734" fg:w="1"/><text x="59.2697%" y="767.50"></text></g><g><title>internal_bswap_32 (1 samples, 0.03%)</title><rect x="59.0197%" y="741" width="0.0340%" height="15" fill="rgb(222,178,8)" fg:x="1734" fg:w="1"/><text x="59.2697%" y="751.50"></text></g><g><title>CSHA256::Write (3 samples, 0.10%)</title><rect x="59.0538%" y="773" width="0.1021%" height="15" fill="rgb(216,13,22)" fg:x="1735" fg:w="3"/><text x="59.3038%" y="783.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.07%)</title><rect x="59.1559%" y="773" width="0.0681%" height="15" fill="rgb(240,167,12)" fg:x="1738" fg:w="2"/><text x="59.4059%" y="783.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.07%)</title><rect x="59.1559%" y="757" width="0.0681%" height="15" fill="rgb(235,68,35)" fg:x="1738" fg:w="2"/><text x="59.4059%" y="767.50"></text></g><g><title>HashWriter::GetHash (2 samples, 0.07%)</title><rect x="59.1559%" y="741" width="0.0681%" height="15" fill="rgb(253,40,27)" fg:x="1738" fg:w="2"/><text x="59.4059%" y="751.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.03%)</title><rect x="59.2240%" y="773" width="0.0340%" height="15" fill="rgb(214,19,28)" fg:x="1740" fg:w="1"/><text x="59.4740%" y="783.50"></text></g><g><title>ShiftMessageB (1 samples, 0.03%)</title><rect x="59.2240%" y="757" width="0.0340%" height="15" fill="rgb(210,167,45)" fg:x="1740" fg:w="1"/><text x="59.4740%" y="767.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="59.2240%" y="741" width="0.0340%" height="15" fill="rgb(232,97,40)" fg:x="1740" fg:w="1"/><text x="59.4740%" y="751.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="59.2240%" y="725" width="0.0340%" height="15" fill="rgb(250,35,23)" fg:x="1740" fg:w="1"/><text x="59.4740%" y="735.50"></text></g><g><title>CSHA256::Write (8 samples, 0.27%)</title><rect x="59.0538%" y="789" width="0.2723%" height="15" fill="rgb(248,47,53)" fg:x="1735" fg:w="8"/><text x="59.3038%" y="799.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="59.2580%" y="773" width="0.0681%" height="15" fill="rgb(226,58,50)" fg:x="1741" fg:w="2"/><text x="59.5080%" y="783.50"></text></g><g><title>ShiftMessageA (3 samples, 0.10%)</title><rect x="59.3261%" y="757" width="0.1021%" height="15" fill="rgb(217,105,26)" fg:x="1743" fg:w="3"/><text x="59.5761%" y="767.50"></text></g><g><title>_mm_sha256msg1_epu32 (3 samples, 0.10%)</title><rect x="59.3261%" y="741" width="0.1021%" height="15" fill="rgb(208,64,1)" fg:x="1743" fg:w="3"/><text x="59.5761%" y="751.50"></text></g><g><title>CTransaction::ComputeWitnessHash (62 samples, 2.11%)</title><rect x="57.3519%" y="853" width="2.1103%" height="15" fill="rgb(214,80,1)" fg:x="1685" fg:w="62"/><text x="57.6019%" y="863.50">C..</text></g><g><title>CTransaction::ComputeWitnessHash (62 samples, 2.11%)</title><rect x="57.3519%" y="837" width="2.1103%" height="15" fill="rgb(206,175,26)" fg:x="1685" fg:w="62"/><text x="57.6019%" y="847.50">C..</text></g><g><title>HashWriter::GetHash (13 samples, 0.44%)</title><rect x="59.0197%" y="821" width="0.4425%" height="15" fill="rgb(235,156,37)" fg:x="1734" fg:w="13"/><text x="59.2697%" y="831.50"></text></g><g><title>CSHA256::Finalize (13 samples, 0.44%)</title><rect x="59.0197%" y="805" width="0.4425%" height="15" fill="rgb(213,100,9)" fg:x="1734" fg:w="13"/><text x="59.2697%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.14%)</title><rect x="59.3261%" y="789" width="0.1361%" height="15" fill="rgb(241,15,13)" fg:x="1743" fg:w="4"/><text x="59.5761%" y="799.50"></text></g><g><title>ShiftMessageB (4 samples, 0.14%)</title><rect x="59.3261%" y="773" width="0.1361%" height="15" fill="rgb(205,97,43)" fg:x="1743" fg:w="4"/><text x="59.5761%" y="783.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="59.4282%" y="757" width="0.0340%" height="15" fill="rgb(216,106,32)" fg:x="1746" fg:w="1"/><text x="59.6782%" y="767.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="59.4282%" y="741" width="0.0340%" height="15" fill="rgb(226,200,8)" fg:x="1746" fg:w="1"/><text x="59.6782%" y="751.50"></text></g><g><title>CTransaction::CTransaction (101 samples, 3.44%)</title><rect x="56.0585%" y="869" width="3.4377%" height="15" fill="rgb(244,54,29)" fg:x="1647" fg:w="101"/><text x="56.3085%" y="879.50">CTr..</text></g><g><title>base_uint&lt;256u&gt;::WIDTH (1 samples, 0.03%)</title><rect x="59.4622%" y="853" width="0.0340%" height="15" fill="rgb(252,169,12)" fg:x="1747" fg:w="1"/><text x="59.7122%" y="863.50"></text></g><g><title>CTransaction::CTransaction (1 samples, 0.03%)</title><rect x="59.4622%" y="837" width="0.0340%" height="15" fill="rgb(231,199,11)" fg:x="1747" fg:w="1"/><text x="59.7122%" y="847.50"></text></g><g><title>CMutableTransaction::HasWitness (1 samples, 0.03%)</title><rect x="59.4963%" y="677" width="0.0340%" height="15" fill="rgb(233,191,18)" fg:x="1748" fg:w="1"/><text x="59.7463%" y="687.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (137 samples, 4.66%)</title><rect x="54.9013%" y="933" width="4.6630%" height="15" fill="rgb(215,83,47)" fg:x="1613" fg:w="137"/><text x="55.1513%" y="943.50">std::..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (137 samples, 4.66%)</title><rect x="54.9013%" y="917" width="4.6630%" height="15" fill="rgb(251,67,19)" fg:x="1613" fg:w="137"/><text x="55.1513%" y="927.50">void ..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (137 samples, 4.66%)</title><rect x="54.9013%" y="901" width="4.6630%" height="15" fill="rgb(240,7,20)" fg:x="1613" fg:w="137"/><text x="55.1513%" y="911.50">void ..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (137 samples, 4.66%)</title><rect x="54.9013%" y="885" width="4.6630%" height="15" fill="rgb(210,150,26)" fg:x="1613" fg:w="137"/><text x="55.1513%" y="895.50">CTran..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="869" width="0.0681%" height="15" fill="rgb(228,75,42)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="879.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="853" width="0.0681%" height="15" fill="rgb(237,134,48)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="837" width="0.0681%" height="15" fill="rgb(205,80,50)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="847.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="821" width="0.0681%" height="15" fill="rgb(217,74,48)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="831.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="805" width="0.0681%" height="15" fill="rgb(205,82,50)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="815.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="789" width="0.0681%" height="15" fill="rgb(228,1,33)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="799.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="773" width="0.0681%" height="15" fill="rgb(214,50,23)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="783.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="757" width="0.0681%" height="15" fill="rgb(210,62,9)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="767.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="741" width="0.0681%" height="15" fill="rgb(210,104,37)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="751.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="725" width="0.0681%" height="15" fill="rgb(232,104,43)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="735.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="709" width="0.0681%" height="15" fill="rgb(244,52,6)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="719.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (2 samples, 0.07%)</title><rect x="59.4963%" y="693" width="0.0681%" height="15" fill="rgb(211,174,52)" fg:x="1748" fg:w="2"/><text x="59.7463%" y="703.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="59.5303%" y="677" width="0.0340%" height="15" fill="rgb(229,48,4)" fg:x="1749" fg:w="1"/><text x="59.7803%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="59.5303%" y="661" width="0.0340%" height="15" fill="rgb(205,155,16)" fg:x="1749" fg:w="1"/><text x="59.7803%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="59.5303%" y="645" width="0.0340%" height="15" fill="rgb(211,141,53)" fg:x="1749" fg:w="1"/><text x="59.7803%" y="655.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="59.5303%" y="629" width="0.0340%" height="15" fill="rgb(240,148,11)" fg:x="1749" fg:w="1"/><text x="59.7803%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="59.5303%" y="613" width="0.0340%" height="15" fill="rgb(214,45,23)" fg:x="1749" fg:w="1"/><text x="59.7803%" y="623.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="59.5303%" y="597" width="0.0340%" height="15" fill="rgb(248,74,26)" fg:x="1749" fg:w="1"/><text x="59.7803%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.03%)</title><rect x="59.5303%" y="581" width="0.0340%" height="15" fill="rgb(218,121,16)" fg:x="1749" fg:w="1"/><text x="59.7803%" y="591.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (140 samples, 4.77%)</title><rect x="54.8332%" y="1237" width="4.7651%" height="15" fill="rgb(218,10,47)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1247.50">DataSt..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1221" width="4.7651%" height="15" fill="rgb(227,99,14)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1231.50">void U..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1205" width="4.7651%" height="15" fill="rgb(229,83,46)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1215.50">void P..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1189" width="4.7651%" height="15" fill="rgb(228,25,1)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1199.50">void U..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1173" width="4.7651%" height="15" fill="rgb(252,190,15)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1183.50">void C..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1157" width="4.7651%" height="15" fill="rgb(213,103,51)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1167.50">void C..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1141" width="4.7651%" height="15" fill="rgb(220,38,44)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1151.50">void C..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1125" width="4.7651%" height="15" fill="rgb(210,45,26)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1135.50">void A..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1109" width="4.7651%" height="15" fill="rgb(205,95,48)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1119.50">void U..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1093" width="4.7651%" height="15" fill="rgb(225,179,37)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1103.50">void U..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1077" width="4.7651%" height="15" fill="rgb(230,209,3)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1087.50">void U..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1061" width="4.7651%" height="15" fill="rgb(248,12,46)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1071.50">void W..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1045" width="4.7651%" height="15" fill="rgb(234,18,0)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1055.50">void V..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (140 samples, 4.77%)</title><rect x="54.8332%" y="1029" width="4.7651%" height="15" fill="rgb(238,197,14)" fg:x="1611" fg:w="140"/><text x="55.0832%" y="1039.50">void D..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (139 samples, 4.73%)</title><rect x="54.8673%" y="1013" width="4.7311%" height="15" fill="rgb(251,162,48)" fg:x="1612" fg:w="139"/><text x="55.1173%" y="1023.50">void U..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (138 samples, 4.70%)</title><rect x="54.9013%" y="997" width="4.6971%" height="15" fill="rgb(237,73,42)" fg:x="1613" fg:w="138"/><text x="55.1513%" y="1007.50">std::..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (138 samples, 4.70%)</title><rect x="54.9013%" y="981" width="4.6971%" height="15" fill="rgb(211,108,8)" fg:x="1613" fg:w="138"/><text x="55.1513%" y="991.50">std::..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (138 samples, 4.70%)</title><rect x="54.9013%" y="965" width="4.6971%" height="15" fill="rgb(213,45,22)" fg:x="1613" fg:w="138"/><text x="55.1513%" y="975.50">std::..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (138 samples, 4.70%)</title><rect x="54.9013%" y="949" width="4.6971%" height="15" fill="rgb(252,154,5)" fg:x="1613" fg:w="138"/><text x="55.1513%" y="959.50">std::..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="59.5643%" y="933" width="0.0340%" height="15" fill="rgb(221,79,52)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="943.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="59.5643%" y="917" width="0.0340%" height="15" fill="rgb(229,220,36)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="927.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="59.5643%" y="901" width="0.0340%" height="15" fill="rgb(211,17,16)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="911.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="59.5643%" y="885" width="0.0340%" height="15" fill="rgb(222,55,31)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="895.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="59.5643%" y="869" width="0.0340%" height="15" fill="rgb(221,221,31)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="879.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="59.5643%" y="853" width="0.0340%" height="15" fill="rgb(227,168,26)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="863.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.03%)</title><rect x="59.5643%" y="837" width="0.0340%" height="15" fill="rgb(224,139,9)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.5643%" y="821" width="0.0340%" height="15" fill="rgb(254,172,0)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.5643%" y="805" width="0.0340%" height="15" fill="rgb(235,203,1)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.5643%" y="789" width="0.0340%" height="15" fill="rgb(216,205,24)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.5643%" y="773" width="0.0340%" height="15" fill="rgb(233,24,6)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.5643%" y="757" width="0.0340%" height="15" fill="rgb(244,110,9)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.5643%" y="741" width="0.0340%" height="15" fill="rgb(239,222,42)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.5643%" y="725" width="0.0340%" height="15" fill="rgb(218,145,13)" fg:x="1750" fg:w="1"/><text x="59.8143%" y="735.50"></text></g><g><title>operator/ (1 samples, 0.03%)</title><rect x="59.5984%" y="1221" width="0.0340%" height="15" fill="rgb(207,69,11)" fg:x="1751" fg:w="1"/><text x="59.8484%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.03%)</title><rect x="59.5984%" y="1205" width="0.0340%" height="15" fill="rgb(220,223,22)" fg:x="1751" fg:w="1"/><text x="59.8484%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.03%)</title><rect x="59.5984%" y="1189" width="0.0340%" height="15" fill="rgb(245,102,5)" fg:x="1751" fg:w="1"/><text x="59.8484%" y="1199.50"></text></g><g><title>GetBlockProof (2 samples, 0.07%)</title><rect x="59.5984%" y="1237" width="0.0681%" height="15" fill="rgb(211,148,2)" fg:x="1751" fg:w="2"/><text x="59.8484%" y="1247.50"></text></g><g><title>operator== (1 samples, 0.03%)</title><rect x="59.6324%" y="1221" width="0.0340%" height="15" fill="rgb(241,13,44)" fg:x="1752" fg:w="1"/><text x="59.8824%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (3 samples, 0.10%)</title><rect x="59.6664%" y="1125" width="0.1021%" height="15" fill="rgb(219,137,21)" fg:x="1753" fg:w="3"/><text x="59.9164%" y="1135.50"></text></g><g><title>QuadRound (7 samples, 0.24%)</title><rect x="59.6664%" y="1141" width="0.2383%" height="15" fill="rgb(242,206,5)" fg:x="1753" fg:w="7"/><text x="59.9164%" y="1151.50"></text></g><g><title>_mm_shuffle_epi32 (4 samples, 0.14%)</title><rect x="59.7686%" y="1125" width="0.1361%" height="15" fill="rgb(217,114,22)" fg:x="1756" fg:w="4"/><text x="60.0186%" y="1135.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="59.9047%" y="1109" width="0.0340%" height="15" fill="rgb(253,206,42)" fg:x="1760" fg:w="1"/><text x="60.1547%" y="1119.50"></text></g><g><title>ShiftMessageB (2 samples, 0.07%)</title><rect x="59.9047%" y="1141" width="0.0681%" height="15" fill="rgb(236,102,18)" fg:x="1760" fg:w="2"/><text x="60.1547%" y="1151.50"></text></g><g><title>ShiftMessageC (2 samples, 0.07%)</title><rect x="59.9047%" y="1125" width="0.0681%" height="15" fill="rgb(208,59,49)" fg:x="1760" fg:w="2"/><text x="60.1547%" y="1135.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.03%)</title><rect x="59.9387%" y="1109" width="0.0340%" height="15" fill="rgb(215,194,28)" fg:x="1761" fg:w="1"/><text x="60.1887%" y="1119.50"></text></g><g><title>ComputeMerkleRoot (10 samples, 0.34%)</title><rect x="59.6664%" y="1189" width="0.3404%" height="15" fill="rgb(243,207,11)" fg:x="1753" fg:w="10"/><text x="59.9164%" y="1199.50"></text></g><g><title>SHA256D64 (10 samples, 0.34%)</title><rect x="59.6664%" y="1173" width="0.3404%" height="15" fill="rgb(254,179,35)" fg:x="1753" fg:w="10"/><text x="59.9164%" y="1183.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (10 samples, 0.34%)</title><rect x="59.6664%" y="1157" width="0.3404%" height="15" fill="rgb(235,97,3)" fg:x="1753" fg:w="10"/><text x="59.9164%" y="1167.50"></text></g><g><title>Unshuffle (1 samples, 0.03%)</title><rect x="59.9728%" y="1141" width="0.0340%" height="15" fill="rgb(215,155,33)" fg:x="1762" fg:w="1"/><text x="60.2228%" y="1151.50"></text></g><g><title>_mm_blend_epi16 (1 samples, 0.03%)</title><rect x="59.9728%" y="1125" width="0.0340%" height="15" fill="rgb(223,128,12)" fg:x="1762" fg:w="1"/><text x="60.2228%" y="1135.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (2 samples, 0.07%)</title><rect x="60.0068%" y="1189" width="0.0681%" height="15" fill="rgb(208,157,18)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1199.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (2 samples, 0.07%)</title><rect x="60.0068%" y="1173" width="0.0681%" height="15" fill="rgb(249,70,54)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="60.0068%" y="1157" width="0.0681%" height="15" fill="rgb(244,118,24)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1167.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_allocate (2 samples, 0.07%)</title><rect x="60.0068%" y="1141" width="0.0681%" height="15" fill="rgb(211,54,0)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1151.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;uint256&gt; &gt;::allocate (2 samples, 0.07%)</title><rect x="60.0068%" y="1125" width="0.0681%" height="15" fill="rgb(245,137,45)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1135.50"></text></g><g><title>std::allocator&lt;uint256&gt;::allocate (2 samples, 0.07%)</title><rect x="60.0068%" y="1109" width="0.0681%" height="15" fill="rgb(232,154,31)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1119.50"></text></g><g><title>std::__new_allocator&lt;uint256&gt;::allocate (2 samples, 0.07%)</title><rect x="60.0068%" y="1093" width="0.0681%" height="15" fill="rgb(253,6,39)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1103.50"></text></g><g><title>operator new (2 samples, 0.07%)</title><rect x="60.0068%" y="1077" width="0.0681%" height="15" fill="rgb(234,183,24)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1087.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="60.0068%" y="1061" width="0.0681%" height="15" fill="rgb(252,84,40)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1071.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="60.0068%" y="1045" width="0.0681%" height="15" fill="rgb(224,65,2)" fg:x="1763" fg:w="2"/><text x="60.2568%" y="1055.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="60.0408%" y="1029" width="0.0340%" height="15" fill="rgb(229,38,24)" fg:x="1764" fg:w="1"/><text x="60.2908%" y="1039.50"></text></g><g><title>CheckMerkleRoot (13 samples, 0.44%)</title><rect x="59.6664%" y="1221" width="0.4425%" height="15" fill="rgb(218,131,50)" fg:x="1753" fg:w="13"/><text x="59.9164%" y="1231.50"></text></g><g><title>BlockMerkleRoot (13 samples, 0.44%)</title><rect x="59.6664%" y="1205" width="0.4425%" height="15" fill="rgb(233,106,18)" fg:x="1753" fg:w="13"/><text x="59.9164%" y="1215.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="60.0749%" y="1189" width="0.0340%" height="15" fill="rgb(220,216,11)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::~_Vector_base (1 samples, 0.03%)</title><rect x="60.0749%" y="1173" width="0.0340%" height="15" fill="rgb(251,100,45)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_deallocate (1 samples, 0.03%)</title><rect x="60.0749%" y="1157" width="0.0340%" height="15" fill="rgb(235,143,32)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1167.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;uint256&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="60.0749%" y="1141" width="0.0340%" height="15" fill="rgb(248,124,34)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1151.50"></text></g><g><title>std::allocator&lt;uint256&gt;::deallocate (1 samples, 0.03%)</title><rect x="60.0749%" y="1125" width="0.0340%" height="15" fill="rgb(225,221,4)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1135.50"></text></g><g><title>std::__new_allocator&lt;uint256&gt;::deallocate (1 samples, 0.03%)</title><rect x="60.0749%" y="1109" width="0.0340%" height="15" fill="rgb(242,27,43)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1119.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="60.0749%" y="1093" width="0.0340%" height="15" fill="rgb(227,54,8)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1103.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="60.0749%" y="1077" width="0.0340%" height="15" fill="rgb(253,139,49)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1087.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.03%)</title><rect x="60.0749%" y="1061" width="0.0340%" height="15" fill="rgb(231,26,43)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1071.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="60.0749%" y="1045" width="0.0340%" height="15" fill="rgb(207,121,39)" fg:x="1765" fg:w="1"/><text x="60.3249%" y="1055.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.03%)</title><rect x="60.1089%" y="1125" width="0.0340%" height="15" fill="rgb(223,101,35)" fg:x="1766" fg:w="1"/><text x="60.3589%" y="1135.50"></text></g><g><title>_mm_sha256rnds2_epu32 (4 samples, 0.14%)</title><rect x="60.1430%" y="1125" width="0.1361%" height="15" fill="rgb(232,87,23)" fg:x="1767" fg:w="4"/><text x="60.3930%" y="1135.50"></text></g><g><title>QuadRound (7 samples, 0.24%)</title><rect x="60.1089%" y="1141" width="0.2383%" height="15" fill="rgb(225,180,29)" fg:x="1766" fg:w="7"/><text x="60.3589%" y="1151.50"></text></g><g><title>_mm_shuffle_epi32 (2 samples, 0.07%)</title><rect x="60.2791%" y="1125" width="0.0681%" height="15" fill="rgb(225,25,17)" fg:x="1771" fg:w="2"/><text x="60.5291%" y="1135.50"></text></g><g><title>ShiftMessageA (1 samples, 0.03%)</title><rect x="60.3472%" y="1125" width="0.0340%" height="15" fill="rgb(223,8,52)" fg:x="1773" fg:w="1"/><text x="60.5972%" y="1135.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.03%)</title><rect x="60.3472%" y="1109" width="0.0340%" height="15" fill="rgb(246,42,21)" fg:x="1773" fg:w="1"/><text x="60.5972%" y="1119.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.10%)</title><rect x="60.3812%" y="1109" width="0.1021%" height="15" fill="rgb(205,64,43)" fg:x="1774" fg:w="3"/><text x="60.6312%" y="1119.50"></text></g><g><title>ShiftMessageB (7 samples, 0.24%)</title><rect x="60.3472%" y="1141" width="0.2383%" height="15" fill="rgb(221,160,13)" fg:x="1773" fg:w="7"/><text x="60.5972%" y="1151.50"></text></g><g><title>ShiftMessageC (6 samples, 0.20%)</title><rect x="60.3812%" y="1125" width="0.2042%" height="15" fill="rgb(239,58,35)" fg:x="1774" fg:w="6"/><text x="60.6312%" y="1135.50"></text></g><g><title>_mm_alignr_epi8 (3 samples, 0.10%)</title><rect x="60.4833%" y="1109" width="0.1021%" height="15" fill="rgb(251,26,40)" fg:x="1777" fg:w="3"/><text x="60.7333%" y="1119.50"></text></g><g><title>ShiftMessageC (1 samples, 0.03%)</title><rect x="60.5854%" y="1141" width="0.0340%" height="15" fill="rgb(247,0,4)" fg:x="1780" fg:w="1"/><text x="60.8354%" y="1151.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.03%)</title><rect x="60.5854%" y="1125" width="0.0340%" height="15" fill="rgb(218,130,10)" fg:x="1780" fg:w="1"/><text x="60.8354%" y="1135.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (16 samples, 0.54%)</title><rect x="60.1089%" y="1157" width="0.5446%" height="15" fill="rgb(239,32,7)" fg:x="1766" fg:w="16"/><text x="60.3589%" y="1167.50"></text></g><g><title>Unshuffle (1 samples, 0.03%)</title><rect x="60.6195%" y="1141" width="0.0340%" height="15" fill="rgb(210,192,24)" fg:x="1781" fg:w="1"/><text x="60.8695%" y="1151.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.03%)</title><rect x="60.6195%" y="1125" width="0.0340%" height="15" fill="rgb(226,212,17)" fg:x="1781" fg:w="1"/><text x="60.8695%" y="1135.50"></text></g><g><title>IsBlockMutated (30 samples, 1.02%)</title><rect x="59.6664%" y="1237" width="1.0211%" height="15" fill="rgb(219,201,28)" fg:x="1753" fg:w="30"/><text x="59.9164%" y="1247.50"></text></g><g><title>CheckWitnessMalleation (17 samples, 0.58%)</title><rect x="60.1089%" y="1221" width="0.5786%" height="15" fill="rgb(235,207,41)" fg:x="1766" fg:w="17"/><text x="60.3589%" y="1231.50"></text></g><g><title>BlockWitnessMerkleRoot (17 samples, 0.58%)</title><rect x="60.1089%" y="1205" width="0.5786%" height="15" fill="rgb(241,95,54)" fg:x="1766" fg:w="17"/><text x="60.3589%" y="1215.50"></text></g><g><title>ComputeMerkleRoot (17 samples, 0.58%)</title><rect x="60.1089%" y="1189" width="0.5786%" height="15" fill="rgb(248,12,23)" fg:x="1766" fg:w="17"/><text x="60.3589%" y="1199.50"></text></g><g><title>SHA256D64 (17 samples, 0.58%)</title><rect x="60.1089%" y="1173" width="0.5786%" height="15" fill="rgb(228,173,4)" fg:x="1766" fg:w="17"/><text x="60.3589%" y="1183.50"></text></g><g><title>void (anonymous namespace)::TransformD64Wrapper&lt;&amp;sha256_x86_shani::Transform&gt; (1 samples, 0.03%)</title><rect x="60.6535%" y="1157" width="0.0340%" height="15" fill="rgb(254,99,5)" fg:x="1782" fg:w="1"/><text x="60.9035%" y="1167.50"></text></g><g><title>SHA256D64 (1 samples, 0.03%)</title><rect x="60.6535%" y="1141" width="0.0340%" height="15" fill="rgb(212,184,17)" fg:x="1782" fg:w="1"/><text x="60.9035%" y="1151.50"></text></g><g><title>LastCommonAncestor (2 samples, 0.07%)</title><rect x="60.6875%" y="1237" width="0.0681%" height="15" fill="rgb(252,174,1)" fg:x="1783" fg:w="2"/><text x="60.9375%" y="1247.50"></text></g><g><title>CBlockIndex::GetAncestor (2 samples, 0.07%)</title><rect x="60.6875%" y="1221" width="0.0681%" height="15" fill="rgb(241,118,51)" fg:x="1783" fg:w="2"/><text x="60.9375%" y="1231.50"></text></g><g><title>LogAcceptCategory (1 samples, 0.03%)</title><rect x="60.7556%" y="1237" width="0.0340%" height="15" fill="rgb(227,94,47)" fg:x="1785" fg:w="1"/><text x="61.0056%" y="1247.50"></text></g><g><title>BlockRequested (1 samples, 0.03%)</title><rect x="60.7556%" y="1221" width="0.0340%" height="15" fill="rgb(229,104,2)" fg:x="1785" fg:w="1"/><text x="61.0056%" y="1231.50"></text></g><g><title>insert&lt;std::pair&lt;uint256, std::pair&lt;long int, std::_List_iterator&lt;(anonymous namespace)::QueuedBlock&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="60.7556%" y="1205" width="0.0340%" height="15" fill="rgb(219,28,31)" fg:x="1785" fg:w="1"/><text x="61.0056%" y="1215.50"></text></g><g><title>_M_emplace_equal&lt;std::pair&lt;uint256, std::pair&lt;long int, std::_List_iterator&lt;(anonymous namespace)::QueuedBlock&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="60.7556%" y="1189" width="0.0340%" height="15" fill="rgb(233,109,36)" fg:x="1785" fg:w="1"/><text x="61.0056%" y="1199.50"></text></g><g><title>_M_insert (1 samples, 0.03%)</title><rect x="60.7556%" y="1173" width="0.0340%" height="15" fill="rgb(246,88,11)" fg:x="1785" fg:w="1"/><text x="61.0056%" y="1183.50"></text></g><g><title>CTxMemPool::GetMinFee (1 samples, 0.03%)</title><rect x="60.7897%" y="1205" width="0.0340%" height="15" fill="rgb(209,212,17)" fg:x="1786" fg:w="1"/><text x="61.0397%" y="1215.50"></text></g><g><title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock (1 samples, 0.03%)</title><rect x="60.7897%" y="1189" width="0.0340%" height="15" fill="rgb(243,59,29)" fg:x="1786" fg:w="1"/><text x="61.0397%" y="1199.50"></text></g><g><title>MaybeSendFeefilter (2 samples, 0.07%)</title><rect x="60.7897%" y="1237" width="0.0681%" height="15" fill="rgb(244,205,48)" fg:x="1786" fg:w="2"/><text x="61.0397%" y="1247.50"></text></g><g><title>CTxMemPool::GetMinFee (2 samples, 0.07%)</title><rect x="60.7897%" y="1221" width="0.0681%" height="15" fill="rgb(227,30,6)" fg:x="1786" fg:w="2"/><text x="61.0397%" y="1231.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (1 samples, 0.03%)</title><rect x="60.8237%" y="1205" width="0.0340%" height="15" fill="rgb(220,205,48)" fg:x="1787" fg:w="1"/><text x="61.0737%" y="1215.50"></text></g><g><title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (1 samples, 0.03%)</title><rect x="60.8237%" y="1189" width="0.0340%" height="15" fill="rgb(250,94,14)" fg:x="1787" fg:w="1"/><text x="61.0737%" y="1199.50"></text></g><g><title>MaybeSendGetHeaders (1 samples, 0.03%)</title><rect x="60.8577%" y="1237" width="0.0340%" height="15" fill="rgb(216,119,42)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1247.50"></text></g><g><title>CConnman::PushMessage (1 samples, 0.03%)</title><rect x="60.8577%" y="1221" width="0.0340%" height="15" fill="rgb(232,155,0)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1231.50"></text></g><g><title>CConnman::SocketSendData (1 samples, 0.03%)</title><rect x="60.8577%" y="1205" width="0.0340%" height="15" fill="rgb(212,24,32)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1215.50"></text></g><g><title>V2Transport::SetMessageToSend (1 samples, 0.03%)</title><rect x="60.8577%" y="1189" width="0.0340%" height="15" fill="rgb(216,69,20)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1199.50"></text></g><g><title>BIP324Cipher::Encrypt (1 samples, 0.03%)</title><rect x="60.8577%" y="1173" width="0.0340%" height="15" fill="rgb(229,73,31)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1183.50"></text></g><g><title>FSChaCha20Poly1305::Encrypt (1 samples, 0.03%)</title><rect x="60.8577%" y="1157" width="0.0340%" height="15" fill="rgb(224,219,20)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1167.50"></text></g><g><title>ComputeTag (1 samples, 0.03%)</title><rect x="60.8577%" y="1141" width="0.0340%" height="15" fill="rgb(215,146,41)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1151.50"></text></g><g><title>Poly1305::Update (1 samples, 0.03%)</title><rect x="60.8577%" y="1125" width="0.0340%" height="15" fill="rgb(244,71,31)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1135.50"></text></g><g><title>poly1305_donna::poly1305_update (1 samples, 0.03%)</title><rect x="60.8577%" y="1109" width="0.0340%" height="15" fill="rgb(224,24,11)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1119.50"></text></g><g><title>poly1305_donna::poly1305_blocks (1 samples, 0.03%)</title><rect x="60.8577%" y="1093" width="0.0340%" height="15" fill="rgb(229,76,15)" fg:x="1788" fg:w="1"/><text x="61.1077%" y="1103.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (1 samples, 0.03%)</title><rect x="60.8918%" y="1173" width="0.0340%" height="15" fill="rgb(209,93,2)" fg:x="1789" fg:w="1"/><text x="61.1418%" y="1183.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (5 samples, 0.17%)</title><rect x="60.8918%" y="1237" width="0.1702%" height="15" fill="rgb(216,200,50)" fg:x="1789" fg:w="5"/><text x="61.1418%" y="1247.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (5 samples, 0.17%)</title><rect x="60.8918%" y="1221" width="0.1702%" height="15" fill="rgb(211,67,34)" fg:x="1789" fg:w="5"/><text x="61.1418%" y="1231.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (5 samples, 0.17%)</title><rect x="60.8918%" y="1205" width="0.1702%" height="15" fill="rgb(225,87,47)" fg:x="1789" fg:w="5"/><text x="61.1418%" y="1215.50"></text></g><g><title>std::mutex::lock (5 samples, 0.17%)</title><rect x="60.8918%" y="1189" width="0.1702%" height="15" fill="rgb(217,185,16)" fg:x="1789" fg:w="5"/><text x="61.1418%" y="1199.50"></text></g><g><title>__gthread_mutex_lock (4 samples, 0.14%)</title><rect x="60.9258%" y="1173" width="0.1361%" height="15" fill="rgb(205,0,0)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1183.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.14%)</title><rect x="60.9258%" y="1157" width="0.1361%" height="15" fill="rgb(207,116,45)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1167.50"></text></g><g><title>__GI___lll_lock_wait (4 samples, 0.14%)</title><rect x="60.9258%" y="1141" width="0.1361%" height="15" fill="rgb(221,156,26)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1125" width="0.1361%" height="15" fill="rgb(213,140,4)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1109" width="0.1361%" height="15" fill="rgb(231,224,15)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1093" width="0.1361%" height="15" fill="rgb(244,76,20)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1077" width="0.1361%" height="15" fill="rgb(238,117,7)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1061" width="0.1361%" height="15" fill="rgb(235,1,10)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1045" width="0.1361%" height="15" fill="rgb(216,165,6)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1029" width="0.1361%" height="15" fill="rgb(246,91,35)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="1013" width="0.1361%" height="15" fill="rgb(228,96,24)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="997" width="0.1361%" height="15" fill="rgb(254,217,53)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="981" width="0.1361%" height="15" fill="rgb(209,60,0)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="965" width="0.1361%" height="15" fill="rgb(250,93,26)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="949" width="0.1361%" height="15" fill="rgb(211,9,40)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="60.9258%" y="933" width="0.1361%" height="15" fill="rgb(242,57,20)" fg:x="1790" fg:w="4"/><text x="61.1758%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="60.9598%" y="917" width="0.1021%" height="15" fill="rgb(248,85,48)" fg:x="1791" fg:w="3"/><text x="61.2098%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="60.9598%" y="901" width="0.1021%" height="15" fill="rgb(212,117,2)" fg:x="1791" fg:w="3"/><text x="61.2098%" y="911.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (1 samples, 0.03%)</title><rect x="61.0619%" y="1237" width="0.0340%" height="15" fill="rgb(243,19,3)" fg:x="1794" fg:w="1"/><text x="61.3119%" y="1247.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (1 samples, 0.03%)</title><rect x="61.0619%" y="1221" width="0.0340%" height="15" fill="rgb(232,217,24)" fg:x="1794" fg:w="1"/><text x="61.3119%" y="1231.50"></text></g><g><title>TxRequestTracker::Impl::GetRequestable (1 samples, 0.03%)</title><rect x="61.0619%" y="1205" width="0.0340%" height="15" fill="rgb(224,175,40)" fg:x="1794" fg:w="1"/><text x="61.3119%" y="1215.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="61.0960%" y="1237" width="0.0340%" height="15" fill="rgb(212,162,32)" fg:x="1795" fg:w="1"/><text x="61.3460%" y="1247.50"></text></g><g><title>non-virtual thunk to (anonymous namespace)::PeerManagerImpl::ProcessMessages (1 samples, 0.03%)</title><rect x="61.1300%" y="1237" width="0.0340%" height="15" fill="rgb(215,9,4)" fg:x="1796" fg:w="1"/><text x="61.3800%" y="1247.50"></text></g><g><title>operator* (1 samples, 0.03%)</title><rect x="61.1641%" y="1237" width="0.0340%" height="15" fill="rgb(242,42,7)" fg:x="1797" fg:w="1"/><text x="61.4141%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator*= (1 samples, 0.03%)</title><rect x="61.1641%" y="1221" width="0.0340%" height="15" fill="rgb(242,184,45)" fg:x="1797" fg:w="1"/><text x="61.4141%" y="1231.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (1 samples, 0.03%)</title><rect x="61.1981%" y="1237" width="0.0340%" height="15" fill="rgb(228,111,51)" fg:x="1798" fg:w="1"/><text x="61.4481%" y="1247.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.03%)</title><rect x="61.2321%" y="1237" width="0.0340%" height="15" fill="rgb(236,147,17)" fg:x="1799" fg:w="1"/><text x="61.4821%" y="1247.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.03%)</title><rect x="61.2321%" y="1221" width="0.0340%" height="15" fill="rgb(210,75,22)" fg:x="1799" fg:w="1"/><text x="61.4821%" y="1231.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; GetTime&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="61.2662%" y="1237" width="0.0340%" height="15" fill="rgb(217,159,45)" fg:x="1800" fg:w="1"/><text x="61.5162%" y="1247.50"></text></g><g><title>std::chrono::time_point&lt;NodeClock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt; Now&lt;std::chrono::time_point&lt;NodeClock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="61.2662%" y="1221" width="0.0340%" height="15" fill="rgb(245,165,53)" fg:x="1800" fg:w="1"/><text x="61.5162%" y="1231.50"></text></g><g><title>MaybeDiscourageAndDisconnect (1 samples, 0.03%)</title><rect x="61.2662%" y="1205" width="0.0340%" height="15" fill="rgb(251,190,50)" fg:x="1800" fg:w="1"/><text x="61.5162%" y="1215.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (1 samples, 0.03%)</title><rect x="61.2662%" y="1189" width="0.0340%" height="15" fill="rgb(208,203,29)" fg:x="1800" fg:w="1"/><text x="61.5162%" y="1199.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (1 samples, 0.03%)</title><rect x="61.2662%" y="1173" width="0.0340%" height="15" fill="rgb(207,209,35)" fg:x="1800" fg:w="1"/><text x="61.5162%" y="1183.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (1 samples, 0.03%)</title><rect x="61.3002%" y="1237" width="0.0340%" height="15" fill="rgb(230,144,49)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1247.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (1 samples, 0.03%)</title><rect x="61.3002%" y="1221" width="0.0340%" height="15" fill="rgb(229,31,6)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1231.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (1 samples, 0.03%)</title><rect x="61.3002%" y="1205" width="0.0340%" height="15" fill="rgb(251,129,24)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1215.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (1 samples, 0.03%)</title><rect x="61.3002%" y="1189" width="0.0340%" height="15" fill="rgb(235,105,15)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1199.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (1 samples, 0.03%)</title><rect x="61.3002%" y="1173" width="0.0340%" height="15" fill="rgb(216,52,43)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1183.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (1 samples, 0.03%)</title><rect x="61.3002%" y="1157" width="0.0340%" height="15" fill="rgb(238,144,41)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1167.50"></text></g><g><title>CNetMessage::~CNetMessage (1 samples, 0.03%)</title><rect x="61.3002%" y="1141" width="0.0340%" height="15" fill="rgb(243,63,9)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1151.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.03%)</title><rect x="61.3002%" y="1125" width="0.0340%" height="15" fill="rgb(246,208,1)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1135.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="61.3002%" y="1109" width="0.0340%" height="15" fill="rgb(233,182,18)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.03%)</title><rect x="61.3002%" y="1093" width="0.0340%" height="15" fill="rgb(242,224,8)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1103.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (1 samples, 0.03%)</title><rect x="61.3002%" y="1077" width="0.0340%" height="15" fill="rgb(243,54,37)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1087.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="61.3002%" y="1061" width="0.0340%" height="15" fill="rgb(233,192,12)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1071.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (1 samples, 0.03%)</title><rect x="61.3002%" y="1045" width="0.0340%" height="15" fill="rgb(251,192,53)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1055.50"></text></g><g><title>memory_cleanse (1 samples, 0.03%)</title><rect x="61.3002%" y="1029" width="0.0340%" height="15" fill="rgb(246,141,26)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1039.50"></text></g><g><title>memory_cleanse (1 samples, 0.03%)</title><rect x="61.3002%" y="1013" width="0.0340%" height="15" fill="rgb(239,195,19)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1023.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="61.3002%" y="997" width="0.0340%" height="15" fill="rgb(241,16,39)" fg:x="1801" fg:w="1"/><text x="61.5502%" y="1007.50"></text></g><g><title>std::vector&lt;CBlockIndex const*, std::allocator&lt;CBlockIndex const*&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="61.3342%" y="1237" width="0.0340%" height="15" fill="rgb(223,13,53)" fg:x="1802" fg:w="1"/><text x="61.5842%" y="1247.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.03%)</title><rect x="61.3342%" y="1221" width="0.0340%" height="15" fill="rgb(214,227,0)" fg:x="1802" fg:w="1"/><text x="61.5842%" y="1231.50"></text></g><g><title>[[igc]] (2 samples, 0.07%)</title><rect x="62.5596%" y="949" width="0.0681%" height="15" fill="rgb(228,103,26)" fg:x="1838" fg:w="2"/><text x="62.8096%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="62.5596%" y="933" width="0.0681%" height="15" fill="rgb(254,177,53)" fg:x="1838" fg:w="2"/><text x="62.8096%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="62.5596%" y="917" width="0.0681%" height="15" fill="rgb(208,201,34)" fg:x="1838" fg:w="2"/><text x="62.8096%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.5936%" y="901" width="0.0340%" height="15" fill="rgb(212,39,5)" fg:x="1839" fg:w="1"/><text x="62.8436%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.5936%" y="885" width="0.0340%" height="15" fill="rgb(246,117,3)" fg:x="1839" fg:w="1"/><text x="62.8436%" y="895.50"></text></g><g><title>[[fat]] (2 samples, 0.07%)</title><rect x="62.6276%" y="933" width="0.0681%" height="15" fill="rgb(244,118,39)" fg:x="1840" fg:w="2"/><text x="62.8776%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.6617%" y="917" width="0.0340%" height="15" fill="rgb(241,64,10)" fg:x="1841" fg:w="1"/><text x="62.9117%" y="927.50"></text></g><g><title>CConnman::SocketSendData (41 samples, 1.40%)</title><rect x="61.3683%" y="1205" width="1.3955%" height="15" fill="rgb(229,39,44)" fg:x="1803" fg:w="41"/><text x="61.6183%" y="1215.50"></text></g><g><title>__send (41 samples, 1.40%)</title><rect x="61.3683%" y="1189" width="1.3955%" height="15" fill="rgb(230,226,3)" fg:x="1803" fg:w="41"/><text x="61.6183%" y="1199.50"></text></g><g><title>[unknown] (41 samples, 1.40%)</title><rect x="61.3683%" y="1173" width="1.3955%" height="15" fill="rgb(222,13,42)" fg:x="1803" fg:w="41"/><text x="61.6183%" y="1183.50"></text></g><g><title>[unknown] (41 samples, 1.40%)</title><rect x="61.3683%" y="1157" width="1.3955%" height="15" fill="rgb(247,180,54)" fg:x="1803" fg:w="41"/><text x="61.6183%" y="1167.50"></text></g><g><title>[unknown] (41 samples, 1.40%)</title><rect x="61.3683%" y="1141" width="1.3955%" height="15" fill="rgb(205,96,16)" fg:x="1803" fg:w="41"/><text x="61.6183%" y="1151.50"></text></g><g><title>[unknown] (41 samples, 1.40%)</title><rect x="61.3683%" y="1125" width="1.3955%" height="15" fill="rgb(205,100,21)" fg:x="1803" fg:w="41"/><text x="61.6183%" y="1135.50"></text></g><g><title>[unknown] (40 samples, 1.36%)</title><rect x="61.4023%" y="1109" width="1.3615%" height="15" fill="rgb(248,51,4)" fg:x="1804" fg:w="40"/><text x="61.6523%" y="1119.50"></text></g><g><title>[unknown] (40 samples, 1.36%)</title><rect x="61.4023%" y="1093" width="1.3615%" height="15" fill="rgb(217,197,30)" fg:x="1804" fg:w="40"/><text x="61.6523%" y="1103.50"></text></g><g><title>[unknown] (37 samples, 1.26%)</title><rect x="61.5044%" y="1077" width="1.2594%" height="15" fill="rgb(240,179,40)" fg:x="1807" fg:w="37"/><text x="61.7544%" y="1087.50"></text></g><g><title>[unknown] (37 samples, 1.26%)</title><rect x="61.5044%" y="1061" width="1.2594%" height="15" fill="rgb(212,185,35)" fg:x="1807" fg:w="37"/><text x="61.7544%" y="1071.50"></text></g><g><title>[unknown] (34 samples, 1.16%)</title><rect x="61.6065%" y="1045" width="1.1572%" height="15" fill="rgb(251,222,31)" fg:x="1810" fg:w="34"/><text x="61.8565%" y="1055.50"></text></g><g><title>[unknown] (34 samples, 1.16%)</title><rect x="61.6065%" y="1029" width="1.1572%" height="15" fill="rgb(208,140,36)" fg:x="1810" fg:w="34"/><text x="61.8565%" y="1039.50"></text></g><g><title>[unknown] (30 samples, 1.02%)</title><rect x="61.7427%" y="1013" width="1.0211%" height="15" fill="rgb(220,148,1)" fg:x="1814" fg:w="30"/><text x="61.9927%" y="1023.50"></text></g><g><title>[unknown] (23 samples, 0.78%)</title><rect x="61.9809%" y="997" width="0.7828%" height="15" fill="rgb(254,4,28)" fg:x="1821" fg:w="23"/><text x="62.2309%" y="1007.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="62.3894%" y="981" width="0.3744%" height="15" fill="rgb(222,185,44)" fg:x="1833" fg:w="11"/><text x="62.6394%" y="991.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="62.5255%" y="965" width="0.2383%" height="15" fill="rgb(215,74,39)" fg:x="1837" fg:w="7"/><text x="62.7755%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="62.6276%" y="949" width="0.1361%" height="15" fill="rgb(247,86,4)" fg:x="1840" fg:w="4"/><text x="62.8776%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="62.6957%" y="933" width="0.0681%" height="15" fill="rgb(231,105,32)" fg:x="1842" fg:w="2"/><text x="62.9457%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="62.6957%" y="917" width="0.0681%" height="15" fill="rgb(222,65,35)" fg:x="1842" fg:w="2"/><text x="62.9457%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="901" width="0.0340%" height="15" fill="rgb(218,145,35)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="911.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="62.7297%" y="885" width="0.0340%" height="15" fill="rgb(208,7,15)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="869" width="0.0340%" height="15" fill="rgb(209,83,13)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="853" width="0.0340%" height="15" fill="rgb(218,3,10)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="837" width="0.0340%" height="15" fill="rgb(211,219,4)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="821" width="0.0340%" height="15" fill="rgb(228,194,12)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="805" width="0.0340%" height="15" fill="rgb(210,175,7)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="789" width="0.0340%" height="15" fill="rgb(243,132,6)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="62.7297%" y="773" width="0.0340%" height="15" fill="rgb(207,72,18)" fg:x="1843" fg:w="1"/><text x="62.9797%" y="783.50"></text></g><g><title>CConnman::PushMessage (42 samples, 1.43%)</title><rect x="61.3683%" y="1221" width="1.4295%" height="15" fill="rgb(236,1,18)" fg:x="1803" fg:w="42"/><text x="61.6183%" y="1231.50"></text></g><g><title>V2Transport::GetSendMemoryUsage (1 samples, 0.03%)</title><rect x="62.7638%" y="1205" width="0.0340%" height="15" fill="rgb(227,0,18)" fg:x="1844" fg:w="1"/><text x="63.0138%" y="1215.50"></text></g><g><title>DynamicUsage&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.03%)</title><rect x="62.7638%" y="1189" width="0.0340%" height="15" fill="rgb(247,37,5)" fg:x="1844" fg:w="1"/><text x="63.0138%" y="1199.50"></text></g><g><title>V2Transport::GetSendMemoryUsage (1 samples, 0.03%)</title><rect x="62.7638%" y="1173" width="0.0340%" height="15" fill="rgb(237,179,24)" fg:x="1844" fg:w="1"/><text x="63.0138%" y="1183.50"></text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (43 samples, 1.46%)</title><rect x="61.3683%" y="1237" width="1.4636%" height="15" fill="rgb(226,53,20)" fg:x="1803" fg:w="43"/><text x="61.6183%" y="1247.50"></text></g><g><title>CSerializedNetMsg NetMsg::Make&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1221" width="0.0340%" height="15" fill="rgb(247,75,7)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1231.50"></text></g><g><title>VectorWriter::VectorWriter&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1205" width="0.0340%" height="15" fill="rgb(233,96,12)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1215.50"></text></g><g><title>void SerializeMany&lt;VectorWriter, std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1189" width="0.0340%" height="15" fill="rgb(224,125,0)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1199.50"></text></g><g><title>void Serialize&lt;VectorWriter, CInv, std::allocator&lt;CInv&gt; &gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1173" width="0.0340%" height="15" fill="rgb(224,92,25)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1183.50"></text></g><g><title>void Serialize&lt;VectorWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1157" width="0.0340%" height="15" fill="rgb(224,42,24)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1167.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt; const&amp;&gt;::Serialize&lt;VectorWriter&gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1141" width="0.0340%" height="15" fill="rgb(234,132,49)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1151.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;VectorWriter, std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1125" width="0.0340%" height="15" fill="rgb(248,100,35)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1135.50"></text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="62.7978%" y="1109" width="0.0340%" height="15" fill="rgb(239,94,40)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.03%)</title><rect x="62.7978%" y="1093" width="0.0340%" height="15" fill="rgb(235,139,28)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1103.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="62.7978%" y="1077" width="0.0340%" height="15" fill="rgb(217,144,7)" fg:x="1845" fg:w="1"/><text x="63.0478%" y="1087.50"></text></g><g><title>__clone (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1413" width="45.0987%" height="15" fill="rgb(227,55,4)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1423.50">__clone</text></g><g><title>start_thread (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1397" width="45.0987%" height="15" fill="rgb(252,82,54)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1407.50">start_thread</text></g><g><title>execute_native_thread_routine (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1381" width="45.0987%" height="15" fill="rgb(245,172,4)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1391.50">execute_native_thread_routine</text></g><g><title>_M_run (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1365" width="45.0987%" height="15" fill="rgb(207,26,27)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1375.50">_M_run</text></g><g><title>operator (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1349" width="45.0987%" height="15" fill="rgb(252,98,18)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1359.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1333" width="45.0987%" height="15" fill="rgb(244,8,26)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1343.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1317" width="45.0987%" height="15" fill="rgb(237,173,45)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1327.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), ch..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1301" width="45.0987%" height="15" fill="rgb(208,213,49)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1311.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::ba..</text></g><g><title>util::TraceThread (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1285" width="45.0987%" height="15" fill="rgb(212,122,37)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1295.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1269" width="45.0987%" height="15" fill="rgb(213,80,17)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1279.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (1,325 samples, 45.10%)</title><rect x="17.9374%" y="1253" width="45.0987%" height="15" fill="rgb(206,210,43)" fg:x="527" fg:w="1325"/><text x="18.1874%" y="1263.50">CConnman::ThreadMessageHandler</text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CConnman::ThreadMessageHandler()::&lt;lambda()&gt; &gt; (6 samples, 0.20%)</title><rect x="62.8319%" y="1237" width="0.2042%" height="15" fill="rgb(229,214,3)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1247.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (6 samples, 0.20%)</title><rect x="62.8319%" y="1221" width="0.2042%" height="15" fill="rgb(235,213,29)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1231.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (6 samples, 0.20%)</title><rect x="62.8319%" y="1205" width="0.2042%" height="15" fill="rgb(248,135,26)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1215.50"></text></g><g><title>std::__condvar::wait_until (6 samples, 0.20%)</title><rect x="62.8319%" y="1189" width="0.2042%" height="15" fill="rgb(242,188,12)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1199.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (6 samples, 0.20%)</title><rect x="62.8319%" y="1173" width="0.2042%" height="15" fill="rgb(245,38,12)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1183.50"></text></g><g><title>__futex_abstimed_wait_common (6 samples, 0.20%)</title><rect x="62.8319%" y="1157" width="0.2042%" height="15" fill="rgb(218,42,13)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="62.8319%" y="1141" width="0.2042%" height="15" fill="rgb(238,132,49)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="62.8319%" y="1125" width="0.2042%" height="15" fill="rgb(209,196,19)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="62.8319%" y="1109" width="0.2042%" height="15" fill="rgb(244,131,22)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="62.8319%" y="1093" width="0.2042%" height="15" fill="rgb(223,18,34)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="62.8319%" y="1077" width="0.2042%" height="15" fill="rgb(252,124,54)" fg:x="1846" fg:w="6"/><text x="63.0819%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="62.8659%" y="1061" width="0.1702%" height="15" fill="rgb(229,106,42)" fg:x="1847" fg:w="5"/><text x="63.1159%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="62.8659%" y="1045" width="0.1702%" height="15" fill="rgb(221,129,1)" fg:x="1847" fg:w="5"/><text x="63.1159%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="62.8659%" y="1029" width="0.1702%" height="15" fill="rgb(229,74,15)" fg:x="1847" fg:w="5"/><text x="63.1159%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="62.8999%" y="1013" width="0.1361%" height="15" fill="rgb(210,206,50)" fg:x="1848" fg:w="4"/><text x="63.1499%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="62.8999%" y="997" width="0.1361%" height="15" fill="rgb(251,114,31)" fg:x="1848" fg:w="4"/><text x="63.1499%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="62.9340%" y="981" width="0.1021%" height="15" fill="rgb(215,225,28)" fg:x="1849" fg:w="3"/><text x="63.1840%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="62.9340%" y="965" width="0.1021%" height="15" fill="rgb(237,109,14)" fg:x="1849" fg:w="3"/><text x="63.1840%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="62.9340%" y="949" width="0.1021%" height="15" fill="rgb(230,13,37)" fg:x="1849" fg:w="3"/><text x="63.1840%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="62.9340%" y="933" width="0.1021%" height="15" fill="rgb(231,40,28)" fg:x="1849" fg:w="3"/><text x="63.1840%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="62.9340%" y="917" width="0.1021%" height="15" fill="rgb(231,202,18)" fg:x="1849" fg:w="3"/><text x="63.1840%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="62.9340%" y="901" width="0.1021%" height="15" fill="rgb(225,33,18)" fg:x="1849" fg:w="3"/><text x="63.1840%" y="911.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.10%)</title><rect x="63.0361%" y="1413" width="0.1021%" height="15" fill="rgb(223,64,47)" fg:x="1852" fg:w="3"/><text x="63.2861%" y="1423.50"></text></g><g><title>__mpn_divrem (1 samples, 0.03%)</title><rect x="63.1382%" y="1413" width="0.0340%" height="15" fill="rgb(234,114,13)" fg:x="1855" fg:w="1"/><text x="63.3882%" y="1423.50"></text></g><g><title>__printf_fp_buffer_1.isra.0 (3 samples, 0.10%)</title><rect x="63.1722%" y="1413" width="0.1021%" height="15" fill="rgb(248,56,40)" fg:x="1856" fg:w="3"/><text x="63.4222%" y="1423.50"></text></g><g><title>__printf_fp_l_buffer (1 samples, 0.03%)</title><rect x="63.2743%" y="1413" width="0.0340%" height="15" fill="rgb(221,194,21)" fg:x="1859" fg:w="1"/><text x="63.5243%" y="1423.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="63.3084%" y="1413" width="0.0340%" height="15" fill="rgb(242,108,46)" fg:x="1860" fg:w="1"/><text x="63.5584%" y="1423.50"></text></g><g><title>_int_malloc (6 samples, 0.20%)</title><rect x="63.3424%" y="1413" width="0.2042%" height="15" fill="rgb(220,106,10)" fg:x="1861" fg:w="6"/><text x="63.5924%" y="1423.50"></text></g><g><title>hack_digit (1 samples, 0.03%)</title><rect x="63.5466%" y="1413" width="0.0340%" height="15" fill="rgb(211,88,4)" fg:x="1867" fg:w="1"/><text x="63.7966%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (3 samples, 0.10%)</title><rect x="63.5807%" y="1413" width="0.1021%" height="15" fill="rgb(214,95,34)" fg:x="1868" fg:w="3"/><text x="63.8307%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="63.6828%" y="1413" width="0.0340%" height="15" fill="rgb(250,160,33)" fg:x="1871" fg:w="1"/><text x="63.9328%" y="1423.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.03%)</title><rect x="63.6828%" y="1397" width="0.0340%" height="15" fill="rgb(225,29,10)" fg:x="1871" fg:w="1"/><text x="63.9328%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="63.6828%" y="1381" width="0.0340%" height="15" fill="rgb(224,28,30)" fg:x="1871" fg:w="1"/><text x="63.9328%" y="1391.50"></text></g><g><title>leveldb::DBImpl::Get (4 samples, 0.14%)</title><rect x="63.7168%" y="1413" width="0.1361%" height="15" fill="rgb(231,77,4)" fg:x="1872" fg:w="4"/><text x="63.9668%" y="1423.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="63.8189%" y="1397" width="0.0340%" height="15" fill="rgb(209,63,21)" fg:x="1875" fg:w="1"/><text x="64.0689%" y="1407.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.03%)</title><rect x="63.8530%" y="1413" width="0.0340%" height="15" fill="rgb(226,22,11)" fg:x="1876" fg:w="1"/><text x="64.1030%" y="1423.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (2 samples, 0.07%)</title><rect x="63.8870%" y="1413" width="0.0681%" height="15" fill="rgb(216,82,30)" fg:x="1877" fg:w="2"/><text x="64.1370%" y="1423.50"></text></g><g><title>leveldb::Hash (1 samples, 0.03%)</title><rect x="63.9551%" y="1413" width="0.0340%" height="15" fill="rgb(246,227,38)" fg:x="1879" fg:w="1"/><text x="64.2051%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="63.9891%" y="1413" width="0.0340%" height="15" fill="rgb(251,203,53)" fg:x="1880" fg:w="1"/><text x="64.2391%" y="1423.50"></text></g><g><title>leveldb::Iterator::Iterator (1 samples, 0.03%)</title><rect x="63.9891%" y="1397" width="0.0340%" height="15" fill="rgb(254,101,1)" fg:x="1880" fg:w="1"/><text x="64.2391%" y="1407.50"></text></g><g><title>leveldb::Version::UpdateStats (1 samples, 0.03%)</title><rect x="64.0231%" y="1413" width="0.0340%" height="15" fill="rgb(241,180,5)" fg:x="1881" fg:w="1"/><text x="64.2731%" y="1423.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="64.0572%" y="1413" width="0.0681%" height="15" fill="rgb(218,168,4)" fg:x="1882" fg:w="2"/><text x="64.3072%" y="1423.50"></text></g><g><title>malloc_consolidate (2 samples, 0.07%)</title><rect x="64.1253%" y="1413" width="0.0681%" height="15" fill="rgb(224,223,32)" fg:x="1884" fg:w="2"/><text x="64.3753%" y="1423.50"></text></g><g><title>poly1305_donna::poly1305_update (1 samples, 0.03%)</title><rect x="64.1933%" y="1413" width="0.0340%" height="15" fill="rgb(236,106,22)" fg:x="1886" fg:w="1"/><text x="64.4433%" y="1423.50"></text></g><g><title>pthread_cond_clockwait@plt (1 samples, 0.03%)</title><rect x="64.2274%" y="1413" width="0.0340%" height="15" fill="rgb(206,121,5)" fg:x="1887" fg:w="1"/><text x="64.4774%" y="1423.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (2 samples, 0.07%)</title><rect x="64.2614%" y="1413" width="0.0681%" height="15" fill="rgb(233,87,28)" fg:x="1888" fg:w="2"/><text x="64.5114%" y="1423.50"></text></g><g><title>secp256k1_ecmult_table_get_ge_storage (1 samples, 0.03%)</title><rect x="64.2954%" y="1397" width="0.0340%" height="15" fill="rgb(236,137,17)" fg:x="1889" fg:w="1"/><text x="64.5454%" y="1407.50"></text></g><g><title>secp256k1_ecmult_table_get_ge_storage (1 samples, 0.03%)</title><rect x="64.2954%" y="1381" width="0.0340%" height="15" fill="rgb(209,183,38)" fg:x="1889" fg:w="1"/><text x="64.5454%" y="1391.50"></text></g><g><title>secp256k1_fe_mul_inner (1 samples, 0.03%)</title><rect x="64.3295%" y="1413" width="0.0340%" height="15" fill="rgb(206,162,44)" fg:x="1890" fg:w="1"/><text x="64.5795%" y="1423.50"></text></g><g><title>start_thread (1 samples, 0.03%)</title><rect x="64.3635%" y="1413" width="0.0340%" height="15" fill="rgb(237,70,39)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1423.50"></text></g><g><title>execute_native_thread_routine (1 samples, 0.03%)</title><rect x="64.3635%" y="1397" width="0.0340%" height="15" fill="rgb(212,176,5)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1407.50"></text></g><g><title>_M_run (1 samples, 0.03%)</title><rect x="64.3635%" y="1381" width="0.0340%" height="15" fill="rgb(232,95,16)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1391.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="64.3635%" y="1365" width="0.0340%" height="15" fill="rgb(219,115,35)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1375.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (1 samples, 0.03%)</title><rect x="64.3635%" y="1349" width="0.0340%" height="15" fill="rgb(251,67,27)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1359.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (1 samples, 0.03%)</title><rect x="64.3635%" y="1333" width="0.0340%" height="15" fill="rgb(222,95,40)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1343.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (1 samples, 0.03%)</title><rect x="64.3635%" y="1317" width="0.0340%" height="15" fill="rgb(250,35,16)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1327.50"></text></g><g><title>util::TraceThread (1 samples, 0.03%)</title><rect x="64.3635%" y="1301" width="0.0340%" height="15" fill="rgb(224,86,44)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1311.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.03%)</title><rect x="64.3635%" y="1285" width="0.0340%" height="15" fill="rgb(237,53,53)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1295.50"></text></g><g><title>CConnman::ThreadMessageHandler (1 samples, 0.03%)</title><rect x="64.3635%" y="1269" width="0.0340%" height="15" fill="rgb(208,171,33)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1279.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1 samples, 0.03%)</title><rect x="64.3635%" y="1253" width="0.0340%" height="15" fill="rgb(222,64,27)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1263.50"></text></g><g><title>Chainstate::ActivateBestChain (1 samples, 0.03%)</title><rect x="64.3635%" y="1237" width="0.0340%" height="15" fill="rgb(221,121,35)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1247.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1 samples, 0.03%)</title><rect x="64.3635%" y="1221" width="0.0340%" height="15" fill="rgb(228,137,42)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1231.50"></text></g><g><title>Chainstate::ConnectTip (1 samples, 0.03%)</title><rect x="64.3635%" y="1205" width="0.0340%" height="15" fill="rgb(227,54,21)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1215.50"></text></g><g><title>Chainstate::UpdateTip (1 samples, 0.03%)</title><rect x="64.3635%" y="1189" width="0.0340%" height="15" fill="rgb(240,168,33)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1199.50"></text></g><g><title>UpdateTipLog (1 samples, 0.03%)</title><rect x="64.3635%" y="1173" width="0.0340%" height="15" fill="rgb(243,159,6)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1183.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, int, double, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, double, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="64.3635%" y="1157" width="0.0340%" height="15" fill="rgb(205,211,41)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, int, double, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, double, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="64.3635%" y="1141" width="0.0340%" height="15" fill="rgb(253,30,1)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1151.50"></text></g><g><title>void tinyformat::format&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, int, double, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, double, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="64.3635%" y="1125" width="0.0340%" height="15" fill="rgb(226,80,18)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1135.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="64.3635%" y="1109" width="0.0340%" height="15" fill="rgb(253,156,46)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1119.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="64.3635%" y="1093" width="0.0340%" height="15" fill="rgb(248,87,27)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1103.50"></text></g><g><title>tinyformat::detail::FormatArg::format (1 samples, 0.03%)</title><rect x="64.3635%" y="1077" width="0.0340%" height="15" fill="rgb(227,122,2)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1087.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (1 samples, 0.03%)</title><rect x="64.3635%" y="1061" width="0.0340%" height="15" fill="rgb(229,94,39)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1071.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (1 samples, 0.03%)</title><rect x="64.3635%" y="1045" width="0.0340%" height="15" fill="rgb(225,173,31)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1055.50"></text></g><g><title>std::__convert_from_v (1 samples, 0.03%)</title><rect x="64.3635%" y="1029" width="0.0340%" height="15" fill="rgb(239,176,30)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1039.50"></text></g><g><title>___vsnprintf (1 samples, 0.03%)</title><rect x="64.3635%" y="1013" width="0.0340%" height="15" fill="rgb(212,104,21)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1023.50"></text></g><g><title>__printf_buffer (1 samples, 0.03%)</title><rect x="64.3635%" y="997" width="0.0340%" height="15" fill="rgb(240,209,40)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="1007.50"></text></g><g><title>__printf_fp_l_buffer (1 samples, 0.03%)</title><rect x="64.3635%" y="981" width="0.0340%" height="15" fill="rgb(234,195,5)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="991.50"></text></g><g><title>__printf_fp_buffer_1.isra.0 (1 samples, 0.03%)</title><rect x="64.3635%" y="965" width="0.0340%" height="15" fill="rgb(238,213,1)" fg:x="1891" fg:w="1"/><text x="64.6135%" y="975.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (1 samples, 0.03%)</title><rect x="64.3975%" y="1413" width="0.0340%" height="15" fill="rgb(235,182,54)" fg:x="1892" fg:w="1"/><text x="64.6475%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.03%)</title><rect x="64.4316%" y="1413" width="0.0340%" height="15" fill="rgb(229,50,46)" fg:x="1893" fg:w="1"/><text x="64.6816%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.03%)</title><rect x="64.4316%" y="1397" width="0.0340%" height="15" fill="rgb(219,145,13)" fg:x="1893" fg:w="1"/><text x="64.6816%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.03%)</title><rect x="64.4656%" y="1413" width="0.0340%" height="15" fill="rgb(220,226,10)" fg:x="1894" fg:w="1"/><text x="64.7156%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (1 samples, 0.03%)</title><rect x="64.4997%" y="1413" width="0.0340%" height="15" fill="rgb(248,47,30)" fg:x="1895" fg:w="1"/><text x="64.7497%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (1 samples, 0.03%)</title><rect x="64.4997%" y="1397" width="0.0340%" height="15" fill="rgb(231,209,44)" fg:x="1895" fg:w="1"/><text x="64.7497%" y="1407.50"></text></g><g><title>std::__use_cache&lt;std::__numpunct_cache&lt;char&gt; &gt;::operator (1 samples, 0.03%)</title><rect x="64.5337%" y="1413" width="0.0340%" height="15" fill="rgb(209,80,30)" fg:x="1896" fg:w="1"/><text x="64.7837%" y="1423.50"></text></g><g><title>std::filesystem::__cxx11::path::_M_split_cmpts (1 samples, 0.03%)</title><rect x="64.5677%" y="1413" width="0.0340%" height="15" fill="rgb(232,9,14)" fg:x="1897" fg:w="1"/><text x="64.8177%" y="1423.50"></text></g><g><title>std::filesystem::symlink_status (1 samples, 0.03%)</title><rect x="64.6018%" y="1413" width="0.0340%" height="15" fill="rgb(243,91,43)" fg:x="1898" fg:w="1"/><text x="64.8518%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="64.6018%" y="1397" width="0.0340%" height="15" fill="rgb(231,90,52)" fg:x="1898" fg:w="1"/><text x="64.8518%" y="1407.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (1 samples, 0.03%)</title><rect x="64.6358%" y="1413" width="0.0340%" height="15" fill="rgb(253,192,44)" fg:x="1899" fg:w="1"/><text x="64.8858%" y="1423.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (2 samples, 0.07%)</title><rect x="64.6698%" y="1413" width="0.0681%" height="15" fill="rgb(241,66,31)" fg:x="1900" fg:w="2"/><text x="64.9198%" y="1423.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (1 samples, 0.03%)</title><rect x="64.7039%" y="1397" width="0.0340%" height="15" fill="rgb(235,81,37)" fg:x="1901" fg:w="1"/><text x="64.9539%" y="1407.50"></text></g><g><title>tinyformat::detail::formatImpl (2 samples, 0.07%)</title><rect x="64.7379%" y="1413" width="0.0681%" height="15" fill="rgb(223,221,9)" fg:x="1902" fg:w="2"/><text x="64.9879%" y="1423.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.03%)</title><rect x="64.7720%" y="1397" width="0.0340%" height="15" fill="rgb(242,180,7)" fg:x="1903" fg:w="1"/><text x="65.0220%" y="1407.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (2 samples, 0.07%)</title><rect x="64.8060%" y="1413" width="0.0681%" height="15" fill="rgb(243,78,19)" fg:x="1904" fg:w="2"/><text x="65.0560%" y="1423.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="64.8400%" y="1397" width="0.0340%" height="15" fill="rgb(233,23,17)" fg:x="1905" fg:w="1"/><text x="65.0900%" y="1407.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fill (1 samples, 0.03%)</title><rect x="64.8400%" y="1381" width="0.0340%" height="15" fill="rgb(252,122,45)" fg:x="1905" fg:w="1"/><text x="65.0900%" y="1391.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.10%)</title><rect x="64.8741%" y="1413" width="0.1021%" height="15" fill="rgb(247,108,20)" fg:x="1906" fg:w="3"/><text x="65.1241%" y="1423.50"></text></g><g><title>util::TraceThread (1 samples, 0.03%)</title><rect x="64.9762%" y="1413" width="0.0340%" height="15" fill="rgb(235,84,21)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1423.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.03%)</title><rect x="64.9762%" y="1397" width="0.0340%" height="15" fill="rgb(247,129,10)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1407.50"></text></g><g><title>CConnman::ThreadMessageHandler (1 samples, 0.03%)</title><rect x="64.9762%" y="1381" width="0.0340%" height="15" fill="rgb(208,173,14)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1391.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1 samples, 0.03%)</title><rect x="64.9762%" y="1365" width="0.0340%" height="15" fill="rgb(236,31,38)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1375.50"></text></g><g><title>Chainstate::ActivateBestChain (1 samples, 0.03%)</title><rect x="64.9762%" y="1349" width="0.0340%" height="15" fill="rgb(232,65,17)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1359.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1 samples, 0.03%)</title><rect x="64.9762%" y="1333" width="0.0340%" height="15" fill="rgb(224,45,49)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1343.50"></text></g><g><title>Chainstate::ConnectTip (1 samples, 0.03%)</title><rect x="64.9762%" y="1317" width="0.0340%" height="15" fill="rgb(225,2,53)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1327.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.03%)</title><rect x="64.9762%" y="1301" width="0.0340%" height="15" fill="rgb(248,210,53)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1311.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (1 samples, 0.03%)</title><rect x="64.9762%" y="1285" width="0.0340%" height="15" fill="rgb(211,1,30)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;double, double, double&gt; (1 samples, 0.03%)</title><rect x="64.9762%" y="1269" width="0.0340%" height="15" fill="rgb(224,96,15)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1279.50"></text></g><g><title>void tinyformat::format&lt;double, double, double&gt; (1 samples, 0.03%)</title><rect x="64.9762%" y="1253" width="0.0340%" height="15" fill="rgb(252,45,11)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1263.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="64.9762%" y="1237" width="0.0340%" height="15" fill="rgb(220,125,38)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1247.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="64.9762%" y="1221" width="0.0340%" height="15" fill="rgb(243,161,33)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1231.50"></text></g><g><title>tinyformat::detail::FormatArg::format (1 samples, 0.03%)</title><rect x="64.9762%" y="1205" width="0.0340%" height="15" fill="rgb(248,197,34)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1215.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (1 samples, 0.03%)</title><rect x="64.9762%" y="1189" width="0.0340%" height="15" fill="rgb(228,165,23)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1199.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (1 samples, 0.03%)</title><rect x="64.9762%" y="1173" width="0.0340%" height="15" fill="rgb(236,94,38)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1183.50"></text></g><g><title>std::__convert_from_v (1 samples, 0.03%)</title><rect x="64.9762%" y="1157" width="0.0340%" height="15" fill="rgb(220,13,23)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1167.50"></text></g><g><title>___vsnprintf (1 samples, 0.03%)</title><rect x="64.9762%" y="1141" width="0.0340%" height="15" fill="rgb(234,26,39)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1151.50"></text></g><g><title>__printf_buffer (1 samples, 0.03%)</title><rect x="64.9762%" y="1125" width="0.0340%" height="15" fill="rgb(205,117,44)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1135.50"></text></g><g><title>__printf_fp_l_buffer (1 samples, 0.03%)</title><rect x="64.9762%" y="1109" width="0.0340%" height="15" fill="rgb(250,42,2)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1119.50"></text></g><g><title>__printf_fp_buffer_1.isra.0 (1 samples, 0.03%)</title><rect x="64.9762%" y="1093" width="0.0340%" height="15" fill="rgb(223,83,14)" fg:x="1909" fg:w="1"/><text x="65.2262%" y="1103.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [13], std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="65.0102%" y="1413" width="0.0340%" height="15" fill="rgb(241,147,50)" fg:x="1910" fg:w="1"/><text x="65.2602%" y="1423.50"></text></g><g><title>BCLog::Logger::Enabled (1 samples, 0.03%)</title><rect x="65.0102%" y="1397" width="0.0340%" height="15" fill="rgb(218,90,6)" fg:x="1910" fg:w="1"/><text x="65.2602%" y="1407.50"></text></g><g><title>void LogPrintFormatInternal&lt;int, double, double, double, double&gt; (1 samples, 0.03%)</title><rect x="65.0442%" y="1413" width="0.0340%" height="15" fill="rgb(210,191,5)" fg:x="1911" fg:w="1"/><text x="65.2942%" y="1423.50"></text></g><g><title>BCLog::Logger::Enabled (1 samples, 0.03%)</title><rect x="65.0442%" y="1397" width="0.0340%" height="15" fill="rgb(225,139,19)" fg:x="1911" fg:w="1"/><text x="65.2942%" y="1407.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="65.0783%" y="1253" width="0.0340%" height="15" fill="rgb(210,1,33)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1237" width="0.0340%" height="15" fill="rgb(213,50,3)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1221" width="0.0340%" height="15" fill="rgb(234,227,4)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1231.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1205" width="0.0340%" height="15" fill="rgb(246,63,5)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1215.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1189" width="0.0340%" height="15" fill="rgb(245,136,27)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1199.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1173" width="0.0340%" height="15" fill="rgb(247,199,27)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1157" width="0.0340%" height="15" fill="rgb(252,158,49)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1167.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1141" width="0.0340%" height="15" fill="rgb(254,73,1)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1151.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1125" width="0.0340%" height="15" fill="rgb(248,93,19)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1135.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1109" width="0.0340%" height="15" fill="rgb(206,67,5)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1093" width="0.0340%" height="15" fill="rgb(209,210,4)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1077" width="0.0340%" height="15" fill="rgb(214,185,36)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1061" width="0.0340%" height="15" fill="rgb(233,191,26)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1071.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1045" width="0.0340%" height="15" fill="rgb(248,94,17)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1055.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1029" width="0.0340%" height="15" fill="rgb(250,64,4)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1039.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="1013" width="0.0340%" height="15" fill="rgb(218,41,53)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1023.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="997" width="0.0340%" height="15" fill="rgb(251,176,28)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="1007.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="981" width="0.0340%" height="15" fill="rgb(247,22,9)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="65.0783%" y="965" width="0.0340%" height="15" fill="rgb(218,201,14)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="975.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="65.0783%" y="949" width="0.0340%" height="15" fill="rgb(218,94,10)" fg:x="1912" fg:w="1"/><text x="65.3283%" y="959.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1413" width="0.0681%" height="15" fill="rgb(222,183,52)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1397" width="0.0681%" height="15" fill="rgb(242,140,25)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1407.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1381" width="0.0681%" height="15" fill="rgb(235,197,38)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1391.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1365" width="0.0681%" height="15" fill="rgb(237,136,15)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1375.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1349" width="0.0681%" height="15" fill="rgb(223,44,49)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1359.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1333" width="0.0681%" height="15" fill="rgb(227,71,15)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1317" width="0.0681%" height="15" fill="rgb(225,153,20)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1327.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1301" width="0.0681%" height="15" fill="rgb(210,190,26)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1311.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1285" width="0.0681%" height="15" fill="rgb(223,147,5)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1295.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="65.0783%" y="1269" width="0.0681%" height="15" fill="rgb(207,14,23)" fg:x="1912" fg:w="2"/><text x="65.3283%" y="1279.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.03%)</title><rect x="65.1123%" y="1253" width="0.0340%" height="15" fill="rgb(211,195,53)" fg:x="1913" fg:w="1"/><text x="65.3623%" y="1263.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1413" width="0.0340%" height="15" fill="rgb(237,75,46)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1423.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="65.1464%" y="1397" width="0.0340%" height="15" fill="rgb(254,55,14)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1407.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1381" width="0.0340%" height="15" fill="rgb(230,185,30)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1391.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1365" width="0.0340%" height="15" fill="rgb(220,14,11)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1375.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1349" width="0.0340%" height="15" fill="rgb(215,169,44)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1359.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1333" width="0.0340%" height="15" fill="rgb(253,203,20)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1343.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1317" width="0.0340%" height="15" fill="rgb(229,225,17)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1327.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1301" width="0.0340%" height="15" fill="rgb(236,76,26)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1311.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1285" width="0.0340%" height="15" fill="rgb(234,15,30)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1295.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1269" width="0.0340%" height="15" fill="rgb(211,113,48)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1279.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1253" width="0.0340%" height="15" fill="rgb(221,31,36)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1237" width="0.0340%" height="15" fill="rgb(215,118,52)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1247.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1221" width="0.0340%" height="15" fill="rgb(241,151,27)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1205" width="0.0340%" height="15" fill="rgb(253,51,3)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1215.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1189" width="0.0340%" height="15" fill="rgb(216,201,24)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1199.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1173" width="0.0340%" height="15" fill="rgb(231,107,4)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1183.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1157" width="0.0340%" height="15" fill="rgb(243,97,54)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1141" width="0.0340%" height="15" fill="rgb(221,32,51)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1151.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1125" width="0.0340%" height="15" fill="rgb(218,171,35)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.03%)</title><rect x="65.1464%" y="1109" width="0.0340%" height="15" fill="rgb(214,20,53)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1119.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="65.1464%" y="1093" width="0.0340%" height="15" fill="rgb(239,9,52)" fg:x="1914" fg:w="1"/><text x="65.3964%" y="1103.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.10%)</title><rect x="65.1804%" y="1413" width="0.1021%" height="15" fill="rgb(215,114,45)" fg:x="1915" fg:w="3"/><text x="65.4304%" y="1423.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.03%)</title><rect x="65.2485%" y="1397" width="0.0340%" height="15" fill="rgb(208,118,9)" fg:x="1917" fg:w="1"/><text x="65.4985%" y="1407.50"></text></g><g><title>DataStream::read (1 samples, 0.03%)</title><rect x="65.2485%" y="1381" width="0.0340%" height="15" fill="rgb(235,7,39)" fg:x="1917" fg:w="1"/><text x="65.4985%" y="1391.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.03%)</title><rect x="65.2485%" y="1365" width="0.0340%" height="15" fill="rgb(243,225,15)" fg:x="1917" fg:w="1"/><text x="65.4985%" y="1375.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1413" width="0.0681%" height="15" fill="rgb(225,216,18)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1423.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1397" width="0.0681%" height="15" fill="rgb(233,36,38)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1407.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1381" width="0.0681%" height="15" fill="rgb(239,88,23)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1391.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1365" width="0.0681%" height="15" fill="rgb(219,181,35)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1375.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1349" width="0.0681%" height="15" fill="rgb(215,18,46)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1359.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1333" width="0.0681%" height="15" fill="rgb(241,38,11)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1343.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1317" width="0.0681%" height="15" fill="rgb(248,169,45)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1327.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1301" width="0.0681%" height="15" fill="rgb(239,50,49)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1311.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1285" width="0.0681%" height="15" fill="rgb(231,96,31)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1295.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1269" width="0.0681%" height="15" fill="rgb(224,193,37)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1279.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1253" width="0.0681%" height="15" fill="rgb(227,153,50)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1263.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1237" width="0.0681%" height="15" fill="rgb(249,228,3)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1247.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (2 samples, 0.07%)</title><rect x="65.2825%" y="1221" width="0.0681%" height="15" fill="rgb(219,164,43)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1231.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1205" width="0.0681%" height="15" fill="rgb(216,45,41)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1215.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1189" width="0.0681%" height="15" fill="rgb(210,226,51)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1199.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1173" width="0.0681%" height="15" fill="rgb(209,117,49)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1183.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1157" width="0.0681%" height="15" fill="rgb(206,196,24)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1167.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1141" width="0.0681%" height="15" fill="rgb(253,218,3)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1151.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.07%)</title><rect x="65.2825%" y="1125" width="0.0681%" height="15" fill="rgb(252,166,2)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1135.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.07%)</title><rect x="65.2825%" y="1109" width="0.0681%" height="15" fill="rgb(236,218,26)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1119.50"></text></g><g><title>DataStream::read (2 samples, 0.07%)</title><rect x="65.2825%" y="1093" width="0.0681%" height="15" fill="rgb(254,84,19)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1103.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (2 samples, 0.07%)</title><rect x="65.2825%" y="1077" width="0.0681%" height="15" fill="rgb(219,137,29)" fg:x="1918" fg:w="2"/><text x="65.5325%" y="1087.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::clear (1 samples, 0.03%)</title><rect x="65.3506%" y="1397" width="0.0340%" height="15" fill="rgb(227,47,52)" fg:x="1920" fg:w="1"/><text x="65.6006%" y="1407.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_erase_at_end (1 samples, 0.03%)</title><rect x="65.3506%" y="1381" width="0.0340%" height="15" fill="rgb(229,167,24)" fg:x="1920" fg:w="1"/><text x="65.6006%" y="1391.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="65.3506%" y="1413" width="0.0681%" height="15" fill="rgb(233,164,1)" fg:x="1920" fg:w="2"/><text x="65.6006%" y="1423.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1397" width="0.0340%" height="15" fill="rgb(218,88,48)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1407.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1381" width="0.0340%" height="15" fill="rgb(226,214,24)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1391.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1365" width="0.0340%" height="15" fill="rgb(233,29,12)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1375.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1349" width="0.0340%" height="15" fill="rgb(219,120,34)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1359.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1333" width="0.0340%" height="15" fill="rgb(226,78,44)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1343.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1317" width="0.0340%" height="15" fill="rgb(240,15,48)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1327.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1301" width="0.0340%" height="15" fill="rgb(253,176,7)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1285" width="0.0340%" height="15" fill="rgb(206,166,28)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1295.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1269" width="0.0340%" height="15" fill="rgb(241,53,51)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1279.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1253" width="0.0340%" height="15" fill="rgb(249,112,30)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1263.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1237" width="0.0340%" height="15" fill="rgb(217,85,30)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1247.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1221" width="0.0340%" height="15" fill="rgb(233,49,7)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1231.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1205" width="0.0340%" height="15" fill="rgb(234,109,9)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1215.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1189" width="0.0340%" height="15" fill="rgb(253,95,22)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1199.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.3846%" y="1173" width="0.0340%" height="15" fill="rgb(233,176,25)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1183.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.03%)</title><rect x="65.3846%" y="1157" width="0.0340%" height="15" fill="rgb(236,33,39)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1167.50"></text></g><g><title>DataStream::read (1 samples, 0.03%)</title><rect x="65.3846%" y="1141" width="0.0340%" height="15" fill="rgb(223,226,42)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1151.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.03%)</title><rect x="65.3846%" y="1125" width="0.0340%" height="15" fill="rgb(216,99,33)" fg:x="1921" fg:w="1"/><text x="65.6346%" y="1135.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="65.4867%" y="1397" width="0.0340%" height="15" fill="rgb(235,84,23)" fg:x="1924" fg:w="1"/><text x="65.7367%" y="1407.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (4 samples, 0.14%)</title><rect x="65.4187%" y="1413" width="0.1361%" height="15" fill="rgb(232,2,27)" fg:x="1922" fg:w="4"/><text x="65.6687%" y="1423.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::clear (1 samples, 0.03%)</title><rect x="65.5208%" y="1397" width="0.0340%" height="15" fill="rgb(241,23,22)" fg:x="1925" fg:w="1"/><text x="65.7708%" y="1407.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_erase_at_end (1 samples, 0.03%)</title><rect x="65.5208%" y="1381" width="0.0340%" height="15" fill="rgb(211,73,27)" fg:x="1925" fg:w="1"/><text x="65.7708%" y="1391.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.14%)</title><rect x="65.5548%" y="1413" width="0.1361%" height="15" fill="rgb(235,109,49)" fg:x="1926" fg:w="4"/><text x="65.8048%" y="1423.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.6909%" y="1413" width="0.0340%" height="15" fill="rgb(230,99,29)" fg:x="1930" fg:w="1"/><text x="65.9409%" y="1423.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.6909%" y="1397" width="0.0340%" height="15" fill="rgb(245,199,7)" fg:x="1930" fg:w="1"/><text x="65.9409%" y="1407.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.03%)</title><rect x="65.6909%" y="1381" width="0.0340%" height="15" fill="rgb(217,179,10)" fg:x="1930" fg:w="1"/><text x="65.9409%" y="1391.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="65.6909%" y="1365" width="0.0340%" height="15" fill="rgb(254,99,47)" fg:x="1930" fg:w="1"/><text x="65.9409%" y="1375.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.03%)</title><rect x="65.6909%" y="1349" width="0.0340%" height="15" fill="rgb(251,121,7)" fg:x="1930" fg:w="1"/><text x="65.9409%" y="1359.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.03%)</title><rect x="65.7250%" y="1413" width="0.0340%" height="15" fill="rgb(250,177,26)" fg:x="1931" fg:w="1"/><text x="65.9750%" y="1423.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="65.7590%" y="1413" width="0.0340%" height="15" fill="rgb(232,88,15)" fg:x="1932" fg:w="1"/><text x="66.0090%" y="1423.50"></text></g><g><title>void std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_realloc_insert&lt;int, CScript const&amp;&gt; (1 samples, 0.03%)</title><rect x="65.7931%" y="1413" width="0.0340%" height="15" fill="rgb(251,54,54)" fg:x="1933" fg:w="1"/><text x="66.0431%" y="1423.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_check_len (1 samples, 0.03%)</title><rect x="65.7931%" y="1397" width="0.0340%" height="15" fill="rgb(208,177,15)" fg:x="1933" fg:w="1"/><text x="66.0431%" y="1407.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (1 samples, 0.03%)</title><rect x="65.8271%" y="1413" width="0.0340%" height="15" fill="rgb(205,97,32)" fg:x="1934" fg:w="1"/><text x="66.0771%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.03%)</title><rect x="65.8611%" y="1397" width="0.0340%" height="15" fill="rgb(217,192,13)" fg:x="1935" fg:w="1"/><text x="66.1111%" y="1407.50"></text></g><g><title>std::__pad&lt;char, std::char_traits&lt;char&gt; &gt;::_S_pad (3 samples, 0.10%)</title><rect x="65.8952%" y="1397" width="0.1021%" height="15" fill="rgb(215,163,41)" fg:x="1936" fg:w="3"/><text x="66.1452%" y="1407.50"></text></g><g><title>vtable for std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (5 samples, 0.17%)</title><rect x="65.8611%" y="1413" width="0.1702%" height="15" fill="rgb(246,83,29)" fg:x="1935" fg:w="5"/><text x="66.1111%" y="1423.50"></text></g><g><title>std::ostream::sentry::sentry (1 samples, 0.03%)</title><rect x="65.9973%" y="1397" width="0.0340%" height="15" fill="rgb(219,2,45)" fg:x="1939" fg:w="1"/><text x="66.2473%" y="1407.50"></text></g><g><title>b-msghand (1,937 samples, 65.93%)</title><rect x="0.1361%" y="1429" width="65.9292%" height="15" fill="rgb(242,215,33)" fg:x="4" fg:w="1937"/><text x="0.3861%" y="1439.50">b-msghand</text></g><g><title>vtable for std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.03%)</title><rect x="66.0313%" y="1413" width="0.0340%" height="15" fill="rgb(217,1,6)" fg:x="1940" fg:w="1"/><text x="66.2813%" y="1423.50"></text></g><g><title>__printf_fp_l_buffer (1 samples, 0.03%)</title><rect x="66.0313%" y="1397" width="0.0340%" height="15" fill="rgb(207,85,52)" fg:x="1940" fg:w="1"/><text x="66.2813%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.03%)</title><rect x="66.0654%" y="1333" width="0.0340%" height="15" fill="rgb(231,171,19)" fg:x="1941" fg:w="1"/><text x="66.3154%" y="1343.50"></text></g><g><title>DataStream::resize (5 samples, 0.17%)</title><rect x="66.0654%" y="1365" width="0.1702%" height="15" fill="rgb(207,128,4)" fg:x="1941" fg:w="5"/><text x="66.3154%" y="1375.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (5 samples, 0.17%)</title><rect x="66.0654%" y="1349" width="0.1702%" height="15" fill="rgb(219,208,4)" fg:x="1941" fg:w="5"/><text x="66.3154%" y="1359.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (4 samples, 0.14%)</title><rect x="66.0994%" y="1333" width="0.1361%" height="15" fill="rgb(235,161,42)" fg:x="1942" fg:w="4"/><text x="66.3494%" y="1343.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (4 samples, 0.14%)</title><rect x="66.0994%" y="1317" width="0.1361%" height="15" fill="rgb(247,218,18)" fg:x="1942" fg:w="4"/><text x="66.3494%" y="1327.50"></text></g><g><title>decltype  (4 samples, 0.14%)</title><rect x="66.0994%" y="1301" width="0.1361%" height="15" fill="rgb(232,114,51)" fg:x="1942" fg:w="4"/><text x="66.3494%" y="1311.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (4 samples, 0.14%)</title><rect x="66.0994%" y="1285" width="0.1361%" height="15" fill="rgb(222,95,3)" fg:x="1942" fg:w="4"/><text x="66.3494%" y="1295.50"></text></g><g><title>decltype (4 samples, 0.14%)</title><rect x="66.0994%" y="1269" width="0.1361%" height="15" fill="rgb(240,65,29)" fg:x="1942" fg:w="4"/><text x="66.3494%" y="1279.50"></text></g><g><title>V2Transport::GetReceivedMessage (6 samples, 0.20%)</title><rect x="66.0654%" y="1381" width="0.2042%" height="15" fill="rgb(249,209,20)" fg:x="1941" fg:w="6"/><text x="66.3154%" y="1391.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="66.2355%" y="1365" width="0.0340%" height="15" fill="rgb(241,48,37)" fg:x="1946" fg:w="1"/><text x="66.4855%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="66.2355%" y="1349" width="0.0340%" height="15" fill="rgb(230,140,42)" fg:x="1946" fg:w="1"/><text x="66.4855%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="66.2355%" y="1333" width="0.0340%" height="15" fill="rgb(230,176,45)" fg:x="1946" fg:w="1"/><text x="66.4855%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (1 samples, 0.03%)</title><rect x="66.2355%" y="1317" width="0.0340%" height="15" fill="rgb(245,112,21)" fg:x="1946" fg:w="1"/><text x="66.4855%" y="1327.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (1 samples, 0.03%)</title><rect x="66.2355%" y="1301" width="0.0340%" height="15" fill="rgb(207,183,35)" fg:x="1946" fg:w="1"/><text x="66.4855%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="66.2355%" y="1285" width="0.0340%" height="15" fill="rgb(227,44,33)" fg:x="1946" fg:w="1"/><text x="66.4855%" y="1295.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (1 samples, 0.03%)</title><rect x="66.2696%" y="1381" width="0.0340%" height="15" fill="rgb(246,120,21)" fg:x="1947" fg:w="1"/><text x="66.5196%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1269" width="0.0340%" height="15" fill="rgb(235,57,52)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1253" width="0.0340%" height="15" fill="rgb(238,84,10)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1237" width="0.0340%" height="15" fill="rgb(251,200,32)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1221" width="0.0340%" height="15" fill="rgb(247,159,13)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1205" width="0.0340%" height="15" fill="rgb(238,64,4)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1189" width="0.0340%" height="15" fill="rgb(221,131,51)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1173" width="0.0340%" height="15" fill="rgb(242,5,29)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1157" width="0.0340%" height="15" fill="rgb(214,130,32)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1141" width="0.0340%" height="15" fill="rgb(244,210,16)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1125" width="0.0340%" height="15" fill="rgb(234,48,26)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="68.4139%" y="1109" width="0.0340%" height="15" fill="rgb(231,82,38)" fg:x="2010" fg:w="1"/><text x="68.6639%" y="1119.50"></text></g><g><title>ChaCha20::Crypt (93 samples, 3.17%)</title><rect x="66.3036%" y="1301" width="3.1654%" height="15" fill="rgb(254,128,41)" fg:x="1948" fg:w="93"/><text x="66.5536%" y="1311.50">Cha..</text></g><g><title>ChaCha20Aligned::Crypt (93 samples, 3.17%)</title><rect x="66.3036%" y="1285" width="3.1654%" height="15" fill="rgb(212,73,49)" fg:x="1948" fg:w="93"/><text x="66.5536%" y="1295.50">Cha..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (30 samples, 1.02%)</title><rect x="68.4479%" y="1269" width="1.0211%" height="15" fill="rgb(205,62,54)" fg:x="2011" fg:w="30"/><text x="68.6979%" y="1279.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (30 samples, 1.02%)</title><rect x="68.4479%" y="1253" width="1.0211%" height="15" fill="rgb(228,0,8)" fg:x="2011" fg:w="30"/><text x="68.6979%" y="1263.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="69.1967%" y="1237" width="0.2723%" height="15" fill="rgb(251,28,17)" fg:x="2033" fg:w="8"/><text x="69.4467%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="69.1967%" y="1221" width="0.2723%" height="15" fill="rgb(238,105,27)" fg:x="2033" fg:w="8"/><text x="69.4467%" y="1231.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="69.1967%" y="1205" width="0.2723%" height="15" fill="rgb(237,216,33)" fg:x="2033" fg:w="8"/><text x="69.4467%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="69.2308%" y="1189" width="0.2383%" height="15" fill="rgb(229,228,25)" fg:x="2034" fg:w="7"/><text x="69.4808%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="69.2308%" y="1173" width="0.2383%" height="15" fill="rgb(233,75,23)" fg:x="2034" fg:w="7"/><text x="69.4808%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="69.2308%" y="1157" width="0.2383%" height="15" fill="rgb(231,207,16)" fg:x="2034" fg:w="7"/><text x="69.4808%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="69.2308%" y="1141" width="0.2383%" height="15" fill="rgb(231,191,45)" fg:x="2034" fg:w="7"/><text x="69.4808%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="69.2308%" y="1125" width="0.2383%" height="15" fill="rgb(224,133,17)" fg:x="2034" fg:w="7"/><text x="69.4808%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="69.2308%" y="1109" width="0.2383%" height="15" fill="rgb(209,178,27)" fg:x="2034" fg:w="7"/><text x="69.4808%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="69.2308%" y="1093" width="0.2383%" height="15" fill="rgb(218,37,11)" fg:x="2034" fg:w="7"/><text x="69.4808%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="69.3329%" y="1077" width="0.1361%" height="15" fill="rgb(251,226,25)" fg:x="2037" fg:w="4"/><text x="69.5829%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="69.3329%" y="1061" width="0.1361%" height="15" fill="rgb(209,222,27)" fg:x="2037" fg:w="4"/><text x="69.5829%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="69.3329%" y="1045" width="0.1361%" height="15" fill="rgb(238,22,21)" fg:x="2037" fg:w="4"/><text x="69.5829%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="69.4350%" y="1029" width="0.0340%" height="15" fill="rgb(233,161,25)" fg:x="2040" fg:w="1"/><text x="69.6850%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="69.4350%" y="1013" width="0.0340%" height="15" fill="rgb(226,122,53)" fg:x="2040" fg:w="1"/><text x="69.6850%" y="1023.50"></text></g><g><title>ChaCha20Aligned::Keystream (1 samples, 0.03%)</title><rect x="69.4690%" y="1253" width="0.0340%" height="15" fill="rgb(220,123,17)" fg:x="2041" fg:w="1"/><text x="69.7190%" y="1263.50"></text></g><g><title>BIP324Cipher::Decrypt (124 samples, 4.22%)</title><rect x="66.3036%" y="1349" width="4.2206%" height="15" fill="rgb(230,224,35)" fg:x="1948" fg:w="124"/><text x="66.5536%" y="1359.50">BIP32..</text></g><g><title>FSChaCha20Poly1305::Decrypt (124 samples, 4.22%)</title><rect x="66.3036%" y="1333" width="4.2206%" height="15" fill="rgb(246,83,8)" fg:x="1948" fg:w="124"/><text x="66.5536%" y="1343.50">FSCha..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (124 samples, 4.22%)</title><rect x="66.3036%" y="1317" width="4.2206%" height="15" fill="rgb(230,214,17)" fg:x="1948" fg:w="124"/><text x="66.5536%" y="1327.50">AEADC..</text></g><g><title>ComputeTag (31 samples, 1.06%)</title><rect x="69.4690%" y="1301" width="1.0551%" height="15" fill="rgb(222,97,18)" fg:x="2041" fg:w="31"/><text x="69.7190%" y="1311.50"></text></g><g><title>Poly1305::Update (31 samples, 1.06%)</title><rect x="69.4690%" y="1285" width="1.0551%" height="15" fill="rgb(206,79,1)" fg:x="2041" fg:w="31"/><text x="69.7190%" y="1295.50"></text></g><g><title>poly1305_donna::poly1305_update (31 samples, 1.06%)</title><rect x="69.4690%" y="1269" width="1.0551%" height="15" fill="rgb(214,121,34)" fg:x="2041" fg:w="31"/><text x="69.7190%" y="1279.50"></text></g><g><title>poly1305_donna::poly1305_blocks (30 samples, 1.02%)</title><rect x="69.5031%" y="1253" width="1.0211%" height="15" fill="rgb(249,199,46)" fg:x="2042" fg:w="30"/><text x="69.7531%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="70.3880%" y="1237" width="0.1361%" height="15" fill="rgb(214,222,46)" fg:x="2068" fg:w="4"/><text x="70.6380%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="70.3880%" y="1221" width="0.1361%" height="15" fill="rgb(248,168,30)" fg:x="2068" fg:w="4"/><text x="70.6380%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="70.3880%" y="1205" width="0.1361%" height="15" fill="rgb(226,14,28)" fg:x="2068" fg:w="4"/><text x="70.6380%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1189" width="0.1021%" height="15" fill="rgb(253,123,1)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1173" width="0.1021%" height="15" fill="rgb(225,24,42)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1157" width="0.1021%" height="15" fill="rgb(216,161,37)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1141" width="0.1021%" height="15" fill="rgb(251,164,26)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1125" width="0.1021%" height="15" fill="rgb(219,177,3)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1109" width="0.1021%" height="15" fill="rgb(222,65,0)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1093" width="0.1021%" height="15" fill="rgb(223,69,54)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="70.4221%" y="1077" width="0.1021%" height="15" fill="rgb(235,30,27)" fg:x="2069" fg:w="3"/><text x="70.6721%" y="1087.50"></text></g><g><title>V2Transport::GetMaxBytesToProcess (1 samples, 0.03%)</title><rect x="70.5242%" y="1349" width="0.0340%" height="15" fill="rgb(220,183,50)" fg:x="2072" fg:w="1"/><text x="70.7742%" y="1359.50"></text></g><g><title>V2Transport::GetMaxBytesToProcess (1 samples, 0.03%)</title><rect x="70.5242%" y="1333" width="0.0340%" height="15" fill="rgb(248,198,15)" fg:x="2072" fg:w="1"/><text x="70.7742%" y="1343.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.03%)</title><rect x="70.5242%" y="1317" width="0.0340%" height="15" fill="rgb(222,211,4)" fg:x="2072" fg:w="1"/><text x="70.7742%" y="1327.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (126 samples, 4.29%)</title><rect x="66.3036%" y="1365" width="4.2886%" height="15" fill="rgb(214,102,34)" fg:x="1948" fg:w="126"/><text x="66.5536%" y="1375.50">V2Tra..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="70.5582%" y="1349" width="0.0340%" height="15" fill="rgb(245,92,5)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1359.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="70.5582%" y="1333" width="0.0340%" height="15" fill="rgb(252,72,51)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1343.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1317" width="0.0340%" height="15" fill="rgb(252,208,19)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1327.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1301" width="0.0340%" height="15" fill="rgb(211,69,7)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1311.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1285" width="0.0340%" height="15" fill="rgb(211,27,16)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1295.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1269" width="0.0340%" height="15" fill="rgb(219,216,14)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1279.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1253" width="0.0340%" height="15" fill="rgb(219,71,8)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1263.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1237" width="0.0340%" height="15" fill="rgb(223,170,53)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1247.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1221" width="0.0340%" height="15" fill="rgb(246,21,26)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1231.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (1 samples, 0.03%)</title><rect x="70.5582%" y="1205" width="0.0340%" height="15" fill="rgb(248,20,46)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1215.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="70.5582%" y="1189" width="0.0340%" height="15" fill="rgb(252,94,11)" fg:x="2073" fg:w="1"/><text x="70.8082%" y="1199.50"></text></g><g><title>V2Transport::ReceivedBytes (128 samples, 4.36%)</title><rect x="66.3036%" y="1381" width="4.3567%" height="15" fill="rgb(236,163,8)" fg:x="1948" fg:w="128"/><text x="66.5536%" y="1391.50">V2Tra..</text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1365" width="0.0681%" height="15" fill="rgb(217,221,45)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1375.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1349" width="0.0681%" height="15" fill="rgb(238,38,17)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1359.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1333" width="0.0681%" height="15" fill="rgb(242,210,23)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1343.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1317" width="0.0681%" height="15" fill="rgb(250,86,53)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1327.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1301" width="0.0681%" height="15" fill="rgb(223,168,25)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1311.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1285" width="0.0681%" height="15" fill="rgb(251,189,4)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1295.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1269" width="0.0681%" height="15" fill="rgb(245,19,28)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1279.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1253" width="0.0681%" height="15" fill="rgb(207,10,34)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1263.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1237" width="0.0681%" height="15" fill="rgb(235,153,31)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1247.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (2 samples, 0.07%)</title><rect x="70.5922%" y="1221" width="0.0681%" height="15" fill="rgb(228,72,37)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.07%)</title><rect x="70.5922%" y="1205" width="0.0681%" height="15" fill="rgb(215,15,16)" fg:x="2074" fg:w="2"/><text x="70.8422%" y="1215.50"></text></g><g><title>CNode::ReceiveMsgBytes (137 samples, 4.66%)</title><rect x="66.0654%" y="1397" width="4.6630%" height="15" fill="rgb(250,119,29)" fg:x="1941" fg:w="137"/><text x="66.3154%" y="1407.50">CNode..</text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.07%)</title><rect x="70.6603%" y="1381" width="0.0681%" height="15" fill="rgb(214,59,1)" fg:x="2076" fg:w="2"/><text x="70.9103%" y="1391.50"></text></g><g><title>[[nf_conntrack]] (1 samples, 0.03%)</title><rect x="71.5453%" y="1173" width="0.0340%" height="15" fill="rgb(223,109,25)" fg:x="2102" fg:w="1"/><text x="71.7953%" y="1183.50"></text></g><g><title>[[nf_conntrack]] (1 samples, 0.03%)</title><rect x="71.5453%" y="1157" width="0.0340%" height="15" fill="rgb(230,198,22)" fg:x="2102" fg:w="1"/><text x="71.7953%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.5453%" y="1141" width="0.0340%" height="15" fill="rgb(245,184,46)" fg:x="2102" fg:w="1"/><text x="71.7953%" y="1151.50"></text></g><g><title>__libc_recv (33 samples, 1.12%)</title><rect x="70.7284%" y="1397" width="1.1232%" height="15" fill="rgb(253,73,16)" fg:x="2078" fg:w="33"/><text x="70.9784%" y="1407.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="70.7284%" y="1381" width="1.1232%" height="15" fill="rgb(206,94,45)" fg:x="2078" fg:w="33"/><text x="70.9784%" y="1391.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="70.7284%" y="1365" width="1.1232%" height="15" fill="rgb(236,83,27)" fg:x="2078" fg:w="33"/><text x="70.9784%" y="1375.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="70.7284%" y="1349" width="1.1232%" height="15" fill="rgb(220,196,8)" fg:x="2078" fg:w="33"/><text x="70.9784%" y="1359.50"></text></g><g><title>[unknown] (32 samples, 1.09%)</title><rect x="70.7624%" y="1333" width="1.0892%" height="15" fill="rgb(254,185,14)" fg:x="2079" fg:w="32"/><text x="71.0124%" y="1343.50"></text></g><g><title>[unknown] (32 samples, 1.09%)</title><rect x="70.7624%" y="1317" width="1.0892%" height="15" fill="rgb(226,50,22)" fg:x="2079" fg:w="32"/><text x="71.0124%" y="1327.50"></text></g><g><title>[unknown] (31 samples, 1.06%)</title><rect x="70.7965%" y="1301" width="1.0551%" height="15" fill="rgb(253,147,0)" fg:x="2080" fg:w="31"/><text x="71.0465%" y="1311.50"></text></g><g><title>[unknown] (30 samples, 1.02%)</title><rect x="70.8305%" y="1285" width="1.0211%" height="15" fill="rgb(252,46,33)" fg:x="2081" fg:w="30"/><text x="71.0805%" y="1295.50"></text></g><g><title>[unknown] (30 samples, 1.02%)</title><rect x="70.8305%" y="1269" width="1.0211%" height="15" fill="rgb(242,22,54)" fg:x="2081" fg:w="30"/><text x="71.0805%" y="1279.50"></text></g><g><title>[unknown] (28 samples, 0.95%)</title><rect x="70.8986%" y="1253" width="0.9530%" height="15" fill="rgb(223,178,32)" fg:x="2083" fg:w="28"/><text x="71.1486%" y="1263.50"></text></g><g><title>[unknown] (25 samples, 0.85%)</title><rect x="71.0007%" y="1237" width="0.8509%" height="15" fill="rgb(214,106,53)" fg:x="2086" fg:w="25"/><text x="71.2507%" y="1247.50"></text></g><g><title>[unknown] (23 samples, 0.78%)</title><rect x="71.0688%" y="1221" width="0.7828%" height="15" fill="rgb(232,65,50)" fg:x="2088" fg:w="23"/><text x="71.3188%" y="1231.50"></text></g><g><title>[unknown] (22 samples, 0.75%)</title><rect x="71.1028%" y="1205" width="0.7488%" height="15" fill="rgb(231,110,28)" fg:x="2089" fg:w="22"/><text x="71.3528%" y="1215.50"></text></g><g><title>[unknown] (12 samples, 0.41%)</title><rect x="71.4432%" y="1189" width="0.4084%" height="15" fill="rgb(216,71,40)" fg:x="2099" fg:w="12"/><text x="71.6932%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="71.5793%" y="1173" width="0.2723%" height="15" fill="rgb(229,89,53)" fg:x="2103" fg:w="8"/><text x="71.8293%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="71.7835%" y="1157" width="0.0681%" height="15" fill="rgb(210,124,14)" fg:x="2109" fg:w="2"/><text x="72.0335%" y="1167.50"></text></g><g><title>[[fat]] (2 samples, 0.07%)</title><rect x="71.7835%" y="1141" width="0.0681%" height="15" fill="rgb(236,213,6)" fg:x="2109" fg:w="2"/><text x="72.0335%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="71.7835%" y="1125" width="0.0681%" height="15" fill="rgb(228,41,5)" fg:x="2109" fg:w="2"/><text x="72.0335%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.8176%" y="1109" width="0.0340%" height="15" fill="rgb(221,167,25)" fg:x="2110" fg:w="1"/><text x="72.0676%" y="1119.50"></text></g><g><title>CConnman::SocketHandlerConnected (172 samples, 5.85%)</title><rect x="66.0654%" y="1413" width="5.8543%" height="15" fill="rgb(228,144,37)" fg:x="1941" fg:w="172"/><text x="66.3154%" y="1423.50">CConnma..</text></g><g><title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.07%)</title><rect x="71.8516%" y="1397" width="0.0681%" height="15" fill="rgb(227,189,38)" fg:x="2111" fg:w="2"/><text x="72.1016%" y="1407.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="71.8516%" y="1381" width="0.0681%" height="15" fill="rgb(218,8,2)" fg:x="2111" fg:w="2"/><text x="72.1016%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.8856%" y="1365" width="0.0340%" height="15" fill="rgb(209,61,28)" fg:x="2112" fg:w="1"/><text x="72.1356%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.8856%" y="1349" width="0.0340%" height="15" fill="rgb(233,140,39)" fg:x="2112" fg:w="1"/><text x="72.1356%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.8856%" y="1333" width="0.0340%" height="15" fill="rgb(251,66,48)" fg:x="2112" fg:w="1"/><text x="72.1356%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.8856%" y="1317" width="0.0340%" height="15" fill="rgb(210,44,45)" fg:x="2112" fg:w="1"/><text x="72.1356%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.8856%" y="1301" width="0.0340%" height="15" fill="rgb(214,136,46)" fg:x="2112" fg:w="1"/><text x="72.1356%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="71.8856%" y="1285" width="0.0340%" height="15" fill="rgb(207,130,50)" fg:x="2112" fg:w="1"/><text x="72.1356%" y="1295.50"></text></g><g><title>V2Transport::GetMaxBytesToProcess (1 samples, 0.03%)</title><rect x="71.9197%" y="1413" width="0.0340%" height="15" fill="rgb(228,102,49)" fg:x="2113" fg:w="1"/><text x="72.1697%" y="1423.50"></text></g><g><title>V2Transport::GetMaxBytesToProcess (1 samples, 0.03%)</title><rect x="71.9197%" y="1397" width="0.0340%" height="15" fill="rgb(253,55,1)" fg:x="2113" fg:w="1"/><text x="72.1697%" y="1407.50"></text></g><g><title>__libc_recv (1 samples, 0.03%)</title><rect x="71.9537%" y="1397" width="0.0340%" height="15" fill="rgb(238,222,9)" fg:x="2114" fg:w="1"/><text x="72.2037%" y="1407.50"></text></g><g><title>[anon] (2 samples, 0.07%)</title><rect x="71.9537%" y="1413" width="0.0681%" height="15" fill="rgb(246,99,6)" fg:x="2114" fg:w="2"/><text x="72.2037%" y="1423.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="71.9877%" y="1397" width="0.0340%" height="15" fill="rgb(219,110,26)" fg:x="2115" fg:w="1"/><text x="72.2377%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="72.0218%" y="1413" width="0.0340%" height="15" fill="rgb(239,160,33)" fg:x="2116" fg:w="1"/><text x="72.2718%" y="1423.50"></text></g><g><title>__poll (1 samples, 0.03%)</title><rect x="72.0218%" y="1397" width="0.0340%" height="15" fill="rgb(220,202,23)" fg:x="2116" fg:w="1"/><text x="72.2718%" y="1407.50"></text></g><g><title>CConnman::DisconnectNodes (1 samples, 0.03%)</title><rect x="72.0558%" y="1237" width="0.0340%" height="15" fill="rgb(208,80,26)" fg:x="2117" fg:w="1"/><text x="72.3058%" y="1247.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (1 samples, 0.03%)</title><rect x="72.0558%" y="1221" width="0.0340%" height="15" fill="rgb(243,85,7)" fg:x="2117" fg:w="1"/><text x="72.3058%" y="1231.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (1 samples, 0.03%)</title><rect x="72.0558%" y="1205" width="0.0340%" height="15" fill="rgb(228,77,47)" fg:x="2117" fg:w="1"/><text x="72.3058%" y="1215.50"></text></g><g><title>CConnman::DisconnectNodes (1 samples, 0.03%)</title><rect x="72.0558%" y="1189" width="0.0340%" height="15" fill="rgb(212,226,8)" fg:x="2117" fg:w="1"/><text x="72.3058%" y="1199.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (4 samples, 0.14%)</title><rect x="72.0899%" y="1205" width="0.1361%" height="15" fill="rgb(241,120,54)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1215.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (4 samples, 0.14%)</title><rect x="72.0899%" y="1189" width="0.1361%" height="15" fill="rgb(226,80,16)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1199.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (4 samples, 0.14%)</title><rect x="72.0899%" y="1173" width="0.1361%" height="15" fill="rgb(240,76,13)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1183.50"></text></g><g><title>std::mutex::unlock (4 samples, 0.14%)</title><rect x="72.0899%" y="1157" width="0.1361%" height="15" fill="rgb(252,74,8)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1167.50"></text></g><g><title>CConnman::GenerateWaitSockets (4 samples, 0.14%)</title><rect x="72.0899%" y="1141" width="0.1361%" height="15" fill="rgb(244,155,2)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1151.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (4 samples, 0.14%)</title><rect x="72.0899%" y="1125" width="0.1361%" height="15" fill="rgb(215,81,35)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1135.50"></text></g><g><title>__GI___lll_lock_wake (4 samples, 0.14%)</title><rect x="72.0899%" y="1109" width="0.1361%" height="15" fill="rgb(206,55,2)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="1093" width="0.1361%" height="15" fill="rgb(231,2,34)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="1077" width="0.1361%" height="15" fill="rgb(242,176,48)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="1061" width="0.1361%" height="15" fill="rgb(249,31,36)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="1045" width="0.1361%" height="15" fill="rgb(205,18,17)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="1029" width="0.1361%" height="15" fill="rgb(254,130,5)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="1013" width="0.1361%" height="15" fill="rgb(229,42,45)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="997" width="0.1361%" height="15" fill="rgb(245,95,25)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="981" width="0.1361%" height="15" fill="rgb(249,193,38)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="965" width="0.1361%" height="15" fill="rgb(241,140,43)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="949" width="0.1361%" height="15" fill="rgb(245,78,48)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="933" width="0.1361%" height="15" fill="rgb(214,92,39)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="943.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="72.0899%" y="917" width="0.1361%" height="15" fill="rgb(211,189,14)" fg:x="2118" fg:w="4"/><text x="72.3399%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="72.1920%" y="901" width="0.0340%" height="15" fill="rgb(218,7,24)" fg:x="2121" fg:w="1"/><text x="72.4420%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="72.1920%" y="885" width="0.0340%" height="15" fill="rgb(224,200,49)" fg:x="2121" fg:w="1"/><text x="72.4420%" y="895.50"></text></g><g><title>CConnman::GenerateWaitSockets (5 samples, 0.17%)</title><rect x="72.0899%" y="1221" width="0.1702%" height="15" fill="rgb(218,210,14)" fg:x="2118" fg:w="5"/><text x="72.3399%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;std::shared_ptr&lt;Sock const&gt;, Sock::Events, Sock::HashSharedPtrSock, Sock::EqualSharedPtrSock, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt; &gt;::emplace&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.03%)</title><rect x="72.2260%" y="1205" width="0.0340%" height="15" fill="rgb(234,142,31)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, false, true&gt;, bool&gt; std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.03%)</title><rect x="72.2260%" y="1189" width="0.0340%" height="15" fill="rgb(227,165,2)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, false, true&gt;, bool&gt; std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.03%)</title><rect x="72.2260%" y="1173" width="0.0340%" height="15" fill="rgb(232,44,46)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;std::shared_ptr&lt;Sock const&gt;, std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, std::allocator&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt; &gt;, std::__detail::_Select1st, Sock::EqualSharedPtrSock, Sock::HashSharedPtrSock, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.03%)</title><rect x="72.2260%" y="1157" width="0.0340%" height="15" fill="rgb(236,149,47)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1167.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::shared_ptr&lt;Sock&gt;&amp;, Sock::Events&gt; (1 samples, 0.03%)</title><rect x="72.2260%" y="1141" width="0.0340%" height="15" fill="rgb(227,45,31)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1151.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="72.2260%" y="1125" width="0.0340%" height="15" fill="rgb(240,176,51)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1135.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="72.2260%" y="1109" width="0.0340%" height="15" fill="rgb(249,146,41)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1119.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::shared_ptr&lt;Sock const&gt; const, Sock::Events&gt;, true&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="72.2260%" y="1093" width="0.0340%" height="15" fill="rgb(213,208,4)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1103.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="72.2260%" y="1077" width="0.0340%" height="15" fill="rgb(245,84,36)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1087.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="72.2260%" y="1061" width="0.0340%" height="15" fill="rgb(254,84,18)" fg:x="2122" fg:w="1"/><text x="72.4760%" y="1071.50"></text></g><g><title>CConnman::NodesSnapshot::NodesSnapshot (1 samples, 0.03%)</title><rect x="72.2600%" y="1221" width="0.0340%" height="15" fill="rgb(225,38,54)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1231.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::recursive_mutex&gt; &gt;::~UniqueLock (1 samples, 0.03%)</title><rect x="72.2600%" y="1205" width="0.0340%" height="15" fill="rgb(246,50,30)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1215.50"></text></g><g><title>std::unique_lock&lt;std::recursive_mutex&gt;::~unique_lock (1 samples, 0.03%)</title><rect x="72.2600%" y="1189" width="0.0340%" height="15" fill="rgb(246,148,9)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1199.50"></text></g><g><title>std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt;::operator= (1 samples, 0.03%)</title><rect x="72.2600%" y="1173" width="0.0340%" height="15" fill="rgb(223,75,4)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1183.50"></text></g><g><title>CNode** std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;CNode* const*, std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1157" width="0.0340%" height="15" fill="rgb(239,148,41)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1167.50"></text></g><g><title>CNode** std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;CNode* const*, std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt; &gt;, CNode**, CNode*&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1141" width="0.0340%" height="15" fill="rgb(205,195,3)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1151.50"></text></g><g><title>CNode** std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;CNode* const*, std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt; &gt;, CNode**&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1125" width="0.0340%" height="15" fill="rgb(254,161,1)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1135.50"></text></g><g><title>CNode** std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;CNode* const*, std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt; &gt;, CNode**&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1109" width="0.0340%" height="15" fill="rgb(211,229,8)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1119.50"></text></g><g><title>CNode** std::copy&lt;__gnu_cxx::__normal_iterator&lt;CNode* const*, std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt; &gt;, CNode**&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1093" width="0.0340%" height="15" fill="rgb(220,97,9)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1103.50"></text></g><g><title>CNode** std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;CNode* const*, std::vector&lt;CNode*, std::allocator&lt;CNode*&gt; &gt; &gt;, CNode**&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1077" width="0.0340%" height="15" fill="rgb(240,218,8)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1087.50"></text></g><g><title>CNode** std::__copy_move_a1&lt;false, CNode* const*, CNode**&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1061" width="0.0340%" height="15" fill="rgb(250,44,0)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1071.50"></text></g><g><title>CNode** std::__copy_move_a2&lt;false, CNode* const*, CNode**&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1045" width="0.0340%" height="15" fill="rgb(236,41,53)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1055.50"></text></g><g><title>CNode** std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;CNode* const, CNode*&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1029" width="0.0340%" height="15" fill="rgb(218,227,13)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1039.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;CNode*, CNode* const&gt; (1 samples, 0.03%)</title><rect x="72.2600%" y="1013" width="0.0340%" height="15" fill="rgb(217,94,32)" fg:x="2123" fg:w="1"/><text x="72.5100%" y="1023.50"></text></g><g><title>[[igc]] (1 samples, 0.03%)</title><rect x="72.9748%" y="949" width="0.0340%" height="15" fill="rgb(213,217,12)" fg:x="2144" fg:w="1"/><text x="73.2248%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="72.9748%" y="933" width="0.0340%" height="15" fill="rgb(229,13,46)" fg:x="2144" fg:w="1"/><text x="73.2248%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="72.9748%" y="917" width="0.0340%" height="15" fill="rgb(243,139,5)" fg:x="2144" fg:w="1"/><text x="73.2248%" y="927.50"></text></g><g><title>b-net (207 samples, 7.05%)</title><rect x="66.0654%" y="1429" width="7.0456%" height="15" fill="rgb(249,38,45)" fg:x="1941" fg:w="207"/><text x="66.3154%" y="1439.50">b-net</text></g><g><title>__clone (31 samples, 1.06%)</title><rect x="72.0558%" y="1413" width="1.0551%" height="15" fill="rgb(216,70,11)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1423.50"></text></g><g><title>start_thread (31 samples, 1.06%)</title><rect x="72.0558%" y="1397" width="1.0551%" height="15" fill="rgb(253,101,25)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1407.50"></text></g><g><title>execute_native_thread_routine (31 samples, 1.06%)</title><rect x="72.0558%" y="1381" width="1.0551%" height="15" fill="rgb(207,197,30)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1391.50"></text></g><g><title>_M_run (31 samples, 1.06%)</title><rect x="72.0558%" y="1365" width="1.0551%" height="15" fill="rgb(238,87,13)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1375.50"></text></g><g><title>operator (31 samples, 1.06%)</title><rect x="72.0558%" y="1349" width="1.0551%" height="15" fill="rgb(215,155,8)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1359.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (31 samples, 1.06%)</title><rect x="72.0558%" y="1333" width="1.0551%" height="15" fill="rgb(239,166,38)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1343.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (31 samples, 1.06%)</title><rect x="72.0558%" y="1317" width="1.0551%" height="15" fill="rgb(240,194,35)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1327.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (31 samples, 1.06%)</title><rect x="72.0558%" y="1301" width="1.0551%" height="15" fill="rgb(219,10,44)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1311.50"></text></g><g><title>util::TraceThread (31 samples, 1.06%)</title><rect x="72.0558%" y="1285" width="1.0551%" height="15" fill="rgb(251,220,35)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1295.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (31 samples, 1.06%)</title><rect x="72.0558%" y="1269" width="1.0551%" height="15" fill="rgb(218,117,13)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1279.50"></text></g><g><title>CConnman::ThreadSocketHandler (31 samples, 1.06%)</title><rect x="72.0558%" y="1253" width="1.0551%" height="15" fill="rgb(221,213,40)" fg:x="2117" fg:w="31"/><text x="72.3058%" y="1263.50"></text></g><g><title>CConnman::SocketHandler (30 samples, 1.02%)</title><rect x="72.0899%" y="1237" width="1.0211%" height="15" fill="rgb(251,224,35)" fg:x="2118" fg:w="30"/><text x="72.3399%" y="1247.50"></text></g><g><title>Sock::WaitMany (24 samples, 0.82%)</title><rect x="72.2941%" y="1221" width="0.8169%" height="15" fill="rgb(241,33,39)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1231.50"></text></g><g><title>Sock::WaitMany (24 samples, 0.82%)</title><rect x="72.2941%" y="1205" width="0.8169%" height="15" fill="rgb(222,74,17)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1215.50"></text></g><g><title>__poll (24 samples, 0.82%)</title><rect x="72.2941%" y="1189" width="0.8169%" height="15" fill="rgb(225,103,0)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1199.50"></text></g><g><title>[unknown] (24 samples, 0.82%)</title><rect x="72.2941%" y="1173" width="0.8169%" height="15" fill="rgb(240,0,12)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1183.50"></text></g><g><title>[unknown] (24 samples, 0.82%)</title><rect x="72.2941%" y="1157" width="0.8169%" height="15" fill="rgb(233,213,37)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1167.50"></text></g><g><title>[unknown] (24 samples, 0.82%)</title><rect x="72.2941%" y="1141" width="0.8169%" height="15" fill="rgb(225,84,52)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1151.50"></text></g><g><title>[unknown] (24 samples, 0.82%)</title><rect x="72.2941%" y="1125" width="0.8169%" height="15" fill="rgb(247,160,51)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1135.50"></text></g><g><title>[unknown] (24 samples, 0.82%)</title><rect x="72.2941%" y="1109" width="0.8169%" height="15" fill="rgb(244,60,51)" fg:x="2124" fg:w="24"/><text x="72.5441%" y="1119.50"></text></g><g><title>[unknown] (22 samples, 0.75%)</title><rect x="72.3622%" y="1093" width="0.7488%" height="15" fill="rgb(233,114,7)" fg:x="2126" fg:w="22"/><text x="72.6122%" y="1103.50"></text></g><g><title>[unknown] (20 samples, 0.68%)</title><rect x="72.4302%" y="1077" width="0.6807%" height="15" fill="rgb(246,136,16)" fg:x="2128" fg:w="20"/><text x="72.6802%" y="1087.50"></text></g><g><title>[unknown] (20 samples, 0.68%)</title><rect x="72.4302%" y="1061" width="0.6807%" height="15" fill="rgb(243,114,45)" fg:x="2128" fg:w="20"/><text x="72.6802%" y="1071.50"></text></g><g><title>[unknown] (19 samples, 0.65%)</title><rect x="72.4643%" y="1045" width="0.6467%" height="15" fill="rgb(247,183,43)" fg:x="2129" fg:w="19"/><text x="72.7143%" y="1055.50"></text></g><g><title>[unknown] (18 samples, 0.61%)</title><rect x="72.4983%" y="1029" width="0.6127%" height="15" fill="rgb(251,210,42)" fg:x="2130" fg:w="18"/><text x="72.7483%" y="1039.50"></text></g><g><title>[unknown] (16 samples, 0.54%)</title><rect x="72.5664%" y="1013" width="0.5446%" height="15" fill="rgb(221,88,35)" fg:x="2132" fg:w="16"/><text x="72.8164%" y="1023.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="72.7366%" y="997" width="0.3744%" height="15" fill="rgb(242,21,20)" fg:x="2137" fg:w="11"/><text x="72.9866%" y="1007.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="72.7706%" y="981" width="0.3404%" height="15" fill="rgb(233,226,36)" fg:x="2138" fg:w="10"/><text x="73.0206%" y="991.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="72.8727%" y="965" width="0.2383%" height="15" fill="rgb(243,189,34)" fg:x="2141" fg:w="7"/><text x="73.1227%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="73.0088%" y="949" width="0.1021%" height="15" fill="rgb(207,145,50)" fg:x="2145" fg:w="3"/><text x="73.2588%" y="959.50"></text></g><g><title>b-opencon (1 samples, 0.03%)</title><rect x="73.1110%" y="1429" width="0.0340%" height="15" fill="rgb(242,1,50)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1439.50"></text></g><g><title>__clone (1 samples, 0.03%)</title><rect x="73.1110%" y="1413" width="0.0340%" height="15" fill="rgb(231,65,32)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1423.50"></text></g><g><title>start_thread (1 samples, 0.03%)</title><rect x="73.1110%" y="1397" width="0.0340%" height="15" fill="rgb(208,68,49)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1407.50"></text></g><g><title>execute_native_thread_routine (1 samples, 0.03%)</title><rect x="73.1110%" y="1381" width="0.0340%" height="15" fill="rgb(253,54,49)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1391.50"></text></g><g><title>_M_run (1 samples, 0.03%)</title><rect x="73.1110%" y="1365" width="0.0340%" height="15" fill="rgb(245,186,24)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1375.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="73.1110%" y="1349" width="0.0340%" height="15" fill="rgb(209,2,41)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1359.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1333" width="0.0340%" height="15" fill="rgb(242,208,54)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1343.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1317" width="0.0340%" height="15" fill="rgb(225,9,51)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1327.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt; &gt; &gt;::_M_run (1 samples, 0.03%)</title><rect x="73.1110%" y="1301" width="0.0340%" height="15" fill="rgb(207,207,25)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1311.50"></text></g><g><title>util::TraceThread (1 samples, 0.03%)</title><rect x="73.1110%" y="1285" width="0.0340%" height="15" fill="rgb(253,96,18)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1295.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.03%)</title><rect x="73.1110%" y="1269" width="0.0340%" height="15" fill="rgb(252,215,20)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1279.50"></text></g><g><title>_M_invoke (1 samples, 0.03%)</title><rect x="73.1110%" y="1253" width="0.0340%" height="15" fill="rgb(245,227,26)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1263.50"></text></g><g><title>__invoke_r&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1237" width="0.0340%" height="15" fill="rgb(241,208,0)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1247.50"></text></g><g><title>__invoke_impl&lt;void, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1221" width="0.0340%" height="15" fill="rgb(224,130,10)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1231.50"></text></g><g><title>std::_Function_handler&lt;void (), CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#4}&gt;::_M_invoke (1 samples, 0.03%)</title><rect x="73.1110%" y="1205" width="0.0340%" height="15" fill="rgb(237,29,0)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1215.50"></text></g><g><title>CConnman::ThreadOpenConnections (1 samples, 0.03%)</title><rect x="73.1110%" y="1189" width="0.0340%" height="15" fill="rgb(219,27,41)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1199.50"></text></g><g><title>CThreadInterrupt::sleep_for (1 samples, 0.03%)</title><rect x="73.1110%" y="1173" width="0.0340%" height="15" fill="rgb(245,101,19)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1183.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1157" width="0.0340%" height="15" fill="rgb(243,44,37)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1167.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1141" width="0.0340%" height="15" fill="rgb(228,213,43)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1151.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1125" width="0.0340%" height="15" fill="rgb(219,163,21)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1135.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="73.1110%" y="1109" width="0.0340%" height="15" fill="rgb(234,86,24)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1119.50"></text></g><g><title>std::__condvar::wait_until (1 samples, 0.03%)</title><rect x="73.1110%" y="1093" width="0.0340%" height="15" fill="rgb(225,10,24)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1103.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.03%)</title><rect x="73.1110%" y="1077" width="0.0340%" height="15" fill="rgb(218,109,7)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1087.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.03%)</title><rect x="73.1110%" y="1061" width="0.0340%" height="15" fill="rgb(210,20,26)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.1110%" y="1045" width="0.0340%" height="15" fill="rgb(216,18,1)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.1110%" y="1029" width="0.0340%" height="15" fill="rgb(206,163,23)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.1110%" y="1013" width="0.0340%" height="15" fill="rgb(229,150,31)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.1110%" y="997" width="0.0340%" height="15" fill="rgb(231,10,5)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.1110%" y="981" width="0.0340%" height="15" fill="rgb(250,40,50)" fg:x="2148" fg:w="1"/><text x="73.3610%" y="991.50"></text></g><g><title>__GI___lll_lock_wake (1 samples, 0.03%)</title><rect x="73.1450%" y="1397" width="0.0340%" height="15" fill="rgb(217,119,7)" fg:x="2149" fg:w="1"/><text x="73.3950%" y="1407.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="73.1790%" y="1397" width="0.0340%" height="15" fill="rgb(245,214,40)" fg:x="2150" fg:w="1"/><text x="73.4290%" y="1407.50"></text></g><g><title>[[heap]] (3 samples, 0.10%)</title><rect x="73.1450%" y="1413" width="0.1021%" height="15" fill="rgb(216,187,1)" fg:x="2149" fg:w="3"/><text x="73.3950%" y="1423.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::UpdatedBlockTip(CBlockIndex const*, CBlockIndex const*, bool)::{lambda()#2}&gt;::_M_manager (1 samples, 0.03%)</title><rect x="73.2131%" y="1397" width="0.0340%" height="15" fill="rgb(237,146,21)" fg:x="2151" fg:w="1"/><text x="73.4631%" y="1407.50"></text></g><g><title>_int_free (5 samples, 0.17%)</title><rect x="73.2471%" y="1397" width="0.1702%" height="15" fill="rgb(210,174,47)" fg:x="2152" fg:w="5"/><text x="73.4971%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="73.4173%" y="1397" width="0.0340%" height="15" fill="rgb(218,111,39)" fg:x="2157" fg:w="1"/><text x="73.6673%" y="1407.50"></text></g><g><title>free@plt (2 samples, 0.07%)</title><rect x="73.4513%" y="1397" width="0.0681%" height="15" fill="rgb(224,95,19)" fg:x="2158" fg:w="2"/><text x="73.7013%" y="1407.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="73.5194%" y="1397" width="0.0340%" height="15" fill="rgb(234,15,38)" fg:x="2160" fg:w="1"/><text x="73.7694%" y="1407.50"></text></g><g><title>operator delete (1 samples, 0.03%)</title><rect x="73.5534%" y="1397" width="0.0340%" height="15" fill="rgb(246,56,12)" fg:x="2161" fg:w="1"/><text x="73.8034%" y="1407.50"></text></g><g><title>[anon] (11 samples, 0.37%)</title><rect x="73.2471%" y="1413" width="0.3744%" height="15" fill="rgb(247,16,17)" fg:x="2152" fg:w="11"/><text x="73.4971%" y="1423.50"></text></g><g><title>std::locale::id::_M_id (1 samples, 0.03%)</title><rect x="73.5875%" y="1397" width="0.0340%" height="15" fill="rgb(215,151,11)" fg:x="2162" fg:w="1"/><text x="73.8375%" y="1407.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="73.6215%" y="1397" width="0.0340%" height="15" fill="rgb(225,16,24)" fg:x="2163" fg:w="1"/><text x="73.8715%" y="1407.50"></text></g><g><title>[bitcoind-base] (2 samples, 0.07%)</title><rect x="73.6215%" y="1413" width="0.0681%" height="15" fill="rgb(217,117,5)" fg:x="2163" fg:w="2"/><text x="73.8715%" y="1423.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="73.6555%" y="1397" width="0.0340%" height="15" fill="rgb(246,187,53)" fg:x="2164" fg:w="1"/><text x="73.9055%" y="1407.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.03%)</title><rect x="73.6555%" y="1381" width="0.0340%" height="15" fill="rgb(241,71,40)" fg:x="2164" fg:w="1"/><text x="73.9055%" y="1391.50"></text></g><g><title>MurmurHash3 (1 samples, 0.03%)</title><rect x="73.6896%" y="1397" width="0.0340%" height="15" fill="rgb(231,67,39)" fg:x="2165" fg:w="1"/><text x="73.9396%" y="1407.50"></text></g><g><title>TxRequestTracker::ForgetTxHash (1 samples, 0.03%)</title><rect x="73.7236%" y="1397" width="0.0340%" height="15" fill="rgb(222,120,24)" fg:x="2166" fg:w="1"/><text x="73.9736%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.7577%" y="1397" width="0.0340%" height="15" fill="rgb(248,3,3)" fg:x="2167" fg:w="1"/><text x="74.0077%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.7577%" y="1381" width="0.0340%" height="15" fill="rgb(228,218,5)" fg:x="2167" fg:w="1"/><text x="74.0077%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="73.6896%" y="1413" width="0.1361%" height="15" fill="rgb(212,202,43)" fg:x="2165" fg:w="4"/><text x="73.9396%" y="1423.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="73.7917%" y="1397" width="0.0340%" height="15" fill="rgb(235,183,2)" fg:x="2168" fg:w="1"/><text x="74.0417%" y="1407.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.03%)</title><rect x="73.7917%" y="1381" width="0.0340%" height="15" fill="rgb(230,165,10)" fg:x="2168" fg:w="1"/><text x="74.0417%" y="1391.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (35 samples, 1.19%)</title><rect x="73.8257%" y="1237" width="1.1913%" height="15" fill="rgb(219,54,40)" fg:x="2169" fg:w="35"/><text x="74.0757%" y="1247.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (35 samples, 1.19%)</title><rect x="73.8257%" y="1221" width="1.1913%" height="15" fill="rgb(244,73,9)" fg:x="2169" fg:w="35"/><text x="74.0757%" y="1231.50"></text></g><g><title>std::__condvar::wait_until (35 samples, 1.19%)</title><rect x="73.8257%" y="1205" width="1.1913%" height="15" fill="rgb(212,32,45)" fg:x="2169" fg:w="35"/><text x="74.0757%" y="1215.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (35 samples, 1.19%)</title><rect x="73.8257%" y="1189" width="1.1913%" height="15" fill="rgb(205,58,31)" fg:x="2169" fg:w="35"/><text x="74.0757%" y="1199.50"></text></g><g><title>__futex_abstimed_wait_common (35 samples, 1.19%)</title><rect x="73.8257%" y="1173" width="1.1913%" height="15" fill="rgb(250,120,43)" fg:x="2169" fg:w="35"/><text x="74.0757%" y="1183.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="73.8938%" y="1157" width="1.1232%" height="15" fill="rgb(235,13,10)" fg:x="2171" fg:w="33"/><text x="74.1438%" y="1167.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="73.8938%" y="1141" width="1.1232%" height="15" fill="rgb(232,219,31)" fg:x="2171" fg:w="33"/><text x="74.1438%" y="1151.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="73.8938%" y="1125" width="1.1232%" height="15" fill="rgb(218,157,51)" fg:x="2171" fg:w="33"/><text x="74.1438%" y="1135.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="73.8938%" y="1109" width="1.1232%" height="15" fill="rgb(211,91,52)" fg:x="2171" fg:w="33"/><text x="74.1438%" y="1119.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="73.8938%" y="1093" width="1.1232%" height="15" fill="rgb(240,173,1)" fg:x="2171" fg:w="33"/><text x="74.1438%" y="1103.50"></text></g><g><title>[unknown] (33 samples, 1.12%)</title><rect x="73.8938%" y="1077" width="1.1232%" height="15" fill="rgb(248,20,47)" fg:x="2171" fg:w="33"/><text x="74.1438%" y="1087.50"></text></g><g><title>[unknown] (32 samples, 1.09%)</title><rect x="73.9278%" y="1061" width="1.0892%" height="15" fill="rgb(217,221,40)" fg:x="2172" fg:w="32"/><text x="74.1778%" y="1071.50"></text></g><g><title>[unknown] (29 samples, 0.99%)</title><rect x="74.0300%" y="1045" width="0.9871%" height="15" fill="rgb(226,149,51)" fg:x="2175" fg:w="29"/><text x="74.2800%" y="1055.50"></text></g><g><title>[unknown] (21 samples, 0.71%)</title><rect x="74.3022%" y="1029" width="0.7148%" height="15" fill="rgb(252,193,7)" fg:x="2183" fg:w="21"/><text x="74.5522%" y="1039.50"></text></g><g><title>[unknown] (14 samples, 0.48%)</title><rect x="74.5405%" y="1013" width="0.4765%" height="15" fill="rgb(205,123,0)" fg:x="2190" fg:w="14"/><text x="74.7905%" y="1023.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="74.7447%" y="997" width="0.2723%" height="15" fill="rgb(233,173,25)" fg:x="2196" fg:w="8"/><text x="74.9947%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="74.7788%" y="981" width="0.2383%" height="15" fill="rgb(216,63,32)" fg:x="2197" fg:w="7"/><text x="75.0288%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="74.8128%" y="965" width="0.2042%" height="15" fill="rgb(209,56,45)" fg:x="2198" fg:w="6"/><text x="75.0628%" y="975.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="74.8128%" y="949" width="0.2042%" height="15" fill="rgb(226,111,49)" fg:x="2198" fg:w="6"/><text x="75.0628%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="74.8809%" y="933" width="0.1361%" height="15" fill="rgb(244,181,21)" fg:x="2200" fg:w="4"/><text x="75.1309%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="74.9149%" y="917" width="0.1021%" height="15" fill="rgb(222,126,15)" fg:x="2201" fg:w="3"/><text x="75.1649%" y="927.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (2 samples, 0.07%)</title><rect x="75.0170%" y="1205" width="0.0681%" height="15" fill="rgb(222,95,17)" fg:x="2204" fg:w="2"/><text x="75.2670%" y="1215.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (2 samples, 0.07%)</title><rect x="75.0170%" y="1189" width="0.0681%" height="15" fill="rgb(254,46,5)" fg:x="2204" fg:w="2"/><text x="75.2670%" y="1199.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (2 samples, 0.07%)</title><rect x="75.0170%" y="1173" width="0.0681%" height="15" fill="rgb(236,216,35)" fg:x="2204" fg:w="2"/><text x="75.2670%" y="1183.50"></text></g><g><title>std::mutex::lock (2 samples, 0.07%)</title><rect x="75.0170%" y="1157" width="0.0681%" height="15" fill="rgb(217,187,26)" fg:x="2204" fg:w="2"/><text x="75.2670%" y="1167.50"></text></g><g><title>SerialTaskRunner::ProcessQueue (1 samples, 0.03%)</title><rect x="75.0511%" y="1141" width="0.0340%" height="15" fill="rgb(207,192,25)" fg:x="2205" fg:w="1"/><text x="75.3011%" y="1151.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="75.0511%" y="1125" width="0.0340%" height="15" fill="rgb(253,135,27)" fg:x="2205" fg:w="1"/><text x="75.3011%" y="1135.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::reverse_lock::~reverse_lock (1 samples, 0.03%)</title><rect x="75.0851%" y="1093" width="0.0340%" height="15" fill="rgb(211,122,29)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="1103.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.03%)</title><rect x="75.0851%" y="1077" width="0.0340%" height="15" fill="rgb(233,162,40)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.03%)</title><rect x="75.0851%" y="1061" width="0.0340%" height="15" fill="rgb(222,184,47)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.03%)</title><rect x="75.0851%" y="1045" width="0.0340%" height="15" fill="rgb(249,99,23)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="1055.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="75.0851%" y="1029" width="0.0340%" height="15" fill="rgb(214,60,12)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="1039.50"></text></g><g><title>std::allocator&lt;char&gt;::deallocate (1 samples, 0.03%)</title><rect x="75.0851%" y="1013" width="0.0340%" height="15" fill="rgb(250,229,36)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="1023.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (1 samples, 0.03%)</title><rect x="75.0851%" y="997" width="0.0340%" height="15" fill="rgb(232,195,10)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="1007.50"></text></g><g><title>pthread_mutex_unlock@plt (1 samples, 0.03%)</title><rect x="75.0851%" y="981" width="0.0340%" height="15" fill="rgb(205,213,31)" fg:x="2206" fg:w="1"/><text x="75.3351%" y="991.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.03%)</title><rect x="75.1191%" y="1077" width="0.0340%" height="15" fill="rgb(237,43,8)" fg:x="2207" fg:w="1"/><text x="75.3691%" y="1087.50"></text></g><g><title>CRollingBloomFilter::insert (3 samples, 0.10%)</title><rect x="75.8339%" y="1013" width="0.1021%" height="15" fill="rgb(216,208,3)" fg:x="2228" fg:w="3"/><text x="76.0839%" y="1023.50"></text></g><g><title>FastRange32 (2 samples, 0.07%)</title><rect x="75.9360%" y="1013" width="0.0681%" height="15" fill="rgb(228,179,44)" fg:x="2231" fg:w="2"/><text x="76.1860%" y="1023.50"></text></g><g><title>RollingBloomHash (3 samples, 0.10%)</title><rect x="76.0041%" y="1013" width="0.1021%" height="15" fill="rgb(230,192,27)" fg:x="2233" fg:w="3"/><text x="76.2541%" y="1023.50"></text></g><g><title>CRollingBloomFilter::insert (21 samples, 0.71%)</title><rect x="75.5276%" y="1029" width="0.7148%" height="15" fill="rgb(251,30,38)" fg:x="2219" fg:w="21"/><text x="75.7776%" y="1039.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (4 samples, 0.14%)</title><rect x="76.1062%" y="1013" width="0.1361%" height="15" fill="rgb(246,55,52)" fg:x="2236" fg:w="4"/><text x="76.3562%" y="1023.50"></text></g><g><title>CRollingBloomFilter::insert (49 samples, 1.67%)</title><rect x="75.4595%" y="1045" width="1.6678%" height="15" fill="rgb(249,79,26)" fg:x="2217" fg:w="49"/><text x="75.7095%" y="1055.50"></text></g><g><title>MurmurHash3 (26 samples, 0.88%)</title><rect x="76.2423%" y="1029" width="0.8850%" height="15" fill="rgb(220,202,16)" fg:x="2240" fg:w="26"/><text x="76.4923%" y="1039.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (6 samples, 0.20%)</title><rect x="76.9231%" y="1013" width="0.2042%" height="15" fill="rgb(250,170,23)" fg:x="2260" fg:w="6"/><text x="77.1731%" y="1023.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (6 samples, 0.20%)</title><rect x="76.9231%" y="997" width="0.2042%" height="15" fill="rgb(230,7,37)" fg:x="2260" fg:w="6"/><text x="77.1731%" y="1007.50"></text></g><g><title>FastRange32 (2 samples, 0.07%)</title><rect x="77.1273%" y="1045" width="0.0681%" height="15" fill="rgb(213,71,1)" fg:x="2266" fg:w="2"/><text x="77.3773%" y="1055.50"></text></g><g><title>RollingBloomHash (1 samples, 0.03%)</title><rect x="77.1954%" y="1045" width="0.0340%" height="15" fill="rgb(227,87,39)" fg:x="2268" fg:w="1"/><text x="77.4454%" y="1055.50"></text></g><g><title>CRollingBloomFilter::insert (62 samples, 2.11%)</title><rect x="75.1532%" y="1061" width="2.1103%" height="15" fill="rgb(210,41,29)" fg:x="2208" fg:w="62"/><text x="75.4032%" y="1071.50">C..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="77.2294%" y="1045" width="0.0340%" height="15" fill="rgb(206,191,31)" fg:x="2269" fg:w="1"/><text x="77.4794%" y="1055.50"></text></g><g><title>MurmurHash3 (25 samples, 0.85%)</title><rect x="77.2634%" y="1061" width="0.8509%" height="15" fill="rgb(247,75,54)" fg:x="2270" fg:w="25"/><text x="77.5134%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (6 samples, 0.20%)</title><rect x="77.9101%" y="1045" width="0.2042%" height="15" fill="rgb(208,54,50)" fg:x="2289" fg:w="6"/><text x="78.1601%" y="1055.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (6 samples, 0.20%)</title><rect x="77.9101%" y="1029" width="0.2042%" height="15" fill="rgb(214,90,37)" fg:x="2289" fg:w="6"/><text x="78.1601%" y="1039.50"></text></g><g><title>TxOrphanage::EraseForBlock (1 samples, 0.03%)</title><rect x="78.1144%" y="1061" width="0.0340%" height="15" fill="rgb(220,132,6)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="1071.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.03%)</title><rect x="78.1144%" y="1045" width="0.0340%" height="15" fill="rgb(213,167,7)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="1055.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.03%)</title><rect x="78.1144%" y="1029" width="0.0340%" height="15" fill="rgb(243,36,27)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="1039.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (1 samples, 0.03%)</title><rect x="78.1144%" y="1013" width="0.0340%" height="15" fill="rgb(235,147,12)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="1023.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (1 samples, 0.03%)</title><rect x="78.1144%" y="997" width="0.0340%" height="15" fill="rgb(212,198,44)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="1007.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (1 samples, 0.03%)</title><rect x="78.1144%" y="981" width="0.0340%" height="15" fill="rgb(218,68,50)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="991.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (1 samples, 0.03%)</title><rect x="78.1144%" y="965" width="0.0340%" height="15" fill="rgb(224,79,48)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="975.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (1 samples, 0.03%)</title><rect x="78.1144%" y="949" width="0.0340%" height="15" fill="rgb(213,191,50)" fg:x="2295" fg:w="1"/><text x="78.3644%" y="959.50"></text></g><g><title>node::TxDownloadManager::BlockConnected (1 samples, 0.03%)</title><rect x="78.1484%" y="1061" width="0.0340%" height="15" fill="rgb(254,146,10)" fg:x="2296" fg:w="1"/><text x="78.3984%" y="1071.50"></text></g><g><title>operator (92 samples, 3.13%)</title><rect x="75.0851%" y="1141" width="3.1314%" height="15" fill="rgb(215,175,11)" fg:x="2206" fg:w="92"/><text x="75.3351%" y="1151.50">ope..</text></g><g><title>operator (92 samples, 3.13%)</title><rect x="75.0851%" y="1125" width="3.1314%" height="15" fill="rgb(207,49,7)" fg:x="2206" fg:w="92"/><text x="75.3351%" y="1135.50">ope..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (92 samples, 3.13%)</title><rect x="75.0851%" y="1109" width="3.1314%" height="15" fill="rgb(234,144,29)" fg:x="2206" fg:w="92"/><text x="75.3351%" y="1119.50">Ite..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (91 samples, 3.10%)</title><rect x="75.1191%" y="1093" width="3.0973%" height="15" fill="rgb(213,222,48)" fg:x="2207" fg:w="91"/><text x="75.3691%" y="1103.50">std..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (90 samples, 3.06%)</title><rect x="75.1532%" y="1077" width="3.0633%" height="15" fill="rgb(222,8,6)" fg:x="2208" fg:w="90"/><text x="75.4032%" y="1087.50">nod..</text></g><g><title>node::TxDownloadManagerImpl::RecentConfirmedTransactionsFilter (1 samples, 0.03%)</title><rect x="78.1824%" y="1061" width="0.0340%" height="15" fill="rgb(221,114,49)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="1071.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CRollingBloomFilter&gt;::__single_object std::make_unique&lt;CRollingBloomFilter, int, double&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="1045" width="0.0340%" height="15" fill="rgb(250,140,42)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="1055.50"></text></g><g><title>CRollingBloomFilter::CRollingBloomFilter (1 samples, 0.03%)</title><rect x="78.1824%" y="1029" width="0.0340%" height="15" fill="rgb(250,150,27)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="1039.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="78.1824%" y="1013" width="0.0340%" height="15" fill="rgb(252,159,3)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="1023.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="78.1824%" y="997" width="0.0340%" height="15" fill="rgb(241,182,3)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="1007.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="981" width="0.0340%" height="15" fill="rgb(236,3,9)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="991.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="965" width="0.0340%" height="15" fill="rgb(223,227,51)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="975.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="949" width="0.0340%" height="15" fill="rgb(232,133,30)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="959.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="933" width="0.0340%" height="15" fill="rgb(209,93,27)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="943.50"></text></g><g><title>unsigned long* std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="917" width="0.0340%" height="15" fill="rgb(208,108,34)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="927.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="901" width="0.0340%" height="15" fill="rgb(215,189,13)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="911.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="885" width="0.0340%" height="15" fill="rgb(206,88,23)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="895.50"></text></g><g><title>void std::__fill_a&lt;unsigned long*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="869" width="0.0340%" height="15" fill="rgb(240,173,0)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="879.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;unsigned long&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned long*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="78.1824%" y="853" width="0.0340%" height="15" fill="rgb(223,106,52)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="863.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="78.1824%" y="837" width="0.0340%" height="15" fill="rgb(206,130,16)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="821" width="0.0340%" height="15" fill="rgb(220,54,25)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="805" width="0.0340%" height="15" fill="rgb(210,4,38)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="789" width="0.0340%" height="15" fill="rgb(238,94,39)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="773" width="0.0340%" height="15" fill="rgb(234,124,34)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="757" width="0.0340%" height="15" fill="rgb(221,91,40)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="741" width="0.0340%" height="15" fill="rgb(246,53,28)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="725" width="0.0340%" height="15" fill="rgb(229,109,7)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="709" width="0.0340%" height="15" fill="rgb(249,117,8)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="693" width="0.0340%" height="15" fill="rgb(210,181,1)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.1824%" y="677" width="0.0340%" height="15" fill="rgb(211,66,1)" fg:x="2297" fg:w="1"/><text x="78.4324%" y="687.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (94 samples, 3.20%)</title><rect x="75.0851%" y="1173" width="3.1995%" height="15" fill="rgb(221,90,14)" fg:x="2206" fg:w="94"/><text x="75.3351%" y="1183.50">__i..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (94 samples, 3.20%)</title><rect x="75.0851%" y="1157" width="3.1995%" height="15" fill="rgb(219,222,44)" fg:x="2206" fg:w="94"/><text x="75.3351%" y="1167.50">__i..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (2 samples, 0.07%)</title><rect x="78.2165%" y="1141" width="0.0681%" height="15" fill="rgb(246,34,33)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1151.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; (2 samples, 0.07%)</title><rect x="78.2165%" y="1125" width="0.0681%" height="15" fill="rgb(227,135,41)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1135.50"></text></g><g><title>BCLog::Logger::LogPrintStr (2 samples, 0.07%)</title><rect x="78.2165%" y="1109" width="0.0681%" height="15" fill="rgb(226,15,14)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1119.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (2 samples, 0.07%)</title><rect x="78.2165%" y="1093" width="0.0681%" height="15" fill="rgb(236,148,47)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1103.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (2 samples, 0.07%)</title><rect x="78.2165%" y="1077" width="0.0681%" height="15" fill="rgb(233,162,52)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1087.50"></text></g><g><title>_IO_fwrite (2 samples, 0.07%)</title><rect x="78.2165%" y="1061" width="0.0681%" height="15" fill="rgb(244,35,28)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1071.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="78.2165%" y="1045" width="0.0681%" height="15" fill="rgb(205,121,10)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1055.50"></text></g><g><title>new_do_write (2 samples, 0.07%)</title><rect x="78.2165%" y="1029" width="0.0681%" height="15" fill="rgb(250,58,18)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1039.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="78.2165%" y="1013" width="0.0681%" height="15" fill="rgb(216,37,13)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1023.50"></text></g><g><title>__GI___libc_write (2 samples, 0.07%)</title><rect x="78.2165%" y="997" width="0.0681%" height="15" fill="rgb(221,215,42)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="78.2165%" y="981" width="0.0681%" height="15" fill="rgb(217,214,19)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="78.2165%" y="965" width="0.0681%" height="15" fill="rgb(233,139,13)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="78.2165%" y="949" width="0.0681%" height="15" fill="rgb(247,168,23)" fg:x="2298" fg:w="2"/><text x="78.4665%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.2505%" y="933" width="0.0340%" height="15" fill="rgb(207,202,1)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="943.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="78.2505%" y="917" width="0.0340%" height="15" fill="rgb(220,155,48)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.2505%" y="901" width="0.0340%" height="15" fill="rgb(250,43,26)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="78.2505%" y="885" width="0.0340%" height="15" fill="rgb(212,190,23)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.2505%" y="869" width="0.0340%" height="15" fill="rgb(216,39,24)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.2505%" y="853" width="0.0340%" height="15" fill="rgb(252,113,16)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.2505%" y="837" width="0.0340%" height="15" fill="rgb(208,113,19)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.2505%" y="821" width="0.0340%" height="15" fill="rgb(234,107,25)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="78.2505%" y="805" width="0.0340%" height="15" fill="rgb(234,217,51)" fg:x="2299" fg:w="1"/><text x="78.5005%" y="815.50"></text></g><g><title>TxConfirmStats::ClearCurrent (3 samples, 0.10%)</title><rect x="78.3186%" y="1061" width="0.1021%" height="15" fill="rgb(251,29,42)" fg:x="2301" fg:w="3"/><text x="78.5686%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="79.6120%" y="1045" width="0.1361%" height="15" fill="rgb(221,62,51)" fg:x="2339" fg:w="4"/><text x="79.8620%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="79.6120%" y="1029" width="0.1361%" height="15" fill="rgb(240,192,43)" fg:x="2339" fg:w="4"/><text x="79.8620%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="79.6120%" y="1013" width="0.1361%" height="15" fill="rgb(224,157,47)" fg:x="2339" fg:w="4"/><text x="79.8620%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="79.6120%" y="997" width="0.1361%" height="15" fill="rgb(226,84,45)" fg:x="2339" fg:w="4"/><text x="79.8620%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="79.6120%" y="981" width="0.1361%" height="15" fill="rgb(208,207,23)" fg:x="2339" fg:w="4"/><text x="79.8620%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="79.6460%" y="965" width="0.1021%" height="15" fill="rgb(253,34,51)" fg:x="2340" fg:w="3"/><text x="79.8960%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="79.6460%" y="949" width="0.1021%" height="15" fill="rgb(227,26,34)" fg:x="2340" fg:w="3"/><text x="79.8960%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="79.6460%" y="933" width="0.1021%" height="15" fill="rgb(245,75,19)" fg:x="2340" fg:w="3"/><text x="79.8960%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="79.6460%" y="917" width="0.1021%" height="15" fill="rgb(250,191,31)" fg:x="2340" fg:w="3"/><text x="79.8960%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="79.6460%" y="901" width="0.1021%" height="15" fill="rgb(224,11,50)" fg:x="2340" fg:w="3"/><text x="79.8960%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="79.6460%" y="885" width="0.1021%" height="15" fill="rgb(231,171,7)" fg:x="2340" fg:w="3"/><text x="79.8960%" y="895.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (15 samples, 0.51%)</title><rect x="79.7481%" y="1045" width="0.5106%" height="15" fill="rgb(252,214,10)" fg:x="2343" fg:w="15"/><text x="79.9981%" y="1055.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (56 samples, 1.91%)</title><rect x="78.4207%" y="1061" width="1.9061%" height="15" fill="rgb(249,45,46)" fg:x="2304" fg:w="56"/><text x="78.6707%" y="1071.50">T..</text></g><g><title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.07%)</title><rect x="80.2587%" y="1045" width="0.0681%" height="15" fill="rgb(240,173,7)" fg:x="2358" fg:w="2"/><text x="80.5087%" y="1055.50"></text></g><g><title>operator (60 samples, 2.04%)</title><rect x="78.3186%" y="1125" width="2.0422%" height="15" fill="rgb(235,214,13)" fg:x="2301" fg:w="60"/><text x="78.5686%" y="1135.50">o..</text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (60 samples, 2.04%)</title><rect x="78.3186%" y="1109" width="2.0422%" height="15" fill="rgb(245,156,8)" fg:x="2301" fg:w="60"/><text x="78.5686%" y="1119.50">I..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (60 samples, 2.04%)</title><rect x="78.3186%" y="1093" width="2.0422%" height="15" fill="rgb(235,46,12)" fg:x="2301" fg:w="60"/><text x="78.5686%" y="1103.50">s..</text></g><g><title>CBlockPolicyEstimator::processBlock (60 samples, 2.04%)</title><rect x="78.3186%" y="1077" width="2.0422%" height="15" fill="rgb(221,81,14)" fg:x="2301" fg:w="60"/><text x="78.5686%" y="1087.50">C..</text></g><g><title>_M_invoke (1 samples, 0.03%)</title><rect x="80.3268%" y="1061" width="0.0340%" height="15" fill="rgb(238,207,9)" fg:x="2360" fg:w="1"/><text x="80.5768%" y="1071.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="80.3268%" y="1045" width="0.0340%" height="15" fill="rgb(224,129,35)" fg:x="2360" fg:w="1"/><text x="80.5768%" y="1055.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="80.3268%" y="1029" width="0.0340%" height="15" fill="rgb(243,218,34)" fg:x="2360" fg:w="1"/><text x="80.5768%" y="1039.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="80.3268%" y="1013" width="0.0340%" height="15" fill="rgb(220,166,13)" fg:x="2360" fg:w="1"/><text x="80.5768%" y="1023.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="80.3268%" y="997" width="0.0340%" height="15" fill="rgb(227,167,49)" fg:x="2360" fg:w="1"/><text x="80.5768%" y="1007.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (1 samples, 0.03%)</title><rect x="80.3268%" y="981" width="0.0340%" height="15" fill="rgb(234,142,12)" fg:x="2360" fg:w="1"/><text x="80.5768%" y="991.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="80.3268%" y="965" width="0.0340%" height="15" fill="rgb(207,100,48)" fg:x="2360" fg:w="1"/><text x="80.5768%" y="975.50"></text></g><g><title>operator (65 samples, 2.21%)</title><rect x="78.2845%" y="1141" width="2.2124%" height="15" fill="rgb(210,25,14)" fg:x="2300" fg:w="65"/><text x="78.5345%" y="1151.50">o..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (4 samples, 0.14%)</title><rect x="80.3608%" y="1125" width="0.1361%" height="15" fill="rgb(246,116,27)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1135.50"></text></g><g><title>BCLog::Logger::WillLogCategoryLevel (4 samples, 0.14%)</title><rect x="80.3608%" y="1109" width="0.1361%" height="15" fill="rgb(214,193,42)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1119.50"></text></g><g><title>StdLockGuard::StdLockGuard (4 samples, 0.14%)</title><rect x="80.3608%" y="1093" width="0.1361%" height="15" fill="rgb(214,122,8)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1103.50"></text></g><g><title>std::lock_guard&lt;StdMutex&gt;::lock_guard (4 samples, 0.14%)</title><rect x="80.3608%" y="1077" width="0.1361%" height="15" fill="rgb(244,173,18)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1087.50"></text></g><g><title>std::mutex::lock (4 samples, 0.14%)</title><rect x="80.3608%" y="1061" width="0.1361%" height="15" fill="rgb(232,68,19)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1071.50"></text></g><g><title>BCLog::Logger::WillLogCategoryLevel (4 samples, 0.14%)</title><rect x="80.3608%" y="1045" width="0.1361%" height="15" fill="rgb(236,224,1)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1055.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.14%)</title><rect x="80.3608%" y="1029" width="0.1361%" height="15" fill="rgb(240,11,8)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1039.50"></text></g><g><title>__GI___lll_lock_wait (4 samples, 0.14%)</title><rect x="80.3608%" y="1013" width="0.1361%" height="15" fill="rgb(244,159,20)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="80.3608%" y="997" width="0.1361%" height="15" fill="rgb(240,223,54)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="1007.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="80.3608%" y="981" width="0.1361%" height="15" fill="rgb(237,146,5)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="80.3608%" y="965" width="0.1361%" height="15" fill="rgb(218,221,32)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="80.3608%" y="949" width="0.1361%" height="15" fill="rgb(244,96,26)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="959.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="80.3608%" y="933" width="0.1361%" height="15" fill="rgb(245,184,37)" fg:x="2361" fg:w="4"/><text x="80.6108%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.3948%" y="917" width="0.1021%" height="15" fill="rgb(248,91,47)" fg:x="2362" fg:w="3"/><text x="80.6448%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.3948%" y="901" width="0.1021%" height="15" fill="rgb(243,199,8)" fg:x="2362" fg:w="3"/><text x="80.6448%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.3948%" y="885" width="0.1021%" height="15" fill="rgb(249,12,15)" fg:x="2362" fg:w="3"/><text x="80.6448%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.3948%" y="869" width="0.1021%" height="15" fill="rgb(245,97,12)" fg:x="2362" fg:w="3"/><text x="80.6448%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="80.4289%" y="853" width="0.0681%" height="15" fill="rgb(244,61,1)" fg:x="2363" fg:w="2"/><text x="80.6789%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.4629%" y="837" width="0.0340%" height="15" fill="rgb(222,194,10)" fg:x="2364" fg:w="1"/><text x="80.7129%" y="847.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.03%)</title><rect x="80.4969%" y="1077" width="0.0340%" height="15" fill="rgb(226,178,8)" fg:x="2365" fg:w="1"/><text x="80.7469%" y="1087.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.03%)</title><rect x="80.4969%" y="1061" width="0.0340%" height="15" fill="rgb(241,32,34)" fg:x="2365" fg:w="1"/><text x="80.7469%" y="1071.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.03%)</title><rect x="80.4969%" y="1045" width="0.0340%" height="15" fill="rgb(254,26,6)" fg:x="2365" fg:w="1"/><text x="80.7469%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="80.4969%" y="1029" width="0.0340%" height="15" fill="rgb(249,71,11)" fg:x="2365" fg:w="1"/><text x="80.7469%" y="1039.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.03%)</title><rect x="80.4969%" y="1013" width="0.0340%" height="15" fill="rgb(232,170,27)" fg:x="2365" fg:w="1"/><text x="80.7469%" y="1023.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="80.4969%" y="997" width="0.0340%" height="15" fill="rgb(214,223,17)" fg:x="2365" fg:w="1"/><text x="80.7469%" y="1007.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (1 samples, 0.03%)</title><rect x="80.4969%" y="981" width="0.0340%" height="15" fill="rgb(250,18,15)" fg:x="2365" fg:w="1"/><text x="80.7469%" y="991.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="80.5650%" y="901" width="0.0340%" height="15" fill="rgb(212,153,51)" fg:x="2367" fg:w="1"/><text x="80.8150%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.5650%" y="885" width="0.0340%" height="15" fill="rgb(219,194,12)" fg:x="2367" fg:w="1"/><text x="80.8150%" y="895.50"></text></g><g><title>BCLog::Logger::LogPrintStr (4 samples, 0.14%)</title><rect x="80.4969%" y="1109" width="0.1361%" height="15" fill="rgb(212,58,17)" fg:x="2365" fg:w="4"/><text x="80.7469%" y="1119.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (4 samples, 0.14%)</title><rect x="80.4969%" y="1093" width="0.1361%" height="15" fill="rgb(254,5,10)" fg:x="2365" fg:w="4"/><text x="80.7469%" y="1103.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (3 samples, 0.10%)</title><rect x="80.5310%" y="1077" width="0.1021%" height="15" fill="rgb(246,91,7)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="1087.50"></text></g><g><title>_IO_fwrite (3 samples, 0.10%)</title><rect x="80.5310%" y="1061" width="0.1021%" height="15" fill="rgb(218,108,49)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="1071.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="80.5310%" y="1045" width="0.1021%" height="15" fill="rgb(238,123,20)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="1055.50"></text></g><g><title>new_do_write (3 samples, 0.10%)</title><rect x="80.5310%" y="1029" width="0.1021%" height="15" fill="rgb(231,69,23)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="1039.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="80.5310%" y="1013" width="0.1021%" height="15" fill="rgb(230,209,3)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="1023.50"></text></g><g><title>__GI___libc_write (3 samples, 0.10%)</title><rect x="80.5310%" y="997" width="0.1021%" height="15" fill="rgb(231,19,0)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.5310%" y="981" width="0.1021%" height="15" fill="rgb(226,192,25)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.5310%" y="965" width="0.1021%" height="15" fill="rgb(223,175,53)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.5310%" y="949" width="0.1021%" height="15" fill="rgb(248,35,51)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.5310%" y="933" width="0.1021%" height="15" fill="rgb(230,37,26)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="943.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="80.5310%" y="917" width="0.1021%" height="15" fill="rgb(206,120,22)" fg:x="2366" fg:w="3"/><text x="80.7810%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.5990%" y="901" width="0.0340%" height="15" fill="rgb(207,165,28)" fg:x="2368" fg:w="1"/><text x="80.8490%" y="911.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="80.5990%" y="885" width="0.0340%" height="15" fill="rgb(226,23,46)" fg:x="2368" fg:w="1"/><text x="80.8490%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.5990%" y="869" width="0.0340%" height="15" fill="rgb(208,130,44)" fg:x="2368" fg:w="1"/><text x="80.8490%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.5990%" y="853" width="0.0340%" height="15" fill="rgb(231,67,8)" fg:x="2368" fg:w="1"/><text x="80.8490%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.5990%" y="837" width="0.0340%" height="15" fill="rgb(205,183,22)" fg:x="2368" fg:w="1"/><text x="80.8490%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.5990%" y="821" width="0.0340%" height="15" fill="rgb(224,47,9)" fg:x="2368" fg:w="1"/><text x="80.8490%" y="831.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="80.6331%" y="1109" width="0.0340%" height="15" fill="rgb(250,183,49)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1119.50"></text></g><g><title>__GI___lll_lock_wake (1 samples, 0.03%)</title><rect x="80.6331%" y="1093" width="0.0340%" height="15" fill="rgb(220,151,39)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="1077" width="0.0340%" height="15" fill="rgb(220,118,20)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="1061" width="0.0340%" height="15" fill="rgb(231,65,51)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="1045" width="0.0340%" height="15" fill="rgb(253,125,37)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="1029" width="0.0340%" height="15" fill="rgb(232,102,6)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="1013" width="0.0340%" height="15" fill="rgb(251,105,13)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="997" width="0.0340%" height="15" fill="rgb(222,179,29)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="981" width="0.0340%" height="15" fill="rgb(229,180,53)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="965" width="0.0340%" height="15" fill="rgb(238,104,13)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.6331%" y="949" width="0.0340%" height="15" fill="rgb(210,130,5)" fg:x="2369" fg:w="1"/><text x="80.8831%" y="959.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (71 samples, 2.42%)</title><rect x="78.2845%" y="1173" width="2.4166%" height="15" fill="rgb(233,87,49)" fg:x="2300" fg:w="71"/><text x="78.5345%" y="1183.50">__..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (71 samples, 2.42%)</title><rect x="78.2845%" y="1157" width="2.4166%" height="15" fill="rgb(243,34,9)" fg:x="2300" fg:w="71"/><text x="78.5345%" y="1167.50">__..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (6 samples, 0.20%)</title><rect x="80.4969%" y="1141" width="0.2042%" height="15" fill="rgb(235,225,10)" fg:x="2365" fg:w="6"/><text x="80.7469%" y="1151.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, unsigned int, unsigned long&gt; (6 samples, 0.20%)</title><rect x="80.4969%" y="1125" width="0.2042%" height="15" fill="rgb(212,0,30)" fg:x="2365" fg:w="6"/><text x="80.7469%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, unsigned int, unsigned long&gt; (1 samples, 0.03%)</title><rect x="80.6671%" y="1109" width="0.0340%" height="15" fill="rgb(211,177,0)" fg:x="2370" fg:w="1"/><text x="80.9171%" y="1119.50"></text></g><g><title>void tinyformat::format&lt;char const*, unsigned int, unsigned long&gt; (1 samples, 0.03%)</title><rect x="80.6671%" y="1093" width="0.0340%" height="15" fill="rgb(225,220,11)" fg:x="2370" fg:w="1"/><text x="80.9171%" y="1103.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="80.6671%" y="1077" width="0.0340%" height="15" fill="rgb(215,10,13)" fg:x="2370" fg:w="1"/><text x="80.9171%" y="1087.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="80.6671%" y="1061" width="0.0340%" height="15" fill="rgb(240,177,14)" fg:x="2370" fg:w="1"/><text x="80.9171%" y="1071.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.03%)</title><rect x="80.6671%" y="1045" width="0.0340%" height="15" fill="rgb(243,7,39)" fg:x="2370" fg:w="1"/><text x="80.9171%" y="1055.50"></text></g><g><title>std::ostream::write (1 samples, 0.03%)</title><rect x="80.6671%" y="1029" width="0.0340%" height="15" fill="rgb(212,99,0)" fg:x="2370" fg:w="1"/><text x="80.9171%" y="1039.50"></text></g><g><title>std::locale::id::_M_id (1 samples, 0.03%)</title><rect x="80.6671%" y="1013" width="0.0340%" height="15" fill="rgb(225,162,48)" fg:x="2370" fg:w="1"/><text x="80.9171%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="80.7692%" y="869" width="0.0340%" height="15" fill="rgb(246,16,25)" fg:x="2373" fg:w="1"/><text x="81.0192%" y="879.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="80.7692%" y="853" width="0.0340%" height="15" fill="rgb(220,150,2)" fg:x="2373" fg:w="1"/><text x="81.0192%" y="863.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="80.7692%" y="837" width="0.0340%" height="15" fill="rgb(237,113,11)" fg:x="2373" fg:w="1"/><text x="81.0192%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.7692%" y="821" width="0.0340%" height="15" fill="rgb(236,70,20)" fg:x="2373" fg:w="1"/><text x="81.0192%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.7692%" y="805" width="0.0340%" height="15" fill="rgb(234,94,7)" fg:x="2373" fg:w="1"/><text x="81.0192%" y="815.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="80.7692%" y="885" width="0.1021%" height="15" fill="rgb(250,221,0)" fg:x="2373" fg:w="3"/><text x="81.0192%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="80.8033%" y="869" width="0.0681%" height="15" fill="rgb(245,149,46)" fg:x="2374" fg:w="2"/><text x="81.0533%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="80.8373%" y="853" width="0.0340%" height="15" fill="rgb(215,37,27)" fg:x="2375" fg:w="1"/><text x="81.0873%" y="863.50"></text></g><g><title>BCLog::Logger::LogPrintStr (8 samples, 0.27%)</title><rect x="80.7352%" y="1109" width="0.2723%" height="15" fill="rgb(232,65,3)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1119.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (8 samples, 0.27%)</title><rect x="80.7352%" y="1093" width="0.2723%" height="15" fill="rgb(214,2,16)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1103.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (8 samples, 0.27%)</title><rect x="80.7352%" y="1077" width="0.2723%" height="15" fill="rgb(227,131,50)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1087.50"></text></g><g><title>_IO_fwrite (8 samples, 0.27%)</title><rect x="80.7352%" y="1061" width="0.2723%" height="15" fill="rgb(247,131,45)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1071.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.27%)</title><rect x="80.7352%" y="1045" width="0.2723%" height="15" fill="rgb(215,97,47)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1055.50"></text></g><g><title>new_do_write (8 samples, 0.27%)</title><rect x="80.7352%" y="1029" width="0.2723%" height="15" fill="rgb(233,143,12)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1039.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.27%)</title><rect x="80.7352%" y="1013" width="0.2723%" height="15" fill="rgb(222,57,17)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1023.50"></text></g><g><title>__GI___libc_write (8 samples, 0.27%)</title><rect x="80.7352%" y="997" width="0.2723%" height="15" fill="rgb(214,119,38)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="1007.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="80.7352%" y="981" width="0.2723%" height="15" fill="rgb(217,28,47)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="991.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="80.7352%" y="965" width="0.2723%" height="15" fill="rgb(231,14,52)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="975.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="80.7352%" y="949" width="0.2723%" height="15" fill="rgb(220,158,18)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="959.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="80.7352%" y="933" width="0.2723%" height="15" fill="rgb(222,143,46)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="943.50"></text></g><g><title>[[ext4]] (8 samples, 0.27%)</title><rect x="80.7352%" y="917" width="0.2723%" height="15" fill="rgb(227,165,5)" fg:x="2372" fg:w="8"/><text x="80.9852%" y="927.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="80.7692%" y="901" width="0.2383%" height="15" fill="rgb(216,222,49)" fg:x="2373" fg:w="7"/><text x="81.0192%" y="911.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="80.8713%" y="885" width="0.1361%" height="15" fill="rgb(238,73,39)" fg:x="2376" fg:w="4"/><text x="81.1213%" y="895.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="80.8713%" y="869" width="0.1361%" height="15" fill="rgb(252,115,9)" fg:x="2376" fg:w="4"/><text x="81.1213%" y="879.50"></text></g><g><title>[[ext4]] (4 samples, 0.14%)</title><rect x="80.8713%" y="853" width="0.1361%" height="15" fill="rgb(238,202,4)" fg:x="2376" fg:w="4"/><text x="81.1213%" y="863.50"></text></g><g><title>[[ext4]] (4 samples, 0.14%)</title><rect x="80.8713%" y="837" width="0.1361%" height="15" fill="rgb(252,153,44)" fg:x="2376" fg:w="4"/><text x="81.1213%" y="847.50"></text></g><g><title>[[ext4]] (4 samples, 0.14%)</title><rect x="80.8713%" y="821" width="0.1361%" height="15" fill="rgb(235,128,27)" fg:x="2376" fg:w="4"/><text x="81.1213%" y="831.50"></text></g><g><title>[[ext4]] (4 samples, 0.14%)</title><rect x="80.8713%" y="805" width="0.1361%" height="15" fill="rgb(221,121,47)" fg:x="2376" fg:w="4"/><text x="81.1213%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="789" width="0.1021%" height="15" fill="rgb(247,211,47)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="773" width="0.1021%" height="15" fill="rgb(252,47,49)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="757" width="0.1021%" height="15" fill="rgb(219,119,53)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="741" width="0.1021%" height="15" fill="rgb(243,165,53)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="725" width="0.1021%" height="15" fill="rgb(230,12,35)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="709" width="0.1021%" height="15" fill="rgb(239,57,49)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="693" width="0.1021%" height="15" fill="rgb(231,154,7)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="677" width="0.1021%" height="15" fill="rgb(248,81,34)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="661" width="0.1021%" height="15" fill="rgb(247,9,5)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="80.9054%" y="645" width="0.1021%" height="15" fill="rgb(228,172,27)" fg:x="2377" fg:w="3"/><text x="81.1554%" y="655.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (175 samples, 5.96%)</title><rect x="75.0851%" y="1205" width="5.9564%" height="15" fill="rgb(230,57,44)" fg:x="2206" fg:w="175"/><text x="75.3351%" y="1215.50">std::fun..</text></g><g><title>_M_invoke (175 samples, 5.96%)</title><rect x="75.0851%" y="1189" width="5.9564%" height="15" fill="rgb(249,35,22)" fg:x="2206" fg:w="175"/><text x="75.3351%" y="1199.50">_M_invoke</text></g><g><title>__invoke_r&lt;void, ValidationSignals::UpdatedBlockTip(const CBlockIndex*, const CBlockIndex*, bool)::&lt;lambda()&gt;&amp;&gt; (10 samples, 0.34%)</title><rect x="80.7012%" y="1173" width="0.3404%" height="15" fill="rgb(250,137,27)" fg:x="2371" fg:w="10"/><text x="80.9512%" y="1183.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::UpdatedBlockTip(const CBlockIndex*, const CBlockIndex*, bool)::&lt;lambda()&gt;&amp;&gt; (10 samples, 0.34%)</title><rect x="80.7012%" y="1157" width="0.3404%" height="15" fill="rgb(251,57,31)" fg:x="2371" fg:w="10"/><text x="80.9512%" y="1167.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::UpdatedBlockTip(CBlockIndex const*, CBlockIndex const*, bool)::{lambda()#2}&gt;::_M_invoke (10 samples, 0.34%)</title><rect x="80.7012%" y="1141" width="0.3404%" height="15" fill="rgb(238,60,0)" fg:x="2371" fg:w="10"/><text x="80.9512%" y="1151.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (10 samples, 0.34%)</title><rect x="80.7012%" y="1125" width="0.3404%" height="15" fill="rgb(242,185,39)" fg:x="2371" fg:w="10"/><text x="80.9512%" y="1135.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.03%)</title><rect x="81.0075%" y="1109" width="0.0340%" height="15" fill="rgb(240,63,43)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1119.50"></text></g><g><title>void tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.03%)</title><rect x="81.0075%" y="1093" width="0.0340%" height="15" fill="rgb(236,155,6)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1103.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.03%)</title><rect x="81.0075%" y="1077" width="0.0340%" height="15" fill="rgb(215,11,29)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1087.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.03%)</title><rect x="81.0075%" y="1061" width="0.0340%" height="15" fill="rgb(228,180,48)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1071.50"></text></g><g><title>tinyformat::detail::streamStateFromFormat (1 samples, 0.03%)</title><rect x="81.0075%" y="1045" width="0.0340%" height="15" fill="rgb(241,102,12)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.03%)</title><rect x="81.0075%" y="1029" width="0.0340%" height="15" fill="rgb(246,213,4)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1039.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.03%)</title><rect x="81.0075%" y="1013" width="0.0340%" height="15" fill="rgb(218,134,35)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1023.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.03%)</title><rect x="81.0075%" y="997" width="0.0340%" height="15" fill="rgb(251,117,35)" fg:x="2380" fg:w="1"/><text x="81.2575%" y="1007.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.03%)</title><rect x="81.0756%" y="757" width="0.0340%" height="15" fill="rgb(206,156,45)" fg:x="2382" fg:w="1"/><text x="81.3256%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.0756%" y="741" width="0.0340%" height="15" fill="rgb(218,52,27)" fg:x="2382" fg:w="1"/><text x="81.3256%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.0756%" y="725" width="0.0340%" height="15" fill="rgb(238,83,36)" fg:x="2382" fg:w="1"/><text x="81.3256%" y="735.50"></text></g><g><title>__lll_lock_wait_private (5 samples, 0.17%)</title><rect x="81.1777%" y="741" width="0.1702%" height="15" fill="rgb(218,53,43)" fg:x="2385" fg:w="5"/><text x="81.4277%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.1777%" y="725" width="0.1702%" height="15" fill="rgb(239,54,39)" fg:x="2385" fg:w="5"/><text x="81.4277%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.1777%" y="709" width="0.1702%" height="15" fill="rgb(212,198,13)" fg:x="2385" fg:w="5"/><text x="81.4277%" y="719.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.2117%" y="693" width="0.1361%" height="15" fill="rgb(234,54,46)" fg:x="2386" fg:w="4"/><text x="81.4617%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.2117%" y="677" width="0.1361%" height="15" fill="rgb(217,120,7)" fg:x="2386" fg:w="4"/><text x="81.4617%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.2457%" y="661" width="0.1021%" height="15" fill="rgb(246,39,15)" fg:x="2387" fg:w="3"/><text x="81.4957%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.2457%" y="645" width="0.1021%" height="15" fill="rgb(242,143,31)" fg:x="2387" fg:w="3"/><text x="81.4957%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.2457%" y="629" width="0.1021%" height="15" fill="rgb(252,60,24)" fg:x="2387" fg:w="3"/><text x="81.4957%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="81.2798%" y="613" width="0.0681%" height="15" fill="rgb(249,220,7)" fg:x="2388" fg:w="2"/><text x="81.5298%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="81.2798%" y="597" width="0.0681%" height="15" fill="rgb(236,67,13)" fg:x="2388" fg:w="2"/><text x="81.5298%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="81.2798%" y="581" width="0.0681%" height="15" fill="rgb(210,62,39)" fg:x="2388" fg:w="2"/><text x="81.5298%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.3138%" y="565" width="0.0340%" height="15" fill="rgb(219,122,53)" fg:x="2389" fg:w="1"/><text x="81.5638%" y="575.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.31%)</title><rect x="81.0756%" y="773" width="0.3063%" height="15" fill="rgb(218,87,25)" fg:x="2382" fg:w="9"/><text x="81.3256%" y="783.50"></text></g><g><title>_int_free (8 samples, 0.27%)</title><rect x="81.1096%" y="757" width="0.2723%" height="15" fill="rgb(234,179,48)" fg:x="2383" fg:w="8"/><text x="81.3596%" y="767.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="81.3479%" y="741" width="0.0340%" height="15" fill="rgb(248,90,0)" fg:x="2390" fg:w="1"/><text x="81.5979%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.3479%" y="725" width="0.0340%" height="15" fill="rgb(207,228,37)" fg:x="2390" fg:w="1"/><text x="81.5979%" y="735.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (1 samples, 0.03%)</title><rect x="81.3819%" y="549" width="0.0340%" height="15" fill="rgb(235,214,15)" fg:x="2391" fg:w="1"/><text x="81.6319%" y="559.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.03%)</title><rect x="81.3819%" y="533" width="0.0340%" height="15" fill="rgb(210,144,39)" fg:x="2391" fg:w="1"/><text x="81.6319%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="81.3819%" y="517" width="0.0340%" height="15" fill="rgb(222,67,41)" fg:x="2391" fg:w="1"/><text x="81.6319%" y="527.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="81.3819%" y="501" width="0.0340%" height="15" fill="rgb(205,35,37)" fg:x="2391" fg:w="1"/><text x="81.6319%" y="511.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="81.3819%" y="485" width="0.0340%" height="15" fill="rgb(216,125,40)" fg:x="2391" fg:w="1"/><text x="81.6319%" y="495.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="81.3819%" y="469" width="0.0340%" height="15" fill="rgb(228,227,20)" fg:x="2391" fg:w="1"/><text x="81.6319%" y="479.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="81.3819%" y="453" width="0.0340%" height="15" fill="rgb(242,173,45)" fg:x="2391" fg:w="1"/><text x="81.6319%" y="463.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (2 samples, 0.07%)</title><rect x="81.3819%" y="693" width="0.0681%" height="15" fill="rgb(215,79,24)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="703.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (2 samples, 0.07%)</title><rect x="81.3819%" y="677" width="0.0681%" height="15" fill="rgb(238,164,38)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="687.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (2 samples, 0.07%)</title><rect x="81.3819%" y="661" width="0.0681%" height="15" fill="rgb(245,196,38)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="671.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (2 samples, 0.07%)</title><rect x="81.3819%" y="645" width="0.0681%" height="15" fill="rgb(231,217,29)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="655.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (2 samples, 0.07%)</title><rect x="81.3819%" y="629" width="0.0681%" height="15" fill="rgb(245,6,4)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="639.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (2 samples, 0.07%)</title><rect x="81.3819%" y="613" width="0.0681%" height="15" fill="rgb(214,76,49)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="623.50"></text></g><g><title>CTxIn::~CTxIn (2 samples, 0.07%)</title><rect x="81.3819%" y="597" width="0.0681%" height="15" fill="rgb(205,96,12)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="607.50"></text></g><g><title>CScriptWitness::~CScriptWitness (2 samples, 0.07%)</title><rect x="81.3819%" y="581" width="0.0681%" height="15" fill="rgb(243,131,4)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="591.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (2 samples, 0.07%)</title><rect x="81.3819%" y="565" width="0.0681%" height="15" fill="rgb(214,114,4)" fg:x="2391" fg:w="2"/><text x="81.6319%" y="575.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="81.4159%" y="549" width="0.0340%" height="15" fill="rgb(234,215,15)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="559.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (1 samples, 0.03%)</title><rect x="81.4159%" y="533" width="0.0340%" height="15" fill="rgb(250,216,45)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="543.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (1 samples, 0.03%)</title><rect x="81.4159%" y="517" width="0.0340%" height="15" fill="rgb(236,128,4)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="527.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="81.4159%" y="501" width="0.0340%" height="15" fill="rgb(234,50,33)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="511.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="81.4159%" y="485" width="0.0340%" height="15" fill="rgb(253,131,37)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="495.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="81.4159%" y="469" width="0.0340%" height="15" fill="rgb(218,55,27)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="479.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (1 samples, 0.03%)</title><rect x="81.4159%" y="453" width="0.0340%" height="15" fill="rgb(241,220,28)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="463.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (1 samples, 0.03%)</title><rect x="81.4159%" y="437" width="0.0340%" height="15" fill="rgb(241,90,48)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="81.4159%" y="421" width="0.0340%" height="15" fill="rgb(216,43,37)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="431.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.03%)</title><rect x="81.4159%" y="405" width="0.0340%" height="15" fill="rgb(207,173,9)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="415.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.03%)</title><rect x="81.4159%" y="389" width="0.0340%" height="15" fill="rgb(240,126,30)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="399.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="81.4159%" y="373" width="0.0340%" height="15" fill="rgb(228,178,53)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="81.4159%" y="357" width="0.0340%" height="15" fill="rgb(217,33,4)" fg:x="2392" fg:w="1"/><text x="81.6659%" y="367.50"></text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (13 samples, 0.44%)</title><rect x="81.0415%" y="1109" width="0.4425%" height="15" fill="rgb(206,124,34)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1119.50"></text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (13 samples, 0.44%)</title><rect x="81.0415%" y="1093" width="0.4425%" height="15" fill="rgb(208,122,53)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1103.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (13 samples, 0.44%)</title><rect x="81.0415%" y="1077" width="0.4425%" height="15" fill="rgb(215,202,26)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1087.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (13 samples, 0.44%)</title><rect x="81.0415%" y="1061" width="0.4425%" height="15" fill="rgb(232,198,31)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1071.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (13 samples, 0.44%)</title><rect x="81.0415%" y="1045" width="0.4425%" height="15" fill="rgb(222,23,35)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1055.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (13 samples, 0.44%)</title><rect x="81.0415%" y="1029" width="0.4425%" height="15" fill="rgb(242,27,53)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1039.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="1013" width="0.4425%" height="15" fill="rgb(210,216,42)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1023.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="997" width="0.4425%" height="15" fill="rgb(234,39,38)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="1007.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="981" width="0.4425%" height="15" fill="rgb(235,126,54)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="991.50"></text></g><g><title>CBlock::~CBlock (13 samples, 0.44%)</title><rect x="81.0415%" y="965" width="0.4425%" height="15" fill="rgb(235,150,33)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="975.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (13 samples, 0.44%)</title><rect x="81.0415%" y="949" width="0.4425%" height="15" fill="rgb(249,49,53)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="959.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="933" width="0.4425%" height="15" fill="rgb(238,60,50)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="943.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="917" width="0.4425%" height="15" fill="rgb(210,5,2)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="927.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="901" width="0.4425%" height="15" fill="rgb(214,207,24)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="911.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="885" width="0.4425%" height="15" fill="rgb(228,173,2)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="895.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (13 samples, 0.44%)</title><rect x="81.0415%" y="869" width="0.4425%" height="15" fill="rgb(244,26,8)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="879.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (13 samples, 0.44%)</title><rect x="81.0415%" y="853" width="0.4425%" height="15" fill="rgb(249,153,35)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="863.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (13 samples, 0.44%)</title><rect x="81.0415%" y="837" width="0.4425%" height="15" fill="rgb(221,215,40)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="847.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (13 samples, 0.44%)</title><rect x="81.0415%" y="821" width="0.4425%" height="15" fill="rgb(238,106,35)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="831.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (13 samples, 0.44%)</title><rect x="81.0415%" y="805" width="0.4425%" height="15" fill="rgb(207,195,21)" fg:x="2381" fg:w="13"/><text x="81.2915%" y="815.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (12 samples, 0.41%)</title><rect x="81.0756%" y="789" width="0.4084%" height="15" fill="rgb(205,43,29)" fg:x="2382" fg:w="12"/><text x="81.3256%" y="799.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (3 samples, 0.10%)</title><rect x="81.3819%" y="773" width="0.1021%" height="15" fill="rgb(236,35,21)" fg:x="2391" fg:w="3"/><text x="81.6319%" y="783.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (3 samples, 0.10%)</title><rect x="81.3819%" y="757" width="0.1021%" height="15" fill="rgb(244,74,8)" fg:x="2391" fg:w="3"/><text x="81.6319%" y="767.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (3 samples, 0.10%)</title><rect x="81.3819%" y="741" width="0.1021%" height="15" fill="rgb(241,229,7)" fg:x="2391" fg:w="3"/><text x="81.6319%" y="751.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (3 samples, 0.10%)</title><rect x="81.3819%" y="725" width="0.1021%" height="15" fill="rgb(212,223,25)" fg:x="2391" fg:w="3"/><text x="81.6319%" y="735.50"></text></g><g><title>CTransaction::~CTransaction (3 samples, 0.10%)</title><rect x="81.3819%" y="709" width="0.1021%" height="15" fill="rgb(234,58,53)" fg:x="2391" fg:w="3"/><text x="81.6319%" y="719.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="81.4500%" y="693" width="0.0340%" height="15" fill="rgb(244,36,1)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="703.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (1 samples, 0.03%)</title><rect x="81.4500%" y="677" width="0.0340%" height="15" fill="rgb(222,40,54)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="687.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (1 samples, 0.03%)</title><rect x="81.4500%" y="661" width="0.0340%" height="15" fill="rgb(210,207,39)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="671.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (1 samples, 0.03%)</title><rect x="81.4500%" y="645" width="0.0340%" height="15" fill="rgb(234,52,14)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="655.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (1 samples, 0.03%)</title><rect x="81.4500%" y="629" width="0.0340%" height="15" fill="rgb(239,108,46)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="639.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (1 samples, 0.03%)</title><rect x="81.4500%" y="613" width="0.0340%" height="15" fill="rgb(252,223,5)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="623.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.03%)</title><rect x="81.4500%" y="597" width="0.0340%" height="15" fill="rgb(227,181,11)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="607.50"></text></g><g><title>CScript::~CScript (1 samples, 0.03%)</title><rect x="81.4500%" y="581" width="0.0340%" height="15" fill="rgb(248,126,40)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="591.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.03%)</title><rect x="81.4500%" y="565" width="0.0340%" height="15" fill="rgb(243,1,18)" fg:x="2393" fg:w="1"/><text x="81.7000%" y="575.50"></text></g><g><title>SerialTaskRunner::ProcessQueue (191 samples, 6.50%)</title><rect x="75.0170%" y="1221" width="6.5010%" height="15" fill="rgb(214,145,23)" fg:x="2204" fg:w="191"/><text x="75.2670%" y="1231.50">SerialTas..</text></g><g><title>std::function&lt;void ()&gt;::~function (14 samples, 0.48%)</title><rect x="81.0415%" y="1205" width="0.4765%" height="15" fill="rgb(241,218,11)" fg:x="2381" fg:w="14"/><text x="81.2915%" y="1215.50"></text></g><g><title>std::_Function_base::~_Function_base (14 samples, 0.48%)</title><rect x="81.0415%" y="1189" width="0.4765%" height="15" fill="rgb(214,219,24)" fg:x="2381" fg:w="14"/><text x="81.2915%" y="1199.50"></text></g><g><title>_M_manager (14 samples, 0.48%)</title><rect x="81.0415%" y="1173" width="0.4765%" height="15" fill="rgb(235,32,7)" fg:x="2381" fg:w="14"/><text x="81.2915%" y="1183.50"></text></g><g><title>_M_manager (14 samples, 0.48%)</title><rect x="81.0415%" y="1157" width="0.4765%" height="15" fill="rgb(227,121,28)" fg:x="2381" fg:w="14"/><text x="81.2915%" y="1167.50"></text></g><g><title>_M_destroy (14 samples, 0.48%)</title><rect x="81.0415%" y="1141" width="0.4765%" height="15" fill="rgb(216,129,49)" fg:x="2381" fg:w="14"/><text x="81.2915%" y="1151.50"></text></g><g><title>~&lt;lambda&gt; (14 samples, 0.48%)</title><rect x="81.0415%" y="1125" width="0.4765%" height="15" fill="rgb(207,194,50)" fg:x="2381" fg:w="14"/><text x="81.2915%" y="1135.50"></text></g><g><title>~&lt;lambda&gt; (1 samples, 0.03%)</title><rect x="81.4840%" y="1109" width="0.0340%" height="15" fill="rgb(207,4,18)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1119.50"></text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (1 samples, 0.03%)</title><rect x="81.4840%" y="1093" width="0.0340%" height="15" fill="rgb(213,50,30)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1103.50"></text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.03%)</title><rect x="81.4840%" y="1077" width="0.0340%" height="15" fill="rgb(208,77,22)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1087.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.03%)</title><rect x="81.4840%" y="1061" width="0.0340%" height="15" fill="rgb(244,204,34)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1071.50"></text></g><g><title>CScheduler::schedule (1 samples, 0.03%)</title><rect x="81.4840%" y="1045" width="0.0340%" height="15" fill="rgb(230,20,17)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1055.50"></text></g><g><title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::function&lt;void ()&gt;&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;&amp;, std::function&lt;void ()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="81.4840%" y="1029" width="0.0340%" height="15" fill="rgb(237,83,15)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1039.50"></text></g><g><title>std::pair&lt;std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::function&lt;void ()&gt; &gt;::pair&lt;std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;&amp;, std::function&lt;void ()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="81.4840%" y="1013" width="0.0340%" height="15" fill="rgb(221,109,25)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1023.50"></text></g><g><title>std::function&lt;void ()&gt;::function (1 samples, 0.03%)</title><rect x="81.4840%" y="997" width="0.0340%" height="15" fill="rgb(205,194,52)" fg:x="2394" fg:w="1"/><text x="81.7340%" y="1007.50"></text></g><g><title>__clone (227 samples, 7.73%)</title><rect x="73.8257%" y="1413" width="7.7263%" height="15" fill="rgb(244,173,54)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1423.50">__clone</text></g><g><title>start_thread (227 samples, 7.73%)</title><rect x="73.8257%" y="1397" width="7.7263%" height="15" fill="rgb(227,181,18)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1407.50">start_thread</text></g><g><title>execute_native_thread_routine (227 samples, 7.73%)</title><rect x="73.8257%" y="1381" width="7.7263%" height="15" fill="rgb(238,36,30)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1391.50">execute_nat..</text></g><g><title>_M_run (227 samples, 7.73%)</title><rect x="73.8257%" y="1365" width="7.7263%" height="15" fill="rgb(254,85,0)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1375.50">_M_run</text></g><g><title>operator (227 samples, 7.73%)</title><rect x="73.8257%" y="1349" width="7.7263%" height="15" fill="rgb(247,63,33)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1359.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (227 samples, 7.73%)</title><rect x="73.8257%" y="1333" width="7.7263%" height="15" fill="rgb(220,7,54)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1343.50">_M_invoke&lt;0..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (227 samples, 7.73%)</title><rect x="73.8257%" y="1317" width="7.7263%" height="15" fill="rgb(238,227,21)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1327.50">__invoke&lt;vo..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (227 samples, 7.73%)</title><rect x="73.8257%" y="1301" width="7.7263%" height="15" fill="rgb(237,29,31)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1311.50">std::thread..</text></g><g><title>util::TraceThread (227 samples, 7.73%)</title><rect x="73.8257%" y="1285" width="7.7263%" height="15" fill="rgb(211,21,50)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1295.50">util::Trace..</text></g><g><title>std::function&lt;void ()&gt;::operator (227 samples, 7.73%)</title><rect x="73.8257%" y="1269" width="7.7263%" height="15" fill="rgb(239,119,2)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1279.50">std::functi..</text></g><g><title>CScheduler::serviceQueue (227 samples, 7.73%)</title><rect x="73.8257%" y="1253" width="7.7263%" height="15" fill="rgb(250,2,39)" fg:x="2169" fg:w="227"/><text x="74.0757%" y="1263.50">CScheduler:..</text></g><g><title>std::function&lt;void ()&gt;::operator (192 samples, 6.54%)</title><rect x="75.0170%" y="1237" width="6.5351%" height="15" fill="rgb(244,46,53)" fg:x="2204" fg:w="192"/><text x="75.2670%" y="1247.50">std::func..</text></g><g><title>_M_invoke (1 samples, 0.03%)</title><rect x="81.5180%" y="1221" width="0.0340%" height="15" fill="rgb(209,21,19)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1231.50"></text></g><g><title>__invoke_r&lt;void, CScheduler::scheduleEvery(Function, std::chrono::milliseconds)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="81.5180%" y="1205" width="0.0340%" height="15" fill="rgb(236,145,4)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1215.50"></text></g><g><title>__invoke_impl&lt;void, CScheduler::scheduleEvery(Function, std::chrono::milliseconds)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="81.5180%" y="1189" width="0.0340%" height="15" fill="rgb(220,133,36)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1199.50"></text></g><g><title>std::_Function_handler&lt;void (), CScheduler::scheduleEvery(std::function&lt;void ()&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;)::{lambda()#1}&gt;::_M_invoke (1 samples, 0.03%)</title><rect x="81.5180%" y="1173" width="0.0340%" height="15" fill="rgb(244,18,3)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1183.50"></text></g><g><title>Repeat (1 samples, 0.03%)</title><rect x="81.5180%" y="1157" width="0.0340%" height="15" fill="rgb(232,171,48)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1167.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (1 samples, 0.03%)</title><rect x="81.5180%" y="1141" width="0.0340%" height="15" fill="rgb(223,223,53)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1151.50"></text></g><g><title>RandAddDynamicEnv (1 samples, 0.03%)</title><rect x="81.5180%" y="1125" width="0.0340%" height="15" fill="rgb(246,92,13)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1135.50"></text></g><g><title>AddFile (1 samples, 0.03%)</title><rect x="81.5180%" y="1109" width="0.0340%" height="15" fill="rgb(229,171,10)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1119.50"></text></g><g><title>read (1 samples, 0.03%)</title><rect x="81.5180%" y="1093" width="0.0340%" height="15" fill="rgb(213,131,26)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="1077" width="0.0340%" height="15" fill="rgb(242,87,54)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="1061" width="0.0340%" height="15" fill="rgb(237,21,35)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="1045" width="0.0340%" height="15" fill="rgb(253,13,47)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="1029" width="0.0340%" height="15" fill="rgb(215,122,49)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="1013" width="0.0340%" height="15" fill="rgb(209,179,30)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="997" width="0.0340%" height="15" fill="rgb(235,100,24)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="981" width="0.0340%" height="15" fill="rgb(209,67,24)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="965" width="0.0340%" height="15" fill="rgb(206,74,32)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="949" width="0.0340%" height="15" fill="rgb(212,45,25)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="81.5180%" y="933" width="0.0340%" height="15" fill="rgb(239,26,3)" fg:x="2395" fg:w="1"/><text x="81.7680%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="81.5521%" y="1413" width="0.0340%" height="15" fill="rgb(218,36,15)" fg:x="2396" fg:w="1"/><text x="81.8021%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="81.5861%" y="1413" width="0.0340%" height="15" fill="rgb(206,108,24)" fg:x="2397" fg:w="1"/><text x="81.8361%" y="1423.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="81.6201%" y="1413" width="0.0340%" height="15" fill="rgb(234,204,42)" fg:x="2398" fg:w="1"/><text x="81.8701%" y="1423.50"></text></g><g><title>b-scheduler (252 samples, 8.58%)</title><rect x="73.1450%" y="1429" width="8.5773%" height="15" fill="rgb(229,2,11)" fg:x="2149" fg:w="252"/><text x="73.3950%" y="1439.50">b-scheduler</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (2 samples, 0.07%)</title><rect x="81.6542%" y="1413" width="0.0681%" height="15" fill="rgb(221,20,48)" fg:x="2399" fg:w="2"/><text x="81.9042%" y="1423.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1397" width="0.0340%" height="15" fill="rgb(244,164,10)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1407.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1381" width="0.0340%" height="15" fill="rgb(243,229,2)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1391.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1365" width="0.0340%" height="15" fill="rgb(232,131,37)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1375.50"></text></g><g><title>CTransaction::~CTransaction (1 samples, 0.03%)</title><rect x="81.6882%" y="1349" width="0.0340%" height="15" fill="rgb(217,156,11)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1359.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="81.6882%" y="1333" width="0.0340%" height="15" fill="rgb(239,99,48)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1343.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1317" width="0.0340%" height="15" fill="rgb(231,209,9)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1327.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1301" width="0.0340%" height="15" fill="rgb(254,97,27)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1311.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1285" width="0.0340%" height="15" fill="rgb(223,151,38)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1295.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1269" width="0.0340%" height="15" fill="rgb(219,206,35)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1279.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (1 samples, 0.03%)</title><rect x="81.6882%" y="1253" width="0.0340%" height="15" fill="rgb(216,130,31)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1263.50"></text></g><g><title>CTxIn::~CTxIn (1 samples, 0.03%)</title><rect x="81.6882%" y="1237" width="0.0340%" height="15" fill="rgb(251,97,34)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1247.50"></text></g><g><title>CScriptWitness::~CScriptWitness (1 samples, 0.03%)</title><rect x="81.6882%" y="1221" width="0.0340%" height="15" fill="rgb(246,159,47)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1231.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (1 samples, 0.03%)</title><rect x="81.6882%" y="1205" width="0.0340%" height="15" fill="rgb(232,87,10)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (1 samples, 0.03%)</title><rect x="81.6882%" y="1189" width="0.0340%" height="15" fill="rgb(249,1,37)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.03%)</title><rect x="81.6882%" y="1173" width="0.0340%" height="15" fill="rgb(239,135,14)" fg:x="2400" fg:w="1"/><text x="81.9382%" y="1183.50"></text></g><g><title>b-scriptch.10 (4 samples, 0.14%)</title><rect x="81.7223%" y="1429" width="0.1361%" height="15" fill="rgb(253,116,46)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="81.7223%" y="1413" width="0.1361%" height="15" fill="rgb(222,217,37)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="81.7223%" y="1397" width="0.1361%" height="15" fill="rgb(252,96,8)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1407.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.14%)</title><rect x="81.7223%" y="1381" width="0.1361%" height="15" fill="rgb(254,103,41)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1391.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.14%)</title><rect x="81.7223%" y="1365" width="0.1361%" height="15" fill="rgb(218,213,19)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1375.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.14%)</title><rect x="81.7223%" y="1349" width="0.1361%" height="15" fill="rgb(253,95,21)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1359.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.14%)</title><rect x="81.7223%" y="1333" width="0.1361%" height="15" fill="rgb(229,26,28)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1317" width="0.1361%" height="15" fill="rgb(230,129,16)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1301" width="0.1361%" height="15" fill="rgb(236,126,17)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1285" width="0.1361%" height="15" fill="rgb(209,33,33)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1269" width="0.1361%" height="15" fill="rgb(227,85,29)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1253" width="0.1361%" height="15" fill="rgb(241,53,46)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1237" width="0.1361%" height="15" fill="rgb(228,167,53)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1221" width="0.1361%" height="15" fill="rgb(238,195,45)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1205" width="0.1361%" height="15" fill="rgb(252,124,45)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1189" width="0.1361%" height="15" fill="rgb(251,38,35)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.7223%" y="1173" width="0.1361%" height="15" fill="rgb(227,33,2)" fg:x="2401" fg:w="4"/><text x="81.9723%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.7563%" y="1157" width="0.1021%" height="15" fill="rgb(223,157,46)" fg:x="2402" fg:w="3"/><text x="82.0063%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.7563%" y="1141" width="0.1021%" height="15" fill="rgb(222,78,41)" fg:x="2402" fg:w="3"/><text x="82.0063%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.7563%" y="1125" width="0.1021%" height="15" fill="rgb(248,176,11)" fg:x="2402" fg:w="3"/><text x="82.0063%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.7563%" y="1109" width="0.1021%" height="15" fill="rgb(241,221,18)" fg:x="2402" fg:w="3"/><text x="82.0063%" y="1119.50"></text></g><g><title>b-scriptch.11 (4 samples, 0.14%)</title><rect x="81.8584%" y="1429" width="0.1361%" height="15" fill="rgb(218,85,22)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="81.8584%" y="1413" width="0.1361%" height="15" fill="rgb(222,223,7)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="81.8584%" y="1397" width="0.1361%" height="15" fill="rgb(254,59,39)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1407.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.14%)</title><rect x="81.8584%" y="1381" width="0.1361%" height="15" fill="rgb(247,100,27)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1391.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.14%)</title><rect x="81.8584%" y="1365" width="0.1361%" height="15" fill="rgb(237,207,10)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1375.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.14%)</title><rect x="81.8584%" y="1349" width="0.1361%" height="15" fill="rgb(220,121,28)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1359.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.14%)</title><rect x="81.8584%" y="1333" width="0.1361%" height="15" fill="rgb(213,223,20)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1317" width="0.1361%" height="15" fill="rgb(205,121,27)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1301" width="0.1361%" height="15" fill="rgb(253,24,53)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1285" width="0.1361%" height="15" fill="rgb(224,224,47)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1269" width="0.1361%" height="15" fill="rgb(250,125,36)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1253" width="0.1361%" height="15" fill="rgb(240,144,38)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1237" width="0.1361%" height="15" fill="rgb(250,15,50)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1221" width="0.1361%" height="15" fill="rgb(210,24,26)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1205" width="0.1361%" height="15" fill="rgb(234,53,53)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.8584%" y="1189" width="0.1361%" height="15" fill="rgb(208,108,28)" fg:x="2405" fg:w="4"/><text x="82.1084%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.8924%" y="1173" width="0.1021%" height="15" fill="rgb(227,143,7)" fg:x="2406" fg:w="3"/><text x="82.1424%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.8924%" y="1157" width="0.1021%" height="15" fill="rgb(238,189,38)" fg:x="2406" fg:w="3"/><text x="82.1424%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.8924%" y="1141" width="0.1021%" height="15" fill="rgb(222,69,15)" fg:x="2406" fg:w="3"/><text x="82.1424%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.8924%" y="1125" width="0.1021%" height="15" fill="rgb(213,169,7)" fg:x="2406" fg:w="3"/><text x="82.1424%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.8924%" y="1109" width="0.1021%" height="15" fill="rgb(251,219,4)" fg:x="2406" fg:w="3"/><text x="82.1424%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.8924%" y="1093" width="0.1021%" height="15" fill="rgb(241,55,40)" fg:x="2406" fg:w="3"/><text x="82.1424%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="81.8924%" y="1077" width="0.1021%" height="15" fill="rgb(243,57,30)" fg:x="2406" fg:w="3"/><text x="82.1424%" y="1087.50"></text></g><g><title>b-scriptch.12 (4 samples, 0.14%)</title><rect x="81.9946%" y="1429" width="0.1361%" height="15" fill="rgb(234,50,30)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="81.9946%" y="1413" width="0.1361%" height="15" fill="rgb(239,23,42)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="81.9946%" y="1397" width="0.1361%" height="15" fill="rgb(217,38,19)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1407.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.14%)</title><rect x="81.9946%" y="1381" width="0.1361%" height="15" fill="rgb(215,179,16)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1391.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.14%)</title><rect x="81.9946%" y="1365" width="0.1361%" height="15" fill="rgb(254,21,37)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1375.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.14%)</title><rect x="81.9946%" y="1349" width="0.1361%" height="15" fill="rgb(219,207,48)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1359.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.14%)</title><rect x="81.9946%" y="1333" width="0.1361%" height="15" fill="rgb(227,225,41)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1317" width="0.1361%" height="15" fill="rgb(223,130,1)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1301" width="0.1361%" height="15" fill="rgb(249,54,42)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1285" width="0.1361%" height="15" fill="rgb(248,69,25)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1269" width="0.1361%" height="15" fill="rgb(234,21,32)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1253" width="0.1361%" height="15" fill="rgb(252,136,6)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1237" width="0.1361%" height="15" fill="rgb(245,87,12)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1221" width="0.1361%" height="15" fill="rgb(208,12,15)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1205" width="0.1361%" height="15" fill="rgb(250,98,2)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1189" width="0.1361%" height="15" fill="rgb(205,213,15)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1173" width="0.1361%" height="15" fill="rgb(248,192,44)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1157" width="0.1361%" height="15" fill="rgb(221,89,17)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1141" width="0.1361%" height="15" fill="rgb(209,55,3)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="81.9946%" y="1125" width="0.1361%" height="15" fill="rgb(247,23,45)" fg:x="2409" fg:w="4"/><text x="82.2446%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.0286%" y="1109" width="0.1021%" height="15" fill="rgb(235,152,23)" fg:x="2410" fg:w="3"/><text x="82.2786%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.0286%" y="1093" width="0.1021%" height="15" fill="rgb(244,63,13)" fg:x="2410" fg:w="3"/><text x="82.2786%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.0286%" y="1077" width="0.1021%" height="15" fill="rgb(227,30,37)" fg:x="2410" fg:w="3"/><text x="82.2786%" y="1087.50"></text></g><g><title>b-scriptch.1 (4 samples, 0.14%)</title><rect x="82.1307%" y="1429" width="0.1361%" height="15" fill="rgb(224,49,42)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="82.1307%" y="1413" width="0.1361%" height="15" fill="rgb(218,129,5)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="82.1307%" y="1397" width="0.1361%" height="15" fill="rgb(240,199,54)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1407.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.14%)</title><rect x="82.1307%" y="1381" width="0.1361%" height="15" fill="rgb(234,31,13)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1391.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.14%)</title><rect x="82.1307%" y="1365" width="0.1361%" height="15" fill="rgb(219,73,54)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1375.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::~UniqueLock (4 samples, 0.14%)</title><rect x="82.1307%" y="1349" width="0.1361%" height="15" fill="rgb(251,162,10)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1359.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (4 samples, 0.14%)</title><rect x="82.1307%" y="1333" width="0.1361%" height="15" fill="rgb(240,138,47)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1343.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (4 samples, 0.14%)</title><rect x="82.1307%" y="1317" width="0.1361%" height="15" fill="rgb(216,138,26)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1327.50"></text></g><g><title>std::mutex::unlock (4 samples, 0.14%)</title><rect x="82.1307%" y="1301" width="0.1361%" height="15" fill="rgb(243,17,35)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1311.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.14%)</title><rect x="82.1307%" y="1285" width="0.1361%" height="15" fill="rgb(241,60,18)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1295.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (4 samples, 0.14%)</title><rect x="82.1307%" y="1269" width="0.1361%" height="15" fill="rgb(234,2,44)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1279.50"></text></g><g><title>__GI___lll_lock_wake (4 samples, 0.14%)</title><rect x="82.1307%" y="1253" width="0.1361%" height="15" fill="rgb(225,225,33)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1237" width="0.1361%" height="15" fill="rgb(234,50,31)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1221" width="0.1361%" height="15" fill="rgb(249,6,25)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1205" width="0.1361%" height="15" fill="rgb(241,5,17)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1189" width="0.1361%" height="15" fill="rgb(207,116,10)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1173" width="0.1361%" height="15" fill="rgb(222,128,18)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1157" width="0.1361%" height="15" fill="rgb(229,109,25)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1141" width="0.1361%" height="15" fill="rgb(222,102,25)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1125" width="0.1361%" height="15" fill="rgb(239,211,5)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1109" width="0.1361%" height="15" fill="rgb(223,136,26)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1093" width="0.1361%" height="15" fill="rgb(227,30,15)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1077" width="0.1361%" height="15" fill="rgb(247,76,4)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.1307%" y="1061" width="0.1361%" height="15" fill="rgb(245,38,48)" fg:x="2413" fg:w="4"/><text x="82.3807%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="82.2328%" y="1045" width="0.0340%" height="15" fill="rgb(210,220,14)" fg:x="2416" fg:w="1"/><text x="82.4828%" y="1055.50"></text></g><g><title>b-scriptch.3 (4 samples, 0.14%)</title><rect x="82.2668%" y="1429" width="0.1361%" height="15" fill="rgb(224,60,51)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="82.2668%" y="1413" width="0.1361%" height="15" fill="rgb(212,133,49)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="82.2668%" y="1397" width="0.1361%" height="15" fill="rgb(231,39,22)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1407.50"></text></g><g><title>__madvise (4 samples, 0.14%)</title><rect x="82.2668%" y="1381" width="0.1361%" height="15" fill="rgb(236,173,22)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1365" width="0.1361%" height="15" fill="rgb(210,70,0)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1349" width="0.1361%" height="15" fill="rgb(215,170,11)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1333" width="0.1361%" height="15" fill="rgb(220,154,28)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1317" width="0.1361%" height="15" fill="rgb(240,160,41)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1301" width="0.1361%" height="15" fill="rgb(243,215,41)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1285" width="0.1361%" height="15" fill="rgb(214,208,31)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1269" width="0.1361%" height="15" fill="rgb(247,57,22)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1253" width="0.1361%" height="15" fill="rgb(228,73,52)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1237" width="0.1361%" height="15" fill="rgb(252,60,9)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1221" width="0.1361%" height="15" fill="rgb(233,9,51)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.2668%" y="1205" width="0.1361%" height="15" fill="rgb(223,67,14)" fg:x="2417" fg:w="4"/><text x="82.5168%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.3009%" y="1189" width="0.1021%" height="15" fill="rgb(222,86,2)" fg:x="2418" fg:w="3"/><text x="82.5509%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.3009%" y="1173" width="0.1021%" height="15" fill="rgb(243,58,54)" fg:x="2418" fg:w="3"/><text x="82.5509%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.3009%" y="1157" width="0.1021%" height="15" fill="rgb(210,200,39)" fg:x="2418" fg:w="3"/><text x="82.5509%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.3009%" y="1141" width="0.1021%" height="15" fill="rgb(238,135,9)" fg:x="2418" fg:w="3"/><text x="82.5509%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.3009%" y="1125" width="0.1021%" height="15" fill="rgb(232,179,7)" fg:x="2418" fg:w="3"/><text x="82.5509%" y="1135.50"></text></g><g><title>b-scriptch.8 (4 samples, 0.14%)</title><rect x="82.4030%" y="1429" width="0.1361%" height="15" fill="rgb(245,65,41)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="82.4030%" y="1413" width="0.1361%" height="15" fill="rgb(227,43,8)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="82.4030%" y="1397" width="0.1361%" height="15" fill="rgb(235,91,14)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1407.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.14%)</title><rect x="82.4030%" y="1381" width="0.1361%" height="15" fill="rgb(235,219,31)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1391.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.14%)</title><rect x="82.4030%" y="1365" width="0.1361%" height="15" fill="rgb(227,121,25)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1375.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.14%)</title><rect x="82.4030%" y="1349" width="0.1361%" height="15" fill="rgb(254,129,24)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1359.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.14%)</title><rect x="82.4030%" y="1333" width="0.1361%" height="15" fill="rgb(226,144,49)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1317" width="0.1361%" height="15" fill="rgb(214,187,32)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1301" width="0.1361%" height="15" fill="rgb(243,129,46)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1285" width="0.1361%" height="15" fill="rgb(221,185,35)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1269" width="0.1361%" height="15" fill="rgb(205,0,32)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1253" width="0.1361%" height="15" fill="rgb(229,179,12)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1237" width="0.1361%" height="15" fill="rgb(252,107,19)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1221" width="0.1361%" height="15" fill="rgb(220,95,27)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1205" width="0.1361%" height="15" fill="rgb(240,113,40)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1189" width="0.1361%" height="15" fill="rgb(208,4,43)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.4030%" y="1173" width="0.1361%" height="15" fill="rgb(247,189,30)" fg:x="2421" fg:w="4"/><text x="82.6530%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.4370%" y="1157" width="0.1021%" height="15" fill="rgb(231,157,17)" fg:x="2422" fg:w="3"/><text x="82.6870%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.4370%" y="1141" width="0.1021%" height="15" fill="rgb(224,139,6)" fg:x="2422" fg:w="3"/><text x="82.6870%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.4370%" y="1125" width="0.1021%" height="15" fill="rgb(223,83,16)" fg:x="2422" fg:w="3"/><text x="82.6870%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.4370%" y="1109" width="0.1021%" height="15" fill="rgb(232,211,20)" fg:x="2422" fg:w="3"/><text x="82.6870%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.4370%" y="1093" width="0.1021%" height="15" fill="rgb(225,203,35)" fg:x="2422" fg:w="3"/><text x="82.6870%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.4370%" y="1077" width="0.1021%" height="15" fill="rgb(215,211,44)" fg:x="2422" fg:w="3"/><text x="82.6870%" y="1087.50"></text></g><g><title>b-scriptch.9 (4 samples, 0.14%)</title><rect x="82.5391%" y="1429" width="0.1361%" height="15" fill="rgb(248,213,26)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1439.50"></text></g><g><title>__clone (4 samples, 0.14%)</title><rect x="82.5391%" y="1413" width="0.1361%" height="15" fill="rgb(214,23,52)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1423.50"></text></g><g><title>start_thread (4 samples, 0.14%)</title><rect x="82.5391%" y="1397" width="0.1361%" height="15" fill="rgb(225,173,50)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1407.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.14%)</title><rect x="82.5391%" y="1381" width="0.1361%" height="15" fill="rgb(206,150,22)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1391.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.14%)</title><rect x="82.5391%" y="1365" width="0.1361%" height="15" fill="rgb(239,64,23)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1375.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.14%)</title><rect x="82.5391%" y="1349" width="0.1361%" height="15" fill="rgb(242,50,38)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1359.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.14%)</title><rect x="82.5391%" y="1333" width="0.1361%" height="15" fill="rgb(217,91,15)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1317" width="0.1361%" height="15" fill="rgb(230,172,6)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1301" width="0.1361%" height="15" fill="rgb(221,98,26)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1285" width="0.1361%" height="15" fill="rgb(227,210,45)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1269" width="0.1361%" height="15" fill="rgb(206,8,30)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1253" width="0.1361%" height="15" fill="rgb(241,219,17)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1237" width="0.1361%" height="15" fill="rgb(247,121,29)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1221" width="0.1361%" height="15" fill="rgb(219,169,49)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1205" width="0.1361%" height="15" fill="rgb(253,49,49)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1189" width="0.1361%" height="15" fill="rgb(217,178,3)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="82.5391%" y="1173" width="0.1361%" height="15" fill="rgb(234,73,37)" fg:x="2425" fg:w="4"/><text x="82.7891%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.5732%" y="1157" width="0.1021%" height="15" fill="rgb(250,98,22)" fg:x="2426" fg:w="3"/><text x="82.8232%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.5732%" y="1141" width="0.1021%" height="15" fill="rgb(220,108,37)" fg:x="2426" fg:w="3"/><text x="82.8232%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.5732%" y="1125" width="0.1021%" height="15" fill="rgb(225,168,10)" fg:x="2426" fg:w="3"/><text x="82.8232%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.5732%" y="1109" width="0.1021%" height="15" fill="rgb(247,215,21)" fg:x="2426" fg:w="3"/><text x="82.8232%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.5732%" y="1093" width="0.1021%" height="15" fill="rgb(253,189,31)" fg:x="2426" fg:w="3"/><text x="82.8232%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="82.5732%" y="1077" width="0.1021%" height="15" fill="rgb(241,54,22)" fg:x="2426" fg:w="3"/><text x="82.8232%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.07%)</title><rect x="82.6753%" y="1397" width="0.0681%" height="15" fill="rgb(211,87,4)" fg:x="2429" fg:w="2"/><text x="82.9253%" y="1407.50"></text></g><g><title>_int_free (6 samples, 0.20%)</title><rect x="82.7434%" y="1397" width="0.2042%" height="15" fill="rgb(245,112,24)" fg:x="2431" fg:w="6"/><text x="82.9934%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="82.9476%" y="1397" width="0.0681%" height="15" fill="rgb(235,190,41)" fg:x="2437" fg:w="2"/><text x="83.1976%" y="1407.50"></text></g><g><title>evmap_signal_clear_ (1 samples, 0.03%)</title><rect x="83.0157%" y="1397" width="0.0340%" height="15" fill="rgb(214,89,8)" fg:x="2439" fg:w="1"/><text x="83.2657%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.07%)</title><rect x="83.0497%" y="1397" width="0.0681%" height="15" fill="rgb(249,155,35)" fg:x="2440" fg:w="2"/><text x="83.2997%" y="1407.50"></text></g><g><title>[[heap]] (17 samples, 0.58%)</title><rect x="82.6753%" y="1413" width="0.5786%" height="15" fill="rgb(249,88,26)" fg:x="2429" fg:w="17"/><text x="82.9253%" y="1423.50"></text></g><g><title>malloc_consolidate (4 samples, 0.14%)</title><rect x="83.1178%" y="1397" width="0.1361%" height="15" fill="rgb(232,56,8)" fg:x="2442" fg:w="4"/><text x="83.3678%" y="1407.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.03%)</title><rect x="83.2539%" y="1397" width="0.0340%" height="15" fill="rgb(240,95,3)" fg:x="2446" fg:w="1"/><text x="83.5039%" y="1407.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="83.2880%" y="1397" width="0.0340%" height="15" fill="rgb(222,44,28)" fg:x="2447" fg:w="1"/><text x="83.5380%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="83.3220%" y="1397" width="0.0340%" height="15" fill="rgb(234,16,30)" fg:x="2448" fg:w="1"/><text x="83.5720%" y="1407.50"></text></g><g><title>leveldb::VarintLength (1 samples, 0.03%)</title><rect x="83.3560%" y="1397" width="0.0340%" height="15" fill="rgb(223,26,17)" fg:x="2449" fg:w="1"/><text x="83.6060%" y="1407.50"></text></g><g><title>memcmp@plt (1 samples, 0.03%)</title><rect x="83.3901%" y="1397" width="0.0340%" height="15" fill="rgb(239,187,47)" fg:x="2450" fg:w="1"/><text x="83.6401%" y="1407.50"></text></g><g><title>[[stack]] (7 samples, 0.24%)</title><rect x="83.2539%" y="1413" width="0.2383%" height="15" fill="rgb(247,102,50)" fg:x="2446" fg:w="7"/><text x="83.5039%" y="1423.50"></text></g><g><title>unlink_chunk.isra.0 (2 samples, 0.07%)</title><rect x="83.4241%" y="1397" width="0.0681%" height="15" fill="rgb(231,216,22)" fg:x="2451" fg:w="2"/><text x="83.6741%" y="1407.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="83.4922%" y="1397" width="0.0340%" height="15" fill="rgb(216,201,26)" fg:x="2453" fg:w="1"/><text x="83.7422%" y="1407.50"></text></g><g><title>[anon] (2 samples, 0.07%)</title><rect x="83.4922%" y="1413" width="0.0681%" height="15" fill="rgb(214,186,23)" fg:x="2453" fg:w="2"/><text x="83.7422%" y="1423.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.03%)</title><rect x="83.5262%" y="1397" width="0.0340%" height="15" fill="rgb(235,184,4)" fg:x="2454" fg:w="1"/><text x="83.7762%" y="1407.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1397" width="0.0681%" height="15" fill="rgb(244,46,17)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1407.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1381" width="0.0681%" height="15" fill="rgb(248,74,46)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1391.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1365" width="0.0681%" height="15" fill="rgb(243,79,5)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1375.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1349" width="0.0681%" height="15" fill="rgb(213,148,1)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1359.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1333" width="0.0681%" height="15" fill="rgb(221,30,0)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1343.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1317" width="0.0681%" height="15" fill="rgb(207,85,29)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1327.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1301" width="0.0681%" height="15" fill="rgb(239,31,46)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1311.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1285" width="0.0681%" height="15" fill="rgb(219,6,1)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1269" width="0.0681%" height="15" fill="rgb(229,90,29)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1253" width="0.0681%" height="15" fill="rgb(242,201,42)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1237" width="0.0681%" height="15" fill="rgb(243,80,54)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1221" width="0.0681%" height="15" fill="rgb(223,166,15)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="83.5602%" y="1205" width="0.0681%" height="15" fill="rgb(238,78,27)" fg:x="2455" fg:w="2"/><text x="83.8102%" y="1215.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.07%)</title><rect x="83.6283%" y="1397" width="0.0681%" height="15" fill="rgb(235,28,43)" fg:x="2457" fg:w="2"/><text x="83.8783%" y="1407.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="83.6964%" y="1397" width="0.0340%" height="15" fill="rgb(240,210,28)" fg:x="2459" fg:w="1"/><text x="83.9464%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="83.7304%" y="1397" width="0.0340%" height="15" fill="rgb(253,6,46)" fg:x="2460" fg:w="1"/><text x="83.9804%" y="1407.50"></text></g><g><title>free@plt (1 samples, 0.03%)</title><rect x="83.7645%" y="1397" width="0.0340%" height="15" fill="rgb(250,159,47)" fg:x="2461" fg:w="1"/><text x="84.0145%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="83.7985%" y="1397" width="0.0340%" height="15" fill="rgb(216,139,2)" fg:x="2462" fg:w="1"/><text x="84.0485%" y="1407.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.03%)</title><rect x="83.8325%" y="1397" width="0.0340%" height="15" fill="rgb(221,124,44)" fg:x="2463" fg:w="1"/><text x="84.0825%" y="1407.50"></text></g><g><title>leveldb::GetVarint32 (1 samples, 0.03%)</title><rect x="83.8666%" y="1397" width="0.0340%" height="15" fill="rgb(205,37,22)" fg:x="2464" fg:w="1"/><text x="84.1166%" y="1407.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="83.5602%" y="1413" width="0.3744%" height="15" fill="rgb(250,55,8)" fg:x="2455" fg:w="11"/><text x="83.8102%" y="1423.50"></text></g><g><title>memcmp@plt (1 samples, 0.03%)</title><rect x="83.9006%" y="1397" width="0.0340%" height="15" fill="rgb(215,83,48)" fg:x="2465" fg:w="1"/><text x="84.1506%" y="1407.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="83.9346%" y="1413" width="0.0681%" height="15" fill="rgb(253,2,32)" fg:x="2466" fg:w="2"/><text x="84.1846%" y="1423.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="84.0027%" y="1413" width="0.0340%" height="15" fill="rgb(236,67,28)" fg:x="2468" fg:w="1"/><text x="84.2527%" y="1423.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (3 samples, 0.10%)</title><rect x="84.0368%" y="1285" width="0.1021%" height="15" fill="rgb(252,55,15)" fg:x="2469" fg:w="3"/><text x="84.2868%" y="1295.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (3 samples, 0.10%)</title><rect x="84.0368%" y="1269" width="0.1021%" height="15" fill="rgb(243,173,17)" fg:x="2469" fg:w="3"/><text x="84.2868%" y="1279.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.10%)</title><rect x="84.0368%" y="1253" width="0.1021%" height="15" fill="rgb(215,212,13)" fg:x="2469" fg:w="3"/><text x="84.2868%" y="1263.50"></text></g><g><title>_int_free (3 samples, 0.10%)</title><rect x="84.0368%" y="1237" width="0.1021%" height="15" fill="rgb(253,176,6)" fg:x="2469" fg:w="3"/><text x="84.2868%" y="1247.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3 samples, 0.10%)</title><rect x="84.0368%" y="1221" width="0.1021%" height="15" fill="rgb(236,105,26)" fg:x="2469" fg:w="3"/><text x="84.2868%" y="1231.50"></text></g><g><title>malloc_consolidate (3 samples, 0.10%)</title><rect x="84.0368%" y="1205" width="0.1021%" height="15" fill="rgb(239,226,32)" fg:x="2469" fg:w="3"/><text x="84.2868%" y="1215.50"></text></g><g><title>CDBBatch::WriteImpl (4 samples, 0.14%)</title><rect x="84.1389%" y="1237" width="0.1361%" height="15" fill="rgb(236,104,51)" fg:x="2472" fg:w="4"/><text x="84.3889%" y="1247.50"></text></g><g><title>DataStream::Xor (4 samples, 0.14%)</title><rect x="84.1389%" y="1221" width="0.1361%" height="15" fill="rgb(220,172,33)" fg:x="2472" fg:w="4"/><text x="84.3889%" y="1231.50"></text></g><g><title>util::Xor (4 samples, 0.14%)</title><rect x="84.1389%" y="1205" width="0.1361%" height="15" fill="rgb(224,182,25)" fg:x="2472" fg:w="4"/><text x="84.3889%" y="1215.50"></text></g><g><title>std::operator^= (2 samples, 0.07%)</title><rect x="84.2069%" y="1189" width="0.0681%" height="15" fill="rgb(236,184,24)" fg:x="2474" fg:w="2"/><text x="84.4569%" y="1199.50"></text></g><g><title>std::operator^ (2 samples, 0.07%)</title><rect x="84.2069%" y="1173" width="0.0681%" height="15" fill="rgb(241,221,14)" fg:x="2474" fg:w="2"/><text x="84.4569%" y="1183.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.03%)</title><rect x="84.2750%" y="1237" width="0.0340%" height="15" fill="rgb(227,146,5)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.03%)</title><rect x="84.2750%" y="1221" width="0.0340%" height="15" fill="rgb(214,15,23)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.03%)</title><rect x="84.2750%" y="1205" width="0.0340%" height="15" fill="rgb(233,157,31)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.03%)</title><rect x="84.2750%" y="1189" width="0.0340%" height="15" fill="rgb(211,27,52)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="84.2750%" y="1173" width="0.0340%" height="15" fill="rgb(212,223,15)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="84.2750%" y="1157" width="0.0340%" height="15" fill="rgb(254,211,0)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1167.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="84.2750%" y="1141" width="0.0340%" height="15" fill="rgb(205,43,38)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1151.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="84.2750%" y="1125" width="0.0340%" height="15" fill="rgb(242,206,46)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.2750%" y="1109" width="0.0340%" height="15" fill="rgb(220,221,12)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.2750%" y="1093" width="0.0340%" height="15" fill="rgb(217,156,35)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.2750%" y="1077" width="0.0340%" height="15" fill="rgb(207,181,49)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.2750%" y="1061" width="0.0340%" height="15" fill="rgb(235,103,47)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.2750%" y="1045" width="0.0340%" height="15" fill="rgb(222,63,28)" fg:x="2476" fg:w="1"/><text x="84.5250%" y="1055.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.03%)</title><rect x="84.3431%" y="1221" width="0.0340%" height="15" fill="rgb(244,137,21)" fg:x="2478" fg:w="1"/><text x="84.5931%" y="1231.50"></text></g><g><title>DataStream::Xor (1 samples, 0.03%)</title><rect x="84.3431%" y="1205" width="0.0340%" height="15" fill="rgb(228,35,27)" fg:x="2478" fg:w="1"/><text x="84.5931%" y="1215.50"></text></g><g><title>util::Xor (1 samples, 0.03%)</title><rect x="84.3431%" y="1189" width="0.0340%" height="15" fill="rgb(226,191,41)" fg:x="2478" fg:w="1"/><text x="84.5931%" y="1199.50"></text></g><g><title>leveldb::WriteBatch::Put (4 samples, 0.14%)</title><rect x="84.3091%" y="1237" width="0.1361%" height="15" fill="rgb(210,154,3)" fg:x="2477" fg:w="4"/><text x="84.5591%" y="1247.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.07%)</title><rect x="84.3771%" y="1221" width="0.0681%" height="15" fill="rgb(216,60,49)" fg:x="2479" fg:w="2"/><text x="84.6271%" y="1231.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.07%)</title><rect x="84.3771%" y="1205" width="0.0681%" height="15" fill="rgb(226,17,20)" fg:x="2479" fg:w="2"/><text x="84.6271%" y="1215.50"></text></g><g><title>decltype  (1 samples, 0.03%)</title><rect x="84.4112%" y="1189" width="0.0340%" height="15" fill="rgb(206,115,35)" fg:x="2480" fg:w="1"/><text x="84.6612%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.03%)</title><rect x="84.4112%" y="1173" width="0.0340%" height="15" fill="rgb(227,88,1)" fg:x="2480" fg:w="1"/><text x="84.6612%" y="1183.50"></text></g><g><title>decltype (1 samples, 0.03%)</title><rect x="84.4112%" y="1157" width="0.0340%" height="15" fill="rgb(230,222,24)" fg:x="2480" fg:w="1"/><text x="84.6612%" y="1167.50"></text></g><g><title>CDBBatch::WriteImpl (10 samples, 0.34%)</title><rect x="84.1389%" y="1253" width="0.3404%" height="15" fill="rgb(214,124,32)" fg:x="2472" fg:w="10"/><text x="84.3889%" y="1263.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.03%)</title><rect x="84.4452%" y="1237" width="0.0340%" height="15" fill="rgb(240,41,36)" fg:x="2481" fg:w="1"/><text x="84.6952%" y="1247.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.03%)</title><rect x="84.4452%" y="1221" width="0.0340%" height="15" fill="rgb(221,17,52)" fg:x="2481" fg:w="1"/><text x="84.6952%" y="1231.50"></text></g><g><title>CCoinsViewDB::BatchWrite (20 samples, 0.68%)</title><rect x="84.1389%" y="1269" width="0.6807%" height="15" fill="rgb(252,70,16)" fg:x="2472" fg:w="20"/><text x="84.3889%" y="1279.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (10 samples, 0.34%)</title><rect x="84.4792%" y="1253" width="0.3404%" height="15" fill="rgb(250,177,4)" fg:x="2482" fg:w="10"/><text x="84.7292%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (10 samples, 0.34%)</title><rect x="84.4792%" y="1237" width="0.3404%" height="15" fill="rgb(240,188,47)" fg:x="2482" fg:w="10"/><text x="84.7292%" y="1247.50"></text></g><g><title>decltype  (3 samples, 0.10%)</title><rect x="84.7175%" y="1221" width="0.1021%" height="15" fill="rgb(215,92,12)" fg:x="2489" fg:w="3"/><text x="84.9675%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (3 samples, 0.10%)</title><rect x="84.7175%" y="1205" width="0.1021%" height="15" fill="rgb(242,110,29)" fg:x="2489" fg:w="3"/><text x="84.9675%" y="1215.50"></text></g><g><title>decltype (3 samples, 0.10%)</title><rect x="84.7175%" y="1189" width="0.1021%" height="15" fill="rgb(208,211,26)" fg:x="2489" fg:w="3"/><text x="84.9675%" y="1199.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.03%)</title><rect x="84.8196%" y="1221" width="0.0340%" height="15" fill="rgb(244,147,6)" fg:x="2492" fg:w="1"/><text x="85.0696%" y="1231.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.03%)</title><rect x="84.8536%" y="1189" width="0.0340%" height="15" fill="rgb(211,130,42)" fg:x="2493" fg:w="1"/><text x="85.1036%" y="1199.50"></text></g><g><title>leveldb::Arena::Allocate (1 samples, 0.03%)</title><rect x="84.8877%" y="1173" width="0.0340%" height="15" fill="rgb(220,63,1)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1183.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.03%)</title><rect x="84.8877%" y="1157" width="0.0340%" height="15" fill="rgb(241,212,30)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1167.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.03%)</title><rect x="84.8877%" y="1141" width="0.0340%" height="15" fill="rgb(233,153,17)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1151.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (1 samples, 0.03%)</title><rect x="84.8877%" y="1125" width="0.0340%" height="15" fill="rgb(236,3,10)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1135.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="84.8877%" y="1109" width="0.0340%" height="15" fill="rgb(232,41,21)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1119.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="84.8877%" y="1093" width="0.0340%" height="15" fill="rgb(206,63,51)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1103.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="84.8877%" y="1077" width="0.0340%" height="15" fill="rgb(250,214,3)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.8877%" y="1061" width="0.0340%" height="15" fill="rgb(254,89,27)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.8877%" y="1045" width="0.0340%" height="15" fill="rgb(249,41,14)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.8877%" y="1029" width="0.0340%" height="15" fill="rgb(221,196,51)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="84.8877%" y="1013" width="0.0340%" height="15" fill="rgb(214,116,26)" fg:x="2494" fg:w="1"/><text x="85.1377%" y="1023.50"></text></g><g><title>leveldb::GetVarint32 (1 samples, 0.03%)</title><rect x="84.9217%" y="1173" width="0.0340%" height="15" fill="rgb(236,67,7)" fg:x="2495" fg:w="1"/><text x="85.1717%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.03%)</title><rect x="84.9558%" y="1173" width="0.0340%" height="15" fill="rgb(253,179,32)" fg:x="2496" fg:w="1"/><text x="85.2058%" y="1183.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.03%)</title><rect x="84.9558%" y="1157" width="0.0340%" height="15" fill="rgb(218,33,15)" fg:x="2496" fg:w="1"/><text x="85.2058%" y="1167.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.03%)</title><rect x="84.9558%" y="1141" width="0.0340%" height="15" fill="rgb(217,202,41)" fg:x="2496" fg:w="1"/><text x="85.2058%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.10%)</title><rect x="84.9898%" y="1157" width="0.1021%" height="15" fill="rgb(234,133,5)" fg:x="2497" fg:w="3"/><text x="85.2398%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.1259%" y="1141" width="0.1361%" height="15" fill="rgb(240,47,40)" fg:x="2501" fg:w="4"/><text x="85.3759%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.1259%" y="1125" width="0.1361%" height="15" fill="rgb(234,166,26)" fg:x="2501" fg:w="4"/><text x="85.3759%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.1259%" y="1109" width="0.1361%" height="15" fill="rgb(244,125,51)" fg:x="2501" fg:w="4"/><text x="85.3759%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.1259%" y="1093" width="0.1361%" height="15" fill="rgb(229,171,11)" fg:x="2501" fg:w="4"/><text x="85.3759%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.1259%" y="1077" width="0.1361%" height="15" fill="rgb(224,38,45)" fg:x="2501" fg:w="4"/><text x="85.3759%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="1061" width="0.1021%" height="15" fill="rgb(237,27,7)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="1045" width="0.1021%" height="15" fill="rgb(216,52,7)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="1029" width="0.1021%" height="15" fill="rgb(243,11,11)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="1013" width="0.1021%" height="15" fill="rgb(253,167,20)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="997" width="0.1021%" height="15" fill="rgb(215,207,5)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="981" width="0.1021%" height="15" fill="rgb(252,127,31)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="965" width="0.1021%" height="15" fill="rgb(209,106,27)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="949" width="0.1021%" height="15" fill="rgb(214,220,18)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.1600%" y="933" width="0.1021%" height="15" fill="rgb(237,89,12)" fg:x="2502" fg:w="3"/><text x="85.4100%" y="943.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="85.2621%" y="1125" width="0.0340%" height="15" fill="rgb(209,167,36)" fg:x="2505" fg:w="1"/><text x="85.5121%" y="1135.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.03%)</title><rect x="85.2961%" y="1125" width="0.0340%" height="15" fill="rgb(243,45,22)" fg:x="2506" fg:w="1"/><text x="85.5461%" y="1135.50"></text></g><g><title>GetLengthPrefixedSlice (3 samples, 0.10%)</title><rect x="85.3642%" y="1109" width="0.1021%" height="15" fill="rgb(239,2,46)" fg:x="2508" fg:w="3"/><text x="85.6142%" y="1119.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.07%)</title><rect x="85.3982%" y="1093" width="0.0681%" height="15" fill="rgb(241,101,0)" fg:x="2509" fg:w="2"/><text x="85.6482%" y="1103.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.14%)</title><rect x="85.4663%" y="1109" width="0.1361%" height="15" fill="rgb(244,34,31)" fg:x="2511" fg:w="4"/><text x="85.7163%" y="1119.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.10%)</title><rect x="85.5003%" y="1093" width="0.1021%" height="15" fill="rgb(248,23,22)" fg:x="2512" fg:w="3"/><text x="85.7503%" y="1103.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.07%)</title><rect x="85.6025%" y="1109" width="0.0681%" height="15" fill="rgb(218,27,48)" fg:x="2515" fg:w="2"/><text x="85.8525%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.8407%" y="1093" width="0.1361%" height="15" fill="rgb(232,78,1)" fg:x="2522" fg:w="4"/><text x="86.0907%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.8407%" y="1077" width="0.1361%" height="15" fill="rgb(233,169,12)" fg:x="2522" fg:w="4"/><text x="86.0907%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.8407%" y="1061" width="0.1361%" height="15" fill="rgb(225,222,54)" fg:x="2522" fg:w="4"/><text x="86.0907%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="85.8407%" y="1045" width="0.1361%" height="15" fill="rgb(245,126,29)" fg:x="2522" fg:w="4"/><text x="86.0907%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="1029" width="0.1021%" height="15" fill="rgb(241,63,48)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="1013" width="0.1021%" height="15" fill="rgb(235,126,38)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="997" width="0.1021%" height="15" fill="rgb(232,96,49)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="981" width="0.1021%" height="15" fill="rgb(211,146,40)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="965" width="0.1021%" height="15" fill="rgb(247,93,44)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="949" width="0.1021%" height="15" fill="rgb(251,41,49)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="933" width="0.1021%" height="15" fill="rgb(218,155,12)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="917" width="0.1021%" height="15" fill="rgb(221,161,30)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="901" width="0.1021%" height="15" fill="rgb(221,179,11)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="85.8747%" y="885" width="0.1021%" height="15" fill="rgb(224,170,48)" fg:x="2523" fg:w="3"/><text x="86.1247%" y="895.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6 samples, 0.20%)</title><rect x="85.9769%" y="1093" width="0.2042%" height="15" fill="rgb(223,117,5)" fg:x="2526" fg:w="6"/><text x="86.2269%" y="1103.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.07%)</title><rect x="86.1130%" y="1077" width="0.0681%" height="15" fill="rgb(209,52,20)" fg:x="2530" fg:w="2"/><text x="86.3630%" y="1087.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.03%)</title><rect x="86.1470%" y="1061" width="0.0340%" height="15" fill="rgb(209,19,41)" fg:x="2531" fg:w="1"/><text x="86.3970%" y="1071.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.03%)</title><rect x="86.1811%" y="1093" width="0.0340%" height="15" fill="rgb(210,177,12)" fg:x="2532" fg:w="1"/><text x="86.4311%" y="1103.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.27%)</title><rect x="86.2151%" y="1093" width="0.2723%" height="15" fill="rgb(211,159,37)" fg:x="2533" fg:w="8"/><text x="86.4651%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.03%)</title><rect x="86.5895%" y="1077" width="0.0340%" height="15" fill="rgb(209,20,2)" fg:x="2544" fg:w="1"/><text x="86.8395%" y="1087.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (29 samples, 0.99%)</title><rect x="85.6705%" y="1109" width="0.9871%" height="15" fill="rgb(244,3,46)" fg:x="2517" fg:w="29"/><text x="85.9205%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (5 samples, 0.17%)</title><rect x="86.4874%" y="1093" width="0.1702%" height="15" fill="rgb(220,94,38)" fg:x="2541" fg:w="5"/><text x="86.7374%" y="1103.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.03%)</title><rect x="86.6236%" y="1077" width="0.0340%" height="15" fill="rgb(253,14,31)" fg:x="2545" fg:w="1"/><text x="86.8736%" y="1087.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.03%)</title><rect x="86.6236%" y="1061" width="0.0340%" height="15" fill="rgb(234,176,13)" fg:x="2545" fg:w="1"/><text x="86.8736%" y="1071.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.03%)</title><rect x="86.6236%" y="1045" width="0.0340%" height="15" fill="rgb(218,62,25)" fg:x="2545" fg:w="1"/><text x="86.8736%" y="1055.50"></text></g><g><title>GetLengthPrefixedSlice (7 samples, 0.24%)</title><rect x="86.8618%" y="1093" width="0.2383%" height="15" fill="rgb(216,124,40)" fg:x="2552" fg:w="7"/><text x="87.1118%" y="1103.50"></text></g><g><title>leveldb::GetVarint32Ptr (6 samples, 0.20%)</title><rect x="86.8958%" y="1077" width="0.2042%" height="15" fill="rgb(228,170,12)" fg:x="2553" fg:w="6"/><text x="87.1458%" y="1087.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (55 samples, 1.87%)</title><rect x="85.3302%" y="1125" width="1.8720%" height="15" fill="rgb(231,226,5)" fg:x="2507" fg:w="55"/><text x="85.5802%" y="1135.50">l..</text></g><g><title>leveldb::MemTable::KeyComparator::operator (16 samples, 0.54%)</title><rect x="86.6576%" y="1109" width="0.5446%" height="15" fill="rgb(237,122,22)" fg:x="2546" fg:w="16"/><text x="86.9076%" y="1119.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.10%)</title><rect x="87.1001%" y="1093" width="0.1021%" height="15" fill="rgb(209,185,25)" fg:x="2559" fg:w="3"/><text x="87.3501%" y="1103.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (71 samples, 2.42%)</title><rect x="84.8196%" y="1237" width="2.4166%" height="15" fill="rgb(228,200,32)" fg:x="2492" fg:w="71"/><text x="85.0696%" y="1247.50">le..</text></g><g><title>leveldb::WriteBatch::Iterate (70 samples, 2.38%)</title><rect x="84.8536%" y="1221" width="2.3826%" height="15" fill="rgb(217,140,10)" fg:x="2493" fg:w="70"/><text x="85.1036%" y="1231.50">le..</text></g><g><title>leveldb::WriteBatch::Iterate (70 samples, 2.38%)</title><rect x="84.8536%" y="1205" width="2.3826%" height="15" fill="rgb(253,17,24)" fg:x="2493" fg:w="70"/><text x="85.1036%" y="1215.50">le..</text></g><g><title>leveldb::MemTable::Add (69 samples, 2.35%)</title><rect x="84.8877%" y="1189" width="2.3485%" height="15" fill="rgb(212,61,6)" fg:x="2494" fg:w="69"/><text x="85.1377%" y="1199.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (66 samples, 2.25%)</title><rect x="84.9898%" y="1173" width="2.2464%" height="15" fill="rgb(205,14,25)" fg:x="2497" fg:w="66"/><text x="85.2398%" y="1183.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (63 samples, 2.14%)</title><rect x="85.0919%" y="1157" width="2.1443%" height="15" fill="rgb(232,69,41)" fg:x="2500" fg:w="63"/><text x="85.3419%" y="1167.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (58 samples, 1.97%)</title><rect x="85.2621%" y="1141" width="1.9741%" height="15" fill="rgb(241,106,47)" fg:x="2505" fg:w="58"/><text x="85.5121%" y="1151.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.03%)</title><rect x="87.2022%" y="1125" width="0.0340%" height="15" fill="rgb(210,213,53)" fg:x="2562" fg:w="1"/><text x="87.4522%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.03%)</title><rect x="87.2022%" y="1109" width="0.0340%" height="15" fill="rgb(253,175,27)" fg:x="2562" fg:w="1"/><text x="87.4522%" y="1119.50"></text></g><g><title>Append (1 samples, 0.03%)</title><rect x="87.2362%" y="1205" width="0.0340%" height="15" fill="rgb(211,171,24)" fg:x="2563" fg:w="1"/><text x="87.4862%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.03%)</title><rect x="87.2362%" y="1189" width="0.0340%" height="15" fill="rgb(229,80,7)" fg:x="2563" fg:w="1"/><text x="87.4862%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="87.2362%" y="1173" width="0.0340%" height="15" fill="rgb(212,46,39)" fg:x="2563" fg:w="1"/><text x="87.4862%" y="1183.50"></text></g><g><title>Flush (6 samples, 0.20%)</title><rect x="87.2703%" y="1205" width="0.2042%" height="15" fill="rgb(240,80,45)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1215.50"></text></g><g><title>FlushBuffer (6 samples, 0.20%)</title><rect x="87.2703%" y="1189" width="0.2042%" height="15" fill="rgb(253,177,40)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (6 samples, 0.20%)</title><rect x="87.2703%" y="1173" width="0.2042%" height="15" fill="rgb(249,200,15)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1183.50"></text></g><g><title>__GI___libc_write (6 samples, 0.20%)</title><rect x="87.2703%" y="1157" width="0.2042%" height="15" fill="rgb(217,78,26)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.2703%" y="1141" width="0.2042%" height="15" fill="rgb(254,151,32)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.2703%" y="1125" width="0.2042%" height="15" fill="rgb(226,165,27)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.2703%" y="1109" width="0.2042%" height="15" fill="rgb(250,206,4)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.2703%" y="1093" width="0.2042%" height="15" fill="rgb(231,229,27)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1103.50"></text></g><g><title>[[ext4]] (6 samples, 0.20%)</title><rect x="87.2703%" y="1077" width="0.2042%" height="15" fill="rgb(239,217,8)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.2703%" y="1061" width="0.2042%" height="15" fill="rgb(225,204,27)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1071.50"></text></g><g><title>[[ext4]] (6 samples, 0.20%)</title><rect x="87.2703%" y="1045" width="0.2042%" height="15" fill="rgb(230,56,32)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.2703%" y="1029" width="0.2042%" height="15" fill="rgb(222,56,27)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.2703%" y="1013" width="0.2042%" height="15" fill="rgb(253,108,27)" fg:x="2564" fg:w="6"/><text x="87.5203%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="87.3043%" y="997" width="0.1702%" height="15" fill="rgb(212,87,36)" fg:x="2565" fg:w="5"/><text x="87.5543%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="87.3724%" y="981" width="0.1021%" height="15" fill="rgb(247,82,36)" fg:x="2567" fg:w="3"/><text x="87.6224%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="87.4064%" y="965" width="0.0681%" height="15" fill="rgb(222,143,9)" fg:x="2568" fg:w="2"/><text x="87.6564%" y="975.50"></text></g><g><title>CDBWrapper::WriteBatch (79 samples, 2.69%)</title><rect x="84.8196%" y="1269" width="2.6889%" height="15" fill="rgb(238,162,48)" fg:x="2492" fg:w="79"/><text x="85.0696%" y="1279.50">CD..</text></g><g><title>leveldb::DBImpl::Write (79 samples, 2.69%)</title><rect x="84.8196%" y="1253" width="2.6889%" height="15" fill="rgb(221,59,43)" fg:x="2492" fg:w="79"/><text x="85.0696%" y="1263.50">le..</text></g><g><title>leveldb::log::Writer::AddRecord (8 samples, 0.27%)</title><rect x="87.2362%" y="1237" width="0.2723%" height="15" fill="rgb(205,166,41)" fg:x="2563" fg:w="8"/><text x="87.4862%" y="1247.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (8 samples, 0.27%)</title><rect x="87.2362%" y="1221" width="0.2723%" height="15" fill="rgb(241,186,40)" fg:x="2563" fg:w="8"/><text x="87.4862%" y="1231.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.03%)</title><rect x="87.4745%" y="1205" width="0.0340%" height="15" fill="rgb(216,119,35)" fg:x="2570" fg:w="1"/><text x="87.7245%" y="1215.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.03%)</title><rect x="87.4745%" y="1189" width="0.0340%" height="15" fill="rgb(208,68,38)" fg:x="2570" fg:w="1"/><text x="87.7245%" y="1199.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.03%)</title><rect x="87.5085%" y="997" width="0.0340%" height="15" fill="rgb(217,113,1)" fg:x="2571" fg:w="1"/><text x="87.7585%" y="1007.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1205" width="0.0681%" height="15" fill="rgb(242,153,3)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1215.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1189" width="0.0681%" height="15" fill="rgb(229,76,35)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1199.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1173" width="0.0681%" height="15" fill="rgb(229,125,34)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1183.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1157" width="0.0681%" height="15" fill="rgb(238,179,36)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1141" width="0.0681%" height="15" fill="rgb(244,183,19)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1151.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1125" width="0.0681%" height="15" fill="rgb(216,85,49)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1135.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1109" width="0.0681%" height="15" fill="rgb(208,161,47)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1119.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1093" width="0.0681%" height="15" fill="rgb(233,210,18)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1103.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1077" width="0.0681%" height="15" fill="rgb(205,104,42)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1087.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (2 samples, 0.07%)</title><rect x="87.5085%" y="1061" width="0.0681%" height="15" fill="rgb(248,90,43)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1045" width="0.0681%" height="15" fill="rgb(206,198,11)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1055.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1029" width="0.0681%" height="15" fill="rgb(239,165,27)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1039.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (2 samples, 0.07%)</title><rect x="87.5085%" y="1013" width="0.0681%" height="15" fill="rgb(246,44,32)" fg:x="2571" fg:w="2"/><text x="87.7585%" y="1023.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.03%)</title><rect x="87.5425%" y="997" width="0.0340%" height="15" fill="rgb(252,65,42)" fg:x="2572" fg:w="1"/><text x="87.7925%" y="1007.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (3 samples, 0.10%)</title><rect x="87.5766%" y="1157" width="0.1021%" height="15" fill="rgb(246,197,18)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1167.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (3 samples, 0.10%)</title><rect x="87.5766%" y="1141" width="0.1021%" height="15" fill="rgb(216,192,4)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1151.50"></text></g><g><title>DataStream::write (3 samples, 0.10%)</title><rect x="87.5766%" y="1125" width="0.1021%" height="15" fill="rgb(208,117,10)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (3 samples, 0.10%)</title><rect x="87.5766%" y="1109" width="0.1021%" height="15" fill="rgb(240,61,47)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1119.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.10%)</title><rect x="87.5766%" y="1093" width="0.1021%" height="15" fill="rgb(228,178,21)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1103.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (3 samples, 0.10%)</title><rect x="87.5766%" y="1077" width="0.1021%" height="15" fill="rgb(219,96,54)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1087.50"></text></g><g><title>decltype  (3 samples, 0.10%)</title><rect x="87.5766%" y="1061" width="0.1021%" height="15" fill="rgb(250,177,24)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (3 samples, 0.10%)</title><rect x="87.5766%" y="1045" width="0.1021%" height="15" fill="rgb(242,154,46)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1055.50"></text></g><g><title>decltype (3 samples, 0.10%)</title><rect x="87.5766%" y="1029" width="0.1021%" height="15" fill="rgb(226,176,29)" fg:x="2573" fg:w="3"/><text x="87.8266%" y="1039.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (8 samples, 0.27%)</title><rect x="87.5085%" y="1253" width="0.2723%" height="15" fill="rgb(226,29,2)" fg:x="2571" fg:w="8"/><text x="87.7585%" y="1263.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (8 samples, 0.27%)</title><rect x="87.5085%" y="1237" width="0.2723%" height="15" fill="rgb(237,104,14)" fg:x="2571" fg:w="8"/><text x="87.7585%" y="1247.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (8 samples, 0.27%)</title><rect x="87.5085%" y="1221" width="0.2723%" height="15" fill="rgb(245,207,31)" fg:x="2571" fg:w="8"/><text x="87.7585%" y="1231.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (6 samples, 0.20%)</title><rect x="87.5766%" y="1205" width="0.2042%" height="15" fill="rgb(229,211,45)" fg:x="2573" fg:w="6"/><text x="87.8266%" y="1215.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (6 samples, 0.20%)</title><rect x="87.5766%" y="1189" width="0.2042%" height="15" fill="rgb(229,113,15)" fg:x="2573" fg:w="6"/><text x="87.8266%" y="1199.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (6 samples, 0.20%)</title><rect x="87.5766%" y="1173" width="0.2042%" height="15" fill="rgb(237,147,15)" fg:x="2573" fg:w="6"/><text x="87.8266%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.10%)</title><rect x="87.6787%" y="1157" width="0.1021%" height="15" fill="rgb(244,120,12)" fg:x="2576" fg:w="3"/><text x="87.9287%" y="1167.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (3 samples, 0.10%)</title><rect x="87.6787%" y="1141" width="0.1021%" height="15" fill="rgb(205,120,12)" fg:x="2576" fg:w="3"/><text x="87.9287%" y="1151.50"></text></g><g><title>decltype  (3 samples, 0.10%)</title><rect x="87.6787%" y="1125" width="0.1021%" height="15" fill="rgb(231,26,45)" fg:x="2576" fg:w="3"/><text x="87.9287%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (3 samples, 0.10%)</title><rect x="87.6787%" y="1109" width="0.1021%" height="15" fill="rgb(246,98,1)" fg:x="2576" fg:w="3"/><text x="87.9287%" y="1119.50"></text></g><g><title>decltype (3 samples, 0.10%)</title><rect x="87.6787%" y="1093" width="0.1021%" height="15" fill="rgb(207,68,45)" fg:x="2576" fg:w="3"/><text x="87.9287%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="87.7808%" y="1141" width="0.0340%" height="15" fill="rgb(231,27,38)" fg:x="2579" fg:w="1"/><text x="88.0308%" y="1151.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="87.7808%" y="1125" width="0.0340%" height="15" fill="rgb(214,223,3)" fg:x="2579" fg:w="1"/><text x="88.0308%" y="1135.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (1 samples, 0.03%)</title><rect x="87.7808%" y="1109" width="0.0340%" height="15" fill="rgb(228,195,46)" fg:x="2579" fg:w="1"/><text x="88.0308%" y="1119.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.03%)</title><rect x="87.7808%" y="1093" width="0.0340%" height="15" fill="rgb(231,100,42)" fg:x="2579" fg:w="1"/><text x="88.0308%" y="1103.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.03%)</title><rect x="87.7808%" y="1077" width="0.0340%" height="15" fill="rgb(236,53,4)" fg:x="2579" fg:w="1"/><text x="88.0308%" y="1087.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (2 samples, 0.07%)</title><rect x="87.8148%" y="1141" width="0.0681%" height="15" fill="rgb(230,152,12)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1151.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.8148%" y="1125" width="0.0681%" height="15" fill="rgb(226,101,19)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1135.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.8148%" y="1109" width="0.0681%" height="15" fill="rgb(250,149,32)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1119.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.07%)</title><rect x="87.8148%" y="1093" width="0.0681%" height="15" fill="rgb(232,178,12)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (2 samples, 0.07%)</title><rect x="87.8148%" y="1077" width="0.0681%" height="15" fill="rgb(246,151,17)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1087.50"></text></g><g><title>DataStream::write (2 samples, 0.07%)</title><rect x="87.8148%" y="1061" width="0.0681%" height="15" fill="rgb(252,17,51)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1071.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.07%)</title><rect x="87.8148%" y="1045" width="0.0681%" height="15" fill="rgb(250,207,23)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1055.50"></text></g><g><title>CCoinsViewDB::BatchWrite (2 samples, 0.07%)</title><rect x="87.8148%" y="1029" width="0.0681%" height="15" fill="rgb(205,27,5)" fg:x="2580" fg:w="2"/><text x="88.0648%" y="1039.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.03%)</title><rect x="87.8489%" y="1013" width="0.0340%" height="15" fill="rgb(224,32,19)" fg:x="2581" fg:w="1"/><text x="88.0989%" y="1023.50"></text></g><g><title>DataStream::reserve (1 samples, 0.03%)</title><rect x="87.8489%" y="997" width="0.0340%" height="15" fill="rgb(247,214,40)" fg:x="2581" fg:w="1"/><text x="88.0989%" y="1007.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (1 samples, 0.03%)</title><rect x="87.8489%" y="981" width="0.0340%" height="15" fill="rgb(239,199,17)" fg:x="2581" fg:w="1"/><text x="88.0989%" y="991.50"></text></g><g><title>CCoinsViewDB::BatchWrite (112 samples, 3.81%)</title><rect x="84.1389%" y="1285" width="3.8121%" height="15" fill="rgb(251,159,9)" fg:x="2472" fg:w="112"/><text x="84.3889%" y="1295.50">CCoi..</text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (13 samples, 0.44%)</title><rect x="87.5085%" y="1269" width="0.4425%" height="15" fill="rgb(225,78,32)" fg:x="2571" fg:w="13"/><text x="87.7585%" y="1279.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (5 samples, 0.17%)</title><rect x="87.7808%" y="1253" width="0.1702%" height="15" fill="rgb(206,97,47)" fg:x="2579" fg:w="5"/><text x="88.0308%" y="1263.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (5 samples, 0.17%)</title><rect x="87.7808%" y="1237" width="0.1702%" height="15" fill="rgb(227,107,4)" fg:x="2579" fg:w="5"/><text x="88.0308%" y="1247.50"></text></g><g><title>Serialize&lt;DataStream&gt; (5 samples, 0.17%)</title><rect x="87.7808%" y="1221" width="0.1702%" height="15" fill="rgb(241,146,50)" fg:x="2579" fg:w="5"/><text x="88.0308%" y="1231.50"></text></g><g><title>Ser&lt;DataStream&gt; (5 samples, 0.17%)</title><rect x="87.7808%" y="1205" width="0.1702%" height="15" fill="rgb(232,92,30)" fg:x="2579" fg:w="5"/><text x="88.0308%" y="1215.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (5 samples, 0.17%)</title><rect x="87.7808%" y="1189" width="0.1702%" height="15" fill="rgb(222,0,40)" fg:x="2579" fg:w="5"/><text x="88.0308%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (5 samples, 0.17%)</title><rect x="87.7808%" y="1173" width="0.1702%" height="15" fill="rgb(219,54,33)" fg:x="2579" fg:w="5"/><text x="88.0308%" y="1183.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (5 samples, 0.17%)</title><rect x="87.7808%" y="1157" width="0.1702%" height="15" fill="rgb(226,209,28)" fg:x="2579" fg:w="5"/><text x="88.0308%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.8829%" y="1141" width="0.0681%" height="15" fill="rgb(254,205,35)" fg:x="2582" fg:w="2"/><text x="88.1329%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (2 samples, 0.07%)</title><rect x="87.8829%" y="1125" width="0.0681%" height="15" fill="rgb(230,159,3)" fg:x="2582" fg:w="2"/><text x="88.1329%" y="1135.50"></text></g><g><title>DataStream::write (2 samples, 0.07%)</title><rect x="87.8829%" y="1109" width="0.0681%" height="15" fill="rgb(232,190,24)" fg:x="2582" fg:w="2"/><text x="88.1329%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.07%)</title><rect x="87.8829%" y="1093" width="0.0681%" height="15" fill="rgb(217,227,44)" fg:x="2582" fg:w="2"/><text x="88.1329%" y="1103.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.07%)</title><rect x="87.8829%" y="1077" width="0.0681%" height="15" fill="rgb(236,211,1)" fg:x="2582" fg:w="2"/><text x="88.1329%" y="1087.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.03%)</title><rect x="87.9170%" y="1061" width="0.0340%" height="15" fill="rgb(250,127,46)" fg:x="2583" fg:w="1"/><text x="88.1670%" y="1071.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.03%)</title><rect x="87.9170%" y="1045" width="0.0340%" height="15" fill="rgb(229,213,6)" fg:x="2583" fg:w="1"/><text x="88.1670%" y="1055.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="87.9170%" y="1029" width="0.0340%" height="15" fill="rgb(237,15,36)" fg:x="2583" fg:w="1"/><text x="88.1670%" y="1039.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.03%)</title><rect x="87.9170%" y="1013" width="0.0340%" height="15" fill="rgb(213,131,41)" fg:x="2583" fg:w="1"/><text x="88.1670%" y="1023.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.03%)</title><rect x="87.9510%" y="1285" width="0.0340%" height="15" fill="rgb(225,82,44)" fg:x="2584" fg:w="1"/><text x="88.2010%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Put (1 samples, 0.03%)</title><rect x="87.9850%" y="1285" width="0.0340%" height="15" fill="rgb(249,42,11)" fg:x="2585" fg:w="1"/><text x="88.2350%" y="1295.50"></text></g><g><title>leveldb::WriteBatchInternal::Count (1 samples, 0.03%)</title><rect x="88.0191%" y="1285" width="0.0340%" height="15" fill="rgb(253,11,29)" fg:x="2586" fg:w="1"/><text x="88.2691%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (2 samples, 0.07%)</title><rect x="88.0531%" y="1221" width="0.0681%" height="15" fill="rgb(206,8,54)" fg:x="2587" fg:w="2"/><text x="88.3031%" y="1231.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (2 samples, 0.07%)</title><rect x="88.0531%" y="1205" width="0.0681%" height="15" fill="rgb(222,186,2)" fg:x="2587" fg:w="2"/><text x="88.3031%" y="1215.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (2 samples, 0.07%)</title><rect x="88.0531%" y="1189" width="0.0681%" height="15" fill="rgb(221,206,53)" fg:x="2587" fg:w="2"/><text x="88.3031%" y="1199.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.03%)</title><rect x="88.0871%" y="1173" width="0.0340%" height="15" fill="rgb(230,150,21)" fg:x="2588" fg:w="1"/><text x="88.3371%" y="1183.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.03%)</title><rect x="88.0871%" y="1157" width="0.0340%" height="15" fill="rgb(253,202,10)" fg:x="2588" fg:w="1"/><text x="88.3371%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (1 samples, 0.03%)</title><rect x="88.0871%" y="1141" width="0.0340%" height="15" fill="rgb(238,109,40)" fg:x="2588" fg:w="1"/><text x="88.3371%" y="1151.50"></text></g><g><title>CCoinsViewCache::Flush (123 samples, 4.19%)</title><rect x="84.0368%" y="1301" width="4.1865%" height="15" fill="rgb(247,120,22)" fg:x="2469" fg:w="123"/><text x="84.2868%" y="1311.50">CCoin..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (5 samples, 0.17%)</title><rect x="88.0531%" y="1285" width="0.1702%" height="15" fill="rgb(207,43,30)" fg:x="2587" fg:w="5"/><text x="88.3031%" y="1295.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (5 samples, 0.17%)</title><rect x="88.0531%" y="1269" width="0.1702%" height="15" fill="rgb(213,211,24)" fg:x="2587" fg:w="5"/><text x="88.3031%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (5 samples, 0.17%)</title><rect x="88.0531%" y="1253" width="0.1702%" height="15" fill="rgb(239,73,39)" fg:x="2587" fg:w="5"/><text x="88.3031%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (5 samples, 0.17%)</title><rect x="88.0531%" y="1237" width="0.1702%" height="15" fill="rgb(245,182,19)" fg:x="2587" fg:w="5"/><text x="88.3031%" y="1247.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.10%)</title><rect x="88.1212%" y="1221" width="0.1021%" height="15" fill="rgb(247,143,26)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1231.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.10%)</title><rect x="88.1212%" y="1205" width="0.1021%" height="15" fill="rgb(228,191,23)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.10%)</title><rect x="88.1212%" y="1189" width="0.1021%" height="15" fill="rgb(253,165,31)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.10%)</title><rect x="88.1212%" y="1173" width="0.1021%" height="15" fill="rgb(234,138,20)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1183.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (3 samples, 0.10%)</title><rect x="88.1212%" y="1157" width="0.1021%" height="15" fill="rgb(218,191,29)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1167.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (3 samples, 0.10%)</title><rect x="88.1212%" y="1141" width="0.1021%" height="15" fill="rgb(221,157,19)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1151.50"></text></g><g><title>Coin::~Coin (3 samples, 0.10%)</title><rect x="88.1212%" y="1125" width="0.1021%" height="15" fill="rgb(237,26,42)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1135.50"></text></g><g><title>CTxOut::~CTxOut (3 samples, 0.10%)</title><rect x="88.1212%" y="1109" width="0.1021%" height="15" fill="rgb(220,163,24)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1119.50"></text></g><g><title>CScript::~CScript (3 samples, 0.10%)</title><rect x="88.1212%" y="1093" width="0.1021%" height="15" fill="rgb(242,115,20)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (3 samples, 0.10%)</title><rect x="88.1212%" y="1077" width="0.1021%" height="15" fill="rgb(210,206,9)" fg:x="2589" fg:w="3"/><text x="88.3712%" y="1087.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="88.1892%" y="1061" width="0.0340%" height="15" fill="rgb(208,71,17)" fg:x="2591" fg:w="1"/><text x="88.4392%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="88.1892%" y="1045" width="0.0340%" height="15" fill="rgb(233,7,5)" fg:x="2591" fg:w="1"/><text x="88.4392%" y="1055.50"></text></g><g><title>node::BlockManager::FlushChainstateBlockFile (1 samples, 0.03%)</title><rect x="88.2233%" y="1301" width="0.0340%" height="15" fill="rgb(207,92,33)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1311.50"></text></g><g><title>node::BlockManager::FlushBlockFile (1 samples, 0.03%)</title><rect x="88.2233%" y="1285" width="0.0340%" height="15" fill="rgb(218,87,9)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1295.50"></text></g><g><title>FlatFileSeq::Flush (1 samples, 0.03%)</title><rect x="88.2233%" y="1269" width="0.0340%" height="15" fill="rgb(219,47,37)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1279.50"></text></g><g><title>FileCommit (1 samples, 0.03%)</title><rect x="88.2233%" y="1253" width="0.0340%" height="15" fill="rgb(221,152,34)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1263.50"></text></g><g><title>fdatasync (1 samples, 0.03%)</title><rect x="88.2233%" y="1237" width="0.0340%" height="15" fill="rgb(235,176,21)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1221" width="0.0340%" height="15" fill="rgb(232,212,21)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1205" width="0.0340%" height="15" fill="rgb(245,82,39)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1189" width="0.0340%" height="15" fill="rgb(241,52,51)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="88.2233%" y="1173" width="0.0340%" height="15" fill="rgb(219,91,24)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1157" width="0.0340%" height="15" fill="rgb(241,142,12)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1141" width="0.0340%" height="15" fill="rgb(230,27,9)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1125" width="0.0340%" height="15" fill="rgb(249,181,32)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1109" width="0.0340%" height="15" fill="rgb(230,107,3)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="88.2233%" y="1093" width="0.0340%" height="15" fill="rgb(246,204,14)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="88.2233%" y="1077" width="0.0340%" height="15" fill="rgb(213,192,47)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="88.2233%" y="1061" width="0.0340%" height="15" fill="rgb(240,44,36)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="88.2233%" y="1045" width="0.0340%" height="15" fill="rgb(244,209,38)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="88.2233%" y="1029" width="0.0340%" height="15" fill="rgb(219,34,37)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="1013" width="0.0340%" height="15" fill="rgb(210,28,6)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="88.2233%" y="997" width="0.0340%" height="15" fill="rgb(244,110,52)" fg:x="2592" fg:w="1"/><text x="88.4733%" y="1007.50"></text></g><g><title>kernel::BlockTreeDB::WriteBatchSync (1 samples, 0.03%)</title><rect x="88.2573%" y="1285" width="0.0340%" height="15" fill="rgb(254,124,47)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1295.50"></text></g><g><title>CDBWrapper::WriteBatch (1 samples, 0.03%)</title><rect x="88.2573%" y="1269" width="0.0340%" height="15" fill="rgb(254,110,13)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1279.50"></text></g><g><title>leveldb::DBImpl::Write (1 samples, 0.03%)</title><rect x="88.2573%" y="1253" width="0.0340%" height="15" fill="rgb(252,57,21)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1263.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (1 samples, 0.03%)</title><rect x="88.2573%" y="1237" width="0.0340%" height="15" fill="rgb(242,60,45)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1247.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1 samples, 0.03%)</title><rect x="88.2573%" y="1221" width="0.0340%" height="15" fill="rgb(234,49,30)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1231.50"></text></g><g><title>leveldb::WriteBatch::Iterate (1 samples, 0.03%)</title><rect x="88.2573%" y="1205" width="0.0340%" height="15" fill="rgb(218,98,6)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1215.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.03%)</title><rect x="88.2573%" y="1189" width="0.0340%" height="15" fill="rgb(220,174,29)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.03%)</title><rect x="88.2573%" y="1173" width="0.0340%" height="15" fill="rgb(236,163,23)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="88.2573%" y="1157" width="0.0340%" height="15" fill="rgb(242,114,45)" fg:x="2593" fg:w="1"/><text x="88.5073%" y="1167.50"></text></g><g><title>_start (129 samples, 4.39%)</title><rect x="84.0368%" y="1413" width="4.3907%" height="15" fill="rgb(232,10,53)" fg:x="2469" fg:w="129"/><text x="84.2868%" y="1423.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (129 samples, 4.39%)</title><rect x="84.0368%" y="1397" width="4.3907%" height="15" fill="rgb(245,108,29)" fg:x="2469" fg:w="129"/><text x="84.2868%" y="1407.50">__lib..</text></g><g><title>__libc_start_call_main (129 samples, 4.39%)</title><rect x="84.0368%" y="1381" width="4.3907%" height="15" fill="rgb(240,89,53)" fg:x="2469" fg:w="129"/><text x="84.2868%" y="1391.50">__lib..</text></g><g><title>main (129 samples, 4.39%)</title><rect x="84.0368%" y="1365" width="4.3907%" height="15" fill="rgb(226,60,45)" fg:x="2469" fg:w="129"/><text x="84.2868%" y="1375.50">main</text></g><g><title>Shutdown (129 samples, 4.39%)</title><rect x="84.0368%" y="1349" width="4.3907%" height="15" fill="rgb(230,41,44)" fg:x="2469" fg:w="129"/><text x="84.2868%" y="1359.50">Shutd..</text></g><g><title>Chainstate::ForceFlushStateToDisk (129 samples, 4.39%)</title><rect x="84.0368%" y="1333" width="4.3907%" height="15" fill="rgb(230,26,20)" fg:x="2469" fg:w="129"/><text x="84.2868%" y="1343.50">Chain..</text></g><g><title>Chainstate::FlushStateToDisk (129 samples, 4.39%)</title><rect x="84.0368%" y="1317" width="4.3907%" height="15" fill="rgb(237,170,32)" fg:x="2469" fg:w="129"/><text x="84.2868%" y="1327.50">Chain..</text></g><g><title>node::BlockManager::WriteBlockIndexDB (5 samples, 0.17%)</title><rect x="88.2573%" y="1301" width="0.1702%" height="15" fill="rgb(212,35,42)" fg:x="2593" fg:w="5"/><text x="88.5073%" y="1311.50"></text></g><g><title>std::set&lt;CBlockIndex*, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::erase[abi:cxx11] (4 samples, 0.14%)</title><rect x="88.2914%" y="1285" width="0.1361%" height="15" fill="rgb(227,31,34)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1295.50"></text></g><g><title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::erase[abi:cxx11] (4 samples, 0.14%)</title><rect x="88.2914%" y="1269" width="0.1361%" height="15" fill="rgb(216,19,18)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_erase_aux (4 samples, 0.14%)</title><rect x="88.2914%" y="1253" width="0.1361%" height="15" fill="rgb(211,133,42)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1263.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (4 samples, 0.14%)</title><rect x="88.2914%" y="1237" width="0.1361%" height="15" fill="rgb(244,66,13)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1221" width="0.1361%" height="15" fill="rgb(218,185,50)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1205" width="0.1361%" height="15" fill="rgb(219,149,13)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1189" width="0.1361%" height="15" fill="rgb(221,125,0)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1173" width="0.1361%" height="15" fill="rgb(247,126,27)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1157" width="0.1361%" height="15" fill="rgb(250,138,30)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1141" width="0.1361%" height="15" fill="rgb(230,151,9)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1125" width="0.1361%" height="15" fill="rgb(233,80,38)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1109" width="0.1361%" height="15" fill="rgb(232,68,43)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1093" width="0.1361%" height="15" fill="rgb(254,5,50)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1077" width="0.1361%" height="15" fill="rgb(225,45,5)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1061" width="0.1361%" height="15" fill="rgb(239,22,3)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="88.2914%" y="1045" width="0.1361%" height="15" fill="rgb(243,129,0)" fg:x="2594" fg:w="4"/><text x="88.5414%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="88.3254%" y="1029" width="0.1021%" height="15" fill="rgb(223,164,0)" fg:x="2595" fg:w="3"/><text x="88.5754%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="88.3254%" y="1013" width="0.1021%" height="15" fill="rgb(221,46,29)" fg:x="2595" fg:w="3"/><text x="88.5754%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="88.3254%" y="997" width="0.1021%" height="15" fill="rgb(205,97,47)" fg:x="2595" fg:w="3"/><text x="88.5754%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="88.3254%" y="981" width="0.1021%" height="15" fill="rgb(249,14,8)" fg:x="2595" fg:w="3"/><text x="88.5754%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="88.3254%" y="965" width="0.1021%" height="15" fill="rgb(216,77,3)" fg:x="2595" fg:w="3"/><text x="88.5754%" y="975.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="88.4275%" y="1413" width="0.0681%" height="15" fill="rgb(206,168,54)" fg:x="2598" fg:w="2"/><text x="88.6775%" y="1423.50"></text></g><g><title>b-shutoff (172 samples, 5.85%)</title><rect x="82.6753%" y="1429" width="5.8543%" height="15" fill="rgb(236,3,41)" fg:x="2429" fg:w="172"/><text x="82.9253%" y="1439.50">b-shuto..</text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.03%)</title><rect x="88.4956%" y="1413" width="0.0340%" height="15" fill="rgb(231,132,24)" fg:x="2600" fg:w="1"/><text x="88.7456%" y="1423.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.03%)</title><rect x="88.4956%" y="1397" width="0.0340%" height="15" fill="rgb(227,221,40)" fg:x="2600" fg:w="1"/><text x="88.7456%" y="1407.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="88.5296%" y="1413" width="0.0340%" height="15" fill="rgb(233,151,11)" fg:x="2601" fg:w="1"/><text x="88.7796%" y="1423.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="88.5296%" y="1397" width="0.0340%" height="15" fill="rgb(247,81,35)" fg:x="2601" fg:w="1"/><text x="88.7796%" y="1407.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="88.5296%" y="1381" width="0.0340%" height="15" fill="rgb(243,128,48)" fg:x="2601" fg:w="1"/><text x="88.7796%" y="1391.50"></text></g><g><title>__clone (74 samples, 2.52%)</title><rect x="88.5636%" y="1397" width="2.5187%" height="15" fill="rgb(253,16,10)" fg:x="2602" fg:w="74"/><text x="88.8136%" y="1407.50">__..</text></g><g><title>[unknown] (73 samples, 2.48%)</title><rect x="88.5977%" y="1381" width="2.4847%" height="15" fill="rgb(228,67,27)" fg:x="2603" fg:w="73"/><text x="88.8477%" y="1391.50">[u..</text></g><g><title>[unknown] (70 samples, 2.38%)</title><rect x="88.6998%" y="1365" width="2.3826%" height="15" fill="rgb(231,105,25)" fg:x="2606" fg:w="70"/><text x="88.9498%" y="1375.50">[u..</text></g><g><title>[unknown] (68 samples, 2.31%)</title><rect x="88.7679%" y="1349" width="2.3145%" height="15" fill="rgb(213,166,47)" fg:x="2608" fg:w="68"/><text x="89.0179%" y="1359.50">[..</text></g><g><title>[unknown] (68 samples, 2.31%)</title><rect x="88.7679%" y="1333" width="2.3145%" height="15" fill="rgb(209,27,10)" fg:x="2608" fg:w="68"/><text x="89.0179%" y="1343.50">[..</text></g><g><title>[unknown] (68 samples, 2.31%)</title><rect x="88.7679%" y="1317" width="2.3145%" height="15" fill="rgb(241,44,30)" fg:x="2608" fg:w="68"/><text x="89.0179%" y="1327.50">[..</text></g><g><title>[unknown] (68 samples, 2.31%)</title><rect x="88.7679%" y="1301" width="2.3145%" height="15" fill="rgb(223,216,15)" fg:x="2608" fg:w="68"/><text x="89.0179%" y="1311.50">[..</text></g><g><title>[unknown] (67 samples, 2.28%)</title><rect x="88.8019%" y="1285" width="2.2805%" height="15" fill="rgb(227,14,7)" fg:x="2609" fg:w="67"/><text x="89.0519%" y="1295.50">[..</text></g><g><title>[unknown] (67 samples, 2.28%)</title><rect x="88.8019%" y="1269" width="2.2805%" height="15" fill="rgb(237,14,5)" fg:x="2609" fg:w="67"/><text x="89.0519%" y="1279.50">[..</text></g><g><title>[unknown] (61 samples, 2.08%)</title><rect x="89.0061%" y="1253" width="2.0762%" height="15" fill="rgb(232,14,36)" fg:x="2615" fg:w="61"/><text x="89.2561%" y="1263.50">[..</text></g><g><title>[unknown] (25 samples, 0.85%)</title><rect x="90.2314%" y="1237" width="0.8509%" height="15" fill="rgb(234,0,38)" fg:x="2651" fg:w="25"/><text x="90.4814%" y="1247.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="90.7420%" y="1221" width="0.3404%" height="15" fill="rgb(207,170,14)" fg:x="2666" fg:w="10"/><text x="90.9920%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="90.9462%" y="1205" width="0.1361%" height="15" fill="rgb(252,45,13)" fg:x="2672" fg:w="4"/><text x="91.1962%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.0483%" y="1189" width="0.0340%" height="15" fill="rgb(213,142,7)" fg:x="2675" fg:w="1"/><text x="91.2983%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.0483%" y="1173" width="0.0340%" height="15" fill="rgb(216,157,23)" fg:x="2675" fg:w="1"/><text x="91.2983%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="91.0824%" y="1397" width="0.0340%" height="15" fill="rgb(212,145,33)" fg:x="2676" fg:w="1"/><text x="91.3324%" y="1407.50"></text></g><g><title>[[heap]] (76 samples, 2.59%)</title><rect x="88.5636%" y="1413" width="2.5868%" height="15" fill="rgb(233,26,13)" fg:x="2602" fg:w="76"/><text x="88.8136%" y="1423.50">[[..</text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.03%)</title><rect x="91.1164%" y="1397" width="0.0340%" height="15" fill="rgb(219,196,19)" fg:x="2677" fg:w="1"/><text x="91.3664%" y="1407.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.03%)</title><rect x="91.1504%" y="1397" width="0.0340%" height="15" fill="rgb(246,56,21)" fg:x="2678" fg:w="1"/><text x="91.4004%" y="1407.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="91.1845%" y="1397" width="0.0340%" height="15" fill="rgb(222,28,53)" fg:x="2679" fg:w="1"/><text x="91.4345%" y="1407.50"></text></g><g><title>[[stack]] (3 samples, 0.10%)</title><rect x="91.1504%" y="1413" width="0.1021%" height="15" fill="rgb(224,5,27)" fg:x="2678" fg:w="3"/><text x="91.4004%" y="1423.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="91.2185%" y="1397" width="0.0340%" height="15" fill="rgb(220,153,33)" fg:x="2680" fg:w="1"/><text x="91.4685%" y="1407.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="91.2526%" y="1397" width="0.0340%" height="15" fill="rgb(226,58,19)" fg:x="2681" fg:w="1"/><text x="91.5026%" y="1407.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.07%)</title><rect x="91.2866%" y="1397" width="0.0681%" height="15" fill="rgb(239,112,23)" fg:x="2682" fg:w="2"/><text x="91.5366%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="91.3547%" y="1397" width="0.0340%" height="15" fill="rgb(251,213,20)" fg:x="2684" fg:w="1"/><text x="91.6047%" y="1407.50"></text></g><g><title>__set_vma_name (1 samples, 0.03%)</title><rect x="91.3887%" y="1397" width="0.0340%" height="15" fill="rgb(215,181,21)" fg:x="2685" fg:w="1"/><text x="91.6387%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.3887%" y="1381" width="0.0340%" height="15" fill="rgb(240,8,35)" fg:x="2685" fg:w="1"/><text x="91.6387%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="91.4227%" y="1397" width="0.0340%" height="15" fill="rgb(232,203,3)" fg:x="2686" fg:w="1"/><text x="91.6727%" y="1407.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.03%)</title><rect x="91.4568%" y="1397" width="0.0340%" height="15" fill="rgb(214,202,43)" fg:x="2687" fg:w="1"/><text x="91.7068%" y="1407.50"></text></g><g><title>leveldb::Hash (2 samples, 0.07%)</title><rect x="91.4908%" y="1397" width="0.0681%" height="15" fill="rgb(254,35,11)" fg:x="2688" fg:w="2"/><text x="91.7408%" y="1407.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.03%)</title><rect x="91.5589%" y="1397" width="0.0340%" height="15" fill="rgb(239,173,13)" fg:x="2690" fg:w="1"/><text x="91.8089%" y="1407.50"></text></g><g><title>[anon] (11 samples, 0.37%)</title><rect x="91.2526%" y="1413" width="0.3744%" height="15" fill="rgb(220,141,0)" fg:x="2681" fg:w="11"/><text x="91.5026%" y="1423.50"></text></g><g><title>memcmp@plt (1 samples, 0.03%)</title><rect x="91.5929%" y="1397" width="0.0340%" height="15" fill="rgb(210,98,12)" fg:x="2691" fg:w="1"/><text x="91.8429%" y="1407.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.03%)</title><rect x="91.6270%" y="1397" width="0.0340%" height="15" fill="rgb(254,153,22)" fg:x="2692" fg:w="1"/><text x="91.8770%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1397" width="0.0340%" height="15" fill="rgb(247,223,17)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1381" width="0.0340%" height="15" fill="rgb(246,56,7)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1365" width="0.0340%" height="15" fill="rgb(240,226,12)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1349" width="0.0340%" height="15" fill="rgb(205,87,46)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1333" width="0.0340%" height="15" fill="rgb(245,214,51)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1317" width="0.0340%" height="15" fill="rgb(223,172,33)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1301" width="0.0340%" height="15" fill="rgb(227,203,34)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1285" width="0.0340%" height="15" fill="rgb(248,143,44)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1269" width="0.0340%" height="15" fill="rgb(226,162,5)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6610%" y="1253" width="0.0340%" height="15" fill="rgb(211,143,1)" fg:x="2693" fg:w="1"/><text x="91.9110%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="91.6950%" y="1397" width="0.0340%" height="15" fill="rgb(224,96,15)" fg:x="2694" fg:w="1"/><text x="91.9450%" y="1407.50"></text></g><g><title>leveldb::Hash (1 samples, 0.03%)</title><rect x="91.7291%" y="1397" width="0.0340%" height="15" fill="rgb(222,4,38)" fg:x="2695" fg:w="1"/><text x="91.9791%" y="1407.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="91.6270%" y="1413" width="0.1702%" height="15" fill="rgb(253,228,15)" fg:x="2692" fg:w="5"/><text x="91.8770%" y="1423.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (1 samples, 0.03%)</title><rect x="91.7631%" y="1397" width="0.0340%" height="15" fill="rgb(242,194,12)" fg:x="2696" fg:w="1"/><text x="92.0131%" y="1407.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="91.8312%" y="1381" width="0.3404%" height="15" fill="rgb(214,177,31)" fg:x="2698" fg:w="10"/><text x="92.0812%" y="1391.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="91.8652%" y="1365" width="0.3063%" height="15" fill="rgb(226,58,51)" fg:x="2699" fg:w="9"/><text x="92.1152%" y="1375.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="91.8652%" y="1349" width="0.3063%" height="15" fill="rgb(250,119,16)" fg:x="2699" fg:w="9"/><text x="92.1152%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="91.8993%" y="1333" width="0.2723%" height="15" fill="rgb(223,128,53)" fg:x="2700" fg:w="8"/><text x="92.1493%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.0354%" y="1317" width="0.1361%" height="15" fill="rgb(251,199,15)" fg:x="2704" fg:w="4"/><text x="92.2854%" y="1327.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.1035%" y="1301" width="0.0681%" height="15" fill="rgb(235,168,42)" fg:x="2706" fg:w="2"/><text x="92.3535%" y="1311.50"></text></g><g><title>BackgroundThreadMain (4 samples, 0.14%)</title><rect x="92.1715%" y="1349" width="0.1361%" height="15" fill="rgb(250,210,17)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1359.50"></text></g><g><title>leveldb::port::CondVar::Wait (4 samples, 0.14%)</title><rect x="92.1715%" y="1333" width="0.1361%" height="15" fill="rgb(226,36,41)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1343.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.14%)</title><rect x="92.1715%" y="1317" width="0.1361%" height="15" fill="rgb(225,87,10)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1327.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.14%)</title><rect x="92.1715%" y="1301" width="0.1361%" height="15" fill="rgb(228,83,9)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1285" width="0.1361%" height="15" fill="rgb(225,16,36)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1269" width="0.1361%" height="15" fill="rgb(242,198,13)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1253" width="0.1361%" height="15" fill="rgb(239,25,51)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1237" width="0.1361%" height="15" fill="rgb(239,28,37)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1221" width="0.1361%" height="15" fill="rgb(234,70,17)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1205" width="0.1361%" height="15" fill="rgb(231,215,53)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1189" width="0.1361%" height="15" fill="rgb(218,140,42)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1173" width="0.1361%" height="15" fill="rgb(233,227,45)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1157" width="0.1361%" height="15" fill="rgb(225,189,21)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1141" width="0.1361%" height="15" fill="rgb(237,176,54)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1125" width="0.1361%" height="15" fill="rgb(215,131,46)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.1715%" y="1109" width="0.1361%" height="15" fill="rgb(218,95,20)" fg:x="2708" fg:w="4"/><text x="92.4215%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="92.2056%" y="1093" width="0.1021%" height="15" fill="rgb(208,198,12)" fg:x="2709" fg:w="3"/><text x="92.4556%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="92.2056%" y="1077" width="0.1021%" height="15" fill="rgb(239,107,50)" fg:x="2709" fg:w="3"/><text x="92.4556%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="92.2056%" y="1061" width="0.1021%" height="15" fill="rgb(240,217,37)" fg:x="2709" fg:w="3"/><text x="92.4556%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="92.2056%" y="1045" width="0.1021%" height="15" fill="rgb(242,197,49)" fg:x="2709" fg:w="3"/><text x="92.4556%" y="1055.50"></text></g><g><title>Next (2 samples, 0.07%)</title><rect x="92.3077%" y="1301" width="0.0681%" height="15" fill="rgb(219,171,17)" fg:x="2712" fg:w="2"/><text x="92.5577%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.07%)</title><rect x="92.3077%" y="1285" width="0.0681%" height="15" fill="rgb(209,81,40)" fg:x="2712" fg:w="2"/><text x="92.5577%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.07%)</title><rect x="92.3077%" y="1269" width="0.0681%" height="15" fill="rgb(237,156,30)" fg:x="2712" fg:w="2"/><text x="92.5577%" y="1279.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.07%)</title><rect x="92.3077%" y="1253" width="0.0681%" height="15" fill="rgb(212,127,16)" fg:x="2712" fg:w="2"/><text x="92.5577%" y="1263.50"></text></g><g><title>key (1 samples, 0.03%)</title><rect x="92.3417%" y="1237" width="0.0340%" height="15" fill="rgb(226,66,32)" fg:x="2713" fg:w="1"/><text x="92.5917%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.03%)</title><rect x="92.3417%" y="1221" width="0.0340%" height="15" fill="rgb(245,22,46)" fg:x="2713" fg:w="1"/><text x="92.5917%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.07%)</title><rect x="92.3758%" y="1301" width="0.0681%" height="15" fill="rgb(210,112,21)" fg:x="2714" fg:w="2"/><text x="92.6258%" y="1311.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.03%)</title><rect x="92.4098%" y="1285" width="0.0340%" height="15" fill="rgb(207,118,39)" fg:x="2715" fg:w="1"/><text x="92.6598%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (3 samples, 0.10%)</title><rect x="92.4438%" y="1301" width="0.1021%" height="15" fill="rgb(205,206,35)" fg:x="2716" fg:w="3"/><text x="92.6938%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.03%)</title><rect x="92.5459%" y="1301" width="0.0340%" height="15" fill="rgb(222,120,2)" fg:x="2719" fg:w="1"/><text x="92.7959%" y="1311.50"></text></g><g><title>[[jbd2]] (1 samples, 0.03%)</title><rect x="92.5800%" y="1125" width="0.0340%" height="15" fill="rgb(205,38,18)" fg:x="2720" fg:w="1"/><text x="92.8300%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="92.5800%" y="1109" width="0.0340%" height="15" fill="rgb(226,61,2)" fg:x="2720" fg:w="1"/><text x="92.8300%" y="1119.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (6 samples, 0.20%)</title><rect x="92.5800%" y="1301" width="0.2042%" height="15" fill="rgb(242,161,23)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (6 samples, 0.20%)</title><rect x="92.5800%" y="1285" width="0.2042%" height="15" fill="rgb(213,13,52)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1295.50"></text></g><g><title>__unlink (6 samples, 0.20%)</title><rect x="92.5800%" y="1269" width="0.2042%" height="15" fill="rgb(246,209,47)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1279.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="92.5800%" y="1253" width="0.2042%" height="15" fill="rgb(214,41,3)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1263.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="92.5800%" y="1237" width="0.2042%" height="15" fill="rgb(236,119,38)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="92.5800%" y="1221" width="0.2042%" height="15" fill="rgb(218,50,11)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="92.5800%" y="1205" width="0.2042%" height="15" fill="rgb(228,38,11)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="92.5800%" y="1189" width="0.2042%" height="15" fill="rgb(212,13,9)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1199.50"></text></g><g><title>[[ext4]] (6 samples, 0.20%)</title><rect x="92.5800%" y="1173" width="0.2042%" height="15" fill="rgb(208,211,9)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1183.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="92.5800%" y="1157" width="0.2042%" height="15" fill="rgb(239,39,32)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="92.5800%" y="1141" width="0.2042%" height="15" fill="rgb(254,179,26)" fg:x="2720" fg:w="6"/><text x="92.8300%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="92.6140%" y="1125" width="0.1702%" height="15" fill="rgb(249,165,28)" fg:x="2721" fg:w="5"/><text x="92.8640%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="92.6140%" y="1109" width="0.1702%" height="15" fill="rgb(225,59,50)" fg:x="2721" fg:w="5"/><text x="92.8640%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="92.6481%" y="1093" width="0.1361%" height="15" fill="rgb(209,122,5)" fg:x="2722" fg:w="4"/><text x="92.8981%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="92.6821%" y="1077" width="0.1021%" height="15" fill="rgb(214,65,34)" fg:x="2723" fg:w="3"/><text x="92.9321%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="92.7502%" y="1061" width="0.0340%" height="15" fill="rgb(249,183,32)" fg:x="2725" fg:w="1"/><text x="93.0002%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="92.7502%" y="1045" width="0.0340%" height="15" fill="rgb(218,122,24)" fg:x="2725" fg:w="1"/><text x="93.0002%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="92.7502%" y="1029" width="0.0340%" height="15" fill="rgb(224,109,18)" fg:x="2725" fg:w="1"/><text x="93.0002%" y="1039.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.03%)</title><rect x="92.7842%" y="1157" width="0.0340%" height="15" fill="rgb(210,68,50)" fg:x="2726" fg:w="1"/><text x="93.0342%" y="1167.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.03%)</title><rect x="92.8182%" y="1157" width="0.0340%" height="15" fill="rgb(212,184,34)" fg:x="2727" fg:w="1"/><text x="93.0682%" y="1167.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1 samples, 0.03%)</title><rect x="92.8182%" y="1141" width="0.0340%" height="15" fill="rgb(238,105,48)" fg:x="2727" fg:w="1"/><text x="93.0682%" y="1151.50"></text></g><g><title>Next (3 samples, 0.10%)</title><rect x="92.7842%" y="1221" width="0.1021%" height="15" fill="rgb(222,134,54)" fg:x="2726" fg:w="3"/><text x="93.0342%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.10%)</title><rect x="92.7842%" y="1205" width="0.1021%" height="15" fill="rgb(246,24,43)" fg:x="2726" fg:w="3"/><text x="93.0342%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.10%)</title><rect x="92.7842%" y="1189" width="0.1021%" height="15" fill="rgb(227,169,22)" fg:x="2726" fg:w="3"/><text x="93.0342%" y="1199.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.10%)</title><rect x="92.7842%" y="1173" width="0.1021%" height="15" fill="rgb(253,152,4)" fg:x="2726" fg:w="3"/><text x="93.0342%" y="1183.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.03%)</title><rect x="92.8523%" y="1157" width="0.0340%" height="15" fill="rgb(219,158,36)" fg:x="2728" fg:w="1"/><text x="93.1023%" y="1167.50"></text></g><g><title>leveldb::crc32c::Unmask (2 samples, 0.07%)</title><rect x="92.8863%" y="1141" width="0.0681%" height="15" fill="rgb(251,128,40)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1125" width="0.0681%" height="15" fill="rgb(254,101,39)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1109" width="0.0681%" height="15" fill="rgb(221,168,40)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1093" width="0.0681%" height="15" fill="rgb(221,14,27)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1077" width="0.0681%" height="15" fill="rgb(207,36,43)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1061" width="0.0681%" height="15" fill="rgb(240,172,53)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1045" width="0.0681%" height="15" fill="rgb(241,138,43)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1029" width="0.0681%" height="15" fill="rgb(227,78,19)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="1013" width="0.0681%" height="15" fill="rgb(215,127,44)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="92.8863%" y="997" width="0.0681%" height="15" fill="rgb(227,13,10)" fg:x="2729" fg:w="2"/><text x="93.1363%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="92.9204%" y="981" width="0.0340%" height="15" fill="rgb(249,177,6)" fg:x="2730" fg:w="1"/><text x="93.1704%" y="991.50"></text></g><g><title>Next (8 samples, 0.27%)</title><rect x="92.7842%" y="1253" width="0.2723%" height="15" fill="rgb(215,154,26)" fg:x="2726" fg:w="8"/><text x="93.0342%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (8 samples, 0.27%)</title><rect x="92.7842%" y="1237" width="0.2723%" height="15" fill="rgb(250,168,20)" fg:x="2726" fg:w="8"/><text x="93.0342%" y="1247.50"></text></g><g><title>SkipEmptyDataBlocksForward (5 samples, 0.17%)</title><rect x="92.8863%" y="1221" width="0.1702%" height="15" fill="rgb(222,53,38)" fg:x="2729" fg:w="5"/><text x="93.1363%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (5 samples, 0.17%)</title><rect x="92.8863%" y="1205" width="0.1702%" height="15" fill="rgb(245,154,5)" fg:x="2729" fg:w="5"/><text x="93.1363%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (5 samples, 0.17%)</title><rect x="92.8863%" y="1189" width="0.1702%" height="15" fill="rgb(214,89,50)" fg:x="2729" fg:w="5"/><text x="93.1363%" y="1199.50"></text></g><g><title>leveldb::Table::BlockReader (5 samples, 0.17%)</title><rect x="92.8863%" y="1173" width="0.1702%" height="15" fill="rgb(232,73,14)" fg:x="2729" fg:w="5"/><text x="93.1363%" y="1183.50"></text></g><g><title>leveldb::ReadBlock (5 samples, 0.17%)</title><rect x="92.8863%" y="1157" width="0.1702%" height="15" fill="rgb(230,101,20)" fg:x="2729" fg:w="5"/><text x="93.1363%" y="1167.50"></text></g><g><title>leveldb::crc32c::Value (3 samples, 0.10%)</title><rect x="92.9544%" y="1141" width="0.1021%" height="15" fill="rgb(208,56,28)" fg:x="2731" fg:w="3"/><text x="93.2044%" y="1151.50"></text></g><g><title>crc32c::ExtendSse42 (3 samples, 0.10%)</title><rect x="92.9544%" y="1125" width="0.1021%" height="15" fill="rgb(247,205,22)" fg:x="2731" fg:w="3"/><text x="93.2044%" y="1135.50"></text></g><g><title>_mm_crc32_u64 (2 samples, 0.07%)</title><rect x="92.9884%" y="1109" width="0.0681%" height="15" fill="rgb(252,109,51)" fg:x="2732" fg:w="2"/><text x="93.2384%" y="1119.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.03%)</title><rect x="93.0565%" y="1253" width="0.0340%" height="15" fill="rgb(220,40,24)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.03%)</title><rect x="93.0565%" y="1237" width="0.0340%" height="15" fill="rgb(251,108,7)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.03%)</title><rect x="93.0565%" y="1221" width="0.0340%" height="15" fill="rgb(238,102,51)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1231.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.03%)</title><rect x="93.0565%" y="1205" width="0.0340%" height="15" fill="rgb(219,149,34)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1215.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.03%)</title><rect x="93.0565%" y="1189" width="0.0340%" height="15" fill="rgb(239,70,0)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1199.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.03%)</title><rect x="93.0565%" y="1173" width="0.0340%" height="15" fill="rgb(246,214,23)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1183.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.03%)</title><rect x="93.0565%" y="1157" width="0.0340%" height="15" fill="rgb(239,221,51)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1167.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.03%)</title><rect x="93.0565%" y="1141" width="0.0340%" height="15" fill="rgb(254,62,14)" fg:x="2734" fg:w="1"/><text x="93.3065%" y="1151.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.03%)</title><rect x="93.0905%" y="1253" width="0.0340%" height="15" fill="rgb(253,57,33)" fg:x="2735" fg:w="1"/><text x="93.3405%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::Next (1 samples, 0.03%)</title><rect x="93.1586%" y="1237" width="0.0340%" height="15" fill="rgb(229,34,6)" fg:x="2737" fg:w="1"/><text x="93.4086%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (3 samples, 0.10%)</title><rect x="93.1246%" y="1253" width="0.1021%" height="15" fill="rgb(235,191,23)" fg:x="2736" fg:w="3"/><text x="93.3746%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.03%)</title><rect x="93.1926%" y="1237" width="0.0340%" height="15" fill="rgb(217,207,27)" fg:x="2738" fg:w="1"/><text x="93.4426%" y="1247.50"></text></g><g><title>Next (14 samples, 0.48%)</title><rect x="92.7842%" y="1285" width="0.4765%" height="15" fill="rgb(232,41,44)" fg:x="2726" fg:w="14"/><text x="93.0342%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (14 samples, 0.48%)</title><rect x="92.7842%" y="1269" width="0.4765%" height="15" fill="rgb(221,188,19)" fg:x="2726" fg:w="14"/><text x="93.0342%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.03%)</title><rect x="93.2267%" y="1253" width="0.0340%" height="15" fill="rgb(245,180,45)" fg:x="2739" fg:w="1"/><text x="93.4767%" y="1263.50"></text></g><g><title>Next (1 samples, 0.03%)</title><rect x="93.2607%" y="1253" width="0.0340%" height="15" fill="rgb(250,220,42)" fg:x="2740" fg:w="1"/><text x="93.5107%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.03%)</title><rect x="93.2607%" y="1237" width="0.0340%" height="15" fill="rgb(234,16,34)" fg:x="2740" fg:w="1"/><text x="93.5107%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.03%)</title><rect x="93.2607%" y="1221" width="0.0340%" height="15" fill="rgb(233,217,23)" fg:x="2740" fg:w="1"/><text x="93.5107%" y="1231.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.03%)</title><rect x="93.2607%" y="1205" width="0.0340%" height="15" fill="rgb(209,22,46)" fg:x="2740" fg:w="1"/><text x="93.5107%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2 samples, 0.07%)</title><rect x="93.2607%" y="1285" width="0.0681%" height="15" fill="rgb(213,101,18)" fg:x="2740" fg:w="2"/><text x="93.5107%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (2 samples, 0.07%)</title><rect x="93.2607%" y="1269" width="0.0681%" height="15" fill="rgb(215,179,52)" fg:x="2740" fg:w="2"/><text x="93.5107%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="93.2948%" y="1253" width="0.0340%" height="15" fill="rgb(223,50,25)" fg:x="2741" fg:w="1"/><text x="93.5448%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::key (1 samples, 0.03%)</title><rect x="93.2948%" y="1237" width="0.0340%" height="15" fill="rgb(224,51,44)" fg:x="2741" fg:w="1"/><text x="93.5448%" y="1247.50"></text></g><g><title>leveldb::Block::Iter::value (1 samples, 0.03%)</title><rect x="93.3288%" y="1285" width="0.0340%" height="15" fill="rgb(224,13,54)" fg:x="2742" fg:w="1"/><text x="93.5788%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (5 samples, 0.17%)</title><rect x="93.3628%" y="1269" width="0.1702%" height="15" fill="rgb(219,58,47)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (5 samples, 0.17%)</title><rect x="93.3628%" y="1253" width="0.1702%" height="15" fill="rgb(246,124,34)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1263.50"></text></g><g><title>__unlink (5 samples, 0.17%)</title><rect x="93.3628%" y="1237" width="0.1702%" height="15" fill="rgb(245,109,25)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1221" width="0.1702%" height="15" fill="rgb(235,48,23)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1205" width="0.1702%" height="15" fill="rgb(229,203,36)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1189" width="0.1702%" height="15" fill="rgb(234,180,9)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1173" width="0.1702%" height="15" fill="rgb(228,98,45)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1157" width="0.1702%" height="15" fill="rgb(240,24,36)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1167.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="93.3628%" y="1141" width="0.1702%" height="15" fill="rgb(227,154,19)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1125" width="0.1702%" height="15" fill="rgb(231,2,48)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1109" width="0.1702%" height="15" fill="rgb(219,216,0)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1093" width="0.1702%" height="15" fill="rgb(251,88,0)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="93.3628%" y="1077" width="0.1702%" height="15" fill="rgb(242,45,45)" fg:x="2743" fg:w="5"/><text x="93.6128%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="93.3969%" y="1061" width="0.1361%" height="15" fill="rgb(218,149,45)" fg:x="2744" fg:w="4"/><text x="93.6469%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="93.3969%" y="1045" width="0.1361%" height="15" fill="rgb(247,194,10)" fg:x="2744" fg:w="4"/><text x="93.6469%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.4309%" y="1029" width="0.1021%" height="15" fill="rgb(234,33,37)" fg:x="2745" fg:w="3"/><text x="93.6809%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.4309%" y="1013" width="0.1021%" height="15" fill="rgb(218,61,13)" fg:x="2745" fg:w="3"/><text x="93.6809%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.4309%" y="997" width="0.1021%" height="15" fill="rgb(210,80,52)" fg:x="2745" fg:w="3"/><text x="93.6809%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.4309%" y="981" width="0.1021%" height="15" fill="rgb(218,203,27)" fg:x="2745" fg:w="3"/><text x="93.6809%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.4309%" y="965" width="0.1021%" height="15" fill="rgb(209,126,33)" fg:x="2745" fg:w="3"/><text x="93.6809%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.4309%" y="949" width="0.1021%" height="15" fill="rgb(234,173,41)" fg:x="2745" fg:w="3"/><text x="93.6809%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.4309%" y="933" width="0.1021%" height="15" fill="rgb(228,166,9)" fg:x="2745" fg:w="3"/><text x="93.6809%" y="943.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="93.5671%" y="997" width="0.0340%" height="15" fill="rgb(208,124,43)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5671%" y="981" width="0.0340%" height="15" fill="rgb(212,154,38)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5671%" y="965" width="0.0340%" height="15" fill="rgb(246,179,35)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5671%" y="949" width="0.0340%" height="15" fill="rgb(251,3,50)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5671%" y="933" width="0.0340%" height="15" fill="rgb(219,96,8)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5671%" y="917" width="0.0340%" height="15" fill="rgb(251,216,33)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5671%" y="901" width="0.0340%" height="15" fill="rgb(243,145,29)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5671%" y="885" width="0.0340%" height="15" fill="rgb(210,75,20)" fg:x="2749" fg:w="1"/><text x="93.8171%" y="895.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="93.5671%" y="1061" width="0.0681%" height="15" fill="rgb(235,56,8)" fg:x="2749" fg:w="2"/><text x="93.8171%" y="1071.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="93.5671%" y="1045" width="0.0681%" height="15" fill="rgb(226,175,49)" fg:x="2749" fg:w="2"/><text x="93.8171%" y="1055.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="93.5671%" y="1029" width="0.0681%" height="15" fill="rgb(242,204,23)" fg:x="2749" fg:w="2"/><text x="93.8171%" y="1039.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="93.5671%" y="1013" width="0.0681%" height="15" fill="rgb(225,104,24)" fg:x="2749" fg:w="2"/><text x="93.8171%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.6011%" y="997" width="0.0340%" height="15" fill="rgb(253,34,1)" fg:x="2750" fg:w="1"/><text x="93.8511%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.6011%" y="981" width="0.0340%" height="15" fill="rgb(233,199,23)" fg:x="2750" fg:w="1"/><text x="93.8511%" y="991.50"></text></g><g><title>Sync (7 samples, 0.24%)</title><rect x="93.5330%" y="1237" width="0.2383%" height="15" fill="rgb(247,7,51)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (7 samples, 0.24%)</title><rect x="93.5330%" y="1221" width="0.2383%" height="15" fill="rgb(214,146,12)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1231.50"></text></g><g><title>fdatasync (7 samples, 0.24%)</title><rect x="93.5330%" y="1205" width="0.2383%" height="15" fill="rgb(234,181,43)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="93.5330%" y="1189" width="0.2383%" height="15" fill="rgb(239,148,6)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="93.5330%" y="1173" width="0.2383%" height="15" fill="rgb(206,151,17)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="93.5330%" y="1157" width="0.2383%" height="15" fill="rgb(213,215,10)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1167.50"></text></g><g><title>[[ext4]] (7 samples, 0.24%)</title><rect x="93.5330%" y="1141" width="0.2383%" height="15" fill="rgb(215,220,44)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="93.5330%" y="1125" width="0.2383%" height="15" fill="rgb(245,205,37)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1135.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="93.5330%" y="1109" width="0.2383%" height="15" fill="rgb(245,130,43)" fg:x="2748" fg:w="7"/><text x="93.7830%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="93.5671%" y="1093" width="0.2042%" height="15" fill="rgb(231,227,38)" fg:x="2749" fg:w="6"/><text x="93.8171%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="93.5671%" y="1077" width="0.2042%" height="15" fill="rgb(233,185,4)" fg:x="2749" fg:w="6"/><text x="93.8171%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="93.6351%" y="1061" width="0.1361%" height="15" fill="rgb(224,154,43)" fg:x="2751" fg:w="4"/><text x="93.8851%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="93.6351%" y="1045" width="0.1361%" height="15" fill="rgb(235,156,15)" fg:x="2751" fg:w="4"/><text x="93.8851%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="93.6351%" y="1029" width="0.1361%" height="15" fill="rgb(211,55,43)" fg:x="2751" fg:w="4"/><text x="93.8851%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="93.6351%" y="1013" width="0.1361%" height="15" fill="rgb(247,149,40)" fg:x="2751" fg:w="4"/><text x="93.8851%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="93.6351%" y="997" width="0.1361%" height="15" fill="rgb(232,171,16)" fg:x="2751" fg:w="4"/><text x="93.8851%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.6692%" y="981" width="0.1021%" height="15" fill="rgb(215,117,49)" fg:x="2752" fg:w="3"/><text x="93.9192%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.6692%" y="965" width="0.1021%" height="15" fill="rgb(246,194,11)" fg:x="2752" fg:w="3"/><text x="93.9192%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.6692%" y="949" width="0.1021%" height="15" fill="rgb(242,101,44)" fg:x="2752" fg:w="3"/><text x="93.9192%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="93.6692%" y="933" width="0.1021%" height="15" fill="rgb(226,174,6)" fg:x="2752" fg:w="3"/><text x="93.9192%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.03%)</title><rect x="93.7713%" y="1221" width="0.0340%" height="15" fill="rgb(213,150,20)" fg:x="2755" fg:w="1"/><text x="94.0213%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.03%)</title><rect x="93.8734%" y="1205" width="0.0340%" height="15" fill="rgb(222,124,42)" fg:x="2758" fg:w="1"/><text x="94.1234%" y="1215.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (1 samples, 0.03%)</title><rect x="93.8734%" y="1189" width="0.0340%" height="15" fill="rgb(250,19,47)" fg:x="2758" fg:w="1"/><text x="94.1234%" y="1199.50"></text></g><g><title>unsigned int&amp; std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::emplace_back&lt;unsigned int&gt; (1 samples, 0.03%)</title><rect x="93.8734%" y="1173" width="0.0340%" height="15" fill="rgb(241,217,19)" fg:x="2758" fg:w="1"/><text x="94.1234%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.10%)</title><rect x="93.9074%" y="1205" width="0.1021%" height="15" fill="rgb(207,210,34)" fg:x="2759" fg:w="3"/><text x="94.1574%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="93.9755%" y="1189" width="0.0340%" height="15" fill="rgb(244,45,4)" fg:x="2761" fg:w="1"/><text x="94.2255%" y="1199.50"></text></g><g><title>leveldb::BlockBuilder::Add (7 samples, 0.24%)</title><rect x="93.8053%" y="1221" width="0.2383%" height="15" fill="rgb(252,134,50)" fg:x="2756" fg:w="7"/><text x="94.0553%" y="1231.50"></text></g><g><title>leveldb::Slice::operator[] (1 samples, 0.03%)</title><rect x="94.0095%" y="1205" width="0.0340%" height="15" fill="rgb(238,74,2)" fg:x="2762" fg:w="1"/><text x="94.2595%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.03%)</title><rect x="94.0436%" y="1157" width="0.0340%" height="15" fill="rgb(226,58,46)" fg:x="2763" fg:w="1"/><text x="94.2936%" y="1167.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (2 samples, 0.07%)</title><rect x="94.0436%" y="1221" width="0.0681%" height="15" fill="rgb(232,83,35)" fg:x="2763" fg:w="2"/><text x="94.2936%" y="1231.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (2 samples, 0.07%)</title><rect x="94.0436%" y="1205" width="0.0681%" height="15" fill="rgb(212,148,47)" fg:x="2763" fg:w="2"/><text x="94.2936%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (2 samples, 0.07%)</title><rect x="94.0436%" y="1189" width="0.0681%" height="15" fill="rgb(235,29,1)" fg:x="2763" fg:w="2"/><text x="94.2936%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (2 samples, 0.07%)</title><rect x="94.0436%" y="1173" width="0.0681%" height="15" fill="rgb(247,55,37)" fg:x="2763" fg:w="2"/><text x="94.2936%" y="1183.50"></text></g><g><title>leveldb::Hash (1 samples, 0.03%)</title><rect x="94.0776%" y="1157" width="0.0340%" height="15" fill="rgb(222,48,3)" fg:x="2764" fg:w="1"/><text x="94.3276%" y="1167.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.07%)</title><rect x="94.1116%" y="1221" width="0.0681%" height="15" fill="rgb(234,21,33)" fg:x="2765" fg:w="2"/><text x="94.3616%" y="1231.50"></text></g><g><title>leveldb::MemTableIterator::Next (1 samples, 0.03%)</title><rect x="94.1457%" y="1205" width="0.0340%" height="15" fill="rgb(247,178,53)" fg:x="2766" fg:w="1"/><text x="94.3957%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="94.2138%" y="1013" width="0.0340%" height="15" fill="rgb(225,75,7)" fg:x="2768" fg:w="1"/><text x="94.4638%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="94.2138%" y="997" width="0.0340%" height="15" fill="rgb(219,199,7)" fg:x="2768" fg:w="1"/><text x="94.4638%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.2138%" y="981" width="0.0340%" height="15" fill="rgb(209,93,42)" fg:x="2768" fg:w="1"/><text x="94.4638%" y="991.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="94.2138%" y="1029" width="0.1021%" height="15" fill="rgb(240,175,17)" fg:x="2768" fg:w="3"/><text x="94.4638%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.2478%" y="1013" width="0.0681%" height="15" fill="rgb(232,106,7)" fg:x="2769" fg:w="2"/><text x="94.4978%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.2478%" y="997" width="0.0681%" height="15" fill="rgb(242,106,43)" fg:x="2769" fg:w="2"/><text x="94.4978%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.2478%" y="981" width="0.0681%" height="15" fill="rgb(242,61,37)" fg:x="2769" fg:w="2"/><text x="94.4978%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.2478%" y="965" width="0.0681%" height="15" fill="rgb(205,72,10)" fg:x="2769" fg:w="2"/><text x="94.4978%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.2478%" y="949" width="0.0681%" height="15" fill="rgb(214,184,36)" fg:x="2769" fg:w="2"/><text x="94.4978%" y="959.50"></text></g><g><title>[[ext4]] (7 samples, 0.24%)</title><rect x="94.2138%" y="1045" width="0.2383%" height="15" fill="rgb(206,107,18)" fg:x="2768" fg:w="7"/><text x="94.4638%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="94.3159%" y="1029" width="0.1361%" height="15" fill="rgb(210,75,5)" fg:x="2771" fg:w="4"/><text x="94.5659%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="94.3159%" y="1013" width="0.1361%" height="15" fill="rgb(205,3,19)" fg:x="2771" fg:w="4"/><text x="94.5659%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="94.3499%" y="997" width="0.1021%" height="15" fill="rgb(207,181,42)" fg:x="2772" fg:w="3"/><text x="94.5999%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="94.3499%" y="981" width="0.1021%" height="15" fill="rgb(229,179,43)" fg:x="2772" fg:w="3"/><text x="94.5999%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.4180%" y="965" width="0.0340%" height="15" fill="rgb(246,95,30)" fg:x="2774" fg:w="1"/><text x="94.6680%" y="975.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (35 samples, 1.19%)</title><rect x="93.3628%" y="1285" width="1.1913%" height="15" fill="rgb(234,144,45)" fg:x="2743" fg:w="35"/><text x="93.6128%" y="1295.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (30 samples, 1.02%)</title><rect x="93.5330%" y="1269" width="1.0211%" height="15" fill="rgb(250,54,25)" fg:x="2748" fg:w="30"/><text x="93.7830%" y="1279.50"></text></g><g><title>leveldb::BuildTable (30 samples, 1.02%)</title><rect x="93.5330%" y="1253" width="1.0211%" height="15" fill="rgb(215,195,40)" fg:x="2748" fg:w="30"/><text x="93.7830%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (23 samples, 0.78%)</title><rect x="93.7713%" y="1237" width="0.7828%" height="15" fill="rgb(233,188,42)" fg:x="2755" fg:w="23"/><text x="94.0213%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Flush (11 samples, 0.37%)</title><rect x="94.1797%" y="1221" width="0.3744%" height="15" fill="rgb(247,227,35)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1231.50"></text></g><g><title>Flush (11 samples, 0.37%)</title><rect x="94.1797%" y="1205" width="0.3744%" height="15" fill="rgb(249,124,27)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1215.50"></text></g><g><title>FlushBuffer (11 samples, 0.37%)</title><rect x="94.1797%" y="1189" width="0.3744%" height="15" fill="rgb(219,207,25)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (11 samples, 0.37%)</title><rect x="94.1797%" y="1173" width="0.3744%" height="15" fill="rgb(241,216,47)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1183.50"></text></g><g><title>__GI___libc_write (11 samples, 0.37%)</title><rect x="94.1797%" y="1157" width="0.3744%" height="15" fill="rgb(233,82,50)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1167.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="94.1797%" y="1141" width="0.3744%" height="15" fill="rgb(232,63,2)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1151.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="94.1797%" y="1125" width="0.3744%" height="15" fill="rgb(236,184,28)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1135.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="94.1797%" y="1109" width="0.3744%" height="15" fill="rgb(254,63,27)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1119.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="94.1797%" y="1093" width="0.3744%" height="15" fill="rgb(253,106,28)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1103.50"></text></g><g><title>[[ext4]] (11 samples, 0.37%)</title><rect x="94.1797%" y="1077" width="0.3744%" height="15" fill="rgb(225,141,39)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1087.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="94.1797%" y="1061" width="0.3744%" height="15" fill="rgb(222,157,20)" fg:x="2767" fg:w="11"/><text x="94.4297%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="94.4520%" y="1045" width="0.1021%" height="15" fill="rgb(210,190,9)" fg:x="2775" fg:w="3"/><text x="94.7020%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="94.4520%" y="1029" width="0.1021%" height="15" fill="rgb(242,167,7)" fg:x="2775" fg:w="3"/><text x="94.7020%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.5201%" y="1013" width="0.0340%" height="15" fill="rgb(227,82,41)" fg:x="2777" fg:w="1"/><text x="94.7701%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.5201%" y="997" width="0.0340%" height="15" fill="rgb(222,131,13)" fg:x="2777" fg:w="1"/><text x="94.7701%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.5201%" y="981" width="0.0340%" height="15" fill="rgb(221,98,26)" fg:x="2777" fg:w="1"/><text x="94.7701%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.5201%" y="965" width="0.0340%" height="15" fill="rgb(251,63,52)" fg:x="2777" fg:w="1"/><text x="94.7701%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.5201%" y="949" width="0.0340%" height="15" fill="rgb(246,25,43)" fg:x="2777" fg:w="1"/><text x="94.7701%" y="959.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (3 samples, 0.10%)</title><rect x="94.5541%" y="1285" width="0.1021%" height="15" fill="rgb(247,167,15)" fg:x="2778" fg:w="3"/><text x="94.8041%" y="1295.50"></text></g><g><title>[[ext4]] (5 samples, 0.17%)</title><rect x="94.7243%" y="1029" width="0.1702%" height="15" fill="rgb(240,104,42)" fg:x="2783" fg:w="5"/><text x="94.9743%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="94.7243%" y="1013" width="0.1702%" height="15" fill="rgb(224,54,6)" fg:x="2783" fg:w="5"/><text x="94.9743%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="94.7924%" y="997" width="0.1021%" height="15" fill="rgb(244,108,35)" fg:x="2785" fg:w="3"/><text x="95.0424%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="94.7924%" y="981" width="0.1021%" height="15" fill="rgb(216,154,2)" fg:x="2785" fg:w="3"/><text x="95.0424%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.8264%" y="965" width="0.0681%" height="15" fill="rgb(222,8,47)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.8264%" y="949" width="0.0681%" height="15" fill="rgb(252,93,1)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="959.50"></text></g><g><title>[[nvme]] (2 samples, 0.07%)</title><rect x="94.8264%" y="933" width="0.0681%" height="15" fill="rgb(223,226,51)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="943.50"></text></g><g><title>[[nvme]] (2 samples, 0.07%)</title><rect x="94.8264%" y="917" width="0.0681%" height="15" fill="rgb(206,147,9)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.8264%" y="901" width="0.0681%" height="15" fill="rgb(248,180,41)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.8264%" y="885" width="0.0681%" height="15" fill="rgb(209,47,50)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.8264%" y="869" width="0.0681%" height="15" fill="rgb(243,65,31)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.8264%" y="853" width="0.0681%" height="15" fill="rgb(228,128,1)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="94.8264%" y="837" width="0.0681%" height="15" fill="rgb(231,192,16)" fg:x="2786" fg:w="2"/><text x="95.0764%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.8604%" y="821" width="0.0340%" height="15" fill="rgb(224,26,40)" fg:x="2787" fg:w="1"/><text x="95.1104%" y="831.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (8 samples, 0.27%)</title><rect x="94.6562%" y="1285" width="0.2723%" height="15" fill="rgb(214,192,17)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1295.50"></text></g><g><title>Sync (8 samples, 0.27%)</title><rect x="94.6562%" y="1269" width="0.2723%" height="15" fill="rgb(225,147,18)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (8 samples, 0.27%)</title><rect x="94.6562%" y="1253" width="0.2723%" height="15" fill="rgb(205,35,11)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1263.50"></text></g><g><title>fdatasync (8 samples, 0.27%)</title><rect x="94.6562%" y="1237" width="0.2723%" height="15" fill="rgb(242,40,42)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="94.6562%" y="1221" width="0.2723%" height="15" fill="rgb(250,170,13)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1231.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="94.6562%" y="1205" width="0.2723%" height="15" fill="rgb(240,161,28)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1215.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="94.6562%" y="1189" width="0.2723%" height="15" fill="rgb(245,179,12)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1199.50"></text></g><g><title>[[ext4]] (8 samples, 0.27%)</title><rect x="94.6562%" y="1173" width="0.2723%" height="15" fill="rgb(250,92,32)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="94.6562%" y="1157" width="0.2723%" height="15" fill="rgb(233,10,40)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="94.6562%" y="1141" width="0.2723%" height="15" fill="rgb(217,98,1)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="94.6562%" y="1125" width="0.2723%" height="15" fill="rgb(238,202,7)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="94.6562%" y="1109" width="0.2723%" height="15" fill="rgb(222,91,3)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1119.50"></text></g><g><title>[[ext4]] (8 samples, 0.27%)</title><rect x="94.6562%" y="1093" width="0.2723%" height="15" fill="rgb(211,170,49)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1103.50"></text></g><g><title>[[ext4]] (8 samples, 0.27%)</title><rect x="94.6562%" y="1077" width="0.2723%" height="15" fill="rgb(253,139,18)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1087.50"></text></g><g><title>[[ext4]] (8 samples, 0.27%)</title><rect x="94.6562%" y="1061" width="0.2723%" height="15" fill="rgb(222,4,43)" fg:x="2781" fg:w="8"/><text x="94.9062%" y="1071.50"></text></g><g><title>[[ext4]] (6 samples, 0.20%)</title><rect x="94.7243%" y="1045" width="0.2042%" height="15" fill="rgb(207,205,12)" fg:x="2783" fg:w="6"/><text x="94.9743%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.8945%" y="1029" width="0.0340%" height="15" fill="rgb(216,159,46)" fg:x="2788" fg:w="1"/><text x="95.1445%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.8945%" y="1013" width="0.0340%" height="15" fill="rgb(236,115,1)" fg:x="2788" fg:w="1"/><text x="95.1445%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.8945%" y="997" width="0.0340%" height="15" fill="rgb(251,35,33)" fg:x="2788" fg:w="1"/><text x="95.1445%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="94.8945%" y="981" width="0.0340%" height="15" fill="rgb(248,62,51)" fg:x="2788" fg:w="1"/><text x="95.1445%" y="991.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.03%)</title><rect x="95.0987%" y="1253" width="0.0340%" height="15" fill="rgb(254,180,19)" fg:x="2794" fg:w="1"/><text x="95.3487%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="95.1327%" y="1237" width="0.0340%" height="15" fill="rgb(217,100,32)" fg:x="2795" fg:w="1"/><text x="95.3827%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.07%)</title><rect x="95.1327%" y="1253" width="0.0681%" height="15" fill="rgb(224,71,22)" fg:x="2795" fg:w="2"/><text x="95.3827%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="95.1668%" y="1237" width="0.0340%" height="15" fill="rgb(251,185,33)" fg:x="2796" fg:w="1"/><text x="95.4168%" y="1247.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.03%)</title><rect x="95.2008%" y="1253" width="0.0340%" height="15" fill="rgb(209,75,48)" fg:x="2797" fg:w="1"/><text x="95.4508%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.03%)</title><rect x="95.2008%" y="1237" width="0.0340%" height="15" fill="rgb(253,190,16)" fg:x="2797" fg:w="1"/><text x="95.4508%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.03%)</title><rect x="95.2008%" y="1221" width="0.0340%" height="15" fill="rgb(226,140,1)" fg:x="2797" fg:w="1"/><text x="95.4508%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.03%)</title><rect x="95.2008%" y="1205" width="0.0340%" height="15" fill="rgb(206,75,30)" fg:x="2797" fg:w="1"/><text x="95.4508%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="95.2008%" y="1189" width="0.0340%" height="15" fill="rgb(231,208,37)" fg:x="2797" fg:w="1"/><text x="95.4508%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="95.2008%" y="1173" width="0.0340%" height="15" fill="rgb(238,136,40)" fg:x="2797" fg:w="1"/><text x="95.4508%" y="1183.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="95.2008%" y="1157" width="0.0340%" height="15" fill="rgb(247,137,17)" fg:x="2797" fg:w="1"/><text x="95.4508%" y="1167.50"></text></g><g><title>leveldb::Slice::operator[] (2 samples, 0.07%)</title><rect x="95.2349%" y="1253" width="0.0681%" height="15" fill="rgb(240,60,40)" fg:x="2798" fg:w="2"/><text x="95.4849%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.07%)</title><rect x="95.3029%" y="1253" width="0.0681%" height="15" fill="rgb(236,68,50)" fg:x="2800" fg:w="2"/><text x="95.5529%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::ok (1 samples, 0.03%)</title><rect x="95.3370%" y="1237" width="0.0340%" height="15" fill="rgb(230,42,12)" fg:x="2801" fg:w="1"/><text x="95.5870%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.03%)</title><rect x="95.3710%" y="1253" width="0.0340%" height="15" fill="rgb(219,16,16)" fg:x="2802" fg:w="1"/><text x="95.6210%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.14%)</title><rect x="95.4050%" y="1237" width="0.1361%" height="15" fill="rgb(220,38,35)" fg:x="2803" fg:w="4"/><text x="95.6550%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="95.4050%" y="1221" width="0.1361%" height="15" fill="rgb(228,33,1)" fg:x="2803" fg:w="4"/><text x="95.6550%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1205" width="0.1021%" height="15" fill="rgb(241,46,31)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1189" width="0.1021%" height="15" fill="rgb(232,58,20)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1173" width="0.1021%" height="15" fill="rgb(206,228,53)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1157" width="0.1021%" height="15" fill="rgb(206,88,33)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1141" width="0.1021%" height="15" fill="rgb(238,69,7)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1125" width="0.1021%" height="15" fill="rgb(250,21,46)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1109" width="0.1021%" height="15" fill="rgb(215,212,21)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1093" width="0.1021%" height="15" fill="rgb(211,35,12)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1077" width="0.1021%" height="15" fill="rgb(231,184,16)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="95.4391%" y="1061" width="0.1021%" height="15" fill="rgb(242,140,15)" fg:x="2804" fg:w="3"/><text x="95.6891%" y="1071.50"></text></g><g><title>leveldb::operator== (5 samples, 0.17%)</title><rect x="95.4050%" y="1253" width="0.1702%" height="15" fill="rgb(220,37,14)" fg:x="2803" fg:w="5"/><text x="95.6550%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="95.5412%" y="1237" width="0.0340%" height="15" fill="rgb(223,146,22)" fg:x="2807" fg:w="1"/><text x="95.7912%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="95.5752%" y="1221" width="0.0340%" height="15" fill="rgb(216,132,15)" fg:x="2808" fg:w="1"/><text x="95.8252%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="95.5752%" y="1205" width="0.0340%" height="15" fill="rgb(248,83,5)" fg:x="2808" fg:w="1"/><text x="95.8252%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="95.5752%" y="1189" width="0.0340%" height="15" fill="rgb(231,206,48)" fg:x="2808" fg:w="1"/><text x="95.8252%" y="1199.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.03%)</title><rect x="95.5752%" y="1173" width="0.0340%" height="15" fill="rgb(253,185,37)" fg:x="2808" fg:w="1"/><text x="95.8252%" y="1183.50"></text></g><g><title>leveldb::BlockBuilder::Add (21 samples, 0.71%)</title><rect x="94.9285%" y="1269" width="0.7148%" height="15" fill="rgb(208,21,44)" fg:x="2789" fg:w="21"/><text x="95.1785%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.07%)</title><rect x="95.5752%" y="1253" width="0.0681%" height="15" fill="rgb(236,125,4)" fg:x="2808" fg:w="2"/><text x="95.8252%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.07%)</title><rect x="95.5752%" y="1237" width="0.0681%" height="15" fill="rgb(226,134,25)" fg:x="2808" fg:w="2"/><text x="95.8252%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.03%)</title><rect x="95.6093%" y="1221" width="0.0340%" height="15" fill="rgb(250,201,12)" fg:x="2809" fg:w="1"/><text x="95.8593%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.03%)</title><rect x="95.6093%" y="1205" width="0.0340%" height="15" fill="rgb(225,92,18)" fg:x="2809" fg:w="1"/><text x="95.8593%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.03%)</title><rect x="95.6093%" y="1189" width="0.0340%" height="15" fill="rgb(227,35,22)" fg:x="2809" fg:w="1"/><text x="95.8593%" y="1199.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.07%)</title><rect x="95.6433%" y="1269" width="0.0681%" height="15" fill="rgb(214,180,52)" fg:x="2810" fg:w="2"/><text x="95.8933%" y="1279.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.03%)</title><rect x="95.7114%" y="1269" width="0.0340%" height="15" fill="rgb(233,55,38)" fg:x="2812" fg:w="1"/><text x="95.9614%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.03%)</title><rect x="95.7114%" y="1253" width="0.0340%" height="15" fill="rgb(249,171,43)" fg:x="2812" fg:w="1"/><text x="95.9614%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.03%)</title><rect x="95.7114%" y="1237" width="0.0340%" height="15" fill="rgb(239,87,2)" fg:x="2812" fg:w="1"/><text x="95.9614%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="95.7114%" y="1221" width="0.0340%" height="15" fill="rgb(248,141,5)" fg:x="2812" fg:w="1"/><text x="95.9614%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="95.7114%" y="1205" width="0.0340%" height="15" fill="rgb(238,33,42)" fg:x="2812" fg:w="1"/><text x="95.9614%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="95.7114%" y="1189" width="0.0340%" height="15" fill="rgb(231,57,19)" fg:x="2812" fg:w="1"/><text x="95.9614%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="95.7114%" y="1173" width="0.0340%" height="15" fill="rgb(214,78,53)" fg:x="2812" fg:w="1"/><text x="95.9614%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (4 samples, 0.14%)</title><rect x="95.7454%" y="1237" width="0.1361%" height="15" fill="rgb(206,132,29)" fg:x="2813" fg:w="4"/><text x="95.9954%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.03%)</title><rect x="95.8475%" y="1221" width="0.0340%" height="15" fill="rgb(248,174,31)" fg:x="2816" fg:w="1"/><text x="96.0975%" y="1231.50"></text></g><g><title>leveldb::Hash (1 samples, 0.03%)</title><rect x="95.8475%" y="1205" width="0.0340%" height="15" fill="rgb(221,87,13)" fg:x="2816" fg:w="1"/><text x="96.0975%" y="1215.50"></text></g><g><title>leveldb::Hash (2 samples, 0.07%)</title><rect x="95.8816%" y="1237" width="0.0681%" height="15" fill="rgb(223,197,17)" fg:x="2817" fg:w="2"/><text x="96.1316%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (7 samples, 0.24%)</title><rect x="95.7454%" y="1253" width="0.2383%" height="15" fill="rgb(220,144,50)" fg:x="2813" fg:w="7"/><text x="95.9954%" y="1263.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="95.9496%" y="1237" width="0.0340%" height="15" fill="rgb(244,201,11)" fg:x="2819" fg:w="1"/><text x="96.1996%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Flush (1 samples, 0.03%)</title><rect x="95.9496%" y="1221" width="0.0340%" height="15" fill="rgb(249,81,34)" fg:x="2819" fg:w="1"/><text x="96.1996%" y="1231.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.03%)</title><rect x="95.9496%" y="1205" width="0.0340%" height="15" fill="rgb(205,161,12)" fg:x="2819" fg:w="1"/><text x="96.1996%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.03%)</title><rect x="95.9496%" y="1189" width="0.0340%" height="15" fill="rgb(252,139,50)" fg:x="2819" fg:w="1"/><text x="96.1996%" y="1199.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (8 samples, 0.27%)</title><rect x="95.7454%" y="1269" width="0.2723%" height="15" fill="rgb(205,169,14)" fg:x="2813" fg:w="8"/><text x="95.9954%" y="1279.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="95.9837%" y="1253" width="0.0340%" height="15" fill="rgb(248,198,33)" fg:x="2820" fg:w="1"/><text x="96.2337%" y="1263.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (1 samples, 0.03%)</title><rect x="95.9837%" y="1237" width="0.0340%" height="15" fill="rgb(236,23,21)" fg:x="2820" fg:w="1"/><text x="96.2337%" y="1247.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="95.9837%" y="1221" width="0.0340%" height="15" fill="rgb(231,13,38)" fg:x="2820" fg:w="1"/><text x="96.2337%" y="1231.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="95.9837%" y="1205" width="0.0340%" height="15" fill="rgb(239,139,21)" fg:x="2820" fg:w="1"/><text x="96.2337%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.17%)</title><rect x="96.0177%" y="1269" width="0.1702%" height="15" fill="rgb(222,164,45)" fg:x="2821" fg:w="5"/><text x="96.2677%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (2 samples, 0.07%)</title><rect x="96.1198%" y="1253" width="0.0681%" height="15" fill="rgb(230,52,27)" fg:x="2824" fg:w="2"/><text x="96.3698%" y="1263.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.03%)</title><rect x="96.1538%" y="1237" width="0.0340%" height="15" fill="rgb(227,143,42)" fg:x="2825" fg:w="1"/><text x="96.4038%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.03%)</title><rect x="96.1538%" y="1221" width="0.0340%" height="15" fill="rgb(249,127,1)" fg:x="2825" fg:w="1"/><text x="96.4038%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.03%)</title><rect x="96.1538%" y="1205" width="0.0340%" height="15" fill="rgb(243,107,26)" fg:x="2825" fg:w="1"/><text x="96.4038%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.03%)</title><rect x="96.1538%" y="1189" width="0.0340%" height="15" fill="rgb(225,7,45)" fg:x="2825" fg:w="1"/><text x="96.4038%" y="1199.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.03%)</title><rect x="96.1879%" y="1269" width="0.0340%" height="15" fill="rgb(241,88,38)" fg:x="2826" fg:w="1"/><text x="96.4379%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.03%)</title><rect x="96.2219%" y="1269" width="0.0340%" height="15" fill="rgb(226,121,9)" fg:x="2827" fg:w="1"/><text x="96.4719%" y="1279.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="96.2900%" y="1029" width="0.0340%" height="15" fill="rgb(253,60,29)" fg:x="2829" fg:w="1"/><text x="96.5400%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="96.2900%" y="1013" width="0.0340%" height="15" fill="rgb(244,181,39)" fg:x="2829" fg:w="1"/><text x="96.5400%" y="1023.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="96.2900%" y="1061" width="0.0681%" height="15" fill="rgb(252,203,31)" fg:x="2829" fg:w="2"/><text x="96.5400%" y="1071.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="96.2900%" y="1045" width="0.0681%" height="15" fill="rgb(224,120,8)" fg:x="2829" fg:w="2"/><text x="96.5400%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="96.3240%" y="1029" width="0.0340%" height="15" fill="rgb(205,171,54)" fg:x="2830" fg:w="1"/><text x="96.5740%" y="1039.50"></text></g><g><title>[[ext4]] (9 samples, 0.31%)</title><rect x="96.2900%" y="1077" width="0.3063%" height="15" fill="rgb(235,89,11)" fg:x="2829" fg:w="9"/><text x="96.5400%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="96.3581%" y="1061" width="0.2383%" height="15" fill="rgb(212,180,28)" fg:x="2831" fg:w="7"/><text x="96.6081%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="96.3581%" y="1045" width="0.2383%" height="15" fill="rgb(247,84,49)" fg:x="2831" fg:w="7"/><text x="96.6081%" y="1055.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="96.3581%" y="1029" width="0.2383%" height="15" fill="rgb(236,187,52)" fg:x="2831" fg:w="7"/><text x="96.6081%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="96.3581%" y="1013" width="0.2383%" height="15" fill="rgb(227,24,15)" fg:x="2831" fg:w="7"/><text x="96.6081%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="997" width="0.1021%" height="15" fill="rgb(227,211,13)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="981" width="0.1021%" height="15" fill="rgb(245,52,14)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="965" width="0.1021%" height="15" fill="rgb(225,185,13)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="949" width="0.1021%" height="15" fill="rgb(217,160,29)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="933" width="0.1021%" height="15" fill="rgb(216,115,53)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="917" width="0.1021%" height="15" fill="rgb(236,99,5)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="901" width="0.1021%" height="15" fill="rgb(222,60,38)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="885" width="0.1021%" height="15" fill="rgb(212,82,22)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="869" width="0.1021%" height="15" fill="rgb(214,48,28)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="853" width="0.1021%" height="15" fill="rgb(245,196,50)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.4942%" y="837" width="0.1021%" height="15" fill="rgb(225,159,46)" fg:x="2835" fg:w="3"/><text x="96.7442%" y="847.50"></text></g><g><title>[[ext4]] (19 samples, 0.65%)</title><rect x="96.2560%" y="1093" width="0.6467%" height="15" fill="rgb(207,195,48)" fg:x="2828" fg:w="19"/><text x="96.5060%" y="1103.50"></text></g><g><title>[unknown] (9 samples, 0.31%)</title><rect x="96.5963%" y="1077" width="0.3063%" height="15" fill="rgb(240,73,3)" fg:x="2838" fg:w="9"/><text x="96.8463%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="96.6304%" y="1061" width="0.2723%" height="15" fill="rgb(245,57,23)" fg:x="2839" fg:w="8"/><text x="96.8804%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.24%)</title><rect x="96.6644%" y="1045" width="0.2383%" height="15" fill="rgb(240,75,18)" fg:x="2840" fg:w="7"/><text x="96.9144%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="96.6984%" y="1029" width="0.2042%" height="15" fill="rgb(238,168,12)" fg:x="2841" fg:w="6"/><text x="96.9484%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="96.8005%" y="1013" width="0.1021%" height="15" fill="rgb(226,20,40)" fg:x="2844" fg:w="3"/><text x="97.0505%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="96.8346%" y="997" width="0.0681%" height="15" fill="rgb(224,130,35)" fg:x="2845" fg:w="2"/><text x="97.0846%" y="1007.50"></text></g><g><title>[[ext4]] (25 samples, 0.85%)</title><rect x="96.2560%" y="1125" width="0.8509%" height="15" fill="rgb(225,63,41)" fg:x="2828" fg:w="25"/><text x="96.5060%" y="1135.50"></text></g><g><title>[unknown] (25 samples, 0.85%)</title><rect x="96.2560%" y="1109" width="0.8509%" height="15" fill="rgb(219,3,3)" fg:x="2828" fg:w="25"/><text x="96.5060%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="96.9027%" y="1093" width="0.2042%" height="15" fill="rgb(218,157,4)" fg:x="2847" fg:w="6"/><text x="97.1527%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="96.9027%" y="1077" width="0.2042%" height="15" fill="rgb(232,76,36)" fg:x="2847" fg:w="6"/><text x="97.1527%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.0728%" y="1061" width="0.0340%" height="15" fill="rgb(247,36,0)" fg:x="2852" fg:w="1"/><text x="97.3228%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.0728%" y="1045" width="0.0340%" height="15" fill="rgb(205,2,34)" fg:x="2852" fg:w="1"/><text x="97.3228%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.0728%" y="1029" width="0.0340%" height="15" fill="rgb(239,136,13)" fg:x="2852" fg:w="1"/><text x="97.3228%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.0728%" y="1013" width="0.0340%" height="15" fill="rgb(253,122,12)" fg:x="2852" fg:w="1"/><text x="97.3228%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.0728%" y="997" width="0.0340%" height="15" fill="rgb(222,174,7)" fg:x="2852" fg:w="1"/><text x="97.3228%" y="1007.50"></text></g><g><title>Flush (26 samples, 0.88%)</title><rect x="96.2560%" y="1253" width="0.8850%" height="15" fill="rgb(208,191,42)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1263.50"></text></g><g><title>FlushBuffer (26 samples, 0.88%)</title><rect x="96.2560%" y="1237" width="0.8850%" height="15" fill="rgb(237,212,15)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (26 samples, 0.88%)</title><rect x="96.2560%" y="1221" width="0.8850%" height="15" fill="rgb(215,65,20)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1231.50"></text></g><g><title>__GI___libc_write (26 samples, 0.88%)</title><rect x="96.2560%" y="1205" width="0.8850%" height="15" fill="rgb(232,103,11)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1215.50"></text></g><g><title>[unknown] (26 samples, 0.88%)</title><rect x="96.2560%" y="1189" width="0.8850%" height="15" fill="rgb(235,148,18)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1199.50"></text></g><g><title>[unknown] (26 samples, 0.88%)</title><rect x="96.2560%" y="1173" width="0.8850%" height="15" fill="rgb(240,173,7)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1183.50"></text></g><g><title>[unknown] (26 samples, 0.88%)</title><rect x="96.2560%" y="1157" width="0.8850%" height="15" fill="rgb(228,182,25)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1167.50"></text></g><g><title>[unknown] (26 samples, 0.88%)</title><rect x="96.2560%" y="1141" width="0.8850%" height="15" fill="rgb(247,3,52)" fg:x="2828" fg:w="26"/><text x="96.5060%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.1069%" y="1125" width="0.0340%" height="15" fill="rgb(226,155,8)" fg:x="2853" fg:w="1"/><text x="97.3569%" y="1135.50"></text></g><g><title>leveldb::TableBuilder::Flush (27 samples, 0.92%)</title><rect x="96.2560%" y="1269" width="0.9190%" height="15" fill="rgb(243,195,38)" fg:x="2828" fg:w="27"/><text x="96.5060%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.03%)</title><rect x="97.1409%" y="1253" width="0.0340%" height="15" fill="rgb(254,181,33)" fg:x="2854" fg:w="1"/><text x="97.3909%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.03%)</title><rect x="97.1409%" y="1237" width="0.0340%" height="15" fill="rgb(232,98,23)" fg:x="2854" fg:w="1"/><text x="97.3909%" y="1247.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.03%)</title><rect x="97.1409%" y="1221" width="0.0340%" height="15" fill="rgb(205,23,10)" fg:x="2854" fg:w="1"/><text x="97.3909%" y="1231.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (130 samples, 4.42%)</title><rect x="92.7842%" y="1301" width="4.4248%" height="15" fill="rgb(212,124,38)" fg:x="2726" fg:w="130"/><text x="93.0342%" y="1311.50">level..</text></g><g><title>leveldb::TableBuilder::Add (67 samples, 2.28%)</title><rect x="94.9285%" y="1285" width="2.2805%" height="15" fill="rgb(228,207,2)" fg:x="2789" fg:w="67"/><text x="95.1785%" y="1295.50">l..</text></g><g><title>leveldb::TableBuilder::ok (1 samples, 0.03%)</title><rect x="97.1749%" y="1269" width="0.0340%" height="15" fill="rgb(215,120,22)" fg:x="2855" fg:w="1"/><text x="97.4249%" y="1279.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.03%)</title><rect x="97.1749%" y="1253" width="0.0340%" height="15" fill="rgb(251,172,33)" fg:x="2855" fg:w="1"/><text x="97.4249%" y="1263.50"></text></g><g><title>leveldb::ParseInternalKey (1 samples, 0.03%)</title><rect x="97.1749%" y="1237" width="0.0340%" height="15" fill="rgb(250,83,2)" fg:x="2855" fg:w="1"/><text x="97.4249%" y="1247.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (145 samples, 4.94%)</title><rect x="92.3077%" y="1317" width="4.9353%" height="15" fill="rgb(210,132,53)" fg:x="2712" fg:w="145"/><text x="92.5577%" y="1327.50">leveld..</text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="97.2090%" y="1301" width="0.0340%" height="15" fill="rgb(221,208,36)" fg:x="2856" fg:w="1"/><text x="97.4590%" y="1311.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1 samples, 0.03%)</title><rect x="97.2430%" y="1301" width="0.0340%" height="15" fill="rgb(205,192,46)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1311.50"></text></g><g><title>leveldb::TableCache::Evict (1 samples, 0.03%)</title><rect x="97.2430%" y="1285" width="0.0340%" height="15" fill="rgb(223,163,14)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1295.50"></text></g><g><title>Erase (1 samples, 0.03%)</title><rect x="97.2430%" y="1269" width="0.0340%" height="15" fill="rgb(218,41,28)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (1 samples, 0.03%)</title><rect x="97.2430%" y="1253" width="0.0340%" height="15" fill="rgb(235,104,10)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (1 samples, 0.03%)</title><rect x="97.2430%" y="1237" width="0.0340%" height="15" fill="rgb(246,17,4)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (1 samples, 0.03%)</title><rect x="97.2430%" y="1221" width="0.0340%" height="15" fill="rgb(240,7,16)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1231.50"></text></g><g><title>leveldb::DeleteEntry (1 samples, 0.03%)</title><rect x="97.2430%" y="1205" width="0.0340%" height="15" fill="rgb(213,160,23)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1215.50"></text></g><g><title>~PosixMmapReadableFile (1 samples, 0.03%)</title><rect x="97.2430%" y="1189" width="0.0340%" height="15" fill="rgb(251,179,49)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (1 samples, 0.03%)</title><rect x="97.2430%" y="1173" width="0.0340%" height="15" fill="rgb(247,198,10)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1183.50"></text></g><g><title>__munmap (1 samples, 0.03%)</title><rect x="97.2430%" y="1157" width="0.0340%" height="15" fill="rgb(220,65,29)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1141" width="0.0340%" height="15" fill="rgb(237,171,28)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1125" width="0.0340%" height="15" fill="rgb(228,44,26)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1109" width="0.0340%" height="15" fill="rgb(216,210,27)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1093" width="0.0340%" height="15" fill="rgb(252,10,17)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1077" width="0.0340%" height="15" fill="rgb(214,172,30)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1061" width="0.0340%" height="15" fill="rgb(253,130,48)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1045" width="0.0340%" height="15" fill="rgb(226,99,43)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1029" width="0.0340%" height="15" fill="rgb(239,111,26)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2430%" y="1013" width="0.0340%" height="15" fill="rgb(240,27,53)" fg:x="2857" fg:w="1"/><text x="97.4930%" y="1023.50"></text></g><g><title>Sync (1 samples, 0.03%)</title><rect x="97.2771%" y="1269" width="0.0340%" height="15" fill="rgb(254,163,12)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1 samples, 0.03%)</title><rect x="97.2771%" y="1253" width="0.0340%" height="15" fill="rgb(225,51,48)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1263.50"></text></g><g><title>fdatasync (1 samples, 0.03%)</title><rect x="97.2771%" y="1237" width="0.0340%" height="15" fill="rgb(205,19,32)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2771%" y="1221" width="0.0340%" height="15" fill="rgb(218,119,26)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2771%" y="1205" width="0.0340%" height="15" fill="rgb(231,173,33)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2771%" y="1189" width="0.0340%" height="15" fill="rgb(241,100,29)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.2771%" y="1173" width="0.0340%" height="15" fill="rgb(250,194,34)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2771%" y="1157" width="0.0340%" height="15" fill="rgb(215,23,50)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2771%" y="1141" width="0.0340%" height="15" fill="rgb(206,49,37)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2771%" y="1125" width="0.0340%" height="15" fill="rgb(247,39,21)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.2771%" y="1109" width="0.0340%" height="15" fill="rgb(209,220,15)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.2771%" y="1093" width="0.0340%" height="15" fill="rgb(206,41,33)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.2771%" y="1077" width="0.0340%" height="15" fill="rgb(221,225,45)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.2771%" y="1061" width="0.0340%" height="15" fill="rgb(216,27,18)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.2771%" y="1045" width="0.0340%" height="15" fill="rgb(250,193,34)" fg:x="2858" fg:w="1"/><text x="97.5271%" y="1055.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.03%)</title><rect x="97.3111%" y="1237" width="0.0340%" height="15" fill="rgb(227,215,20)" fg:x="2859" fg:w="1"/><text x="97.5611%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.14%)</title><rect x="97.3451%" y="1237" width="0.1361%" height="15" fill="rgb(242,211,27)" fg:x="2860" fg:w="4"/><text x="97.5951%" y="1247.50"></text></g><g><title>leveldb::BlockBuilder::Add (6 samples, 0.20%)</title><rect x="97.3111%" y="1253" width="0.2042%" height="15" fill="rgb(229,190,30)" fg:x="2859" fg:w="6"/><text x="97.5611%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="97.4813%" y="1237" width="0.0340%" height="15" fill="rgb(253,31,29)" fg:x="2864" fg:w="1"/><text x="97.7313%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="97.4813%" y="1221" width="0.0340%" height="15" fill="rgb(229,177,52)" fg:x="2864" fg:w="1"/><text x="97.7313%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="97.4813%" y="1205" width="0.0340%" height="15" fill="rgb(226,88,8)" fg:x="2864" fg:w="1"/><text x="97.7313%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.03%)</title><rect x="97.4813%" y="1189" width="0.0340%" height="15" fill="rgb(214,55,27)" fg:x="2864" fg:w="1"/><text x="97.7313%" y="1199.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.03%)</title><rect x="97.4813%" y="1173" width="0.0340%" height="15" fill="rgb(233,202,5)" fg:x="2864" fg:w="1"/><text x="97.7313%" y="1183.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (1 samples, 0.03%)</title><rect x="97.5153%" y="1253" width="0.0340%" height="15" fill="rgb(251,49,30)" fg:x="2865" fg:w="1"/><text x="97.7653%" y="1263.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="97.5153%" y="1237" width="0.0340%" height="15" fill="rgb(235,18,52)" fg:x="2865" fg:w="1"/><text x="97.7653%" y="1247.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (1 samples, 0.03%)</title><rect x="97.5153%" y="1221" width="0.0340%" height="15" fill="rgb(250,111,51)" fg:x="2865" fg:w="1"/><text x="97.7653%" y="1231.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="97.5153%" y="1205" width="0.0340%" height="15" fill="rgb(218,13,25)" fg:x="2865" fg:w="1"/><text x="97.7653%" y="1215.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="97.5153%" y="1189" width="0.0340%" height="15" fill="rgb(248,96,7)" fg:x="2865" fg:w="1"/><text x="97.7653%" y="1199.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (1 samples, 0.03%)</title><rect x="97.5153%" y="1173" width="0.0340%" height="15" fill="rgb(217,31,15)" fg:x="2865" fg:w="1"/><text x="97.7653%" y="1183.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.03%)</title><rect x="97.5153%" y="1157" width="0.0340%" height="15" fill="rgb(228,59,49)" fg:x="2865" fg:w="1"/><text x="97.7653%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.5494%" y="1061" width="0.0340%" height="15" fill="rgb(210,152,38)" fg:x="2866" fg:w="1"/><text x="97.7994%" y="1071.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.5494%" y="1045" width="0.0340%" height="15" fill="rgb(206,71,11)" fg:x="2866" fg:w="1"/><text x="97.7994%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="97.5494%" y="1029" width="0.0340%" height="15" fill="rgb(244,199,5)" fg:x="2866" fg:w="1"/><text x="97.7994%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.5494%" y="1013" width="0.0340%" height="15" fill="rgb(253,49,1)" fg:x="2866" fg:w="1"/><text x="97.7994%" y="1023.50"></text></g><g><title>[[ext4]] (2 samples, 0.07%)</title><rect x="97.5494%" y="1077" width="0.0681%" height="15" fill="rgb(225,206,40)" fg:x="2866" fg:w="2"/><text x="97.7994%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.5834%" y="1061" width="0.0340%" height="15" fill="rgb(243,116,47)" fg:x="2867" fg:w="1"/><text x="97.8334%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.5834%" y="1045" width="0.0340%" height="15" fill="rgb(219,225,16)" fg:x="2867" fg:w="1"/><text x="97.8334%" y="1055.50"></text></g><g><title>execute_native_thread_routine (161 samples, 5.48%)</title><rect x="92.1715%" y="1381" width="5.4799%" height="15" fill="rgb(233,29,47)" fg:x="2708" fg:w="161"/><text x="92.4215%" y="1391.50">execute..</text></g><g><title>BackgroundThreadEntryPoint (161 samples, 5.48%)</title><rect x="92.1715%" y="1365" width="5.4799%" height="15" fill="rgb(250,179,18)" fg:x="2708" fg:w="161"/><text x="92.4215%" y="1375.50">Backgro..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (157 samples, 5.34%)</title><rect x="92.3077%" y="1349" width="5.3438%" height="15" fill="rgb(215,176,6)" fg:x="2712" fg:w="157"/><text x="92.5577%" y="1359.50">leveldb..</text></g><g><title>leveldb::DBImpl::BackgroundCall (157 samples, 5.34%)</title><rect x="92.3077%" y="1333" width="5.3438%" height="15" fill="rgb(214,117,39)" fg:x="2712" fg:w="157"/><text x="92.5577%" y="1343.50">leveldb..</text></g><g><title>leveldb::DBImpl::CompactMemTable (12 samples, 0.41%)</title><rect x="97.2430%" y="1317" width="0.4084%" height="15" fill="rgb(247,183,36)" fg:x="2857" fg:w="12"/><text x="97.4930%" y="1327.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (11 samples, 0.37%)</title><rect x="97.2771%" y="1301" width="0.3744%" height="15" fill="rgb(237,200,3)" fg:x="2858" fg:w="11"/><text x="97.5271%" y="1311.50"></text></g><g><title>leveldb::BuildTable (11 samples, 0.37%)</title><rect x="97.2771%" y="1285" width="0.3744%" height="15" fill="rgb(212,220,24)" fg:x="2858" fg:w="11"/><text x="97.5271%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (10 samples, 0.34%)</title><rect x="97.3111%" y="1269" width="0.3404%" height="15" fill="rgb(245,216,20)" fg:x="2859" fg:w="10"/><text x="97.5611%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Flush (3 samples, 0.10%)</title><rect x="97.5494%" y="1253" width="0.1021%" height="15" fill="rgb(219,124,7)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1263.50"></text></g><g><title>Flush (3 samples, 0.10%)</title><rect x="97.5494%" y="1237" width="0.1021%" height="15" fill="rgb(227,167,8)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1247.50"></text></g><g><title>FlushBuffer (3 samples, 0.10%)</title><rect x="97.5494%" y="1221" width="0.1021%" height="15" fill="rgb(241,37,2)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (3 samples, 0.10%)</title><rect x="97.5494%" y="1205" width="0.1021%" height="15" fill="rgb(238,134,33)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1215.50"></text></g><g><title>__GI___libc_write (3 samples, 0.10%)</title><rect x="97.5494%" y="1189" width="0.1021%" height="15" fill="rgb(248,48,27)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="97.5494%" y="1173" width="0.1021%" height="15" fill="rgb(212,14,16)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="97.5494%" y="1157" width="0.1021%" height="15" fill="rgb(217,205,37)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="97.5494%" y="1141" width="0.1021%" height="15" fill="rgb(233,185,47)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="97.5494%" y="1125" width="0.1021%" height="15" fill="rgb(244,88,8)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1135.50"></text></g><g><title>[[ext4]] (3 samples, 0.10%)</title><rect x="97.5494%" y="1109" width="0.1021%" height="15" fill="rgb(213,0,20)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="97.5494%" y="1093" width="0.1021%" height="15" fill="rgb(238,159,36)" fg:x="2866" fg:w="3"/><text x="97.7994%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.6174%" y="1077" width="0.0340%" height="15" fill="rgb(253,173,17)" fg:x="2868" fg:w="1"/><text x="97.8674%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="97.6174%" y="1061" width="0.0340%" height="15" fill="rgb(221,23,28)" fg:x="2868" fg:w="1"/><text x="97.8674%" y="1071.50"></text></g><g><title>__clone (173 samples, 5.89%)</title><rect x="91.7971%" y="1413" width="5.8884%" height="15" fill="rgb(218,113,15)" fg:x="2697" fg:w="173"/><text x="92.0471%" y="1423.50">__clone</text></g><g><title>start_thread (173 samples, 5.89%)</title><rect x="91.7971%" y="1397" width="5.8884%" height="15" fill="rgb(233,58,3)" fg:x="2697" fg:w="173"/><text x="92.0471%" y="1407.50">start_t..</text></g><g><title>name_stack_maps (1 samples, 0.03%)</title><rect x="97.6515%" y="1381" width="0.0340%" height="15" fill="rgb(250,46,35)" fg:x="2869" fg:w="1"/><text x="97.9015%" y="1391.50"></text></g><g><title>__GI___snprintf (1 samples, 0.03%)</title><rect x="97.6515%" y="1365" width="0.0340%" height="15" fill="rgb(210,169,11)" fg:x="2869" fg:w="1"/><text x="97.9015%" y="1375.50"></text></g><g><title>__vsnprintf_internal (1 samples, 0.03%)</title><rect x="97.6515%" y="1349" width="0.0340%" height="15" fill="rgb(246,88,19)" fg:x="2869" fg:w="1"/><text x="97.9015%" y="1359.50"></text></g><g><title>__printf_buffer (1 samples, 0.03%)</title><rect x="97.6515%" y="1333" width="0.0340%" height="15" fill="rgb(206,81,49)" fg:x="2869" fg:w="1"/><text x="97.9015%" y="1343.50"></text></g><g><title>__printf_buffer_write (1 samples, 0.03%)</title><rect x="97.6515%" y="1317" width="0.0340%" height="15" fill="rgb(232,144,18)" fg:x="2869" fg:w="1"/><text x="97.9015%" y="1327.50"></text></g><g><title>__printf_buffer_write (1 samples, 0.03%)</title><rect x="97.6515%" y="1301" width="0.0340%" height="15" fill="rgb(235,2,27)" fg:x="2869" fg:w="1"/><text x="97.9015%" y="1311.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.03%)</title><rect x="97.6855%" y="1413" width="0.0340%" height="15" fill="rgb(239,157,39)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1423.50"></text></g><g><title>main (1 samples, 0.03%)</title><rect x="97.6855%" y="1397" width="0.0340%" height="15" fill="rgb(220,11,17)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1407.50"></text></g><g><title>main (1 samples, 0.03%)</title><rect x="97.6855%" y="1381" width="0.0340%" height="15" fill="rgb(243,94,50)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1391.50"></text></g><g><title>AppInitMain (1 samples, 0.03%)</title><rect x="97.6855%" y="1365" width="0.0340%" height="15" fill="rgb(218,22,0)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1375.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.03%)</title><rect x="97.6855%" y="1349" width="0.0340%" height="15" fill="rgb(249,70,21)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1359.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="97.6855%" y="1333" width="0.0340%" height="15" fill="rgb(245,111,46)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1343.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.03%)</title><rect x="97.6855%" y="1317" width="0.0340%" height="15" fill="rgb(244,183,12)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1327.50"></text></g><g><title>node::LoadChainstate (1 samples, 0.03%)</title><rect x="97.6855%" y="1301" width="0.0340%" height="15" fill="rgb(207,117,0)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1311.50"></text></g><g><title>node::CompleteChainstateInitialization (1 samples, 0.03%)</title><rect x="97.6855%" y="1285" width="0.0340%" height="15" fill="rgb(206,20,43)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1295.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.03%)</title><rect x="97.6855%" y="1269" width="0.0340%" height="15" fill="rgb(221,104,11)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1279.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (1 samples, 0.03%)</title><rect x="97.6855%" y="1253" width="0.0340%" height="15" fill="rgb(254,36,50)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1263.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.03%)</title><rect x="97.6855%" y="1237" width="0.0340%" height="15" fill="rgb(252,17,15)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1247.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.03%)</title><rect x="97.6855%" y="1221" width="0.0340%" height="15" fill="rgb(219,129,43)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.03%)</title><rect x="97.6855%" y="1205" width="0.0340%" height="15" fill="rgb(205,34,45)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1215.50"></text></g><g><title>Next (1 samples, 0.03%)</title><rect x="97.6855%" y="1189" width="0.0340%" height="15" fill="rgb(251,201,32)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1199.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.03%)</title><rect x="97.6855%" y="1173" width="0.0340%" height="15" fill="rgb(205,56,0)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1183.50"></text></g><g><title>Next (1 samples, 0.03%)</title><rect x="97.6855%" y="1157" width="0.0340%" height="15" fill="rgb(211,193,27)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1167.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.03%)</title><rect x="97.6855%" y="1141" width="0.0340%" height="15" fill="rgb(231,100,42)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.03%)</title><rect x="97.6855%" y="1125" width="0.0340%" height="15" fill="rgb(245,85,27)" fg:x="2870" fg:w="1"/><text x="97.9355%" y="1135.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1 samples, 0.03%)</title><rect x="97.7195%" y="1413" width="0.0340%" height="15" fill="rgb(241,76,24)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1423.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.03%)</title><rect x="97.7195%" y="1397" width="0.0340%" height="15" fill="rgb(249,157,15)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1407.50"></text></g><g><title>main (1 samples, 0.03%)</title><rect x="97.7195%" y="1381" width="0.0340%" height="15" fill="rgb(222,218,25)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1391.50"></text></g><g><title>main (1 samples, 0.03%)</title><rect x="97.7195%" y="1365" width="0.0340%" height="15" fill="rgb(252,156,52)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1375.50"></text></g><g><title>AppInitMain (1 samples, 0.03%)</title><rect x="97.7195%" y="1349" width="0.0340%" height="15" fill="rgb(211,185,7)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1359.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.03%)</title><rect x="97.7195%" y="1333" width="0.0340%" height="15" fill="rgb(234,108,24)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1343.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="97.7195%" y="1317" width="0.0340%" height="15" fill="rgb(227,218,2)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1327.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.03%)</title><rect x="97.7195%" y="1301" width="0.0340%" height="15" fill="rgb(224,0,36)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1311.50"></text></g><g><title>node::LoadChainstate (1 samples, 0.03%)</title><rect x="97.7195%" y="1285" width="0.0340%" height="15" fill="rgb(233,201,10)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1295.50"></text></g><g><title>node::CompleteChainstateInitialization (1 samples, 0.03%)</title><rect x="97.7195%" y="1269" width="0.0340%" height="15" fill="rgb(252,209,14)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1279.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.03%)</title><rect x="97.7195%" y="1253" width="0.0340%" height="15" fill="rgb(205,93,49)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1263.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (1 samples, 0.03%)</title><rect x="97.7195%" y="1237" width="0.0340%" height="15" fill="rgb(234,116,45)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1247.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.03%)</title><rect x="97.7195%" y="1221" width="0.0340%" height="15" fill="rgb(248,89,35)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1231.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.03%)</title><rect x="97.7195%" y="1205" width="0.0340%" height="15" fill="rgb(233,167,45)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.03%)</title><rect x="97.7195%" y="1189" width="0.0340%" height="15" fill="rgb(248,228,14)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1199.50"></text></g><g><title>Next (1 samples, 0.03%)</title><rect x="97.7195%" y="1173" width="0.0340%" height="15" fill="rgb(246,91,14)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1183.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.03%)</title><rect x="97.7195%" y="1157" width="0.0340%" height="15" fill="rgb(227,142,5)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1167.50"></text></g><g><title>Next (1 samples, 0.03%)</title><rect x="97.7195%" y="1141" width="0.0340%" height="15" fill="rgb(221,63,33)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1151.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.03%)</title><rect x="97.7195%" y="1125" width="0.0340%" height="15" fill="rgb(233,49,0)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1135.50"></text></g><g><title>UintToArith256 (1 samples, 0.03%)</title><rect x="97.7195%" y="1109" width="0.0340%" height="15" fill="rgb(251,115,38)" fg:x="2871" fg:w="1"/><text x="97.9695%" y="1119.50"></text></g><g><title>__printf_buffer (1 samples, 0.03%)</title><rect x="97.7536%" y="1413" width="0.0340%" height="15" fill="rgb(231,214,32)" fg:x="2872" fg:w="1"/><text x="98.0036%" y="1423.50"></text></g><g><title>AppInit (10 samples, 0.34%)</title><rect x="97.7876%" y="1349" width="0.3404%" height="15" fill="rgb(248,73,46)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1359.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (10 samples, 0.34%)</title><rect x="97.7876%" y="1333" width="0.3404%" height="15" fill="rgb(237,156,4)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1343.50"></text></g><g><title>kernel::Context::Context (10 samples, 0.34%)</title><rect x="97.7876%" y="1317" width="0.3404%" height="15" fill="rgb(227,132,2)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1327.50"></text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (10 samples, 0.34%)</title><rect x="97.7876%" y="1301" width="0.3404%" height="15" fill="rgb(248,161,9)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1311.50"></text></g><g><title>kernel::Context::Context (10 samples, 0.34%)</title><rect x="97.7876%" y="1285" width="0.3404%" height="15" fill="rgb(238,77,38)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1295.50"></text></g><g><title>__pthread_once_slow (10 samples, 0.34%)</title><rect x="97.7876%" y="1269" width="0.3404%" height="15" fill="rgb(222,166,40)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1279.50"></text></g><g><title>_FUN (10 samples, 0.34%)</title><rect x="97.7876%" y="1253" width="0.3404%" height="15" fill="rgb(214,168,45)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1263.50"></text></g><g><title>operator (10 samples, 0.34%)</title><rect x="97.7876%" y="1237" width="0.3404%" height="15" fill="rgb(226,64,37)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1247.50"></text></g><g><title>operator (10 samples, 0.34%)</title><rect x="97.7876%" y="1221" width="0.3404%" height="15" fill="rgb(232,210,43)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1231.50"></text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (10 samples, 0.34%)</title><rect x="97.7876%" y="1205" width="0.3404%" height="15" fill="rgb(214,76,33)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1215.50"></text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (10 samples, 0.34%)</title><rect x="97.7876%" y="1189" width="0.3404%" height="15" fill="rgb(210,78,5)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1199.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (10 samples, 0.34%)</title><rect x="97.7876%" y="1173" width="0.3404%" height="15" fill="rgb(211,107,37)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1183.50"></text></g><g><title>RandomInit (10 samples, 0.34%)</title><rect x="97.7876%" y="1157" width="0.3404%" height="15" fill="rgb(249,67,16)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1167.50"></text></g><g><title>CSHA512::Finalize (10 samples, 0.34%)</title><rect x="97.7876%" y="1141" width="0.3404%" height="15" fill="rgb(222,114,31)" fg:x="2873" fg:w="10"/><text x="98.0376%" y="1151.50"></text></g><g><title>CSHA512::Write (9 samples, 0.31%)</title><rect x="97.8216%" y="1125" width="0.3063%" height="15" fill="rgb(242,118,19)" fg:x="2874" fg:w="9"/><text x="98.0716%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="1109" width="0.1361%" height="15" fill="rgb(223,115,1)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="1093" width="0.1361%" height="15" fill="rgb(241,182,54)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="1077" width="0.1361%" height="15" fill="rgb(244,166,36)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="1061" width="0.1361%" height="15" fill="rgb(241,52,43)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="1045" width="0.1361%" height="15" fill="rgb(236,82,9)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="1029" width="0.1361%" height="15" fill="rgb(241,119,0)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="1013" width="0.1361%" height="15" fill="rgb(221,19,22)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="97.9918%" y="997" width="0.1361%" height="15" fill="rgb(254,144,35)" fg:x="2879" fg:w="4"/><text x="98.2418%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="98.0259%" y="981" width="0.1021%" height="15" fill="rgb(246,132,30)" fg:x="2880" fg:w="3"/><text x="98.2759%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="98.0259%" y="965" width="0.1021%" height="15" fill="rgb(234,69,28)" fg:x="2880" fg:w="3"/><text x="98.2759%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="98.0259%" y="949" width="0.1021%" height="15" fill="rgb(219,106,47)" fg:x="2880" fg:w="3"/><text x="98.2759%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="98.0259%" y="933" width="0.1021%" height="15" fill="rgb(218,79,24)" fg:x="2880" fg:w="3"/><text x="98.2759%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="98.0259%" y="917" width="0.1021%" height="15" fill="rgb(225,26,21)" fg:x="2880" fg:w="3"/><text x="98.2759%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="98.0259%" y="901" width="0.1021%" height="15" fill="rgb(217,68,49)" fg:x="2880" fg:w="3"/><text x="98.2759%" y="911.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.03%)</title><rect x="98.1280%" y="1221" width="0.0340%" height="15" fill="rgb(220,204,28)" fg:x="2883" fg:w="1"/><text x="98.3780%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.03%)</title><rect x="98.1961%" y="1141" width="0.0340%" height="15" fill="rgb(237,208,43)" fg:x="2885" fg:w="1"/><text x="98.4461%" y="1151.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (6 samples, 0.20%)</title><rect x="98.1961%" y="1157" width="0.2042%" height="15" fill="rgb(213,97,42)" fg:x="2885" fg:w="6"/><text x="98.4461%" y="1167.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (5 samples, 0.17%)</title><rect x="98.2301%" y="1141" width="0.1702%" height="15" fill="rgb(238,96,52)" fg:x="2886" fg:w="5"/><text x="98.4801%" y="1151.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.03%)</title><rect x="98.4003%" y="1157" width="0.0340%" height="15" fill="rgb(228,14,13)" fg:x="2891" fg:w="1"/><text x="98.6503%" y="1167.50"></text></g><g><title>GetBlockProof (10 samples, 0.34%)</title><rect x="98.1961%" y="1189" width="0.3404%" height="15" fill="rgb(219,123,13)" fg:x="2885" fg:w="10"/><text x="98.4461%" y="1199.50"></text></g><g><title>operator/ (10 samples, 0.34%)</title><rect x="98.1961%" y="1173" width="0.3404%" height="15" fill="rgb(216,144,17)" fg:x="2885" fg:w="10"/><text x="98.4461%" y="1183.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (3 samples, 0.10%)</title><rect x="98.4343%" y="1157" width="0.1021%" height="15" fill="rgb(230,228,29)" fg:x="2892" fg:w="3"/><text x="98.6843%" y="1167.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (1 samples, 0.03%)</title><rect x="98.5364%" y="1029" width="0.0340%" height="15" fill="rgb(233,18,5)" fg:x="2895" fg:w="1"/><text x="98.7864%" y="1039.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="98.5364%" y="1013" width="0.0340%" height="15" fill="rgb(233,197,12)" fg:x="2895" fg:w="1"/><text x="98.7864%" y="1023.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (1 samples, 0.03%)</title><rect x="98.5364%" y="997" width="0.0340%" height="15" fill="rgb(234,140,29)" fg:x="2895" fg:w="1"/><text x="98.7864%" y="1007.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (1 samples, 0.03%)</title><rect x="98.5364%" y="981" width="0.0340%" height="15" fill="rgb(233,113,19)" fg:x="2895" fg:w="1"/><text x="98.7864%" y="991.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="98.5364%" y="965" width="0.0340%" height="15" fill="rgb(246,209,13)" fg:x="2895" fg:w="1"/><text x="98.7864%" y="975.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.03%)</title><rect x="98.5364%" y="949" width="0.0340%" height="15" fill="rgb(242,79,54)" fg:x="2895" fg:w="1"/><text x="98.7864%" y="959.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (1 samples, 0.03%)</title><rect x="98.5364%" y="933" width="0.0340%" height="15" fill="rgb(219,73,16)" fg:x="2895" fg:w="1"/><text x="98.7864%" y="943.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (2 samples, 0.07%)</title><rect x="98.5364%" y="1173" width="0.0681%" height="15" fill="rgb(224,52,10)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1183.50"></text></g><g><title>CBlockHeader::GetHash (2 samples, 0.07%)</title><rect x="98.5364%" y="1157" width="0.0681%" height="15" fill="rgb(237,179,5)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1167.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (2 samples, 0.07%)</title><rect x="98.5364%" y="1141" width="0.0681%" height="15" fill="rgb(231,20,6)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1151.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (2 samples, 0.07%)</title><rect x="98.5364%" y="1125" width="0.0681%" height="15" fill="rgb(253,171,45)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1135.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="98.5364%" y="1109" width="0.0681%" height="15" fill="rgb(230,75,49)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1119.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (2 samples, 0.07%)</title><rect x="98.5364%" y="1093" width="0.0681%" height="15" fill="rgb(216,83,46)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1103.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (2 samples, 0.07%)</title><rect x="98.5364%" y="1077" width="0.0681%" height="15" fill="rgb(236,56,9)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1087.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (2 samples, 0.07%)</title><rect x="98.5364%" y="1061" width="0.0681%" height="15" fill="rgb(215,28,34)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1071.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (2 samples, 0.07%)</title><rect x="98.5364%" y="1045" width="0.0681%" height="15" fill="rgb(230,222,20)" fg:x="2895" fg:w="2"/><text x="98.7864%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="98.5705%" y="1029" width="0.0340%" height="15" fill="rgb(235,209,51)" fg:x="2896" fg:w="1"/><text x="98.8205%" y="1039.50"></text></g><g><title>void ser_writedata32&lt;HashWriter&gt; (1 samples, 0.03%)</title><rect x="98.5705%" y="1013" width="0.0340%" height="15" fill="rgb(235,167,1)" fg:x="2896" fg:w="1"/><text x="98.8205%" y="1023.50"></text></g><g><title>HashWriter::write (1 samples, 0.03%)</title><rect x="98.5705%" y="997" width="0.0340%" height="15" fill="rgb(248,220,0)" fg:x="2896" fg:w="1"/><text x="98.8205%" y="1007.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="98.5705%" y="981" width="0.0340%" height="15" fill="rgb(239,0,18)" fg:x="2896" fg:w="1"/><text x="98.8205%" y="991.50"></text></g><g><title>CSHA256::Write (1 samples, 0.03%)</title><rect x="98.5705%" y="965" width="0.0340%" height="15" fill="rgb(229,179,11)" fg:x="2896" fg:w="1"/><text x="98.8205%" y="975.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="98.5705%" y="949" width="0.0340%" height="15" fill="rgb(226,116,53)" fg:x="2896" fg:w="1"/><text x="98.8205%" y="959.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (1 samples, 0.03%)</title><rect x="98.6045%" y="1157" width="0.0340%" height="15" fill="rgb(218,1,49)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1141" width="0.0340%" height="15" fill="rgb(208,184,47)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1151.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1125" width="0.0340%" height="15" fill="rgb(238,174,3)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1135.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1109" width="0.0340%" height="15" fill="rgb(247,188,6)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1119.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1093" width="0.0340%" height="15" fill="rgb(211,165,46)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1103.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)1&gt;, int&amp;&gt; &gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1077" width="0.0340%" height="15" fill="rgb(222,190,10)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1087.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)1&gt;, int&amp;&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1061" width="0.0340%" height="15" fill="rgb(206,185,3)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1071.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)1&gt;, int&amp;&gt;&amp;&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1045" width="0.0340%" height="15" fill="rgb(244,125,37)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1055.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)1&gt;, int&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1029" width="0.0340%" height="15" fill="rgb(211,43,7)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1039.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)1&gt;::Unser&lt;DataStream, int&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="1013" width="0.0340%" height="15" fill="rgb(250,41,42)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1023.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.03%)</title><rect x="98.6045%" y="997" width="0.0340%" height="15" fill="rgb(254,54,42)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="1007.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.03%)</title><rect x="98.6045%" y="981" width="0.0340%" height="15" fill="rgb(213,71,43)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="991.50"></text></g><g><title>DataStream::Xor (1 samples, 0.03%)</title><rect x="98.6045%" y="965" width="0.0340%" height="15" fill="rgb(249,3,44)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="975.50"></text></g><g><title>util::Xor (1 samples, 0.03%)</title><rect x="98.6045%" y="949" width="0.0340%" height="15" fill="rgb(229,80,41)" fg:x="2897" fg:w="1"/><text x="98.8545%" y="959.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (3 samples, 0.10%)</title><rect x="98.6045%" y="1173" width="0.1021%" height="15" fill="rgb(231,25,28)" fg:x="2897" fg:w="3"/><text x="98.8545%" y="1183.50"></text></g><g><title>DataStream::DataStream (2 samples, 0.07%)</title><rect x="98.6385%" y="1157" width="0.0681%" height="15" fill="rgb(208,79,48)" fg:x="2898" fg:w="2"/><text x="98.8885%" y="1167.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (2 samples, 0.07%)</title><rect x="98.6385%" y="1141" width="0.0681%" height="15" fill="rgb(207,196,38)" fg:x="2898" fg:w="2"/><text x="98.8885%" y="1151.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (2 samples, 0.07%)</title><rect x="98.6385%" y="1125" width="0.0681%" height="15" fill="rgb(228,105,49)" fg:x="2898" fg:w="2"/><text x="98.8885%" y="1135.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.07%)</title><rect x="98.6385%" y="1109" width="0.0681%" height="15" fill="rgb(237,99,15)" fg:x="2898" fg:w="2"/><text x="98.8885%" y="1119.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (6 samples, 0.20%)</title><rect x="98.5364%" y="1189" width="0.2042%" height="15" fill="rgb(224,207,46)" fg:x="2895" fg:w="6"/><text x="98.7864%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.03%)</title><rect x="98.7066%" y="1173" width="0.0340%" height="15" fill="rgb(249,117,50)" fg:x="2900" fg:w="1"/><text x="98.9566%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.03%)</title><rect x="98.7066%" y="1157" width="0.0340%" height="15" fill="rgb(248,17,13)" fg:x="2900" fg:w="1"/><text x="98.9566%" y="1167.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.03%)</title><rect x="98.7066%" y="1141" width="0.0340%" height="15" fill="rgb(228,187,36)" fg:x="2900" fg:w="1"/><text x="98.9566%" y="1151.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (1 samples, 0.03%)</title><rect x="98.7406%" y="1189" width="0.0340%" height="15" fill="rgb(234,132,20)" fg:x="2901" fg:w="1"/><text x="98.9906%" y="1199.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (1 samples, 0.03%)</title><rect x="98.7406%" y="1173" width="0.0340%" height="15" fill="rgb(209,170,46)" fg:x="2901" fg:w="1"/><text x="98.9906%" y="1183.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (1 samples, 0.03%)</title><rect x="98.7406%" y="1157" width="0.0340%" height="15" fill="rgb(237,23,19)" fg:x="2901" fg:w="1"/><text x="98.9906%" y="1167.50"></text></g><g><title>util::SignalInterrupt::operator bool (1 samples, 0.03%)</title><rect x="98.7747%" y="1189" width="0.0340%" height="15" fill="rgb(227,21,26)" fg:x="2902" fg:w="1"/><text x="99.0247%" y="1199.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (20 samples, 0.68%)</title><rect x="98.1620%" y="1221" width="0.6807%" height="15" fill="rgb(222,220,48)" fg:x="2884" fg:w="20"/><text x="98.4120%" y="1231.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (19 samples, 0.65%)</title><rect x="98.1961%" y="1205" width="0.6467%" height="15" fill="rgb(214,9,16)" fg:x="2885" fg:w="19"/><text x="98.4461%" y="1215.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1189" width="0.0340%" height="15" fill="rgb(209,73,30)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1199.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1173" width="0.0340%" height="15" fill="rgb(207,20,33)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1157" width="0.0340%" height="15" fill="rgb(219,153,12)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1141" width="0.0340%" height="15" fill="rgb(235,97,25)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1125" width="0.0340%" height="15" fill="rgb(244,30,34)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1135.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.03%)</title><rect x="98.8087%" y="1109" width="0.0340%" height="15" fill="rgb(214,106,45)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1119.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1093" width="0.0340%" height="15" fill="rgb(226,41,9)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1077" width="0.0340%" height="15" fill="rgb(253,139,29)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1087.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8087%" y="1061" width="0.0340%" height="15" fill="rgb(213,205,39)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1071.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.03%)</title><rect x="98.8087%" y="1045" width="0.0340%" height="15" fill="rgb(209,27,10)" fg:x="2903" fg:w="1"/><text x="99.0587%" y="1055.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (22 samples, 0.75%)</title><rect x="98.1280%" y="1237" width="0.7488%" height="15" fill="rgb(249,142,16)" fg:x="2883" fg:w="22"/><text x="98.3780%" y="1247.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1221" width="0.0340%" height="15" fill="rgb(242,65,12)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1231.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1205" width="0.0340%" height="15" fill="rgb(232,48,10)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1215.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1189" width="0.0340%" height="15" fill="rgb(253,67,19)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1199.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1173" width="0.0340%" height="15" fill="rgb(227,93,29)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1183.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1157" width="0.0340%" height="15" fill="rgb(226,189,53)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.03%)</title><rect x="98.8428%" y="1141" width="0.0340%" height="15" fill="rgb(223,224,1)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1151.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.03%)</title><rect x="98.8428%" y="1125" width="0.0340%" height="15" fill="rgb(221,84,32)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1135.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1109" width="0.0340%" height="15" fill="rgb(214,189,28)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1119.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1093" width="0.0340%" height="15" fill="rgb(234,7,52)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1103.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1077" width="0.0340%" height="15" fill="rgb(249,73,31)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1087.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8428%" y="1061" width="0.0340%" height="15" fill="rgb(253,153,41)" fg:x="2904" fg:w="1"/><text x="99.0928%" y="1071.50"></text></g><g><title>operator (23 samples, 0.78%)</title><rect x="98.1280%" y="1301" width="0.7828%" height="15" fill="rgb(249,52,34)" fg:x="2883" fg:w="23"/><text x="98.3780%" y="1311.50"></text></g><g><title>InitAndLoadChainstate (23 samples, 0.78%)</title><rect x="98.1280%" y="1285" width="0.7828%" height="15" fill="rgb(236,177,47)" fg:x="2883" fg:w="23"/><text x="98.3780%" y="1295.50"></text></g><g><title>node::LoadChainstate (23 samples, 0.78%)</title><rect x="98.1280%" y="1269" width="0.7828%" height="15" fill="rgb(252,185,45)" fg:x="2883" fg:w="23"/><text x="98.3780%" y="1279.50"></text></g><g><title>node::CompleteChainstateInitialization (23 samples, 0.78%)</title><rect x="98.1280%" y="1253" width="0.7828%" height="15" fill="rgb(251,15,30)" fg:x="2883" fg:w="23"/><text x="98.3780%" y="1263.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8768%" y="1237" width="0.0340%" height="15" fill="rgb(233,31,4)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1247.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8768%" y="1221" width="0.0340%" height="15" fill="rgb(254,44,24)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1231.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (1 samples, 0.03%)</title><rect x="98.8768%" y="1205" width="0.0340%" height="15" fill="rgb(218,54,1)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1215.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="98.8768%" y="1189" width="0.0340%" height="15" fill="rgb(243,209,39)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1199.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="98.8768%" y="1173" width="0.0340%" height="15" fill="rgb(206,75,33)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1183.50"></text></g><g><title>operator (1 samples, 0.03%)</title><rect x="98.8768%" y="1157" width="0.0340%" height="15" fill="rgb(223,108,18)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1167.50"></text></g><g><title>node::CompleteChainstateInitialization (1 samples, 0.03%)</title><rect x="98.8768%" y="1141" width="0.0340%" height="15" fill="rgb(244,89,31)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1151.50"></text></g><g><title>Chainstate::NeedsRedownload (1 samples, 0.03%)</title><rect x="98.8768%" y="1125" width="0.0340%" height="15" fill="rgb(222,167,27)" fg:x="2905" fg:w="1"/><text x="99.1268%" y="1135.50"></text></g><g><title>InitAndLoadChainstate (24 samples, 0.82%)</title><rect x="98.1280%" y="1317" width="0.8169%" height="15" fill="rgb(247,41,16)" fg:x="2883" fg:w="24"/><text x="98.3780%" y="1327.50"></text></g><g><title>std::__detail::_MakeUniq&lt;ChainstateManager&gt;::__single_object std::make_unique&lt;ChainstateManager, util::SignalInterrupt&amp;, kernel::ChainstateManagerOpts&amp;, kernel::BlockManagerOpts&amp;&gt; (1 samples, 0.03%)</title><rect x="98.9108%" y="1301" width="0.0340%" height="15" fill="rgb(233,168,40)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1311.50"></text></g><g><title>ChainstateManager::ChainstateManager (1 samples, 0.03%)</title><rect x="98.9108%" y="1285" width="0.0340%" height="15" fill="rgb(205,211,8)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1295.50"></text></g><g><title>ValidationCache::ValidationCache (1 samples, 0.03%)</title><rect x="98.9108%" y="1269" width="0.0340%" height="15" fill="rgb(238,105,11)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1279.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (1 samples, 0.03%)</title><rect x="98.9108%" y="1253" width="0.0340%" height="15" fill="rgb(223,142,52)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1263.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (1 samples, 0.03%)</title><rect x="98.9108%" y="1237" width="0.0340%" height="15" fill="rgb(238,51,33)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1247.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="98.9108%" y="1221" width="0.0340%" height="15" fill="rgb(231,188,43)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1231.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="98.9108%" y="1205" width="0.0340%" height="15" fill="rgb(216,92,17)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1215.50"></text></g><g><title>uint256* std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (1 samples, 0.03%)</title><rect x="98.9108%" y="1189" width="0.0340%" height="15" fill="rgb(228,2,40)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1199.50"></text></g><g><title>uint256* std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="98.9108%" y="1173" width="0.0340%" height="15" fill="rgb(226,73,15)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1183.50"></text></g><g><title>uint256* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="98.9108%" y="1157" width="0.0340%" height="15" fill="rgb(227,66,46)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1167.50"></text></g><g><title>void std::_Construct&lt;uint256&gt; (1 samples, 0.03%)</title><rect x="98.9108%" y="1141" width="0.0340%" height="15" fill="rgb(209,71,6)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1151.50"></text></g><g><title>uint256::uint256 (1 samples, 0.03%)</title><rect x="98.9108%" y="1125" width="0.0340%" height="15" fill="rgb(246,100,25)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.03%)</title><rect x="98.9108%" y="1109" width="0.0340%" height="15" fill="rgb(248,185,27)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1119.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="98.9108%" y="1093" width="0.0340%" height="15" fill="rgb(225,118,47)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.9108%" y="1077" width="0.0340%" height="15" fill="rgb(220,185,44)" fg:x="2906" fg:w="1"/><text x="99.1608%" y="1087.50"></text></g><g><title>main (25 samples, 0.85%)</title><rect x="98.1280%" y="1349" width="0.8509%" height="15" fill="rgb(227,95,24)" fg:x="2883" fg:w="25"/><text x="98.3780%" y="1359.50"></text></g><g><title>AppInitMain (25 samples, 0.85%)</title><rect x="98.1280%" y="1333" width="0.8509%" height="15" fill="rgb(252,84,24)" fg:x="2883" fg:w="25"/><text x="98.3780%" y="1343.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CBlockPolicyEstimator&gt;::__single_object std::make_unique&lt;CBlockPolicyEstimator, fs::path, bool&amp;&gt; (1 samples, 0.03%)</title><rect x="98.9449%" y="1317" width="0.0340%" height="15" fill="rgb(240,34,44)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1327.50"></text></g><g><title>CBlockPolicyEstimator::CBlockPolicyEstimator (1 samples, 0.03%)</title><rect x="98.9449%" y="1301" width="0.0340%" height="15" fill="rgb(209,72,54)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1311.50"></text></g><g><title>CBlockPolicyEstimator::Read (1 samples, 0.03%)</title><rect x="98.9449%" y="1285" width="0.0340%" height="15" fill="rgb(226,19,45)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1295.50"></text></g><g><title>TxConfirmStats::TxConfirmStats (1 samples, 0.03%)</title><rect x="98.9449%" y="1269" width="0.0340%" height="15" fill="rgb(246,7,45)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1279.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="98.9449%" y="1253" width="0.0340%" height="15" fill="rgb(225,45,2)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1263.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="98.9449%" y="1237" width="0.0340%" height="15" fill="rgb(221,80,29)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="98.9449%" y="1221" width="0.0340%" height="15" fill="rgb(228,11,19)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="98.9449%" y="1205" width="0.0340%" height="15" fill="rgb(243,17,21)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="98.9449%" y="1189" width="0.0340%" height="15" fill="rgb(243,88,8)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1199.50"></text></g><g><title>std::allocator&lt;double&gt;::allocate (1 samples, 0.03%)</title><rect x="98.9449%" y="1173" width="0.0340%" height="15" fill="rgb(214,17,9)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;double&gt;::allocate (1 samples, 0.03%)</title><rect x="98.9449%" y="1157" width="0.0340%" height="15" fill="rgb(232,169,15)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1167.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="98.9449%" y="1141" width="0.0340%" height="15" fill="rgb(232,86,53)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1151.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="98.9449%" y="1125" width="0.0340%" height="15" fill="rgb(222,100,4)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1135.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="98.9449%" y="1109" width="0.0340%" height="15" fill="rgb(253,151,38)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.9449%" y="1093" width="0.0340%" height="15" fill="rgb(238,215,29)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.9449%" y="1077" width="0.0340%" height="15" fill="rgb(205,128,53)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.9449%" y="1061" width="0.0340%" height="15" fill="rgb(248,183,14)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.9449%" y="1045" width="0.0340%" height="15" fill="rgb(244,172,35)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.9449%" y="1029" width="0.0340%" height="15" fill="rgb(234,93,19)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.9449%" y="1013" width="0.0340%" height="15" fill="rgb(227,109,7)" fg:x="2907" fg:w="1"/><text x="99.1949%" y="1023.50"></text></g><g><title>_start (39 samples, 1.33%)</title><rect x="97.7876%" y="1413" width="1.3274%" height="15" fill="rgb(233,136,54)" fg:x="2873" fg:w="39"/><text x="98.0376%" y="1423.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (39 samples, 1.33%)</title><rect x="97.7876%" y="1397" width="1.3274%" height="15" fill="rgb(233,19,40)" fg:x="2873" fg:w="39"/><text x="98.0376%" y="1407.50"></text></g><g><title>__libc_start_call_main (39 samples, 1.33%)</title><rect x="97.7876%" y="1381" width="1.3274%" height="15" fill="rgb(247,41,18)" fg:x="2873" fg:w="39"/><text x="98.0376%" y="1391.50"></text></g><g><title>main (39 samples, 1.33%)</title><rect x="97.7876%" y="1365" width="1.3274%" height="15" fill="rgb(220,34,34)" fg:x="2873" fg:w="39"/><text x="98.0376%" y="1375.50"></text></g><g><title>util::SignalInterrupt::wait (4 samples, 0.14%)</title><rect x="98.9789%" y="1349" width="0.1361%" height="15" fill="rgb(222,135,32)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1359.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.14%)</title><rect x="98.9789%" y="1333" width="0.1361%" height="15" fill="rgb(214,80,19)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1343.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.14%)</title><rect x="98.9789%" y="1317" width="0.1361%" height="15" fill="rgb(234,54,46)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1327.50"></text></g><g><title>read (4 samples, 0.14%)</title><rect x="98.9789%" y="1301" width="0.1361%" height="15" fill="rgb(251,48,23)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1285" width="0.1361%" height="15" fill="rgb(254,109,52)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1269" width="0.1361%" height="15" fill="rgb(240,186,19)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1253" width="0.1361%" height="15" fill="rgb(246,187,17)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1237" width="0.1361%" height="15" fill="rgb(212,21,5)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1221" width="0.1361%" height="15" fill="rgb(225,185,18)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1205" width="0.1361%" height="15" fill="rgb(245,114,17)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1189" width="0.1361%" height="15" fill="rgb(223,164,24)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="98.9789%" y="1173" width="0.1361%" height="15" fill="rgb(211,228,3)" fg:x="2908" fg:w="4"/><text x="99.2289%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.0129%" y="1157" width="0.1021%" height="15" fill="rgb(223,16,38)" fg:x="2909" fg:w="3"/><text x="99.2629%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.0129%" y="1141" width="0.1021%" height="15" fill="rgb(207,31,54)" fg:x="2909" fg:w="3"/><text x="99.2629%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.0129%" y="1125" width="0.1021%" height="15" fill="rgb(220,39,11)" fg:x="2909" fg:w="3"/><text x="99.2629%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.0129%" y="1109" width="0.1021%" height="15" fill="rgb(235,185,0)" fg:x="2909" fg:w="3"/><text x="99.2629%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.0129%" y="1093" width="0.1021%" height="15" fill="rgb(249,39,18)" fg:x="2909" fg:w="3"/><text x="99.2629%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.0129%" y="1077" width="0.1021%" height="15" fill="rgb(240,110,33)" fg:x="2909" fg:w="3"/><text x="99.2629%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.0129%" y="1061" width="0.1021%" height="15" fill="rgb(210,92,42)" fg:x="2909" fg:w="3"/><text x="99.2629%" y="1071.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.03%)</title><rect x="99.1150%" y="1413" width="0.0340%" height="15" fill="rgb(218,215,28)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1423.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.03%)</title><rect x="99.1150%" y="1397" width="0.0340%" height="15" fill="rgb(238,215,36)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1407.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.03%)</title><rect x="99.1150%" y="1381" width="0.0340%" height="15" fill="rgb(220,31,10)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1391.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.03%)</title><rect x="99.1150%" y="1365" width="0.0340%" height="15" fill="rgb(212,93,14)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1375.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.03%)</title><rect x="99.1150%" y="1349" width="0.0340%" height="15" fill="rgb(254,207,2)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1359.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="99.1150%" y="1333" width="0.0340%" height="15" fill="rgb(205,57,44)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1343.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_allocate (1 samples, 0.03%)</title><rect x="99.1150%" y="1317" width="0.0340%" height="15" fill="rgb(226,151,19)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1327.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="99.1150%" y="1301" width="0.0340%" height="15" fill="rgb(230,72,30)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1311.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::allocate (1 samples, 0.03%)</title><rect x="99.1150%" y="1285" width="0.0340%" height="15" fill="rgb(244,0,8)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1295.50"></text></g><g><title>std::allocator&lt;std::byte&gt;::allocate (1 samples, 0.03%)</title><rect x="99.1150%" y="1269" width="0.0340%" height="15" fill="rgb(230,192,6)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1279.50"></text></g><g><title>std::__new_allocator&lt;std::byte&gt;::allocate (1 samples, 0.03%)</title><rect x="99.1150%" y="1253" width="0.0340%" height="15" fill="rgb(233,207,13)" fg:x="2912" fg:w="1"/><text x="99.3650%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.03%)</title><rect x="99.1491%" y="1157" width="0.0340%" height="15" fill="rgb(206,227,7)" fg:x="2913" fg:w="1"/><text x="99.3991%" y="1167.50"></text></g><g><title>leveldb::TableBuilder::Flush (1 samples, 0.03%)</title><rect x="99.1491%" y="1141" width="0.0340%" height="15" fill="rgb(213,217,25)" fg:x="2913" fg:w="1"/><text x="99.3991%" y="1151.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.03%)</title><rect x="99.1491%" y="1125" width="0.0340%" height="15" fill="rgb(249,75,4)" fg:x="2913" fg:w="1"/><text x="99.3991%" y="1135.50"></text></g><g><title>leveldb::BlockBuilder::Finish (1 samples, 0.03%)</title><rect x="99.1491%" y="1109" width="0.0340%" height="15" fill="rgb(225,114,18)" fg:x="2913" fg:w="1"/><text x="99.3991%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.03%)</title><rect x="99.1491%" y="1093" width="0.0340%" height="15" fill="rgb(211,162,40)" fg:x="2913" fg:w="1"/><text x="99.3991%" y="1103.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (2 samples, 0.07%)</title><rect x="99.1491%" y="1189" width="0.0681%" height="15" fill="rgb(206,49,29)" fg:x="2913" fg:w="2"/><text x="99.3991%" y="1199.50"></text></g><g><title>leveldb::BuildTable (2 samples, 0.07%)</title><rect x="99.1491%" y="1173" width="0.0681%" height="15" fill="rgb(244,8,6)" fg:x="2913" fg:w="2"/><text x="99.3991%" y="1183.50"></text></g><g><title>leveldb::TableBuilder::Finish (1 samples, 0.03%)</title><rect x="99.1831%" y="1157" width="0.0340%" height="15" fill="rgb(231,194,28)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1167.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.03%)</title><rect x="99.1831%" y="1141" width="0.0340%" height="15" fill="rgb(210,69,5)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1151.50"></text></g><g><title>Append (1 samples, 0.03%)</title><rect x="99.1831%" y="1125" width="0.0340%" height="15" fill="rgb(216,186,12)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.03%)</title><rect x="99.1831%" y="1109" width="0.0340%" height="15" fill="rgb(238,61,15)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1119.50"></text></g><g><title>__GI___libc_write (1 samples, 0.03%)</title><rect x="99.1831%" y="1093" width="0.0340%" height="15" fill="rgb(226,104,1)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.1831%" y="1077" width="0.0340%" height="15" fill="rgb(229,128,15)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.1831%" y="1061" width="0.0340%" height="15" fill="rgb(247,110,15)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.1831%" y="1045" width="0.0340%" height="15" fill="rgb(210,74,48)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.1831%" y="1029" width="0.0340%" height="15" fill="rgb(246,121,10)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1039.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="99.1831%" y="1013" width="0.0340%" height="15" fill="rgb(214,156,37)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.1831%" y="997" width="0.0340%" height="15" fill="rgb(214,210,34)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="1007.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="99.1831%" y="981" width="0.0340%" height="15" fill="rgb(237,93,35)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="991.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="99.1831%" y="965" width="0.0340%" height="15" fill="rgb(206,36,8)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="975.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="99.1831%" y="949" width="0.0340%" height="15" fill="rgb(208,151,12)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="959.50"></text></g><g><title>[[ext4]] (1 samples, 0.03%)</title><rect x="99.1831%" y="933" width="0.0340%" height="15" fill="rgb(225,133,52)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.1831%" y="917" width="0.0340%" height="15" fill="rgb(231,71,53)" fg:x="2914" fg:w="1"/><text x="99.4331%" y="927.50"></text></g><g><title>leveldb::Arena::Allocate (1 samples, 0.03%)</title><rect x="99.2172%" y="1125" width="0.0340%" height="15" fill="rgb(243,76,21)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1135.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.03%)</title><rect x="99.2172%" y="1109" width="0.0340%" height="15" fill="rgb(252,144,3)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1119.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.03%)</title><rect x="99.2172%" y="1093" width="0.0340%" height="15" fill="rgb(231,199,10)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1103.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (1 samples, 0.03%)</title><rect x="99.2172%" y="1077" width="0.0340%" height="15" fill="rgb(215,18,11)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1087.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="99.2172%" y="1061" width="0.0340%" height="15" fill="rgb(241,65,24)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1071.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="99.2172%" y="1045" width="0.0340%" height="15" fill="rgb(251,192,38)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1055.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="99.2172%" y="1029" width="0.0340%" height="15" fill="rgb(205,9,35)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2172%" y="1013" width="0.0340%" height="15" fill="rgb(229,225,49)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2172%" y="997" width="0.0340%" height="15" fill="rgb(207,125,39)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2172%" y="981" width="0.0340%" height="15" fill="rgb(222,78,19)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.2172%" y="965" width="0.0340%" height="15" fill="rgb(248,207,20)" fg:x="2915" fg:w="1"/><text x="99.4672%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="99.2512%" y="1077" width="0.0340%" height="15" fill="rgb(205,103,49)" fg:x="2916" fg:w="1"/><text x="99.5012%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.03%)</title><rect x="99.2852%" y="1061" width="0.0340%" height="15" fill="rgb(216,42,28)" fg:x="2917" fg:w="1"/><text x="99.5352%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.03%)</title><rect x="99.3193%" y="1061" width="0.0340%" height="15" fill="rgb(213,205,53)" fg:x="2918" fg:w="1"/><text x="99.5693%" y="1071.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.07%)</title><rect x="99.3533%" y="1045" width="0.0681%" height="15" fill="rgb(239,140,53)" fg:x="2919" fg:w="2"/><text x="99.6033%" y="1055.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.07%)</title><rect x="99.3533%" y="1029" width="0.0681%" height="15" fill="rgb(248,95,9)" fg:x="2919" fg:w="2"/><text x="99.6033%" y="1039.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (7 samples, 0.24%)</title><rect x="99.2172%" y="1189" width="0.2383%" height="15" fill="rgb(254,58,47)" fg:x="2915" fg:w="7"/><text x="99.4672%" y="1199.50"></text></g><g><title>leveldb::WriteBatch::Iterate (7 samples, 0.24%)</title><rect x="99.2172%" y="1173" width="0.2383%" height="15" fill="rgb(234,227,14)" fg:x="2915" fg:w="7"/><text x="99.4672%" y="1183.50"></text></g><g><title>leveldb::WriteBatch::Iterate (7 samples, 0.24%)</title><rect x="99.2172%" y="1157" width="0.2383%" height="15" fill="rgb(205,192,45)" fg:x="2915" fg:w="7"/><text x="99.4672%" y="1167.50"></text></g><g><title>leveldb::MemTable::Add (7 samples, 0.24%)</title><rect x="99.2172%" y="1141" width="0.2383%" height="15" fill="rgb(253,187,31)" fg:x="2915" fg:w="7"/><text x="99.4672%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (6 samples, 0.20%)</title><rect x="99.2512%" y="1125" width="0.2042%" height="15" fill="rgb(222,6,32)" fg:x="2916" fg:w="6"/><text x="99.5012%" y="1135.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (6 samples, 0.20%)</title><rect x="99.2512%" y="1109" width="0.2042%" height="15" fill="rgb(249,190,19)" fg:x="2916" fg:w="6"/><text x="99.5012%" y="1119.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (6 samples, 0.20%)</title><rect x="99.2512%" y="1093" width="0.2042%" height="15" fill="rgb(251,28,20)" fg:x="2916" fg:w="6"/><text x="99.5012%" y="1103.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (5 samples, 0.17%)</title><rect x="99.2852%" y="1077" width="0.1702%" height="15" fill="rgb(210,223,40)" fg:x="2917" fg:w="5"/><text x="99.5352%" y="1087.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.10%)</title><rect x="99.3533%" y="1061" width="0.1021%" height="15" fill="rgb(216,137,22)" fg:x="2919" fg:w="3"/><text x="99.6033%" y="1071.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.03%)</title><rect x="99.4214%" y="1045" width="0.0340%" height="15" fill="rgb(247,39,34)" fg:x="2921" fg:w="1"/><text x="99.6714%" y="1055.50"></text></g><g><title>leveldb::log::Reader::ReadPhysicalRecord (1 samples, 0.03%)</title><rect x="99.4554%" y="1173" width="0.0340%" height="15" fill="rgb(239,43,50)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1183.50"></text></g><g><title>Read (1 samples, 0.03%)</title><rect x="99.4554%" y="1157" width="0.0340%" height="15" fill="rgb(241,212,9)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixSequentialFile::Read (1 samples, 0.03%)</title><rect x="99.4554%" y="1141" width="0.0340%" height="15" fill="rgb(205,8,2)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1151.50"></text></g><g><title>read (1 samples, 0.03%)</title><rect x="99.4554%" y="1125" width="0.0340%" height="15" fill="rgb(217,173,54)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="1109" width="0.0340%" height="15" fill="rgb(208,149,52)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="1093" width="0.0340%" height="15" fill="rgb(239,99,40)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="1077" width="0.0340%" height="15" fill="rgb(233,214,26)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="1061" width="0.0340%" height="15" fill="rgb(231,225,37)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="1045" width="0.0340%" height="15" fill="rgb(252,55,35)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="1029" width="0.0340%" height="15" fill="rgb(239,43,18)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="1013" width="0.0340%" height="15" fill="rgb(251,125,49)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4554%" y="997" width="0.0340%" height="15" fill="rgb(212,83,54)" fg:x="2922" fg:w="1"/><text x="99.7054%" y="1007.50"></text></g><g><title>CompleteChainstateInitialization (11 samples, 0.37%)</title><rect x="99.1491%" y="1301" width="0.3744%" height="15" fill="rgb(250,75,6)" fg:x="2913" fg:w="11"/><text x="99.3991%" y="1311.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (11 samples, 0.37%)</title><rect x="99.1491%" y="1285" width="0.3744%" height="15" fill="rgb(252,36,40)" fg:x="2913" fg:w="11"/><text x="99.3991%" y="1295.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (11 samples, 0.37%)</title><rect x="99.1491%" y="1269" width="0.3744%" height="15" fill="rgb(230,91,51)" fg:x="2913" fg:w="11"/><text x="99.3991%" y="1279.50"></text></g><g><title>CDBWrapper::CDBWrapper (11 samples, 0.37%)</title><rect x="99.1491%" y="1253" width="0.3744%" height="15" fill="rgb(212,92,28)" fg:x="2913" fg:w="11"/><text x="99.3991%" y="1263.50"></text></g><g><title>leveldb::DB::Open (11 samples, 0.37%)</title><rect x="99.1491%" y="1237" width="0.3744%" height="15" fill="rgb(227,13,22)" fg:x="2913" fg:w="11"/><text x="99.3991%" y="1247.50"></text></g><g><title>leveldb::DBImpl::Recover (11 samples, 0.37%)</title><rect x="99.1491%" y="1221" width="0.3744%" height="15" fill="rgb(239,204,32)" fg:x="2913" fg:w="11"/><text x="99.3991%" y="1231.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (11 samples, 0.37%)</title><rect x="99.1491%" y="1205" width="0.3744%" height="15" fill="rgb(228,49,41)" fg:x="2913" fg:w="11"/><text x="99.3991%" y="1215.50"></text></g><g><title>leveldb::log::Reader::ReadRecord (2 samples, 0.07%)</title><rect x="99.4554%" y="1189" width="0.0681%" height="15" fill="rgb(206,95,6)" fg:x="2922" fg:w="2"/><text x="99.7054%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.03%)</title><rect x="99.4894%" y="1173" width="0.0340%" height="15" fill="rgb(251,20,14)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1183.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.03%)</title><rect x="99.4894%" y="1157" width="0.0340%" height="15" fill="rgb(214,99,28)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1167.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="99.4894%" y="1141" width="0.0340%" height="15" fill="rgb(239,122,54)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1151.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.03%)</title><rect x="99.4894%" y="1125" width="0.0340%" height="15" fill="rgb(218,217,46)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1135.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.03%)</title><rect x="99.4894%" y="1109" width="0.0340%" height="15" fill="rgb(249,106,28)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1119.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.03%)</title><rect x="99.4894%" y="1093" width="0.0340%" height="15" fill="rgb(250,158,18)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4894%" y="1077" width="0.0340%" height="15" fill="rgb(226,137,29)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4894%" y="1061" width="0.0340%" height="15" fill="rgb(210,188,1)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4894%" y="1045" width="0.0340%" height="15" fill="rgb(227,84,42)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4894%" y="1029" width="0.0340%" height="15" fill="rgb(222,147,48)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.4894%" y="1013" width="0.0340%" height="15" fill="rgb(241,150,43)" fg:x="2923" fg:w="1"/><text x="99.7394%" y="1023.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.03%)</title><rect x="99.5235%" y="1237" width="0.0340%" height="15" fill="rgb(206,139,52)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.03%)</title><rect x="99.5235%" y="1221" width="0.0340%" height="15" fill="rgb(230,63,14)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1231.50"></text></g><g><title>Next (1 samples, 0.03%)</title><rect x="99.5235%" y="1205" width="0.0340%" height="15" fill="rgb(247,8,20)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.03%)</title><rect x="99.5235%" y="1189" width="0.0340%" height="15" fill="rgb(213,115,4)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1199.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.03%)</title><rect x="99.5235%" y="1173" width="0.0340%" height="15" fill="rgb(241,79,49)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.03%)</title><rect x="99.5235%" y="1157" width="0.0340%" height="15" fill="rgb(222,42,35)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.03%)</title><rect x="99.5235%" y="1141" width="0.0340%" height="15" fill="rgb(247,59,23)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1151.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.03%)</title><rect x="99.5235%" y="1125" width="0.0340%" height="15" fill="rgb(247,93,18)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1135.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.03%)</title><rect x="99.5235%" y="1109" width="0.0340%" height="15" fill="rgb(249,107,47)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1119.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="99.5235%" y="1093" width="0.0340%" height="15" fill="rgb(219,27,1)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1103.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="99.5235%" y="1077" width="0.0340%" height="15" fill="rgb(217,82,32)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1087.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="99.5235%" y="1061" width="0.0340%" height="15" fill="rgb(250,129,47)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="1045" width="0.0340%" height="15" fill="rgb(253,88,35)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="1029" width="0.0340%" height="15" fill="rgb(245,221,14)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="1013" width="0.0340%" height="15" fill="rgb(217,119,54)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="997" width="0.0340%" height="15" fill="rgb(247,128,31)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="981" width="0.0340%" height="15" fill="rgb(211,99,22)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="965" width="0.0340%" height="15" fill="rgb(212,20,17)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="949" width="0.0340%" height="15" fill="rgb(209,159,29)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="933" width="0.0340%" height="15" fill="rgb(222,177,53)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="917" width="0.0340%" height="15" fill="rgb(234,46,43)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="901" width="0.0340%" height="15" fill="rgb(208,108,14)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.5235%" y="885" width="0.0340%" height="15" fill="rgb(226,78,53)" fg:x="2924" fg:w="1"/><text x="99.7735%" y="895.50"></text></g><g><title>main (13 samples, 0.44%)</title><rect x="99.1491%" y="1413" width="0.4425%" height="15" fill="rgb(230,20,41)" fg:x="2913" fg:w="13"/><text x="99.3991%" y="1423.50"></text></g><g><title>main (13 samples, 0.44%)</title><rect x="99.1491%" y="1397" width="0.4425%" height="15" fill="rgb(213,195,35)" fg:x="2913" fg:w="13"/><text x="99.3991%" y="1407.50"></text></g><g><title>AppInitMain (13 samples, 0.44%)</title><rect x="99.1491%" y="1381" width="0.4425%" height="15" fill="rgb(242,62,36)" fg:x="2913" fg:w="13"/><text x="99.3991%" y="1391.50"></text></g><g><title>InitAndLoadChainstate (13 samples, 0.44%)</title><rect x="99.1491%" y="1365" width="0.4425%" height="15" fill="rgb(222,210,37)" fg:x="2913" fg:w="13"/><text x="99.3991%" y="1375.50"></text></g><g><title>operator (13 samples, 0.44%)</title><rect x="99.1491%" y="1349" width="0.4425%" height="15" fill="rgb(232,107,19)" fg:x="2913" fg:w="13"/><text x="99.3991%" y="1359.50"></text></g><g><title>InitAndLoadChainstate (13 samples, 0.44%)</title><rect x="99.1491%" y="1333" width="0.4425%" height="15" fill="rgb(235,85,17)" fg:x="2913" fg:w="13"/><text x="99.3991%" y="1343.50"></text></g><g><title>node::LoadChainstate (13 samples, 0.44%)</title><rect x="99.1491%" y="1317" width="0.4425%" height="15" fill="rgb(219,195,31)" fg:x="2913" fg:w="13"/><text x="99.3991%" y="1327.50"></text></g><g><title>node::CompleteChainstateInitialization (2 samples, 0.07%)</title><rect x="99.5235%" y="1301" width="0.0681%" height="15" fill="rgb(231,183,30)" fg:x="2924" fg:w="2"/><text x="99.7735%" y="1311.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (2 samples, 0.07%)</title><rect x="99.5235%" y="1285" width="0.0681%" height="15" fill="rgb(212,0,11)" fg:x="2924" fg:w="2"/><text x="99.7735%" y="1295.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (2 samples, 0.07%)</title><rect x="99.5235%" y="1269" width="0.0681%" height="15" fill="rgb(249,53,54)" fg:x="2924" fg:w="2"/><text x="99.7735%" y="1279.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (2 samples, 0.07%)</title><rect x="99.5235%" y="1253" width="0.0681%" height="15" fill="rgb(211,118,13)" fg:x="2924" fg:w="2"/><text x="99.7735%" y="1263.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1237" width="0.0340%" height="15" fill="rgb(237,42,9)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1247.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1221" width="0.0340%" height="15" fill="rgb(227,68,32)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1205" width="0.0340%" height="15" fill="rgb(238,10,7)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1189" width="0.0340%" height="15" fill="rgb(224,42,12)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1173" width="0.0340%" height="15" fill="rgb(252,190,5)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1157" width="0.0340%" height="15" fill="rgb(220,214,39)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1167.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1141" width="0.0340%" height="15" fill="rgb(247,98,4)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1151.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1125" width="0.0340%" height="15" fill="rgb(211,60,12)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1135.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1109" width="0.0340%" height="15" fill="rgb(224,42,10)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1119.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1093" width="0.0340%" height="15" fill="rgb(217,167,4)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1077" width="0.0340%" height="15" fill="rgb(253,18,17)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1087.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5575%" y="1061" width="0.0340%" height="15" fill="rgb(249,186,44)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1071.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.03%)</title><rect x="99.5575%" y="1045" width="0.0340%" height="15" fill="rgb(254,124,54)" fg:x="2925" fg:w="1"/><text x="99.8075%" y="1055.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.03%)</title><rect x="99.5916%" y="1413" width="0.0340%" height="15" fill="rgb(220,124,39)" fg:x="2926" fg:w="1"/><text x="99.8416%" y="1423.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="99.6256%" y="1413" width="0.0340%" height="15" fill="rgb(225,96,46)" fg:x="2927" fg:w="1"/><text x="99.8756%" y="1423.50"></text></g><g><title>bitcoind-base (328 samples, 11.16%)</title><rect x="88.5296%" y="1429" width="11.1641%" height="15" fill="rgb(221,106,12)" fg:x="2601" fg:w="328"/><text x="88.7796%" y="1439.50">bitcoind-base</text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.03%)</title><rect x="99.6596%" y="1413" width="0.0340%" height="15" fill="rgb(227,133,23)" fg:x="2928" fg:w="1"/><text x="99.9096%" y="1423.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.03%)</title><rect x="99.6596%" y="1397" width="0.0340%" height="15" fill="rgb(216,44,52)" fg:x="2928" fg:w="1"/><text x="99.9096%" y="1407.50"></text></g><g><title>perf-exec (4 samples, 0.14%)</title><rect x="99.6937%" y="1429" width="0.1361%" height="15" fill="rgb(239,149,7)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1413" width="0.1361%" height="15" fill="rgb(211,157,31)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1397" width="0.1361%" height="15" fill="rgb(206,215,22)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1381" width="0.1361%" height="15" fill="rgb(208,113,15)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1365" width="0.1361%" height="15" fill="rgb(207,189,15)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1349" width="0.1361%" height="15" fill="rgb(231,115,4)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1333" width="0.1361%" height="15" fill="rgb(253,117,2)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1317" width="0.1361%" height="15" fill="rgb(248,48,24)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.6937%" y="1301" width="0.1361%" height="15" fill="rgb(241,28,46)" fg:x="2929" fg:w="4"/><text x="99.9437%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1285" width="0.1021%" height="15" fill="rgb(216,165,52)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1269" width="0.1021%" height="15" fill="rgb(220,222,34)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1253" width="0.1021%" height="15" fill="rgb(247,222,49)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1237" width="0.1021%" height="15" fill="rgb(240,10,31)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1221" width="0.1021%" height="15" fill="rgb(221,199,35)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1205" width="0.1021%" height="15" fill="rgb(230,223,11)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1189" width="0.1021%" height="15" fill="rgb(218,82,45)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.7277%" y="1173" width="0.1021%" height="15" fill="rgb(233,213,33)" fg:x="2930" fg:w="3"/><text x="99.9777%" y="1183.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4 samples, 0.14%)</title><rect x="99.8298%" y="1397" width="0.1361%" height="15" fill="rgb(210,143,52)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1407.50"></text></g><g><title>__libc_start_call_main (4 samples, 0.14%)</title><rect x="99.8298%" y="1381" width="0.1361%" height="15" fill="rgb(206,95,4)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1391.50"></text></g><g><title>main (4 samples, 0.14%)</title><rect x="99.8298%" y="1365" width="0.1361%" height="15" fill="rgb(246,164,46)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1375.50"></text></g><g><title>do_taskset (4 samples, 0.14%)</title><rect x="99.8298%" y="1349" width="0.1361%" height="15" fill="rgb(213,210,47)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1359.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (4 samples, 0.14%)</title><rect x="99.8298%" y="1333" width="0.1361%" height="15" fill="rgb(210,12,38)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1317" width="0.1361%" height="15" fill="rgb(252,192,54)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1301" width="0.1361%" height="15" fill="rgb(242,92,6)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1285" width="0.1361%" height="15" fill="rgb(253,154,15)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1269" width="0.1361%" height="15" fill="rgb(209,20,43)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1253" width="0.1361%" height="15" fill="rgb(232,28,49)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1237" width="0.1361%" height="15" fill="rgb(248,131,53)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1221" width="0.1361%" height="15" fill="rgb(214,16,30)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.14%)</title><rect x="99.8298%" y="1205" width="0.1361%" height="15" fill="rgb(245,16,0)" fg:x="2933" fg:w="4"/><text x="100.0798%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1189" width="0.1021%" height="15" fill="rgb(245,17,35)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1173" width="0.1021%" height="15" fill="rgb(249,27,53)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1157" width="0.1021%" height="15" fill="rgb(214,73,24)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1141" width="0.1021%" height="15" fill="rgb(223,84,37)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1125" width="0.1021%" height="15" fill="rgb(210,109,28)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1109" width="0.1021%" height="15" fill="rgb(208,186,6)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1093" width="0.1021%" height="15" fill="rgb(235,201,30)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1077" width="0.1021%" height="15" fill="rgb(216,198,48)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1061" width="0.1021%" height="15" fill="rgb(254,186,25)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1045" width="0.1021%" height="15" fill="rgb(227,87,5)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1029" width="0.1021%" height="15" fill="rgb(236,205,25)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.8639%" y="1013" width="0.1021%" height="15" fill="rgb(229,99,32)" fg:x="2934" fg:w="3"/><text x="100.1139%" y="1023.50"></text></g><g><title>all (2,938 samples, 100%)</title><rect x="0.0000%" y="1445" width="100.0000%" height="15" fill="rgb(231,177,31)" fg:x="0" fg:w="2938"/><text x="0.2500%" y="1455.50"></text></g><g><title>taskset (5 samples, 0.17%)</title><rect x="99.8298%" y="1429" width="0.1702%" height="15" fill="rgb(246,15,2)" fg:x="2933" fg:w="5"/><text x="100.0798%" y="1439.50"></text></g><g><title>_start (5 samples, 0.17%)</title><rect x="99.8298%" y="1413" width="0.1702%" height="15" fill="rgb(207,39,15)" fg:x="2933" fg:w="5"/><text x="100.0798%" y="1423.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="99.9660%" y="1397" width="0.0340%" height="15" fill="rgb(207,44,9)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1407.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="99.9660%" y="1381" width="0.0340%" height="15" fill="rgb(225,224,33)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1391.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.9660%" y="1365" width="0.0340%" height="15" fill="rgb(252,151,3)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1375.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.9660%" y="1349" width="0.0340%" height="15" fill="rgb(211,140,13)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1359.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.03%)</title><rect x="99.9660%" y="1333" width="0.0340%" height="15" fill="rgb(239,225,17)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1343.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.03%)</title><rect x="99.9660%" y="1317" width="0.0340%" height="15" fill="rgb(223,170,52)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1327.50"></text></g><g><title>elf_machine_rela (1 samples, 0.03%)</title><rect x="99.9660%" y="1301" width="0.0340%" height="15" fill="rgb(212,64,21)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1311.50"></text></g><g><title>resolve_map (1 samples, 0.03%)</title><rect x="99.9660%" y="1285" width="0.0340%" height="15" fill="rgb(236,126,48)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1269" width="0.0340%" height="15" fill="rgb(209,135,11)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1253" width="0.0340%" height="15" fill="rgb(228,126,40)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1237" width="0.0340%" height="15" fill="rgb(205,196,36)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1221" width="0.0340%" height="15" fill="rgb(243,160,33)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1205" width="0.0340%" height="15" fill="rgb(210,84,20)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1189" width="0.0340%" height="15" fill="rgb(228,213,30)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1173" width="0.0340%" height="15" fill="rgb(252,33,45)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9660%" y="1157" width="0.0340%" height="15" fill="rgb(254,227,20)" fg:x="2937" fg:w="1"/><text x="100.2160%" y="1167.50"></text></g></svg></svg>