<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1590" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1573.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1573.00"> </text><svg id="frames" x="10" width="1180" total_samples="5669"><g><title>b-addcon (4 samples, 0.07%)</title><rect x="0.0000%" y="1525" width="0.0706%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="0.0000%" y="1509" width="0.0706%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="0.0000%" y="1493" width="0.0706%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="0.0000%" y="1477" width="0.0706%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1487.50"></text></g><g><title>_M_run (4 samples, 0.07%)</title><rect x="0.0000%" y="1461" width="0.0706%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1471.50"></text></g><g><title>operator (4 samples, 0.07%)</title><rect x="0.0000%" y="1445" width="0.0706%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1429" width="0.0706%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1413" width="0.0706%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#3}&gt; &gt; &gt;::_M_run (4 samples, 0.07%)</title><rect x="0.0000%" y="1397" width="0.0706%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1407.50"></text></g><g><title>util::TraceThread (4 samples, 0.07%)</title><rect x="0.0000%" y="1381" width="0.0706%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (4 samples, 0.07%)</title><rect x="0.0000%" y="1365" width="0.0706%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1375.50"></text></g><g><title>CConnman::ThreadOpenAddedConnections (4 samples, 0.07%)</title><rect x="0.0000%" y="1349" width="0.0706%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1359.50"></text></g><g><title>CThreadInterrupt::sleep_for (4 samples, 0.07%)</title><rect x="0.0000%" y="1333" width="0.0706%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1343.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1317" width="0.0706%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1327.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1301" width="0.0706%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1285" width="0.0706%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="0.0000%" y="1269" width="0.0706%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1279.50"></text></g><g><title>std::__condvar::wait_until (4 samples, 0.07%)</title><rect x="0.0000%" y="1253" width="0.0706%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1263.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (4 samples, 0.07%)</title><rect x="0.0000%" y="1237" width="0.0706%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1247.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="0.0000%" y="1221" width="0.0706%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1205" width="0.0706%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1189" width="0.0706%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1173" width="0.0706%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1157" width="0.0706%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1141" width="0.0706%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1125" width="0.0706%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1109" width="0.0706%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1093" width="0.0706%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0000%" y="1077" width="0.0706%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0176%" y="1061" width="0.0529%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="3"/><text x="0.2676%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0176%" y="1045" width="0.0529%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="3"/><text x="0.2676%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0176%" y="1029" width="0.0529%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="3"/><text x="0.2676%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0176%" y="1013" width="0.0529%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="3"/><text x="0.2676%" y="1023.50"></text></g><g><title>b-httpworker.0 (4 samples, 0.07%)</title><rect x="0.0706%" y="1525" width="0.0706%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="0.0706%" y="1509" width="0.0706%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="0.0706%" y="1493" width="0.0706%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="0.0706%" y="1477" width="0.0706%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1487.50"></text></g><g><title>HTTPWorkQueueRun (4 samples, 0.07%)</title><rect x="0.0706%" y="1461" width="0.0706%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1471.50"></text></g><g><title>WorkQueue&lt;HTTPClosure&gt;::Run (4 samples, 0.07%)</title><rect x="0.0706%" y="1445" width="0.0706%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1455.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="0.0706%" y="1429" width="0.0706%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1439.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="0.0706%" y="1413" width="0.0706%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1397" width="0.0706%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1381" width="0.0706%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1365" width="0.0706%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1349" width="0.0706%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1333" width="0.0706%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1317" width="0.0706%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1301" width="0.0706%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1285" width="0.0706%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1269" width="0.0706%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1253" width="0.0706%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1237" width="0.0706%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.0706%" y="1221" width="0.0706%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="4"/><text x="0.3206%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0882%" y="1205" width="0.0529%" height="15" fill="rgb(231,138,38)" fg:x="5" fg:w="3"/><text x="0.3382%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0882%" y="1189" width="0.0529%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="3"/><text x="0.3382%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0882%" y="1173" width="0.0529%" height="15" fill="rgb(251,118,11)" fg:x="5" fg:w="3"/><text x="0.3382%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="0.0882%" y="1157" width="0.0529%" height="15" fill="rgb(217,147,25)" fg:x="5" fg:w="3"/><text x="0.3382%" y="1167.50"></text></g><g><title>b-httpworker.1 (4 samples, 0.07%)</title><rect x="0.1411%" y="1525" width="0.0706%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="0.1411%" y="1509" width="0.0706%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="0.1411%" y="1493" width="0.0706%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="0.1411%" y="1477" width="0.0706%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1487.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="0.1411%" y="1461" width="0.0706%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1471.50"></text></g><g><title>tcache_init.part.0 (4 samples, 0.07%)</title><rect x="0.1411%" y="1445" width="0.0706%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1455.50"></text></g><g><title>arena_get2 (4 samples, 0.07%)</title><rect x="0.1411%" y="1429" width="0.0706%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1439.50"></text></g><g><title>alloc_new_heap (4 samples, 0.07%)</title><rect x="0.1411%" y="1413" width="0.0706%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1397" width="0.0706%" height="15" fill="rgb(247,98,35)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1381" width="0.0706%" height="15" fill="rgb(247,138,52)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1365" width="0.0706%" height="15" fill="rgb(213,79,30)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1349" width="0.0706%" height="15" fill="rgb(246,177,23)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1333" width="0.0706%" height="15" fill="rgb(230,62,27)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1317" width="0.0706%" height="15" fill="rgb(216,154,8)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1301" width="0.0706%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1285" width="0.0706%" height="15" fill="rgb(251,115,12)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1269" width="0.0706%" height="15" fill="rgb(240,54,50)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1253" width="0.0706%" height="15" fill="rgb(233,84,52)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1237" width="0.0706%" height="15" fill="rgb(207,117,47)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1221" width="0.0706%" height="15" fill="rgb(249,43,39)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1205" width="0.0706%" height="15" fill="rgb(209,38,44)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1189" width="0.0706%" height="15" fill="rgb(236,212,23)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="0.1411%" y="1173" width="0.0706%" height="15" fill="rgb(242,79,21)" fg:x="8" fg:w="4"/><text x="0.3911%" y="1183.50"></text></g><g><title>AddCoins (2 samples, 0.04%)</title><rect x="0.2117%" y="1509" width="0.0353%" height="15" fill="rgb(211,96,35)" fg:x="12" fg:w="2"/><text x="0.4617%" y="1519.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="0.2117%" y="1493" width="0.0353%" height="15" fill="rgb(253,215,40)" fg:x="12" fg:w="2"/><text x="0.4617%" y="1503.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="0.2117%" y="1477" width="0.0353%" height="15" fill="rgb(211,81,21)" fg:x="12" fg:w="2"/><text x="0.4617%" y="1487.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="0.2117%" y="1461" width="0.0353%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="2"/><text x="0.4617%" y="1471.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="0.2117%" y="1445" width="0.0353%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="2"/><text x="0.4617%" y="1455.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (2 samples, 0.04%)</title><rect x="0.2117%" y="1429" width="0.0353%" height="15" fill="rgb(237,122,38)" fg:x="12" fg:w="2"/><text x="0.4617%" y="1439.50"></text></g><g><title>Span&lt;std::byte const&gt;::Span&lt;std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="0.9702%" y="1493" width="0.0176%" height="15" fill="rgb(244,218,35)" fg:x="55" fg:w="1"/><text x="1.2202%" y="1503.50"></text></g><g><title>std::vector&lt;std::byte, std::allocator&lt;std::byte&gt; &gt;::data (1 samples, 0.02%)</title><rect x="0.9702%" y="1477" width="0.0176%" height="15" fill="rgb(240,68,47)" fg:x="55" fg:w="1"/><text x="1.2202%" y="1487.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="0.9878%" y="1493" width="0.0176%" height="15" fill="rgb(210,16,53)" fg:x="56" fg:w="1"/><text x="1.2378%" y="1503.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (23 samples, 0.41%)</title><rect x="1.0055%" y="1493" width="0.4057%" height="15" fill="rgb(235,124,12)" fg:x="57" fg:w="23"/><text x="1.2555%" y="1503.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (23 samples, 0.41%)</title><rect x="1.0055%" y="1477" width="0.4057%" height="15" fill="rgb(224,169,11)" fg:x="57" fg:w="23"/><text x="1.2555%" y="1487.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (23 samples, 0.41%)</title><rect x="1.0055%" y="1461" width="0.4057%" height="15" fill="rgb(250,166,2)" fg:x="57" fg:w="23"/><text x="1.2555%" y="1471.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (23 samples, 0.41%)</title><rect x="1.0055%" y="1445" width="0.4057%" height="15" fill="rgb(242,216,29)" fg:x="57" fg:w="23"/><text x="1.2555%" y="1455.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (23 samples, 0.41%)</title><rect x="1.0055%" y="1429" width="0.4057%" height="15" fill="rgb(230,116,27)" fg:x="57" fg:w="23"/><text x="1.2555%" y="1439.50"></text></g><g><title>void std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;std::byte, std::byte const&gt; (8 samples, 0.14%)</title><rect x="1.2701%" y="1413" width="0.1411%" height="15" fill="rgb(228,99,48)" fg:x="72" fg:w="8"/><text x="1.5201%" y="1423.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="1.4112%" y="1493" width="0.0176%" height="15" fill="rgb(253,11,6)" fg:x="80" fg:w="1"/><text x="1.6612%" y="1503.50"></text></g><g><title>AutoFile::write (160 samples, 2.82%)</title><rect x="0.2470%" y="1509" width="2.8224%" height="15" fill="rgb(247,143,39)" fg:x="14" fg:w="160"/><text x="0.4970%" y="1519.50">Au..</text></g><g><title>util::Xor (93 samples, 1.64%)</title><rect x="1.4288%" y="1493" width="1.6405%" height="15" fill="rgb(236,97,10)" fg:x="81" fg:w="93"/><text x="1.6788%" y="1503.50"></text></g><g><title>std::operator^= (28 samples, 0.49%)</title><rect x="2.5754%" y="1477" width="0.4939%" height="15" fill="rgb(233,208,19)" fg:x="146" fg:w="28"/><text x="2.8254%" y="1487.50"></text></g><g><title>std::operator^ (28 samples, 0.49%)</title><rect x="2.5754%" y="1461" width="0.4939%" height="15" fill="rgb(216,164,2)" fg:x="146" fg:w="28"/><text x="2.8254%" y="1471.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (1 samples, 0.02%)</title><rect x="3.0693%" y="1493" width="0.0176%" height="15" fill="rgb(220,129,5)" fg:x="174" fg:w="1"/><text x="3.3193%" y="1503.50"></text></g><g><title>CCoinsViewCache::AddCoin (2 samples, 0.04%)</title><rect x="3.0693%" y="1509" width="0.0353%" height="15" fill="rgb(242,17,10)" fg:x="174" fg:w="2"/><text x="3.3193%" y="1519.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.0870%" y="1493" width="0.0176%" height="15" fill="rgb(242,107,0)" fg:x="175" fg:w="1"/><text x="3.3370%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.0870%" y="1477" width="0.0176%" height="15" fill="rgb(251,28,31)" fg:x="175" fg:w="1"/><text x="3.3370%" y="1487.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="3.0870%" y="1461" width="0.0176%" height="15" fill="rgb(233,223,10)" fg:x="175" fg:w="1"/><text x="3.3370%" y="1471.50"></text></g><g><title>CCoinsViewCache::SpendCoin (1 samples, 0.02%)</title><rect x="3.1046%" y="1509" width="0.0176%" height="15" fill="rgb(215,21,27)" fg:x="176" fg:w="1"/><text x="3.3546%" y="1519.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="3.1046%" y="1493" width="0.0176%" height="15" fill="rgb(232,23,21)" fg:x="176" fg:w="1"/><text x="3.3546%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="3.1046%" y="1477" width="0.0176%" height="15" fill="rgb(244,5,23)" fg:x="176" fg:w="1"/><text x="3.3546%" y="1487.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="3.1222%" y="1509" width="0.0176%" height="15" fill="rgb(226,81,46)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1519.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="3.1222%" y="1493" width="0.0176%" height="15" fill="rgb(247,70,30)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1503.50"></text></g><g><title>std::optional&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~optional (1 samples, 0.02%)</title><rect x="3.1222%" y="1477" width="0.0176%" height="15" fill="rgb(212,68,19)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1487.50"></text></g><g><title>std::_Optional_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false, false&gt;::~_Optional_base (1 samples, 0.02%)</title><rect x="3.1222%" y="1461" width="0.0176%" height="15" fill="rgb(240,187,13)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1471.50"></text></g><g><title>std::_Optional_payload&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false, false, false&gt;::~_Optional_payload (1 samples, 0.02%)</title><rect x="3.1222%" y="1445" width="0.0176%" height="15" fill="rgb(223,113,26)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1455.50"></text></g><g><title>std::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="3.1222%" y="1429" width="0.0176%" height="15" fill="rgb(206,192,2)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1439.50"></text></g><g><title>std::_Optional_payload_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="3.1222%" y="1413" width="0.0176%" height="15" fill="rgb(241,108,4)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1423.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="3.1222%" y="1397" width="0.0176%" height="15" fill="rgb(247,173,49)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="3.1222%" y="1381" width="0.0176%" height="15" fill="rgb(224,114,35)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="3.1222%" y="1365" width="0.0176%" height="15" fill="rgb(245,159,27)" fg:x="177" fg:w="1"/><text x="3.3722%" y="1375.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="3.1575%" y="1493" width="0.0176%" height="15" fill="rgb(245,172,44)" fg:x="179" fg:w="1"/><text x="3.4075%" y="1503.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="3.1399%" y="1509" width="0.0529%" height="15" fill="rgb(236,23,11)" fg:x="178" fg:w="3"/><text x="3.3899%" y="1519.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="3.1752%" y="1493" width="0.0176%" height="15" fill="rgb(205,117,38)" fg:x="180" fg:w="1"/><text x="3.4252%" y="1503.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="3.1752%" y="1477" width="0.0176%" height="15" fill="rgb(237,72,25)" fg:x="180" fg:w="1"/><text x="3.4252%" y="1487.50"></text></g><g><title>CTransaction::CTransaction (1 samples, 0.02%)</title><rect x="3.1928%" y="1509" width="0.0176%" height="15" fill="rgb(244,70,9)" fg:x="181" fg:w="1"/><text x="3.4428%" y="1519.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="3.2104%" y="1509" width="0.0176%" height="15" fill="rgb(217,125,39)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1519.50"></text></g><g><title>CBlockUndo::~CBlockUndo (1 samples, 0.02%)</title><rect x="3.2104%" y="1493" width="0.0176%" height="15" fill="rgb(235,36,10)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1503.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="3.2104%" y="1477" width="0.0176%" height="15" fill="rgb(251,123,47)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1487.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1461" width="0.0176%" height="15" fill="rgb(221,13,13)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1471.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1445" width="0.0176%" height="15" fill="rgb(238,131,9)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1455.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1429" width="0.0176%" height="15" fill="rgb(211,50,8)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1413" width="0.0176%" height="15" fill="rgb(245,182,24)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1423.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1397" width="0.0176%" height="15" fill="rgb(242,14,37)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1407.50"></text></g><g><title>CTxUndo::~CTxUndo (1 samples, 0.02%)</title><rect x="3.2104%" y="1381" width="0.0176%" height="15" fill="rgb(246,228,12)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1391.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="3.2104%" y="1365" width="0.0176%" height="15" fill="rgb(213,55,15)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1375.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1349" width="0.0176%" height="15" fill="rgb(209,9,3)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1359.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1333" width="0.0176%" height="15" fill="rgb(230,59,30)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1343.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (1 samples, 0.02%)</title><rect x="3.2104%" y="1317" width="0.0176%" height="15" fill="rgb(209,121,21)" fg:x="182" fg:w="1"/><text x="3.4604%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="773" width="0.0176%" height="15" fill="rgb(220,109,13)" fg:x="190" fg:w="1"/><text x="3.6016%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="757" width="0.0176%" height="15" fill="rgb(232,18,1)" fg:x="190" fg:w="1"/><text x="3.6016%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="741" width="0.0176%" height="15" fill="rgb(215,41,42)" fg:x="190" fg:w="1"/><text x="3.6016%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="725" width="0.0176%" height="15" fill="rgb(224,123,36)" fg:x="190" fg:w="1"/><text x="3.6016%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="709" width="0.0176%" height="15" fill="rgb(240,125,3)" fg:x="190" fg:w="1"/><text x="3.6016%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="693" width="0.0176%" height="15" fill="rgb(205,98,50)" fg:x="190" fg:w="1"/><text x="3.6016%" y="703.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="3.3516%" y="677" width="0.0176%" height="15" fill="rgb(205,185,37)" fg:x="190" fg:w="1"/><text x="3.6016%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="661" width="0.0176%" height="15" fill="rgb(238,207,15)" fg:x="190" fg:w="1"/><text x="3.6016%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3516%" y="645" width="0.0176%" height="15" fill="rgb(213,199,42)" fg:x="190" fg:w="1"/><text x="3.6016%" y="655.50"></text></g><g><title>_IO_fwrite (10 samples, 0.18%)</title><rect x="3.2281%" y="789" width="0.1764%" height="15" fill="rgb(235,201,11)" fg:x="183" fg:w="10"/><text x="3.4781%" y="799.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="3.3692%" y="773" width="0.0353%" height="15" fill="rgb(207,46,11)" fg:x="191" fg:w="2"/><text x="3.6192%" y="783.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="3.3692%" y="757" width="0.0353%" height="15" fill="rgb(241,35,35)" fg:x="191" fg:w="2"/><text x="3.6192%" y="767.50"></text></g><g><title>new_do_write (2 samples, 0.04%)</title><rect x="3.3692%" y="741" width="0.0353%" height="15" fill="rgb(243,32,47)" fg:x="191" fg:w="2"/><text x="3.6192%" y="751.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="3.3692%" y="725" width="0.0353%" height="15" fill="rgb(247,202,23)" fg:x="191" fg:w="2"/><text x="3.6192%" y="735.50"></text></g><g><title>__GI___libc_write (2 samples, 0.04%)</title><rect x="3.3692%" y="709" width="0.0353%" height="15" fill="rgb(219,102,11)" fg:x="191" fg:w="2"/><text x="3.6192%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3692%" y="693" width="0.0353%" height="15" fill="rgb(243,110,44)" fg:x="191" fg:w="2"/><text x="3.6192%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3692%" y="677" width="0.0353%" height="15" fill="rgb(222,74,54)" fg:x="191" fg:w="2"/><text x="3.6192%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3692%" y="661" width="0.0353%" height="15" fill="rgb(216,99,12)" fg:x="191" fg:w="2"/><text x="3.6192%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3692%" y="645" width="0.0353%" height="15" fill="rgb(226,22,26)" fg:x="191" fg:w="2"/><text x="3.6192%" y="655.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="3.3692%" y="629" width="0.0353%" height="15" fill="rgb(217,163,10)" fg:x="191" fg:w="2"/><text x="3.6192%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3692%" y="613" width="0.0353%" height="15" fill="rgb(213,25,53)" fg:x="191" fg:w="2"/><text x="3.6192%" y="623.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="3.3692%" y="597" width="0.0353%" height="15" fill="rgb(252,105,26)" fg:x="191" fg:w="2"/><text x="3.6192%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3692%" y="581" width="0.0353%" height="15" fill="rgb(220,39,43)" fg:x="191" fg:w="2"/><text x="3.6192%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.3692%" y="565" width="0.0353%" height="15" fill="rgb(229,68,48)" fg:x="191" fg:w="2"/><text x="3.6192%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3868%" y="549" width="0.0176%" height="15" fill="rgb(252,8,32)" fg:x="192" fg:w="1"/><text x="3.6368%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3868%" y="533" width="0.0176%" height="15" fill="rgb(223,20,43)" fg:x="192" fg:w="1"/><text x="3.6368%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3868%" y="517" width="0.0176%" height="15" fill="rgb(229,81,49)" fg:x="192" fg:w="1"/><text x="3.6368%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.3868%" y="501" width="0.0176%" height="15" fill="rgb(236,28,36)" fg:x="192" fg:w="1"/><text x="3.6368%" y="511.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="949" width="0.1940%" height="15" fill="rgb(249,185,26)" fg:x="183" fg:w="11"/><text x="3.4781%" y="959.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="933" width="0.1940%" height="15" fill="rgb(249,174,33)" fg:x="183" fg:w="11"/><text x="3.4781%" y="943.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="917" width="0.1940%" height="15" fill="rgb(233,201,37)" fg:x="183" fg:w="11"/><text x="3.4781%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (11 samples, 0.19%)</title><rect x="3.2281%" y="901" width="0.1940%" height="15" fill="rgb(221,78,26)" fg:x="183" fg:w="11"/><text x="3.4781%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="885" width="0.1940%" height="15" fill="rgb(250,127,30)" fg:x="183" fg:w="11"/><text x="3.4781%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="869" width="0.1940%" height="15" fill="rgb(230,49,44)" fg:x="183" fg:w="11"/><text x="3.4781%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="853" width="0.1940%" height="15" fill="rgb(229,67,23)" fg:x="183" fg:w="11"/><text x="3.4781%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="837" width="0.1940%" height="15" fill="rgb(249,83,47)" fg:x="183" fg:w="11"/><text x="3.4781%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (11 samples, 0.19%)</title><rect x="3.2281%" y="821" width="0.1940%" height="15" fill="rgb(215,43,3)" fg:x="183" fg:w="11"/><text x="3.4781%" y="831.50"></text></g><g><title>AutoFile::write (11 samples, 0.19%)</title><rect x="3.2281%" y="805" width="0.1940%" height="15" fill="rgb(238,154,13)" fg:x="183" fg:w="11"/><text x="3.4781%" y="815.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="3.4045%" y="789" width="0.0176%" height="15" fill="rgb(219,56,2)" fg:x="193" fg:w="1"/><text x="3.6545%" y="799.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="3.4045%" y="773" width="0.0176%" height="15" fill="rgb(233,0,4)" fg:x="193" fg:w="1"/><text x="3.6545%" y="783.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="3.4045%" y="757" width="0.0176%" height="15" fill="rgb(235,30,7)" fg:x="193" fg:w="1"/><text x="3.6545%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="741" width="0.0176%" height="15" fill="rgb(250,79,13)" fg:x="193" fg:w="1"/><text x="3.6545%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="725" width="0.0176%" height="15" fill="rgb(211,146,34)" fg:x="193" fg:w="1"/><text x="3.6545%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="709" width="0.0176%" height="15" fill="rgb(228,22,38)" fg:x="193" fg:w="1"/><text x="3.6545%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="693" width="0.0176%" height="15" fill="rgb(235,168,5)" fg:x="193" fg:w="1"/><text x="3.6545%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="677" width="0.0176%" height="15" fill="rgb(221,155,16)" fg:x="193" fg:w="1"/><text x="3.6545%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="661" width="0.0176%" height="15" fill="rgb(215,215,53)" fg:x="193" fg:w="1"/><text x="3.6545%" y="671.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="3.4045%" y="645" width="0.0176%" height="15" fill="rgb(223,4,10)" fg:x="193" fg:w="1"/><text x="3.6545%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="629" width="0.0176%" height="15" fill="rgb(234,103,6)" fg:x="193" fg:w="1"/><text x="3.6545%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="613" width="0.0176%" height="15" fill="rgb(227,97,0)" fg:x="193" fg:w="1"/><text x="3.6545%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="597" width="0.0176%" height="15" fill="rgb(234,150,53)" fg:x="193" fg:w="1"/><text x="3.6545%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="581" width="0.0176%" height="15" fill="rgb(228,201,54)" fg:x="193" fg:w="1"/><text x="3.6545%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="565" width="0.0176%" height="15" fill="rgb(222,22,37)" fg:x="193" fg:w="1"/><text x="3.6545%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="549" width="0.0176%" height="15" fill="rgb(237,53,32)" fg:x="193" fg:w="1"/><text x="3.6545%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="533" width="0.0176%" height="15" fill="rgb(233,25,53)" fg:x="193" fg:w="1"/><text x="3.6545%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="517" width="0.0176%" height="15" fill="rgb(210,40,34)" fg:x="193" fg:w="1"/><text x="3.6545%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="501" width="0.0176%" height="15" fill="rgb(241,220,44)" fg:x="193" fg:w="1"/><text x="3.6545%" y="511.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="3.4045%" y="485" width="0.0176%" height="15" fill="rgb(235,28,35)" fg:x="193" fg:w="1"/><text x="3.6545%" y="495.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="3.4045%" y="469" width="0.0176%" height="15" fill="rgb(210,56,17)" fg:x="193" fg:w="1"/><text x="3.6545%" y="479.50"></text></g><g><title>[[nft_compat]] (1 samples, 0.02%)</title><rect x="3.4045%" y="453" width="0.0176%" height="15" fill="rgb(224,130,29)" fg:x="193" fg:w="1"/><text x="3.6545%" y="463.50"></text></g><g><title>[[ipt_rpfilter]] (1 samples, 0.02%)</title><rect x="3.4045%" y="437" width="0.0176%" height="15" fill="rgb(235,212,8)" fg:x="193" fg:w="1"/><text x="3.6545%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="421" width="0.0176%" height="15" fill="rgb(223,33,50)" fg:x="193" fg:w="1"/><text x="3.6545%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4045%" y="405" width="0.0176%" height="15" fill="rgb(219,149,13)" fg:x="193" fg:w="1"/><text x="3.6545%" y="415.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="3.4398%" y="645" width="0.0353%" height="15" fill="rgb(250,156,29)" fg:x="195" fg:w="2"/><text x="3.6898%" y="655.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="3.4398%" y="629" width="0.0353%" height="15" fill="rgb(216,193,19)" fg:x="195" fg:w="2"/><text x="3.6898%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.4574%" y="613" width="0.0176%" height="15" fill="rgb(216,135,14)" fg:x="196" fg:w="1"/><text x="3.7074%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4574%" y="597" width="0.0176%" height="15" fill="rgb(241,47,5)" fg:x="196" fg:w="1"/><text x="3.7074%" y="607.50"></text></g><g><title>[[ext4]] (7 samples, 0.12%)</title><rect x="3.4398%" y="693" width="0.1235%" height="15" fill="rgb(233,42,35)" fg:x="195" fg:w="7"/><text x="3.6898%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="3.4398%" y="677" width="0.1235%" height="15" fill="rgb(231,13,6)" fg:x="195" fg:w="7"/><text x="3.6898%" y="687.50"></text></g><g><title>[[ext4]] (7 samples, 0.12%)</title><rect x="3.4398%" y="661" width="0.1235%" height="15" fill="rgb(207,181,40)" fg:x="195" fg:w="7"/><text x="3.6898%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="3.4750%" y="645" width="0.0882%" height="15" fill="rgb(254,173,49)" fg:x="197" fg:w="5"/><text x="3.7250%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="3.4750%" y="629" width="0.0882%" height="15" fill="rgb(221,1,38)" fg:x="197" fg:w="5"/><text x="3.7250%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="3.4927%" y="613" width="0.0706%" height="15" fill="rgb(206,124,46)" fg:x="198" fg:w="4"/><text x="3.7427%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="3.4927%" y="597" width="0.0706%" height="15" fill="rgb(249,21,11)" fg:x="198" fg:w="4"/><text x="3.7427%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.5280%" y="581" width="0.0353%" height="15" fill="rgb(222,201,40)" fg:x="200" fg:w="2"/><text x="3.7780%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.5280%" y="565" width="0.0353%" height="15" fill="rgb(235,61,29)" fg:x="200" fg:w="2"/><text x="3.7780%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="549" width="0.0176%" height="15" fill="rgb(219,207,3)" fg:x="201" fg:w="1"/><text x="3.7956%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="533" width="0.0176%" height="15" fill="rgb(222,56,46)" fg:x="201" fg:w="1"/><text x="3.7956%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="517" width="0.0176%" height="15" fill="rgb(239,76,54)" fg:x="201" fg:w="1"/><text x="3.7956%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="501" width="0.0176%" height="15" fill="rgb(231,124,27)" fg:x="201" fg:w="1"/><text x="3.7956%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="485" width="0.0176%" height="15" fill="rgb(249,195,6)" fg:x="201" fg:w="1"/><text x="3.7956%" y="495.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="3.5456%" y="469" width="0.0176%" height="15" fill="rgb(237,174,47)" fg:x="201" fg:w="1"/><text x="3.7956%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="453" width="0.0176%" height="15" fill="rgb(206,201,31)" fg:x="201" fg:w="1"/><text x="3.7956%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="437" width="0.0176%" height="15" fill="rgb(231,57,52)" fg:x="201" fg:w="1"/><text x="3.7956%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="421" width="0.0176%" height="15" fill="rgb(248,177,22)" fg:x="201" fg:w="1"/><text x="3.7956%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="405" width="0.0176%" height="15" fill="rgb(215,211,37)" fg:x="201" fg:w="1"/><text x="3.7956%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="389" width="0.0176%" height="15" fill="rgb(241,128,51)" fg:x="201" fg:w="1"/><text x="3.7956%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="373" width="0.0176%" height="15" fill="rgb(227,165,31)" fg:x="201" fg:w="1"/><text x="3.7956%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="357" width="0.0176%" height="15" fill="rgb(228,167,24)" fg:x="201" fg:w="1"/><text x="3.7956%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="341" width="0.0176%" height="15" fill="rgb(228,143,12)" fg:x="201" fg:w="1"/><text x="3.7956%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="325" width="0.0176%" height="15" fill="rgb(249,149,8)" fg:x="201" fg:w="1"/><text x="3.7956%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5456%" y="309" width="0.0176%" height="15" fill="rgb(243,35,44)" fg:x="201" fg:w="1"/><text x="3.7956%" y="319.50"></text></g><g><title>[[nf_conntrack]] (1 samples, 0.02%)</title><rect x="3.5456%" y="293" width="0.0176%" height="15" fill="rgb(246,89,9)" fg:x="201" fg:w="1"/><text x="3.7956%" y="303.50"></text></g><g><title>_IO_fwrite (8 samples, 0.14%)</title><rect x="3.4398%" y="853" width="0.1411%" height="15" fill="rgb(233,213,13)" fg:x="195" fg:w="8"/><text x="3.6898%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.14%)</title><rect x="3.4398%" y="837" width="0.1411%" height="15" fill="rgb(233,141,41)" fg:x="195" fg:w="8"/><text x="3.6898%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (8 samples, 0.14%)</title><rect x="3.4398%" y="821" width="0.1411%" height="15" fill="rgb(239,167,4)" fg:x="195" fg:w="8"/><text x="3.6898%" y="831.50"></text></g><g><title>new_do_write (8 samples, 0.14%)</title><rect x="3.4398%" y="805" width="0.1411%" height="15" fill="rgb(209,217,16)" fg:x="195" fg:w="8"/><text x="3.6898%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (8 samples, 0.14%)</title><rect x="3.4398%" y="789" width="0.1411%" height="15" fill="rgb(219,88,35)" fg:x="195" fg:w="8"/><text x="3.6898%" y="799.50"></text></g><g><title>__GI___libc_write (8 samples, 0.14%)</title><rect x="3.4398%" y="773" width="0.1411%" height="15" fill="rgb(220,193,23)" fg:x="195" fg:w="8"/><text x="3.6898%" y="783.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="3.4398%" y="757" width="0.1411%" height="15" fill="rgb(230,90,52)" fg:x="195" fg:w="8"/><text x="3.6898%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="3.4398%" y="741" width="0.1411%" height="15" fill="rgb(252,106,19)" fg:x="195" fg:w="8"/><text x="3.6898%" y="751.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="3.4398%" y="725" width="0.1411%" height="15" fill="rgb(206,74,20)" fg:x="195" fg:w="8"/><text x="3.6898%" y="735.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="3.4398%" y="709" width="0.1411%" height="15" fill="rgb(230,138,44)" fg:x="195" fg:w="8"/><text x="3.6898%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5632%" y="693" width="0.0176%" height="15" fill="rgb(235,182,43)" fg:x="202" fg:w="1"/><text x="3.8132%" y="703.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (10 samples, 0.18%)</title><rect x="3.4221%" y="901" width="0.1764%" height="15" fill="rgb(242,16,51)" fg:x="194" fg:w="10"/><text x="3.6721%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (10 samples, 0.18%)</title><rect x="3.4221%" y="885" width="0.1764%" height="15" fill="rgb(248,9,4)" fg:x="194" fg:w="10"/><text x="3.6721%" y="895.50"></text></g><g><title>AutoFile::write (10 samples, 0.18%)</title><rect x="3.4221%" y="869" width="0.1764%" height="15" fill="rgb(210,31,22)" fg:x="194" fg:w="10"/><text x="3.6721%" y="879.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.5809%" y="853" width="0.0176%" height="15" fill="rgb(239,54,39)" fg:x="203" fg:w="1"/><text x="3.8309%" y="863.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.5809%" y="837" width="0.0176%" height="15" fill="rgb(230,99,41)" fg:x="203" fg:w="1"/><text x="3.8309%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.5809%" y="821" width="0.0176%" height="15" fill="rgb(253,106,12)" fg:x="203" fg:w="1"/><text x="3.8309%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="3.5809%" y="805" width="0.0176%" height="15" fill="rgb(213,46,41)" fg:x="203" fg:w="1"/><text x="3.8309%" y="815.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="3.5809%" y="789" width="0.0176%" height="15" fill="rgb(215,133,35)" fg:x="203" fg:w="1"/><text x="3.8309%" y="799.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.5985%" y="645" width="0.0176%" height="15" fill="rgb(213,28,5)" fg:x="204" fg:w="1"/><text x="3.8485%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5985%" y="629" width="0.0176%" height="15" fill="rgb(215,77,49)" fg:x="204" fg:w="1"/><text x="3.8485%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5985%" y="613" width="0.0176%" height="15" fill="rgb(248,100,22)" fg:x="204" fg:w="1"/><text x="3.8485%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5985%" y="597" width="0.0176%" height="15" fill="rgb(208,67,9)" fg:x="204" fg:w="1"/><text x="3.8485%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5985%" y="581" width="0.0176%" height="15" fill="rgb(219,133,21)" fg:x="204" fg:w="1"/><text x="3.8485%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.5985%" y="565" width="0.0176%" height="15" fill="rgb(246,46,29)" fg:x="204" fg:w="1"/><text x="3.8485%" y="575.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="3.5985%" y="661" width="0.0353%" height="15" fill="rgb(246,185,52)" fg:x="204" fg:w="2"/><text x="3.8485%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6162%" y="645" width="0.0176%" height="15" fill="rgb(252,136,11)" fg:x="205" fg:w="1"/><text x="3.8662%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6162%" y="629" width="0.0176%" height="15" fill="rgb(219,138,53)" fg:x="205" fg:w="1"/><text x="3.8662%" y="639.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char&gt; &gt;(Span&lt;unsigned char&gt; const&amp;) (3 samples, 0.05%)</title><rect x="3.5985%" y="901" width="0.0529%" height="15" fill="rgb(211,51,23)" fg:x="204" fg:w="3"/><text x="3.8485%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char&gt; (3 samples, 0.05%)</title><rect x="3.5985%" y="885" width="0.0529%" height="15" fill="rgb(247,221,28)" fg:x="204" fg:w="3"/><text x="3.8485%" y="895.50"></text></g><g><title>AutoFile::write (3 samples, 0.05%)</title><rect x="3.5985%" y="869" width="0.0529%" height="15" fill="rgb(251,222,45)" fg:x="204" fg:w="3"/><text x="3.8485%" y="879.50"></text></g><g><title>_IO_fwrite (3 samples, 0.05%)</title><rect x="3.5985%" y="853" width="0.0529%" height="15" fill="rgb(217,162,53)" fg:x="204" fg:w="3"/><text x="3.8485%" y="863.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="3.5985%" y="837" width="0.0529%" height="15" fill="rgb(229,93,14)" fg:x="204" fg:w="3"/><text x="3.8485%" y="847.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="3.5985%" y="821" width="0.0529%" height="15" fill="rgb(209,67,49)" fg:x="204" fg:w="3"/><text x="3.8485%" y="831.50"></text></g><g><title>new_do_write (3 samples, 0.05%)</title><rect x="3.5985%" y="805" width="0.0529%" height="15" fill="rgb(213,87,29)" fg:x="204" fg:w="3"/><text x="3.8485%" y="815.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="3.5985%" y="789" width="0.0529%" height="15" fill="rgb(205,151,52)" fg:x="204" fg:w="3"/><text x="3.8485%" y="799.50"></text></g><g><title>__GI___libc_write (3 samples, 0.05%)</title><rect x="3.5985%" y="773" width="0.0529%" height="15" fill="rgb(253,215,39)" fg:x="204" fg:w="3"/><text x="3.8485%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.5985%" y="757" width="0.0529%" height="15" fill="rgb(221,220,41)" fg:x="204" fg:w="3"/><text x="3.8485%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.5985%" y="741" width="0.0529%" height="15" fill="rgb(218,133,21)" fg:x="204" fg:w="3"/><text x="3.8485%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.5985%" y="725" width="0.0529%" height="15" fill="rgb(221,193,43)" fg:x="204" fg:w="3"/><text x="3.8485%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.5985%" y="709" width="0.0529%" height="15" fill="rgb(240,128,52)" fg:x="204" fg:w="3"/><text x="3.8485%" y="719.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="3.5985%" y="693" width="0.0529%" height="15" fill="rgb(253,114,12)" fg:x="204" fg:w="3"/><text x="3.8485%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="3.5985%" y="677" width="0.0529%" height="15" fill="rgb(215,223,47)" fg:x="204" fg:w="3"/><text x="3.8485%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6338%" y="661" width="0.0176%" height="15" fill="rgb(248,225,23)" fg:x="206" fg:w="1"/><text x="3.8838%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.6338%" y="645" width="0.0176%" height="15" fill="rgb(250,108,0)" fg:x="206" fg:w="1"/><text x="3.8838%" y="655.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (26 samples, 0.46%)</title><rect x="3.2281%" y="1045" width="0.4586%" height="15" fill="rgb(228,208,7)" fg:x="183" fg:w="26"/><text x="3.4781%" y="1055.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (26 samples, 0.46%)</title><rect x="3.2281%" y="1029" width="0.4586%" height="15" fill="rgb(244,45,10)" fg:x="183" fg:w="26"/><text x="3.4781%" y="1039.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (26 samples, 0.46%)</title><rect x="3.2281%" y="1013" width="0.4586%" height="15" fill="rgb(207,125,25)" fg:x="183" fg:w="26"/><text x="3.4781%" y="1023.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (26 samples, 0.46%)</title><rect x="3.2281%" y="997" width="0.4586%" height="15" fill="rgb(210,195,18)" fg:x="183" fg:w="26"/><text x="3.4781%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (26 samples, 0.46%)</title><rect x="3.2281%" y="981" width="0.4586%" height="15" fill="rgb(249,80,12)" fg:x="183" fg:w="26"/><text x="3.4781%" y="991.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (26 samples, 0.46%)</title><rect x="3.2281%" y="965" width="0.4586%" height="15" fill="rgb(221,65,9)" fg:x="183" fg:w="26"/><text x="3.4781%" y="975.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (15 samples, 0.26%)</title><rect x="3.4221%" y="949" width="0.2646%" height="15" fill="rgb(235,49,36)" fg:x="194" fg:w="15"/><text x="3.6721%" y="959.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (15 samples, 0.26%)</title><rect x="3.4221%" y="933" width="0.2646%" height="15" fill="rgb(225,32,20)" fg:x="194" fg:w="15"/><text x="3.6721%" y="943.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (15 samples, 0.26%)</title><rect x="3.4221%" y="917" width="0.2646%" height="15" fill="rgb(215,141,46)" fg:x="194" fg:w="15"/><text x="3.6721%" y="927.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (2 samples, 0.04%)</title><rect x="3.6514%" y="901" width="0.0353%" height="15" fill="rgb(250,160,47)" fg:x="207" fg:w="2"/><text x="3.9014%" y="911.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="3.6514%" y="885" width="0.0353%" height="15" fill="rgb(216,222,40)" fg:x="207" fg:w="2"/><text x="3.9014%" y="895.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (2 samples, 0.04%)</title><rect x="3.6514%" y="869" width="0.0353%" height="15" fill="rgb(234,217,39)" fg:x="207" fg:w="2"/><text x="3.9014%" y="879.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (2 samples, 0.04%)</title><rect x="3.6514%" y="853" width="0.0353%" height="15" fill="rgb(207,178,40)" fg:x="207" fg:w="2"/><text x="3.9014%" y="863.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (2 samples, 0.04%)</title><rect x="3.6514%" y="837" width="0.0353%" height="15" fill="rgb(221,136,13)" fg:x="207" fg:w="2"/><text x="3.9014%" y="847.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (2 samples, 0.04%)</title><rect x="3.6514%" y="821" width="0.0353%" height="15" fill="rgb(249,199,10)" fg:x="207" fg:w="2"/><text x="3.9014%" y="831.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="3.6514%" y="805" width="0.0353%" height="15" fill="rgb(249,222,13)" fg:x="207" fg:w="2"/><text x="3.9014%" y="815.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="3.6514%" y="789" width="0.0353%" height="15" fill="rgb(244,185,38)" fg:x="207" fg:w="2"/><text x="3.9014%" y="799.50"></text></g><g><title>AutoFile::write (8 samples, 0.14%)</title><rect x="3.6867%" y="965" width="0.1411%" height="15" fill="rgb(236,202,9)" fg:x="209" fg:w="8"/><text x="3.9367%" y="975.50"></text></g><g><title>_IO_fwrite (8 samples, 0.14%)</title><rect x="3.6867%" y="949" width="0.1411%" height="15" fill="rgb(250,229,37)" fg:x="209" fg:w="8"/><text x="3.9367%" y="959.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (10 samples, 0.18%)</title><rect x="3.6867%" y="1045" width="0.1764%" height="15" fill="rgb(206,174,23)" fg:x="209" fg:w="10"/><text x="3.9367%" y="1055.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (10 samples, 0.18%)</title><rect x="3.6867%" y="1029" width="0.1764%" height="15" fill="rgb(211,33,43)" fg:x="209" fg:w="10"/><text x="3.9367%" y="1039.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (10 samples, 0.18%)</title><rect x="3.6867%" y="1013" width="0.1764%" height="15" fill="rgb(245,58,50)" fg:x="209" fg:w="10"/><text x="3.9367%" y="1023.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned int&gt; (10 samples, 0.18%)</title><rect x="3.6867%" y="997" width="0.1764%" height="15" fill="rgb(244,68,36)" fg:x="209" fg:w="10"/><text x="3.9367%" y="1007.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (10 samples, 0.18%)</title><rect x="3.6867%" y="981" width="0.1764%" height="15" fill="rgb(232,229,15)" fg:x="209" fg:w="10"/><text x="3.9367%" y="991.50"></text></g><g><title>vtable for std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="3.8278%" y="965" width="0.0353%" height="15" fill="rgb(254,30,23)" fg:x="217" fg:w="2"/><text x="4.0778%" y="975.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="3.8278%" y="949" width="0.0353%" height="15" fill="rgb(235,160,14)" fg:x="217" fg:w="2"/><text x="4.0778%" y="959.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (40 samples, 0.71%)</title><rect x="3.2281%" y="1061" width="0.7056%" height="15" fill="rgb(212,155,44)" fg:x="183" fg:w="40"/><text x="3.4781%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="3.8631%" y="1045" width="0.0706%" height="15" fill="rgb(226,2,50)" fg:x="219" fg:w="4"/><text x="4.1131%" y="1055.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="3.8631%" y="1029" width="0.0706%" height="15" fill="rgb(234,177,6)" fg:x="219" fg:w="4"/><text x="4.1131%" y="1039.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="3.8631%" y="1013" width="0.0706%" height="15" fill="rgb(217,24,9)" fg:x="219" fg:w="4"/><text x="4.1131%" y="1023.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="3.8631%" y="997" width="0.0706%" height="15" fill="rgb(220,13,46)" fg:x="219" fg:w="4"/><text x="4.1131%" y="1007.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9160%" y="981" width="0.0176%" height="15" fill="rgb(239,221,27)" fg:x="222" fg:w="1"/><text x="4.1660%" y="991.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9160%" y="965" width="0.0176%" height="15" fill="rgb(222,198,25)" fg:x="222" fg:w="1"/><text x="4.1660%" y="975.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="3.9160%" y="949" width="0.0176%" height="15" fill="rgb(211,99,13)" fg:x="222" fg:w="1"/><text x="4.1660%" y="959.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9160%" y="933" width="0.0176%" height="15" fill="rgb(232,111,31)" fg:x="222" fg:w="1"/><text x="4.1660%" y="943.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="3.9160%" y="917" width="0.0176%" height="15" fill="rgb(245,82,37)" fg:x="222" fg:w="1"/><text x="4.1660%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9160%" y="901" width="0.0176%" height="15" fill="rgb(227,149,46)" fg:x="222" fg:w="1"/><text x="4.1660%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9160%" y="885" width="0.0176%" height="15" fill="rgb(218,36,50)" fg:x="222" fg:w="1"/><text x="4.1660%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9160%" y="869" width="0.0176%" height="15" fill="rgb(226,80,48)" fg:x="222" fg:w="1"/><text x="4.1660%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9160%" y="853" width="0.0176%" height="15" fill="rgb(238,224,15)" fg:x="222" fg:w="1"/><text x="4.1660%" y="863.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.9160%" y="837" width="0.0176%" height="15" fill="rgb(241,136,10)" fg:x="222" fg:w="1"/><text x="4.1660%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9160%" y="821" width="0.0176%" height="15" fill="rgb(208,32,45)" fg:x="222" fg:w="1"/><text x="4.1660%" y="831.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.9160%" y="805" width="0.0176%" height="15" fill="rgb(207,135,9)" fg:x="222" fg:w="1"/><text x="4.1660%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9160%" y="789" width="0.0176%" height="15" fill="rgb(206,86,44)" fg:x="222" fg:w="1"/><text x="4.1660%" y="799.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (41 samples, 0.72%)</title><rect x="3.2281%" y="1509" width="0.7232%" height="15" fill="rgb(245,177,15)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1519.50"></text></g><g><title>Chainstate::ActivateBestChain (41 samples, 0.72%)</title><rect x="3.2281%" y="1493" width="0.7232%" height="15" fill="rgb(206,64,50)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1503.50"></text></g><g><title>Chainstate::ActivateBestChainStep (41 samples, 0.72%)</title><rect x="3.2281%" y="1477" width="0.7232%" height="15" fill="rgb(234,36,40)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1487.50"></text></g><g><title>Chainstate::ConnectTip (41 samples, 0.72%)</title><rect x="3.2281%" y="1461" width="0.7232%" height="15" fill="rgb(213,64,8)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1471.50"></text></g><g><title>Chainstate::ConnectBlock (41 samples, 0.72%)</title><rect x="3.2281%" y="1445" width="0.7232%" height="15" fill="rgb(210,75,36)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1455.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (41 samples, 0.72%)</title><rect x="3.2281%" y="1429" width="0.7232%" height="15" fill="rgb(229,88,21)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1439.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (41 samples, 0.72%)</title><rect x="3.2281%" y="1413" width="0.7232%" height="15" fill="rgb(252,204,47)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1423.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (41 samples, 0.72%)</title><rect x="3.2281%" y="1397" width="0.7232%" height="15" fill="rgb(208,77,27)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1381" width="0.7232%" height="15" fill="rgb(221,76,26)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1391.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1365" width="0.7232%" height="15" fill="rgb(225,139,18)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1375.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1349" width="0.7232%" height="15" fill="rgb(230,137,11)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1359.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1333" width="0.7232%" height="15" fill="rgb(212,28,1)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1343.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1317" width="0.7232%" height="15" fill="rgb(248,164,17)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1327.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1301" width="0.7232%" height="15" fill="rgb(222,171,42)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1311.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1285" width="0.7232%" height="15" fill="rgb(243,84,45)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1295.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1269" width="0.7232%" height="15" fill="rgb(252,49,23)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1279.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1253" width="0.7232%" height="15" fill="rgb(215,19,7)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1263.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1237" width="0.7232%" height="15" fill="rgb(238,81,41)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1247.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1221" width="0.7232%" height="15" fill="rgb(210,199,37)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1205" width="0.7232%" height="15" fill="rgb(244,192,49)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1215.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1189" width="0.7232%" height="15" fill="rgb(226,211,11)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1199.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1173" width="0.7232%" height="15" fill="rgb(236,162,54)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1183.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1157" width="0.7232%" height="15" fill="rgb(220,229,9)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1141" width="0.7232%" height="15" fill="rgb(250,87,22)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1125" width="0.7232%" height="15" fill="rgb(239,43,17)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1109" width="0.7232%" height="15" fill="rgb(231,177,25)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1093" width="0.7232%" height="15" fill="rgb(219,179,1)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (41 samples, 0.72%)</title><rect x="3.2281%" y="1077" width="0.7232%" height="15" fill="rgb(238,219,53)" fg:x="183" fg:w="41"/><text x="3.4781%" y="1087.50"></text></g><g><title>void WriteCompactSize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.9337%" y="1061" width="0.0176%" height="15" fill="rgb(232,167,36)" fg:x="223" fg:w="1"/><text x="4.1837%" y="1071.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="3.9337%" y="1045" width="0.0176%" height="15" fill="rgb(244,19,51)" fg:x="223" fg:w="1"/><text x="4.1837%" y="1055.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="3.9337%" y="1029" width="0.0176%" height="15" fill="rgb(224,6,22)" fg:x="223" fg:w="1"/><text x="4.1837%" y="1039.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="3.9337%" y="1013" width="0.0176%" height="15" fill="rgb(224,145,5)" fg:x="223" fg:w="1"/><text x="4.1837%" y="1023.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9337%" y="997" width="0.0176%" height="15" fill="rgb(234,130,49)" fg:x="223" fg:w="1"/><text x="4.1837%" y="1007.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9337%" y="981" width="0.0176%" height="15" fill="rgb(254,6,2)" fg:x="223" fg:w="1"/><text x="4.1837%" y="991.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="3.9337%" y="965" width="0.0176%" height="15" fill="rgb(208,96,46)" fg:x="223" fg:w="1"/><text x="4.1837%" y="975.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="3.9337%" y="949" width="0.0176%" height="15" fill="rgb(239,3,39)" fg:x="223" fg:w="1"/><text x="4.1837%" y="959.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="3.9337%" y="933" width="0.0176%" height="15" fill="rgb(233,210,1)" fg:x="223" fg:w="1"/><text x="4.1837%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="917" width="0.0176%" height="15" fill="rgb(244,137,37)" fg:x="223" fg:w="1"/><text x="4.1837%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="901" width="0.0176%" height="15" fill="rgb(240,136,2)" fg:x="223" fg:w="1"/><text x="4.1837%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="885" width="0.0176%" height="15" fill="rgb(239,18,37)" fg:x="223" fg:w="1"/><text x="4.1837%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="869" width="0.0176%" height="15" fill="rgb(218,185,22)" fg:x="223" fg:w="1"/><text x="4.1837%" y="879.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.9337%" y="853" width="0.0176%" height="15" fill="rgb(225,218,4)" fg:x="223" fg:w="1"/><text x="4.1837%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="837" width="0.0176%" height="15" fill="rgb(230,182,32)" fg:x="223" fg:w="1"/><text x="4.1837%" y="847.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="3.9337%" y="821" width="0.0176%" height="15" fill="rgb(242,56,43)" fg:x="223" fg:w="1"/><text x="4.1837%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="805" width="0.0176%" height="15" fill="rgb(233,99,24)" fg:x="223" fg:w="1"/><text x="4.1837%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="789" width="0.0176%" height="15" fill="rgb(234,209,42)" fg:x="223" fg:w="1"/><text x="4.1837%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="773" width="0.0176%" height="15" fill="rgb(227,7,12)" fg:x="223" fg:w="1"/><text x="4.1837%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.9337%" y="757" width="0.0176%" height="15" fill="rgb(245,203,43)" fg:x="223" fg:w="1"/><text x="4.1837%" y="767.50"></text></g><g><title>CheckTransaction (2 samples, 0.04%)</title><rect x="3.9513%" y="1509" width="0.0353%" height="15" fill="rgb(238,205,33)" fg:x="224" fg:w="2"/><text x="4.2013%" y="1519.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (1 samples, 0.02%)</title><rect x="3.9690%" y="1493" width="0.0176%" height="15" fill="rgb(231,56,7)" fg:x="225" fg:w="1"/><text x="4.2190%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="3.9690%" y="1477" width="0.0176%" height="15" fill="rgb(244,186,29)" fg:x="225" fg:w="1"/><text x="4.2190%" y="1487.50"></text></g><g><title>CompressAmount (2 samples, 0.04%)</title><rect x="3.9866%" y="1509" width="0.0353%" height="15" fill="rgb(234,111,31)" fg:x="226" fg:w="2"/><text x="4.2366%" y="1519.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="4.0219%" y="1493" width="0.0176%" height="15" fill="rgb(241,149,10)" fg:x="228" fg:w="1"/><text x="4.2719%" y="1503.50"></text></g><g><title>CompressScript (2 samples, 0.04%)</title><rect x="4.0219%" y="1509" width="0.0353%" height="15" fill="rgb(249,206,44)" fg:x="228" fg:w="2"/><text x="4.2719%" y="1519.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="4.0395%" y="1493" width="0.0176%" height="15" fill="rgb(251,153,30)" fg:x="229" fg:w="1"/><text x="4.2895%" y="1503.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="4.0395%" y="1477" width="0.0176%" height="15" fill="rgb(239,152,38)" fg:x="229" fg:w="1"/><text x="4.2895%" y="1487.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="4.0395%" y="1461" width="0.0176%" height="15" fill="rgb(249,139,47)" fg:x="229" fg:w="1"/><text x="4.2895%" y="1471.50"></text></g><g><title>CountWitnessSigOps (2 samples, 0.04%)</title><rect x="4.0572%" y="1509" width="0.0353%" height="15" fill="rgb(244,64,35)" fg:x="230" fg:w="2"/><text x="4.3072%" y="1519.50"></text></g><g><title>_int_malloc (2 samples, 0.04%)</title><rect x="4.0572%" y="1493" width="0.0353%" height="15" fill="rgb(216,46,15)" fg:x="230" fg:w="2"/><text x="4.3072%" y="1503.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="4.0924%" y="1509" width="0.0176%" height="15" fill="rgb(250,74,19)" fg:x="232" fg:w="1"/><text x="4.3424%" y="1519.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="4.0924%" y="1493" width="0.0176%" height="15" fill="rgb(249,42,33)" fg:x="232" fg:w="1"/><text x="4.3424%" y="1503.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="4.1101%" y="1509" width="0.0176%" height="15" fill="rgb(242,149,17)" fg:x="233" fg:w="1"/><text x="4.3601%" y="1519.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="4.1277%" y="1509" width="0.0176%" height="15" fill="rgb(244,29,21)" fg:x="234" fg:w="1"/><text x="4.3777%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="4.1277%" y="1493" width="0.0176%" height="15" fill="rgb(220,130,37)" fg:x="234" fg:w="1"/><text x="4.3777%" y="1503.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="4.1277%" y="1477" width="0.0176%" height="15" fill="rgb(211,67,2)" fg:x="234" fg:w="1"/><text x="4.3777%" y="1487.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.16%)</title><rect x="4.1454%" y="1509" width="0.1588%" height="15" fill="rgb(235,68,52)" fg:x="235" fg:w="9"/><text x="4.3954%" y="1519.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="4.2865%" y="1493" width="0.0176%" height="15" fill="rgb(246,142,3)" fg:x="243" fg:w="1"/><text x="4.5365%" y="1503.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="4.2865%" y="1477" width="0.0176%" height="15" fill="rgb(241,25,7)" fg:x="243" fg:w="1"/><text x="4.5365%" y="1487.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="4.3217%" y="1493" width="0.0176%" height="15" fill="rgb(242,119,39)" fg:x="245" fg:w="1"/><text x="4.5717%" y="1503.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="4.3217%" y="1477" width="0.0176%" height="15" fill="rgb(241,98,45)" fg:x="245" fg:w="1"/><text x="4.5717%" y="1487.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="4.3217%" y="1461" width="0.0176%" height="15" fill="rgb(254,28,30)" fg:x="245" fg:w="1"/><text x="4.5717%" y="1471.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="4.3217%" y="1445" width="0.0176%" height="15" fill="rgb(241,142,54)" fg:x="245" fg:w="1"/><text x="4.5717%" y="1455.50"></text></g><g><title>std::array&lt;unsigned char, 32ul&gt;::end (1 samples, 0.02%)</title><rect x="4.3217%" y="1429" width="0.0176%" height="15" fill="rgb(222,85,15)" fg:x="245" fg:w="1"/><text x="4.5717%" y="1439.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="4.3394%" y="1493" width="0.0176%" height="15" fill="rgb(210,85,47)" fg:x="246" fg:w="1"/><text x="4.5894%" y="1503.50"></text></g><g><title>UpdateCoins (4 samples, 0.07%)</title><rect x="4.3041%" y="1509" width="0.0706%" height="15" fill="rgb(224,206,25)" fg:x="244" fg:w="4"/><text x="4.5541%" y="1519.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="4.3570%" y="1493" width="0.0176%" height="15" fill="rgb(243,201,19)" fg:x="247" fg:w="1"/><text x="4.6070%" y="1503.50"></text></g><g><title>[000216.ldb] (1 samples, 0.02%)</title><rect x="4.3747%" y="1509" width="0.0176%" height="15" fill="rgb(236,59,4)" fg:x="248" fg:w="1"/><text x="4.6247%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="4.3747%" y="1493" width="0.0176%" height="15" fill="rgb(254,179,45)" fg:x="248" fg:w="1"/><text x="4.6247%" y="1503.50"></text></g><g><title>[000270.ldb] (1 samples, 0.02%)</title><rect x="4.3923%" y="1509" width="0.0176%" height="15" fill="rgb(226,14,10)" fg:x="249" fg:w="1"/><text x="4.6423%" y="1519.50"></text></g><g><title>leveldb::crc32c::Extend (1 samples, 0.02%)</title><rect x="4.3923%" y="1493" width="0.0176%" height="15" fill="rgb(244,27,41)" fg:x="249" fg:w="1"/><text x="4.6423%" y="1503.50"></text></g><g><title>leveldb::port::AcceleratedCRC32C (1 samples, 0.02%)</title><rect x="4.3923%" y="1477" width="0.0176%" height="15" fill="rgb(235,35,32)" fg:x="249" fg:w="1"/><text x="4.6423%" y="1487.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="4.4099%" y="1493" width="0.0176%" height="15" fill="rgb(218,68,31)" fg:x="250" fg:w="1"/><text x="4.6599%" y="1503.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="4.4276%" y="1493" width="0.0176%" height="15" fill="rgb(207,120,37)" fg:x="251" fg:w="1"/><text x="4.6776%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="4.4452%" y="1493" width="0.0529%" height="15" fill="rgb(227,98,0)" fg:x="252" fg:w="3"/><text x="4.6952%" y="1503.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="4.4981%" y="1493" width="0.0176%" height="15" fill="rgb(207,7,3)" fg:x="255" fg:w="1"/><text x="4.7481%" y="1503.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="4.5158%" y="1493" width="0.0353%" height="15" fill="rgb(206,98,19)" fg:x="256" fg:w="2"/><text x="4.7658%" y="1503.50"></text></g><g><title>[[heap]] (9 samples, 0.16%)</title><rect x="4.4099%" y="1509" width="0.1588%" height="15" fill="rgb(217,5,26)" fg:x="250" fg:w="9"/><text x="4.6599%" y="1519.50"></text></g><g><title>std::_Rb_tree_decrement (1 samples, 0.02%)</title><rect x="4.5511%" y="1493" width="0.0176%" height="15" fill="rgb(235,190,38)" fg:x="258" fg:w="1"/><text x="4.8011%" y="1503.50"></text></g><g><title>AutoFile::write (7 samples, 0.12%)</title><rect x="4.5687%" y="1493" width="0.1235%" height="15" fill="rgb(247,86,24)" fg:x="259" fg:w="7"/><text x="4.8187%" y="1503.50"></text></g><g><title>CCoinsViewCache::AccessCoin (2 samples, 0.04%)</title><rect x="4.6922%" y="1493" width="0.0353%" height="15" fill="rgb(205,101,16)" fg:x="266" fg:w="2"/><text x="4.9422%" y="1503.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="4.7275%" y="1493" width="0.0176%" height="15" fill="rgb(246,168,33)" fg:x="268" fg:w="1"/><text x="4.9775%" y="1503.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.7275%" y="1477" width="0.0176%" height="15" fill="rgb(231,114,1)" fg:x="268" fg:w="1"/><text x="4.9775%" y="1487.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.7275%" y="1461" width="0.0176%" height="15" fill="rgb(207,184,53)" fg:x="268" fg:w="1"/><text x="4.9775%" y="1471.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.7275%" y="1445" width="0.0176%" height="15" fill="rgb(224,95,51)" fg:x="268" fg:w="1"/><text x="4.9775%" y="1455.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="4.7275%" y="1429" width="0.0176%" height="15" fill="rgb(212,188,45)" fg:x="268" fg:w="1"/><text x="4.9775%" y="1439.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="4.7275%" y="1413" width="0.0176%" height="15" fill="rgb(223,154,38)" fg:x="268" fg:w="1"/><text x="4.9775%" y="1423.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.07%)</title><rect x="4.7451%" y="1493" width="0.0706%" height="15" fill="rgb(251,22,52)" fg:x="269" fg:w="4"/><text x="4.9951%" y="1503.50"></text></g><g><title>CSHA256::Write (20 samples, 0.35%)</title><rect x="4.8157%" y="1493" width="0.3528%" height="15" fill="rgb(229,209,22)" fg:x="273" fg:w="20"/><text x="5.0657%" y="1503.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="5.1685%" y="1493" width="0.0176%" height="15" fill="rgb(234,138,34)" fg:x="293" fg:w="1"/><text x="5.4185%" y="1503.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="5.1861%" y="1493" width="0.0176%" height="15" fill="rgb(212,95,11)" fg:x="294" fg:w="1"/><text x="5.4361%" y="1503.50"></text></g><g><title>CalculateSequenceLocks (1 samples, 0.02%)</title><rect x="5.2037%" y="1493" width="0.0176%" height="15" fill="rgb(240,179,47)" fg:x="295" fg:w="1"/><text x="5.4537%" y="1503.50"></text></g><g><title>CompressAmount (3 samples, 0.05%)</title><rect x="5.2214%" y="1493" width="0.0529%" height="15" fill="rgb(240,163,11)" fg:x="296" fg:w="3"/><text x="5.4714%" y="1503.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="5.2743%" y="1493" width="0.0176%" height="15" fill="rgb(236,37,12)" fg:x="299" fg:w="1"/><text x="5.5243%" y="1503.50"></text></g><g><title>GetScriptOp (6 samples, 0.11%)</title><rect x="5.2919%" y="1493" width="0.1058%" height="15" fill="rgb(232,164,16)" fg:x="300" fg:w="6"/><text x="5.5419%" y="1503.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.12%)</title><rect x="5.3978%" y="1493" width="0.1235%" height="15" fill="rgb(244,205,15)" fg:x="306" fg:w="7"/><text x="5.6478%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (16 samples, 0.28%)</title><rect x="5.5213%" y="1493" width="0.2822%" height="15" fill="rgb(223,117,47)" fg:x="313" fg:w="16"/><text x="5.7713%" y="1503.50"></text></g><g><title>_IO_fwrite (24 samples, 0.42%)</title><rect x="5.8035%" y="1493" width="0.4234%" height="15" fill="rgb(244,107,35)" fg:x="329" fg:w="24"/><text x="6.0535%" y="1503.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (2 samples, 0.04%)</title><rect x="6.2268%" y="1493" width="0.0353%" height="15" fill="rgb(205,140,8)" fg:x="353" fg:w="2"/><text x="6.4768%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (25 samples, 0.44%)</title><rect x="6.2621%" y="1493" width="0.4410%" height="15" fill="rgb(228,84,46)" fg:x="355" fg:w="25"/><text x="6.5121%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (42 samples, 0.74%)</title><rect x="6.7031%" y="1493" width="0.7409%" height="15" fill="rgb(254,188,9)" fg:x="380" fg:w="42"/><text x="6.9531%" y="1503.50"></text></g><g><title>__mempcpy@plt (3 samples, 0.05%)</title><rect x="7.4440%" y="1493" width="0.0529%" height="15" fill="rgb(206,112,54)" fg:x="422" fg:w="3"/><text x="7.6940%" y="1503.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="7.4969%" y="1493" width="0.0176%" height="15" fill="rgb(216,84,49)" fg:x="425" fg:w="1"/><text x="7.7469%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned (2 samples, 0.04%)</title><rect x="7.5146%" y="1493" width="0.0353%" height="15" fill="rgb(214,194,35)" fg:x="426" fg:w="2"/><text x="7.7646%" y="1503.50"></text></g><g><title>_int_free (11 samples, 0.19%)</title><rect x="7.5498%" y="1493" width="0.1940%" height="15" fill="rgb(249,28,3)" fg:x="428" fg:w="11"/><text x="7.7998%" y="1503.50"></text></g><g><title>_int_malloc (25 samples, 0.44%)</title><rect x="7.7439%" y="1493" width="0.4410%" height="15" fill="rgb(222,56,52)" fg:x="439" fg:w="25"/><text x="7.9939%" y="1503.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="8.1849%" y="1493" width="0.0176%" height="15" fill="rgb(245,217,50)" fg:x="464" fg:w="1"/><text x="8.4349%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="8.2025%" y="1493" width="0.0353%" height="15" fill="rgb(213,201,24)" fg:x="465" fg:w="2"/><text x="8.4525%" y="1503.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="8.2378%" y="1493" width="0.0176%" height="15" fill="rgb(248,116,28)" fg:x="467" fg:w="1"/><text x="8.4878%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="8.2554%" y="1493" width="0.0176%" height="15" fill="rgb(219,72,43)" fg:x="468" fg:w="1"/><text x="8.5054%" y="1503.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.02%)</title><rect x="8.2731%" y="1493" width="0.0176%" height="15" fill="rgb(209,138,14)" fg:x="469" fg:w="1"/><text x="8.5231%" y="1503.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="8.2907%" y="1493" width="0.0176%" height="15" fill="rgb(222,18,33)" fg:x="470" fg:w="1"/><text x="8.5407%" y="1503.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="8.3083%" y="1493" width="0.0176%" height="15" fill="rgb(213,199,7)" fg:x="471" fg:w="1"/><text x="8.5583%" y="1503.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.02%)</title><rect x="8.3260%" y="1493" width="0.0176%" height="15" fill="rgb(250,110,10)" fg:x="472" fg:w="1"/><text x="8.5760%" y="1503.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="8.3436%" y="1493" width="0.0176%" height="15" fill="rgb(248,123,6)" fg:x="473" fg:w="1"/><text x="8.5936%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (7 samples, 0.12%)</title><rect x="8.3613%" y="1493" width="0.1235%" height="15" fill="rgb(206,91,31)" fg:x="474" fg:w="7"/><text x="8.6113%" y="1503.50"></text></g><g><title>malloc (8 samples, 0.14%)</title><rect x="8.4847%" y="1493" width="0.1411%" height="15" fill="rgb(211,154,13)" fg:x="481" fg:w="8"/><text x="8.7347%" y="1503.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="8.6082%" y="1477" width="0.0176%" height="15" fill="rgb(225,148,7)" fg:x="488" fg:w="1"/><text x="8.8582%" y="1487.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="8.6259%" y="1493" width="0.0176%" height="15" fill="rgb(220,160,43)" fg:x="489" fg:w="1"/><text x="8.8759%" y="1503.50"></text></g><g><title>memcmp@plt (2 samples, 0.04%)</title><rect x="8.6435%" y="1493" width="0.0353%" height="15" fill="rgb(213,52,39)" fg:x="490" fg:w="2"/><text x="8.8935%" y="1503.50"></text></g><g><title>memcpy@plt (4 samples, 0.07%)</title><rect x="8.6788%" y="1493" width="0.0706%" height="15" fill="rgb(243,137,7)" fg:x="492" fg:w="4"/><text x="8.9288%" y="1503.50"></text></g><g><title>operator delete (2 samples, 0.04%)</title><rect x="8.7493%" y="1493" width="0.0353%" height="15" fill="rgb(230,79,13)" fg:x="496" fg:w="2"/><text x="8.9993%" y="1503.50"></text></g><g><title>operator new (4 samples, 0.07%)</title><rect x="8.7846%" y="1493" width="0.0706%" height="15" fill="rgb(247,105,23)" fg:x="498" fg:w="4"/><text x="9.0346%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="8.8552%" y="1493" width="0.0353%" height="15" fill="rgb(223,179,41)" fg:x="502" fg:w="2"/><text x="9.1052%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="8.8905%" y="1493" width="0.0176%" height="15" fill="rgb(218,9,34)" fg:x="504" fg:w="1"/><text x="9.1405%" y="1503.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.02%)</title><rect x="8.9081%" y="1493" width="0.0176%" height="15" fill="rgb(222,106,8)" fg:x="505" fg:w="1"/><text x="9.1581%" y="1503.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="8.9257%" y="1493" width="0.0176%" height="15" fill="rgb(211,220,0)" fg:x="506" fg:w="1"/><text x="9.1757%" y="1503.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.07%)</title><rect x="8.9434%" y="1493" width="0.0706%" height="15" fill="rgb(229,52,16)" fg:x="507" fg:w="4"/><text x="9.1934%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="9.0139%" y="1493" width="0.0176%" height="15" fill="rgb(212,155,18)" fg:x="511" fg:w="1"/><text x="9.2639%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="9.0316%" y="1493" width="0.0176%" height="15" fill="rgb(242,21,14)" fg:x="512" fg:w="1"/><text x="9.2816%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="9.0492%" y="1493" width="0.1058%" height="15" fill="rgb(222,19,48)" fg:x="513" fg:w="6"/><text x="9.2992%" y="1503.50"></text></g><g><title>[anon] (261 samples, 4.60%)</title><rect x="4.5687%" y="1509" width="4.6040%" height="15" fill="rgb(232,45,27)" fg:x="259" fg:w="261"/><text x="4.8187%" y="1519.50">[anon]</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="9.1551%" y="1493" width="0.0176%" height="15" fill="rgb(249,103,42)" fg:x="519" fg:w="1"/><text x="9.4051%" y="1503.50"></text></g><g><title>CCoinsViewCache::HaveInputs (2 samples, 0.04%)</title><rect x="9.1727%" y="1493" width="0.0353%" height="15" fill="rgb(246,81,33)" fg:x="520" fg:w="2"/><text x="9.4227%" y="1503.50"></text></g><g><title>[bitcoind-head] (3 samples, 0.05%)</title><rect x="9.1727%" y="1509" width="0.0529%" height="15" fill="rgb(252,33,42)" fg:x="520" fg:w="3"/><text x="9.4227%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="9.2080%" y="1493" width="0.0176%" height="15" fill="rgb(209,212,41)" fg:x="522" fg:w="1"/><text x="9.4580%" y="1503.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="9.3315%" y="1493" width="0.0706%" height="15" fill="rgb(207,154,6)" fg:x="529" fg:w="4"/><text x="9.5815%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="9.3844%" y="1477" width="0.0176%" height="15" fill="rgb(223,64,47)" fg:x="532" fg:w="1"/><text x="9.6344%" y="1487.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="9.4020%" y="1493" width="0.0176%" height="15" fill="rgb(211,161,38)" fg:x="533" fg:w="1"/><text x="9.6520%" y="1503.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="9.4020%" y="1477" width="0.0176%" height="15" fill="rgb(219,138,40)" fg:x="533" fg:w="1"/><text x="9.6520%" y="1487.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="9.4020%" y="1461" width="0.0176%" height="15" fill="rgb(241,228,46)" fg:x="533" fg:w="1"/><text x="9.6520%" y="1471.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="9.4020%" y="1445" width="0.0176%" height="15" fill="rgb(223,209,38)" fg:x="533" fg:w="1"/><text x="9.6520%" y="1455.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="9.4197%" y="1493" width="0.0176%" height="15" fill="rgb(236,164,45)" fg:x="534" fg:w="1"/><text x="9.6697%" y="1503.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="9.4373%" y="1493" width="0.0176%" height="15" fill="rgb(231,15,5)" fg:x="535" fg:w="1"/><text x="9.6873%" y="1503.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="9.4549%" y="1493" width="0.0176%" height="15" fill="rgb(252,35,15)" fg:x="536" fg:w="1"/><text x="9.7049%" y="1503.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="9.4726%" y="1493" width="0.0353%" height="15" fill="rgb(248,181,18)" fg:x="537" fg:w="2"/><text x="9.7226%" y="1503.50"></text></g><g><title>CScript::IsPayToScriptHash (1 samples, 0.02%)</title><rect x="9.5078%" y="1493" width="0.0176%" height="15" fill="rgb(233,39,42)" fg:x="539" fg:w="1"/><text x="9.7578%" y="1503.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.11%)</title><rect x="9.5255%" y="1493" width="0.1058%" height="15" fill="rgb(238,110,33)" fg:x="540" fg:w="6"/><text x="9.7755%" y="1503.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="9.6313%" y="1493" width="0.1235%" height="15" fill="rgb(233,195,10)" fg:x="546" fg:w="7"/><text x="9.8813%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="9.6842%" y="1477" width="0.0706%" height="15" fill="rgb(254,105,3)" fg:x="549" fg:w="4"/><text x="9.9342%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="9.6842%" y="1461" width="0.0706%" height="15" fill="rgb(221,225,9)" fg:x="549" fg:w="4"/><text x="9.9342%" y="1471.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="9.7019%" y="1445" width="0.0529%" height="15" fill="rgb(224,227,45)" fg:x="550" fg:w="3"/><text x="9.9519%" y="1455.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (8 samples, 0.14%)</title><rect x="9.7548%" y="1493" width="0.1411%" height="15" fill="rgb(229,198,43)" fg:x="553" fg:w="8"/><text x="10.0048%" y="1503.50"></text></g><g><title>_IO_fwrite (19 samples, 0.34%)</title><rect x="9.8959%" y="1493" width="0.3352%" height="15" fill="rgb(206,209,35)" fg:x="561" fg:w="19"/><text x="10.1459%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (8 samples, 0.14%)</title><rect x="10.2311%" y="1493" width="0.1411%" height="15" fill="rgb(245,195,53)" fg:x="580" fg:w="8"/><text x="10.4811%" y="1503.50"></text></g><g><title>__mempcpy@plt (2 samples, 0.04%)</title><rect x="10.3722%" y="1493" width="0.0353%" height="15" fill="rgb(240,92,26)" fg:x="588" fg:w="2"/><text x="10.6222%" y="1503.50"></text></g><g><title>__mempcpy_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="10.4075%" y="1493" width="0.0176%" height="15" fill="rgb(207,40,23)" fg:x="590" fg:w="1"/><text x="10.6575%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned (1 samples, 0.02%)</title><rect x="10.4251%" y="1493" width="0.0176%" height="15" fill="rgb(223,111,35)" fg:x="591" fg:w="1"/><text x="10.6751%" y="1503.50"></text></g><g><title>_int_malloc (21 samples, 0.37%)</title><rect x="10.4428%" y="1493" width="0.3704%" height="15" fill="rgb(229,147,28)" fg:x="592" fg:w="21"/><text x="10.6928%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="10.7956%" y="1477" width="0.0176%" height="15" fill="rgb(211,29,28)" fg:x="612" fg:w="1"/><text x="11.0456%" y="1487.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="10.8132%" y="1493" width="0.0706%" height="15" fill="rgb(228,72,33)" fg:x="613" fg:w="4"/><text x="11.0632%" y="1503.50"></text></g><g><title>free@plt (5 samples, 0.09%)</title><rect x="10.8838%" y="1493" width="0.0882%" height="15" fill="rgb(205,214,31)" fg:x="617" fg:w="5"/><text x="11.1338%" y="1503.50"></text></g><g><title>fwrite@plt (1 samples, 0.02%)</title><rect x="10.9720%" y="1493" width="0.0176%" height="15" fill="rgb(224,111,15)" fg:x="622" fg:w="1"/><text x="11.2220%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="10.9896%" y="1493" width="0.0353%" height="15" fill="rgb(253,21,26)" fg:x="623" fg:w="2"/><text x="11.2396%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="11.0072%" y="1477" width="0.0176%" height="15" fill="rgb(245,139,43)" fg:x="624" fg:w="1"/><text x="11.2572%" y="1487.50"></text></g><g><title>malloc (17 samples, 0.30%)</title><rect x="11.0249%" y="1493" width="0.2999%" height="15" fill="rgb(252,170,7)" fg:x="625" fg:w="17"/><text x="11.2749%" y="1503.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="11.3247%" y="1493" width="0.0176%" height="15" fill="rgb(231,118,14)" fg:x="642" fg:w="1"/><text x="11.5747%" y="1503.50"></text></g><g><title>memcpy@plt (3 samples, 0.05%)</title><rect x="11.3424%" y="1493" width="0.0529%" height="15" fill="rgb(238,83,0)" fg:x="643" fg:w="3"/><text x="11.5924%" y="1503.50"></text></g><g><title>operator new (3 samples, 0.05%)</title><rect x="11.3953%" y="1493" width="0.0529%" height="15" fill="rgb(221,39,39)" fg:x="646" fg:w="3"/><text x="11.6453%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="11.4482%" y="1493" width="0.0176%" height="15" fill="rgb(222,119,46)" fg:x="649" fg:w="1"/><text x="11.6982%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="11.4659%" y="1493" width="0.0176%" height="15" fill="rgb(222,165,49)" fg:x="650" fg:w="1"/><text x="11.7159%" y="1503.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="11.4659%" y="1477" width="0.0176%" height="15" fill="rgb(219,113,52)" fg:x="650" fg:w="1"/><text x="11.7159%" y="1487.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="11.4659%" y="1461" width="0.0176%" height="15" fill="rgb(214,7,15)" fg:x="650" fg:w="1"/><text x="11.7159%" y="1471.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="11.4659%" y="1445" width="0.0176%" height="15" fill="rgb(235,32,4)" fg:x="650" fg:w="1"/><text x="11.7159%" y="1455.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="11.4659%" y="1429" width="0.0176%" height="15" fill="rgb(238,90,54)" fg:x="650" fg:w="1"/><text x="11.7159%" y="1439.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="11.4659%" y="1413" width="0.0176%" height="15" fill="rgb(213,208,19)" fg:x="650" fg:w="1"/><text x="11.7159%" y="1423.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="11.4835%" y="1493" width="0.0353%" height="15" fill="rgb(233,156,4)" fg:x="651" fg:w="2"/><text x="11.7335%" y="1503.50"></text></g><g><title>std::ostream::write (1 samples, 0.02%)</title><rect x="11.5188%" y="1493" width="0.0176%" height="15" fill="rgb(207,194,5)" fg:x="653" fg:w="1"/><text x="11.7688%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="11.5364%" y="1493" width="0.0353%" height="15" fill="rgb(206,111,30)" fg:x="654" fg:w="2"/><text x="11.7864%" y="1503.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="11.5717%" y="1493" width="0.0176%" height="15" fill="rgb(243,70,54)" fg:x="656" fg:w="1"/><text x="11.8217%" y="1503.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="11.5893%" y="1493" width="0.0176%" height="15" fill="rgb(242,28,8)" fg:x="657" fg:w="1"/><text x="11.8393%" y="1503.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="11.6070%" y="1493" width="0.0176%" height="15" fill="rgb(219,106,18)" fg:x="658" fg:w="1"/><text x="11.8570%" y="1503.50"></text></g><g><title>[unknown] (144 samples, 2.54%)</title><rect x="9.2256%" y="1509" width="2.5401%" height="15" fill="rgb(244,222,10)" fg:x="523" fg:w="144"/><text x="9.4756%" y="1519.50">[u..</text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.14%)</title><rect x="11.6246%" y="1493" width="0.1411%" height="15" fill="rgb(236,179,52)" fg:x="659" fg:w="8"/><text x="11.8746%" y="1503.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (9 samples, 0.16%)</title><rect x="11.7657%" y="1509" width="0.1588%" height="15" fill="rgb(213,23,39)" fg:x="667" fg:w="9"/><text x="12.0157%" y="1519.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="11.9245%" y="1509" width="0.0176%" height="15" fill="rgb(238,48,10)" fg:x="676" fg:w="1"/><text x="12.1745%" y="1519.50"></text></g><g><title>CalculateClaimedHeadersWork (1 samples, 0.02%)</title><rect x="11.9421%" y="1333" width="0.0176%" height="15" fill="rgb(251,196,23)" fg:x="677" fg:w="1"/><text x="12.1921%" y="1343.50"></text></g><g><title>GetBlockProof (1 samples, 0.02%)</title><rect x="11.9421%" y="1317" width="0.0176%" height="15" fill="rgb(250,152,24)" fg:x="677" fg:w="1"/><text x="12.1921%" y="1327.50"></text></g><g><title>operator/ (1 samples, 0.02%)</title><rect x="11.9421%" y="1301" width="0.0176%" height="15" fill="rgb(209,150,17)" fg:x="677" fg:w="1"/><text x="12.1921%" y="1311.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.02%)</title><rect x="11.9421%" y="1285" width="0.0176%" height="15" fill="rgb(234,202,34)" fg:x="677" fg:w="1"/><text x="12.1921%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="11.9421%" y="1269" width="0.0176%" height="15" fill="rgb(253,148,53)" fg:x="677" fg:w="1"/><text x="12.1921%" y="1279.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="11.9598%" y="1269" width="0.0176%" height="15" fill="rgb(218,129,16)" fg:x="678" fg:w="1"/><text x="12.2098%" y="1279.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="11.9774%" y="1237" width="0.0176%" height="15" fill="rgb(216,85,19)" fg:x="679" fg:w="1"/><text x="12.2274%" y="1247.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="11.9774%" y="1221" width="0.0176%" height="15" fill="rgb(235,228,7)" fg:x="679" fg:w="1"/><text x="12.2274%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::allocated_memory (1 samples, 0.02%)</title><rect x="11.9774%" y="1205" width="0.0176%" height="15" fill="rgb(245,175,0)" fg:x="679" fg:w="1"/><text x="12.2274%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="11.9774%" y="1189" width="0.0176%" height="15" fill="rgb(208,168,36)" fg:x="679" fg:w="1"/><text x="12.2274%" y="1199.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="11.9951%" y="1237" width="0.0176%" height="15" fill="rgb(246,171,24)" fg:x="680" fg:w="1"/><text x="12.2451%" y="1247.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="12.0127%" y="1205" width="0.0353%" height="15" fill="rgb(215,142,24)" fg:x="681" fg:w="2"/><text x="12.2627%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="12.0127%" y="1189" width="0.0353%" height="15" fill="rgb(250,187,7)" fg:x="681" fg:w="2"/><text x="12.2627%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="12.0127%" y="1173" width="0.0353%" height="15" fill="rgb(228,66,33)" fg:x="681" fg:w="2"/><text x="12.2627%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="12.0480%" y="1205" width="0.0353%" height="15" fill="rgb(234,215,21)" fg:x="683" fg:w="2"/><text x="12.2980%" y="1215.50"></text></g><g><title>SipHashUint256Extra (48 samples, 0.85%)</title><rect x="12.0833%" y="1189" width="0.8467%" height="15" fill="rgb(222,191,20)" fg:x="685" fg:w="48"/><text x="12.3333%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (25 samples, 0.44%)</title><rect x="12.4890%" y="1173" width="0.4410%" height="15" fill="rgb(245,79,54)" fg:x="708" fg:w="25"/><text x="12.7390%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (25 samples, 0.44%)</title><rect x="12.4890%" y="1157" width="0.4410%" height="15" fill="rgb(240,10,37)" fg:x="708" fg:w="25"/><text x="12.7390%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="13.8120%" y="1093" width="0.0176%" height="15" fill="rgb(214,192,32)" fg:x="783" fg:w="1"/><text x="14.0620%" y="1103.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="13.8120%" y="1077" width="0.0176%" height="15" fill="rgb(209,36,54)" fg:x="783" fg:w="1"/><text x="14.0620%" y="1087.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="13.8120%" y="1061" width="0.0176%" height="15" fill="rgb(220,10,11)" fg:x="783" fg:w="1"/><text x="14.0620%" y="1071.50"></text></g><g><title>SipHashUint256Extra (73 samples, 1.29%)</title><rect x="12.9652%" y="1109" width="1.2877%" height="15" fill="rgb(221,106,17)" fg:x="735" fg:w="73"/><text x="13.2152%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (24 samples, 0.42%)</title><rect x="13.8296%" y="1093" width="0.4234%" height="15" fill="rgb(251,142,44)" fg:x="784" fg:w="24"/><text x="14.0796%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (24 samples, 0.42%)</title><rect x="13.8296%" y="1077" width="0.4234%" height="15" fill="rgb(238,13,15)" fg:x="784" fg:w="24"/><text x="14.0796%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.09%)</title><rect x="14.3412%" y="1093" width="0.0882%" height="15" fill="rgb(208,107,27)" fg:x="813" fg:w="5"/><text x="14.5912%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5 samples, 0.09%)</title><rect x="14.3412%" y="1077" width="0.0882%" height="15" fill="rgb(205,136,37)" fg:x="813" fg:w="5"/><text x="14.5912%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.09%)</title><rect x="14.3412%" y="1061" width="0.0882%" height="15" fill="rgb(250,205,27)" fg:x="813" fg:w="5"/><text x="14.5912%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.09%)</title><rect x="14.3412%" y="1045" width="0.0882%" height="15" fill="rgb(210,80,43)" fg:x="813" fg:w="5"/><text x="14.5912%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (134 samples, 2.36%)</title><rect x="12.0833%" y="1205" width="2.3637%" height="15" fill="rgb(247,160,36)" fg:x="685" fg:w="134"/><text x="12.3333%" y="1215.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (86 samples, 1.52%)</title><rect x="12.9300%" y="1189" width="1.5170%" height="15" fill="rgb(234,13,49)" fg:x="733" fg:w="86"/><text x="13.1800%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (84 samples, 1.48%)</title><rect x="12.9652%" y="1173" width="1.4817%" height="15" fill="rgb(234,122,0)" fg:x="735" fg:w="84"/><text x="13.2152%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (84 samples, 1.48%)</title><rect x="12.9652%" y="1157" width="1.4817%" height="15" fill="rgb(207,146,38)" fg:x="735" fg:w="84"/><text x="13.2152%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (84 samples, 1.48%)</title><rect x="12.9652%" y="1141" width="1.4817%" height="15" fill="rgb(207,177,25)" fg:x="735" fg:w="84"/><text x="13.2152%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (84 samples, 1.48%)</title><rect x="12.9652%" y="1125" width="1.4817%" height="15" fill="rgb(211,178,42)" fg:x="735" fg:w="84"/><text x="13.2152%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.19%)</title><rect x="14.2530%" y="1109" width="0.1940%" height="15" fill="rgb(230,69,54)" fg:x="808" fg:w="11"/><text x="14.5030%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="14.4294%" y="1093" width="0.0176%" height="15" fill="rgb(214,135,41)" fg:x="818" fg:w="1"/><text x="14.6794%" y="1103.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="14.4294%" y="1077" width="0.0176%" height="15" fill="rgb(237,67,25)" fg:x="818" fg:w="1"/><text x="14.6794%" y="1087.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="14.4294%" y="1061" width="0.0176%" height="15" fill="rgb(222,189,50)" fg:x="818" fg:w="1"/><text x="14.6794%" y="1071.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="14.4294%" y="1045" width="0.0176%" height="15" fill="rgb(245,148,34)" fg:x="818" fg:w="1"/><text x="14.6794%" y="1055.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="14.4294%" y="1029" width="0.0176%" height="15" fill="rgb(222,29,6)" fg:x="818" fg:w="1"/><text x="14.6794%" y="1039.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="14.4294%" y="1013" width="0.0176%" height="15" fill="rgb(221,189,43)" fg:x="818" fg:w="1"/><text x="14.6794%" y="1023.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="14.4294%" y="997" width="0.0176%" height="15" fill="rgb(207,36,27)" fg:x="818" fg:w="1"/><text x="14.6794%" y="1007.50"></text></g><g><title>SipHashUint256Extra (145 samples, 2.56%)</title><rect x="14.4470%" y="1189" width="2.5578%" height="15" fill="rgb(217,90,24)" fg:x="819" fg:w="145"/><text x="14.6970%" y="1199.50">Si..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (77 samples, 1.36%)</title><rect x="15.6465%" y="1173" width="1.3583%" height="15" fill="rgb(224,66,35)" fg:x="887" fg:w="77"/><text x="15.8965%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (77 samples, 1.36%)</title><rect x="15.6465%" y="1157" width="1.3583%" height="15" fill="rgb(221,13,50)" fg:x="887" fg:w="77"/><text x="15.8965%" y="1167.50"></text></g><g><title>SipHashUint256Extra (19 samples, 0.34%)</title><rect x="17.0048%" y="1109" width="0.3352%" height="15" fill="rgb(236,68,49)" fg:x="964" fg:w="19"/><text x="17.2548%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.16%)</title><rect x="17.1812%" y="1093" width="0.1588%" height="15" fill="rgb(229,146,28)" fg:x="974" fg:w="9"/><text x="17.4312%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.16%)</title><rect x="17.1812%" y="1077" width="0.1588%" height="15" fill="rgb(225,31,38)" fg:x="974" fg:w="9"/><text x="17.4312%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (47 samples, 0.83%)</title><rect x="17.0048%" y="1189" width="0.8291%" height="15" fill="rgb(250,208,3)" fg:x="964" fg:w="47"/><text x="17.2548%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (47 samples, 0.83%)</title><rect x="17.0048%" y="1173" width="0.8291%" height="15" fill="rgb(246,54,23)" fg:x="964" fg:w="47"/><text x="17.2548%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (47 samples, 0.83%)</title><rect x="17.0048%" y="1157" width="0.8291%" height="15" fill="rgb(243,76,11)" fg:x="964" fg:w="47"/><text x="17.2548%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (47 samples, 0.83%)</title><rect x="17.0048%" y="1141" width="0.8291%" height="15" fill="rgb(245,21,50)" fg:x="964" fg:w="47"/><text x="17.2548%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (47 samples, 0.83%)</title><rect x="17.0048%" y="1125" width="0.8291%" height="15" fill="rgb(228,9,43)" fg:x="964" fg:w="47"/><text x="17.2548%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (28 samples, 0.49%)</title><rect x="17.3399%" y="1109" width="0.4939%" height="15" fill="rgb(208,100,47)" fg:x="983" fg:w="28"/><text x="17.5899%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.9926%" y="1157" width="0.0176%" height="15" fill="rgb(232,26,8)" fg:x="1020" fg:w="1"/><text x="18.2426%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="17.9926%" y="1141" width="0.0176%" height="15" fill="rgb(216,166,38)" fg:x="1020" fg:w="1"/><text x="18.2426%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.07%)</title><rect x="18.0102%" y="1157" width="0.0706%" height="15" fill="rgb(251,202,51)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (4 samples, 0.07%)</title><rect x="18.0102%" y="1141" width="0.0706%" height="15" fill="rgb(254,216,34)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1151.50"></text></g><g><title>__memset_avx512_unaligned_erms (4 samples, 0.07%)</title><rect x="18.0102%" y="1125" width="0.0706%" height="15" fill="rgb(251,32,27)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="1109" width="0.0706%" height="15" fill="rgb(208,127,28)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="1093" width="0.0706%" height="15" fill="rgb(224,137,22)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="1077" width="0.0706%" height="15" fill="rgb(254,70,32)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="1061" width="0.0706%" height="15" fill="rgb(229,75,37)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="1045" width="0.0706%" height="15" fill="rgb(252,64,23)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="1029" width="0.0706%" height="15" fill="rgb(232,162,48)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="1013" width="0.0706%" height="15" fill="rgb(246,160,12)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="18.0102%" y="997" width="0.0706%" height="15" fill="rgb(247,166,0)" fg:x="1021" fg:w="4"/><text x="18.2602%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.0455%" y="981" width="0.0353%" height="15" fill="rgb(249,219,21)" fg:x="1023" fg:w="2"/><text x="18.2955%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="18.0455%" y="965" width="0.0353%" height="15" fill="rgb(205,209,3)" fg:x="1023" fg:w="2"/><text x="18.2955%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.0632%" y="949" width="0.0176%" height="15" fill="rgb(243,44,1)" fg:x="1024" fg:w="1"/><text x="18.3132%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (207 samples, 3.65%)</title><rect x="14.4470%" y="1205" width="3.6514%" height="15" fill="rgb(206,159,16)" fg:x="819" fg:w="207"/><text x="14.6970%" y="1215.50">std:..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (15 samples, 0.26%)</title><rect x="17.8338%" y="1189" width="0.2646%" height="15" fill="rgb(244,77,30)" fg:x="1011" fg:w="15"/><text x="18.0838%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (15 samples, 0.26%)</title><rect x="17.8338%" y="1173" width="0.2646%" height="15" fill="rgb(218,69,12)" fg:x="1011" fg:w="15"/><text x="18.0838%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="18.0808%" y="1157" width="0.0176%" height="15" fill="rgb(212,87,7)" fg:x="1025" fg:w="1"/><text x="18.3308%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="18.0808%" y="1141" width="0.0176%" height="15" fill="rgb(245,114,25)" fg:x="1025" fg:w="1"/><text x="18.3308%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="18.0808%" y="1125" width="0.0176%" height="15" fill="rgb(210,61,42)" fg:x="1025" fg:w="1"/><text x="18.3308%" y="1135.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="18.0984%" y="1189" width="0.0353%" height="15" fill="rgb(211,52,33)" fg:x="1026" fg:w="2"/><text x="18.3484%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.1161%" y="1173" width="0.0176%" height="15" fill="rgb(234,58,33)" fg:x="1027" fg:w="1"/><text x="18.3661%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="18.1161%" y="1157" width="0.0176%" height="15" fill="rgb(220,115,36)" fg:x="1027" fg:w="1"/><text x="18.3661%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="18.1337%" y="1189" width="0.0353%" height="15" fill="rgb(243,153,54)" fg:x="1028" fg:w="2"/><text x="18.3837%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1690%" y="1173" width="0.0176%" height="15" fill="rgb(251,47,18)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1690%" y="1157" width="0.0176%" height="15" fill="rgb(242,102,42)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1690%" y="1141" width="0.0176%" height="15" fill="rgb(234,31,38)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1690%" y="1125" width="0.0176%" height="15" fill="rgb(221,117,51)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1690%" y="1109" width="0.0176%" height="15" fill="rgb(212,20,18)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1690%" y="1093" width="0.0176%" height="15" fill="rgb(245,133,36)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1103.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="18.1690%" y="1077" width="0.0176%" height="15" fill="rgb(212,6,19)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1690%" y="1061" width="0.0176%" height="15" fill="rgb(218,1,36)" fg:x="1030" fg:w="1"/><text x="18.4190%" y="1071.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="18.1866%" y="1173" width="0.0176%" height="15" fill="rgb(246,84,54)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="18.1866%" y="1157" width="0.0176%" height="15" fill="rgb(242,110,6)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1167.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="18.1866%" y="1141" width="0.0176%" height="15" fill="rgb(214,47,5)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="18.1866%" y="1125" width="0.0176%" height="15" fill="rgb(218,159,25)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (1 samples, 0.02%)</title><rect x="18.1866%" y="1109" width="0.0176%" height="15" fill="rgb(215,211,28)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1866%" y="1093" width="0.0176%" height="15" fill="rgb(238,59,32)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1866%" y="1077" width="0.0176%" height="15" fill="rgb(226,82,3)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="18.1866%" y="1061" width="0.0176%" height="15" fill="rgb(240,164,32)" fg:x="1031" fg:w="1"/><text x="18.4366%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (25 samples, 0.44%)</title><rect x="18.0984%" y="1205" width="0.4410%" height="15" fill="rgb(232,46,7)" fg:x="1026" fg:w="25"/><text x="18.3484%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (21 samples, 0.37%)</title><rect x="18.1690%" y="1189" width="0.3704%" height="15" fill="rgb(229,129,53)" fg:x="1030" fg:w="21"/><text x="18.4190%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (19 samples, 0.34%)</title><rect x="18.2043%" y="1173" width="0.3352%" height="15" fill="rgb(234,188,29)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (19 samples, 0.34%)</title><rect x="18.2043%" y="1157" width="0.3352%" height="15" fill="rgb(246,141,4)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (19 samples, 0.34%)</title><rect x="18.2043%" y="1141" width="0.3352%" height="15" fill="rgb(229,23,39)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (19 samples, 0.34%)</title><rect x="18.2043%" y="1125" width="0.3352%" height="15" fill="rgb(206,12,3)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (19 samples, 0.34%)</title><rect x="18.2043%" y="1109" width="0.3352%" height="15" fill="rgb(252,226,20)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1119.50"></text></g><g><title>operator new (19 samples, 0.34%)</title><rect x="18.2043%" y="1093" width="0.3352%" height="15" fill="rgb(216,123,35)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1103.50"></text></g><g><title>__posix_memalign (19 samples, 0.34%)</title><rect x="18.2043%" y="1077" width="0.3352%" height="15" fill="rgb(212,68,40)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1087.50"></text></g><g><title>malloc (19 samples, 0.34%)</title><rect x="18.2043%" y="1061" width="0.3352%" height="15" fill="rgb(254,125,32)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1071.50"></text></g><g><title>_int_malloc (19 samples, 0.34%)</title><rect x="18.2043%" y="1045" width="0.3352%" height="15" fill="rgb(253,97,22)" fg:x="1032" fg:w="19"/><text x="18.4543%" y="1055.50"></text></g><g><title>malloc_consolidate (5 samples, 0.09%)</title><rect x="18.4512%" y="1029" width="0.0882%" height="15" fill="rgb(241,101,14)" fg:x="1046" fg:w="5"/><text x="18.7012%" y="1039.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="18.5218%" y="1013" width="0.0176%" height="15" fill="rgb(238,103,29)" fg:x="1050" fg:w="1"/><text x="18.7718%" y="1023.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (373 samples, 6.58%)</title><rect x="12.0127%" y="1237" width="6.5796%" height="15" fill="rgb(233,195,47)" fg:x="681" fg:w="373"/><text x="12.2627%" y="1247.50">std::pair..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (373 samples, 6.58%)</title><rect x="12.0127%" y="1221" width="6.5796%" height="15" fill="rgb(246,218,30)" fg:x="681" fg:w="373"/><text x="12.2627%" y="1231.50">std::pair..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="18.5394%" y="1205" width="0.0529%" height="15" fill="rgb(219,145,47)" fg:x="1051" fg:w="3"/><text x="18.7894%" y="1215.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="18.5394%" y="1189" width="0.0529%" height="15" fill="rgb(243,12,26)" fg:x="1051" fg:w="3"/><text x="18.7894%" y="1199.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="18.5394%" y="1173" width="0.0529%" height="15" fill="rgb(214,87,16)" fg:x="1051" fg:w="3"/><text x="18.7894%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="18.5571%" y="1157" width="0.0353%" height="15" fill="rgb(208,99,42)" fg:x="1052" fg:w="2"/><text x="18.8071%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="18.5571%" y="1141" width="0.0353%" height="15" fill="rgb(253,99,2)" fg:x="1052" fg:w="2"/><text x="18.8071%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="18.6100%" y="1141" width="0.0176%" height="15" fill="rgb(220,168,23)" fg:x="1055" fg:w="1"/><text x="18.8600%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (3 samples, 0.05%)</title><rect x="18.5923%" y="1205" width="0.0529%" height="15" fill="rgb(242,38,24)" fg:x="1054" fg:w="3"/><text x="18.8423%" y="1215.50"></text></g><g><title>Coin::DynamicMemoryUsage (2 samples, 0.04%)</title><rect x="18.6100%" y="1189" width="0.0353%" height="15" fill="rgb(225,182,9)" fg:x="1055" fg:w="2"/><text x="18.8600%" y="1199.50"></text></g><g><title>Coin::DynamicMemoryUsage (2 samples, 0.04%)</title><rect x="18.6100%" y="1173" width="0.0353%" height="15" fill="rgb(243,178,37)" fg:x="1055" fg:w="2"/><text x="18.8600%" y="1183.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (2 samples, 0.04%)</title><rect x="18.6100%" y="1157" width="0.0353%" height="15" fill="rgb(232,139,19)" fg:x="1055" fg:w="2"/><text x="18.8600%" y="1167.50"></text></g><g><title>MallocUsage (1 samples, 0.02%)</title><rect x="18.6276%" y="1141" width="0.0176%" height="15" fill="rgb(225,201,24)" fg:x="1056" fg:w="1"/><text x="18.8776%" y="1151.50"></text></g><g><title>SipHashUint256Extra (38 samples, 0.67%)</title><rect x="18.6453%" y="1205" width="0.6703%" height="15" fill="rgb(221,47,46)" fg:x="1057" fg:w="38"/><text x="18.8953%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (18 samples, 0.32%)</title><rect x="18.9981%" y="1189" width="0.3175%" height="15" fill="rgb(249,23,13)" fg:x="1077" fg:w="18"/><text x="19.2481%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (18 samples, 0.32%)</title><rect x="18.9981%" y="1173" width="0.3175%" height="15" fill="rgb(219,9,5)" fg:x="1077" fg:w="18"/><text x="19.2481%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="19.3156%" y="1189" width="0.0529%" height="15" fill="rgb(254,171,16)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="19.3156%" y="1173" width="0.0529%" height="15" fill="rgb(230,171,20)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="19.3156%" y="1157" width="0.0529%" height="15" fill="rgb(210,71,41)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="19.3156%" y="1141" width="0.0529%" height="15" fill="rgb(206,173,20)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.05%)</title><rect x="19.3156%" y="1125" width="0.0529%" height="15" fill="rgb(233,88,34)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1135.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (3 samples, 0.05%)</title><rect x="19.3156%" y="1109" width="0.0529%" height="15" fill="rgb(223,209,46)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (3 samples, 0.05%)</title><rect x="19.3156%" y="1093" width="0.0529%" height="15" fill="rgb(250,43,18)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1103.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (3 samples, 0.05%)</title><rect x="19.3156%" y="1077" width="0.0529%" height="15" fill="rgb(208,13,10)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1087.50"></text></g><g><title>operator== (3 samples, 0.05%)</title><rect x="19.3156%" y="1061" width="0.0529%" height="15" fill="rgb(212,200,36)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1071.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (3 samples, 0.05%)</title><rect x="19.3156%" y="1045" width="0.0529%" height="15" fill="rgb(225,90,30)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (3 samples, 0.05%)</title><rect x="19.3156%" y="1029" width="0.0529%" height="15" fill="rgb(236,182,39)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1039.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (3 samples, 0.05%)</title><rect x="19.3156%" y="1013" width="0.0529%" height="15" fill="rgb(212,144,35)" fg:x="1095" fg:w="3"/><text x="19.5656%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (4 samples, 0.07%)</title><rect x="19.3156%" y="1205" width="0.0706%" height="15" fill="rgb(228,63,44)" fg:x="1095" fg:w="4"/><text x="19.5656%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="19.3685%" y="1189" width="0.0176%" height="15" fill="rgb(228,109,6)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="19.3685%" y="1173" width="0.0176%" height="15" fill="rgb(238,117,24)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1183.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="19.3685%" y="1157" width="0.0176%" height="15" fill="rgb(242,26,26)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1167.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="19.3685%" y="1141" width="0.0176%" height="15" fill="rgb(221,92,48)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1151.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="19.3685%" y="1125" width="0.0176%" height="15" fill="rgb(209,209,32)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="19.3685%" y="1109" width="0.0176%" height="15" fill="rgb(221,70,22)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="19.3685%" y="1093" width="0.0176%" height="15" fill="rgb(248,145,5)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1103.50"></text></g><g><title>Coin::~Coin (1 samples, 0.02%)</title><rect x="19.3685%" y="1077" width="0.0176%" height="15" fill="rgb(226,116,26)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1087.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.02%)</title><rect x="19.3685%" y="1061" width="0.0176%" height="15" fill="rgb(244,5,17)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1071.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="19.3685%" y="1045" width="0.0176%" height="15" fill="rgb(252,159,33)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="19.3685%" y="1029" width="0.0176%" height="15" fill="rgb(206,71,0)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1039.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="19.3685%" y="1013" width="0.0176%" height="15" fill="rgb(233,118,54)" fg:x="1098" fg:w="1"/><text x="19.6185%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="19.4214%" y="1189" width="0.0176%" height="15" fill="rgb(234,83,48)" fg:x="1101" fg:w="1"/><text x="19.6714%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="19.4214%" y="1173" width="0.0176%" height="15" fill="rgb(228,3,54)" fg:x="1101" fg:w="1"/><text x="19.6714%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="19.4214%" y="1157" width="0.0176%" height="15" fill="rgb(226,155,13)" fg:x="1101" fg:w="1"/><text x="19.6714%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="19.4214%" y="1141" width="0.0176%" height="15" fill="rgb(241,28,37)" fg:x="1101" fg:w="1"/><text x="19.6714%" y="1151.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="19.4214%" y="1125" width="0.0176%" height="15" fill="rgb(233,93,10)" fg:x="1101" fg:w="1"/><text x="19.6714%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="19.3861%" y="1205" width="0.0882%" height="15" fill="rgb(225,113,19)" fg:x="1099" fg:w="5"/><text x="19.6361%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (2 samples, 0.04%)</title><rect x="19.4391%" y="1189" width="0.0353%" height="15" fill="rgb(241,2,18)" fg:x="1102" fg:w="2"/><text x="19.6891%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (2 samples, 0.04%)</title><rect x="19.4391%" y="1173" width="0.0353%" height="15" fill="rgb(228,207,21)" fg:x="1102" fg:w="2"/><text x="19.6891%" y="1183.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (2 samples, 0.04%)</title><rect x="19.4391%" y="1157" width="0.0353%" height="15" fill="rgb(213,211,35)" fg:x="1102" fg:w="2"/><text x="19.6891%" y="1167.50"></text></g><g><title>operator== (2 samples, 0.04%)</title><rect x="19.4391%" y="1141" width="0.0353%" height="15" fill="rgb(209,83,10)" fg:x="1102" fg:w="2"/><text x="19.6891%" y="1151.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (2 samples, 0.04%)</title><rect x="19.4391%" y="1125" width="0.0353%" height="15" fill="rgb(209,164,1)" fg:x="1102" fg:w="2"/><text x="19.6891%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.04%)</title><rect x="19.4391%" y="1109" width="0.0353%" height="15" fill="rgb(213,184,43)" fg:x="1102" fg:w="2"/><text x="19.6891%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.04%)</title><rect x="19.4391%" y="1093" width="0.0353%" height="15" fill="rgb(231,61,34)" fg:x="1102" fg:w="2"/><text x="19.6891%" y="1103.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (52 samples, 0.92%)</title><rect x="18.5923%" y="1237" width="0.9173%" height="15" fill="rgb(235,75,3)" fg:x="1054" fg:w="52"/><text x="18.8423%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (52 samples, 0.92%)</title><rect x="18.5923%" y="1221" width="0.9173%" height="15" fill="rgb(220,106,47)" fg:x="1054" fg:w="52"/><text x="18.8423%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (2 samples, 0.04%)</title><rect x="19.4743%" y="1205" width="0.0353%" height="15" fill="rgb(210,196,33)" fg:x="1104" fg:w="2"/><text x="19.7243%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="19.4920%" y="1189" width="0.0176%" height="15" fill="rgb(229,154,42)" fg:x="1105" fg:w="1"/><text x="19.7420%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="19.4920%" y="1173" width="0.0176%" height="15" fill="rgb(228,114,26)" fg:x="1105" fg:w="1"/><text x="19.7420%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="19.4920%" y="1157" width="0.0176%" height="15" fill="rgb(208,144,1)" fg:x="1105" fg:w="1"/><text x="19.7420%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="19.4920%" y="1141" width="0.0176%" height="15" fill="rgb(239,112,37)" fg:x="1105" fg:w="1"/><text x="19.7420%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="19.4920%" y="1125" width="0.0176%" height="15" fill="rgb(210,96,50)" fg:x="1105" fg:w="1"/><text x="19.7420%" y="1135.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (1 samples, 0.02%)</title><rect x="19.4920%" y="1109" width="0.0176%" height="15" fill="rgb(222,178,2)" fg:x="1105" fg:w="1"/><text x="19.7420%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::Next (1 samples, 0.02%)</title><rect x="19.4920%" y="1093" width="0.0176%" height="15" fill="rgb(226,74,18)" fg:x="1105" fg:w="1"/><text x="19.7420%" y="1103.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="19.5273%" y="1221" width="0.0176%" height="15" fill="rgb(225,67,54)" fg:x="1107" fg:w="1"/><text x="19.7773%" y="1231.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.12%)</title><rect x="19.5449%" y="1221" width="0.1235%" height="15" fill="rgb(251,92,32)" fg:x="1108" fg:w="7"/><text x="19.7949%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="19.6155%" y="1205" width="0.0529%" height="15" fill="rgb(228,149,22)" fg:x="1112" fg:w="3"/><text x="19.8655%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="19.6155%" y="1189" width="0.0529%" height="15" fill="rgb(243,54,13)" fg:x="1112" fg:w="3"/><text x="19.8655%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="19.6684%" y="1221" width="0.0176%" height="15" fill="rgb(243,180,28)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="19.6684%" y="1205" width="0.0176%" height="15" fill="rgb(208,167,24)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="19.6684%" y="1189" width="0.0176%" height="15" fill="rgb(245,73,45)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1199.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="19.6684%" y="1173" width="0.0176%" height="15" fill="rgb(237,203,48)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1183.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="19.6684%" y="1157" width="0.0176%" height="15" fill="rgb(211,197,16)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1167.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="19.6684%" y="1141" width="0.0176%" height="15" fill="rgb(243,99,51)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1151.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="19.6684%" y="1125" width="0.0176%" height="15" fill="rgb(215,123,29)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="19.6684%" y="1109" width="0.0176%" height="15" fill="rgb(239,186,37)" fg:x="1115" fg:w="1"/><text x="19.9184%" y="1119.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (1 samples, 0.02%)</title><rect x="19.7389%" y="1157" width="0.0176%" height="15" fill="rgb(252,136,39)" fg:x="1119" fg:w="1"/><text x="19.9889%" y="1167.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="19.7566%" y="1157" width="0.0176%" height="15" fill="rgb(223,213,32)" fg:x="1120" fg:w="1"/><text x="20.0066%" y="1167.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="19.7566%" y="1141" width="0.0176%" height="15" fill="rgb(233,115,5)" fg:x="1120" fg:w="1"/><text x="20.0066%" y="1151.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="19.7566%" y="1125" width="0.0176%" height="15" fill="rgb(207,226,44)" fg:x="1120" fg:w="1"/><text x="20.0066%" y="1135.50"></text></g><g><title>Coin::operator= (2 samples, 0.04%)</title><rect x="19.7742%" y="1157" width="0.0353%" height="15" fill="rgb(208,126,0)" fg:x="1121" fg:w="2"/><text x="20.0242%" y="1167.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="19.7919%" y="1141" width="0.0176%" height="15" fill="rgb(244,66,21)" fg:x="1122" fg:w="1"/><text x="20.0419%" y="1151.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (1 samples, 0.02%)</title><rect x="19.8095%" y="1157" width="0.0176%" height="15" fill="rgb(222,97,12)" fg:x="1123" fg:w="1"/><text x="20.0595%" y="1167.50"></text></g><g><title>CCoinsViewCache::BatchWrite (9 samples, 0.16%)</title><rect x="19.6860%" y="1173" width="0.1588%" height="15" fill="rgb(219,213,19)" fg:x="1116" fg:w="9"/><text x="19.9360%" y="1183.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (1 samples, 0.02%)</title><rect x="19.8271%" y="1157" width="0.0176%" height="15" fill="rgb(252,169,30)" fg:x="1124" fg:w="1"/><text x="20.0771%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="20.9737%" y="1157" width="0.0176%" height="15" fill="rgb(206,32,51)" fg:x="1189" fg:w="1"/><text x="21.2237%" y="1167.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="20.9737%" y="1141" width="0.0176%" height="15" fill="rgb(250,172,42)" fg:x="1189" fg:w="1"/><text x="21.2237%" y="1151.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="20.9737%" y="1125" width="0.0176%" height="15" fill="rgb(209,34,43)" fg:x="1189" fg:w="1"/><text x="21.2237%" y="1135.50"></text></g><g><title>SipHashUint256Extra (112 samples, 1.98%)</title><rect x="19.8448%" y="1173" width="1.9757%" height="15" fill="rgb(223,11,35)" fg:x="1125" fg:w="112"/><text x="20.0948%" y="1183.50">S..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (47 samples, 0.83%)</title><rect x="20.9914%" y="1157" width="0.8291%" height="15" fill="rgb(251,219,26)" fg:x="1190" fg:w="47"/><text x="21.2414%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (47 samples, 0.83%)</title><rect x="20.9914%" y="1141" width="0.8291%" height="15" fill="rgb(231,119,3)" fg:x="1190" fg:w="47"/><text x="21.2414%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="21.8204%" y="1173" width="0.0176%" height="15" fill="rgb(216,97,11)" fg:x="1237" fg:w="1"/><text x="22.0704%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="21.8204%" y="1157" width="0.0176%" height="15" fill="rgb(223,59,9)" fg:x="1237" fg:w="1"/><text x="22.0704%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="21.8204%" y="1141" width="0.0176%" height="15" fill="rgb(233,93,31)" fg:x="1237" fg:w="1"/><text x="22.0704%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="21.8204%" y="1125" width="0.0176%" height="15" fill="rgb(239,81,33)" fg:x="1237" fg:w="1"/><text x="22.0704%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="21.8204%" y="1109" width="0.0176%" height="15" fill="rgb(213,120,34)" fg:x="1237" fg:w="1"/><text x="22.0704%" y="1119.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.02%)</title><rect x="22.1379%" y="1045" width="0.0176%" height="15" fill="rgb(243,49,53)" fg:x="1255" fg:w="1"/><text x="22.3879%" y="1055.50"></text></g><g><title>[[igc]] (2 samples, 0.04%)</title><rect x="22.1379%" y="1061" width="0.0353%" height="15" fill="rgb(247,216,33)" fg:x="1255" fg:w="2"/><text x="22.3879%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.1556%" y="1045" width="0.0176%" height="15" fill="rgb(226,26,14)" fg:x="1256" fg:w="1"/><text x="22.4056%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.1556%" y="1029" width="0.0176%" height="15" fill="rgb(215,49,53)" fg:x="1256" fg:w="1"/><text x="22.4056%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="22.1203%" y="1157" width="0.0706%" height="15" fill="rgb(245,162,40)" fg:x="1254" fg:w="4"/><text x="22.3703%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="22.1203%" y="1141" width="0.0706%" height="15" fill="rgb(229,68,17)" fg:x="1254" fg:w="4"/><text x="22.3703%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="22.1203%" y="1125" width="0.0706%" height="15" fill="rgb(213,182,10)" fg:x="1254" fg:w="4"/><text x="22.3703%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="22.1203%" y="1109" width="0.0706%" height="15" fill="rgb(245,125,30)" fg:x="1254" fg:w="4"/><text x="22.3703%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="22.1203%" y="1093" width="0.0706%" height="15" fill="rgb(232,202,2)" fg:x="1254" fg:w="4"/><text x="22.3703%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="22.1379%" y="1077" width="0.0529%" height="15" fill="rgb(237,140,51)" fg:x="1255" fg:w="3"/><text x="22.3879%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.1732%" y="1061" width="0.0176%" height="15" fill="rgb(236,157,25)" fg:x="1257" fg:w="1"/><text x="22.4232%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="22.1909%" y="1157" width="0.0176%" height="15" fill="rgb(219,209,0)" fg:x="1258" fg:w="1"/><text x="22.4409%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="22.1909%" y="1141" width="0.0176%" height="15" fill="rgb(240,116,54)" fg:x="1258" fg:w="1"/><text x="22.4409%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="22.1909%" y="1125" width="0.0176%" height="15" fill="rgb(216,10,36)" fg:x="1258" fg:w="1"/><text x="22.4409%" y="1135.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="22.1909%" y="1109" width="0.0176%" height="15" fill="rgb(222,72,44)" fg:x="1258" fg:w="1"/><text x="22.4409%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.41%)</title><rect x="21.8381%" y="1173" width="0.4057%" height="15" fill="rgb(232,159,9)" fg:x="1238" fg:w="23"/><text x="22.0881%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (2 samples, 0.04%)</title><rect x="22.2085%" y="1157" width="0.0353%" height="15" fill="rgb(210,39,32)" fg:x="1259" fg:w="2"/><text x="22.4585%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (2 samples, 0.04%)</title><rect x="22.2085%" y="1141" width="0.0353%" height="15" fill="rgb(216,194,45)" fg:x="1259" fg:w="2"/><text x="22.4585%" y="1151.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (2 samples, 0.04%)</title><rect x="22.2085%" y="1125" width="0.0353%" height="15" fill="rgb(218,18,35)" fg:x="1259" fg:w="2"/><text x="22.4585%" y="1135.50"></text></g><g><title>operator== (2 samples, 0.04%)</title><rect x="22.2085%" y="1109" width="0.0353%" height="15" fill="rgb(207,83,51)" fg:x="1259" fg:w="2"/><text x="22.4585%" y="1119.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (2 samples, 0.04%)</title><rect x="22.2085%" y="1093" width="0.0353%" height="15" fill="rgb(225,63,43)" fg:x="1259" fg:w="2"/><text x="22.4585%" y="1103.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.04%)</title><rect x="22.2085%" y="1077" width="0.0353%" height="15" fill="rgb(207,57,36)" fg:x="1259" fg:w="2"/><text x="22.4585%" y="1087.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.04%)</title><rect x="22.2085%" y="1061" width="0.0353%" height="15" fill="rgb(216,99,33)" fg:x="1259" fg:w="2"/><text x="22.4585%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.2261%" y="1045" width="0.0176%" height="15" fill="rgb(225,42,16)" fg:x="1260" fg:w="1"/><text x="22.4761%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.2261%" y="1029" width="0.0176%" height="15" fill="rgb(220,201,45)" fg:x="1260" fg:w="1"/><text x="22.4761%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="22.2261%" y="1013" width="0.0176%" height="15" fill="rgb(225,33,4)" fg:x="1260" fg:w="1"/><text x="22.4761%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (152 samples, 2.68%)</title><rect x="19.6860%" y="1189" width="2.6812%" height="15" fill="rgb(224,33,50)" fg:x="1116" fg:w="152"/><text x="19.9360%" y="1199.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (7 samples, 0.12%)</title><rect x="22.2438%" y="1173" width="0.1235%" height="15" fill="rgb(246,198,51)" fg:x="1261" fg:w="7"/><text x="22.4938%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (4 samples, 0.07%)</title><rect x="22.2967%" y="1157" width="0.0706%" height="15" fill="rgb(205,22,4)" fg:x="1264" fg:w="4"/><text x="22.5467%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.07%)</title><rect x="22.2967%" y="1141" width="0.0706%" height="15" fill="rgb(206,3,8)" fg:x="1264" fg:w="4"/><text x="22.5467%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.07%)</title><rect x="22.2967%" y="1125" width="0.0706%" height="15" fill="rgb(251,23,15)" fg:x="1264" fg:w="4"/><text x="22.5467%" y="1135.50"></text></g><g><title>CCoinsViewCache::BatchWrite (1 samples, 0.02%)</title><rect x="22.3673%" y="1157" width="0.0176%" height="15" fill="rgb(252,88,28)" fg:x="1268" fg:w="1"/><text x="22.6173%" y="1167.50"></text></g><g><title>Coin::IsSpent (1 samples, 0.02%)</title><rect x="22.3673%" y="1141" width="0.0176%" height="15" fill="rgb(212,127,14)" fg:x="1268" fg:w="1"/><text x="22.6173%" y="1151.50"></text></g><g><title>CTxOut::IsNull (1 samples, 0.02%)</title><rect x="22.3673%" y="1125" width="0.0176%" height="15" fill="rgb(247,145,37)" fg:x="1268" fg:w="1"/><text x="22.6173%" y="1135.50"></text></g><g><title>SipHashUint256Extra (8 samples, 0.14%)</title><rect x="22.3849%" y="1157" width="0.1411%" height="15" fill="rgb(209,117,53)" fg:x="1269" fg:w="8"/><text x="22.6349%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="22.4555%" y="1141" width="0.0706%" height="15" fill="rgb(212,90,42)" fg:x="1273" fg:w="4"/><text x="22.7055%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="22.4555%" y="1125" width="0.0706%" height="15" fill="rgb(218,164,37)" fg:x="1273" fg:w="4"/><text x="22.7055%" y="1135.50"></text></g><g><title>CCoinsViewCache::BatchWrite (599 samples, 10.57%)</title><rect x="11.9774%" y="1253" width="10.5662%" height="15" fill="rgb(246,65,34)" fg:x="679" fg:w="599"/><text x="12.2274%" y="1263.50">CCoinsViewCache..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::find (172 samples, 3.03%)</title><rect x="19.5096%" y="1237" width="3.0340%" height="15" fill="rgb(231,100,33)" fg:x="1106" fg:w="172"/><text x="19.7596%" y="1247.50">std..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (162 samples, 2.86%)</title><rect x="19.6860%" y="1221" width="2.8576%" height="15" fill="rgb(228,126,14)" fg:x="1116" fg:w="162"/><text x="19.9360%" y="1231.50">st..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (162 samples, 2.86%)</title><rect x="19.6860%" y="1205" width="2.8576%" height="15" fill="rgb(215,173,21)" fg:x="1116" fg:w="162"/><text x="19.9360%" y="1215.50">st..</text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10 samples, 0.18%)</title><rect x="22.3673%" y="1189" width="0.1764%" height="15" fill="rgb(210,6,40)" fg:x="1268" fg:w="10"/><text x="22.6173%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (10 samples, 0.18%)</title><rect x="22.3673%" y="1173" width="0.1764%" height="15" fill="rgb(212,48,18)" fg:x="1268" fg:w="10"/><text x="22.6173%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.02%)</title><rect x="22.5260%" y="1157" width="0.0176%" height="15" fill="rgb(230,214,11)" fg:x="1277" fg:w="1"/><text x="22.7760%" y="1167.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (1 samples, 0.02%)</title><rect x="22.5437%" y="1253" width="0.0176%" height="15" fill="rgb(254,105,39)" fg:x="1278" fg:w="1"/><text x="22.7937%" y="1263.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (1 samples, 0.02%)</title><rect x="22.5437%" y="1237" width="0.0176%" height="15" fill="rgb(245,158,5)" fg:x="1278" fg:w="1"/><text x="22.7937%" y="1247.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="22.5437%" y="1221" width="0.0176%" height="15" fill="rgb(249,208,11)" fg:x="1278" fg:w="1"/><text x="22.7937%" y="1231.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="22.5437%" y="1205" width="0.0176%" height="15" fill="rgb(210,39,28)" fg:x="1278" fg:w="1"/><text x="22.7937%" y="1215.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.02%)</title><rect x="22.5437%" y="1189" width="0.0176%" height="15" fill="rgb(211,56,53)" fg:x="1278" fg:w="1"/><text x="22.7937%" y="1199.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="22.5437%" y="1173" width="0.0176%" height="15" fill="rgb(226,201,30)" fg:x="1278" fg:w="1"/><text x="22.7937%" y="1183.50"></text></g><g><title>SipHashUint256Extra (27 samples, 0.48%)</title><rect x="22.5613%" y="1253" width="0.4763%" height="15" fill="rgb(239,101,34)" fg:x="1279" fg:w="27"/><text x="22.8113%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (11 samples, 0.19%)</title><rect x="22.8435%" y="1237" width="0.1940%" height="15" fill="rgb(226,209,5)" fg:x="1295" fg:w="11"/><text x="23.0935%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (11 samples, 0.19%)</title><rect x="22.8435%" y="1221" width="0.1940%" height="15" fill="rgb(250,105,47)" fg:x="1295" fg:w="11"/><text x="23.0935%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.07%)</title><rect x="23.0376%" y="1253" width="0.0706%" height="15" fill="rgb(230,72,3)" fg:x="1306" fg:w="4"/><text x="23.2876%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="23.0905%" y="1237" width="0.0176%" height="15" fill="rgb(232,218,39)" fg:x="1309" fg:w="1"/><text x="23.3405%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="23.0905%" y="1221" width="0.0176%" height="15" fill="rgb(248,166,6)" fg:x="1309" fg:w="1"/><text x="23.3405%" y="1231.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="23.0905%" y="1205" width="0.0176%" height="15" fill="rgb(247,89,20)" fg:x="1309" fg:w="1"/><text x="23.3405%" y="1215.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="23.0905%" y="1189" width="0.0176%" height="15" fill="rgb(248,130,54)" fg:x="1309" fg:w="1"/><text x="23.3405%" y="1199.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="23.0905%" y="1173" width="0.0176%" height="15" fill="rgb(234,196,4)" fg:x="1309" fg:w="1"/><text x="23.3405%" y="1183.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="23.0905%" y="1157" width="0.0176%" height="15" fill="rgb(250,143,31)" fg:x="1309" fg:w="1"/><text x="23.3405%" y="1167.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="23.0905%" y="1141" width="0.0176%" height="15" fill="rgb(211,110,34)" fg:x="1309" fg:w="1"/><text x="23.3405%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (3 samples, 0.05%)</title><rect x="23.1081%" y="1253" width="0.0529%" height="15" fill="rgb(215,124,48)" fg:x="1310" fg:w="3"/><text x="23.3581%" y="1263.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (1 samples, 0.02%)</title><rect x="23.1611%" y="1205" width="0.0176%" height="15" fill="rgb(216,46,13)" fg:x="1313" fg:w="1"/><text x="23.4111%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (3 samples, 0.05%)</title><rect x="23.1787%" y="1189" width="0.0529%" height="15" fill="rgb(205,184,25)" fg:x="1314" fg:w="3"/><text x="23.4287%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (3 samples, 0.05%)</title><rect x="23.1787%" y="1173" width="0.0529%" height="15" fill="rgb(228,1,10)" fg:x="1314" fg:w="3"/><text x="23.4287%" y="1183.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (3 samples, 0.05%)</title><rect x="23.1787%" y="1157" width="0.0529%" height="15" fill="rgb(213,116,27)" fg:x="1314" fg:w="3"/><text x="23.4287%" y="1167.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (3 samples, 0.05%)</title><rect x="23.1787%" y="1141" width="0.0529%" height="15" fill="rgb(241,95,50)" fg:x="1314" fg:w="3"/><text x="23.4287%" y="1151.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (3 samples, 0.05%)</title><rect x="23.1787%" y="1125" width="0.0529%" height="15" fill="rgb(238,48,32)" fg:x="1314" fg:w="3"/><text x="23.4287%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (3 samples, 0.05%)</title><rect x="23.1787%" y="1109" width="0.0529%" height="15" fill="rgb(235,113,49)" fg:x="1314" fg:w="3"/><text x="23.4287%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (1 samples, 0.02%)</title><rect x="23.2140%" y="1093" width="0.0176%" height="15" fill="rgb(205,127,43)" fg:x="1316" fg:w="1"/><text x="23.4640%" y="1103.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="23.2316%" y="1093" width="0.0176%" height="15" fill="rgb(250,162,2)" fg:x="1317" fg:w="1"/><text x="23.4816%" y="1103.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="23.2316%" y="1077" width="0.0176%" height="15" fill="rgb(220,13,41)" fg:x="1317" fg:w="1"/><text x="23.4816%" y="1087.50"></text></g><g><title>CCoinsViewCache::Flush (641 samples, 11.31%)</title><rect x="11.9774%" y="1269" width="11.3071%" height="15" fill="rgb(249,221,25)" fg:x="679" fg:w="641"/><text x="12.2274%" y="1279.50">CCoinsViewCache::..</text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (7 samples, 0.12%)</title><rect x="23.1611%" y="1253" width="0.1235%" height="15" fill="rgb(215,208,19)" fg:x="1313" fg:w="7"/><text x="23.4111%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (7 samples, 0.12%)</title><rect x="23.1611%" y="1237" width="0.1235%" height="15" fill="rgb(236,175,2)" fg:x="1313" fg:w="7"/><text x="23.4111%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (7 samples, 0.12%)</title><rect x="23.1611%" y="1221" width="0.1235%" height="15" fill="rgb(241,52,2)" fg:x="1313" fg:w="7"/><text x="23.4111%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (6 samples, 0.11%)</title><rect x="23.1787%" y="1205" width="0.1058%" height="15" fill="rgb(248,140,14)" fg:x="1314" fg:w="6"/><text x="23.4287%" y="1215.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.05%)</title><rect x="23.2316%" y="1189" width="0.0529%" height="15" fill="rgb(253,22,42)" fg:x="1317" fg:w="3"/><text x="23.4816%" y="1199.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.05%)</title><rect x="23.2316%" y="1173" width="0.0529%" height="15" fill="rgb(234,61,47)" fg:x="1317" fg:w="3"/><text x="23.4816%" y="1183.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.05%)</title><rect x="23.2316%" y="1157" width="0.0529%" height="15" fill="rgb(208,226,15)" fg:x="1317" fg:w="3"/><text x="23.4816%" y="1167.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (3 samples, 0.05%)</title><rect x="23.2316%" y="1141" width="0.0529%" height="15" fill="rgb(217,221,4)" fg:x="1317" fg:w="3"/><text x="23.4816%" y="1151.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (3 samples, 0.05%)</title><rect x="23.2316%" y="1125" width="0.0529%" height="15" fill="rgb(212,174,34)" fg:x="1317" fg:w="3"/><text x="23.4816%" y="1135.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (3 samples, 0.05%)</title><rect x="23.2316%" y="1109" width="0.0529%" height="15" fill="rgb(253,83,4)" fg:x="1317" fg:w="3"/><text x="23.4816%" y="1119.50"></text></g><g><title>Coin::~Coin (2 samples, 0.04%)</title><rect x="23.2493%" y="1093" width="0.0353%" height="15" fill="rgb(250,195,49)" fg:x="1318" fg:w="2"/><text x="23.4993%" y="1103.50"></text></g><g><title>CTxOut::~CTxOut (2 samples, 0.04%)</title><rect x="23.2493%" y="1077" width="0.0353%" height="15" fill="rgb(241,192,25)" fg:x="1318" fg:w="2"/><text x="23.4993%" y="1087.50"></text></g><g><title>CScript::~CScript (2 samples, 0.04%)</title><rect x="23.2493%" y="1061" width="0.0353%" height="15" fill="rgb(208,124,10)" fg:x="1318" fg:w="2"/><text x="23.4993%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (2 samples, 0.04%)</title><rect x="23.2493%" y="1045" width="0.0353%" height="15" fill="rgb(222,33,0)" fg:x="1318" fg:w="2"/><text x="23.4993%" y="1055.50"></text></g><g><title>CCoinsViewCache::HaveInputs (1 samples, 0.02%)</title><rect x="23.2845%" y="1269" width="0.0176%" height="15" fill="rgb(234,209,28)" fg:x="1320" fg:w="1"/><text x="23.5345%" y="1279.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="23.2845%" y="1253" width="0.0176%" height="15" fill="rgb(224,11,23)" fg:x="1320" fg:w="1"/><text x="23.5345%" y="1263.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="23.3022%" y="1269" width="0.0176%" height="15" fill="rgb(232,99,1)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1253" width="0.0176%" height="15" fill="rgb(237,95,45)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1263.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1237" width="0.0176%" height="15" fill="rgb(208,109,11)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1247.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1221" width="0.0176%" height="15" fill="rgb(216,190,48)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1231.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1205" width="0.0176%" height="15" fill="rgb(251,171,36)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1189" width="0.0176%" height="15" fill="rgb(230,62,22)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1199.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1173" width="0.0176%" height="15" fill="rgb(225,114,35)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1183.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1157" width="0.0176%" height="15" fill="rgb(215,118,42)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1141" width="0.0176%" height="15" fill="rgb(243,119,21)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1125" width="0.0176%" height="15" fill="rgb(252,177,53)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="23.3022%" y="1109" width="0.0176%" height="15" fill="rgb(237,209,29)" fg:x="1321" fg:w="1"/><text x="23.5522%" y="1119.50"></text></g><g><title>CTransaction::GetValueOut (1 samples, 0.02%)</title><rect x="23.3198%" y="1269" width="0.0176%" height="15" fill="rgb(212,65,23)" fg:x="1322" fg:w="1"/><text x="23.5698%" y="1279.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="23.3198%" y="1253" width="0.0176%" height="15" fill="rgb(230,222,46)" fg:x="1322" fg:w="1"/><text x="23.5698%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxOut const*, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="23.3198%" y="1237" width="0.0176%" height="15" fill="rgb(215,135,32)" fg:x="1322" fg:w="1"/><text x="23.5698%" y="1247.50"></text></g><g><title>SipHashUint256 (10 samples, 0.18%)</title><rect x="23.3374%" y="1253" width="0.1764%" height="15" fill="rgb(246,101,22)" fg:x="1323" fg:w="10"/><text x="23.5874%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="23.4433%" y="1237" width="0.0706%" height="15" fill="rgb(206,107,13)" fg:x="1329" fg:w="4"/><text x="23.6933%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="23.4433%" y="1221" width="0.0706%" height="15" fill="rgb(250,100,44)" fg:x="1329" fg:w="4"/><text x="23.6933%" y="1231.50"></text></g><g><title>ValidationSignals::MempoolTransactionsRemovedForBlock (1 samples, 0.02%)</title><rect x="23.5138%" y="1253" width="0.0176%" height="15" fill="rgb(231,147,38)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1263.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, unsigned int, unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.5138%" y="1237" width="0.0176%" height="15" fill="rgb(229,8,40)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="23.5138%" y="1221" width="0.0176%" height="15" fill="rgb(221,135,30)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1231.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="23.5138%" y="1205" width="0.0176%" height="15" fill="rgb(249,193,18)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1215.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="23.5138%" y="1189" width="0.0176%" height="15" fill="rgb(209,133,39)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1199.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="23.5138%" y="1173" width="0.0176%" height="15" fill="rgb(232,100,14)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1183.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="23.5138%" y="1157" width="0.0176%" height="15" fill="rgb(224,185,1)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1167.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="23.5138%" y="1141" width="0.0176%" height="15" fill="rgb(223,139,8)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1151.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="23.5138%" y="1125" width="0.0176%" height="15" fill="rgb(232,213,38)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1135.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="23.5138%" y="1109" width="0.0176%" height="15" fill="rgb(207,94,22)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.5138%" y="1093" width="0.0176%" height="15" fill="rgb(219,183,54)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.5138%" y="1077" width="0.0176%" height="15" fill="rgb(216,185,54)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.5138%" y="1061" width="0.0176%" height="15" fill="rgb(254,217,39)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.5138%" y="1045" width="0.0176%" height="15" fill="rgb(240,178,23)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1055.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="23.5138%" y="1029" width="0.0176%" height="15" fill="rgb(218,11,47)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="23.5138%" y="1013" width="0.0176%" height="15" fill="rgb(218,51,51)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1023.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="23.5138%" y="997" width="0.0176%" height="15" fill="rgb(238,126,27)" fg:x="1333" fg:w="1"/><text x="23.7638%" y="1007.50"></text></g><g><title>boost::multi_index::detail::bucket_array_base&lt;true&gt;::position (1 samples, 0.02%)</title><rect x="23.5315%" y="1173" width="0.0176%" height="15" fill="rgb(249,202,22)" fg:x="1334" fg:w="1"/><text x="23.7815%" y="1183.50"></text></g><g><title>SaltedTxidHasher::operator (2 samples, 0.04%)</title><rect x="23.5315%" y="1189" width="0.0353%" height="15" fill="rgb(254,195,49)" fg:x="1334" fg:w="2"/><text x="23.7815%" y="1199.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (1 samples, 0.02%)</title><rect x="23.5491%" y="1173" width="0.0176%" height="15" fill="rgb(208,123,14)" fg:x="1335" fg:w="1"/><text x="23.7991%" y="1183.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt; &gt; (3 samples, 0.05%)</title><rect x="23.5315%" y="1253" width="0.0529%" height="15" fill="rgb(224,200,8)" fg:x="1334" fg:w="3"/><text x="23.7815%" y="1263.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;transaction_identifier&lt;false&gt;, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (3 samples, 0.05%)</title><rect x="23.5315%" y="1237" width="0.0529%" height="15" fill="rgb(217,61,36)" fg:x="1334" fg:w="3"/><text x="23.7815%" y="1247.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (3 samples, 0.05%)</title><rect x="23.5315%" y="1221" width="0.0529%" height="15" fill="rgb(206,35,45)" fg:x="1334" fg:w="3"/><text x="23.7815%" y="1231.50"></text></g><g><title>boost::multi_index::detail::hashed_index_iterator&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::hashed_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;CTxMemPoolEntry, std::allocator&lt;CTxMemPoolEntry&gt; &gt; &gt; &gt; &gt; &gt; &gt;, boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::multi_index::detail::hashed_unique_tag, boost::multi_index::detail::hashed_index_global_iterator_tag&gt; boost::multi_index::detail::hashed_index&lt;mempoolentry_txid, SaltedTxidHasher, std::equal_to&lt;uint256&gt;, boost::multi_index::detail::nth_layer&lt;1, CTxMemPoolEntry, CTxMemPool::CTxMemPoolEntry_Indices, std::allocator&lt;CTxMemPoolEntry&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::hashed_unique_tag&gt;::find&lt;uint256, SaltedTxidHasher, std::equal_to&lt;uint256&gt; &gt; (3 samples, 0.05%)</title><rect x="23.5315%" y="1205" width="0.0529%" height="15" fill="rgb(217,65,33)" fg:x="1334" fg:w="3"/><text x="23.7815%" y="1215.50"></text></g><g><title>boost::multi_index::detail::bucket_array&lt;std::allocator&lt;CTxMemPoolEntry&gt; &gt;::position (1 samples, 0.02%)</title><rect x="23.5668%" y="1189" width="0.0176%" height="15" fill="rgb(222,158,48)" fg:x="1336" fg:w="1"/><text x="23.8168%" y="1199.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (1 samples, 0.02%)</title><rect x="23.5668%" y="1173" width="0.0176%" height="15" fill="rgb(254,2,54)" fg:x="1336" fg:w="1"/><text x="23.8168%" y="1183.50"></text></g><g><title>SipHashUint256 (3 samples, 0.05%)</title><rect x="23.5844%" y="1237" width="0.0529%" height="15" fill="rgb(250,143,38)" fg:x="1337" fg:w="3"/><text x="23.8344%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.6197%" y="1221" width="0.0176%" height="15" fill="rgb(248,25,0)" fg:x="1339" fg:w="1"/><text x="23.8697%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.6197%" y="1205" width="0.0176%" height="15" fill="rgb(206,152,27)" fg:x="1339" fg:w="1"/><text x="23.8697%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="23.6373%" y="1237" width="0.0176%" height="15" fill="rgb(240,77,30)" fg:x="1340" fg:w="1"/><text x="23.8873%" y="1247.50"></text></g><g><title>SipHashUint256 (1 samples, 0.02%)</title><rect x="23.6550%" y="1205" width="0.0176%" height="15" fill="rgb(231,5,3)" fg:x="1341" fg:w="1"/><text x="23.9050%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.6550%" y="1189" width="0.0176%" height="15" fill="rgb(207,226,32)" fg:x="1341" fg:w="1"/><text x="23.9050%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="23.6550%" y="1173" width="0.0176%" height="15" fill="rgb(222,207,47)" fg:x="1341" fg:w="1"/><text x="23.9050%" y="1183.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (2 samples, 0.04%)</title><rect x="23.6550%" y="1237" width="0.0353%" height="15" fill="rgb(229,115,45)" fg:x="1341" fg:w="2"/><text x="23.9050%" y="1247.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (2 samples, 0.04%)</title><rect x="23.6550%" y="1221" width="0.0353%" height="15" fill="rgb(224,191,6)" fg:x="1341" fg:w="2"/><text x="23.9050%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (1 samples, 0.02%)</title><rect x="23.6726%" y="1205" width="0.0176%" height="15" fill="rgb(230,227,24)" fg:x="1342" fg:w="1"/><text x="23.9226%" y="1215.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::_M_erase_aux (1 samples, 0.02%)</title><rect x="23.6726%" y="1189" width="0.0176%" height="15" fill="rgb(228,80,19)" fg:x="1342" fg:w="1"/><text x="23.9226%" y="1199.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="23.6726%" y="1173" width="0.0176%" height="15" fill="rgb(247,229,0)" fg:x="1342" fg:w="1"/><text x="23.9226%" y="1183.50"></text></g><g><title>std::_Rb_tree_header::_M_reset (1 samples, 0.02%)</title><rect x="23.6726%" y="1157" width="0.0176%" height="15" fill="rgb(237,194,15)" fg:x="1342" fg:w="1"/><text x="23.9226%" y="1167.50"></text></g><g><title>CTxMemPool::removeForBlock (23 samples, 0.41%)</title><rect x="23.3374%" y="1269" width="0.4057%" height="15" fill="rgb(219,203,20)" fg:x="1323" fg:w="23"/><text x="23.5874%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::erase (9 samples, 0.16%)</title><rect x="23.5844%" y="1253" width="0.1588%" height="15" fill="rgb(234,128,8)" fg:x="1337" fg:w="9"/><text x="23.8344%" y="1263.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (3 samples, 0.05%)</title><rect x="23.6902%" y="1237" width="0.0529%" height="15" fill="rgb(248,202,8)" fg:x="1343" fg:w="3"/><text x="23.9402%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="23.7432%" y="1157" width="0.0176%" height="15" fill="rgb(206,104,37)" fg:x="1346" fg:w="1"/><text x="23.9932%" y="1167.50"></text></g><g><title>AddCoins (11 samples, 0.19%)</title><rect x="23.7432%" y="1237" width="0.1940%" height="15" fill="rgb(223,8,27)" fg:x="1346" fg:w="11"/><text x="23.9932%" y="1247.50"></text></g><g><title>Coin::Coin (11 samples, 0.19%)</title><rect x="23.7432%" y="1221" width="0.1940%" height="15" fill="rgb(216,217,28)" fg:x="1346" fg:w="11"/><text x="23.9932%" y="1231.50"></text></g><g><title>CTxOut::CTxOut (11 samples, 0.19%)</title><rect x="23.7432%" y="1205" width="0.1940%" height="15" fill="rgb(249,199,1)" fg:x="1346" fg:w="11"/><text x="23.9932%" y="1215.50"></text></g><g><title>CScript::CScript (11 samples, 0.19%)</title><rect x="23.7432%" y="1189" width="0.1940%" height="15" fill="rgb(240,85,17)" fg:x="1346" fg:w="11"/><text x="23.9932%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (11 samples, 0.19%)</title><rect x="23.7432%" y="1173" width="0.1940%" height="15" fill="rgb(206,108,45)" fg:x="1346" fg:w="11"/><text x="23.9932%" y="1183.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (10 samples, 0.18%)</title><rect x="23.7608%" y="1157" width="0.1764%" height="15" fill="rgb(245,210,41)" fg:x="1347" fg:w="10"/><text x="24.0108%" y="1167.50"></text></g><g><title>AddCoins (1 samples, 0.02%)</title><rect x="23.9372%" y="1173" width="0.0176%" height="15" fill="rgb(206,13,37)" fg:x="1357" fg:w="1"/><text x="24.1872%" y="1183.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="23.9372%" y="1157" width="0.0176%" height="15" fill="rgb(250,61,18)" fg:x="1357" fg:w="1"/><text x="24.1872%" y="1167.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="23.9372%" y="1141" width="0.0176%" height="15" fill="rgb(235,172,48)" fg:x="1357" fg:w="1"/><text x="24.1872%" y="1151.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="23.9372%" y="1125" width="0.0176%" height="15" fill="rgb(249,201,17)" fg:x="1357" fg:w="1"/><text x="24.1872%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="23.9372%" y="1109" width="0.0176%" height="15" fill="rgb(219,208,6)" fg:x="1357" fg:w="1"/><text x="24.1872%" y="1119.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="23.9372%" y="1093" width="0.0176%" height="15" fill="rgb(248,31,23)" fg:x="1357" fg:w="1"/><text x="24.1872%" y="1103.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="23.9548%" y="1173" width="0.0529%" height="15" fill="rgb(245,15,42)" fg:x="1358" fg:w="3"/><text x="24.2048%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="23.9725%" y="1157" width="0.0353%" height="15" fill="rgb(222,217,39)" fg:x="1359" fg:w="2"/><text x="24.2225%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="23.9725%" y="1141" width="0.0353%" height="15" fill="rgb(210,219,27)" fg:x="1359" fg:w="2"/><text x="24.2225%" y="1151.50"></text></g><g><title>AddCoins (1 samples, 0.02%)</title><rect x="24.0078%" y="1157" width="0.0176%" height="15" fill="rgb(252,166,36)" fg:x="1361" fg:w="1"/><text x="24.2578%" y="1167.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="24.0078%" y="1141" width="0.0176%" height="15" fill="rgb(245,132,34)" fg:x="1361" fg:w="1"/><text x="24.2578%" y="1151.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="24.0254%" y="1157" width="0.0176%" height="15" fill="rgb(236,54,3)" fg:x="1362" fg:w="1"/><text x="24.2754%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.0254%" y="1141" width="0.0176%" height="15" fill="rgb(241,173,43)" fg:x="1362" fg:w="1"/><text x="24.2754%" y="1151.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.0254%" y="1125" width="0.0176%" height="15" fill="rgb(215,190,9)" fg:x="1362" fg:w="1"/><text x="24.2754%" y="1135.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.0254%" y="1109" width="0.0176%" height="15" fill="rgb(242,101,16)" fg:x="1362" fg:w="1"/><text x="24.2754%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="24.0254%" y="1093" width="0.0176%" height="15" fill="rgb(223,190,21)" fg:x="1362" fg:w="1"/><text x="24.2754%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="24.0254%" y="1077" width="0.0176%" height="15" fill="rgb(215,228,25)" fg:x="1362" fg:w="1"/><text x="24.2754%" y="1087.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.12%)</title><rect x="24.0430%" y="1157" width="0.1235%" height="15" fill="rgb(225,36,22)" fg:x="1363" fg:w="7"/><text x="24.2930%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="24.1312%" y="1141" width="0.0353%" height="15" fill="rgb(251,106,46)" fg:x="1368" fg:w="2"/><text x="24.3812%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="24.1312%" y="1125" width="0.0353%" height="15" fill="rgb(208,90,1)" fg:x="1368" fg:w="2"/><text x="24.3812%" y="1135.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="24.1665%" y="1077" width="0.0176%" height="15" fill="rgb(243,10,4)" fg:x="1370" fg:w="1"/><text x="24.4165%" y="1087.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.1665%" y="1061" width="0.0176%" height="15" fill="rgb(212,137,27)" fg:x="1370" fg:w="1"/><text x="24.4165%" y="1071.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.1665%" y="1045" width="0.0176%" height="15" fill="rgb(231,220,49)" fg:x="1370" fg:w="1"/><text x="24.4165%" y="1055.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.1665%" y="1029" width="0.0176%" height="15" fill="rgb(237,96,20)" fg:x="1370" fg:w="1"/><text x="24.4165%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1 samples, 0.02%)</title><rect x="24.1665%" y="1013" width="0.0176%" height="15" fill="rgb(239,229,30)" fg:x="1370" fg:w="1"/><text x="24.4165%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="24.1665%" y="1157" width="0.0882%" height="15" fill="rgb(219,65,33)" fg:x="1370" fg:w="5"/><text x="24.4165%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.09%)</title><rect x="24.1665%" y="1141" width="0.0882%" height="15" fill="rgb(243,134,7)" fg:x="1370" fg:w="5"/><text x="24.4165%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5 samples, 0.09%)</title><rect x="24.1665%" y="1125" width="0.0882%" height="15" fill="rgb(216,177,54)" fg:x="1370" fg:w="5"/><text x="24.4165%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.09%)</title><rect x="24.1665%" y="1109" width="0.0882%" height="15" fill="rgb(211,160,20)" fg:x="1370" fg:w="5"/><text x="24.4165%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (5 samples, 0.09%)</title><rect x="24.1665%" y="1093" width="0.0882%" height="15" fill="rgb(239,85,39)" fg:x="1370" fg:w="5"/><text x="24.4165%" y="1103.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="24.1842%" y="1077" width="0.0706%" height="15" fill="rgb(232,125,22)" fg:x="1371" fg:w="4"/><text x="24.4342%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.2371%" y="1061" width="0.0176%" height="15" fill="rgb(244,57,34)" fg:x="1374" fg:w="1"/><text x="24.4871%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.2371%" y="1045" width="0.0176%" height="15" fill="rgb(214,203,32)" fg:x="1374" fg:w="1"/><text x="24.4871%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (15 samples, 0.26%)</title><rect x="24.0078%" y="1173" width="0.2646%" height="15" fill="rgb(207,58,43)" fg:x="1361" fg:w="15"/><text x="24.2578%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.2547%" y="1157" width="0.0176%" height="15" fill="rgb(215,193,15)" fg:x="1375" fg:w="1"/><text x="24.5047%" y="1167.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="24.2724%" y="1157" width="0.0706%" height="15" fill="rgb(232,15,44)" fg:x="1376" fg:w="4"/><text x="24.5224%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="24.2900%" y="1141" width="0.0529%" height="15" fill="rgb(212,3,48)" fg:x="1377" fg:w="3"/><text x="24.5400%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="24.2900%" y="1125" width="0.0529%" height="15" fill="rgb(218,128,7)" fg:x="1377" fg:w="3"/><text x="24.5400%" y="1135.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="24.3429%" y="1077" width="0.0353%" height="15" fill="rgb(226,216,39)" fg:x="1380" fg:w="2"/><text x="24.5929%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.3606%" y="1061" width="0.0176%" height="15" fill="rgb(243,47,51)" fg:x="1381" fg:w="1"/><text x="24.6106%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="24.3606%" y="1045" width="0.0176%" height="15" fill="rgb(241,183,40)" fg:x="1381" fg:w="1"/><text x="24.6106%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (3 samples, 0.05%)</title><rect x="24.3429%" y="1157" width="0.0529%" height="15" fill="rgb(231,217,32)" fg:x="1380" fg:w="3"/><text x="24.5929%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="24.3429%" y="1141" width="0.0529%" height="15" fill="rgb(229,61,38)" fg:x="1380" fg:w="3"/><text x="24.5929%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.05%)</title><rect x="24.3429%" y="1125" width="0.0529%" height="15" fill="rgb(225,210,5)" fg:x="1380" fg:w="3"/><text x="24.5929%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="24.3429%" y="1109" width="0.0529%" height="15" fill="rgb(231,79,45)" fg:x="1380" fg:w="3"/><text x="24.5929%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="24.3429%" y="1093" width="0.0529%" height="15" fill="rgb(224,100,7)" fg:x="1380" fg:w="3"/><text x="24.5929%" y="1103.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="24.3782%" y="1077" width="0.0176%" height="15" fill="rgb(241,198,18)" fg:x="1382" fg:w="1"/><text x="24.6282%" y="1087.50"></text></g><g><title>SipHashUint256Extra (17 samples, 0.30%)</title><rect x="24.4311%" y="1077" width="0.2999%" height="15" fill="rgb(252,97,53)" fg:x="1385" fg:w="17"/><text x="24.6811%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="24.6428%" y="1061" width="0.0882%" height="15" fill="rgb(220,88,7)" fg:x="1397" fg:w="5"/><text x="24.8928%" y="1071.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="24.6428%" y="1045" width="0.0882%" height="15" fill="rgb(213,176,14)" fg:x="1397" fg:w="5"/><text x="24.8928%" y="1055.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (27 samples, 0.48%)</title><rect x="24.2724%" y="1173" width="0.4763%" height="15" fill="rgb(246,73,7)" fg:x="1376" fg:w="27"/><text x="24.5224%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (20 samples, 0.35%)</title><rect x="24.3958%" y="1157" width="0.3528%" height="15" fill="rgb(245,64,36)" fg:x="1383" fg:w="20"/><text x="24.6458%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (20 samples, 0.35%)</title><rect x="24.3958%" y="1141" width="0.3528%" height="15" fill="rgb(245,80,10)" fg:x="1383" fg:w="20"/><text x="24.6458%" y="1151.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (18 samples, 0.32%)</title><rect x="24.4311%" y="1125" width="0.3175%" height="15" fill="rgb(232,107,50)" fg:x="1385" fg:w="18"/><text x="24.6811%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (18 samples, 0.32%)</title><rect x="24.4311%" y="1109" width="0.3175%" height="15" fill="rgb(253,3,0)" fg:x="1385" fg:w="18"/><text x="24.6811%" y="1119.50"></text></g><g><title>SaltedOutpointHasher::operator (18 samples, 0.32%)</title><rect x="24.4311%" y="1093" width="0.3175%" height="15" fill="rgb(212,99,53)" fg:x="1385" fg:w="18"/><text x="24.6811%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="24.7310%" y="1077" width="0.0176%" height="15" fill="rgb(249,111,54)" fg:x="1402" fg:w="1"/><text x="24.9810%" y="1087.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="24.7310%" y="1061" width="0.0176%" height="15" fill="rgb(249,55,30)" fg:x="1402" fg:w="1"/><text x="24.9810%" y="1071.50"></text></g><g><title>AddCoins (7 samples, 0.12%)</title><rect x="24.7486%" y="1157" width="0.1235%" height="15" fill="rgb(237,47,42)" fg:x="1403" fg:w="7"/><text x="24.9986%" y="1167.50"></text></g><g><title>Coin::Coin (6 samples, 0.11%)</title><rect x="24.7663%" y="1141" width="0.1058%" height="15" fill="rgb(211,20,18)" fg:x="1404" fg:w="6"/><text x="25.0163%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (6 samples, 0.11%)</title><rect x="24.7663%" y="1125" width="0.1058%" height="15" fill="rgb(231,203,46)" fg:x="1404" fg:w="6"/><text x="25.0163%" y="1135.50"></text></g><g><title>CScript::CScript (6 samples, 0.11%)</title><rect x="24.7663%" y="1109" width="0.1058%" height="15" fill="rgb(237,142,3)" fg:x="1404" fg:w="6"/><text x="25.0163%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (6 samples, 0.11%)</title><rect x="24.7663%" y="1093" width="0.1058%" height="15" fill="rgb(241,107,1)" fg:x="1404" fg:w="6"/><text x="25.0163%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (6 samples, 0.11%)</title><rect x="24.7663%" y="1077" width="0.1058%" height="15" fill="rgb(229,83,13)" fg:x="1404" fg:w="6"/><text x="25.0163%" y="1087.50"></text></g><g><title>decltype  (5 samples, 0.09%)</title><rect x="24.8721%" y="1141" width="0.0882%" height="15" fill="rgb(241,91,40)" fg:x="1410" fg:w="5"/><text x="25.1221%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.09%)</title><rect x="24.8721%" y="1125" width="0.0882%" height="15" fill="rgb(225,3,45)" fg:x="1410" fg:w="5"/><text x="25.1221%" y="1135.50"></text></g><g><title>decltype  (5 samples, 0.09%)</title><rect x="24.8721%" y="1109" width="0.0882%" height="15" fill="rgb(244,223,14)" fg:x="1410" fg:w="5"/><text x="25.1221%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (5 samples, 0.09%)</title><rect x="24.8721%" y="1093" width="0.0882%" height="15" fill="rgb(224,124,37)" fg:x="1410" fg:w="5"/><text x="25.1221%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (5 samples, 0.09%)</title><rect x="24.8721%" y="1077" width="0.0882%" height="15" fill="rgb(251,171,30)" fg:x="1410" fg:w="5"/><text x="25.1221%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="24.8721%" y="1061" width="0.0882%" height="15" fill="rgb(236,46,54)" fg:x="1410" fg:w="5"/><text x="25.1221%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="24.8721%" y="1045" width="0.0882%" height="15" fill="rgb(245,213,5)" fg:x="1410" fg:w="5"/><text x="25.1221%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="24.8898%" y="1029" width="0.0706%" height="15" fill="rgb(230,144,27)" fg:x="1411" fg:w="4"/><text x="25.1398%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="24.9074%" y="1013" width="0.0529%" height="15" fill="rgb(220,86,6)" fg:x="1412" fg:w="3"/><text x="25.1574%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="24.9074%" y="997" width="0.0529%" height="15" fill="rgb(240,20,13)" fg:x="1412" fg:w="3"/><text x="25.1574%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="24.9074%" y="981" width="0.0529%" height="15" fill="rgb(217,89,34)" fg:x="1412" fg:w="3"/><text x="25.1574%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="24.9074%" y="965" width="0.0529%" height="15" fill="rgb(229,13,5)" fg:x="1412" fg:w="3"/><text x="25.1574%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="24.9250%" y="949" width="0.0353%" height="15" fill="rgb(244,67,35)" fg:x="1413" fg:w="2"/><text x="25.1750%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="24.9250%" y="933" width="0.0353%" height="15" fill="rgb(221,40,2)" fg:x="1413" fg:w="2"/><text x="25.1750%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9427%" y="917" width="0.0176%" height="15" fill="rgb(237,157,21)" fg:x="1414" fg:w="1"/><text x="25.1927%" y="927.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_Hash_node (2 samples, 0.04%)</title><rect x="24.9603%" y="1141" width="0.0353%" height="15" fill="rgb(222,94,11)" fg:x="1415" fg:w="2"/><text x="25.2103%" y="1151.50"></text></g><g><title>std::__detail::_Hash_node_base::_Hash_node_base (2 samples, 0.04%)</title><rect x="24.9603%" y="1125" width="0.0353%" height="15" fill="rgb(249,113,6)" fg:x="1415" fg:w="2"/><text x="25.2103%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="24.9603%" y="1109" width="0.0353%" height="15" fill="rgb(238,137,36)" fg:x="1415" fg:w="2"/><text x="25.2103%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="24.9603%" y="1093" width="0.0353%" height="15" fill="rgb(210,102,26)" fg:x="1415" fg:w="2"/><text x="25.2103%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="24.9603%" y="1077" width="0.0353%" height="15" fill="rgb(218,30,30)" fg:x="1415" fg:w="2"/><text x="25.2103%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="24.9603%" y="1061" width="0.0353%" height="15" fill="rgb(214,67,26)" fg:x="1415" fg:w="2"/><text x="25.2103%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9780%" y="1045" width="0.0176%" height="15" fill="rgb(251,9,53)" fg:x="1416" fg:w="1"/><text x="25.2280%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9780%" y="1029" width="0.0176%" height="15" fill="rgb(228,204,25)" fg:x="1416" fg:w="1"/><text x="25.2280%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (15 samples, 0.26%)</title><rect x="24.7486%" y="1173" width="0.2646%" height="15" fill="rgb(207,153,8)" fg:x="1403" fg:w="15"/><text x="24.9986%" y="1183.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (8 samples, 0.14%)</title><rect x="24.8721%" y="1157" width="0.1411%" height="15" fill="rgb(242,9,16)" fg:x="1410" fg:w="8"/><text x="25.1221%" y="1167.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="24.9956%" y="1141" width="0.0176%" height="15" fill="rgb(217,211,10)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1151.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::allocate (1 samples, 0.02%)</title><rect x="24.9956%" y="1125" width="0.0176%" height="15" fill="rgb(219,228,52)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1135.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.02%)</title><rect x="24.9956%" y="1109" width="0.0176%" height="15" fill="rgb(231,92,29)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1119.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Allocate (1 samples, 0.02%)</title><rect x="24.9956%" y="1093" width="0.0176%" height="15" fill="rgb(232,8,23)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1103.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::AllocateChunk (1 samples, 0.02%)</title><rect x="24.9956%" y="1077" width="0.0176%" height="15" fill="rgb(216,211,34)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1087.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="24.9956%" y="1061" width="0.0176%" height="15" fill="rgb(236,151,0)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1071.50"></text></g><g><title>__posix_memalign (1 samples, 0.02%)</title><rect x="24.9956%" y="1045" width="0.0176%" height="15" fill="rgb(209,168,3)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1055.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="24.9956%" y="1029" width="0.0176%" height="15" fill="rgb(208,129,28)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1039.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="24.9956%" y="1013" width="0.0176%" height="15" fill="rgb(229,78,22)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1023.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="24.9956%" y="997" width="0.0176%" height="15" fill="rgb(228,187,13)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="1007.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="24.9956%" y="981" width="0.0176%" height="15" fill="rgb(240,119,24)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9956%" y="965" width="0.0176%" height="15" fill="rgb(209,194,42)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9956%" y="949" width="0.0176%" height="15" fill="rgb(247,200,46)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9956%" y="933" width="0.0176%" height="15" fill="rgb(218,76,16)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9956%" y="917" width="0.0176%" height="15" fill="rgb(225,21,48)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9956%" y="901" width="0.0176%" height="15" fill="rgb(239,223,50)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9956%" y="885" width="0.0176%" height="15" fill="rgb(244,45,21)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="24.9956%" y="869" width="0.0176%" height="15" fill="rgb(232,33,43)" fg:x="1417" fg:w="1"/><text x="25.2456%" y="879.50"></text></g><g><title>CCoinsViewCache::AddCoin (63 samples, 1.11%)</title><rect x="23.9372%" y="1237" width="1.1113%" height="15" fill="rgb(209,8,3)" fg:x="1357" fg:w="63"/><text x="24.1872%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (63 samples, 1.11%)</title><rect x="23.9372%" y="1221" width="1.1113%" height="15" fill="rgb(214,25,53)" fg:x="1357" fg:w="63"/><text x="24.1872%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (63 samples, 1.11%)</title><rect x="23.9372%" y="1205" width="1.1113%" height="15" fill="rgb(254,186,54)" fg:x="1357" fg:w="63"/><text x="24.1872%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (63 samples, 1.11%)</title><rect x="23.9372%" y="1189" width="1.1113%" height="15" fill="rgb(208,174,49)" fg:x="1357" fg:w="63"/><text x="24.1872%" y="1199.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.04%)</title><rect x="25.0132%" y="1173" width="0.0353%" height="15" fill="rgb(233,191,51)" fg:x="1418" fg:w="2"/><text x="25.2632%" y="1183.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="25.0132%" y="1157" width="0.0353%" height="15" fill="rgb(222,134,10)" fg:x="1418" fg:w="2"/><text x="25.2632%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (2 samples, 0.04%)</title><rect x="25.0132%" y="1141" width="0.0353%" height="15" fill="rgb(230,226,20)" fg:x="1418" fg:w="2"/><text x="25.2632%" y="1151.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="25.0132%" y="1125" width="0.0353%" height="15" fill="rgb(251,111,25)" fg:x="1418" fg:w="2"/><text x="25.2632%" y="1135.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (2 samples, 0.04%)</title><rect x="25.0132%" y="1109" width="0.0353%" height="15" fill="rgb(224,40,46)" fg:x="1418" fg:w="2"/><text x="25.2632%" y="1119.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (2 samples, 0.04%)</title><rect x="25.0132%" y="1093" width="0.0353%" height="15" fill="rgb(236,108,47)" fg:x="1418" fg:w="2"/><text x="25.2632%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (1 samples, 0.02%)</title><rect x="25.0485%" y="1173" width="0.0176%" height="15" fill="rgb(234,93,0)" fg:x="1420" fg:w="1"/><text x="25.2985%" y="1183.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="25.0485%" y="1237" width="0.0353%" height="15" fill="rgb(224,213,32)" fg:x="1420" fg:w="2"/><text x="25.2985%" y="1247.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="25.0485%" y="1221" width="0.0353%" height="15" fill="rgb(251,11,48)" fg:x="1420" fg:w="2"/><text x="25.2985%" y="1231.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="25.0485%" y="1205" width="0.0353%" height="15" fill="rgb(236,173,5)" fg:x="1420" fg:w="2"/><text x="25.2985%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="25.0485%" y="1189" width="0.0353%" height="15" fill="rgb(230,95,12)" fg:x="1420" fg:w="2"/><text x="25.2985%" y="1199.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="25.0661%" y="1173" width="0.0176%" height="15" fill="rgb(232,209,1)" fg:x="1421" fg:w="1"/><text x="25.3161%" y="1183.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="25.3660%" y="1221" width="0.0176%" height="15" fill="rgb(232,6,1)" fg:x="1438" fg:w="1"/><text x="25.6160%" y="1231.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="25.3660%" y="1205" width="0.0176%" height="15" fill="rgb(210,224,50)" fg:x="1438" fg:w="1"/><text x="25.6160%" y="1215.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="25.3660%" y="1189" width="0.0176%" height="15" fill="rgb(228,127,35)" fg:x="1438" fg:w="1"/><text x="25.6160%" y="1199.50"></text></g><g><title>SipHashUint256Extra (29 samples, 0.51%)</title><rect x="25.0838%" y="1237" width="0.5116%" height="15" fill="rgb(245,102,45)" fg:x="1422" fg:w="29"/><text x="25.3338%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (12 samples, 0.21%)</title><rect x="25.3837%" y="1221" width="0.2117%" height="15" fill="rgb(214,1,49)" fg:x="1439" fg:w="12"/><text x="25.6337%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (12 samples, 0.21%)</title><rect x="25.3837%" y="1205" width="0.2117%" height="15" fill="rgb(226,163,40)" fg:x="1439" fg:w="12"/><text x="25.6337%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.07%)</title><rect x="25.5953%" y="1237" width="0.0706%" height="15" fill="rgb(239,212,28)" fg:x="1451" fg:w="4"/><text x="25.8453%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="25.6306%" y="1221" width="0.0353%" height="15" fill="rgb(220,20,13)" fg:x="1453" fg:w="2"/><text x="25.8806%" y="1231.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="25.6306%" y="1205" width="0.0353%" height="15" fill="rgb(210,164,35)" fg:x="1453" fg:w="2"/><text x="25.8806%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="25.6306%" y="1189" width="0.0353%" height="15" fill="rgb(248,109,41)" fg:x="1453" fg:w="2"/><text x="25.8806%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="25.6306%" y="1173" width="0.0353%" height="15" fill="rgb(238,23,50)" fg:x="1453" fg:w="2"/><text x="25.8806%" y="1183.50"></text></g><g><title>AddCoins (110 samples, 1.94%)</title><rect x="23.7432%" y="1253" width="1.9404%" height="15" fill="rgb(211,48,49)" fg:x="1346" fg:w="110"/><text x="23.9932%" y="1263.50">A..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="25.6659%" y="1237" width="0.0176%" height="15" fill="rgb(223,36,21)" fg:x="1455" fg:w="1"/><text x="25.9159%" y="1247.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="25.6659%" y="1221" width="0.0176%" height="15" fill="rgb(207,123,46)" fg:x="1455" fg:w="1"/><text x="25.9159%" y="1231.50"></text></g><g><title>CBlockIndex::GetAncestor (2 samples, 0.04%)</title><rect x="25.6835%" y="1253" width="0.0353%" height="15" fill="rgb(240,218,32)" fg:x="1456" fg:w="2"/><text x="25.9335%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~_Vector_base (2 samples, 0.04%)</title><rect x="25.7188%" y="1221" width="0.0353%" height="15" fill="rgb(252,5,43)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::_M_deallocate (2 samples, 0.04%)</title><rect x="25.7188%" y="1205" width="0.0353%" height="15" fill="rgb(252,84,19)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxUndo&gt; &gt;::deallocate (2 samples, 0.04%)</title><rect x="25.7188%" y="1189" width="0.0353%" height="15" fill="rgb(243,152,39)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1199.50"></text></g><g><title>std::allocator&lt;CTxUndo&gt;::deallocate (2 samples, 0.04%)</title><rect x="25.7188%" y="1173" width="0.0353%" height="15" fill="rgb(234,160,15)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;CTxUndo&gt;::deallocate (2 samples, 0.04%)</title><rect x="25.7188%" y="1157" width="0.0353%" height="15" fill="rgb(237,34,20)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="25.7188%" y="1141" width="0.0353%" height="15" fill="rgb(229,97,13)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1151.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="25.7188%" y="1125" width="0.0353%" height="15" fill="rgb(234,71,50)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1135.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.04%)</title><rect x="25.7188%" y="1109" width="0.0353%" height="15" fill="rgb(253,155,4)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1119.50"></text></g><g><title>malloc_consolidate (2 samples, 0.04%)</title><rect x="25.7188%" y="1093" width="0.0353%" height="15" fill="rgb(222,185,37)" fg:x="1458" fg:w="2"/><text x="25.9688%" y="1103.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~_Vector_base (4 samples, 0.07%)</title><rect x="25.7541%" y="1109" width="0.0706%" height="15" fill="rgb(251,177,13)" fg:x="1460" fg:w="4"/><text x="26.0041%" y="1119.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_deallocate (4 samples, 0.07%)</title><rect x="25.7541%" y="1093" width="0.0706%" height="15" fill="rgb(250,179,40)" fg:x="1460" fg:w="4"/><text x="26.0041%" y="1103.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="25.7541%" y="1077" width="0.0706%" height="15" fill="rgb(242,44,2)" fg:x="1460" fg:w="4"/><text x="26.0041%" y="1087.50"></text></g><g><title>std::allocator&lt;Coin&gt;::deallocate (4 samples, 0.07%)</title><rect x="25.7541%" y="1061" width="0.0706%" height="15" fill="rgb(216,177,13)" fg:x="1460" fg:w="4"/><text x="26.0041%" y="1071.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::deallocate (4 samples, 0.07%)</title><rect x="25.7541%" y="1045" width="0.0706%" height="15" fill="rgb(216,106,43)" fg:x="1460" fg:w="4"/><text x="26.0041%" y="1055.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="25.7541%" y="1029" width="0.0706%" height="15" fill="rgb(216,183,2)" fg:x="1460" fg:w="4"/><text x="26.0041%" y="1039.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="25.7541%" y="1013" width="0.0706%" height="15" fill="rgb(249,75,3)" fg:x="1460" fg:w="4"/><text x="26.0041%" y="1023.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3 samples, 0.05%)</title><rect x="25.7717%" y="997" width="0.0529%" height="15" fill="rgb(219,67,39)" fg:x="1461" fg:w="3"/><text x="26.0217%" y="1007.50"></text></g><g><title>malloc_consolidate (3 samples, 0.05%)</title><rect x="25.7717%" y="981" width="0.0529%" height="15" fill="rgb(253,228,2)" fg:x="1461" fg:w="3"/><text x="26.0217%" y="991.50"></text></g><g><title>CBlockUndo::~CBlockUndo (11 samples, 0.19%)</title><rect x="25.7188%" y="1253" width="0.1940%" height="15" fill="rgb(235,138,27)" fg:x="1458" fg:w="11"/><text x="25.9688%" y="1263.50"></text></g><g><title>std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt;::~vector (11 samples, 0.19%)</title><rect x="25.7188%" y="1237" width="0.1940%" height="15" fill="rgb(236,97,51)" fg:x="1458" fg:w="11"/><text x="25.9688%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*, CTxUndo&gt; (9 samples, 0.16%)</title><rect x="25.7541%" y="1221" width="0.1588%" height="15" fill="rgb(240,80,30)" fg:x="1460" fg:w="9"/><text x="26.0041%" y="1231.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo*&gt; (9 samples, 0.16%)</title><rect x="25.7541%" y="1205" width="0.1588%" height="15" fill="rgb(230,178,19)" fg:x="1460" fg:w="9"/><text x="26.0041%" y="1215.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxUndo*&gt; (9 samples, 0.16%)</title><rect x="25.7541%" y="1189" width="0.1588%" height="15" fill="rgb(210,190,27)" fg:x="1460" fg:w="9"/><text x="26.0041%" y="1199.50"></text></g><g><title>void std::_Destroy&lt;CTxUndo&gt; (9 samples, 0.16%)</title><rect x="25.7541%" y="1173" width="0.1588%" height="15" fill="rgb(222,107,31)" fg:x="1460" fg:w="9"/><text x="26.0041%" y="1183.50"></text></g><g><title>void std::destroy_at&lt;CTxUndo&gt; (9 samples, 0.16%)</title><rect x="25.7541%" y="1157" width="0.1588%" height="15" fill="rgb(216,127,34)" fg:x="1460" fg:w="9"/><text x="26.0041%" y="1167.50"></text></g><g><title>CTxUndo::~CTxUndo (9 samples, 0.16%)</title><rect x="25.7541%" y="1141" width="0.1588%" height="15" fill="rgb(234,116,52)" fg:x="1460" fg:w="9"/><text x="26.0041%" y="1151.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::~vector (9 samples, 0.16%)</title><rect x="25.7541%" y="1125" width="0.1588%" height="15" fill="rgb(222,124,15)" fg:x="1460" fg:w="9"/><text x="26.0041%" y="1135.50"></text></g><g><title>void std::_Destroy&lt;Coin*, Coin&gt; (5 samples, 0.09%)</title><rect x="25.8247%" y="1109" width="0.0882%" height="15" fill="rgb(231,179,28)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1119.50"></text></g><g><title>void std::_Destroy&lt;Coin*&gt; (5 samples, 0.09%)</title><rect x="25.8247%" y="1093" width="0.0882%" height="15" fill="rgb(226,93,45)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1103.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Coin*&gt; (5 samples, 0.09%)</title><rect x="25.8247%" y="1077" width="0.0882%" height="15" fill="rgb(215,8,51)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1087.50"></text></g><g><title>void std::_Destroy&lt;Coin&gt; (5 samples, 0.09%)</title><rect x="25.8247%" y="1061" width="0.0882%" height="15" fill="rgb(223,106,5)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1071.50"></text></g><g><title>void std::destroy_at&lt;Coin&gt; (5 samples, 0.09%)</title><rect x="25.8247%" y="1045" width="0.0882%" height="15" fill="rgb(250,191,5)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1055.50"></text></g><g><title>Coin::~Coin (5 samples, 0.09%)</title><rect x="25.8247%" y="1029" width="0.0882%" height="15" fill="rgb(242,132,44)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1039.50"></text></g><g><title>CTxOut::~CTxOut (5 samples, 0.09%)</title><rect x="25.8247%" y="1013" width="0.0882%" height="15" fill="rgb(251,152,29)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1023.50"></text></g><g><title>CScript::~CScript (5 samples, 0.09%)</title><rect x="25.8247%" y="997" width="0.0882%" height="15" fill="rgb(218,179,5)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (5 samples, 0.09%)</title><rect x="25.8247%" y="981" width="0.0882%" height="15" fill="rgb(227,67,19)" fg:x="1464" fg:w="5"/><text x="26.0747%" y="991.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="25.8599%" y="965" width="0.0529%" height="15" fill="rgb(233,119,31)" fg:x="1466" fg:w="3"/><text x="26.1099%" y="975.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="25.8599%" y="949" width="0.0529%" height="15" fill="rgb(241,120,22)" fg:x="1466" fg:w="3"/><text x="26.1099%" y="959.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="25.9129%" y="1173" width="0.0176%" height="15" fill="rgb(224,102,30)" fg:x="1469" fg:w="1"/><text x="26.1629%" y="1183.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="25.9129%" y="1189" width="0.0353%" height="15" fill="rgb(210,164,37)" fg:x="1469" fg:w="2"/><text x="26.1629%" y="1199.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="25.9305%" y="1173" width="0.0176%" height="15" fill="rgb(226,191,16)" fg:x="1470" fg:w="1"/><text x="26.1805%" y="1183.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="25.9481%" y="1157" width="0.0176%" height="15" fill="rgb(214,40,45)" fg:x="1471" fg:w="1"/><text x="26.1981%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="25.9658%" y="1157" width="0.0176%" height="15" fill="rgb(244,29,26)" fg:x="1472" fg:w="1"/><text x="26.2158%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (8 samples, 0.14%)</title><rect x="25.9129%" y="1237" width="0.1411%" height="15" fill="rgb(216,16,5)" fg:x="1469" fg:w="8"/><text x="26.1629%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (8 samples, 0.14%)</title><rect x="25.9129%" y="1221" width="0.1411%" height="15" fill="rgb(249,76,35)" fg:x="1469" fg:w="8"/><text x="26.1629%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (8 samples, 0.14%)</title><rect x="25.9129%" y="1205" width="0.1411%" height="15" fill="rgb(207,11,44)" fg:x="1469" fg:w="8"/><text x="26.1629%" y="1215.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.11%)</title><rect x="25.9481%" y="1189" width="0.1058%" height="15" fill="rgb(228,190,49)" fg:x="1471" fg:w="6"/><text x="26.1981%" y="1199.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.11%)</title><rect x="25.9481%" y="1173" width="0.1058%" height="15" fill="rgb(214,173,12)" fg:x="1471" fg:w="6"/><text x="26.1981%" y="1183.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="25.9834%" y="1157" width="0.0706%" height="15" fill="rgb(218,26,35)" fg:x="1473" fg:w="4"/><text x="26.2334%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="26.0363%" y="1141" width="0.0176%" height="15" fill="rgb(220,200,19)" fg:x="1476" fg:w="1"/><text x="26.2863%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="26.0363%" y="1125" width="0.0176%" height="15" fill="rgb(239,95,49)" fg:x="1476" fg:w="1"/><text x="26.2863%" y="1135.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="26.0540%" y="1237" width="0.0176%" height="15" fill="rgb(235,85,53)" fg:x="1477" fg:w="1"/><text x="26.3040%" y="1247.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="26.0540%" y="1221" width="0.0176%" height="15" fill="rgb(233,133,31)" fg:x="1477" fg:w="1"/><text x="26.3040%" y="1231.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="26.0716%" y="1237" width="0.0176%" height="15" fill="rgb(218,25,20)" fg:x="1478" fg:w="1"/><text x="26.3216%" y="1247.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="26.0716%" y="1221" width="0.0176%" height="15" fill="rgb(252,210,38)" fg:x="1478" fg:w="1"/><text x="26.3216%" y="1231.50"></text></g><g><title>CCoinsViewCache::AccessCoin (11 samples, 0.19%)</title><rect x="25.9129%" y="1253" width="0.1940%" height="15" fill="rgb(242,134,21)" fg:x="1469" fg:w="11"/><text x="26.1629%" y="1263.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="26.0893%" y="1237" width="0.0176%" height="15" fill="rgb(213,28,48)" fg:x="1479" fg:w="1"/><text x="26.3393%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="26.0893%" y="1221" width="0.0176%" height="15" fill="rgb(250,196,2)" fg:x="1479" fg:w="1"/><text x="26.3393%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="26.0893%" y="1205" width="0.0176%" height="15" fill="rgb(227,5,17)" fg:x="1479" fg:w="1"/><text x="26.3393%" y="1215.50"></text></g><g><title>CScript::IsUnspendable (1 samples, 0.02%)</title><rect x="26.1245%" y="1237" width="0.0176%" height="15" fill="rgb(221,226,24)" fg:x="1481" fg:w="1"/><text x="26.3745%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="26.1245%" y="1221" width="0.0176%" height="15" fill="rgb(211,5,48)" fg:x="1481" fg:w="1"/><text x="26.3745%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="26.1245%" y="1205" width="0.0176%" height="15" fill="rgb(219,150,6)" fg:x="1481" fg:w="1"/><text x="26.3745%" y="1215.50"></text></g><g><title>CCoinsViewCache::AddCoin (3 samples, 0.05%)</title><rect x="26.1069%" y="1253" width="0.0529%" height="15" fill="rgb(251,46,16)" fg:x="1480" fg:w="3"/><text x="26.3569%" y="1263.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="26.1422%" y="1237" width="0.0176%" height="15" fill="rgb(220,204,40)" fg:x="1482" fg:w="1"/><text x="26.3922%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="26.1598%" y="1253" width="0.0176%" height="15" fill="rgb(211,85,2)" fg:x="1483" fg:w="1"/><text x="26.4098%" y="1263.50"></text></g><g><title>CCoinsViewCache::GetCoin (9 samples, 0.16%)</title><rect x="26.1775%" y="1253" width="0.1588%" height="15" fill="rgb(229,17,7)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1263.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (9 samples, 0.16%)</title><rect x="26.1775%" y="1237" width="0.1588%" height="15" fill="rgb(239,72,28)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1247.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (9 samples, 0.16%)</title><rect x="26.1775%" y="1221" width="0.1588%" height="15" fill="rgb(230,47,54)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1231.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (9 samples, 0.16%)</title><rect x="26.1775%" y="1205" width="0.1588%" height="15" fill="rgb(214,50,8)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (9 samples, 0.16%)</title><rect x="26.1775%" y="1189" width="0.1588%" height="15" fill="rgb(216,198,43)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1199.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (9 samples, 0.16%)</title><rect x="26.1775%" y="1173" width="0.1588%" height="15" fill="rgb(234,20,35)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (9 samples, 0.16%)</title><rect x="26.1775%" y="1157" width="0.1588%" height="15" fill="rgb(254,45,19)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1167.50"></text></g><g><title>Coin::Coin (9 samples, 0.16%)</title><rect x="26.1775%" y="1141" width="0.1588%" height="15" fill="rgb(219,14,44)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1151.50"></text></g><g><title>CTxOut::CTxOut (9 samples, 0.16%)</title><rect x="26.1775%" y="1125" width="0.1588%" height="15" fill="rgb(217,220,26)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1135.50"></text></g><g><title>CScript::CScript (9 samples, 0.16%)</title><rect x="26.1775%" y="1109" width="0.1588%" height="15" fill="rgb(213,158,28)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (9 samples, 0.16%)</title><rect x="26.1775%" y="1093" width="0.1588%" height="15" fill="rgb(252,51,52)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1103.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (9 samples, 0.16%)</title><rect x="26.1775%" y="1077" width="0.1588%" height="15" fill="rgb(246,89,16)" fg:x="1484" fg:w="9"/><text x="26.4275%" y="1087.50"></text></g><g><title>CCoinsViewCache::SpendCoin (2 samples, 0.04%)</title><rect x="26.3362%" y="1253" width="0.0353%" height="15" fill="rgb(216,158,49)" fg:x="1493" fg:w="2"/><text x="26.5862%" y="1263.50"></text></g><g><title>CCoinsCacheEntry::AddFlags (1 samples, 0.02%)</title><rect x="26.3539%" y="1237" width="0.0176%" height="15" fill="rgb(236,107,19)" fg:x="1494" fg:w="1"/><text x="26.6039%" y="1247.50"></text></g><g><title>CScript::IsWitnessProgram (3 samples, 0.05%)</title><rect x="26.3715%" y="1253" width="0.0529%" height="15" fill="rgb(228,185,30)" fg:x="1495" fg:w="3"/><text x="26.6215%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1237" width="0.0176%" height="15" fill="rgb(246,134,8)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1247.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1221" width="0.0176%" height="15" fill="rgb(214,143,50)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1231.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1205" width="0.0176%" height="15" fill="rgb(228,75,8)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1215.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1189" width="0.0176%" height="15" fill="rgb(207,175,4)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1199.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1173" width="0.0176%" height="15" fill="rgb(205,108,24)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1183.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1157" width="0.0176%" height="15" fill="rgb(244,120,49)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1167.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1141" width="0.0176%" height="15" fill="rgb(223,47,38)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1125" width="0.0176%" height="15" fill="rgb(229,179,11)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1109" width="0.0176%" height="15" fill="rgb(231,122,1)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="26.4068%" y="1093" width="0.0176%" height="15" fill="rgb(245,119,9)" fg:x="1497" fg:w="1"/><text x="26.6568%" y="1103.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="26.4244%" y="1253" width="0.0176%" height="15" fill="rgb(241,163,25)" fg:x="1498" fg:w="1"/><text x="26.6744%" y="1263.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="26.4244%" y="1237" width="0.0176%" height="15" fill="rgb(217,214,3)" fg:x="1498" fg:w="1"/><text x="26.6744%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="26.4597%" y="1157" width="0.0176%" height="15" fill="rgb(240,86,28)" fg:x="1500" fg:w="1"/><text x="26.7097%" y="1167.50"></text></g><g><title>CCoinsViewCache::GetCoin (2 samples, 0.04%)</title><rect x="26.4773%" y="1157" width="0.0353%" height="15" fill="rgb(215,47,9)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1167.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (2 samples, 0.04%)</title><rect x="26.4773%" y="1141" width="0.0353%" height="15" fill="rgb(252,25,45)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1151.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (2 samples, 0.04%)</title><rect x="26.4773%" y="1125" width="0.0353%" height="15" fill="rgb(251,164,9)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1135.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="26.4773%" y="1109" width="0.0353%" height="15" fill="rgb(233,194,0)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="26.4773%" y="1093" width="0.0353%" height="15" fill="rgb(249,111,24)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1103.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="26.4773%" y="1077" width="0.0353%" height="15" fill="rgb(250,223,3)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (2 samples, 0.04%)</title><rect x="26.4773%" y="1061" width="0.0353%" height="15" fill="rgb(236,178,37)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1071.50"></text></g><g><title>Coin::Coin (2 samples, 0.04%)</title><rect x="26.4773%" y="1045" width="0.0353%" height="15" fill="rgb(241,158,50)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1055.50"></text></g><g><title>CTxOut::CTxOut (2 samples, 0.04%)</title><rect x="26.4773%" y="1029" width="0.0353%" height="15" fill="rgb(213,121,41)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1039.50"></text></g><g><title>CScript::CScript (2 samples, 0.04%)</title><rect x="26.4773%" y="1013" width="0.0353%" height="15" fill="rgb(240,92,3)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (2 samples, 0.04%)</title><rect x="26.4773%" y="997" width="0.0353%" height="15" fill="rgb(205,123,3)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="1007.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (2 samples, 0.04%)</title><rect x="26.4773%" y="981" width="0.0353%" height="15" fill="rgb(205,97,47)" fg:x="1501" fg:w="2"/><text x="26.7273%" y="991.50"></text></g><g><title>CCoinsViewCache::HaveCoin (1 samples, 0.02%)</title><rect x="26.5126%" y="1141" width="0.0176%" height="15" fill="rgb(247,152,14)" fg:x="1503" fg:w="1"/><text x="26.7626%" y="1151.50"></text></g><g><title>CCoinsViewCache::HaveInputs (2 samples, 0.04%)</title><rect x="26.5126%" y="1157" width="0.0353%" height="15" fill="rgb(248,195,53)" fg:x="1503" fg:w="2"/><text x="26.7626%" y="1167.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="26.5303%" y="1141" width="0.0176%" height="15" fill="rgb(226,201,16)" fg:x="1504" fg:w="1"/><text x="26.7803%" y="1151.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="26.5303%" y="1125" width="0.0176%" height="15" fill="rgb(205,98,0)" fg:x="1504" fg:w="1"/><text x="26.7803%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (9 samples, 0.16%)</title><rect x="26.4597%" y="1173" width="0.1588%" height="15" fill="rgb(214,191,48)" fg:x="1500" fg:w="9"/><text x="26.7097%" y="1183.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="26.5479%" y="1157" width="0.0706%" height="15" fill="rgb(237,112,39)" fg:x="1505" fg:w="4"/><text x="26.7979%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="26.5655%" y="1141" width="0.0529%" height="15" fill="rgb(247,203,27)" fg:x="1506" fg:w="3"/><text x="26.8155%" y="1151.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="26.5655%" y="1125" width="0.0529%" height="15" fill="rgb(235,124,28)" fg:x="1506" fg:w="3"/><text x="26.8155%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="26.6185%" y="1141" width="0.0176%" height="15" fill="rgb(208,207,46)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="26.6185%" y="1125" width="0.0176%" height="15" fill="rgb(234,176,4)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="26.6185%" y="1109" width="0.0176%" height="15" fill="rgb(230,133,28)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6185%" y="1093" width="0.0176%" height="15" fill="rgb(211,137,40)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6185%" y="1077" width="0.0176%" height="15" fill="rgb(254,35,13)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6185%" y="1061" width="0.0176%" height="15" fill="rgb(225,49,51)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6185%" y="1045" width="0.0176%" height="15" fill="rgb(251,10,15)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1055.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="26.6185%" y="1029" width="0.0176%" height="15" fill="rgb(228,207,15)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="26.6185%" y="1013" width="0.0176%" height="15" fill="rgb(241,99,19)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1023.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="26.6185%" y="997" width="0.0176%" height="15" fill="rgb(207,104,49)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="26.6185%" y="981" width="0.0176%" height="15" fill="rgb(234,99,18)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="26.6185%" y="965" width="0.0176%" height="15" fill="rgb(213,191,49)" fg:x="1509" fg:w="1"/><text x="26.8685%" y="975.50"></text></g><g><title>CCoinsViewCache::FetchCoin (13 samples, 0.23%)</title><rect x="26.4421%" y="1221" width="0.2293%" height="15" fill="rgb(210,226,19)" fg:x="1499" fg:w="13"/><text x="26.6921%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (12 samples, 0.21%)</title><rect x="26.4597%" y="1205" width="0.2117%" height="15" fill="rgb(229,97,18)" fg:x="1500" fg:w="12"/><text x="26.7097%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (12 samples, 0.21%)</title><rect x="26.4597%" y="1189" width="0.2117%" height="15" fill="rgb(211,167,15)" fg:x="1500" fg:w="12"/><text x="26.7097%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="26.6185%" y="1173" width="0.0529%" height="15" fill="rgb(210,169,34)" fg:x="1509" fg:w="3"/><text x="26.8685%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="26.6185%" y="1157" width="0.0529%" height="15" fill="rgb(241,121,31)" fg:x="1509" fg:w="3"/><text x="26.8685%" y="1167.50"></text></g><g><title>CCoinsViewCache::HaveInputs (2 samples, 0.04%)</title><rect x="26.6361%" y="1141" width="0.0353%" height="15" fill="rgb(232,40,11)" fg:x="1510" fg:w="2"/><text x="26.8861%" y="1151.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="26.6537%" y="1125" width="0.0176%" height="15" fill="rgb(205,86,26)" fg:x="1511" fg:w="1"/><text x="26.9037%" y="1135.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="26.6714%" y="1221" width="0.0176%" height="15" fill="rgb(231,126,28)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1231.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="26.6714%" y="1205" width="0.0176%" height="15" fill="rgb(219,221,18)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1215.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="26.6714%" y="1189" width="0.0176%" height="15" fill="rgb(211,40,0)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6714%" y="1173" width="0.0176%" height="15" fill="rgb(239,85,43)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6714%" y="1157" width="0.0176%" height="15" fill="rgb(231,55,21)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6714%" y="1141" width="0.0176%" height="15" fill="rgb(225,184,43)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="26.6714%" y="1125" width="0.0176%" height="15" fill="rgb(251,158,41)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1135.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="26.6714%" y="1109" width="0.0176%" height="15" fill="rgb(234,159,37)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1119.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="26.6714%" y="1093" width="0.0176%" height="15" fill="rgb(216,204,22)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1103.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="26.6714%" y="1077" width="0.0176%" height="15" fill="rgb(214,17,3)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="26.6714%" y="1061" width="0.0176%" height="15" fill="rgb(212,111,17)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1071.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="26.6714%" y="1045" width="0.0176%" height="15" fill="rgb(221,157,24)" fg:x="1512" fg:w="1"/><text x="26.9214%" y="1055.50"></text></g><g><title>CCoinsViewCache::AccessCoin (17 samples, 0.30%)</title><rect x="26.4421%" y="1237" width="0.2999%" height="15" fill="rgb(252,16,13)" fg:x="1499" fg:w="17"/><text x="26.6921%" y="1247.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="26.6890%" y="1221" width="0.0529%" height="15" fill="rgb(221,62,2)" fg:x="1513" fg:w="3"/><text x="26.9390%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="26.7243%" y="1205" width="0.0176%" height="15" fill="rgb(247,87,22)" fg:x="1515" fg:w="1"/><text x="26.9743%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="26.7243%" y="1189" width="0.0176%" height="15" fill="rgb(215,73,9)" fg:x="1515" fg:w="1"/><text x="26.9743%" y="1199.50"></text></g><g><title>Coin::DynamicMemoryUsage (1 samples, 0.02%)</title><rect x="26.7772%" y="1221" width="0.0176%" height="15" fill="rgb(207,175,33)" fg:x="1518" fg:w="1"/><text x="27.0272%" y="1231.50"></text></g><g><title>DynamicUsage&lt;28, unsigned char, unsigned int, int&gt; (1 samples, 0.02%)</title><rect x="26.7772%" y="1205" width="0.0176%" height="15" fill="rgb(243,129,54)" fg:x="1518" fg:w="1"/><text x="27.0272%" y="1215.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="26.7772%" y="1189" width="0.0176%" height="15" fill="rgb(227,119,45)" fg:x="1518" fg:w="1"/><text x="27.0272%" y="1199.50"></text></g><g><title>CCoinsViewCache::FetchCoin (5 samples, 0.09%)</title><rect x="26.7419%" y="1237" width="0.0882%" height="15" fill="rgb(205,109,36)" fg:x="1516" fg:w="5"/><text x="26.9919%" y="1247.50"></text></g><g><title>Coin::operator= (2 samples, 0.04%)</title><rect x="26.7948%" y="1221" width="0.0353%" height="15" fill="rgb(205,6,39)" fg:x="1519" fg:w="2"/><text x="27.0448%" y="1231.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="26.8125%" y="1205" width="0.0176%" height="15" fill="rgb(221,32,16)" fg:x="1520" fg:w="1"/><text x="27.0625%" y="1215.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="26.8125%" y="1189" width="0.0176%" height="15" fill="rgb(228,144,50)" fg:x="1520" fg:w="1"/><text x="27.0625%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="26.8125%" y="1173" width="0.0176%" height="15" fill="rgb(229,201,53)" fg:x="1520" fg:w="1"/><text x="27.0625%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (2 samples, 0.04%)</title><rect x="26.8301%" y="1061" width="0.0353%" height="15" fill="rgb(249,153,27)" fg:x="1521" fg:w="2"/><text x="27.0801%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (2 samples, 0.04%)</title><rect x="26.8301%" y="1045" width="0.0353%" height="15" fill="rgb(227,106,25)" fg:x="1521" fg:w="2"/><text x="27.0801%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (2 samples, 0.04%)</title><rect x="26.8301%" y="1029" width="0.0353%" height="15" fill="rgb(230,65,29)" fg:x="1521" fg:w="2"/><text x="27.0801%" y="1039.50"></text></g><g><title>CCoinsViewCache::GetCoin (16 samples, 0.28%)</title><rect x="26.8301%" y="1237" width="0.2822%" height="15" fill="rgb(221,57,46)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1247.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (16 samples, 0.28%)</title><rect x="26.8301%" y="1221" width="0.2822%" height="15" fill="rgb(229,161,17)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1231.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (16 samples, 0.28%)</title><rect x="26.8301%" y="1205" width="0.2822%" height="15" fill="rgb(222,213,11)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1215.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (16 samples, 0.28%)</title><rect x="26.8301%" y="1189" width="0.2822%" height="15" fill="rgb(235,35,13)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1199.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (16 samples, 0.28%)</title><rect x="26.8301%" y="1173" width="0.2822%" height="15" fill="rgb(233,158,34)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1183.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (16 samples, 0.28%)</title><rect x="26.8301%" y="1157" width="0.2822%" height="15" fill="rgb(215,151,48)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1167.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (16 samples, 0.28%)</title><rect x="26.8301%" y="1141" width="0.2822%" height="15" fill="rgb(229,84,14)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1151.50"></text></g><g><title>Coin::Coin (16 samples, 0.28%)</title><rect x="26.8301%" y="1125" width="0.2822%" height="15" fill="rgb(229,68,14)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1135.50"></text></g><g><title>CTxOut::CTxOut (16 samples, 0.28%)</title><rect x="26.8301%" y="1109" width="0.2822%" height="15" fill="rgb(243,106,26)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1119.50"></text></g><g><title>CScript::CScript (16 samples, 0.28%)</title><rect x="26.8301%" y="1093" width="0.2822%" height="15" fill="rgb(206,45,38)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (16 samples, 0.28%)</title><rect x="26.8301%" y="1077" width="0.2822%" height="15" fill="rgb(226,6,15)" fg:x="1521" fg:w="16"/><text x="27.0801%" y="1087.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (14 samples, 0.25%)</title><rect x="26.8654%" y="1061" width="0.2470%" height="15" fill="rgb(232,22,54)" fg:x="1523" fg:w="14"/><text x="27.1154%" y="1071.50"></text></g><g><title>AddCoins (1 samples, 0.02%)</title><rect x="27.1124%" y="1205" width="0.0176%" height="15" fill="rgb(229,222,32)" fg:x="1537" fg:w="1"/><text x="27.3624%" y="1215.50"></text></g><g><title>CCoinsViewCache::AddCoin (1 samples, 0.02%)</title><rect x="27.1300%" y="1205" width="0.0176%" height="15" fill="rgb(228,62,29)" fg:x="1538" fg:w="1"/><text x="27.3800%" y="1215.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="27.1300%" y="1189" width="0.0176%" height="15" fill="rgb(251,103,34)" fg:x="1538" fg:w="1"/><text x="27.3800%" y="1199.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="27.1300%" y="1173" width="0.0176%" height="15" fill="rgb(233,12,30)" fg:x="1538" fg:w="1"/><text x="27.3800%" y="1183.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="27.1300%" y="1157" width="0.0176%" height="15" fill="rgb(238,52,0)" fg:x="1538" fg:w="1"/><text x="27.3800%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="27.1300%" y="1141" width="0.0176%" height="15" fill="rgb(223,98,5)" fg:x="1538" fg:w="1"/><text x="27.3800%" y="1151.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="27.1653%" y="1029" width="0.0176%" height="15" fill="rgb(228,75,37)" fg:x="1540" fg:w="1"/><text x="27.4153%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="27.1829%" y="997" width="0.0529%" height="15" fill="rgb(205,115,49)" fg:x="1541" fg:w="3"/><text x="27.4329%" y="1007.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.04%)</title><rect x="27.2006%" y="981" width="0.0353%" height="15" fill="rgb(250,154,43)" fg:x="1542" fg:w="2"/><text x="27.4506%" y="991.50"></text></g><g><title>leveldb::InternalKey::Encode (1 samples, 0.02%)</title><rect x="27.2711%" y="981" width="0.0176%" height="15" fill="rgb(226,43,29)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="965" width="0.0176%" height="15" fill="rgb(249,228,39)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="949" width="0.0176%" height="15" fill="rgb(216,79,43)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="933" width="0.0176%" height="15" fill="rgb(228,95,12)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="917" width="0.0176%" height="15" fill="rgb(249,221,15)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="901" width="0.0176%" height="15" fill="rgb(233,34,13)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="885" width="0.0176%" height="15" fill="rgb(214,103,39)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="895.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="27.2711%" y="869" width="0.0176%" height="15" fill="rgb(251,126,39)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="853" width="0.0176%" height="15" fill="rgb(214,216,36)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="837" width="0.0176%" height="15" fill="rgb(220,221,8)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="27.2711%" y="821" width="0.0176%" height="15" fill="rgb(240,216,3)" fg:x="1546" fg:w="1"/><text x="27.5211%" y="831.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="27.3240%" y="965" width="0.0529%" height="15" fill="rgb(232,218,17)" fg:x="1549" fg:w="3"/><text x="27.5740%" y="975.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="27.3593%" y="949" width="0.0176%" height="15" fill="rgb(229,163,45)" fg:x="1551" fg:w="1"/><text x="27.6093%" y="959.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="27.3593%" y="933" width="0.0176%" height="15" fill="rgb(231,110,42)" fg:x="1551" fg:w="1"/><text x="27.6093%" y="943.50"></text></g><g><title>leveldb::FindFile (3 samples, 0.05%)</title><rect x="27.3770%" y="965" width="0.0529%" height="15" fill="rgb(208,170,48)" fg:x="1552" fg:w="3"/><text x="27.6270%" y="975.50"></text></g><g><title>leveldb::FindFile (13 samples, 0.23%)</title><rect x="27.2358%" y="997" width="0.2293%" height="15" fill="rgb(239,116,25)" fg:x="1544" fg:w="13"/><text x="27.4858%" y="1007.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (10 samples, 0.18%)</title><rect x="27.2888%" y="981" width="0.1764%" height="15" fill="rgb(219,200,50)" fg:x="1547" fg:w="10"/><text x="27.5388%" y="991.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="27.4299%" y="965" width="0.0353%" height="15" fill="rgb(245,200,0)" fg:x="1555" fg:w="2"/><text x="27.6799%" y="975.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="27.4652%" y="997" width="0.0176%" height="15" fill="rgb(245,119,33)" fg:x="1557" fg:w="1"/><text x="27.7152%" y="1007.50"></text></g><g><title>leveldb::MemTable::Get (1 samples, 0.02%)</title><rect x="27.4828%" y="997" width="0.0176%" height="15" fill="rgb(231,125,12)" fg:x="1558" fg:w="1"/><text x="27.7328%" y="1007.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="27.5004%" y="981" width="0.0176%" height="15" fill="rgb(216,96,41)" fg:x="1559" fg:w="1"/><text x="27.7504%" y="991.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="27.5004%" y="965" width="0.0176%" height="15" fill="rgb(248,43,45)" fg:x="1559" fg:w="1"/><text x="27.7504%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="27.5004%" y="949" width="0.0176%" height="15" fill="rgb(217,222,7)" fg:x="1559" fg:w="1"/><text x="27.7504%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="27.5181%" y="965" width="0.0176%" height="15" fill="rgb(233,28,6)" fg:x="1560" fg:w="1"/><text x="27.7681%" y="975.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="27.5181%" y="949" width="0.0176%" height="15" fill="rgb(231,218,15)" fg:x="1560" fg:w="1"/><text x="27.7681%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (2 samples, 0.04%)</title><rect x="27.5357%" y="965" width="0.0353%" height="15" fill="rgb(226,171,48)" fg:x="1561" fg:w="2"/><text x="27.7857%" y="975.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (1 samples, 0.02%)</title><rect x="27.5534%" y="949" width="0.0176%" height="15" fill="rgb(235,201,9)" fg:x="1562" fg:w="1"/><text x="27.8034%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Release (1 samples, 0.02%)</title><rect x="27.5534%" y="933" width="0.0176%" height="15" fill="rgb(217,80,15)" fg:x="1562" fg:w="1"/><text x="27.8034%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="27.5710%" y="965" width="0.0176%" height="15" fill="rgb(219,152,8)" fg:x="1563" fg:w="1"/><text x="27.8210%" y="975.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="27.5710%" y="949" width="0.0176%" height="15" fill="rgb(243,107,38)" fg:x="1563" fg:w="1"/><text x="27.8210%" y="959.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="27.5710%" y="933" width="0.0176%" height="15" fill="rgb(231,17,5)" fg:x="1563" fg:w="1"/><text x="27.8210%" y="943.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="27.5886%" y="965" width="0.0176%" height="15" fill="rgb(209,25,54)" fg:x="1564" fg:w="1"/><text x="27.8386%" y="975.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="27.6063%" y="965" width="0.0176%" height="15" fill="rgb(219,0,2)" fg:x="1565" fg:w="1"/><text x="27.8563%" y="975.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="27.6063%" y="949" width="0.0176%" height="15" fill="rgb(246,9,5)" fg:x="1565" fg:w="1"/><text x="27.8563%" y="959.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="27.6416%" y="949" width="0.0176%" height="15" fill="rgb(226,159,4)" fg:x="1567" fg:w="1"/><text x="27.8916%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (44 samples, 0.78%)</title><rect x="27.6592%" y="949" width="0.7762%" height="15" fill="rgb(219,175,34)" fg:x="1568" fg:w="44"/><text x="27.9092%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="28.4354%" y="949" width="0.0529%" height="15" fill="rgb(236,10,46)" fg:x="1612" fg:w="3"/><text x="28.6854%" y="959.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.04%)</title><rect x="28.4530%" y="933" width="0.0353%" height="15" fill="rgb(240,211,16)" fg:x="1613" fg:w="2"/><text x="28.7030%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="28.4883%" y="949" width="0.0176%" height="15" fill="rgb(205,3,43)" fg:x="1615" fg:w="1"/><text x="28.7383%" y="959.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (6 samples, 0.11%)</title><rect x="28.5059%" y="949" width="0.1058%" height="15" fill="rgb(245,7,22)" fg:x="1616" fg:w="6"/><text x="28.7559%" y="959.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.04%)</title><rect x="28.5765%" y="933" width="0.0353%" height="15" fill="rgb(239,132,32)" fg:x="1620" fg:w="2"/><text x="28.8265%" y="943.50"></text></g><g><title>DecodeEntry (2 samples, 0.04%)</title><rect x="28.6647%" y="933" width="0.0353%" height="15" fill="rgb(228,202,34)" fg:x="1625" fg:w="2"/><text x="28.9147%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="28.6823%" y="917" width="0.0176%" height="15" fill="rgb(254,200,22)" fg:x="1626" fg:w="1"/><text x="28.9323%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="28.6823%" y="901" width="0.0176%" height="15" fill="rgb(219,10,39)" fg:x="1626" fg:w="1"/><text x="28.9323%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="28.6823%" y="885" width="0.0176%" height="15" fill="rgb(226,210,39)" fg:x="1626" fg:w="1"/><text x="28.9323%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="28.6823%" y="869" width="0.0176%" height="15" fill="rgb(208,219,16)" fg:x="1626" fg:w="1"/><text x="28.9323%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="28.6823%" y="853" width="0.0176%" height="15" fill="rgb(216,158,51)" fg:x="1626" fg:w="1"/><text x="28.9323%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="28.6823%" y="837" width="0.0176%" height="15" fill="rgb(233,14,44)" fg:x="1626" fg:w="1"/><text x="28.9323%" y="847.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="28.6823%" y="821" width="0.0176%" height="15" fill="rgb(237,97,39)" fg:x="1626" fg:w="1"/><text x="28.9323%" y="831.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.04%)</title><rect x="28.9998%" y="917" width="0.0353%" height="15" fill="rgb(218,198,43)" fg:x="1644" fg:w="2"/><text x="29.2498%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Compare (1 samples, 0.02%)</title><rect x="29.0175%" y="901" width="0.0176%" height="15" fill="rgb(231,104,20)" fg:x="1645" fg:w="1"/><text x="29.2675%" y="911.50"></text></g><g><title>__memcmp_evex_movbe (7 samples, 0.12%)</title><rect x="29.0351%" y="869" width="0.1235%" height="15" fill="rgb(254,36,13)" fg:x="1646" fg:w="7"/><text x="29.2851%" y="879.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (8 samples, 0.14%)</title><rect x="29.0351%" y="901" width="0.1411%" height="15" fill="rgb(248,14,50)" fg:x="1646" fg:w="8"/><text x="29.2851%" y="911.50"></text></g><g><title>leveldb::Slice::compare (8 samples, 0.14%)</title><rect x="29.0351%" y="885" width="0.1411%" height="15" fill="rgb(217,107,29)" fg:x="1646" fg:w="8"/><text x="29.2851%" y="895.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="29.1586%" y="869" width="0.0176%" height="15" fill="rgb(251,169,33)" fg:x="1653" fg:w="1"/><text x="29.4086%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Seek (5 samples, 0.09%)</title><rect x="29.1762%" y="901" width="0.0882%" height="15" fill="rgb(217,108,32)" fg:x="1654" fg:w="5"/><text x="29.4262%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="29.2644%" y="901" width="0.0176%" height="15" fill="rgb(219,66,42)" fg:x="1659" fg:w="1"/><text x="29.5144%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.26%)</title><rect x="29.0351%" y="917" width="0.2646%" height="15" fill="rgb(206,180,7)" fg:x="1646" fg:w="15"/><text x="29.2851%" y="927.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="29.2821%" y="901" width="0.0176%" height="15" fill="rgb(208,226,31)" fg:x="1660" fg:w="1"/><text x="29.5321%" y="911.50"></text></g><g><title>leveldb::Block::Iter::Compare (35 samples, 0.62%)</title><rect x="28.6999%" y="933" width="0.6174%" height="15" fill="rgb(218,26,49)" fg:x="1627" fg:w="35"/><text x="28.9499%" y="943.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="29.2997%" y="917" width="0.0176%" height="15" fill="rgb(233,197,48)" fg:x="1661" fg:w="1"/><text x="29.5497%" y="927.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="29.3173%" y="917" width="0.0706%" height="15" fill="rgb(252,181,51)" fg:x="1662" fg:w="4"/><text x="29.5673%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="901" width="0.0529%" height="15" fill="rgb(253,90,19)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="885" width="0.0529%" height="15" fill="rgb(215,171,30)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="869" width="0.0529%" height="15" fill="rgb(214,222,9)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="853" width="0.0529%" height="15" fill="rgb(223,3,22)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="837" width="0.0529%" height="15" fill="rgb(225,196,46)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="821" width="0.0529%" height="15" fill="rgb(209,110,37)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="805" width="0.0529%" height="15" fill="rgb(249,89,12)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="815.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="789" width="0.0529%" height="15" fill="rgb(226,27,33)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="773" width="0.0529%" height="15" fill="rgb(213,82,22)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="783.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="757" width="0.0529%" height="15" fill="rgb(248,140,0)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="741" width="0.0529%" height="15" fill="rgb(228,106,3)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="29.3350%" y="725" width="0.0529%" height="15" fill="rgb(209,23,37)" fg:x="1663" fg:w="3"/><text x="29.5850%" y="735.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="29.3879%" y="917" width="0.0176%" height="15" fill="rgb(241,93,50)" fg:x="1666" fg:w="1"/><text x="29.6379%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="29.4055%" y="917" width="0.0353%" height="15" fill="rgb(253,46,43)" fg:x="1667" fg:w="2"/><text x="29.6555%" y="927.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="29.4232%" y="901" width="0.0176%" height="15" fill="rgb(226,206,43)" fg:x="1668" fg:w="1"/><text x="29.6732%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="29.4408%" y="885" width="0.0176%" height="15" fill="rgb(217,54,7)" fg:x="1669" fg:w="1"/><text x="29.6908%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="29.4408%" y="869" width="0.0176%" height="15" fill="rgb(223,5,52)" fg:x="1669" fg:w="1"/><text x="29.6908%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="29.4408%" y="853" width="0.0176%" height="15" fill="rgb(206,52,46)" fg:x="1669" fg:w="1"/><text x="29.6908%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="29.4408%" y="837" width="0.0176%" height="15" fill="rgb(253,136,11)" fg:x="1669" fg:w="1"/><text x="29.6908%" y="847.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.04%)</title><rect x="29.4408%" y="901" width="0.0353%" height="15" fill="rgb(208,106,33)" fg:x="1669" fg:w="2"/><text x="29.6908%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="29.4585%" y="885" width="0.0176%" height="15" fill="rgb(206,54,4)" fg:x="1670" fg:w="1"/><text x="29.7085%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="29.4585%" y="869" width="0.0176%" height="15" fill="rgb(213,3,15)" fg:x="1670" fg:w="1"/><text x="29.7085%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="29.4585%" y="853" width="0.0176%" height="15" fill="rgb(252,211,39)" fg:x="1670" fg:w="1"/><text x="29.7085%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="29.4585%" y="837" width="0.0176%" height="15" fill="rgb(223,6,36)" fg:x="1670" fg:w="1"/><text x="29.7085%" y="847.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="29.4585%" y="821" width="0.0176%" height="15" fill="rgb(252,169,45)" fg:x="1670" fg:w="1"/><text x="29.7085%" y="831.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="29.4937%" y="853" width="0.0353%" height="15" fill="rgb(212,48,26)" fg:x="1672" fg:w="2"/><text x="29.7437%" y="863.50"></text></g><g><title>memcpy@plt (1 samples, 0.02%)</title><rect x="29.5290%" y="853" width="0.0176%" height="15" fill="rgb(251,102,48)" fg:x="1674" fg:w="1"/><text x="29.7790%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="29.4937%" y="885" width="0.0706%" height="15" fill="rgb(243,208,16)" fg:x="1672" fg:w="4"/><text x="29.7437%" y="895.50"></text></g><g><title>leveldb::Slice::compare (4 samples, 0.07%)</title><rect x="29.4937%" y="869" width="0.0706%" height="15" fill="rgb(219,96,24)" fg:x="1672" fg:w="4"/><text x="29.7437%" y="879.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="29.5467%" y="853" width="0.0176%" height="15" fill="rgb(219,33,29)" fg:x="1675" fg:w="1"/><text x="29.7967%" y="863.50"></text></g><g><title>DecodeEntry (2 samples, 0.04%)</title><rect x="29.5643%" y="869" width="0.0353%" height="15" fill="rgb(223,176,5)" fg:x="1676" fg:w="2"/><text x="29.8143%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (5 samples, 0.09%)</title><rect x="29.5643%" y="885" width="0.0882%" height="15" fill="rgb(228,140,14)" fg:x="1676" fg:w="5"/><text x="29.8143%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (3 samples, 0.05%)</title><rect x="29.5996%" y="869" width="0.0529%" height="15" fill="rgb(217,179,31)" fg:x="1678" fg:w="3"/><text x="29.8496%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.05%)</title><rect x="29.5996%" y="853" width="0.0529%" height="15" fill="rgb(230,9,30)" fg:x="1678" fg:w="3"/><text x="29.8496%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="29.6172%" y="837" width="0.0353%" height="15" fill="rgb(230,136,20)" fg:x="1679" fg:w="2"/><text x="29.8672%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="29.6172%" y="821" width="0.0353%" height="15" fill="rgb(215,210,22)" fg:x="1679" fg:w="2"/><text x="29.8672%" y="831.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="29.6349%" y="805" width="0.0176%" height="15" fill="rgb(218,43,5)" fg:x="1680" fg:w="1"/><text x="29.8849%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="29.6525%" y="869" width="0.0176%" height="15" fill="rgb(216,11,5)" fg:x="1681" fg:w="1"/><text x="29.9025%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Compare (1 samples, 0.02%)</title><rect x="29.6525%" y="853" width="0.0176%" height="15" fill="rgb(209,82,29)" fg:x="1681" fg:w="1"/><text x="29.9025%" y="863.50"></text></g><g><title>leveldb::Block::Iter::Seek (2 samples, 0.04%)</title><rect x="29.6525%" y="885" width="0.0353%" height="15" fill="rgb(244,115,12)" fg:x="1681" fg:w="2"/><text x="29.9025%" y="895.50"></text></g><g><title>leveldb::Block::Iter::SeekToRestartPoint (1 samples, 0.02%)</title><rect x="29.6701%" y="869" width="0.0176%" height="15" fill="rgb(222,82,18)" fg:x="1682" fg:w="1"/><text x="29.9201%" y="879.50"></text></g><g><title>leveldb::Block::Iter::Compare (19 samples, 0.34%)</title><rect x="29.4408%" y="917" width="0.3352%" height="15" fill="rgb(249,227,8)" fg:x="1669" fg:w="19"/><text x="29.6908%" y="927.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (17 samples, 0.30%)</title><rect x="29.4761%" y="901" width="0.2999%" height="15" fill="rgb(253,141,45)" fg:x="1671" fg:w="17"/><text x="29.7261%" y="911.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.09%)</title><rect x="29.6878%" y="885" width="0.0882%" height="15" fill="rgb(234,184,4)" fg:x="1683" fg:w="5"/><text x="29.9378%" y="895.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="29.7583%" y="869" width="0.0176%" height="15" fill="rgb(218,194,23)" fg:x="1687" fg:w="1"/><text x="30.0083%" y="879.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="29.7760%" y="901" width="0.0176%" height="15" fill="rgb(235,66,41)" fg:x="1688" fg:w="1"/><text x="30.0260%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="29.7936%" y="853" width="0.0176%" height="15" fill="rgb(245,217,1)" fg:x="1689" fg:w="1"/><text x="30.0436%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1 samples, 0.02%)</title><rect x="29.7936%" y="837" width="0.0176%" height="15" fill="rgb(229,91,1)" fg:x="1689" fg:w="1"/><text x="30.0436%" y="847.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="29.7936%" y="821" width="0.0176%" height="15" fill="rgb(207,101,30)" fg:x="1689" fg:w="1"/><text x="30.0436%" y="831.50"></text></g><g><title>std::allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="29.7936%" y="805" width="0.0176%" height="15" fill="rgb(223,82,49)" fg:x="1689" fg:w="1"/><text x="30.0436%" y="815.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="29.7936%" y="789" width="0.0176%" height="15" fill="rgb(218,167,17)" fg:x="1689" fg:w="1"/><text x="30.0436%" y="799.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="29.7936%" y="773" width="0.0176%" height="15" fill="rgb(208,103,14)" fg:x="1689" fg:w="1"/><text x="30.0436%" y="783.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="29.7936%" y="757" width="0.0176%" height="15" fill="rgb(238,20,8)" fg:x="1689" fg:w="1"/><text x="30.0436%" y="767.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (3 samples, 0.05%)</title><rect x="29.7760%" y="917" width="0.0529%" height="15" fill="rgb(218,80,54)" fg:x="1688" fg:w="3"/><text x="30.0260%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.04%)</title><rect x="29.7936%" y="901" width="0.0353%" height="15" fill="rgb(240,144,17)" fg:x="1689" fg:w="2"/><text x="30.0436%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.04%)</title><rect x="29.7936%" y="885" width="0.0353%" height="15" fill="rgb(245,27,50)" fg:x="1689" fg:w="2"/><text x="30.0436%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.04%)</title><rect x="29.7936%" y="869" width="0.0353%" height="15" fill="rgb(251,51,7)" fg:x="1689" fg:w="2"/><text x="30.0436%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="29.8113%" y="853" width="0.0176%" height="15" fill="rgb(245,217,29)" fg:x="1690" fg:w="1"/><text x="30.0613%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="29.8113%" y="837" width="0.0176%" height="15" fill="rgb(221,176,29)" fg:x="1690" fg:w="1"/><text x="30.0613%" y="847.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="29.8113%" y="821" width="0.0176%" height="15" fill="rgb(212,180,24)" fg:x="1690" fg:w="1"/><text x="30.0613%" y="831.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="29.8113%" y="805" width="0.0176%" height="15" fill="rgb(254,24,2)" fg:x="1690" fg:w="1"/><text x="30.0613%" y="815.50"></text></g><g><title>leveldb::Block::Iter::Seek (1 samples, 0.02%)</title><rect x="29.8289%" y="917" width="0.0176%" height="15" fill="rgb(230,100,2)" fg:x="1691" fg:w="1"/><text x="30.0789%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Seek (31 samples, 0.55%)</title><rect x="29.3173%" y="933" width="0.5468%" height="15" fill="rgb(219,142,25)" fg:x="1662" fg:w="31"/><text x="29.5673%" y="943.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="29.8465%" y="917" width="0.0176%" height="15" fill="rgb(240,73,43)" fg:x="1692" fg:w="1"/><text x="30.0965%" y="927.50"></text></g><g><title>leveldb::Block::Iter::Seek (73 samples, 1.29%)</title><rect x="28.6117%" y="949" width="1.2877%" height="15" fill="rgb(214,114,15)" fg:x="1622" fg:w="73"/><text x="28.8617%" y="959.50"></text></g><g><title>leveldb::Slice::Slice (2 samples, 0.04%)</title><rect x="29.8642%" y="933" width="0.0353%" height="15" fill="rgb(207,130,4)" fg:x="1693" fg:w="2"/><text x="30.1142%" y="943.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="29.8995%" y="837" width="0.0176%" height="15" fill="rgb(221,25,40)" fg:x="1695" fg:w="1"/><text x="30.1495%" y="847.50"></text></g><g><title>leveldb::Iterator::~Iterator (2 samples, 0.04%)</title><rect x="29.8995%" y="917" width="0.0353%" height="15" fill="rgb(241,184,7)" fg:x="1695" fg:w="2"/><text x="30.1495%" y="927.50"></text></g><g><title>leveldb::Iterator::~Iterator (2 samples, 0.04%)</title><rect x="29.8995%" y="901" width="0.0353%" height="15" fill="rgb(235,159,4)" fg:x="1695" fg:w="2"/><text x="30.1495%" y="911.50"></text></g><g><title>leveldb::Iterator::CleanupNode::Run (2 samples, 0.04%)</title><rect x="29.8995%" y="885" width="0.0353%" height="15" fill="rgb(214,87,48)" fg:x="1695" fg:w="2"/><text x="30.1495%" y="895.50"></text></g><g><title>DeleteBlock (2 samples, 0.04%)</title><rect x="29.8995%" y="869" width="0.0353%" height="15" fill="rgb(246,198,24)" fg:x="1695" fg:w="2"/><text x="30.1495%" y="879.50"></text></g><g><title>leveldb::DeleteBlock (2 samples, 0.04%)</title><rect x="29.8995%" y="853" width="0.0353%" height="15" fill="rgb(209,66,40)" fg:x="1695" fg:w="2"/><text x="30.1495%" y="863.50"></text></g><g><title>leveldb::SaveValue (1 samples, 0.02%)</title><rect x="29.9171%" y="837" width="0.0176%" height="15" fill="rgb(233,147,39)" fg:x="1696" fg:w="1"/><text x="30.1671%" y="847.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="29.9171%" y="821" width="0.0176%" height="15" fill="rgb(231,145,52)" fg:x="1696" fg:w="1"/><text x="30.1671%" y="831.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="29.9171%" y="805" width="0.0176%" height="15" fill="rgb(206,20,26)" fg:x="1696" fg:w="1"/><text x="30.1671%" y="815.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="29.9171%" y="789" width="0.0176%" height="15" fill="rgb(238,220,4)" fg:x="1696" fg:w="1"/><text x="30.1671%" y="799.50"></text></g><g><title>leveldb::Block::Iter::~Iter (3 samples, 0.05%)</title><rect x="29.8995%" y="949" width="0.0529%" height="15" fill="rgb(252,195,42)" fg:x="1695" fg:w="3"/><text x="30.1495%" y="959.50"></text></g><g><title>leveldb::Block::Iter::~Iter (3 samples, 0.05%)</title><rect x="29.8995%" y="933" width="0.0529%" height="15" fill="rgb(209,10,6)" fg:x="1695" fg:w="3"/><text x="30.1495%" y="943.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="29.9347%" y="917" width="0.0176%" height="15" fill="rgb(229,3,52)" fg:x="1697" fg:w="1"/><text x="30.1847%" y="927.50"></text></g><g><title>leveldb::Block::NewIterator (4 samples, 0.07%)</title><rect x="29.9524%" y="949" width="0.0706%" height="15" fill="rgb(253,49,37)" fg:x="1698" fg:w="4"/><text x="30.2024%" y="959.50"></text></g><g><title>leveldb::Block::Iter::Iter (3 samples, 0.05%)</title><rect x="29.9700%" y="933" width="0.0529%" height="15" fill="rgb(240,103,49)" fg:x="1699" fg:w="3"/><text x="30.2200%" y="943.50"></text></g><g><title>leveldb::BlockHandle::DecodeFrom (1 samples, 0.02%)</title><rect x="30.0229%" y="949" width="0.0176%" height="15" fill="rgb(250,182,30)" fg:x="1702" fg:w="1"/><text x="30.2729%" y="959.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="30.0229%" y="933" width="0.0176%" height="15" fill="rgb(248,8,30)" fg:x="1702" fg:w="1"/><text x="30.2729%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="30.0229%" y="917" width="0.0176%" height="15" fill="rgb(237,120,30)" fg:x="1702" fg:w="1"/><text x="30.2729%" y="927.50"></text></g><g><title>leveldb::DecodeFixed32 (1 samples, 0.02%)</title><rect x="30.0406%" y="933" width="0.0176%" height="15" fill="rgb(221,146,34)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="943.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (1 samples, 0.02%)</title><rect x="30.0406%" y="917" width="0.0176%" height="15" fill="rgb(242,55,13)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="901" width="0.0176%" height="15" fill="rgb(242,112,31)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="885" width="0.0176%" height="15" fill="rgb(249,192,27)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="869" width="0.0176%" height="15" fill="rgb(208,204,44)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="853" width="0.0176%" height="15" fill="rgb(208,93,54)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="837" width="0.0176%" height="15" fill="rgb(242,1,31)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="821" width="0.0176%" height="15" fill="rgb(241,83,25)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="831.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="30.0406%" y="805" width="0.0176%" height="15" fill="rgb(205,169,50)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="789" width="0.0176%" height="15" fill="rgb(239,186,37)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="773" width="0.0176%" height="15" fill="rgb(205,221,10)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="757" width="0.0176%" height="15" fill="rgb(218,196,15)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="741" width="0.0176%" height="15" fill="rgb(218,196,35)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="725" width="0.0176%" height="15" fill="rgb(233,63,24)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="709" width="0.0176%" height="15" fill="rgb(225,8,4)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="693" width="0.0176%" height="15" fill="rgb(234,105,35)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="677" width="0.0176%" height="15" fill="rgb(236,21,32)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="661" width="0.0176%" height="15" fill="rgb(228,109,6)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="645" width="0.0176%" height="15" fill="rgb(229,215,31)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.0406%" y="629" width="0.0176%" height="15" fill="rgb(221,52,54)" fg:x="1703" fg:w="1"/><text x="30.2906%" y="639.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (1 samples, 0.02%)</title><rect x="30.0582%" y="917" width="0.0176%" height="15" fill="rgb(252,129,43)" fg:x="1704" fg:w="1"/><text x="30.3082%" y="927.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (3 samples, 0.05%)</title><rect x="30.0406%" y="949" width="0.0529%" height="15" fill="rgb(248,183,27)" fg:x="1703" fg:w="3"/><text x="30.2906%" y="959.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (2 samples, 0.04%)</title><rect x="30.0582%" y="933" width="0.0353%" height="15" fill="rgb(250,0,22)" fg:x="1704" fg:w="2"/><text x="30.3082%" y="943.50"></text></g><g><title>leveldb::FilterBlockReader::KeyMayMatch (1 samples, 0.02%)</title><rect x="30.0759%" y="917" width="0.0176%" height="15" fill="rgb(213,166,10)" fg:x="1705" fg:w="1"/><text x="30.3259%" y="927.50"></text></g><g><title>leveldb::GetVarint64Ptr (2 samples, 0.04%)</title><rect x="30.0935%" y="949" width="0.0353%" height="15" fill="rgb(207,163,36)" fg:x="1706" fg:w="2"/><text x="30.3435%" y="959.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.16%)</title><rect x="30.1288%" y="949" width="0.1588%" height="15" fill="rgb(208,122,22)" fg:x="1708" fg:w="9"/><text x="30.3788%" y="959.50"></text></g><g><title>leveldb::SaveValue (1 samples, 0.02%)</title><rect x="30.2875%" y="949" width="0.0176%" height="15" fill="rgb(207,104,49)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="959.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="30.2875%" y="933" width="0.0176%" height="15" fill="rgb(248,211,50)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="943.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="30.2875%" y="917" width="0.0176%" height="15" fill="rgb(217,13,45)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="927.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="30.2875%" y="901" width="0.0176%" height="15" fill="rgb(211,216,49)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="911.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="30.2875%" y="885" width="0.0176%" height="15" fill="rgb(221,58,53)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="895.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1 samples, 0.02%)</title><rect x="30.2875%" y="869" width="0.0176%" height="15" fill="rgb(220,112,41)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="879.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="30.2875%" y="853" width="0.0176%" height="15" fill="rgb(236,38,28)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="863.50"></text></g><g><title>std::allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="30.2875%" y="837" width="0.0176%" height="15" fill="rgb(227,195,22)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="847.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.02%)</title><rect x="30.2875%" y="821" width="0.0176%" height="15" fill="rgb(214,55,33)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="831.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="30.2875%" y="805" width="0.0176%" height="15" fill="rgb(248,80,13)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="815.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="30.2875%" y="789" width="0.0176%" height="15" fill="rgb(238,52,6)" fg:x="1717" fg:w="1"/><text x="30.5375%" y="799.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="30.3228%" y="933" width="0.0176%" height="15" fill="rgb(224,198,47)" fg:x="1719" fg:w="1"/><text x="30.5728%" y="943.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="30.3228%" y="917" width="0.0176%" height="15" fill="rgb(233,171,20)" fg:x="1719" fg:w="1"/><text x="30.5728%" y="927.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="30.3228%" y="901" width="0.0176%" height="15" fill="rgb(241,30,25)" fg:x="1719" fg:w="1"/><text x="30.5728%" y="911.50"></text></g><g><title>_mm_crc32_u64 (3 samples, 0.05%)</title><rect x="30.3404%" y="917" width="0.0529%" height="15" fill="rgb(207,171,38)" fg:x="1720" fg:w="3"/><text x="30.5904%" y="927.50"></text></g><g><title>crc32c::ExtendSse42 (4 samples, 0.07%)</title><rect x="30.3404%" y="933" width="0.0706%" height="15" fill="rgb(234,70,1)" fg:x="1720" fg:w="4"/><text x="30.5904%" y="943.50"></text></g><g><title>_mm_crc32_u8 (1 samples, 0.02%)</title><rect x="30.3934%" y="917" width="0.0176%" height="15" fill="rgb(232,178,18)" fg:x="1723" fg:w="1"/><text x="30.6434%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::KeyMayMatch (3 samples, 0.05%)</title><rect x="30.4110%" y="933" width="0.0529%" height="15" fill="rgb(241,78,40)" fg:x="1724" fg:w="3"/><text x="30.6610%" y="943.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="30.4639%" y="933" width="0.0176%" height="15" fill="rgb(222,35,25)" fg:x="1727" fg:w="1"/><text x="30.7139%" y="943.50"></text></g><g><title>leveldb::InternalFilterPolicy::KeyMayMatch (1 samples, 0.02%)</title><rect x="30.4816%" y="933" width="0.0176%" height="15" fill="rgb(207,92,16)" fg:x="1728" fg:w="1"/><text x="30.7316%" y="943.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="30.5345%" y="917" width="0.0176%" height="15" fill="rgb(216,59,51)" fg:x="1731" fg:w="1"/><text x="30.7845%" y="927.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="30.5345%" y="901" width="0.0176%" height="15" fill="rgb(213,80,28)" fg:x="1731" fg:w="1"/><text x="30.7845%" y="911.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="30.5521%" y="917" width="0.0176%" height="15" fill="rgb(220,93,7)" fg:x="1732" fg:w="1"/><text x="30.8021%" y="927.50"></text></g><g><title>leveldb::crc32c::Unmask (35 samples, 0.62%)</title><rect x="30.5698%" y="917" width="0.6174%" height="15" fill="rgb(225,24,44)" fg:x="1733" fg:w="35"/><text x="30.8198%" y="927.50"></text></g><g><title>[unknown] (35 samples, 0.62%)</title><rect x="30.5698%" y="901" width="0.6174%" height="15" fill="rgb(243,74,40)" fg:x="1733" fg:w="35"/><text x="30.8198%" y="911.50"></text></g><g><title>[unknown] (35 samples, 0.62%)</title><rect x="30.5698%" y="885" width="0.6174%" height="15" fill="rgb(228,39,7)" fg:x="1733" fg:w="35"/><text x="30.8198%" y="895.50"></text></g><g><title>[unknown] (35 samples, 0.62%)</title><rect x="30.5698%" y="869" width="0.6174%" height="15" fill="rgb(227,79,8)" fg:x="1733" fg:w="35"/><text x="30.8198%" y="879.50"></text></g><g><title>[unknown] (35 samples, 0.62%)</title><rect x="30.5698%" y="853" width="0.6174%" height="15" fill="rgb(236,58,11)" fg:x="1733" fg:w="35"/><text x="30.8198%" y="863.50"></text></g><g><title>[unknown] (31 samples, 0.55%)</title><rect x="30.6403%" y="837" width="0.5468%" height="15" fill="rgb(249,63,35)" fg:x="1737" fg:w="31"/><text x="30.8903%" y="847.50"></text></g><g><title>[unknown] (30 samples, 0.53%)</title><rect x="30.6580%" y="821" width="0.5292%" height="15" fill="rgb(252,114,16)" fg:x="1738" fg:w="30"/><text x="30.9080%" y="831.50"></text></g><g><title>[unknown] (26 samples, 0.46%)</title><rect x="30.7285%" y="805" width="0.4586%" height="15" fill="rgb(254,151,24)" fg:x="1742" fg:w="26"/><text x="30.9785%" y="815.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="30.9049%" y="789" width="0.2822%" height="15" fill="rgb(253,54,39)" fg:x="1752" fg:w="16"/><text x="31.1549%" y="799.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="31.0284%" y="773" width="0.1588%" height="15" fill="rgb(243,25,45)" fg:x="1759" fg:w="9"/><text x="31.2784%" y="783.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="31.1166%" y="757" width="0.0706%" height="15" fill="rgb(234,134,9)" fg:x="1764" fg:w="4"/><text x="31.3666%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="31.1342%" y="741" width="0.0529%" height="15" fill="rgb(227,166,31)" fg:x="1765" fg:w="3"/><text x="31.3842%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="31.1519%" y="725" width="0.0353%" height="15" fill="rgb(245,143,41)" fg:x="1766" fg:w="2"/><text x="31.4019%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.1695%" y="709" width="0.0176%" height="15" fill="rgb(238,181,32)" fg:x="1767" fg:w="1"/><text x="31.4195%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.1695%" y="693" width="0.0176%" height="15" fill="rgb(224,113,18)" fg:x="1767" fg:w="1"/><text x="31.4195%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.1695%" y="677" width="0.0176%" height="15" fill="rgb(240,229,28)" fg:x="1767" fg:w="1"/><text x="31.4195%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.1695%" y="661" width="0.0176%" height="15" fill="rgb(250,185,3)" fg:x="1767" fg:w="1"/><text x="31.4195%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.1695%" y="645" width="0.0176%" height="15" fill="rgb(212,59,25)" fg:x="1767" fg:w="1"/><text x="31.4195%" y="655.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="31.1695%" y="629" width="0.0176%" height="15" fill="rgb(221,87,20)" fg:x="1767" fg:w="1"/><text x="31.4195%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.1695%" y="613" width="0.0176%" height="15" fill="rgb(213,74,28)" fg:x="1767" fg:w="1"/><text x="31.4195%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="885" width="0.0176%" height="15" fill="rgb(224,132,34)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="869" width="0.0176%" height="15" fill="rgb(222,101,24)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="853" width="0.0176%" height="15" fill="rgb(254,142,4)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="837" width="0.0176%" height="15" fill="rgb(230,229,49)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="821" width="0.0176%" height="15" fill="rgb(238,70,47)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="805" width="0.0176%" height="15" fill="rgb(231,160,17)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="815.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="31.6987%" y="789" width="0.0176%" height="15" fill="rgb(218,68,53)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="799.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.02%)</title><rect x="31.6987%" y="773" width="0.0176%" height="15" fill="rgb(236,111,10)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="757" width="0.0176%" height="15" fill="rgb(224,34,41)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="741" width="0.0176%" height="15" fill="rgb(241,118,19)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="31.6987%" y="725" width="0.0176%" height="15" fill="rgb(238,129,25)" fg:x="1797" fg:w="1"/><text x="31.9487%" y="735.50"></text></g><g><title>_mm_crc32_u64 (53 samples, 0.93%)</title><rect x="31.7164%" y="885" width="0.9349%" height="15" fill="rgb(238,22,31)" fg:x="1798" fg:w="53"/><text x="31.9664%" y="895.50"></text></g><g><title>crc32c::ExtendSse42 (87 samples, 1.53%)</title><rect x="31.1872%" y="901" width="1.5347%" height="15" fill="rgb(222,174,48)" fg:x="1768" fg:w="87"/><text x="31.4372%" y="911.50"></text></g><g><title>_mm_crc32_u8 (4 samples, 0.07%)</title><rect x="32.6513%" y="885" width="0.0706%" height="15" fill="rgb(206,152,40)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="895.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="32.6513%" y="869" width="0.0706%" height="15" fill="rgb(218,99,54)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="879.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="32.6513%" y="853" width="0.0706%" height="15" fill="rgb(220,174,26)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="863.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="32.6513%" y="837" width="0.0706%" height="15" fill="rgb(245,116,9)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="847.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="32.6513%" y="821" width="0.0706%" height="15" fill="rgb(209,72,35)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="32.6513%" y="805" width="0.0706%" height="15" fill="rgb(226,126,21)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="815.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="32.6513%" y="789" width="0.0706%" height="15" fill="rgb(227,192,1)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="799.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="32.6513%" y="773" width="0.0706%" height="15" fill="rgb(237,180,29)" fg:x="1851" fg:w="4"/><text x="32.9013%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="32.6865%" y="757" width="0.0353%" height="15" fill="rgb(230,197,35)" fg:x="1853" fg:w="2"/><text x="32.9365%" y="767.50"></text></g><g><title>leveldb::crc32c::Value (88 samples, 1.55%)</title><rect x="31.1872%" y="917" width="1.5523%" height="15" fill="rgb(246,193,31)" fg:x="1768" fg:w="88"/><text x="31.4372%" y="927.50"></text></g><g><title>leveldb::crc32c::Extend (1 samples, 0.02%)</title><rect x="32.7218%" y="901" width="0.0176%" height="15" fill="rgb(241,36,4)" fg:x="1855" fg:w="1"/><text x="32.9718%" y="911.50"></text></g><g><title>leveldb::ReadBlock (128 samples, 2.26%)</title><rect x="30.4992%" y="933" width="2.2579%" height="15" fill="rgb(241,130,17)" fg:x="1729" fg:w="128"/><text x="30.7492%" y="943.50">l..</text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="32.7395%" y="917" width="0.0176%" height="15" fill="rgb(206,137,32)" fg:x="1856" fg:w="1"/><text x="32.9895%" y="927.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="32.7395%" y="901" width="0.0176%" height="15" fill="rgb(237,228,51)" fg:x="1856" fg:w="1"/><text x="32.9895%" y="911.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="32.7395%" y="885" width="0.0176%" height="15" fill="rgb(243,6,42)" fg:x="1856" fg:w="1"/><text x="32.9895%" y="895.50"></text></g><g><title>leveldb::Table::BlockReader (3 samples, 0.05%)</title><rect x="32.7571%" y="933" width="0.0529%" height="15" fill="rgb(251,74,28)" fg:x="1857" fg:w="3"/><text x="33.0071%" y="943.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="32.7924%" y="917" width="0.0176%" height="15" fill="rgb(218,20,49)" fg:x="1859" fg:w="1"/><text x="33.0424%" y="927.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="32.7924%" y="901" width="0.0176%" height="15" fill="rgb(238,28,14)" fg:x="1859" fg:w="1"/><text x="33.0424%" y="911.50"></text></g><g><title>leveldb::Table::BlockReader (143 samples, 2.52%)</title><rect x="30.3052%" y="949" width="2.5225%" height="15" fill="rgb(229,40,46)" fg:x="1718" fg:w="143"/><text x="30.5552%" y="959.50">le..</text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="32.8100%" y="933" width="0.0176%" height="15" fill="rgb(244,195,20)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="943.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="32.8100%" y="917" width="0.0176%" height="15" fill="rgb(253,56,35)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="901" width="0.0176%" height="15" fill="rgb(210,149,44)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="885" width="0.0176%" height="15" fill="rgb(240,135,12)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="869" width="0.0176%" height="15" fill="rgb(251,24,50)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="853" width="0.0176%" height="15" fill="rgb(243,200,47)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="837" width="0.0176%" height="15" fill="rgb(224,166,26)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="821" width="0.0176%" height="15" fill="rgb(233,0,47)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="831.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="32.8100%" y="805" width="0.0176%" height="15" fill="rgb(253,80,5)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="815.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.02%)</title><rect x="32.8100%" y="789" width="0.0176%" height="15" fill="rgb(214,133,25)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="773" width="0.0176%" height="15" fill="rgb(209,27,14)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="757" width="0.0176%" height="15" fill="rgb(219,102,51)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8100%" y="741" width="0.0176%" height="15" fill="rgb(237,18,16)" fg:x="1860" fg:w="1"/><text x="33.0600%" y="751.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="32.8277%" y="949" width="0.0176%" height="15" fill="rgb(241,85,17)" fg:x="1861" fg:w="1"/><text x="33.0777%" y="959.50"></text></g><g><title>leveldb::Status::Status (1 samples, 0.02%)</title><rect x="32.8277%" y="933" width="0.0176%" height="15" fill="rgb(236,90,42)" fg:x="1861" fg:w="1"/><text x="33.0777%" y="943.50"></text></g><g><title>leveldb::Table::InternalGet (297 samples, 5.24%)</title><rect x="27.6239%" y="965" width="5.2390%" height="15" fill="rgb(249,57,21)" fg:x="1566" fg:w="297"/><text x="27.8739%" y="975.50">leveld..</text></g><g><title>leveldb::TableCache::Get (1 samples, 0.02%)</title><rect x="32.8453%" y="949" width="0.0176%" height="15" fill="rgb(243,12,36)" fg:x="1862" fg:w="1"/><text x="33.0953%" y="959.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="32.8629%" y="933" width="0.0176%" height="15" fill="rgb(253,128,47)" fg:x="1863" fg:w="1"/><text x="33.1129%" y="943.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="32.8629%" y="917" width="0.0176%" height="15" fill="rgb(207,33,20)" fg:x="1863" fg:w="1"/><text x="33.1129%" y="927.50"></text></g><g><title>FindPointer (1 samples, 0.02%)</title><rect x="32.8629%" y="901" width="0.0176%" height="15" fill="rgb(233,215,35)" fg:x="1863" fg:w="1"/><text x="33.1129%" y="911.50"></text></g><g><title>leveldb::operator!= (1 samples, 0.02%)</title><rect x="32.8629%" y="885" width="0.0176%" height="15" fill="rgb(249,188,52)" fg:x="1863" fg:w="1"/><text x="33.1129%" y="895.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="32.8629%" y="869" width="0.0176%" height="15" fill="rgb(225,12,32)" fg:x="1863" fg:w="1"/><text x="33.1129%" y="879.50"></text></g><g><title>Lookup (2 samples, 0.04%)</title><rect x="32.8629%" y="949" width="0.0353%" height="15" fill="rgb(247,98,14)" fg:x="1863" fg:w="2"/><text x="33.1129%" y="959.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="32.8806%" y="933" width="0.0176%" height="15" fill="rgb(247,219,48)" fg:x="1864" fg:w="1"/><text x="33.1306%" y="943.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="32.8806%" y="917" width="0.0176%" height="15" fill="rgb(253,60,48)" fg:x="1864" fg:w="1"/><text x="33.1306%" y="927.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewRandomAccessFile (1 samples, 0.02%)</title><rect x="32.8982%" y="949" width="0.0176%" height="15" fill="rgb(245,15,52)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="959.50"></text></g><g><title>__mmap (1 samples, 0.02%)</title><rect x="32.8982%" y="933" width="0.0176%" height="15" fill="rgb(220,133,28)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="917" width="0.0176%" height="15" fill="rgb(217,180,4)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="901" width="0.0176%" height="15" fill="rgb(251,24,1)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="885" width="0.0176%" height="15" fill="rgb(212,185,49)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="869" width="0.0176%" height="15" fill="rgb(215,175,22)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="853" width="0.0176%" height="15" fill="rgb(250,205,14)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="837" width="0.0176%" height="15" fill="rgb(225,211,22)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="821" width="0.0176%" height="15" fill="rgb(251,179,42)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="805" width="0.0176%" height="15" fill="rgb(208,216,51)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="789" width="0.0176%" height="15" fill="rgb(235,36,11)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.8982%" y="773" width="0.0176%" height="15" fill="rgb(213,189,28)" fg:x="1865" fg:w="1"/><text x="33.1482%" y="783.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="32.9159%" y="949" width="0.0176%" height="15" fill="rgb(227,203,42)" fg:x="1866" fg:w="1"/><text x="33.1659%" y="959.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="32.9159%" y="933" width="0.0176%" height="15" fill="rgb(244,72,36)" fg:x="1866" fg:w="1"/><text x="33.1659%" y="943.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="32.9159%" y="917" width="0.0176%" height="15" fill="rgb(213,53,17)" fg:x="1866" fg:w="1"/><text x="33.1659%" y="927.50"></text></g><g><title>FindPointer (1 samples, 0.02%)</title><rect x="32.9159%" y="901" width="0.0176%" height="15" fill="rgb(207,167,3)" fg:x="1866" fg:w="1"/><text x="33.1659%" y="911.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="32.9159%" y="885" width="0.0176%" height="15" fill="rgb(216,98,30)" fg:x="1866" fg:w="1"/><text x="33.1659%" y="895.50"></text></g><g><title>leveldb::FindFile (1 samples, 0.02%)</title><rect x="32.9335%" y="949" width="0.0176%" height="15" fill="rgb(236,123,15)" fg:x="1867" fg:w="1"/><text x="33.1835%" y="959.50"></text></g><g><title>leveldb::Table::Open (1 samples, 0.02%)</title><rect x="32.9511%" y="949" width="0.0176%" height="15" fill="rgb(248,81,50)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="959.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.02%)</title><rect x="32.9511%" y="933" width="0.0176%" height="15" fill="rgb(214,120,4)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="943.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="32.9511%" y="917" width="0.0176%" height="15" fill="rgb(208,179,34)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="927.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="32.9511%" y="901" width="0.0176%" height="15" fill="rgb(227,140,7)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="911.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="32.9511%" y="885" width="0.0176%" height="15" fill="rgb(214,22,6)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.9511%" y="869" width="0.0176%" height="15" fill="rgb(207,137,27)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.9511%" y="853" width="0.0176%" height="15" fill="rgb(210,8,46)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.9511%" y="837" width="0.0176%" height="15" fill="rgb(240,16,54)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.9511%" y="821" width="0.0176%" height="15" fill="rgb(211,209,29)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.9511%" y="805" width="0.0176%" height="15" fill="rgb(226,228,24)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.9511%" y="789" width="0.0176%" height="15" fill="rgb(222,84,9)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="32.9511%" y="773" width="0.0176%" height="15" fill="rgb(234,203,30)" fg:x="1868" fg:w="1"/><text x="33.2011%" y="783.50"></text></g><g><title>leveldb::TableCache::FindTable (2 samples, 0.04%)</title><rect x="32.9688%" y="949" width="0.0353%" height="15" fill="rgb(238,109,14)" fg:x="1869" fg:w="2"/><text x="33.2188%" y="959.50"></text></g><g><title>leveldb::TableCache::Get (1 samples, 0.02%)</title><rect x="33.0041%" y="949" width="0.0176%" height="15" fill="rgb(233,206,34)" fg:x="1871" fg:w="1"/><text x="33.2541%" y="959.50"></text></g><g><title>leveldb::Version::Get (333 samples, 5.87%)</title><rect x="27.1829%" y="1029" width="5.8741%" height="15" fill="rgb(220,167,47)" fg:x="1541" fg:w="333"/><text x="27.4329%" y="1039.50">leveldb..</text></g><g><title>leveldb::Version::ForEachOverlapping (333 samples, 5.87%)</title><rect x="27.1829%" y="1013" width="5.8741%" height="15" fill="rgb(238,105,10)" fg:x="1541" fg:w="333"/><text x="27.4329%" y="1023.50">leveldb..</text></g><g><title>leveldb::Version::Get (315 samples, 5.56%)</title><rect x="27.5004%" y="997" width="5.5565%" height="15" fill="rgb(213,227,17)" fg:x="1559" fg:w="315"/><text x="27.7504%" y="1007.50">leveldb..</text></g><g><title>leveldb::TableCache::Get (314 samples, 5.54%)</title><rect x="27.5181%" y="981" width="5.5389%" height="15" fill="rgb(217,132,38)" fg:x="1560" fg:w="314"/><text x="27.7681%" y="991.50">leveldb..</text></g><g><title>leveldb::TableCache::FindTable (11 samples, 0.19%)</title><rect x="32.8629%" y="965" width="0.1940%" height="15" fill="rgb(242,146,4)" fg:x="1863" fg:w="11"/><text x="33.1129%" y="975.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (2 samples, 0.04%)</title><rect x="33.0217%" y="949" width="0.0353%" height="15" fill="rgb(212,61,9)" fg:x="1872" fg:w="2"/><text x="33.2717%" y="959.50"></text></g><g><title>leveldb::port::Mutex::Lock (1 samples, 0.02%)</title><rect x="33.0570%" y="1029" width="0.0176%" height="15" fill="rgb(247,126,22)" fg:x="1874" fg:w="1"/><text x="33.3070%" y="1039.50"></text></g><g><title>std::mutex::lock (1 samples, 0.02%)</title><rect x="33.0570%" y="1013" width="0.0176%" height="15" fill="rgb(220,196,2)" fg:x="1874" fg:w="1"/><text x="33.3070%" y="1023.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="33.0570%" y="997" width="0.0176%" height="15" fill="rgb(208,46,4)" fg:x="1874" fg:w="1"/><text x="33.3070%" y="1007.50"></text></g><g><title>leveldb::DBImpl::Get (336 samples, 5.93%)</title><rect x="27.1653%" y="1045" width="5.9270%" height="15" fill="rgb(252,104,46)" fg:x="1540" fg:w="336"/><text x="27.4153%" y="1055.50">leveldb:..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="33.0746%" y="1029" width="0.0176%" height="15" fill="rgb(237,152,48)" fg:x="1875" fg:w="1"/><text x="33.3246%" y="1039.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="33.0746%" y="1013" width="0.0176%" height="15" fill="rgb(221,59,37)" fg:x="1875" fg:w="1"/><text x="33.3246%" y="1023.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::__distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="33.0746%" y="997" width="0.0176%" height="15" fill="rgb(209,202,51)" fg:x="1875" fg:w="1"/><text x="33.3246%" y="1007.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="33.0923%" y="1045" width="0.0176%" height="15" fill="rgb(228,81,30)" fg:x="1876" fg:w="1"/><text x="33.3423%" y="1055.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (344 samples, 6.07%)</title><rect x="27.1653%" y="1061" width="6.0681%" height="15" fill="rgb(227,42,39)" fg:x="1540" fg:w="344"/><text x="27.4153%" y="1071.50">CDBWrapp..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (7 samples, 0.12%)</title><rect x="33.1099%" y="1045" width="0.1235%" height="15" fill="rgb(221,26,2)" fg:x="1877" fg:w="7"/><text x="33.3599%" y="1055.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (6 samples, 0.11%)</title><rect x="33.1275%" y="1029" width="0.1058%" height="15" fill="rgb(254,61,31)" fg:x="1878" fg:w="6"/><text x="33.3775%" y="1039.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="33.1805%" y="1013" width="0.0529%" height="15" fill="rgb(222,173,38)" fg:x="1881" fg:w="3"/><text x="33.4305%" y="1023.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (3 samples, 0.05%)</title><rect x="33.1805%" y="997" width="0.0529%" height="15" fill="rgb(218,50,12)" fg:x="1881" fg:w="3"/><text x="33.4305%" y="1007.50"></text></g><g><title>decltype (3 samples, 0.05%)</title><rect x="33.1805%" y="981" width="0.0529%" height="15" fill="rgb(223,88,40)" fg:x="1881" fg:w="3"/><text x="33.4305%" y="991.50"></text></g><g><title>CCoinsViewDB::GetCoin (345 samples, 6.09%)</title><rect x="27.1653%" y="1077" width="6.0857%" height="15" fill="rgb(237,54,19)" fg:x="1540" fg:w="345"/><text x="27.4153%" y="1087.50">CCoinsVi..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="33.2334%" y="1061" width="0.0176%" height="15" fill="rgb(251,129,25)" fg:x="1884" fg:w="1"/><text x="33.4834%" y="1071.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="33.2334%" y="1045" width="0.0176%" height="15" fill="rgb(238,97,19)" fg:x="1884" fg:w="1"/><text x="33.4834%" y="1055.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="33.2510%" y="837" width="0.0176%" height="15" fill="rgb(240,169,18)" fg:x="1885" fg:w="1"/><text x="33.5010%" y="847.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="33.2510%" y="821" width="0.0176%" height="15" fill="rgb(230,187,49)" fg:x="1885" fg:w="1"/><text x="33.5010%" y="831.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="33.2510%" y="805" width="0.0176%" height="15" fill="rgb(209,44,26)" fg:x="1885" fg:w="1"/><text x="33.5010%" y="815.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="33.2510%" y="789" width="0.0176%" height="15" fill="rgb(244,0,6)" fg:x="1885" fg:w="1"/><text x="33.5010%" y="799.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.04%)</title><rect x="33.2510%" y="869" width="0.0353%" height="15" fill="rgb(248,18,21)" fg:x="1885" fg:w="2"/><text x="33.5010%" y="879.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.04%)</title><rect x="33.2510%" y="853" width="0.0353%" height="15" fill="rgb(245,180,19)" fg:x="1885" fg:w="2"/><text x="33.5010%" y="863.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="33.2687%" y="837" width="0.0176%" height="15" fill="rgb(252,118,36)" fg:x="1886" fg:w="1"/><text x="33.5187%" y="847.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="33.2687%" y="821" width="0.0176%" height="15" fill="rgb(210,224,19)" fg:x="1886" fg:w="1"/><text x="33.5187%" y="831.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (1 samples, 0.02%)</title><rect x="33.2863%" y="773" width="0.0176%" height="15" fill="rgb(218,30,24)" fg:x="1887" fg:w="1"/><text x="33.5363%" y="783.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="33.2863%" y="757" width="0.0176%" height="15" fill="rgb(219,75,50)" fg:x="1887" fg:w="1"/><text x="33.5363%" y="767.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="33.2863%" y="741" width="0.0176%" height="15" fill="rgb(234,72,50)" fg:x="1887" fg:w="1"/><text x="33.5363%" y="751.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="33.2863%" y="725" width="0.0176%" height="15" fill="rgb(219,100,48)" fg:x="1887" fg:w="1"/><text x="33.5363%" y="735.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="33.2863%" y="709" width="0.0176%" height="15" fill="rgb(253,5,41)" fg:x="1887" fg:w="1"/><text x="33.5363%" y="719.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="33.2863%" y="693" width="0.0176%" height="15" fill="rgb(247,181,11)" fg:x="1887" fg:w="1"/><text x="33.5363%" y="703.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="33.2510%" y="917" width="0.0706%" height="15" fill="rgb(222,223,25)" fg:x="1885" fg:w="4"/><text x="33.5010%" y="927.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long&amp;&gt;::Unserialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="33.2510%" y="901" width="0.0706%" height="15" fill="rgb(214,198,28)" fg:x="1885" fg:w="4"/><text x="33.5010%" y="911.50"></text></g><g><title>void AmountCompression::Unser&lt;DataStream, long&gt; (4 samples, 0.07%)</title><rect x="33.2510%" y="885" width="0.0706%" height="15" fill="rgb(230,46,43)" fg:x="1885" fg:w="4"/><text x="33.5010%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&amp;) (2 samples, 0.04%)</title><rect x="33.2863%" y="869" width="0.0353%" height="15" fill="rgb(233,65,53)" fg:x="1887" fg:w="2"/><text x="33.5363%" y="879.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="33.2863%" y="853" width="0.0353%" height="15" fill="rgb(221,121,27)" fg:x="1887" fg:w="2"/><text x="33.5363%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Unserialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="33.2863%" y="837" width="0.0353%" height="15" fill="rgb(247,70,47)" fg:x="1887" fg:w="2"/><text x="33.5363%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned long&gt; (2 samples, 0.04%)</title><rect x="33.2863%" y="821" width="0.0353%" height="15" fill="rgb(228,85,35)" fg:x="1887" fg:w="2"/><text x="33.5363%" y="831.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.04%)</title><rect x="33.2863%" y="805" width="0.0353%" height="15" fill="rgb(209,50,18)" fg:x="1887" fg:w="2"/><text x="33.5363%" y="815.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (2 samples, 0.04%)</title><rect x="33.2863%" y="789" width="0.0353%" height="15" fill="rgb(250,19,35)" fg:x="1887" fg:w="2"/><text x="33.5363%" y="799.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="33.3039%" y="773" width="0.0176%" height="15" fill="rgb(253,107,29)" fg:x="1888" fg:w="1"/><text x="33.5539%" y="783.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="33.3039%" y="757" width="0.0176%" height="15" fill="rgb(252,179,29)" fg:x="1888" fg:w="1"/><text x="33.5539%" y="767.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="33.3039%" y="741" width="0.0176%" height="15" fill="rgb(238,194,6)" fg:x="1888" fg:w="1"/><text x="33.5539%" y="751.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="33.3039%" y="725" width="0.0176%" height="15" fill="rgb(238,164,29)" fg:x="1888" fg:w="1"/><text x="33.5539%" y="735.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="33.3039%" y="709" width="0.0176%" height="15" fill="rgb(224,25,9)" fg:x="1888" fg:w="1"/><text x="33.5539%" y="719.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="33.3039%" y="693" width="0.0176%" height="15" fill="rgb(244,153,23)" fg:x="1888" fg:w="1"/><text x="33.5539%" y="703.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="33.3039%" y="677" width="0.0176%" height="15" fill="rgb(212,203,14)" fg:x="1888" fg:w="1"/><text x="33.5539%" y="687.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.02%)</title><rect x="33.3216%" y="885" width="0.0176%" height="15" fill="rgb(220,164,20)" fg:x="1889" fg:w="1"/><text x="33.5716%" y="895.50"></text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="33.3216%" y="869" width="0.0176%" height="15" fill="rgb(222,203,48)" fg:x="1889" fg:w="1"/><text x="33.5716%" y="879.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="33.3216%" y="853" width="0.0176%" height="15" fill="rgb(215,159,22)" fg:x="1889" fg:w="1"/><text x="33.5716%" y="863.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="33.3216%" y="837" width="0.0176%" height="15" fill="rgb(216,183,47)" fg:x="1889" fg:w="1"/><text x="33.5716%" y="847.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="33.3216%" y="821" width="0.0176%" height="15" fill="rgb(229,195,25)" fg:x="1889" fg:w="1"/><text x="33.5716%" y="831.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="33.3216%" y="805" width="0.0176%" height="15" fill="rgb(224,132,51)" fg:x="1889" fg:w="1"/><text x="33.5716%" y="815.50"></text></g><g><title>DecompressAmount (1 samples, 0.02%)</title><rect x="33.3392%" y="885" width="0.0176%" height="15" fill="rgb(240,63,7)" fg:x="1890" fg:w="1"/><text x="33.5892%" y="895.50"></text></g><g><title>GetSpecialScriptSize (1 samples, 0.02%)</title><rect x="33.3569%" y="885" width="0.0176%" height="15" fill="rgb(249,182,41)" fg:x="1891" fg:w="1"/><text x="33.6069%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;Coin&amp;&gt;(Coin&amp;) (8 samples, 0.14%)</title><rect x="33.2510%" y="1061" width="0.1411%" height="15" fill="rgb(243,47,26)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="1071.50"></text></g><g><title>void Unserialize&lt;DataStream, Coin&amp;&gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="1045" width="0.1411%" height="15" fill="rgb(233,48,2)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="1055.50"></text></g><g><title>void Coin::Unserialize&lt;DataStream&gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="1029" width="0.1411%" height="15" fill="rgb(244,165,34)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="1039.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut&amp;&gt; &gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="1013" width="0.1411%" height="15" fill="rgb(207,89,7)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="1023.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut&amp;&gt;::Unserialize&lt;DataStream&gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="997" width="0.1411%" height="15" fill="rgb(244,117,36)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="1007.50"></text></g><g><title>void TxOutCompression::Unser&lt;DataStream&gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="981" width="0.1411%" height="15" fill="rgb(226,144,34)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="991.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut, ActionUnserialize&gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="965" width="0.1411%" height="15" fill="rgb(213,23,19)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="975.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;, Wrapper&lt;ScriptCompression, CScript&amp;&gt; &gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="949" width="0.1411%" height="15" fill="rgb(217,75,12)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="959.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long&amp;&gt;&amp;, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (8 samples, 0.14%)</title><rect x="33.2510%" y="933" width="0.1411%" height="15" fill="rgb(224,159,17)" fg:x="1885" fg:w="8"/><text x="33.5010%" y="943.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript&amp;&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="33.3216%" y="917" width="0.0706%" height="15" fill="rgb(217,118,1)" fg:x="1889" fg:w="4"/><text x="33.5716%" y="927.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript&amp;&gt;::Unserialize&lt;DataStream&gt; (4 samples, 0.07%)</title><rect x="33.3216%" y="901" width="0.0706%" height="15" fill="rgb(232,180,48)" fg:x="1889" fg:w="4"/><text x="33.5716%" y="911.50"></text></g><g><title>unsigned long ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.3745%" y="885" width="0.0176%" height="15" fill="rgb(230,27,33)" fg:x="1892" fg:w="1"/><text x="33.6245%" y="895.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="33.3921%" y="1061" width="0.0176%" height="15" fill="rgb(205,31,21)" fg:x="1893" fg:w="1"/><text x="33.6421%" y="1071.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="33.3921%" y="1045" width="0.0176%" height="15" fill="rgb(253,59,4)" fg:x="1893" fg:w="1"/><text x="33.6421%" y="1055.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="33.3921%" y="1029" width="0.0176%" height="15" fill="rgb(224,201,9)" fg:x="1893" fg:w="1"/><text x="33.6421%" y="1039.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="33.3921%" y="1013" width="0.0176%" height="15" fill="rgb(229,206,30)" fg:x="1893" fg:w="1"/><text x="33.6421%" y="1023.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="33.3921%" y="997" width="0.0176%" height="15" fill="rgb(212,67,47)" fg:x="1893" fg:w="1"/><text x="33.6421%" y="1007.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="33.3921%" y="981" width="0.0176%" height="15" fill="rgb(211,96,50)" fg:x="1893" fg:w="1"/><text x="33.6421%" y="991.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="33.3921%" y="965" width="0.0176%" height="15" fill="rgb(252,114,18)" fg:x="1893" fg:w="1"/><text x="33.6421%" y="975.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="33.4098%" y="1061" width="0.0176%" height="15" fill="rgb(223,58,37)" fg:x="1894" fg:w="1"/><text x="33.6598%" y="1071.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="33.4098%" y="1045" width="0.0176%" height="15" fill="rgb(237,70,4)" fg:x="1894" fg:w="1"/><text x="33.6598%" y="1055.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (2 samples, 0.04%)</title><rect x="33.4274%" y="949" width="0.0353%" height="15" fill="rgb(244,85,46)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="959.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="33.4274%" y="933" width="0.0353%" height="15" fill="rgb(223,39,52)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="943.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="33.4274%" y="917" width="0.0353%" height="15" fill="rgb(218,200,14)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="927.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.04%)</title><rect x="33.4274%" y="901" width="0.0353%" height="15" fill="rgb(208,171,16)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="911.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (2 samples, 0.04%)</title><rect x="33.4274%" y="885" width="0.0353%" height="15" fill="rgb(234,200,18)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="895.50"></text></g><g><title>DataStream::write (2 samples, 0.04%)</title><rect x="33.4274%" y="869" width="0.0353%" height="15" fill="rgb(228,45,11)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="879.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.04%)</title><rect x="33.4274%" y="853" width="0.0353%" height="15" fill="rgb(237,182,11)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="863.50"></text></g><g><title>CCoinsViewDB::GetCoin (2 samples, 0.04%)</title><rect x="33.4274%" y="837" width="0.0353%" height="15" fill="rgb(241,175,49)" fg:x="1895" fg:w="2"/><text x="33.6774%" y="847.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="33.4451%" y="821" width="0.0176%" height="15" fill="rgb(247,38,35)" fg:x="1896" fg:w="1"/><text x="33.6951%" y="831.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="33.4451%" y="805" width="0.0176%" height="15" fill="rgb(228,39,49)" fg:x="1896" fg:w="1"/><text x="33.6951%" y="815.50"></text></g><g><title>CTxOut::SetNull (1 samples, 0.02%)</title><rect x="33.4451%" y="789" width="0.0176%" height="15" fill="rgb(226,101,26)" fg:x="1896" fg:w="1"/><text x="33.6951%" y="799.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.04%)</title><rect x="33.4627%" y="885" width="0.0353%" height="15" fill="rgb(206,141,19)" fg:x="1897" fg:w="2"/><text x="33.7127%" y="895.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.02%)</title><rect x="33.4803%" y="869" width="0.0176%" height="15" fill="rgb(211,200,13)" fg:x="1898" fg:w="1"/><text x="33.7303%" y="879.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="33.4803%" y="853" width="0.0176%" height="15" fill="rgb(241,121,6)" fg:x="1898" fg:w="1"/><text x="33.7303%" y="863.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="33.4980%" y="885" width="0.0353%" height="15" fill="rgb(234,221,29)" fg:x="1899" fg:w="2"/><text x="33.7480%" y="895.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.5156%" y="869" width="0.0176%" height="15" fill="rgb(229,136,5)" fg:x="1900" fg:w="1"/><text x="33.7656%" y="879.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="33.5156%" y="853" width="0.0176%" height="15" fill="rgb(238,36,11)" fg:x="1900" fg:w="1"/><text x="33.7656%" y="863.50"></text></g><g><title>CCoinsViewDB::GetCoin (362 samples, 6.39%)</title><rect x="27.1653%" y="1093" width="6.3856%" height="15" fill="rgb(251,55,41)" fg:x="1540" fg:w="362"/><text x="27.4153%" y="1103.50">CCoinsVi..</text></g><g><title>Read&lt;(anonymous namespace)::CoinEntry, Coin&gt; (17 samples, 0.30%)</title><rect x="33.2510%" y="1077" width="0.2999%" height="15" fill="rgb(242,34,40)" fg:x="1885" fg:w="17"/><text x="33.5010%" y="1087.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (7 samples, 0.12%)</title><rect x="33.4274%" y="1061" width="0.1235%" height="15" fill="rgb(215,42,17)" fg:x="1895" fg:w="7"/><text x="33.6774%" y="1071.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (7 samples, 0.12%)</title><rect x="33.4274%" y="1045" width="0.1235%" height="15" fill="rgb(207,44,46)" fg:x="1895" fg:w="7"/><text x="33.6774%" y="1055.50"></text></g><g><title>Serialize&lt;DataStream&gt; (7 samples, 0.12%)</title><rect x="33.4274%" y="1029" width="0.1235%" height="15" fill="rgb(211,206,28)" fg:x="1895" fg:w="7"/><text x="33.6774%" y="1039.50"></text></g><g><title>Ser&lt;DataStream&gt; (7 samples, 0.12%)</title><rect x="33.4274%" y="1013" width="0.1235%" height="15" fill="rgb(237,167,16)" fg:x="1895" fg:w="7"/><text x="33.6774%" y="1023.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (7 samples, 0.12%)</title><rect x="33.4274%" y="997" width="0.1235%" height="15" fill="rgb(233,66,6)" fg:x="1895" fg:w="7"/><text x="33.6774%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="33.4274%" y="981" width="0.1235%" height="15" fill="rgb(246,123,29)" fg:x="1895" fg:w="7"/><text x="33.6774%" y="991.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="33.4274%" y="965" width="0.1235%" height="15" fill="rgb(209,62,40)" fg:x="1895" fg:w="7"/><text x="33.6774%" y="975.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (5 samples, 0.09%)</title><rect x="33.4627%" y="949" width="0.0882%" height="15" fill="rgb(218,4,25)" fg:x="1897" fg:w="5"/><text x="33.7127%" y="959.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (5 samples, 0.09%)</title><rect x="33.4627%" y="933" width="0.0882%" height="15" fill="rgb(253,91,49)" fg:x="1897" fg:w="5"/><text x="33.7127%" y="943.50"></text></g><g><title>DataStream::write (5 samples, 0.09%)</title><rect x="33.4627%" y="917" width="0.0882%" height="15" fill="rgb(228,155,29)" fg:x="1897" fg:w="5"/><text x="33.7127%" y="927.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (5 samples, 0.09%)</title><rect x="33.4627%" y="901" width="0.0882%" height="15" fill="rgb(243,57,37)" fg:x="1897" fg:w="5"/><text x="33.7127%" y="911.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="33.5333%" y="885" width="0.0176%" height="15" fill="rgb(244,167,17)" fg:x="1901" fg:w="1"/><text x="33.7833%" y="895.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="33.5333%" y="869" width="0.0176%" height="15" fill="rgb(207,181,38)" fg:x="1901" fg:w="1"/><text x="33.7833%" y="879.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="33.5333%" y="853" width="0.0176%" height="15" fill="rgb(211,8,23)" fg:x="1901" fg:w="1"/><text x="33.7833%" y="863.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="33.5333%" y="837" width="0.0176%" height="15" fill="rgb(235,11,44)" fg:x="1901" fg:w="1"/><text x="33.7833%" y="847.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="33.5333%" y="821" width="0.0176%" height="15" fill="rgb(248,18,52)" fg:x="1901" fg:w="1"/><text x="33.7833%" y="831.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="33.5333%" y="805" width="0.0176%" height="15" fill="rgb(208,4,7)" fg:x="1901" fg:w="1"/><text x="33.7833%" y="815.50"></text></g><g><title>SipHashUint256Extra (16 samples, 0.28%)</title><rect x="33.5509%" y="1093" width="0.2822%" height="15" fill="rgb(240,17,39)" fg:x="1902" fg:w="16"/><text x="33.8009%" y="1103.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (7 samples, 0.12%)</title><rect x="33.7096%" y="1077" width="0.1235%" height="15" fill="rgb(207,170,3)" fg:x="1911" fg:w="7"/><text x="33.9596%" y="1087.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (7 samples, 0.12%)</title><rect x="33.7096%" y="1061" width="0.1235%" height="15" fill="rgb(236,100,52)" fg:x="1911" fg:w="7"/><text x="33.9596%" y="1071.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="33.8331%" y="1093" width="0.0176%" height="15" fill="rgb(246,78,51)" fg:x="1918" fg:w="1"/><text x="34.0831%" y="1103.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="33.8331%" y="1077" width="0.0176%" height="15" fill="rgb(211,17,15)" fg:x="1918" fg:w="1"/><text x="34.0831%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="33.8331%" y="1061" width="0.0176%" height="15" fill="rgb(209,59,46)" fg:x="1918" fg:w="1"/><text x="34.0831%" y="1071.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="33.8331%" y="1045" width="0.0176%" height="15" fill="rgb(210,92,25)" fg:x="1918" fg:w="1"/><text x="34.0831%" y="1055.50"></text></g><g><title>CCoinsViewBacked::GetCoin (380 samples, 6.70%)</title><rect x="27.1653%" y="1109" width="6.7031%" height="15" fill="rgb(238,174,52)" fg:x="1540" fg:w="380"/><text x="27.4153%" y="1119.50">CCoinsVie..</text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="33.8508%" y="1093" width="0.0176%" height="15" fill="rgb(230,73,7)" fg:x="1919" fg:w="1"/><text x="34.1008%" y="1103.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="33.8508%" y="1077" width="0.0176%" height="15" fill="rgb(243,124,40)" fg:x="1919" fg:w="1"/><text x="34.1008%" y="1087.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="33.8508%" y="1061" width="0.0176%" height="15" fill="rgb(244,170,11)" fg:x="1919" fg:w="1"/><text x="34.1008%" y="1071.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="33.8508%" y="1045" width="0.0176%" height="15" fill="rgb(207,114,54)" fg:x="1919" fg:w="1"/><text x="34.1008%" y="1055.50"></text></g><g><title>std::tuple&lt;COutPoint const&amp;&gt;::tuple (1 samples, 0.02%)</title><rect x="33.8508%" y="1029" width="0.0176%" height="15" fill="rgb(205,42,20)" fg:x="1919" fg:w="1"/><text x="34.1008%" y="1039.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, COutPoint const&amp;&gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="33.8508%" y="1013" width="0.0176%" height="15" fill="rgb(230,30,28)" fg:x="1919" fg:w="1"/><text x="34.1008%" y="1023.50"></text></g><g><title>SipHashUint256Extra (3 samples, 0.05%)</title><rect x="33.8684%" y="1109" width="0.0529%" height="15" fill="rgb(205,73,54)" fg:x="1920" fg:w="3"/><text x="34.1184%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="33.8860%" y="1093" width="0.0353%" height="15" fill="rgb(254,227,23)" fg:x="1921" fg:w="2"/><text x="34.1360%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="33.8860%" y="1077" width="0.0353%" height="15" fill="rgb(228,202,34)" fg:x="1921" fg:w="2"/><text x="34.1360%" y="1087.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (385 samples, 6.79%)</title><rect x="27.1653%" y="1157" width="6.7913%" height="15" fill="rgb(222,225,37)" fg:x="1540" fg:w="385"/><text x="27.4153%" y="1167.50">CCoinsVie..</text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (385 samples, 6.79%)</title><rect x="27.1653%" y="1141" width="6.7913%" height="15" fill="rgb(221,14,54)" fg:x="1540" fg:w="385"/><text x="27.4153%" y="1151.50">ExecuteBa..</text></g><g><title>CCoinsViewErrorCatcher::GetCoin (385 samples, 6.79%)</title><rect x="27.1653%" y="1125" width="6.7913%" height="15" fill="rgb(254,102,2)" fg:x="1540" fg:w="385"/><text x="27.4153%" y="1135.50">CCoinsVie..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="33.9213%" y="1109" width="0.0353%" height="15" fill="rgb(232,104,17)" fg:x="1923" fg:w="2"/><text x="34.1713%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="33.9566%" y="1157" width="0.0882%" height="15" fill="rgb(250,220,14)" fg:x="1925" fg:w="5"/><text x="34.2066%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.04%)</title><rect x="34.0448%" y="1109" width="0.0353%" height="15" fill="rgb(241,158,9)" fg:x="1930" fg:w="2"/><text x="34.2948%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (2 samples, 0.04%)</title><rect x="34.3094%" y="1093" width="0.0353%" height="15" fill="rgb(246,9,43)" fg:x="1945" fg:w="2"/><text x="34.5594%" y="1103.50"></text></g><g><title>ReadLE64 (2 samples, 0.04%)</title><rect x="34.3094%" y="1077" width="0.0353%" height="15" fill="rgb(206,73,33)" fg:x="1945" fg:w="2"/><text x="34.5594%" y="1087.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="34.3094%" y="1061" width="0.0353%" height="15" fill="rgb(222,79,8)" fg:x="1945" fg:w="2"/><text x="34.5594%" y="1071.50"></text></g><g><title>SipHashUint256Extra (20 samples, 0.35%)</title><rect x="34.0801%" y="1109" width="0.3528%" height="15" fill="rgb(234,8,54)" fg:x="1932" fg:w="20"/><text x="34.3301%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="34.3447%" y="1093" width="0.0882%" height="15" fill="rgb(209,134,38)" fg:x="1947" fg:w="5"/><text x="34.5947%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="34.3447%" y="1077" width="0.0882%" height="15" fill="rgb(230,127,29)" fg:x="1947" fg:w="5"/><text x="34.5947%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="1093" width="0.0176%" height="15" fill="rgb(242,44,41)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="1077" width="0.0176%" height="15" fill="rgb(222,56,43)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="1061" width="0.0176%" height="15" fill="rgb(238,39,47)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="1045" width="0.0176%" height="15" fill="rgb(226,79,43)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="1029" width="0.0176%" height="15" fill="rgb(242,105,53)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="1013" width="0.0176%" height="15" fill="rgb(251,132,46)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="1023.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="34.4682%" y="997" width="0.0176%" height="15" fill="rgb(231,77,14)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="981" width="0.0176%" height="15" fill="rgb(240,135,9)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="965" width="0.0176%" height="15" fill="rgb(248,109,14)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="34.4682%" y="949" width="0.0176%" height="15" fill="rgb(227,146,52)" fg:x="1954" fg:w="1"/><text x="34.7182%" y="959.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="34.4329%" y="1109" width="0.0882%" height="15" fill="rgb(232,54,3)" fg:x="1952" fg:w="5"/><text x="34.6829%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="34.4858%" y="1093" width="0.0353%" height="15" fill="rgb(229,201,43)" fg:x="1955" fg:w="2"/><text x="34.7358%" y="1103.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="34.4858%" y="1077" width="0.0353%" height="15" fill="rgb(252,161,33)" fg:x="1955" fg:w="2"/><text x="34.7358%" y="1087.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="34.4858%" y="1061" width="0.0353%" height="15" fill="rgb(226,146,40)" fg:x="1955" fg:w="2"/><text x="34.7358%" y="1071.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="34.4858%" y="1045" width="0.0353%" height="15" fill="rgb(219,47,25)" fg:x="1955" fg:w="2"/><text x="34.7358%" y="1055.50"></text></g><g><title>transaction_identifier&lt;false&gt;::operator uint256 const&amp; (1 samples, 0.02%)</title><rect x="34.5034%" y="1029" width="0.0176%" height="15" fill="rgb(250,135,13)" fg:x="1956" fg:w="1"/><text x="34.7534%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (30 samples, 0.53%)</title><rect x="34.0448%" y="1125" width="0.5292%" height="15" fill="rgb(219,229,18)" fg:x="1930" fg:w="30"/><text x="34.2948%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (3 samples, 0.05%)</title><rect x="34.5211%" y="1109" width="0.0529%" height="15" fill="rgb(217,152,27)" fg:x="1957" fg:w="3"/><text x="34.7711%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="34.5564%" y="1093" width="0.0176%" height="15" fill="rgb(225,71,47)" fg:x="1959" fg:w="1"/><text x="34.8064%" y="1103.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="34.5740%" y="1109" width="0.0176%" height="15" fill="rgb(220,139,14)" fg:x="1960" fg:w="1"/><text x="34.8240%" y="1119.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.5740%" y="1093" width="0.0176%" height="15" fill="rgb(247,54,32)" fg:x="1960" fg:w="1"/><text x="34.8240%" y="1103.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="34.5740%" y="1077" width="0.0176%" height="15" fill="rgb(252,131,39)" fg:x="1960" fg:w="1"/><text x="34.8240%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (423 samples, 7.46%)</title><rect x="27.1653%" y="1173" width="7.4616%" height="15" fill="rgb(210,108,39)" fg:x="1540" fg:w="423"/><text x="27.4153%" y="1183.50">CCoinsView..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (33 samples, 0.58%)</title><rect x="34.0448%" y="1157" width="0.5821%" height="15" fill="rgb(205,23,29)" fg:x="1930" fg:w="33"/><text x="34.2948%" y="1167.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (33 samples, 0.58%)</title><rect x="34.0448%" y="1141" width="0.5821%" height="15" fill="rgb(246,139,46)" fg:x="1930" fg:w="33"/><text x="34.2948%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="34.5740%" y="1125" width="0.0529%" height="15" fill="rgb(250,81,26)" fg:x="1960" fg:w="3"/><text x="34.8240%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="34.5916%" y="1109" width="0.0353%" height="15" fill="rgb(214,104,7)" fg:x="1961" fg:w="2"/><text x="34.8416%" y="1119.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.12%)</title><rect x="34.6269%" y="1173" width="0.1235%" height="15" fill="rgb(233,189,8)" fg:x="1963" fg:w="7"/><text x="34.8769%" y="1183.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="34.7151%" y="1157" width="0.0353%" height="15" fill="rgb(228,141,17)" fg:x="1968" fg:w="2"/><text x="34.9651%" y="1167.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="34.7151%" y="1141" width="0.0353%" height="15" fill="rgb(247,157,1)" fg:x="1968" fg:w="2"/><text x="34.9651%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="34.7504%" y="1173" width="0.0353%" height="15" fill="rgb(249,225,5)" fg:x="1970" fg:w="2"/><text x="35.0004%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (2 samples, 0.04%)</title><rect x="34.7857%" y="1013" width="0.0353%" height="15" fill="rgb(242,55,13)" fg:x="1972" fg:w="2"/><text x="35.0357%" y="1023.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="34.8033%" y="997" width="0.0176%" height="15" fill="rgb(230,49,50)" fg:x="1973" fg:w="1"/><text x="35.0533%" y="1007.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="34.8033%" y="981" width="0.0176%" height="15" fill="rgb(241,111,38)" fg:x="1973" fg:w="1"/><text x="35.0533%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="34.8210%" y="1013" width="0.0176%" height="15" fill="rgb(252,155,4)" fg:x="1974" fg:w="1"/><text x="35.0710%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="34.8210%" y="997" width="0.0176%" height="15" fill="rgb(212,69,32)" fg:x="1974" fg:w="1"/><text x="35.0710%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (1 samples, 0.02%)</title><rect x="34.8210%" y="981" width="0.0176%" height="15" fill="rgb(243,107,47)" fg:x="1974" fg:w="1"/><text x="35.0710%" y="991.50"></text></g><g><title>CCoinsViewCache::GetCoin (437 samples, 7.71%)</title><rect x="27.1653%" y="1189" width="7.7086%" height="15" fill="rgb(247,130,12)" fg:x="1540" fg:w="437"/><text x="27.4153%" y="1199.50">CCoinsViewC..</text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (5 samples, 0.09%)</title><rect x="34.7857%" y="1173" width="0.0882%" height="15" fill="rgb(233,74,16)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1183.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (5 samples, 0.09%)</title><rect x="34.7857%" y="1157" width="0.0882%" height="15" fill="rgb(208,58,18)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="34.7857%" y="1141" width="0.0882%" height="15" fill="rgb(242,225,1)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1151.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="34.7857%" y="1125" width="0.0882%" height="15" fill="rgb(249,39,40)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="34.7857%" y="1109" width="0.0882%" height="15" fill="rgb(207,72,44)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1119.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="34.7857%" y="1093" width="0.0882%" height="15" fill="rgb(215,193,12)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1103.50"></text></g><g><title>Coin::Coin (5 samples, 0.09%)</title><rect x="34.7857%" y="1077" width="0.0882%" height="15" fill="rgb(248,41,39)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1087.50"></text></g><g><title>CTxOut::CTxOut (5 samples, 0.09%)</title><rect x="34.7857%" y="1061" width="0.0882%" height="15" fill="rgb(253,85,4)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1071.50"></text></g><g><title>CScript::CScript (5 samples, 0.09%)</title><rect x="34.7857%" y="1045" width="0.0882%" height="15" fill="rgb(243,70,31)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (5 samples, 0.09%)</title><rect x="34.7857%" y="1029" width="0.0882%" height="15" fill="rgb(253,195,26)" fg:x="1972" fg:w="5"/><text x="35.0357%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (2 samples, 0.04%)</title><rect x="34.8386%" y="1013" width="0.0353%" height="15" fill="rgb(243,42,11)" fg:x="1975" fg:w="2"/><text x="35.0886%" y="1023.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="34.8739%" y="1189" width="0.0176%" height="15" fill="rgb(239,66,17)" fg:x="1977" fg:w="1"/><text x="35.1239%" y="1199.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="34.8739%" y="1173" width="0.0176%" height="15" fill="rgb(217,132,21)" fg:x="1977" fg:w="1"/><text x="35.1239%" y="1183.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="34.8739%" y="1157" width="0.0176%" height="15" fill="rgb(252,202,21)" fg:x="1977" fg:w="1"/><text x="35.1239%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="34.8739%" y="1141" width="0.0176%" height="15" fill="rgb(233,98,36)" fg:x="1977" fg:w="1"/><text x="35.1239%" y="1151.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="34.8915%" y="1189" width="0.0706%" height="15" fill="rgb(216,153,54)" fg:x="1978" fg:w="4"/><text x="35.1415%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="34.9092%" y="1173" width="0.0529%" height="15" fill="rgb(250,99,7)" fg:x="1979" fg:w="3"/><text x="35.1592%" y="1183.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="34.9092%" y="1157" width="0.0529%" height="15" fill="rgb(207,56,50)" fg:x="1979" fg:w="3"/><text x="35.1592%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.0150%" y="1173" width="0.0176%" height="15" fill="rgb(244,61,34)" fg:x="1985" fg:w="1"/><text x="35.2650%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.0150%" y="1157" width="0.0176%" height="15" fill="rgb(241,50,38)" fg:x="1985" fg:w="1"/><text x="35.2650%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="35.0150%" y="1141" width="0.0176%" height="15" fill="rgb(212,166,30)" fg:x="1985" fg:w="1"/><text x="35.2650%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="35.0150%" y="1125" width="0.0176%" height="15" fill="rgb(249,127,32)" fg:x="1985" fg:w="1"/><text x="35.2650%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="34.9621%" y="1189" width="0.0882%" height="15" fill="rgb(209,103,0)" fg:x="1982" fg:w="5"/><text x="35.2121%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="35.0326%" y="1173" width="0.0176%" height="15" fill="rgb(238,209,51)" fg:x="1986" fg:w="1"/><text x="35.2826%" y="1183.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="35.0326%" y="1157" width="0.0176%" height="15" fill="rgb(237,56,23)" fg:x="1986" fg:w="1"/><text x="35.2826%" y="1167.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="35.0326%" y="1141" width="0.0176%" height="15" fill="rgb(215,153,46)" fg:x="1986" fg:w="1"/><text x="35.2826%" y="1151.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="35.0326%" y="1125" width="0.0176%" height="15" fill="rgb(224,49,31)" fg:x="1986" fg:w="1"/><text x="35.2826%" y="1135.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="35.0326%" y="1109" width="0.0176%" height="15" fill="rgb(250,18,42)" fg:x="1986" fg:w="1"/><text x="35.2826%" y="1119.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="35.0326%" y="1093" width="0.0176%" height="15" fill="rgb(215,176,39)" fg:x="1986" fg:w="1"/><text x="35.2826%" y="1103.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="35.0326%" y="1077" width="0.0176%" height="15" fill="rgb(223,77,29)" fg:x="1986" fg:w="1"/><text x="35.2826%" y="1087.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="35.0679%" y="1157" width="0.0176%" height="15" fill="rgb(234,94,52)" fg:x="1988" fg:w="1"/><text x="35.3179%" y="1167.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="35.0856%" y="1141" width="0.0529%" height="15" fill="rgb(220,154,50)" fg:x="1989" fg:w="3"/><text x="35.3356%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (4 samples, 0.07%)</title><rect x="35.1385%" y="1141" width="0.0706%" height="15" fill="rgb(212,11,10)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (4 samples, 0.07%)</title><rect x="35.1385%" y="1125" width="0.0706%" height="15" fill="rgb(205,166,19)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (4 samples, 0.07%)</title><rect x="35.1385%" y="1109" width="0.0706%" height="15" fill="rgb(244,198,16)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="35.1385%" y="1093" width="0.0706%" height="15" fill="rgb(219,69,12)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="35.1385%" y="1077" width="0.0706%" height="15" fill="rgb(245,30,7)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="35.1385%" y="1061" width="0.0706%" height="15" fill="rgb(218,221,48)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (4 samples, 0.07%)</title><rect x="35.1385%" y="1045" width="0.0706%" height="15" fill="rgb(216,66,15)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1055.50"></text></g><g><title>Coin::Coin (4 samples, 0.07%)</title><rect x="35.1385%" y="1029" width="0.0706%" height="15" fill="rgb(226,122,50)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (4 samples, 0.07%)</title><rect x="35.1385%" y="1013" width="0.0706%" height="15" fill="rgb(239,156,16)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1023.50"></text></g><g><title>CScript::CScript (4 samples, 0.07%)</title><rect x="35.1385%" y="997" width="0.0706%" height="15" fill="rgb(224,27,38)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (4 samples, 0.07%)</title><rect x="35.1385%" y="981" width="0.0706%" height="15" fill="rgb(224,39,27)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.07%)</title><rect x="35.1385%" y="965" width="0.0706%" height="15" fill="rgb(215,92,29)" fg:x="1992" fg:w="4"/><text x="35.3885%" y="975.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.11%)</title><rect x="35.2090%" y="1141" width="0.1058%" height="15" fill="rgb(207,159,16)" fg:x="1996" fg:w="6"/><text x="35.4590%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="35.2443%" y="1125" width="0.0706%" height="15" fill="rgb(238,163,47)" fg:x="1998" fg:w="4"/><text x="35.4943%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="35.2443%" y="1109" width="0.0706%" height="15" fill="rgb(219,91,49)" fg:x="1998" fg:w="4"/><text x="35.4943%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (14 samples, 0.25%)</title><rect x="35.0856%" y="1157" width="0.2470%" height="15" fill="rgb(227,167,31)" fg:x="1989" fg:w="14"/><text x="35.3356%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="35.3149%" y="1141" width="0.0176%" height="15" fill="rgb(234,80,54)" fg:x="2002" fg:w="1"/><text x="35.5649%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.3149%" y="1125" width="0.0176%" height="15" fill="rgb(212,114,2)" fg:x="2002" fg:w="1"/><text x="35.5649%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="35.3149%" y="1109" width="0.0176%" height="15" fill="rgb(234,50,24)" fg:x="2002" fg:w="1"/><text x="35.5649%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.02%)</title><rect x="35.3149%" y="1093" width="0.0176%" height="15" fill="rgb(221,68,8)" fg:x="2002" fg:w="1"/><text x="35.5649%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (1 samples, 0.02%)</title><rect x="35.3149%" y="1077" width="0.0176%" height="15" fill="rgb(254,180,31)" fg:x="2002" fg:w="1"/><text x="35.5649%" y="1087.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="35.3149%" y="1061" width="0.0176%" height="15" fill="rgb(247,130,50)" fg:x="2002" fg:w="1"/><text x="35.5649%" y="1071.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.16%)</title><rect x="35.3325%" y="1141" width="0.1588%" height="15" fill="rgb(211,109,4)" fg:x="2003" fg:w="9"/><text x="35.5825%" y="1151.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="35.4031%" y="1125" width="0.0882%" height="15" fill="rgb(238,50,21)" fg:x="2007" fg:w="5"/><text x="35.6531%" y="1135.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (5 samples, 0.09%)</title><rect x="35.4031%" y="1109" width="0.0882%" height="15" fill="rgb(225,57,45)" fg:x="2007" fg:w="5"/><text x="35.6531%" y="1119.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (4 samples, 0.07%)</title><rect x="35.4913%" y="1141" width="0.0706%" height="15" fill="rgb(209,196,50)" fg:x="2012" fg:w="4"/><text x="35.7413%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="35.4913%" y="1125" width="0.0706%" height="15" fill="rgb(242,140,13)" fg:x="2012" fg:w="4"/><text x="35.7413%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.07%)</title><rect x="35.4913%" y="1109" width="0.0706%" height="15" fill="rgb(217,111,7)" fg:x="2012" fg:w="4"/><text x="35.7413%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4 samples, 0.07%)</title><rect x="35.4913%" y="1093" width="0.0706%" height="15" fill="rgb(253,193,51)" fg:x="2012" fg:w="4"/><text x="35.7413%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (4 samples, 0.07%)</title><rect x="35.4913%" y="1077" width="0.0706%" height="15" fill="rgb(252,70,29)" fg:x="2012" fg:w="4"/><text x="35.7413%" y="1087.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="35.4913%" y="1061" width="0.0706%" height="15" fill="rgb(232,127,12)" fg:x="2012" fg:w="4"/><text x="35.7413%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.5442%" y="1045" width="0.0176%" height="15" fill="rgb(211,180,21)" fg:x="2015" fg:w="1"/><text x="35.7942%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="35.5442%" y="1029" width="0.0176%" height="15" fill="rgb(229,72,13)" fg:x="2015" fg:w="1"/><text x="35.7942%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (2 samples, 0.04%)</title><rect x="35.5795%" y="1109" width="0.0353%" height="15" fill="rgb(240,211,49)" fg:x="2017" fg:w="2"/><text x="35.8295%" y="1119.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_buckets (2 samples, 0.04%)</title><rect x="35.5795%" y="1093" width="0.0353%" height="15" fill="rgb(219,149,40)" fg:x="2017" fg:w="2"/><text x="35.8295%" y="1103.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="35.5795%" y="1077" width="0.0353%" height="15" fill="rgb(210,127,46)" fg:x="2017" fg:w="2"/><text x="35.8295%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.5971%" y="1061" width="0.0176%" height="15" fill="rgb(220,106,7)" fg:x="2018" fg:w="1"/><text x="35.8471%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.5971%" y="1045" width="0.0176%" height="15" fill="rgb(249,31,22)" fg:x="2018" fg:w="1"/><text x="35.8471%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.5971%" y="1029" width="0.0176%" height="15" fill="rgb(253,1,49)" fg:x="2018" fg:w="1"/><text x="35.8471%" y="1039.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (22 samples, 0.39%)</title><rect x="35.3325%" y="1157" width="0.3881%" height="15" fill="rgb(227,144,33)" fg:x="2003" fg:w="22"/><text x="35.5825%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (9 samples, 0.16%)</title><rect x="35.5618%" y="1141" width="0.1588%" height="15" fill="rgb(249,163,44)" fg:x="2016" fg:w="9"/><text x="35.8118%" y="1151.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (9 samples, 0.16%)</title><rect x="35.5618%" y="1125" width="0.1588%" height="15" fill="rgb(234,15,39)" fg:x="2016" fg:w="9"/><text x="35.8118%" y="1135.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.11%)</title><rect x="35.6147%" y="1109" width="0.1058%" height="15" fill="rgb(207,66,16)" fg:x="2019" fg:w="6"/><text x="35.8647%" y="1119.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.11%)</title><rect x="35.6147%" y="1093" width="0.1058%" height="15" fill="rgb(233,112,24)" fg:x="2019" fg:w="6"/><text x="35.8647%" y="1103.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.11%)</title><rect x="35.6147%" y="1077" width="0.1058%" height="15" fill="rgb(230,90,22)" fg:x="2019" fg:w="6"/><text x="35.8647%" y="1087.50"></text></g><g><title>SipHashUint256Extra (5 samples, 0.09%)</title><rect x="35.6324%" y="1061" width="0.0882%" height="15" fill="rgb(229,61,13)" fg:x="2020" fg:w="5"/><text x="35.8824%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="35.6677%" y="1045" width="0.0529%" height="15" fill="rgb(225,57,24)" fg:x="2022" fg:w="3"/><text x="35.9177%" y="1055.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="35.6677%" y="1029" width="0.0529%" height="15" fill="rgb(208,169,48)" fg:x="2022" fg:w="3"/><text x="35.9177%" y="1039.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="35.7206%" y="1141" width="0.0176%" height="15" fill="rgb(244,218,51)" fg:x="2025" fg:w="1"/><text x="35.9706%" y="1151.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="35.7206%" y="1125" width="0.0176%" height="15" fill="rgb(214,148,10)" fg:x="2025" fg:w="1"/><text x="35.9706%" y="1135.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="35.7206%" y="1109" width="0.0176%" height="15" fill="rgb(225,174,27)" fg:x="2025" fg:w="1"/><text x="35.9706%" y="1119.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="35.7206%" y="1093" width="0.0176%" height="15" fill="rgb(230,96,26)" fg:x="2025" fg:w="1"/><text x="35.9706%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="35.7206%" y="1077" width="0.0176%" height="15" fill="rgb(232,10,30)" fg:x="2025" fg:w="1"/><text x="35.9706%" y="1087.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.02%)</title><rect x="35.7382%" y="1141" width="0.0176%" height="15" fill="rgb(222,8,50)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1151.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (1 samples, 0.02%)</title><rect x="35.7382%" y="1125" width="0.0176%" height="15" fill="rgb(213,81,27)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1135.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (1 samples, 0.02%)</title><rect x="35.7382%" y="1109" width="0.0176%" height="15" fill="rgb(245,50,10)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1119.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="35.7382%" y="1093" width="0.0176%" height="15" fill="rgb(216,100,18)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="35.7382%" y="1077" width="0.0176%" height="15" fill="rgb(236,147,54)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1087.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="35.7382%" y="1061" width="0.0176%" height="15" fill="rgb(205,143,26)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (1 samples, 0.02%)</title><rect x="35.7382%" y="1045" width="0.0176%" height="15" fill="rgb(236,26,9)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1055.50"></text></g><g><title>Coin::Coin (1 samples, 0.02%)</title><rect x="35.7382%" y="1029" width="0.0176%" height="15" fill="rgb(221,165,53)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1039.50"></text></g><g><title>CTxOut::CTxOut (1 samples, 0.02%)</title><rect x="35.7382%" y="1013" width="0.0176%" height="15" fill="rgb(214,110,17)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1023.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="35.7382%" y="997" width="0.0176%" height="15" fill="rgb(237,197,12)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="35.7382%" y="981" width="0.0176%" height="15" fill="rgb(205,84,17)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="991.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="35.7382%" y="965" width="0.0176%" height="15" fill="rgb(237,18,45)" fg:x="2026" fg:w="1"/><text x="35.9882%" y="975.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.09%)</title><rect x="35.7206%" y="1157" width="0.0882%" height="15" fill="rgb(221,87,14)" fg:x="2025" fg:w="5"/><text x="35.9706%" y="1167.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="35.7559%" y="1141" width="0.0529%" height="15" fill="rgb(238,186,15)" fg:x="2027" fg:w="3"/><text x="36.0059%" y="1151.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="35.7559%" y="1125" width="0.0529%" height="15" fill="rgb(208,115,11)" fg:x="2027" fg:w="3"/><text x="36.0059%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::__construct_helper&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt;::type&gt;, std::is_constructible&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_construct&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (3 samples, 0.05%)</title><rect x="35.7559%" y="1109" width="0.0529%" height="15" fill="rgb(254,175,0)" fg:x="2027" fg:w="3"/><text x="36.0059%" y="1119.50"></text></g><g><title>decltype  (3 samples, 0.05%)</title><rect x="35.7559%" y="1093" width="0.0529%" height="15" fill="rgb(227,24,42)" fg:x="2027" fg:w="3"/><text x="36.0059%" y="1103.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;&gt; (3 samples, 0.05%)</title><rect x="35.7559%" y="1077" width="0.0529%" height="15" fill="rgb(223,211,37)" fg:x="2027" fg:w="3"/><text x="36.0059%" y="1087.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::pair&lt;COutPoint const&amp;, 0ul&gt; (3 samples, 0.05%)</title><rect x="35.7559%" y="1061" width="0.0529%" height="15" fill="rgb(235,49,27)" fg:x="2027" fg:w="3"/><text x="36.0059%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="35.7559%" y="1045" width="0.0529%" height="15" fill="rgb(254,97,51)" fg:x="2027" fg:w="3"/><text x="36.0059%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="35.7735%" y="1029" width="0.0353%" height="15" fill="rgb(249,51,40)" fg:x="2028" fg:w="2"/><text x="36.0235%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7911%" y="1013" width="0.0176%" height="15" fill="rgb(210,128,45)" fg:x="2029" fg:w="1"/><text x="36.0411%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="35.7911%" y="997" width="0.0176%" height="15" fill="rgb(224,137,50)" fg:x="2029" fg:w="1"/><text x="36.0411%" y="1007.50"></text></g><g><title>AddCoins (1 samples, 0.02%)</title><rect x="35.8088%" y="1125" width="0.0176%" height="15" fill="rgb(242,15,9)" fg:x="2030" fg:w="1"/><text x="36.0588%" y="1135.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="35.8088%" y="1109" width="0.0176%" height="15" fill="rgb(233,187,41)" fg:x="2030" fg:w="1"/><text x="36.0588%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (497 samples, 8.77%)</title><rect x="27.1476%" y="1205" width="8.7670%" height="15" fill="rgb(227,2,29)" fg:x="1539" fg:w="497"/><text x="27.3976%" y="1215.50">CCoinsViewCa..</text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (49 samples, 0.86%)</title><rect x="35.0503%" y="1189" width="0.8643%" height="15" fill="rgb(222,70,3)" fg:x="1987" fg:w="49"/><text x="35.3003%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (48 samples, 0.85%)</title><rect x="35.0679%" y="1173" width="0.8467%" height="15" fill="rgb(213,11,42)" fg:x="1988" fg:w="48"/><text x="35.3179%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (6 samples, 0.11%)</title><rect x="35.8088%" y="1157" width="0.1058%" height="15" fill="rgb(225,150,9)" fg:x="2030" fg:w="6"/><text x="36.0588%" y="1167.50"></text></g><g><title>SaltedOutpointHasher::operator (6 samples, 0.11%)</title><rect x="35.8088%" y="1141" width="0.1058%" height="15" fill="rgb(230,162,45)" fg:x="2030" fg:w="6"/><text x="36.0588%" y="1151.50"></text></g><g><title>CCoinsViewCache::GetCoin (5 samples, 0.09%)</title><rect x="35.8264%" y="1125" width="0.0882%" height="15" fill="rgb(222,14,52)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1135.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (5 samples, 0.09%)</title><rect x="35.8264%" y="1109" width="0.0882%" height="15" fill="rgb(254,198,14)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1119.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (5 samples, 0.09%)</title><rect x="35.8264%" y="1093" width="0.0882%" height="15" fill="rgb(220,217,30)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1103.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="35.8264%" y="1077" width="0.0882%" height="15" fill="rgb(215,146,41)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1087.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="35.8264%" y="1061" width="0.0882%" height="15" fill="rgb(217,27,36)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1071.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="35.8264%" y="1045" width="0.0882%" height="15" fill="rgb(219,218,39)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1055.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (5 samples, 0.09%)</title><rect x="35.8264%" y="1029" width="0.0882%" height="15" fill="rgb(219,4,42)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1039.50"></text></g><g><title>Coin::Coin (5 samples, 0.09%)</title><rect x="35.8264%" y="1013" width="0.0882%" height="15" fill="rgb(249,119,36)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1023.50"></text></g><g><title>CTxOut::CTxOut (5 samples, 0.09%)</title><rect x="35.8264%" y="997" width="0.0882%" height="15" fill="rgb(209,23,33)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="1007.50"></text></g><g><title>CScript::CScript (5 samples, 0.09%)</title><rect x="35.8264%" y="981" width="0.0882%" height="15" fill="rgb(211,10,0)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="991.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (5 samples, 0.09%)</title><rect x="35.8264%" y="965" width="0.0882%" height="15" fill="rgb(208,99,37)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="975.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (5 samples, 0.09%)</title><rect x="35.8264%" y="949" width="0.0882%" height="15" fill="rgb(213,132,31)" fg:x="2031" fg:w="5"/><text x="36.0764%" y="959.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="35.9499%" y="1029" width="0.0176%" height="15" fill="rgb(243,129,40)" fg:x="2038" fg:w="1"/><text x="36.1999%" y="1039.50"></text></g><g><title>CCoinsViewCache::GetCoin (8 samples, 0.14%)</title><rect x="35.9146%" y="1205" width="0.1411%" height="15" fill="rgb(210,66,33)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1215.50"></text></g><g><title>std::optional&lt;Coin&gt;::optional&lt;Coin&amp;, true&gt; (8 samples, 0.14%)</title><rect x="35.9146%" y="1189" width="0.1411%" height="15" fill="rgb(209,189,4)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1199.50"></text></g><g><title>std::_Optional_base&lt;Coin, false, false&gt;::_Optional_base&lt;Coin&amp;, false&gt; (8 samples, 0.14%)</title><rect x="35.9146%" y="1173" width="0.1411%" height="15" fill="rgb(214,107,37)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1183.50"></text></g><g><title>std::_Optional_payload&lt;Coin, false, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.14%)</title><rect x="35.9146%" y="1157" width="0.1411%" height="15" fill="rgb(245,88,54)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1167.50"></text></g><g><title>std::_Optional_payload&lt;Coin, true, false, false&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.14%)</title><rect x="35.9146%" y="1141" width="0.1411%" height="15" fill="rgb(205,146,20)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1151.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Optional_payload_base&lt;Coin&amp;&gt; (8 samples, 0.14%)</title><rect x="35.9146%" y="1125" width="0.1411%" height="15" fill="rgb(220,161,25)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1135.50"></text></g><g><title>std::_Optional_payload_base&lt;Coin&gt;::_Storage&lt;Coin, false&gt;::_Storage&lt;Coin&amp;&gt; (8 samples, 0.14%)</title><rect x="35.9146%" y="1109" width="0.1411%" height="15" fill="rgb(215,152,15)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1119.50"></text></g><g><title>Coin::Coin (8 samples, 0.14%)</title><rect x="35.9146%" y="1093" width="0.1411%" height="15" fill="rgb(233,192,44)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1103.50"></text></g><g><title>CTxOut::CTxOut (8 samples, 0.14%)</title><rect x="35.9146%" y="1077" width="0.1411%" height="15" fill="rgb(240,170,46)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1087.50"></text></g><g><title>CScript::CScript (8 samples, 0.14%)</title><rect x="35.9146%" y="1061" width="0.1411%" height="15" fill="rgb(207,104,33)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (8 samples, 0.14%)</title><rect x="35.9146%" y="1045" width="0.1411%" height="15" fill="rgb(219,21,39)" fg:x="2036" fg:w="8"/><text x="36.1646%" y="1055.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (5 samples, 0.09%)</title><rect x="35.9675%" y="1029" width="0.0882%" height="15" fill="rgb(214,133,29)" fg:x="2039" fg:w="5"/><text x="36.2175%" y="1039.50"></text></g><g><title>CCoinsViewCache::HaveInputs (509 samples, 8.98%)</title><rect x="27.1124%" y="1237" width="8.9787%" height="15" fill="rgb(226,93,6)" fg:x="1537" fg:w="509"/><text x="27.3624%" y="1247.50">CCoinsViewCac..</text></g><g><title>CCoinsViewCache::HaveCoin (509 samples, 8.98%)</title><rect x="27.1124%" y="1221" width="8.9787%" height="15" fill="rgb(252,222,34)" fg:x="1537" fg:w="509"/><text x="27.3624%" y="1231.50">CCoinsViewCac..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="36.0557%" y="1205" width="0.0353%" height="15" fill="rgb(252,92,48)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1215.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (2 samples, 0.04%)</title><rect x="36.0557%" y="1189" width="0.0353%" height="15" fill="rgb(245,223,24)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1199.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (2 samples, 0.04%)</title><rect x="36.0557%" y="1173" width="0.0353%" height="15" fill="rgb(205,176,3)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1183.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (2 samples, 0.04%)</title><rect x="36.0557%" y="1157" width="0.0353%" height="15" fill="rgb(235,151,15)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1167.50"></text></g><g><title>operator== (2 samples, 0.04%)</title><rect x="36.0557%" y="1141" width="0.0353%" height="15" fill="rgb(237,209,11)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1151.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (2 samples, 0.04%)</title><rect x="36.0557%" y="1125" width="0.0353%" height="15" fill="rgb(243,227,24)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1135.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.04%)</title><rect x="36.0557%" y="1109" width="0.0353%" height="15" fill="rgb(239,193,16)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1119.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.04%)</title><rect x="36.0557%" y="1093" width="0.0353%" height="15" fill="rgb(231,27,9)" fg:x="2044" fg:w="2"/><text x="36.3057%" y="1103.50"></text></g><g><title>SipHashUint256Extra (6 samples, 0.11%)</title><rect x="36.0910%" y="1237" width="0.1058%" height="15" fill="rgb(219,169,10)" fg:x="2046" fg:w="6"/><text x="36.3410%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="36.1263%" y="1221" width="0.0706%" height="15" fill="rgb(244,229,43)" fg:x="2048" fg:w="4"/><text x="36.3763%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (4 samples, 0.07%)</title><rect x="36.1263%" y="1205" width="0.0706%" height="15" fill="rgb(254,38,20)" fg:x="2048" fg:w="4"/><text x="36.3763%" y="1215.50"></text></g><g><title>Consensus::CheckTxInputs (555 samples, 9.79%)</title><rect x="26.4421%" y="1253" width="9.7901%" height="15" fill="rgb(250,47,30)" fg:x="1499" fg:w="555"/><text x="26.6921%" y="1263.50">Consensus::Che..</text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="36.1969%" y="1237" width="0.0353%" height="15" fill="rgb(224,124,36)" fg:x="2052" fg:w="2"/><text x="36.4469%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="36.2145%" y="1221" width="0.0176%" height="15" fill="rgb(246,68,51)" fg:x="2053" fg:w="1"/><text x="36.4645%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="36.2145%" y="1205" width="0.0176%" height="15" fill="rgb(253,43,49)" fg:x="2053" fg:w="1"/><text x="36.4645%" y="1215.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="36.2145%" y="1189" width="0.0176%" height="15" fill="rgb(219,54,36)" fg:x="2053" fg:w="1"/><text x="36.4645%" y="1199.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="36.2145%" y="1173" width="0.0176%" height="15" fill="rgb(227,133,34)" fg:x="2053" fg:w="1"/><text x="36.4645%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="36.2145%" y="1157" width="0.0176%" height="15" fill="rgb(247,227,15)" fg:x="2053" fg:w="1"/><text x="36.4645%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="36.2145%" y="1141" width="0.0176%" height="15" fill="rgb(229,96,14)" fg:x="2053" fg:w="1"/><text x="36.4645%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="36.2145%" y="1125" width="0.0176%" height="15" fill="rgb(220,79,17)" fg:x="2053" fg:w="1"/><text x="36.4645%" y="1135.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="36.2321%" y="1253" width="0.0176%" height="15" fill="rgb(205,131,53)" fg:x="2054" fg:w="1"/><text x="36.4821%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="36.2321%" y="1237" width="0.0176%" height="15" fill="rgb(209,50,29)" fg:x="2054" fg:w="1"/><text x="36.4821%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="36.2321%" y="1221" width="0.0176%" height="15" fill="rgb(245,86,46)" fg:x="2054" fg:w="1"/><text x="36.4821%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="36.2321%" y="1205" width="0.0176%" height="15" fill="rgb(235,66,46)" fg:x="2054" fg:w="1"/><text x="36.4821%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="36.2321%" y="1189" width="0.0176%" height="15" fill="rgb(232,148,31)" fg:x="2054" fg:w="1"/><text x="36.4821%" y="1199.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.02%)</title><rect x="36.2321%" y="1173" width="0.0176%" height="15" fill="rgb(217,149,8)" fg:x="2054" fg:w="1"/><text x="36.4821%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (1 samples, 0.02%)</title><rect x="36.2321%" y="1157" width="0.0176%" height="15" fill="rgb(209,183,11)" fg:x="2054" fg:w="1"/><text x="36.4821%" y="1167.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (4 samples, 0.07%)</title><rect x="36.2498%" y="1237" width="0.0706%" height="15" fill="rgb(208,55,20)" fg:x="2055" fg:w="4"/><text x="36.4998%" y="1247.50"></text></g><g><title>void std::sort&lt;long*&gt; (4 samples, 0.07%)</title><rect x="36.2498%" y="1221" width="0.0706%" height="15" fill="rgb(218,39,14)" fg:x="2055" fg:w="4"/><text x="36.4998%" y="1231.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (4 samples, 0.07%)</title><rect x="36.2498%" y="1205" width="0.0706%" height="15" fill="rgb(216,169,33)" fg:x="2055" fg:w="4"/><text x="36.4998%" y="1215.50"></text></g><g><title>SipHashUint256Extra (4 samples, 0.07%)</title><rect x="36.2498%" y="1189" width="0.0706%" height="15" fill="rgb(233,80,24)" fg:x="2055" fg:w="4"/><text x="36.4998%" y="1199.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (2 samples, 0.04%)</title><rect x="36.2851%" y="1173" width="0.0353%" height="15" fill="rgb(213,179,31)" fg:x="2057" fg:w="2"/><text x="36.5351%" y="1183.50"></text></g><g><title>ReadLE64 (2 samples, 0.04%)</title><rect x="36.2851%" y="1157" width="0.0353%" height="15" fill="rgb(209,19,5)" fg:x="2057" fg:w="2"/><text x="36.5351%" y="1167.50"></text></g><g><title>SipHashUint256Extra (2 samples, 0.04%)</title><rect x="36.2851%" y="1141" width="0.0353%" height="15" fill="rgb(219,18,35)" fg:x="2057" fg:w="2"/><text x="36.5351%" y="1151.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="36.3203%" y="1237" width="0.0176%" height="15" fill="rgb(209,169,16)" fg:x="2059" fg:w="1"/><text x="36.5703%" y="1247.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.3380%" y="1237" width="0.0176%" height="15" fill="rgb(245,90,51)" fg:x="2060" fg:w="1"/><text x="36.5880%" y="1247.50"></text></g><g><title>Chainstate::ConnectBlock (4 samples, 0.07%)</title><rect x="36.3556%" y="1237" width="0.0706%" height="15" fill="rgb(220,99,45)" fg:x="2061" fg:w="4"/><text x="36.6056%" y="1247.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="36.4085%" y="1221" width="0.0176%" height="15" fill="rgb(249,89,25)" fg:x="2064" fg:w="1"/><text x="36.6585%" y="1231.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.02%)</title><rect x="36.4085%" y="1205" width="0.0176%" height="15" fill="rgb(239,193,0)" fg:x="2064" fg:w="1"/><text x="36.6585%" y="1215.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="36.4262%" y="1237" width="0.0176%" height="15" fill="rgb(231,126,1)" fg:x="2065" fg:w="1"/><text x="36.6762%" y="1247.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="36.4967%" y="1221" width="0.0176%" height="15" fill="rgb(243,166,3)" fg:x="2069" fg:w="1"/><text x="36.7467%" y="1231.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="36.4967%" y="1205" width="0.0176%" height="15" fill="rgb(223,22,34)" fg:x="2069" fg:w="1"/><text x="36.7467%" y="1215.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="36.4967%" y="1189" width="0.0176%" height="15" fill="rgb(251,52,51)" fg:x="2069" fg:w="1"/><text x="36.7467%" y="1199.50"></text></g><g><title>SipHashUint256Extra (7 samples, 0.12%)</title><rect x="36.4438%" y="1237" width="0.1235%" height="15" fill="rgb(221,165,28)" fg:x="2066" fg:w="7"/><text x="36.6938%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="36.5144%" y="1221" width="0.0529%" height="15" fill="rgb(218,121,47)" fg:x="2070" fg:w="3"/><text x="36.7644%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (3 samples, 0.05%)</title><rect x="36.5144%" y="1205" width="0.0529%" height="15" fill="rgb(209,120,9)" fg:x="2070" fg:w="3"/><text x="36.7644%" y="1215.50"></text></g><g><title>EvaluateSequenceLocks (19 samples, 0.34%)</title><rect x="36.2498%" y="1253" width="0.3352%" height="15" fill="rgb(236,68,12)" fg:x="2055" fg:w="19"/><text x="36.4998%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="36.5673%" y="1237" width="0.0176%" height="15" fill="rgb(225,194,26)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="36.5673%" y="1221" width="0.0176%" height="15" fill="rgb(231,84,39)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="36.5673%" y="1205" width="0.0176%" height="15" fill="rgb(210,11,45)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1215.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="36.5673%" y="1189" width="0.0176%" height="15" fill="rgb(224,54,52)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1199.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="36.5673%" y="1173" width="0.0176%" height="15" fill="rgb(238,102,14)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="36.5673%" y="1157" width="0.0176%" height="15" fill="rgb(243,160,52)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="36.5673%" y="1141" width="0.0176%" height="15" fill="rgb(216,114,19)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="36.5673%" y="1125" width="0.0176%" height="15" fill="rgb(244,166,37)" fg:x="2073" fg:w="1"/><text x="36.8173%" y="1135.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="36.6202%" y="1141" width="0.0176%" height="15" fill="rgb(246,29,44)" fg:x="2076" fg:w="1"/><text x="36.8702%" y="1151.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="36.6202%" y="1125" width="0.0176%" height="15" fill="rgb(215,56,53)" fg:x="2076" fg:w="1"/><text x="36.8702%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="36.6202%" y="1173" width="0.0353%" height="15" fill="rgb(217,60,2)" fg:x="2076" fg:w="2"/><text x="36.8702%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (2 samples, 0.04%)</title><rect x="36.6202%" y="1157" width="0.0353%" height="15" fill="rgb(207,26,24)" fg:x="2076" fg:w="2"/><text x="36.8702%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="36.6379%" y="1141" width="0.0176%" height="15" fill="rgb(252,210,15)" fg:x="2077" fg:w="1"/><text x="36.8879%" y="1151.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="36.6555%" y="1141" width="0.0176%" height="15" fill="rgb(253,209,26)" fg:x="2078" fg:w="1"/><text x="36.9055%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (4 samples, 0.07%)</title><rect x="36.6202%" y="1221" width="0.0706%" height="15" fill="rgb(238,170,14)" fg:x="2076" fg:w="4"/><text x="36.8702%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (4 samples, 0.07%)</title><rect x="36.6202%" y="1205" width="0.0706%" height="15" fill="rgb(216,178,15)" fg:x="2076" fg:w="4"/><text x="36.8702%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (4 samples, 0.07%)</title><rect x="36.6202%" y="1189" width="0.0706%" height="15" fill="rgb(250,197,2)" fg:x="2076" fg:w="4"/><text x="36.8702%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="36.6555%" y="1173" width="0.0353%" height="15" fill="rgb(212,70,42)" fg:x="2078" fg:w="2"/><text x="36.9055%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="36.6555%" y="1157" width="0.0353%" height="15" fill="rgb(227,213,9)" fg:x="2078" fg:w="2"/><text x="36.9055%" y="1167.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="36.6731%" y="1141" width="0.0176%" height="15" fill="rgb(245,99,25)" fg:x="2079" fg:w="1"/><text x="36.9231%" y="1151.50"></text></g><g><title>CTransaction::IsCoinBase (1 samples, 0.02%)</title><rect x="36.6731%" y="1125" width="0.0176%" height="15" fill="rgb(250,82,29)" fg:x="2079" fg:w="1"/><text x="36.9231%" y="1135.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="36.6731%" y="1109" width="0.0176%" height="15" fill="rgb(241,226,54)" fg:x="2079" fg:w="1"/><text x="36.9231%" y="1119.50"></text></g><g><title>CCoinsViewCache::AccessCoin (5 samples, 0.09%)</title><rect x="36.6202%" y="1237" width="0.0882%" height="15" fill="rgb(221,99,41)" fg:x="2076" fg:w="5"/><text x="36.8702%" y="1247.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="36.6908%" y="1221" width="0.0176%" height="15" fill="rgb(213,90,21)" fg:x="2080" fg:w="1"/><text x="36.9408%" y="1231.50"></text></g><g><title>CScript::IsWitnessProgram (5 samples, 0.09%)</title><rect x="36.7084%" y="1237" width="0.0882%" height="15" fill="rgb(205,208,24)" fg:x="2081" fg:w="5"/><text x="36.9584%" y="1247.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1221" width="0.0706%" height="15" fill="rgb(246,31,12)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1205" width="0.0706%" height="15" fill="rgb(213,154,6)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1215.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1189" width="0.0706%" height="15" fill="rgb(222,163,29)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1199.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1173" width="0.0706%" height="15" fill="rgb(227,201,8)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1157" width="0.0706%" height="15" fill="rgb(233,9,32)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1167.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1141" width="0.0706%" height="15" fill="rgb(217,54,24)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1151.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1125" width="0.0706%" height="15" fill="rgb(235,192,0)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1135.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1109" width="0.0706%" height="15" fill="rgb(235,45,9)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1093" width="0.0706%" height="15" fill="rgb(246,42,40)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (4 samples, 0.07%)</title><rect x="36.7261%" y="1077" width="0.0706%" height="15" fill="rgb(248,111,24)" fg:x="2082" fg:w="4"/><text x="36.9761%" y="1087.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="36.7966%" y="1221" width="0.0176%" height="15" fill="rgb(249,65,22)" fg:x="2086" fg:w="1"/><text x="37.0466%" y="1231.50"></text></g><g><title>CScript::IsWitnessProgram (1 samples, 0.02%)</title><rect x="36.8143%" y="1221" width="0.0176%" height="15" fill="rgb(238,111,51)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="36.8143%" y="1205" width="0.0176%" height="15" fill="rgb(250,118,22)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_initialize&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="36.8143%" y="1189" width="0.0176%" height="15" fill="rgb(234,84,26)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="36.8143%" y="1173" width="0.0176%" height="15" fill="rgb(243,172,12)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="36.8143%" y="1157" width="0.0176%" height="15" fill="rgb(236,150,49)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1167.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="36.8143%" y="1141" width="0.0176%" height="15" fill="rgb(225,197,26)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1151.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="36.8143%" y="1125" width="0.0176%" height="15" fill="rgb(214,17,42)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1135.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (1 samples, 0.02%)</title><rect x="36.8143%" y="1109" width="0.0176%" height="15" fill="rgb(224,165,40)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1119.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="36.8143%" y="1093" width="0.0176%" height="15" fill="rgb(246,100,4)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1103.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="36.8143%" y="1077" width="0.0176%" height="15" fill="rgb(222,103,0)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1087.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="36.8143%" y="1061" width="0.0176%" height="15" fill="rgb(227,189,26)" fg:x="2087" fg:w="1"/><text x="37.0643%" y="1071.50"></text></g><g><title>CountWitnessSigOps (1 samples, 0.02%)</title><rect x="36.8319%" y="1221" width="0.0176%" height="15" fill="rgb(214,202,17)" fg:x="2088" fg:w="1"/><text x="37.0819%" y="1231.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.8319%" y="1205" width="0.0176%" height="15" fill="rgb(229,111,3)" fg:x="2088" fg:w="1"/><text x="37.0819%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.8319%" y="1189" width="0.0176%" height="15" fill="rgb(229,172,15)" fg:x="2088" fg:w="1"/><text x="37.0819%" y="1199.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="36.8319%" y="1173" width="0.0176%" height="15" fill="rgb(230,224,35)" fg:x="2088" fg:w="1"/><text x="37.0819%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="36.8495%" y="1221" width="0.0176%" height="15" fill="rgb(251,141,6)" fg:x="2089" fg:w="1"/><text x="37.0995%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="36.8672%" y="1205" width="0.0176%" height="15" fill="rgb(225,208,6)" fg:x="2090" fg:w="1"/><text x="37.1172%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="36.8672%" y="1189" width="0.0176%" height="15" fill="rgb(246,181,16)" fg:x="2090" fg:w="1"/><text x="37.1172%" y="1199.50"></text></g><g><title>GetScriptOp (2 samples, 0.04%)</title><rect x="36.8672%" y="1221" width="0.0353%" height="15" fill="rgb(227,129,36)" fg:x="2090" fg:w="2"/><text x="37.1172%" y="1231.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1205" width="0.0176%" height="15" fill="rgb(248,117,24)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1215.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1189" width="0.0176%" height="15" fill="rgb(214,185,35)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1199.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1173" width="0.0176%" height="15" fill="rgb(236,150,34)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1183.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1157" width="0.0176%" height="15" fill="rgb(243,228,27)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1167.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1141" width="0.0176%" height="15" fill="rgb(245,77,44)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1125" width="0.0176%" height="15" fill="rgb(235,214,42)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1135.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1109" width="0.0176%" height="15" fill="rgb(221,74,3)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1119.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1093" width="0.0176%" height="15" fill="rgb(206,121,29)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1103.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1077" width="0.0176%" height="15" fill="rgb(249,131,53)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1061" width="0.0176%" height="15" fill="rgb(236,170,29)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="36.8848%" y="1045" width="0.0176%" height="15" fill="rgb(247,96,15)" fg:x="2091" fg:w="1"/><text x="37.1348%" y="1055.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="36.9025%" y="1221" width="0.0176%" height="15" fill="rgb(211,210,7)" fg:x="2092" fg:w="1"/><text x="37.1525%" y="1231.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="36.9025%" y="1205" width="0.0176%" height="15" fill="rgb(240,88,50)" fg:x="2092" fg:w="1"/><text x="37.1525%" y="1215.50"></text></g><g><title>SipHashUint256Extra (15 samples, 0.26%)</title><rect x="36.9201%" y="1221" width="0.2646%" height="15" fill="rgb(209,229,26)" fg:x="2093" fg:w="15"/><text x="37.1701%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (6 samples, 0.11%)</title><rect x="37.0788%" y="1205" width="0.1058%" height="15" fill="rgb(210,68,23)" fg:x="2102" fg:w="6"/><text x="37.3288%" y="1215.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (6 samples, 0.11%)</title><rect x="37.0788%" y="1189" width="0.1058%" height="15" fill="rgb(229,180,13)" fg:x="2102" fg:w="6"/><text x="37.3288%" y="1199.50"></text></g><g><title>CountWitnessSigOps (23 samples, 0.41%)</title><rect x="36.7966%" y="1237" width="0.4057%" height="15" fill="rgb(236,53,44)" fg:x="2086" fg:w="23"/><text x="37.0466%" y="1247.50"></text></g><g><title>WitnessSigOps (1 samples, 0.02%)</title><rect x="37.1847%" y="1221" width="0.0176%" height="15" fill="rgb(244,214,29)" fg:x="2108" fg:w="1"/><text x="37.4347%" y="1231.50"></text></g><g><title>WitnessSigOps (1 samples, 0.02%)</title><rect x="37.1847%" y="1205" width="0.0176%" height="15" fill="rgb(220,75,29)" fg:x="2108" fg:w="1"/><text x="37.4347%" y="1215.50"></text></g><g><title>CScript::CScript&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.1847%" y="1189" width="0.0176%" height="15" fill="rgb(214,183,37)" fg:x="2108" fg:w="1"/><text x="37.4347%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.1847%" y="1173" width="0.0176%" height="15" fill="rgb(239,117,29)" fg:x="2108" fg:w="1"/><text x="37.4347%" y="1183.50"></text></g><g><title>void prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="37.1847%" y="1157" width="0.0176%" height="15" fill="rgb(237,171,35)" fg:x="2108" fg:w="1"/><text x="37.4347%" y="1167.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (5 samples, 0.09%)</title><rect x="37.2023%" y="1221" width="0.0882%" height="15" fill="rgb(229,178,53)" fg:x="2109" fg:w="5"/><text x="37.4523%" y="1231.50"></text></g><g><title>void std::sort&lt;long*&gt; (2 samples, 0.04%)</title><rect x="37.2552%" y="1205" width="0.0353%" height="15" fill="rgb(210,102,19)" fg:x="2112" fg:w="2"/><text x="37.5052%" y="1215.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.04%)</title><rect x="37.2552%" y="1189" width="0.0353%" height="15" fill="rgb(235,127,22)" fg:x="2112" fg:w="2"/><text x="37.5052%" y="1199.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.04%)</title><rect x="37.2552%" y="1173" width="0.0353%" height="15" fill="rgb(244,31,31)" fg:x="2112" fg:w="2"/><text x="37.5052%" y="1183.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.04%)</title><rect x="37.2552%" y="1157" width="0.0353%" height="15" fill="rgb(231,43,21)" fg:x="2112" fg:w="2"/><text x="37.5052%" y="1167.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;long*, __gnu_cxx::__ops::_Val_less_iter&gt; (2 samples, 0.04%)</title><rect x="37.2552%" y="1141" width="0.0353%" height="15" fill="rgb(217,131,35)" fg:x="2112" fg:w="2"/><text x="37.5052%" y="1151.50"></text></g><g><title>CBlockIndex::GetMedianTimePast (1 samples, 0.02%)</title><rect x="37.3258%" y="1189" width="0.0176%" height="15" fill="rgb(221,149,4)" fg:x="2116" fg:w="1"/><text x="37.5758%" y="1199.50"></text></g><g><title>void std::sort&lt;long*&gt; (1 samples, 0.02%)</title><rect x="37.3258%" y="1173" width="0.0176%" height="15" fill="rgb(232,170,28)" fg:x="2116" fg:w="1"/><text x="37.5758%" y="1183.50"></text></g><g><title>void std::__sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="37.3258%" y="1157" width="0.0176%" height="15" fill="rgb(238,56,10)" fg:x="2116" fg:w="1"/><text x="37.5758%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="37.3258%" y="1141" width="0.0176%" height="15" fill="rgb(235,196,14)" fg:x="2116" fg:w="1"/><text x="37.5758%" y="1151.50"></text></g><g><title>void std::__insertion_sort&lt;long*, __gnu_cxx::__ops::_Iter_less_iter&gt; (1 samples, 0.02%)</title><rect x="37.3258%" y="1125" width="0.0176%" height="15" fill="rgb(216,45,48)" fg:x="2116" fg:w="1"/><text x="37.5758%" y="1135.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="37.3434%" y="1173" width="0.0176%" height="15" fill="rgb(238,213,17)" fg:x="2117" fg:w="1"/><text x="37.5934%" y="1183.50"></text></g><g><title>CScript::GetSigOpCount (2 samples, 0.04%)</title><rect x="37.3434%" y="1189" width="0.0353%" height="15" fill="rgb(212,13,2)" fg:x="2117" fg:w="2"/><text x="37.5934%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="37.3611%" y="1173" width="0.0176%" height="15" fill="rgb(240,114,20)" fg:x="2118" fg:w="1"/><text x="37.6111%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="37.3611%" y="1157" width="0.0176%" height="15" fill="rgb(228,41,40)" fg:x="2118" fg:w="1"/><text x="37.6111%" y="1167.50"></text></g><g><title>EvaluateSequenceLocks (1 samples, 0.02%)</title><rect x="37.3787%" y="1189" width="0.0176%" height="15" fill="rgb(244,132,35)" fg:x="2119" fg:w="1"/><text x="37.6287%" y="1199.50"></text></g><g><title>GetLegacySigOpCount (2 samples, 0.04%)</title><rect x="37.3964%" y="1189" width="0.0353%" height="15" fill="rgb(253,189,4)" fg:x="2120" fg:w="2"/><text x="37.6464%" y="1199.50"></text></g><g><title>GetScriptOp (4 samples, 0.07%)</title><rect x="37.4316%" y="1189" width="0.0706%" height="15" fill="rgb(224,37,19)" fg:x="2122" fg:w="4"/><text x="37.6816%" y="1199.50"></text></g><g><title>CScript::GetOp (13 samples, 0.23%)</title><rect x="37.2905%" y="1205" width="0.2293%" height="15" fill="rgb(235,223,18)" fg:x="2114" fg:w="13"/><text x="37.5405%" y="1215.50"></text></g><g><title>GetTransactionSigOpCost (1 samples, 0.02%)</title><rect x="37.5022%" y="1189" width="0.0176%" height="15" fill="rgb(235,163,25)" fg:x="2126" fg:w="1"/><text x="37.7522%" y="1199.50"></text></g><g><title>CScript::GetSigOpCount (14 samples, 0.25%)</title><rect x="37.2905%" y="1221" width="0.2470%" height="15" fill="rgb(217,145,28)" fg:x="2114" fg:w="14"/><text x="37.5405%" y="1231.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="37.5198%" y="1205" width="0.0176%" height="15" fill="rgb(223,223,32)" fg:x="2127" fg:w="1"/><text x="37.7698%" y="1215.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="37.5198%" y="1189" width="0.0176%" height="15" fill="rgb(227,189,39)" fg:x="2127" fg:w="1"/><text x="37.7698%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="37.5198%" y="1173" width="0.0176%" height="15" fill="rgb(248,10,22)" fg:x="2127" fg:w="1"/><text x="37.7698%" y="1183.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="37.5375%" y="1221" width="0.0176%" height="15" fill="rgb(248,46,39)" fg:x="2128" fg:w="1"/><text x="37.7875%" y="1231.50"></text></g><g><title>TxValidationState::~TxValidationState (1 samples, 0.02%)</title><rect x="37.5375%" y="1205" width="0.0176%" height="15" fill="rgb(248,113,48)" fg:x="2128" fg:w="1"/><text x="37.7875%" y="1215.50"></text></g><g><title>ValidationState&lt;TxValidationResult&gt;::~ValidationState (1 samples, 0.02%)</title><rect x="37.5375%" y="1189" width="0.0176%" height="15" fill="rgb(245,16,25)" fg:x="2128" fg:w="1"/><text x="37.7875%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="37.5375%" y="1173" width="0.0176%" height="15" fill="rgb(249,152,16)" fg:x="2128" fg:w="1"/><text x="37.7875%" y="1183.50"></text></g><g><title>GetScriptOp (5 samples, 0.09%)</title><rect x="37.5551%" y="1221" width="0.0882%" height="15" fill="rgb(250,16,1)" fg:x="2129" fg:w="5"/><text x="37.8051%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (27 samples, 0.48%)</title><rect x="37.2023%" y="1237" width="0.4763%" height="15" fill="rgb(249,138,3)" fg:x="2109" fg:w="27"/><text x="37.4523%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;long*, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (2 samples, 0.04%)</title><rect x="37.6433%" y="1221" width="0.0353%" height="15" fill="rgb(227,71,41)" fg:x="2134" fg:w="2"/><text x="37.8933%" y="1231.50"></text></g><g><title>CCoinsViewCache::AccessCoin (1 samples, 0.02%)</title><rect x="37.6786%" y="1125" width="0.0176%" height="15" fill="rgb(209,184,23)" fg:x="2136" fg:w="1"/><text x="37.9286%" y="1135.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="37.6962%" y="1125" width="0.0176%" height="15" fill="rgb(223,215,31)" fg:x="2137" fg:w="1"/><text x="37.9462%" y="1135.50"></text></g><g><title>GetP2SHSigOpCount (1 samples, 0.02%)</title><rect x="37.6962%" y="1109" width="0.0176%" height="15" fill="rgb(210,146,28)" fg:x="2137" fg:w="1"/><text x="37.9462%" y="1119.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="37.6786%" y="1189" width="0.0529%" height="15" fill="rgb(209,183,41)" fg:x="2136" fg:w="3"/><text x="37.9286%" y="1199.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (3 samples, 0.05%)</title><rect x="37.6786%" y="1173" width="0.0529%" height="15" fill="rgb(209,224,45)" fg:x="2136" fg:w="3"/><text x="37.9286%" y="1183.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (3 samples, 0.05%)</title><rect x="37.6786%" y="1157" width="0.0529%" height="15" fill="rgb(224,209,51)" fg:x="2136" fg:w="3"/><text x="37.9286%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3 samples, 0.05%)</title><rect x="37.6786%" y="1141" width="0.0529%" height="15" fill="rgb(223,17,39)" fg:x="2136" fg:w="3"/><text x="37.9286%" y="1151.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="37.7139%" y="1125" width="0.0176%" height="15" fill="rgb(234,204,37)" fg:x="2138" fg:w="1"/><text x="37.9639%" y="1135.50"></text></g><g><title>GetLegacySigOpCount (2 samples, 0.04%)</title><rect x="37.7315%" y="1189" width="0.0353%" height="15" fill="rgb(236,120,5)" fg:x="2139" fg:w="2"/><text x="37.9815%" y="1199.50"></text></g><g><title>CCoinsViewCache::AccessCoin (6 samples, 0.11%)</title><rect x="37.6786%" y="1205" width="0.1058%" height="15" fill="rgb(248,97,27)" fg:x="2136" fg:w="6"/><text x="37.9286%" y="1215.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="37.7668%" y="1189" width="0.0176%" height="15" fill="rgb(240,66,17)" fg:x="2141" fg:w="1"/><text x="38.0168%" y="1199.50"></text></g><g><title>CScript::GetOp (1 samples, 0.02%)</title><rect x="37.7844%" y="1189" width="0.0176%" height="15" fill="rgb(210,79,3)" fg:x="2142" fg:w="1"/><text x="38.0344%" y="1199.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="37.7844%" y="1173" width="0.0176%" height="15" fill="rgb(214,176,27)" fg:x="2142" fg:w="1"/><text x="38.0344%" y="1183.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="37.8021%" y="1189" width="0.0176%" height="15" fill="rgb(235,185,3)" fg:x="2143" fg:w="1"/><text x="38.0521%" y="1199.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="37.8021%" y="1173" width="0.0176%" height="15" fill="rgb(227,24,12)" fg:x="2143" fg:w="1"/><text x="38.0521%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="37.8021%" y="1157" width="0.0176%" height="15" fill="rgb(252,169,48)" fg:x="2143" fg:w="1"/><text x="38.0521%" y="1167.50"></text></g><g><title>CScript::GetSigOpCount (3 samples, 0.05%)</title><rect x="37.7844%" y="1205" width="0.0529%" height="15" fill="rgb(212,65,1)" fg:x="2142" fg:w="3"/><text x="38.0344%" y="1215.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="37.8197%" y="1189" width="0.0176%" height="15" fill="rgb(242,39,24)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1199.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::assign&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, void&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1173" width="0.0176%" height="15" fill="rgb(249,32,23)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1183.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_assign_aux&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1157" width="0.0176%" height="15" fill="rgb(251,195,23)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1167.50"></text></g><g><title>unsigned char* std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate_and_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1141" width="0.0176%" height="15" fill="rgb(236,174,8)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1151.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1125" width="0.0176%" height="15" fill="rgb(220,197,8)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1135.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1109" width="0.0176%" height="15" fill="rgb(240,108,37)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1119.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1093" width="0.0176%" height="15" fill="rgb(232,176,24)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1103.50"></text></g><g><title>unsigned char* std::copy&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1077" width="0.0176%" height="15" fill="rgb(243,35,29)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1087.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1061" width="0.0176%" height="15" fill="rgb(210,37,18)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1071.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1045" width="0.0176%" height="15" fill="rgb(224,184,40)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1055.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1029" width="0.0176%" height="15" fill="rgb(236,39,29)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1039.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, false, std::contiguous_iterator_tag&gt;::__copy_m&lt;prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator, unsigned char*&gt; (1 samples, 0.02%)</title><rect x="37.8197%" y="1013" width="0.0176%" height="15" fill="rgb(232,48,39)" fg:x="2144" fg:w="1"/><text x="38.0697%" y="1023.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="37.8374%" y="1205" width="0.0176%" height="15" fill="rgb(236,34,42)" fg:x="2145" fg:w="1"/><text x="38.0874%" y="1215.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.8374%" y="1189" width="0.0176%" height="15" fill="rgb(243,106,37)" fg:x="2145" fg:w="1"/><text x="38.0874%" y="1199.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.8374%" y="1173" width="0.0176%" height="15" fill="rgb(218,96,6)" fg:x="2145" fg:w="1"/><text x="38.0874%" y="1183.50"></text></g><g><title>GetP2SHSigOpCount (11 samples, 0.19%)</title><rect x="37.6786%" y="1237" width="0.1940%" height="15" fill="rgb(235,130,12)" fg:x="2136" fg:w="11"/><text x="37.9286%" y="1247.50"></text></g><g><title>GetP2SHSigOpCount (11 samples, 0.19%)</title><rect x="37.6786%" y="1221" width="0.1940%" height="15" fill="rgb(231,95,0)" fg:x="2136" fg:w="11"/><text x="37.9286%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="37.8550%" y="1205" width="0.0176%" height="15" fill="rgb(228,12,23)" fg:x="2146" fg:w="1"/><text x="38.1050%" y="1215.50"></text></g><g><title>GetTransactionSigOpCost (77 samples, 1.36%)</title><rect x="36.5849%" y="1253" width="1.3583%" height="15" fill="rgb(216,12,1)" fg:x="2074" fg:w="77"/><text x="36.8349%" y="1263.50"></text></g><g><title>GetScriptOp (4 samples, 0.07%)</title><rect x="37.8726%" y="1237" width="0.0706%" height="15" fill="rgb(219,59,3)" fg:x="2147" fg:w="4"/><text x="38.1226%" y="1247.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="37.9432%" y="1237" width="0.0176%" height="15" fill="rgb(215,208,46)" fg:x="2151" fg:w="1"/><text x="38.1932%" y="1247.50"></text></g><g><title>Consensus::CheckTxInputs (1 samples, 0.02%)</title><rect x="37.9608%" y="1237" width="0.0176%" height="15" fill="rgb(254,224,29)" fg:x="2152" fg:w="1"/><text x="38.2108%" y="1247.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="37.9785%" y="1237" width="0.0176%" height="15" fill="rgb(232,14,29)" fg:x="2153" fg:w="1"/><text x="38.2285%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.9785%" y="1221" width="0.0176%" height="15" fill="rgb(208,45,52)" fg:x="2153" fg:w="1"/><text x="38.2285%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="37.9785%" y="1205" width="0.0176%" height="15" fill="rgb(234,191,28)" fg:x="2153" fg:w="1"/><text x="38.2285%" y="1215.50"></text></g><g><title>SequenceLocks (4 samples, 0.07%)</title><rect x="37.9432%" y="1253" width="0.0706%" height="15" fill="rgb(244,67,43)" fg:x="2151" fg:w="4"/><text x="38.1932%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="37.9961%" y="1237" width="0.0176%" height="15" fill="rgb(236,189,24)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1247.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="37.9961%" y="1221" width="0.0176%" height="15" fill="rgb(239,214,33)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1231.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="37.9961%" y="1205" width="0.0176%" height="15" fill="rgb(226,176,41)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1215.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="37.9961%" y="1189" width="0.0176%" height="15" fill="rgb(248,47,8)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1199.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="37.9961%" y="1173" width="0.0176%" height="15" fill="rgb(218,81,44)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="37.9961%" y="1157" width="0.0176%" height="15" fill="rgb(213,98,6)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="37.9961%" y="1141" width="0.0176%" height="15" fill="rgb(222,85,22)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="37.9961%" y="1125" width="0.0176%" height="15" fill="rgb(239,46,39)" fg:x="2154" fg:w="1"/><text x="38.2461%" y="1135.50"></text></g><g><title>base_blob&lt;256u&gt;::GetUint64 (1 samples, 0.02%)</title><rect x="38.1372%" y="1237" width="0.0176%" height="15" fill="rgb(237,12,29)" fg:x="2162" fg:w="1"/><text x="38.3872%" y="1247.50"></text></g><g><title>ReadLE64 (1 samples, 0.02%)</title><rect x="38.1372%" y="1221" width="0.0176%" height="15" fill="rgb(214,77,8)" fg:x="2162" fg:w="1"/><text x="38.3872%" y="1231.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="38.1372%" y="1205" width="0.0176%" height="15" fill="rgb(217,168,37)" fg:x="2162" fg:w="1"/><text x="38.3872%" y="1215.50"></text></g><g><title>SipHashUint256Extra (17 samples, 0.30%)</title><rect x="38.0138%" y="1253" width="0.2999%" height="15" fill="rgb(221,217,23)" fg:x="2155" fg:w="17"/><text x="38.2638%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (9 samples, 0.16%)</title><rect x="38.1549%" y="1237" width="0.1588%" height="15" fill="rgb(243,229,36)" fg:x="2163" fg:w="9"/><text x="38.4049%" y="1247.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (9 samples, 0.16%)</title><rect x="38.1549%" y="1221" width="0.1588%" height="15" fill="rgb(251,163,40)" fg:x="2163" fg:w="9"/><text x="38.4049%" y="1231.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.02%)</title><rect x="38.3136%" y="1237" width="0.0176%" height="15" fill="rgb(237,222,12)" fg:x="2172" fg:w="1"/><text x="38.5636%" y="1247.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="38.3313%" y="1141" width="0.0176%" height="15" fill="rgb(248,132,6)" fg:x="2173" fg:w="1"/><text x="38.5813%" y="1151.50"></text></g><g><title>CCoinsViewCache::FetchCoin (3 samples, 0.05%)</title><rect x="38.3313%" y="1221" width="0.0529%" height="15" fill="rgb(227,167,50)" fg:x="2173" fg:w="3"/><text x="38.5813%" y="1231.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (3 samples, 0.05%)</title><rect x="38.3313%" y="1205" width="0.0529%" height="15" fill="rgb(242,84,37)" fg:x="2173" fg:w="3"/><text x="38.5813%" y="1215.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (3 samples, 0.05%)</title><rect x="38.3313%" y="1189" width="0.0529%" height="15" fill="rgb(212,4,50)" fg:x="2173" fg:w="3"/><text x="38.5813%" y="1199.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.05%)</title><rect x="38.3313%" y="1173" width="0.0529%" height="15" fill="rgb(230,228,32)" fg:x="2173" fg:w="3"/><text x="38.5813%" y="1183.50"></text></g><g><title>SaltedOutpointHasher::operator (3 samples, 0.05%)</title><rect x="38.3313%" y="1157" width="0.0529%" height="15" fill="rgb(248,217,23)" fg:x="2173" fg:w="3"/><text x="38.5813%" y="1167.50"></text></g><g><title>UpdateCoins (2 samples, 0.04%)</title><rect x="38.3489%" y="1141" width="0.0353%" height="15" fill="rgb(238,197,32)" fg:x="2174" fg:w="2"/><text x="38.5989%" y="1151.50"></text></g><g><title>Chainstate::ConnectBlock (1 samples, 0.02%)</title><rect x="38.3842%" y="1221" width="0.0176%" height="15" fill="rgb(236,106,1)" fg:x="2176" fg:w="1"/><text x="38.6342%" y="1231.50"></text></g><g><title>CCheckQueueControl&lt;CScriptCheck&gt;::Add (1 samples, 0.02%)</title><rect x="38.3842%" y="1205" width="0.0176%" height="15" fill="rgb(219,228,13)" fg:x="2176" fg:w="1"/><text x="38.6342%" y="1215.50"></text></g><g><title>Coin::Clear (1 samples, 0.02%)</title><rect x="38.4018%" y="1221" width="0.0176%" height="15" fill="rgb(238,30,35)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1231.50"></text></g><g><title>CTxOut::SetNull (1 samples, 0.02%)</title><rect x="38.4018%" y="1205" width="0.0176%" height="15" fill="rgb(236,70,23)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1215.50"></text></g><g><title>CScript::clear (1 samples, 0.02%)</title><rect x="38.4018%" y="1189" width="0.0176%" height="15" fill="rgb(249,104,48)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (1 samples, 0.02%)</title><rect x="38.4018%" y="1173" width="0.0176%" height="15" fill="rgb(254,117,50)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1183.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="38.4018%" y="1157" width="0.0176%" height="15" fill="rgb(223,152,4)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::end (1 samples, 0.02%)</title><rect x="38.4018%" y="1141" width="0.0176%" height="15" fill="rgb(245,6,2)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="38.4018%" y="1125" width="0.0176%" height="15" fill="rgb(249,150,24)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::direct_ptr (1 samples, 0.02%)</title><rect x="38.4018%" y="1109" width="0.0176%" height="15" fill="rgb(228,185,42)" fg:x="2177" fg:w="1"/><text x="38.6518%" y="1119.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="38.4195%" y="1221" width="0.0176%" height="15" fill="rgb(226,39,33)" fg:x="2178" fg:w="1"/><text x="38.6695%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="38.4195%" y="1205" width="0.0176%" height="15" fill="rgb(221,166,19)" fg:x="2178" fg:w="1"/><text x="38.6695%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="38.4195%" y="1189" width="0.0176%" height="15" fill="rgb(209,109,2)" fg:x="2178" fg:w="1"/><text x="38.6695%" y="1199.50"></text></g><g><title>CCoinsViewCache::SpendCoin (1 samples, 0.02%)</title><rect x="38.4371%" y="1189" width="0.0176%" height="15" fill="rgb(252,216,26)" fg:x="2179" fg:w="1"/><text x="38.6871%" y="1199.50"></text></g><g><title>Coin::operator= (1 samples, 0.02%)</title><rect x="38.4371%" y="1173" width="0.0176%" height="15" fill="rgb(227,173,36)" fg:x="2179" fg:w="1"/><text x="38.6871%" y="1183.50"></text></g><g><title>CTxOut::operator= (1 samples, 0.02%)</title><rect x="38.4371%" y="1157" width="0.0176%" height="15" fill="rgb(209,90,7)" fg:x="2179" fg:w="1"/><text x="38.6871%" y="1167.50"></text></g><g><title>CScript::operator= (1 samples, 0.02%)</title><rect x="38.4371%" y="1141" width="0.0176%" height="15" fill="rgb(250,194,11)" fg:x="2179" fg:w="1"/><text x="38.6871%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator= (1 samples, 0.02%)</title><rect x="38.4371%" y="1125" width="0.0176%" height="15" fill="rgb(220,72,50)" fg:x="2179" fg:w="1"/><text x="38.6871%" y="1135.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="38.4548%" y="1189" width="0.0176%" height="15" fill="rgb(222,106,48)" fg:x="2180" fg:w="1"/><text x="38.7048%" y="1199.50"></text></g><g><title>CCoinsViewCache::SpendCoin (10 samples, 0.18%)</title><rect x="38.3313%" y="1237" width="0.1764%" height="15" fill="rgb(216,220,45)" fg:x="2173" fg:w="10"/><text x="38.5813%" y="1247.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (4 samples, 0.07%)</title><rect x="38.4371%" y="1221" width="0.0706%" height="15" fill="rgb(234,112,18)" fg:x="2179" fg:w="4"/><text x="38.6871%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (4 samples, 0.07%)</title><rect x="38.4371%" y="1205" width="0.0706%" height="15" fill="rgb(206,179,9)" fg:x="2179" fg:w="4"/><text x="38.6871%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (2 samples, 0.04%)</title><rect x="38.4724%" y="1189" width="0.0353%" height="15" fill="rgb(215,115,40)" fg:x="2181" fg:w="2"/><text x="38.7224%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="38.4724%" y="1173" width="0.0353%" height="15" fill="rgb(222,69,34)" fg:x="2181" fg:w="2"/><text x="38.7224%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.04%)</title><rect x="38.4724%" y="1157" width="0.0353%" height="15" fill="rgb(209,161,10)" fg:x="2181" fg:w="2"/><text x="38.7224%" y="1167.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (2 samples, 0.04%)</title><rect x="38.4724%" y="1141" width="0.0353%" height="15" fill="rgb(217,6,38)" fg:x="2181" fg:w="2"/><text x="38.7224%" y="1151.50"></text></g><g><title>SaltedOutpointHasher::operator (2 samples, 0.04%)</title><rect x="38.4724%" y="1125" width="0.0353%" height="15" fill="rgb(229,229,48)" fg:x="2181" fg:w="2"/><text x="38.7224%" y="1135.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="38.4724%" y="1109" width="0.0353%" height="15" fill="rgb(225,21,28)" fg:x="2181" fg:w="2"/><text x="38.7224%" y="1119.50"></text></g><g><title>SipHashUint256Extra (9 samples, 0.16%)</title><rect x="38.5077%" y="1237" width="0.1588%" height="15" fill="rgb(206,33,13)" fg:x="2183" fg:w="9"/><text x="38.7577%" y="1247.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned long&gt;::type, unsigned long long&gt; &gt;::value, unsigned long&gt;::type std::rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="38.6312%" y="1221" width="0.0353%" height="15" fill="rgb(242,178,17)" fg:x="2190" fg:w="2"/><text x="38.8812%" y="1231.50"></text></g><g><title>unsigned long std::__rotl&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="38.6312%" y="1205" width="0.0353%" height="15" fill="rgb(220,162,5)" fg:x="2190" fg:w="2"/><text x="38.8812%" y="1215.50"></text></g><g><title>Coin&amp; std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="38.6664%" y="1221" width="0.0176%" height="15" fill="rgb(210,33,43)" fg:x="2192" fg:w="1"/><text x="38.9164%" y="1231.50"></text></g><g><title>UpdateCoins (2 samples, 0.04%)</title><rect x="38.6664%" y="1237" width="0.0353%" height="15" fill="rgb(216,116,54)" fg:x="2192" fg:w="2"/><text x="38.9164%" y="1247.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="38.6841%" y="1221" width="0.0176%" height="15" fill="rgb(249,92,24)" fg:x="2193" fg:w="1"/><text x="38.9341%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="38.6841%" y="1205" width="0.0176%" height="15" fill="rgb(231,189,14)" fg:x="2193" fg:w="1"/><text x="38.9341%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="38.6841%" y="1189" width="0.0176%" height="15" fill="rgb(230,8,41)" fg:x="2193" fg:w="1"/><text x="38.9341%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="38.6841%" y="1173" width="0.0176%" height="15" fill="rgb(249,7,27)" fg:x="2193" fg:w="1"/><text x="38.9341%" y="1183.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="38.6841%" y="1157" width="0.0176%" height="15" fill="rgb(232,86,5)" fg:x="2193" fg:w="1"/><text x="38.9341%" y="1167.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (1 samples, 0.02%)</title><rect x="38.6841%" y="1141" width="0.0176%" height="15" fill="rgb(224,175,18)" fg:x="2193" fg:w="1"/><text x="38.9341%" y="1151.50"></text></g><g><title>UpdateCoins (24 samples, 0.42%)</title><rect x="38.3136%" y="1253" width="0.4234%" height="15" fill="rgb(220,129,12)" fg:x="2172" fg:w="24"/><text x="38.5636%" y="1263.50"></text></g><g><title>std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="38.7017%" y="1237" width="0.0353%" height="15" fill="rgb(210,19,36)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (2 samples, 0.04%)</title><rect x="38.7017%" y="1221" width="0.0353%" height="15" fill="rgb(219,96,14)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;Coin, std::allocator&lt;Coin&gt; &gt;::_M_allocate (2 samples, 0.04%)</title><rect x="38.7017%" y="1205" width="0.0353%" height="15" fill="rgb(249,106,1)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Coin&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="38.7017%" y="1189" width="0.0353%" height="15" fill="rgb(249,155,20)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1199.50"></text></g><g><title>std::allocator&lt;Coin&gt;::allocate (2 samples, 0.04%)</title><rect x="38.7017%" y="1173" width="0.0353%" height="15" fill="rgb(244,168,9)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;Coin&gt;::allocate (2 samples, 0.04%)</title><rect x="38.7017%" y="1157" width="0.0353%" height="15" fill="rgb(216,23,50)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1167.50"></text></g><g><title>operator new (2 samples, 0.04%)</title><rect x="38.7017%" y="1141" width="0.0353%" height="15" fill="rgb(224,219,20)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1151.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="38.7017%" y="1125" width="0.0353%" height="15" fill="rgb(222,156,15)" fg:x="2194" fg:w="2"/><text x="38.9517%" y="1135.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="38.7194%" y="1109" width="0.0176%" height="15" fill="rgb(231,97,17)" fg:x="2195" fg:w="1"/><text x="38.9694%" y="1119.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="38.7370%" y="1237" width="0.0176%" height="15" fill="rgb(218,70,48)" fg:x="2196" fg:w="1"/><text x="38.9870%" y="1247.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="38.7370%" y="1221" width="0.0176%" height="15" fill="rgb(212,196,52)" fg:x="2196" fg:w="1"/><text x="38.9870%" y="1231.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="38.7370%" y="1205" width="0.0176%" height="15" fill="rgb(243,203,18)" fg:x="2196" fg:w="1"/><text x="38.9870%" y="1215.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="38.7370%" y="1189" width="0.0176%" height="15" fill="rgb(252,125,41)" fg:x="2196" fg:w="1"/><text x="38.9870%" y="1199.50"></text></g><g><title>CSHA256::Write (6 samples, 0.11%)</title><rect x="38.7546%" y="1237" width="0.1058%" height="15" fill="rgb(223,180,33)" fg:x="2197" fg:w="6"/><text x="39.0046%" y="1247.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="38.8605%" y="1237" width="0.0176%" height="15" fill="rgb(254,159,46)" fg:x="2203" fg:w="1"/><text x="39.1105%" y="1247.50"></text></g><g><title>node::BlockManager::FindUndoPos (1 samples, 0.02%)</title><rect x="38.8781%" y="1237" width="0.0176%" height="15" fill="rgb(254,38,10)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1247.50"></text></g><g><title>FlatFileSeq::Allocate (1 samples, 0.02%)</title><rect x="38.8781%" y="1221" width="0.0176%" height="15" fill="rgb(208,217,32)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1231.50"></text></g><g><title>AllocateFileRange (1 samples, 0.02%)</title><rect x="38.8781%" y="1205" width="0.0176%" height="15" fill="rgb(221,120,13)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1215.50"></text></g><g><title>posix_fallocate (1 samples, 0.02%)</title><rect x="38.8781%" y="1189" width="0.0176%" height="15" fill="rgb(246,54,52)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.8781%" y="1173" width="0.0176%" height="15" fill="rgb(242,34,25)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.8781%" y="1157" width="0.0176%" height="15" fill="rgb(247,209,9)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.8781%" y="1141" width="0.0176%" height="15" fill="rgb(228,71,26)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="38.8781%" y="1125" width="0.0176%" height="15" fill="rgb(222,145,49)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="38.8781%" y="1109" width="0.0176%" height="15" fill="rgb(218,121,17)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1119.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="38.8781%" y="1093" width="0.0176%" height="15" fill="rgb(244,50,7)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="38.8781%" y="1077" width="0.0176%" height="15" fill="rgb(246,229,37)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="38.8781%" y="1061" width="0.0176%" height="15" fill="rgb(225,18,5)" fg:x="2204" fg:w="1"/><text x="39.1281%" y="1071.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="38.8957%" y="677" width="0.0176%" height="15" fill="rgb(213,204,8)" fg:x="2205" fg:w="1"/><text x="39.1457%" y="687.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="38.8957%" y="661" width="0.0176%" height="15" fill="rgb(238,103,6)" fg:x="2205" fg:w="1"/><text x="39.1457%" y="671.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="38.8957%" y="645" width="0.0176%" height="15" fill="rgb(222,25,35)" fg:x="2205" fg:w="1"/><text x="39.1457%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="38.8957%" y="629" width="0.0176%" height="15" fill="rgb(213,203,35)" fg:x="2205" fg:w="1"/><text x="39.1457%" y="639.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="38.8957%" y="613" width="0.0176%" height="15" fill="rgb(221,79,53)" fg:x="2205" fg:w="1"/><text x="39.1457%" y="623.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.04%)</title><rect x="38.8957%" y="725" width="0.0353%" height="15" fill="rgb(243,200,35)" fg:x="2205" fg:w="2"/><text x="39.1457%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, unsigned char const&gt; (2 samples, 0.04%)</title><rect x="38.8957%" y="709" width="0.0353%" height="15" fill="rgb(248,60,25)" fg:x="2205" fg:w="2"/><text x="39.1457%" y="719.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="38.8957%" y="693" width="0.0353%" height="15" fill="rgb(227,53,46)" fg:x="2205" fg:w="2"/><text x="39.1457%" y="703.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="38.9134%" y="677" width="0.0176%" height="15" fill="rgb(216,120,32)" fg:x="2206" fg:w="1"/><text x="39.1634%" y="687.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (3 samples, 0.05%)</title><rect x="38.8957%" y="1221" width="0.0529%" height="15" fill="rgb(220,134,1)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1205" width="0.0529%" height="15" fill="rgb(237,168,5)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1189" width="0.0529%" height="15" fill="rgb(231,100,33)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1173" width="0.0529%" height="15" fill="rgb(236,177,47)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1157" width="0.0529%" height="15" fill="rgb(235,7,49)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1141" width="0.0529%" height="15" fill="rgb(232,119,22)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1151.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1125" width="0.0529%" height="15" fill="rgb(254,73,53)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1135.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1109" width="0.0529%" height="15" fill="rgb(251,35,20)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1119.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1093" width="0.0529%" height="15" fill="rgb(241,119,20)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1077" width="0.0529%" height="15" fill="rgb(207,102,14)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1061" width="0.0529%" height="15" fill="rgb(248,201,50)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1045" width="0.0529%" height="15" fill="rgb(222,185,44)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1055.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1029" width="0.0529%" height="15" fill="rgb(218,107,18)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="1013" width="0.0529%" height="15" fill="rgb(237,177,39)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="997" width="0.0529%" height="15" fill="rgb(246,69,6)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="981" width="0.0529%" height="15" fill="rgb(234,208,37)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="965" width="0.0529%" height="15" fill="rgb(225,4,6)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="975.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="949" width="0.0529%" height="15" fill="rgb(233,45,0)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="959.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="933" width="0.0529%" height="15" fill="rgb(226,136,5)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="917" width="0.0529%" height="15" fill="rgb(211,91,47)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="901" width="0.0529%" height="15" fill="rgb(242,88,51)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="885" width="0.0529%" height="15" fill="rgb(230,91,28)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="895.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="869" width="0.0529%" height="15" fill="rgb(254,186,29)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="853" width="0.0529%" height="15" fill="rgb(238,6,4)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="837" width="0.0529%" height="15" fill="rgb(221,151,16)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="821" width="0.0529%" height="15" fill="rgb(251,143,52)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="805" width="0.0529%" height="15" fill="rgb(206,90,15)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="815.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="789" width="0.0529%" height="15" fill="rgb(218,35,8)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="799.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="773" width="0.0529%" height="15" fill="rgb(239,215,6)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="757" width="0.0529%" height="15" fill="rgb(245,116,39)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;AutoFile&gt; (3 samples, 0.05%)</title><rect x="38.8957%" y="741" width="0.0529%" height="15" fill="rgb(242,65,28)" fg:x="2205" fg:w="3"/><text x="39.1457%" y="751.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="38.9310%" y="725" width="0.0176%" height="15" fill="rgb(252,132,53)" fg:x="2207" fg:w="1"/><text x="39.1810%" y="735.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="38.9310%" y="709" width="0.0176%" height="15" fill="rgb(224,159,50)" fg:x="2207" fg:w="1"/><text x="39.1810%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="38.9310%" y="693" width="0.0176%" height="15" fill="rgb(224,93,4)" fg:x="2207" fg:w="1"/><text x="39.1810%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned int&gt; (1 samples, 0.02%)</title><rect x="38.9310%" y="677" width="0.0176%" height="15" fill="rgb(208,81,34)" fg:x="2207" fg:w="1"/><text x="39.1810%" y="687.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="38.9310%" y="661" width="0.0176%" height="15" fill="rgb(233,92,54)" fg:x="2207" fg:w="1"/><text x="39.1810%" y="671.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="38.9663%" y="613" width="0.0529%" height="15" fill="rgb(237,21,14)" fg:x="2209" fg:w="3"/><text x="39.2163%" y="623.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="39.0192%" y="613" width="0.0176%" height="15" fill="rgb(249,128,51)" fg:x="2212" fg:w="1"/><text x="39.2692%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="38.9487%" y="773" width="0.1058%" height="15" fill="rgb(223,129,24)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="783.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (6 samples, 0.11%)</title><rect x="38.9487%" y="757" width="0.1058%" height="15" fill="rgb(231,168,25)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="767.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (6 samples, 0.11%)</title><rect x="38.9487%" y="741" width="0.1058%" height="15" fill="rgb(224,39,20)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="751.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (6 samples, 0.11%)</title><rect x="38.9487%" y="725" width="0.1058%" height="15" fill="rgb(225,152,53)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="38.9487%" y="709" width="0.1058%" height="15" fill="rgb(252,17,24)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (6 samples, 0.11%)</title><rect x="38.9487%" y="693" width="0.1058%" height="15" fill="rgb(250,114,30)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (6 samples, 0.11%)</title><rect x="38.9487%" y="677" width="0.1058%" height="15" fill="rgb(229,5,4)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (6 samples, 0.11%)</title><rect x="38.9487%" y="661" width="0.1058%" height="15" fill="rgb(225,176,49)" fg:x="2208" fg:w="6"/><text x="39.1987%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (5 samples, 0.09%)</title><rect x="38.9663%" y="645" width="0.0882%" height="15" fill="rgb(224,221,49)" fg:x="2209" fg:w="5"/><text x="39.2163%" y="655.50"></text></g><g><title>HashWriter::write (5 samples, 0.09%)</title><rect x="38.9663%" y="629" width="0.0882%" height="15" fill="rgb(253,169,27)" fg:x="2209" fg:w="5"/><text x="39.2163%" y="639.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="39.0369%" y="613" width="0.0176%" height="15" fill="rgb(211,206,16)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="39.0369%" y="597" width="0.0176%" height="15" fill="rgb(244,87,35)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="581" width="0.0176%" height="15" fill="rgb(246,28,10)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="565" width="0.0176%" height="15" fill="rgb(229,12,44)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="549" width="0.0176%" height="15" fill="rgb(210,145,37)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="533" width="0.0176%" height="15" fill="rgb(227,112,52)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="517" width="0.0176%" height="15" fill="rgb(238,155,34)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="501" width="0.0176%" height="15" fill="rgb(239,226,36)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="485" width="0.0176%" height="15" fill="rgb(230,16,23)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="469" width="0.0176%" height="15" fill="rgb(236,171,36)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="453" width="0.0176%" height="15" fill="rgb(221,22,14)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="437" width="0.0176%" height="15" fill="rgb(242,43,11)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="421" width="0.0176%" height="15" fill="rgb(232,69,23)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="405" width="0.0176%" height="15" fill="rgb(216,180,54)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="389" width="0.0176%" height="15" fill="rgb(216,5,24)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="373" width="0.0176%" height="15" fill="rgb(225,89,9)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="357" width="0.0176%" height="15" fill="rgb(243,75,33)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="341" width="0.0176%" height="15" fill="rgb(247,141,45)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="325" width="0.0176%" height="15" fill="rgb(232,177,36)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="309" width="0.0176%" height="15" fill="rgb(219,125,36)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="293" width="0.0176%" height="15" fill="rgb(227,94,9)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="277" width="0.0176%" height="15" fill="rgb(240,34,52)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="261" width="0.0176%" height="15" fill="rgb(216,45,12)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="245" width="0.0176%" height="15" fill="rgb(246,21,19)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="255.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.0369%" y="229" width="0.0176%" height="15" fill="rgb(213,98,42)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="239.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="39.0369%" y="213" width="0.0176%" height="15" fill="rgb(250,136,47)" fg:x="2213" fg:w="1"/><text x="39.2869%" y="223.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="39.0721%" y="725" width="0.0176%" height="15" fill="rgb(251,124,27)" fg:x="2215" fg:w="1"/><text x="39.3221%" y="735.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="39.0898%" y="725" width="0.0176%" height="15" fill="rgb(229,180,14)" fg:x="2216" fg:w="1"/><text x="39.3398%" y="735.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="39.1074%" y="709" width="0.0176%" height="15" fill="rgb(245,216,25)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="719.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="39.1074%" y="693" width="0.0176%" height="15" fill="rgb(251,43,5)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="703.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="677" width="0.0176%" height="15" fill="rgb(250,128,24)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="687.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="661" width="0.0176%" height="15" fill="rgb(217,117,27)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="671.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="645" width="0.0176%" height="15" fill="rgb(245,147,4)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="655.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="629" width="0.0176%" height="15" fill="rgb(242,201,35)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="613" width="0.0176%" height="15" fill="rgb(218,181,1)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="623.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="597" width="0.0176%" height="15" fill="rgb(222,6,29)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="581" width="0.0176%" height="15" fill="rgb(208,186,3)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="591.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="565" width="0.0176%" height="15" fill="rgb(216,36,26)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="549" width="0.0176%" height="15" fill="rgb(248,201,23)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="533" width="0.0176%" height="15" fill="rgb(251,170,31)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="543.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="517" width="0.0176%" height="15" fill="rgb(207,110,25)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="527.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="501" width="0.0176%" height="15" fill="rgb(250,54,15)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="511.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="485" width="0.0176%" height="15" fill="rgb(227,68,33)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="495.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="469" width="0.0176%" height="15" fill="rgb(238,34,41)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="479.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="453" width="0.0176%" height="15" fill="rgb(220,11,15)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="463.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="437" width="0.0176%" height="15" fill="rgb(246,111,35)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="447.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="421" width="0.0176%" height="15" fill="rgb(209,88,53)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="405" width="0.0176%" height="15" fill="rgb(231,185,47)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="415.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="389" width="0.0176%" height="15" fill="rgb(233,154,1)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="399.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="373" width="0.0176%" height="15" fill="rgb(225,15,46)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="383.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="357" width="0.0176%" height="15" fill="rgb(211,135,41)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="367.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="341" width="0.0176%" height="15" fill="rgb(208,54,0)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="351.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="325" width="0.0176%" height="15" fill="rgb(244,136,14)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="335.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="309" width="0.0176%" height="15" fill="rgb(241,56,14)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="319.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="293" width="0.0176%" height="15" fill="rgb(205,80,24)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="303.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="277" width="0.0176%" height="15" fill="rgb(220,57,4)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="287.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="261" width="0.0176%" height="15" fill="rgb(226,193,50)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="245" width="0.0176%" height="15" fill="rgb(231,168,22)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="255.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="229" width="0.0176%" height="15" fill="rgb(254,215,14)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="239.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="213" width="0.0176%" height="15" fill="rgb(211,115,16)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="223.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="39.1074%" y="197" width="0.0176%" height="15" fill="rgb(236,210,16)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="207.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="181" width="0.0176%" height="15" fill="rgb(221,94,12)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="191.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="165" width="0.0176%" height="15" fill="rgb(235,218,49)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="175.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="149" width="0.0176%" height="15" fill="rgb(217,114,14)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="159.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.1074%" y="133" width="0.0176%" height="15" fill="rgb(216,145,22)" fg:x="2217" fg:w="1"/><text x="39.3574%" y="143.50"></text></g><g><title>CompressScript (2 samples, 0.04%)</title><rect x="39.1074%" y="725" width="0.0353%" height="15" fill="rgb(217,112,39)" fg:x="2217" fg:w="2"/><text x="39.3574%" y="735.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="39.1251%" y="709" width="0.0176%" height="15" fill="rgb(225,85,32)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.1251%" y="693" width="0.0176%" height="15" fill="rgb(245,209,47)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.1251%" y="677" width="0.0176%" height="15" fill="rgb(218,220,15)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.1251%" y="661" width="0.0176%" height="15" fill="rgb(222,202,31)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.1251%" y="645" width="0.0176%" height="15" fill="rgb(243,203,4)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.1251%" y="629" width="0.0176%" height="15" fill="rgb(237,92,17)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.1251%" y="613" width="0.0176%" height="15" fill="rgb(231,119,7)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="623.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="39.1251%" y="597" width="0.0176%" height="15" fill="rgb(237,82,41)" fg:x="2218" fg:w="1"/><text x="39.3751%" y="607.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (4 samples, 0.07%)</title><rect x="39.1427%" y="725" width="0.0706%" height="15" fill="rgb(226,81,48)" fg:x="2219" fg:w="4"/><text x="39.3927%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (4 samples, 0.07%)</title><rect x="39.1427%" y="709" width="0.0706%" height="15" fill="rgb(234,70,51)" fg:x="2219" fg:w="4"/><text x="39.3927%" y="719.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="39.1427%" y="693" width="0.0706%" height="15" fill="rgb(251,86,4)" fg:x="2219" fg:w="4"/><text x="39.3927%" y="703.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="39.1427%" y="677" width="0.0706%" height="15" fill="rgb(244,144,28)" fg:x="2219" fg:w="4"/><text x="39.3927%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="39.1956%" y="661" width="0.0176%" height="15" fill="rgb(232,161,39)" fg:x="2222" fg:w="1"/><text x="39.4456%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.1956%" y="645" width="0.0176%" height="15" fill="rgb(247,34,51)" fg:x="2222" fg:w="1"/><text x="39.4456%" y="655.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="39.1956%" y="629" width="0.0176%" height="15" fill="rgb(225,132,2)" fg:x="2222" fg:w="1"/><text x="39.4456%" y="639.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="39.2133%" y="661" width="0.0176%" height="15" fill="rgb(209,159,44)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="671.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="39.2133%" y="645" width="0.0176%" height="15" fill="rgb(251,214,1)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="629" width="0.0176%" height="15" fill="rgb(247,84,47)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="639.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="613" width="0.0176%" height="15" fill="rgb(240,111,43)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="623.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="597" width="0.0176%" height="15" fill="rgb(215,214,35)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="607.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="581" width="0.0176%" height="15" fill="rgb(248,207,23)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="565" width="0.0176%" height="15" fill="rgb(214,186,4)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="575.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="549" width="0.0176%" height="15" fill="rgb(220,133,22)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="559.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="533" width="0.0176%" height="15" fill="rgb(239,134,19)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="517" width="0.0176%" height="15" fill="rgb(250,140,9)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="501" width="0.0176%" height="15" fill="rgb(225,59,14)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="485" width="0.0176%" height="15" fill="rgb(214,152,51)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="469" width="0.0176%" height="15" fill="rgb(251,227,43)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="479.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="453" width="0.0176%" height="15" fill="rgb(241,96,17)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="463.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="437" width="0.0176%" height="15" fill="rgb(234,198,43)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="447.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="421" width="0.0176%" height="15" fill="rgb(220,108,29)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="431.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="405" width="0.0176%" height="15" fill="rgb(226,163,33)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="389" width="0.0176%" height="15" fill="rgb(205,194,45)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="399.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="373" width="0.0176%" height="15" fill="rgb(206,143,44)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="383.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="357" width="0.0176%" height="15" fill="rgb(236,136,36)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="367.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="341" width="0.0176%" height="15" fill="rgb(249,172,42)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="351.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="325" width="0.0176%" height="15" fill="rgb(216,139,23)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="335.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="309" width="0.0176%" height="15" fill="rgb(207,166,20)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="319.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="293" width="0.0176%" height="15" fill="rgb(210,209,22)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="303.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="277" width="0.0176%" height="15" fill="rgb(232,118,20)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="287.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="261" width="0.0176%" height="15" fill="rgb(238,113,42)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="271.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="245" width="0.0176%" height="15" fill="rgb(231,42,5)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="255.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="229" width="0.0176%" height="15" fill="rgb(243,166,24)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="239.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="213" width="0.0176%" height="15" fill="rgb(237,226,12)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="223.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="197" width="0.0176%" height="15" fill="rgb(229,133,24)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="207.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="181" width="0.0176%" height="15" fill="rgb(238,33,43)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="191.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="165" width="0.0176%" height="15" fill="rgb(227,59,38)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="175.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="39.2133%" y="149" width="0.0176%" height="15" fill="rgb(230,97,0)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="159.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="133" width="0.0176%" height="15" fill="rgb(250,173,50)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="143.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="117" width="0.0176%" height="15" fill="rgb(240,15,50)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="127.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="101" width="0.0176%" height="15" fill="rgb(221,93,22)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="111.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.2133%" y="85" width="0.0176%" height="15" fill="rgb(245,180,53)" fg:x="2223" fg:w="1"/><text x="39.4633%" y="95.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (2 samples, 0.04%)</title><rect x="39.2133%" y="725" width="0.0353%" height="15" fill="rgb(231,88,51)" fg:x="2223" fg:w="2"/><text x="39.4633%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.2133%" y="709" width="0.0353%" height="15" fill="rgb(240,58,21)" fg:x="2223" fg:w="2"/><text x="39.4633%" y="719.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2133%" y="693" width="0.0353%" height="15" fill="rgb(237,21,10)" fg:x="2223" fg:w="2"/><text x="39.4633%" y="703.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (2 samples, 0.04%)</title><rect x="39.2133%" y="677" width="0.0353%" height="15" fill="rgb(218,43,11)" fg:x="2223" fg:w="2"/><text x="39.4633%" y="687.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="661" width="0.0176%" height="15" fill="rgb(218,221,29)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="671.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="645" width="0.0176%" height="15" fill="rgb(214,118,42)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="655.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="39.2309%" y="629" width="0.0176%" height="15" fill="rgb(251,200,26)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="639.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="39.2309%" y="613" width="0.0176%" height="15" fill="rgb(237,101,39)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="623.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="39.2309%" y="597" width="0.0176%" height="15" fill="rgb(251,117,11)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="581" width="0.0176%" height="15" fill="rgb(216,223,23)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="591.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="565" width="0.0176%" height="15" fill="rgb(251,54,12)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="575.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="549" width="0.0176%" height="15" fill="rgb(254,176,54)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="559.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="533" width="0.0176%" height="15" fill="rgb(210,32,8)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="543.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="517" width="0.0176%" height="15" fill="rgb(235,52,38)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="527.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="501" width="0.0176%" height="15" fill="rgb(231,4,44)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="511.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="485" width="0.0176%" height="15" fill="rgb(249,2,32)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="469" width="0.0176%" height="15" fill="rgb(224,65,26)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="453" width="0.0176%" height="15" fill="rgb(250,73,40)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="437" width="0.0176%" height="15" fill="rgb(253,177,16)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="421" width="0.0176%" height="15" fill="rgb(217,32,34)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="405" width="0.0176%" height="15" fill="rgb(212,7,10)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="415.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="389" width="0.0176%" height="15" fill="rgb(245,89,8)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="399.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="373" width="0.0176%" height="15" fill="rgb(237,16,53)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="383.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="357" width="0.0176%" height="15" fill="rgb(250,204,30)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="341" width="0.0176%" height="15" fill="rgb(208,77,27)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="325" width="0.0176%" height="15" fill="rgb(250,204,28)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="309" width="0.0176%" height="15" fill="rgb(244,63,21)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="319.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="293" width="0.0176%" height="15" fill="rgb(236,85,44)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="303.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="277" width="0.0176%" height="15" fill="rgb(215,98,4)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="287.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="261" width="0.0176%" height="15" fill="rgb(235,38,11)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="271.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="245" width="0.0176%" height="15" fill="rgb(254,186,25)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="255.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="229" width="0.0176%" height="15" fill="rgb(225,55,31)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="239.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="213" width="0.0176%" height="15" fill="rgb(211,15,21)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="223.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="197" width="0.0176%" height="15" fill="rgb(215,187,41)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="207.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="181" width="0.0176%" height="15" fill="rgb(248,69,32)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="191.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="165" width="0.0176%" height="15" fill="rgb(252,102,52)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="175.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="149" width="0.0176%" height="15" fill="rgb(253,140,32)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="159.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="133" width="0.0176%" height="15" fill="rgb(216,56,42)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="143.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="117" width="0.0176%" height="15" fill="rgb(216,184,14)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="127.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="39.2309%" y="101" width="0.0176%" height="15" fill="rgb(237,187,27)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="111.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="85" width="0.0176%" height="15" fill="rgb(219,65,3)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="95.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="69" width="0.0176%" height="15" fill="rgb(245,83,25)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="79.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="53" width="0.0176%" height="15" fill="rgb(214,205,45)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="63.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.2309%" y="37" width="0.0176%" height="15" fill="rgb(241,20,18)" fg:x="2224" fg:w="1"/><text x="39.4809%" y="47.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="357" width="0.0176%" height="15" fill="rgb(232,163,23)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="367.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="341" width="0.0176%" height="15" fill="rgb(214,5,46)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="351.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="325" width="0.0176%" height="15" fill="rgb(229,78,17)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="335.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="309" width="0.0176%" height="15" fill="rgb(248,89,10)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="293" width="0.0176%" height="15" fill="rgb(248,54,15)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="303.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="277" width="0.0176%" height="15" fill="rgb(223,116,6)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="287.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="261" width="0.0176%" height="15" fill="rgb(205,125,38)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="271.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="245" width="0.0176%" height="15" fill="rgb(251,78,38)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="255.50"></text></g><g><title>void AmountCompression::Ser&lt;HashWriter, long&gt; (1 samples, 0.02%)</title><rect x="39.2485%" y="229" width="0.0176%" height="15" fill="rgb(253,78,28)" fg:x="2225" fg:w="1"/><text x="39.4985%" y="239.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (19 samples, 0.34%)</title><rect x="38.9487%" y="869" width="0.3352%" height="15" fill="rgb(209,120,3)" fg:x="2208" fg:w="19"/><text x="39.1987%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (19 samples, 0.34%)</title><rect x="38.9487%" y="853" width="0.3352%" height="15" fill="rgb(238,229,9)" fg:x="2208" fg:w="19"/><text x="39.1987%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (19 samples, 0.34%)</title><rect x="38.9487%" y="837" width="0.3352%" height="15" fill="rgb(253,159,18)" fg:x="2208" fg:w="19"/><text x="39.1987%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (19 samples, 0.34%)</title><rect x="38.9487%" y="821" width="0.3352%" height="15" fill="rgb(244,42,34)" fg:x="2208" fg:w="19"/><text x="39.1987%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (19 samples, 0.34%)</title><rect x="38.9487%" y="805" width="0.3352%" height="15" fill="rgb(224,8,7)" fg:x="2208" fg:w="19"/><text x="39.1987%" y="815.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (19 samples, 0.34%)</title><rect x="38.9487%" y="789" width="0.3352%" height="15" fill="rgb(210,201,45)" fg:x="2208" fg:w="19"/><text x="39.1987%" y="799.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.23%)</title><rect x="39.0545%" y="773" width="0.2293%" height="15" fill="rgb(252,185,21)" fg:x="2214" fg:w="13"/><text x="39.3045%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (13 samples, 0.23%)</title><rect x="39.0545%" y="757" width="0.2293%" height="15" fill="rgb(223,131,1)" fg:x="2214" fg:w="13"/><text x="39.3045%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (13 samples, 0.23%)</title><rect x="39.0545%" y="741" width="0.2293%" height="15" fill="rgb(245,141,16)" fg:x="2214" fg:w="13"/><text x="39.3045%" y="751.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (2 samples, 0.04%)</title><rect x="39.2485%" y="725" width="0.0353%" height="15" fill="rgb(229,55,45)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="735.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (2 samples, 0.04%)</title><rect x="39.2485%" y="709" width="0.0353%" height="15" fill="rgb(208,92,15)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="719.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="693" width="0.0353%" height="15" fill="rgb(234,185,47)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="703.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="677" width="0.0353%" height="15" fill="rgb(253,104,50)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="687.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="661" width="0.0353%" height="15" fill="rgb(205,70,7)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="671.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="645" width="0.0353%" height="15" fill="rgb(240,178,43)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="655.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="629" width="0.0353%" height="15" fill="rgb(214,112,2)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="639.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="613" width="0.0353%" height="15" fill="rgb(206,46,17)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="623.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="597" width="0.0353%" height="15" fill="rgb(225,220,16)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="607.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="581" width="0.0353%" height="15" fill="rgb(238,65,40)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="565" width="0.0353%" height="15" fill="rgb(230,151,21)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="549" width="0.0353%" height="15" fill="rgb(218,58,49)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="559.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="533" width="0.0353%" height="15" fill="rgb(219,179,14)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="543.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="517" width="0.0353%" height="15" fill="rgb(223,72,1)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="527.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="501" width="0.0353%" height="15" fill="rgb(238,126,10)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="511.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="485" width="0.0353%" height="15" fill="rgb(224,206,38)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="495.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="469" width="0.0353%" height="15" fill="rgb(212,201,54)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="479.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="453" width="0.0353%" height="15" fill="rgb(218,154,48)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="463.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="437" width="0.0353%" height="15" fill="rgb(232,93,24)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="447.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="421" width="0.0353%" height="15" fill="rgb(245,30,21)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="405" width="0.0353%" height="15" fill="rgb(242,148,29)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="415.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="389" width="0.0353%" height="15" fill="rgb(244,153,54)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="399.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="39.2485%" y="373" width="0.0353%" height="15" fill="rgb(252,87,22)" fg:x="2225" fg:w="2"/><text x="39.4985%" y="383.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2662%" y="357" width="0.0176%" height="15" fill="rgb(210,51,29)" fg:x="2226" fg:w="1"/><text x="39.5162%" y="367.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.2662%" y="341" width="0.0176%" height="15" fill="rgb(242,136,47)" fg:x="2226" fg:w="1"/><text x="39.5162%" y="351.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="39.2662%" y="325" width="0.0176%" height="15" fill="rgb(238,68,4)" fg:x="2226" fg:w="1"/><text x="39.5162%" y="335.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="39.2838%" y="821" width="0.0176%" height="15" fill="rgb(242,161,30)" fg:x="2227" fg:w="1"/><text x="39.5338%" y="831.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="39.2838%" y="805" width="0.0176%" height="15" fill="rgb(218,58,44)" fg:x="2227" fg:w="1"/><text x="39.5338%" y="815.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="39.2838%" y="789" width="0.0176%" height="15" fill="rgb(252,125,32)" fg:x="2227" fg:w="1"/><text x="39.5338%" y="799.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="39.3191%" y="773" width="0.0706%" height="15" fill="rgb(219,178,0)" fg:x="2229" fg:w="4"/><text x="39.5691%" y="783.50"></text></g><g><title>memcpy (2 samples, 0.04%)</title><rect x="39.3544%" y="757" width="0.0353%" height="15" fill="rgb(213,152,7)" fg:x="2231" fg:w="2"/><text x="39.6044%" y="767.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="39.3720%" y="741" width="0.0176%" height="15" fill="rgb(249,109,34)" fg:x="2232" fg:w="1"/><text x="39.6220%" y="751.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (1 samples, 0.02%)</title><rect x="39.3897%" y="773" width="0.0176%" height="15" fill="rgb(232,96,21)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="783.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (1 samples, 0.02%)</title><rect x="39.3897%" y="757" width="0.0176%" height="15" fill="rgb(228,27,39)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="767.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="741" width="0.0176%" height="15" fill="rgb(211,182,52)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="751.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="725" width="0.0176%" height="15" fill="rgb(234,178,38)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="735.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="709" width="0.0176%" height="15" fill="rgb(221,111,3)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="719.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="693" width="0.0176%" height="15" fill="rgb(228,175,21)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="677" width="0.0176%" height="15" fill="rgb(228,174,43)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="687.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="661" width="0.0176%" height="15" fill="rgb(211,191,0)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="671.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="645" width="0.0176%" height="15" fill="rgb(253,117,3)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="655.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="629" width="0.0176%" height="15" fill="rgb(241,127,19)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="613" width="0.0176%" height="15" fill="rgb(218,103,12)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="597" width="0.0176%" height="15" fill="rgb(236,214,43)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="581" width="0.0176%" height="15" fill="rgb(244,144,19)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="591.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="565" width="0.0176%" height="15" fill="rgb(246,188,10)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="575.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="549" width="0.0176%" height="15" fill="rgb(212,193,33)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="559.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="533" width="0.0176%" height="15" fill="rgb(241,51,29)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="543.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="517" width="0.0176%" height="15" fill="rgb(211,58,19)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="527.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="501" width="0.0176%" height="15" fill="rgb(229,111,26)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="511.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="485" width="0.0176%" height="15" fill="rgb(213,115,40)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="495.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="469" width="0.0176%" height="15" fill="rgb(209,56,44)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="453" width="0.0176%" height="15" fill="rgb(230,108,32)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="463.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="437" width="0.0176%" height="15" fill="rgb(216,165,31)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="447.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="421" width="0.0176%" height="15" fill="rgb(218,122,21)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="431.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="405" width="0.0176%" height="15" fill="rgb(223,224,47)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="415.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="389" width="0.0176%" height="15" fill="rgb(238,102,44)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="399.50"></text></g><g><title>void TxOutCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="373" width="0.0176%" height="15" fill="rgb(236,46,40)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="383.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;HashWriter, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="357" width="0.0176%" height="15" fill="rgb(247,202,50)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="341" width="0.0176%" height="15" fill="rgb(209,99,20)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="351.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="325" width="0.0176%" height="15" fill="rgb(252,27,34)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="335.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="309" width="0.0176%" height="15" fill="rgb(215,206,23)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="319.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="293" width="0.0176%" height="15" fill="rgb(212,135,36)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="303.50"></text></g><g><title>void ScriptCompression::Ser&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.3897%" y="277" width="0.0176%" height="15" fill="rgb(240,189,1)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="287.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="39.3897%" y="261" width="0.0176%" height="15" fill="rgb(242,56,20)" fg:x="2233" fg:w="1"/><text x="39.6397%" y="271.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="39.4073%" y="757" width="0.0176%" height="15" fill="rgb(247,132,33)" fg:x="2234" fg:w="1"/><text x="39.6573%" y="767.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="39.4073%" y="741" width="0.0176%" height="15" fill="rgb(208,149,11)" fg:x="2234" fg:w="1"/><text x="39.6573%" y="751.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="39.4249%" y="741" width="0.0176%" height="15" fill="rgb(211,33,11)" fg:x="2235" fg:w="1"/><text x="39.6749%" y="751.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="39.4249%" y="725" width="0.0176%" height="15" fill="rgb(221,29,38)" fg:x="2235" fg:w="1"/><text x="39.6749%" y="735.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="39.4426%" y="725" width="0.0176%" height="15" fill="rgb(206,182,49)" fg:x="2236" fg:w="1"/><text x="39.6926%" y="735.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (11 samples, 0.19%)</title><rect x="39.2838%" y="869" width="0.1940%" height="15" fill="rgb(216,140,1)" fg:x="2227" fg:w="11"/><text x="39.5338%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;HashWriter&gt; (11 samples, 0.19%)</title><rect x="39.2838%" y="853" width="0.1940%" height="15" fill="rgb(232,57,40)" fg:x="2227" fg:w="11"/><text x="39.5338%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;HashWriter, unsigned int&gt; (11 samples, 0.19%)</title><rect x="39.2838%" y="837" width="0.1940%" height="15" fill="rgb(224,186,18)" fg:x="2227" fg:w="11"/><text x="39.5338%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (10 samples, 0.18%)</title><rect x="39.3015%" y="821" width="0.1764%" height="15" fill="rgb(215,121,11)" fg:x="2228" fg:w="10"/><text x="39.5515%" y="831.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (9 samples, 0.16%)</title><rect x="39.3191%" y="805" width="0.1588%" height="15" fill="rgb(245,147,10)" fg:x="2229" fg:w="9"/><text x="39.5691%" y="815.50"></text></g><g><title>HashWriter::write (9 samples, 0.16%)</title><rect x="39.3191%" y="789" width="0.1588%" height="15" fill="rgb(238,153,13)" fg:x="2229" fg:w="9"/><text x="39.5691%" y="799.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="39.4073%" y="773" width="0.0706%" height="15" fill="rgb(233,108,0)" fg:x="2234" fg:w="4"/><text x="39.6573%" y="783.50"></text></g><g><title>ShiftMessageB (3 samples, 0.05%)</title><rect x="39.4249%" y="757" width="0.0529%" height="15" fill="rgb(212,157,17)" fg:x="2235" fg:w="3"/><text x="39.6749%" y="767.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="39.4426%" y="741" width="0.0353%" height="15" fill="rgb(225,213,38)" fg:x="2236" fg:w="2"/><text x="39.6926%" y="751.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="39.4602%" y="725" width="0.0176%" height="15" fill="rgb(248,16,11)" fg:x="2237" fg:w="1"/><text x="39.7102%" y="735.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="39.4779%" y="821" width="0.0353%" height="15" fill="rgb(241,33,4)" fg:x="2238" fg:w="2"/><text x="39.7279%" y="831.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="39.4955%" y="805" width="0.0176%" height="15" fill="rgb(222,26,43)" fg:x="2239" fg:w="1"/><text x="39.7455%" y="815.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="39.4955%" y="789" width="0.0176%" height="15" fill="rgb(243,29,36)" fg:x="2239" fg:w="1"/><text x="39.7455%" y="799.50"></text></g><g><title>void WriteCompactSize&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="39.5131%" y="821" width="0.0176%" height="15" fill="rgb(241,9,27)" fg:x="2240" fg:w="1"/><text x="39.7631%" y="831.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (34 samples, 0.60%)</title><rect x="38.9487%" y="1221" width="0.5998%" height="15" fill="rgb(205,117,26)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1231.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockUndo&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1205" width="0.5998%" height="15" fill="rgb(209,80,39)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;HashWriter&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1189" width="0.5998%" height="15" fill="rgb(239,155,6)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;HashWriter&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1173" width="0.5998%" height="15" fill="rgb(212,104,12)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;HashWriter, CBlockUndo const, ActionSerialize&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1157" width="0.5998%" height="15" fill="rgb(234,204,3)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1141" width="0.5998%" height="15" fill="rgb(251,218,7)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1151.50"></text></g><g><title>void SerializeMany&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1125" width="0.5998%" height="15" fill="rgb(221,81,32)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1135.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1109" width="0.5998%" height="15" fill="rgb(214,152,26)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1119.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1093" width="0.5998%" height="15" fill="rgb(223,22,3)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1077" width="0.5998%" height="15" fill="rgb(207,174,7)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1061" width="0.5998%" height="15" fill="rgb(224,19,52)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;HashWriter, CTxUndo&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1045" width="0.5998%" height="15" fill="rgb(228,24,14)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, CTxUndo&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1029" width="0.5998%" height="15" fill="rgb(230,153,43)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;HashWriter&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="1013" width="0.5998%" height="15" fill="rgb(231,106,12)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;HashWriter&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="997" width="0.5998%" height="15" fill="rgb(215,92,2)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;HashWriter, CTxUndo const, ActionSerialize&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="981" width="0.5998%" height="15" fill="rgb(249,143,25)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="965" width="0.5998%" height="15" fill="rgb(252,7,35)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="975.50"></text></g><g><title>void SerializeMany&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="949" width="0.5998%" height="15" fill="rgb(216,69,40)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="959.50"></text></g><g><title>void Serialize&lt;HashWriter, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="933" width="0.5998%" height="15" fill="rgb(240,36,33)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;HashWriter&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="917" width="0.5998%" height="15" fill="rgb(231,128,14)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;HashWriter, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="901" width="0.5998%" height="15" fill="rgb(245,143,14)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;HashWriter&gt; (34 samples, 0.60%)</title><rect x="38.9487%" y="885" width="0.5998%" height="15" fill="rgb(222,130,28)" fg:x="2208" fg:w="34"/><text x="39.1987%" y="895.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="39.4779%" y="869" width="0.0706%" height="15" fill="rgb(212,10,48)" fg:x="2238" fg:w="4"/><text x="39.7279%" y="879.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="39.4779%" y="853" width="0.0706%" height="15" fill="rgb(254,118,45)" fg:x="2238" fg:w="4"/><text x="39.7279%" y="863.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="39.4779%" y="837" width="0.0706%" height="15" fill="rgb(228,6,45)" fg:x="2238" fg:w="4"/><text x="39.7279%" y="847.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="39.5308%" y="821" width="0.0176%" height="15" fill="rgb(241,18,35)" fg:x="2241" fg:w="1"/><text x="39.7808%" y="831.50"></text></g><g><title>node::BlockManager::OpenUndoFile (2 samples, 0.04%)</title><rect x="39.5484%" y="1221" width="0.0353%" height="15" fill="rgb(227,214,53)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1231.50"></text></g><g><title>FlatFileSeq::Open (2 samples, 0.04%)</title><rect x="39.5484%" y="1205" width="0.0353%" height="15" fill="rgb(224,107,51)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1215.50"></text></g><g><title>__fopen_internal (2 samples, 0.04%)</title><rect x="39.5484%" y="1189" width="0.0353%" height="15" fill="rgb(248,60,28)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1199.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="39.5484%" y="1173" width="0.0353%" height="15" fill="rgb(249,101,23)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1183.50"></text></g><g><title>_IO_file_open (2 samples, 0.04%)</title><rect x="39.5484%" y="1157" width="0.0353%" height="15" fill="rgb(228,51,19)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1167.50"></text></g><g><title>__GI___libc_open (2 samples, 0.04%)</title><rect x="39.5484%" y="1141" width="0.0353%" height="15" fill="rgb(213,20,6)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="39.5484%" y="1125" width="0.0353%" height="15" fill="rgb(212,124,10)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="39.5484%" y="1109" width="0.0353%" height="15" fill="rgb(248,3,40)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="39.5484%" y="1093" width="0.0353%" height="15" fill="rgb(223,178,23)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="39.5484%" y="1077" width="0.0353%" height="15" fill="rgb(240,132,45)" fg:x="2242" fg:w="2"/><text x="39.7984%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.5661%" y="1061" width="0.0176%" height="15" fill="rgb(245,164,36)" fg:x="2243" fg:w="1"/><text x="39.8161%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.5661%" y="1045" width="0.0176%" height="15" fill="rgb(231,188,53)" fg:x="2243" fg:w="1"/><text x="39.8161%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.5661%" y="1029" width="0.0176%" height="15" fill="rgb(237,198,39)" fg:x="2243" fg:w="1"/><text x="39.8161%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.5661%" y="1013" width="0.0176%" height="15" fill="rgb(223,120,35)" fg:x="2243" fg:w="1"/><text x="39.8161%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.5661%" y="997" width="0.0176%" height="15" fill="rgb(253,107,49)" fg:x="2243" fg:w="1"/><text x="39.8161%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.5661%" y="981" width="0.0176%" height="15" fill="rgb(216,44,31)" fg:x="2243" fg:w="1"/><text x="39.8161%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="39.5661%" y="965" width="0.0176%" height="15" fill="rgb(253,87,21)" fg:x="2243" fg:w="1"/><text x="39.8161%" y="975.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="39.5837%" y="1045" width="0.0176%" height="15" fill="rgb(226,18,2)" fg:x="2244" fg:w="1"/><text x="39.8337%" y="1055.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="39.6013%" y="709" width="0.0176%" height="15" fill="rgb(216,8,46)" fg:x="2245" fg:w="1"/><text x="39.8513%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.6013%" y="757" width="0.0353%" height="15" fill="rgb(226,140,39)" fg:x="2245" fg:w="2"/><text x="39.8513%" y="767.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="39.6013%" y="741" width="0.0353%" height="15" fill="rgb(221,194,54)" fg:x="2245" fg:w="2"/><text x="39.8513%" y="751.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (2 samples, 0.04%)</title><rect x="39.6013%" y="725" width="0.0353%" height="15" fill="rgb(213,92,11)" fg:x="2245" fg:w="2"/><text x="39.8513%" y="735.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="39.6190%" y="709" width="0.0176%" height="15" fill="rgb(229,162,46)" fg:x="2246" fg:w="1"/><text x="39.8690%" y="719.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.6190%" y="693" width="0.0176%" height="15" fill="rgb(214,111,36)" fg:x="2246" fg:w="1"/><text x="39.8690%" y="703.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.6190%" y="677" width="0.0176%" height="15" fill="rgb(207,6,21)" fg:x="2246" fg:w="1"/><text x="39.8690%" y="687.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.6190%" y="661" width="0.0176%" height="15" fill="rgb(213,127,38)" fg:x="2246" fg:w="1"/><text x="39.8690%" y="671.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.6190%" y="645" width="0.0176%" height="15" fill="rgb(238,118,32)" fg:x="2246" fg:w="1"/><text x="39.8690%" y="655.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="39.6719%" y="693" width="0.0176%" height="15" fill="rgb(240,139,39)" fg:x="2249" fg:w="1"/><text x="39.9219%" y="703.50"></text></g><g><title>CompressScript (2 samples, 0.04%)</title><rect x="39.6719%" y="709" width="0.0353%" height="15" fill="rgb(235,10,37)" fg:x="2249" fg:w="2"/><text x="39.9219%" y="719.50"></text></g><g><title>prevector&lt;33u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="39.6895%" y="693" width="0.0176%" height="15" fill="rgb(249,171,38)" fg:x="2250" fg:w="1"/><text x="39.9395%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="39.6013%" y="853" width="0.1235%" height="15" fill="rgb(242,144,32)" fg:x="2245" fg:w="7"/><text x="39.8513%" y="863.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (7 samples, 0.12%)</title><rect x="39.6013%" y="837" width="0.1235%" height="15" fill="rgb(217,117,21)" fg:x="2245" fg:w="7"/><text x="39.8513%" y="847.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (7 samples, 0.12%)</title><rect x="39.6013%" y="821" width="0.1235%" height="15" fill="rgb(249,87,1)" fg:x="2245" fg:w="7"/><text x="39.8513%" y="831.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (7 samples, 0.12%)</title><rect x="39.6013%" y="805" width="0.1235%" height="15" fill="rgb(248,196,48)" fg:x="2245" fg:w="7"/><text x="39.8513%" y="815.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="39.6013%" y="789" width="0.1235%" height="15" fill="rgb(251,206,33)" fg:x="2245" fg:w="7"/><text x="39.8513%" y="799.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="39.6013%" y="773" width="0.1235%" height="15" fill="rgb(232,141,28)" fg:x="2245" fg:w="7"/><text x="39.8513%" y="783.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="39.6366%" y="757" width="0.0882%" height="15" fill="rgb(209,167,14)" fg:x="2247" fg:w="5"/><text x="39.8866%" y="767.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (5 samples, 0.09%)</title><rect x="39.6366%" y="741" width="0.0882%" height="15" fill="rgb(225,11,50)" fg:x="2247" fg:w="5"/><text x="39.8866%" y="751.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (5 samples, 0.09%)</title><rect x="39.6366%" y="725" width="0.0882%" height="15" fill="rgb(209,50,20)" fg:x="2247" fg:w="5"/><text x="39.8866%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="709" width="0.0176%" height="15" fill="rgb(212,17,46)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="693" width="0.0176%" height="15" fill="rgb(216,101,39)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="677" width="0.0176%" height="15" fill="rgb(212,228,48)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="687.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="661" width="0.0176%" height="15" fill="rgb(250,6,50)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="671.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="645" width="0.0176%" height="15" fill="rgb(250,160,48)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="655.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="629" width="0.0176%" height="15" fill="rgb(244,216,33)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="613" width="0.0176%" height="15" fill="rgb(207,157,5)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="623.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="597" width="0.0176%" height="15" fill="rgb(228,199,8)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="581" width="0.0176%" height="15" fill="rgb(227,80,20)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="565" width="0.0176%" height="15" fill="rgb(222,9,33)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="575.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="549" width="0.0176%" height="15" fill="rgb(239,44,28)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="559.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="533" width="0.0176%" height="15" fill="rgb(249,187,43)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="517" width="0.0176%" height="15" fill="rgb(216,141,28)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="527.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="501" width="0.0176%" height="15" fill="rgb(230,154,53)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="511.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="485" width="0.0176%" height="15" fill="rgb(227,82,4)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="495.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="469" width="0.0176%" height="15" fill="rgb(220,107,16)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="479.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="453" width="0.0176%" height="15" fill="rgb(207,187,2)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="463.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="437" width="0.0176%" height="15" fill="rgb(210,162,52)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="447.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="421" width="0.0176%" height="15" fill="rgb(217,216,49)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="431.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="405" width="0.0176%" height="15" fill="rgb(218,146,49)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="415.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="389" width="0.0176%" height="15" fill="rgb(216,55,40)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="399.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="39.7072%" y="373" width="0.0176%" height="15" fill="rgb(208,196,21)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="383.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="357" width="0.0176%" height="15" fill="rgb(242,117,42)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="367.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="341" width="0.0176%" height="15" fill="rgb(210,11,23)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="351.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="325" width="0.0176%" height="15" fill="rgb(217,110,2)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="335.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="39.7072%" y="309" width="0.0176%" height="15" fill="rgb(229,77,54)" fg:x="2251" fg:w="1"/><text x="39.9572%" y="319.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (49 samples, 0.86%)</title><rect x="38.8957%" y="1237" width="0.8643%" height="15" fill="rgb(218,53,16)" fg:x="2205" fg:w="49"/><text x="39.1457%" y="1247.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1221" width="0.1764%" height="15" fill="rgb(215,38,13)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1231.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (10 samples, 0.18%)</title><rect x="39.5837%" y="1205" width="0.1764%" height="15" fill="rgb(235,42,18)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1215.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1189" width="0.1764%" height="15" fill="rgb(219,66,54)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1199.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1173" width="0.1764%" height="15" fill="rgb(222,205,4)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1183.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1157" width="0.1764%" height="15" fill="rgb(227,213,46)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1167.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1141" width="0.1764%" height="15" fill="rgb(250,145,42)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1151.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1125" width="0.1764%" height="15" fill="rgb(219,15,2)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1135.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1109" width="0.1764%" height="15" fill="rgb(231,181,52)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1093" width="0.1764%" height="15" fill="rgb(235,1,42)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1103.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1077" width="0.1764%" height="15" fill="rgb(249,88,27)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1087.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (10 samples, 0.18%)</title><rect x="39.5837%" y="1061" width="0.1764%" height="15" fill="rgb(235,145,16)" fg:x="2244" fg:w="10"/><text x="39.8337%" y="1071.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="1045" width="0.1588%" height="15" fill="rgb(237,114,19)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="1055.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="1029" width="0.1588%" height="15" fill="rgb(238,51,50)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="1039.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="1013" width="0.1588%" height="15" fill="rgb(205,194,25)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="1023.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="997" width="0.1588%" height="15" fill="rgb(215,203,17)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="1007.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="981" width="0.1588%" height="15" fill="rgb(233,112,49)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="991.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="965" width="0.1588%" height="15" fill="rgb(241,130,26)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="975.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="949" width="0.1588%" height="15" fill="rgb(252,223,19)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="959.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="933" width="0.1588%" height="15" fill="rgb(211,95,25)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="943.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="917" width="0.1588%" height="15" fill="rgb(251,182,27)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="927.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="901" width="0.1588%" height="15" fill="rgb(238,24,4)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="911.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="885" width="0.1588%" height="15" fill="rgb(224,220,25)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="895.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (9 samples, 0.16%)</title><rect x="39.6013%" y="869" width="0.1588%" height="15" fill="rgb(239,133,26)" fg:x="2245" fg:w="9"/><text x="39.8513%" y="879.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.7248%" y="853" width="0.0353%" height="15" fill="rgb(211,94,48)" fg:x="2252" fg:w="2"/><text x="39.9748%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="39.7248%" y="837" width="0.0353%" height="15" fill="rgb(239,87,6)" fg:x="2252" fg:w="2"/><text x="39.9748%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (2 samples, 0.04%)</title><rect x="39.7248%" y="821" width="0.0353%" height="15" fill="rgb(227,62,0)" fg:x="2252" fg:w="2"/><text x="39.9748%" y="831.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (2 samples, 0.04%)</title><rect x="39.7248%" y="805" width="0.0353%" height="15" fill="rgb(211,226,4)" fg:x="2252" fg:w="2"/><text x="39.9748%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="39.7601%" y="1237" width="0.0176%" height="15" fill="rgb(253,38,52)" fg:x="2254" fg:w="1"/><text x="40.0101%" y="1247.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="39.7601%" y="1221" width="0.0176%" height="15" fill="rgb(229,126,40)" fg:x="2254" fg:w="1"/><text x="40.0101%" y="1231.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="39.7601%" y="1205" width="0.0176%" height="15" fill="rgb(229,165,44)" fg:x="2254" fg:w="1"/><text x="40.0101%" y="1215.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="39.7601%" y="1189" width="0.0176%" height="15" fill="rgb(247,95,47)" fg:x="2254" fg:w="1"/><text x="40.0101%" y="1199.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="39.7777%" y="1061" width="0.0176%" height="15" fill="rgb(216,140,30)" fg:x="2255" fg:w="1"/><text x="40.0277%" y="1071.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="39.7954%" y="1061" width="0.0176%" height="15" fill="rgb(246,214,8)" fg:x="2256" fg:w="1"/><text x="40.0454%" y="1071.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="39.8483%" y="725" width="0.0176%" height="15" fill="rgb(227,224,15)" fg:x="2259" fg:w="1"/><text x="40.0983%" y="735.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="39.8659%" y="709" width="0.0176%" height="15" fill="rgb(233,175,4)" fg:x="2260" fg:w="1"/><text x="40.1159%" y="719.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="39.8659%" y="693" width="0.0176%" height="15" fill="rgb(221,66,45)" fg:x="2260" fg:w="1"/><text x="40.1159%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="869" width="0.1058%" height="15" fill="rgb(221,178,18)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="879.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="853" width="0.1058%" height="15" fill="rgb(213,81,29)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="863.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="837" width="0.1058%" height="15" fill="rgb(220,89,49)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="847.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="821" width="0.1058%" height="15" fill="rgb(227,60,33)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="805" width="0.1058%" height="15" fill="rgb(205,113,12)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="815.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="789" width="0.1058%" height="15" fill="rgb(211,32,1)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="799.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="773" width="0.1058%" height="15" fill="rgb(246,2,12)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="783.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="757" width="0.1058%" height="15" fill="rgb(243,37,27)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="767.50"></text></g><g><title>void ScriptCompression::Ser&lt;SizeComputer&gt; (6 samples, 0.11%)</title><rect x="39.8130%" y="741" width="0.1058%" height="15" fill="rgb(248,211,31)" fg:x="2257" fg:w="6"/><text x="40.0630%" y="751.50"></text></g><g><title>CompressScript (3 samples, 0.05%)</title><rect x="39.8659%" y="725" width="0.0529%" height="15" fill="rgb(242,146,47)" fg:x="2260" fg:w="3"/><text x="40.1159%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="709" width="0.0353%" height="15" fill="rgb(206,70,20)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="719.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="693" width="0.0353%" height="15" fill="rgb(215,10,51)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="703.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="677" width="0.0353%" height="15" fill="rgb(243,178,53)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="687.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="661" width="0.0353%" height="15" fill="rgb(233,221,20)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="671.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="645" width="0.0353%" height="15" fill="rgb(218,95,35)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="655.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="629" width="0.0353%" height="15" fill="rgb(229,13,5)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="613" width="0.0353%" height="15" fill="rgb(252,164,30)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="623.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="597" width="0.0353%" height="15" fill="rgb(232,68,36)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="607.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="581" width="0.0353%" height="15" fill="rgb(219,59,54)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="591.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="565" width="0.0353%" height="15" fill="rgb(250,92,33)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="575.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="39.8836%" y="549" width="0.0353%" height="15" fill="rgb(229,162,54)" fg:x="2261" fg:w="2"/><text x="40.1336%" y="559.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.9012%" y="533" width="0.0176%" height="15" fill="rgb(244,114,52)" fg:x="2262" fg:w="1"/><text x="40.1512%" y="543.50"></text></g><g><title>void Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.9012%" y="517" width="0.0176%" height="15" fill="rgb(212,211,43)" fg:x="2262" fg:w="1"/><text x="40.1512%" y="527.50"></text></g><g><title>void ser_writedata8&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="39.9012%" y="501" width="0.0176%" height="15" fill="rgb(226,147,8)" fg:x="2262" fg:w="1"/><text x="40.1512%" y="511.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="39.9012%" y="485" width="0.0176%" height="15" fill="rgb(226,23,13)" fg:x="2262" fg:w="1"/><text x="40.1512%" y="495.50"></text></g><g><title>node::BlockManager::WriteUndoDataForBlock (69 samples, 1.22%)</title><rect x="38.7370%" y="1253" width="1.2171%" height="15" fill="rgb(240,63,4)" fg:x="2196" fg:w="69"/><text x="38.9870%" y="1263.50"></text></g><g><title>unsigned long GetSerializeSize&lt;CBlockUndo&gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1237" width="0.1764%" height="15" fill="rgb(221,1,32)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (10 samples, 0.18%)</title><rect x="39.7777%" y="1221" width="0.1764%" height="15" fill="rgb(242,117,10)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, CBlockUndo&gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1205" width="0.1764%" height="15" fill="rgb(249,172,44)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1215.50"></text></g><g><title>void CBlockUndo::Serialize&lt;SizeComputer&gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1189" width="0.1764%" height="15" fill="rgb(244,46,45)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1199.50"></text></g><g><title>void CBlockUndo::Ser&lt;SizeComputer&gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1173" width="0.1764%" height="15" fill="rgb(206,43,17)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1183.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;SizeComputer, CBlockUndo const, ActionSerialize&gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1157" width="0.1764%" height="15" fill="rgb(239,218,39)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1141" width="0.1764%" height="15" fill="rgb(208,169,54)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1151.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1125" width="0.1764%" height="15" fill="rgb(247,25,42)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1135.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1109" width="0.1764%" height="15" fill="rgb(226,23,31)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1119.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1093" width="0.1764%" height="15" fill="rgb(247,16,28)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (10 samples, 0.18%)</title><rect x="39.7777%" y="1077" width="0.1764%" height="15" fill="rgb(231,147,38)" fg:x="2255" fg:w="10"/><text x="40.0277%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="1061" width="0.1411%" height="15" fill="rgb(253,81,48)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="1045" width="0.1411%" height="15" fill="rgb(249,222,43)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="1055.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="1029" width="0.1411%" height="15" fill="rgb(221,3,27)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="1039.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="1013" width="0.1411%" height="15" fill="rgb(228,180,5)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="1023.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="997" width="0.1411%" height="15" fill="rgb(227,131,42)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="1007.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="981" width="0.1411%" height="15" fill="rgb(212,3,39)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="991.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="965" width="0.1411%" height="15" fill="rgb(226,45,5)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="975.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="949" width="0.1411%" height="15" fill="rgb(215,167,45)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="959.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="933" width="0.1411%" height="15" fill="rgb(250,218,53)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="917" width="0.1411%" height="15" fill="rgb(207,140,0)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="927.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="901" width="0.1411%" height="15" fill="rgb(238,133,51)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="911.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (8 samples, 0.14%)</title><rect x="39.8130%" y="885" width="0.1411%" height="15" fill="rgb(218,203,53)" fg:x="2257" fg:w="8"/><text x="40.0630%" y="895.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="39.9189%" y="869" width="0.0353%" height="15" fill="rgb(226,184,25)" fg:x="2263" fg:w="2"/><text x="40.1689%" y="879.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="39.9189%" y="853" width="0.0353%" height="15" fill="rgb(231,121,21)" fg:x="2263" fg:w="2"/><text x="40.1689%" y="863.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;SizeComputer, unsigned int&gt; (2 samples, 0.04%)</title><rect x="39.9189%" y="837" width="0.0353%" height="15" fill="rgb(251,14,34)" fg:x="2263" fg:w="2"/><text x="40.1689%" y="847.50"></text></g><g><title>void WriteVarInt&lt;SizeComputer, (VarIntMode)0, unsigned int&gt; (2 samples, 0.04%)</title><rect x="39.9189%" y="821" width="0.0353%" height="15" fill="rgb(249,193,11)" fg:x="2263" fg:w="2"/><text x="40.1689%" y="831.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="39.9541%" y="1253" width="0.0176%" height="15" fill="rgb(220,172,37)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1263.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="39.9541%" y="1237" width="0.0176%" height="15" fill="rgb(231,229,43)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1247.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9541%" y="1221" width="0.0176%" height="15" fill="rgb(250,161,5)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1231.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9541%" y="1205" width="0.0176%" height="15" fill="rgb(218,225,18)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9541%" y="1189" width="0.0176%" height="15" fill="rgb(245,45,42)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.02%)</title><rect x="39.9541%" y="1173" width="0.0176%" height="15" fill="rgb(211,115,1)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1183.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.02%)</title><rect x="39.9541%" y="1157" width="0.0176%" height="15" fill="rgb(248,133,52)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1167.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.02%)</title><rect x="39.9541%" y="1141" width="0.0176%" height="15" fill="rgb(238,100,21)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1151.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (1 samples, 0.02%)</title><rect x="39.9541%" y="1125" width="0.0176%" height="15" fill="rgb(247,144,11)" fg:x="2265" fg:w="1"/><text x="40.2041%" y="1135.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::vector (7 samples, 0.12%)</title><rect x="39.9718%" y="1253" width="0.1235%" height="15" fill="rgb(206,164,16)" fg:x="2266" fg:w="7"/><text x="40.2218%" y="1263.50"></text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::_M_default_initialize (7 samples, 0.12%)</title><rect x="39.9718%" y="1237" width="0.1235%" height="15" fill="rgb(222,34,3)" fg:x="2266" fg:w="7"/><text x="40.2218%" y="1247.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_a&lt;PrecomputedTransactionData*, unsigned long, PrecomputedTransactionData&gt; (7 samples, 0.12%)</title><rect x="39.9718%" y="1221" width="0.1235%" height="15" fill="rgb(248,82,4)" fg:x="2266" fg:w="7"/><text x="40.2218%" y="1231.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (7 samples, 0.12%)</title><rect x="39.9718%" y="1205" width="0.1235%" height="15" fill="rgb(228,81,46)" fg:x="2266" fg:w="7"/><text x="40.2218%" y="1215.50"></text></g><g><title>PrecomputedTransactionData* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;PrecomputedTransactionData*, unsigned long&gt; (7 samples, 0.12%)</title><rect x="39.9718%" y="1189" width="0.1235%" height="15" fill="rgb(227,67,47)" fg:x="2266" fg:w="7"/><text x="40.2218%" y="1199.50"></text></g><g><title>void std::_Construct&lt;PrecomputedTransactionData&gt; (7 samples, 0.12%)</title><rect x="39.9718%" y="1173" width="0.1235%" height="15" fill="rgb(215,93,53)" fg:x="2266" fg:w="7"/><text x="40.2218%" y="1183.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="39.9894%" y="1157" width="0.1058%" height="15" fill="rgb(248,194,39)" fg:x="2267" fg:w="6"/><text x="40.2394%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="39.9894%" y="1141" width="0.1058%" height="15" fill="rgb(215,5,19)" fg:x="2267" fg:w="6"/><text x="40.2394%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="39.9894%" y="1125" width="0.1058%" height="15" fill="rgb(226,215,51)" fg:x="2267" fg:w="6"/><text x="40.2394%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="39.9894%" y="1109" width="0.1058%" height="15" fill="rgb(225,56,26)" fg:x="2267" fg:w="6"/><text x="40.2394%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="40.0247%" y="1093" width="0.0706%" height="15" fill="rgb(222,75,29)" fg:x="2269" fg:w="4"/><text x="40.2747%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="40.0423%" y="1077" width="0.0529%" height="15" fill="rgb(236,139,6)" fg:x="2270" fg:w="3"/><text x="40.2923%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="40.0423%" y="1061" width="0.0529%" height="15" fill="rgb(223,137,36)" fg:x="2270" fg:w="3"/><text x="40.2923%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="40.0600%" y="1045" width="0.0353%" height="15" fill="rgb(226,99,2)" fg:x="2271" fg:w="2"/><text x="40.3100%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="40.0600%" y="1029" width="0.0353%" height="15" fill="rgb(206,133,23)" fg:x="2271" fg:w="2"/><text x="40.3100%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="40.0600%" y="1013" width="0.0353%" height="15" fill="rgb(243,173,15)" fg:x="2271" fg:w="2"/><text x="40.3100%" y="1023.50"></text></g><g><title>Chainstate::ConnectBlock (928 samples, 16.37%)</title><rect x="23.7432%" y="1269" width="16.3697%" height="15" fill="rgb(228,69,28)" fg:x="1346" fg:w="928"/><text x="23.9932%" y="1279.50">Chainstate::ConnectBlock</text></g><g><title>std::vector&lt;PrecomputedTransactionData, std::allocator&lt;PrecomputedTransactionData&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="40.0953%" y="1253" width="0.0176%" height="15" fill="rgb(212,51,22)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*, PrecomputedTransactionData&gt; (1 samples, 0.02%)</title><rect x="40.0953%" y="1237" width="0.0176%" height="15" fill="rgb(227,113,0)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1247.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData*&gt; (1 samples, 0.02%)</title><rect x="40.0953%" y="1221" width="0.0176%" height="15" fill="rgb(252,84,27)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1231.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;PrecomputedTransactionData*&gt; (1 samples, 0.02%)</title><rect x="40.0953%" y="1205" width="0.0176%" height="15" fill="rgb(223,145,39)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1215.50"></text></g><g><title>void std::_Destroy&lt;PrecomputedTransactionData&gt; (1 samples, 0.02%)</title><rect x="40.0953%" y="1189" width="0.0176%" height="15" fill="rgb(239,219,30)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1199.50"></text></g><g><title>void std::destroy_at&lt;PrecomputedTransactionData&gt; (1 samples, 0.02%)</title><rect x="40.0953%" y="1173" width="0.0176%" height="15" fill="rgb(224,196,39)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1183.50"></text></g><g><title>PrecomputedTransactionData::~PrecomputedTransactionData (1 samples, 0.02%)</title><rect x="40.0953%" y="1157" width="0.0176%" height="15" fill="rgb(205,35,43)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1167.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="40.0953%" y="1141" width="0.0176%" height="15" fill="rgb(228,201,21)" fg:x="2273" fg:w="1"/><text x="40.3453%" y="1151.50"></text></g><g><title>Chainstate::UpdateTip (1 samples, 0.02%)</title><rect x="40.1129%" y="1269" width="0.0176%" height="15" fill="rgb(237,118,16)" fg:x="2274" fg:w="1"/><text x="40.3629%" y="1279.50"></text></g><g><title>UpdateTipLog (1 samples, 0.02%)</title><rect x="40.1129%" y="1253" width="0.0176%" height="15" fill="rgb(241,17,19)" fg:x="2274" fg:w="1"/><text x="40.3629%" y="1263.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.02%)</title><rect x="40.1129%" y="1237" width="0.0176%" height="15" fill="rgb(214,10,25)" fg:x="2274" fg:w="1"/><text x="40.3629%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.02%)</title><rect x="40.1129%" y="1221" width="0.0176%" height="15" fill="rgb(238,37,29)" fg:x="2274" fg:w="1"/><text x="40.3629%" y="1231.50"></text></g><g><title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.02%)</title><rect x="40.1129%" y="1205" width="0.0176%" height="15" fill="rgb(253,83,25)" fg:x="2274" fg:w="1"/><text x="40.3629%" y="1215.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ios (1 samples, 0.02%)</title><rect x="40.1129%" y="1189" width="0.0176%" height="15" fill="rgb(234,192,12)" fg:x="2274" fg:w="1"/><text x="40.3629%" y="1199.50"></text></g><g><title>__vdso_time (1 samples, 0.02%)</title><rect x="40.1129%" y="1173" width="0.0176%" height="15" fill="rgb(241,216,45)" fg:x="2274" fg:w="1"/><text x="40.3629%" y="1183.50"></text></g><g><title>Chainstate::ActivateBestChainStep (1,598 samples, 28.19%)</title><rect x="11.9598%" y="1301" width="28.1884%" height="15" fill="rgb(242,22,33)" fg:x="678" fg:w="1598"/><text x="12.2098%" y="1311.50">Chainstate::ActivateBestChainStep</text></g><g><title>Chainstate::ConnectTip (1,598 samples, 28.19%)</title><rect x="11.9598%" y="1285" width="28.1884%" height="15" fill="rgb(231,105,49)" fg:x="678" fg:w="1598"/><text x="12.2098%" y="1295.50">Chainstate::ConnectTip</text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (1 samples, 0.02%)</title><rect x="40.1305%" y="1269" width="0.0176%" height="15" fill="rgb(218,204,15)" fg:x="2275" fg:w="1"/><text x="40.3805%" y="1279.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="40.1305%" y="1253" width="0.0176%" height="15" fill="rgb(235,138,41)" fg:x="2275" fg:w="1"/><text x="40.3805%" y="1263.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="40.1305%" y="1237" width="0.0176%" height="15" fill="rgb(246,0,9)" fg:x="2275" fg:w="1"/><text x="40.3805%" y="1247.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="40.1305%" y="1221" width="0.0176%" height="15" fill="rgb(210,74,4)" fg:x="2275" fg:w="1"/><text x="40.3805%" y="1231.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="40.1305%" y="1205" width="0.0176%" height="15" fill="rgb(250,60,41)" fg:x="2275" fg:w="1"/><text x="40.3805%" y="1215.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="40.1305%" y="1189" width="0.0176%" height="15" fill="rgb(220,115,12)" fg:x="2275" fg:w="1"/><text x="40.3805%" y="1199.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="40.1305%" y="1173" width="0.0176%" height="15" fill="rgb(237,100,13)" fg:x="2275" fg:w="1"/><text x="40.3805%" y="1183.50"></text></g><g><title>ValidationSignals::UpdatedBlockTip (1 samples, 0.02%)</title><rect x="40.1482%" y="1301" width="0.0176%" height="15" fill="rgb(213,55,26)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1311.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.02%)</title><rect x="40.1482%" y="1285" width="0.0176%" height="15" fill="rgb(216,17,4)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1295.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="40.1482%" y="1269" width="0.0176%" height="15" fill="rgb(220,153,47)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1279.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="40.1482%" y="1253" width="0.0176%" height="15" fill="rgb(215,131,9)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1263.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="40.1482%" y="1237" width="0.0176%" height="15" fill="rgb(233,46,42)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1247.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="40.1482%" y="1221" width="0.0176%" height="15" fill="rgb(226,86,7)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1231.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="40.1482%" y="1205" width="0.0176%" height="15" fill="rgb(239,226,21)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1215.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="40.1482%" y="1189" width="0.0176%" height="15" fill="rgb(244,137,22)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1199.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="40.1482%" y="1173" width="0.0176%" height="15" fill="rgb(211,139,35)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1183.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="40.1482%" y="1157" width="0.0176%" height="15" fill="rgb(214,62,50)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1482%" y="1141" width="0.0176%" height="15" fill="rgb(212,113,44)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1482%" y="1125" width="0.0176%" height="15" fill="rgb(226,150,43)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1482%" y="1109" width="0.0176%" height="15" fill="rgb(250,71,37)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.1482%" y="1093" width="0.0176%" height="15" fill="rgb(219,76,19)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="40.1482%" y="1077" width="0.0176%" height="15" fill="rgb(250,39,11)" fg:x="2276" fg:w="1"/><text x="40.3982%" y="1087.50"></text></g><g><title>Chainstate::ActivateBestChain (1,600 samples, 28.22%)</title><rect x="11.9598%" y="1317" width="28.2237%" height="15" fill="rgb(230,64,31)" fg:x="678" fg:w="1600"/><text x="12.2098%" y="1327.50">Chainstate::ActivateBestChain</text></g><g><title>node::KernelNotifications::blockTip (1 samples, 0.02%)</title><rect x="40.1658%" y="1301" width="0.0176%" height="15" fill="rgb(208,222,23)" fg:x="2277" fg:w="1"/><text x="40.4158%" y="1311.50"></text></g><g><title>std::condition_variable::notify_all (1 samples, 0.02%)</title><rect x="40.1658%" y="1285" width="0.0176%" height="15" fill="rgb(227,125,18)" fg:x="2277" fg:w="1"/><text x="40.4158%" y="1295.50"></text></g><g><title>ContextualCheckBlock (1 samples, 0.02%)</title><rect x="40.1835%" y="1285" width="0.0176%" height="15" fill="rgb(234,210,9)" fg:x="2278" fg:w="1"/><text x="40.4335%" y="1295.50"></text></g><g><title>ContextualCheckBlock (2 samples, 0.04%)</title><rect x="40.2011%" y="981" width="0.0353%" height="15" fill="rgb(217,127,24)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="991.50"></text></g><g><title>GetBlockWeight (2 samples, 0.04%)</title><rect x="40.2011%" y="965" width="0.0353%" height="15" fill="rgb(239,141,48)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="975.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="949" width="0.0353%" height="15" fill="rgb(227,109,8)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="959.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (2 samples, 0.04%)</title><rect x="40.2011%" y="933" width="0.0353%" height="15" fill="rgb(235,184,23)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="943.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="917" width="0.0353%" height="15" fill="rgb(227,226,48)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="927.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="901" width="0.0353%" height="15" fill="rgb(206,150,11)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="885" width="0.0353%" height="15" fill="rgb(254,2,33)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="895.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="869" width="0.0353%" height="15" fill="rgb(243,160,20)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="879.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="853" width="0.0353%" height="15" fill="rgb(218,208,30)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="863.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="837" width="0.0353%" height="15" fill="rgb(224,120,49)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="821" width="0.0353%" height="15" fill="rgb(246,12,2)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="805" width="0.0353%" height="15" fill="rgb(236,117,3)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="789" width="0.0353%" height="15" fill="rgb(216,128,52)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="773" width="0.0353%" height="15" fill="rgb(246,145,19)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="783.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="757" width="0.0353%" height="15" fill="rgb(222,11,46)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="767.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="741" width="0.0353%" height="15" fill="rgb(245,82,36)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="751.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="725" width="0.0353%" height="15" fill="rgb(250,73,51)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="709" width="0.0353%" height="15" fill="rgb(221,189,23)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="693" width="0.0353%" height="15" fill="rgb(210,33,7)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="703.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.2011%" y="677" width="0.0353%" height="15" fill="rgb(210,107,22)" fg:x="2279" fg:w="2"/><text x="40.4511%" y="687.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="40.3599%" y="885" width="0.0176%" height="15" fill="rgb(222,116,37)" fg:x="2288" fg:w="1"/><text x="40.6099%" y="895.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="885" width="0.0176%" height="15" fill="rgb(254,17,48)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="869" width="0.0176%" height="15" fill="rgb(224,36,32)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="879.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="853" width="0.0176%" height="15" fill="rgb(232,90,46)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="863.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="837" width="0.0176%" height="15" fill="rgb(241,66,40)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="847.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="821" width="0.0176%" height="15" fill="rgb(249,184,29)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="805" width="0.0176%" height="15" fill="rgb(231,181,1)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="789" width="0.0176%" height="15" fill="rgb(224,94,2)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="773" width="0.0176%" height="15" fill="rgb(229,170,15)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="757" width="0.0176%" height="15" fill="rgb(240,127,35)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="741" width="0.0176%" height="15" fill="rgb(248,196,34)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="725" width="0.0176%" height="15" fill="rgb(236,137,7)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="709" width="0.0176%" height="15" fill="rgb(235,127,16)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="693" width="0.0176%" height="15" fill="rgb(250,192,54)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="40.3775%" y="677" width="0.0176%" height="15" fill="rgb(218,98,20)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="40.3775%" y="661" width="0.0176%" height="15" fill="rgb(230,176,47)" fg:x="2289" fg:w="1"/><text x="40.6275%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="40.4304%" y="869" width="0.0529%" height="15" fill="rgb(244,2,33)" fg:x="2292" fg:w="3"/><text x="40.6804%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (3 samples, 0.05%)</title><rect x="40.4304%" y="853" width="0.0529%" height="15" fill="rgb(231,100,17)" fg:x="2292" fg:w="3"/><text x="40.6804%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="40.4304%" y="837" width="0.0529%" height="15" fill="rgb(245,23,12)" fg:x="2292" fg:w="3"/><text x="40.6804%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="40.4304%" y="821" width="0.0529%" height="15" fill="rgb(249,55,22)" fg:x="2292" fg:w="3"/><text x="40.6804%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="40.4304%" y="805" width="0.0529%" height="15" fill="rgb(207,134,9)" fg:x="2292" fg:w="3"/><text x="40.6804%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="789" width="0.0176%" height="15" fill="rgb(218,134,0)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="773" width="0.0176%" height="15" fill="rgb(213,212,33)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="783.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="757" width="0.0176%" height="15" fill="rgb(252,106,18)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="767.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="741" width="0.0176%" height="15" fill="rgb(208,126,42)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="751.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="725" width="0.0176%" height="15" fill="rgb(246,175,29)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="709" width="0.0176%" height="15" fill="rgb(215,13,50)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="693" width="0.0176%" height="15" fill="rgb(216,172,15)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="677" width="0.0176%" height="15" fill="rgb(212,103,13)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="687.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="661" width="0.0176%" height="15" fill="rgb(231,171,36)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="671.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="645" width="0.0176%" height="15" fill="rgb(250,123,20)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="655.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="629" width="0.0176%" height="15" fill="rgb(212,53,50)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="639.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="613" width="0.0176%" height="15" fill="rgb(243,54,12)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="623.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="597" width="0.0176%" height="15" fill="rgb(234,101,34)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="607.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="40.4657%" y="581" width="0.0176%" height="15" fill="rgb(254,67,22)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="591.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="40.4657%" y="565" width="0.0176%" height="15" fill="rgb(250,35,47)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="575.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="40.4657%" y="549" width="0.0176%" height="15" fill="rgb(226,126,38)" fg:x="2294" fg:w="1"/><text x="40.7157%" y="559.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (11 samples, 0.19%)</title><rect x="40.3069%" y="965" width="0.1940%" height="15" fill="rgb(216,138,53)" fg:x="2285" fg:w="11"/><text x="40.5569%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (11 samples, 0.19%)</title><rect x="40.3069%" y="949" width="0.1940%" height="15" fill="rgb(246,199,43)" fg:x="2285" fg:w="11"/><text x="40.5569%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (11 samples, 0.19%)</title><rect x="40.3069%" y="933" width="0.1940%" height="15" fill="rgb(232,125,11)" fg:x="2285" fg:w="11"/><text x="40.5569%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.19%)</title><rect x="40.3069%" y="917" width="0.1940%" height="15" fill="rgb(218,219,45)" fg:x="2285" fg:w="11"/><text x="40.5569%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (11 samples, 0.19%)</title><rect x="40.3069%" y="901" width="0.1940%" height="15" fill="rgb(216,102,54)" fg:x="2285" fg:w="11"/><text x="40.5569%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.11%)</title><rect x="40.3951%" y="885" width="0.1058%" height="15" fill="rgb(250,228,7)" fg:x="2290" fg:w="6"/><text x="40.6451%" y="895.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="40.4833%" y="869" width="0.0176%" height="15" fill="rgb(226,125,25)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.4833%" y="853" width="0.0176%" height="15" fill="rgb(224,165,27)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4833%" y="837" width="0.0176%" height="15" fill="rgb(233,86,3)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4833%" y="821" width="0.0176%" height="15" fill="rgb(228,116,20)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.4833%" y="805" width="0.0176%" height="15" fill="rgb(209,192,17)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="40.4833%" y="789" width="0.0176%" height="15" fill="rgb(224,88,34)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="40.4833%" y="773" width="0.0176%" height="15" fill="rgb(233,38,6)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="783.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="40.4833%" y="757" width="0.0176%" height="15" fill="rgb(212,59,30)" fg:x="2295" fg:w="1"/><text x="40.7333%" y="767.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="40.5186%" y="885" width="0.0176%" height="15" fill="rgb(213,80,3)" fg:x="2297" fg:w="1"/><text x="40.7686%" y="895.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="885" width="0.0176%" height="15" fill="rgb(251,178,7)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="869" width="0.0176%" height="15" fill="rgb(213,154,26)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="853" width="0.0176%" height="15" fill="rgb(238,165,49)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="837" width="0.0176%" height="15" fill="rgb(248,91,46)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="821" width="0.0176%" height="15" fill="rgb(244,21,52)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="805" width="0.0176%" height="15" fill="rgb(247,122,20)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="789" width="0.0176%" height="15" fill="rgb(218,27,9)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="773" width="0.0176%" height="15" fill="rgb(246,7,6)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="757" width="0.0176%" height="15" fill="rgb(227,135,54)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="741" width="0.0176%" height="15" fill="rgb(247,14,11)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="725" width="0.0176%" height="15" fill="rgb(206,149,34)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="709" width="0.0176%" height="15" fill="rgb(227,228,4)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="693" width="0.0176%" height="15" fill="rgb(238,218,28)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="40.5362%" y="677" width="0.0176%" height="15" fill="rgb(252,86,40)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="40.5362%" y="661" width="0.0176%" height="15" fill="rgb(251,225,11)" fg:x="2298" fg:w="1"/><text x="40.7862%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (4 samples, 0.07%)</title><rect x="40.5010%" y="965" width="0.0706%" height="15" fill="rgb(206,46,49)" fg:x="2296" fg:w="4"/><text x="40.7510%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (4 samples, 0.07%)</title><rect x="40.5010%" y="949" width="0.0706%" height="15" fill="rgb(245,128,24)" fg:x="2296" fg:w="4"/><text x="40.7510%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="40.5010%" y="933" width="0.0706%" height="15" fill="rgb(219,177,34)" fg:x="2296" fg:w="4"/><text x="40.7510%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="40.5010%" y="917" width="0.0706%" height="15" fill="rgb(218,60,48)" fg:x="2296" fg:w="4"/><text x="40.7510%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="40.5010%" y="901" width="0.0706%" height="15" fill="rgb(221,11,5)" fg:x="2296" fg:w="4"/><text x="40.7510%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.5539%" y="885" width="0.0176%" height="15" fill="rgb(220,148,13)" fg:x="2299" fg:w="1"/><text x="40.8039%" y="895.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="40.6068%" y="533" width="0.0176%" height="15" fill="rgb(210,16,3)" fg:x="2302" fg:w="1"/><text x="40.8568%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="853" width="0.0353%" height="15" fill="rgb(236,80,2)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="863.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="40.6068%" y="837" width="0.0353%" height="15" fill="rgb(239,129,19)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="821" width="0.0353%" height="15" fill="rgb(220,106,35)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="805" width="0.0353%" height="15" fill="rgb(252,139,45)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="789" width="0.0353%" height="15" fill="rgb(229,8,36)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="773" width="0.0353%" height="15" fill="rgb(230,126,33)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="757" width="0.0353%" height="15" fill="rgb(239,140,21)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="741" width="0.0353%" height="15" fill="rgb(254,104,9)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="751.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="725" width="0.0353%" height="15" fill="rgb(239,52,14)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="735.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="709" width="0.0353%" height="15" fill="rgb(208,227,44)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="693" width="0.0353%" height="15" fill="rgb(246,18,19)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="677" width="0.0353%" height="15" fill="rgb(235,228,25)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="661" width="0.0353%" height="15" fill="rgb(240,156,20)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="645" width="0.0353%" height="15" fill="rgb(224,8,20)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="629" width="0.0353%" height="15" fill="rgb(214,12,52)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="613" width="0.0353%" height="15" fill="rgb(211,220,47)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="597" width="0.0353%" height="15" fill="rgb(250,173,5)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="581" width="0.0353%" height="15" fill="rgb(250,125,52)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="565" width="0.0353%" height="15" fill="rgb(209,133,18)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="40.6068%" y="549" width="0.0353%" height="15" fill="rgb(216,173,22)" fg:x="2302" fg:w="2"/><text x="40.8568%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.6244%" y="533" width="0.0176%" height="15" fill="rgb(205,3,22)" fg:x="2303" fg:w="1"/><text x="40.8744%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.6244%" y="517" width="0.0176%" height="15" fill="rgb(248,22,20)" fg:x="2303" fg:w="1"/><text x="40.8744%" y="527.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="40.6244%" y="501" width="0.0176%" height="15" fill="rgb(233,6,29)" fg:x="2303" fg:w="1"/><text x="40.8744%" y="511.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="40.6244%" y="485" width="0.0176%" height="15" fill="rgb(240,22,54)" fg:x="2303" fg:w="1"/><text x="40.8744%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (24 samples, 0.42%)</title><rect x="40.2364%" y="981" width="0.4234%" height="15" fill="rgb(231,133,32)" fg:x="2281" fg:w="24"/><text x="40.4864%" y="991.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (5 samples, 0.09%)</title><rect x="40.5715%" y="965" width="0.0882%" height="15" fill="rgb(248,193,4)" fg:x="2300" fg:w="5"/><text x="40.8215%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="40.5715%" y="949" width="0.0882%" height="15" fill="rgb(211,178,46)" fg:x="2300" fg:w="5"/><text x="40.8215%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="40.5715%" y="933" width="0.0882%" height="15" fill="rgb(224,5,42)" fg:x="2300" fg:w="5"/><text x="40.8215%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="40.5715%" y="917" width="0.0882%" height="15" fill="rgb(239,176,25)" fg:x="2300" fg:w="5"/><text x="40.8215%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="40.5715%" y="901" width="0.0882%" height="15" fill="rgb(245,187,50)" fg:x="2300" fg:w="5"/><text x="40.8215%" y="911.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="40.5892%" y="885" width="0.0706%" height="15" fill="rgb(248,24,15)" fg:x="2301" fg:w="4"/><text x="40.8392%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (4 samples, 0.07%)</title><rect x="40.5892%" y="869" width="0.0706%" height="15" fill="rgb(205,166,13)" fg:x="2301" fg:w="4"/><text x="40.8392%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.6421%" y="853" width="0.0176%" height="15" fill="rgb(208,114,23)" fg:x="2304" fg:w="1"/><text x="40.8921%" y="863.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="40.6421%" y="837" width="0.0176%" height="15" fill="rgb(239,127,18)" fg:x="2304" fg:w="1"/><text x="40.8921%" y="847.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="40.6421%" y="821" width="0.0176%" height="15" fill="rgb(219,154,28)" fg:x="2304" fg:w="1"/><text x="40.8921%" y="831.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="40.6421%" y="805" width="0.0176%" height="15" fill="rgb(225,157,23)" fg:x="2304" fg:w="1"/><text x="40.8921%" y="815.50"></text></g><g><title>GetBlockWeight (30 samples, 0.53%)</title><rect x="40.2011%" y="1285" width="0.5292%" height="15" fill="rgb(219,8,6)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1295.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1269" width="0.5292%" height="15" fill="rgb(212,47,6)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (30 samples, 0.53%)</title><rect x="40.2011%" y="1253" width="0.5292%" height="15" fill="rgb(224,190,4)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1237" width="0.5292%" height="15" fill="rgb(239,183,29)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1221" width="0.5292%" height="15" fill="rgb(213,57,7)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1205" width="0.5292%" height="15" fill="rgb(216,148,1)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1189" width="0.5292%" height="15" fill="rgb(236,182,29)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1173" width="0.5292%" height="15" fill="rgb(244,120,48)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1157" width="0.5292%" height="15" fill="rgb(206,71,34)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1141" width="0.5292%" height="15" fill="rgb(242,32,6)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1151.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1125" width="0.5292%" height="15" fill="rgb(241,35,3)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1109" width="0.5292%" height="15" fill="rgb(222,62,19)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1093" width="0.5292%" height="15" fill="rgb(223,110,41)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1077" width="0.5292%" height="15" fill="rgb(208,224,4)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1061" width="0.5292%" height="15" fill="rgb(241,137,19)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1045" width="0.5292%" height="15" fill="rgb(244,24,17)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1029" width="0.5292%" height="15" fill="rgb(245,178,49)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="1013" width="0.5292%" height="15" fill="rgb(219,160,38)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (30 samples, 0.53%)</title><rect x="40.2011%" y="997" width="0.5292%" height="15" fill="rgb(228,137,14)" fg:x="2279" fg:w="30"/><text x="40.4511%" y="1007.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="40.6597%" y="981" width="0.0706%" height="15" fill="rgb(237,134,11)" fg:x="2305" fg:w="4"/><text x="40.9097%" y="991.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="40.6950%" y="965" width="0.0353%" height="15" fill="rgb(211,126,44)" fg:x="2307" fg:w="2"/><text x="40.9450%" y="975.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="40.6950%" y="949" width="0.0353%" height="15" fill="rgb(226,171,33)" fg:x="2307" fg:w="2"/><text x="40.9450%" y="959.50"></text></g><g><title>SizeComputer::write (2 samples, 0.04%)</title><rect x="40.6950%" y="933" width="0.0353%" height="15" fill="rgb(253,99,13)" fg:x="2307" fg:w="2"/><text x="40.9450%" y="943.50"></text></g><g><title>ContextualCheckBlock (33 samples, 0.58%)</title><rect x="40.1835%" y="1301" width="0.5821%" height="15" fill="rgb(244,48,7)" fg:x="2278" fg:w="33"/><text x="40.4335%" y="1311.50"></text></g><g><title>IsFinalTx (2 samples, 0.04%)</title><rect x="40.7303%" y="1285" width="0.0353%" height="15" fill="rgb(244,217,54)" fg:x="2309" fg:w="2"/><text x="40.9803%" y="1295.50"></text></g><g><title>FlatFileSeq::Allocate (1 samples, 0.02%)</title><rect x="40.7656%" y="1269" width="0.0176%" height="15" fill="rgb(224,15,18)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1279.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.02%)</title><rect x="40.7656%" y="1253" width="0.0176%" height="15" fill="rgb(244,99,12)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1263.50"></text></g><g><title>fseek (1 samples, 0.02%)</title><rect x="40.7656%" y="1237" width="0.0176%" height="15" fill="rgb(233,226,8)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1247.50"></text></g><g><title>_IO_file_seekoff@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="40.7656%" y="1221" width="0.0176%" height="15" fill="rgb(229,211,3)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1231.50"></text></g><g><title>_IO_doallocbuf (1 samples, 0.02%)</title><rect x="40.7656%" y="1205" width="0.0176%" height="15" fill="rgb(216,140,21)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1215.50"></text></g><g><title>_IO_file_doallocate (1 samples, 0.02%)</title><rect x="40.7656%" y="1189" width="0.0176%" height="15" fill="rgb(234,122,30)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1199.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="40.7656%" y="1173" width="0.0176%" height="15" fill="rgb(236,25,46)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1183.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="40.7656%" y="1157" width="0.0176%" height="15" fill="rgb(217,52,54)" fg:x="2311" fg:w="1"/><text x="41.0156%" y="1167.50"></text></g><g><title>[[ext4]] (12 samples, 0.21%)</title><rect x="40.8008%" y="1029" width="0.2117%" height="15" fill="rgb(222,29,26)" fg:x="2313" fg:w="12"/><text x="41.0508%" y="1039.50"></text></g><g><title>[[ext4]] (9 samples, 0.16%)</title><rect x="40.8538%" y="1013" width="0.1588%" height="15" fill="rgb(216,177,29)" fg:x="2316" fg:w="9"/><text x="41.1038%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="40.9243%" y="997" width="0.0882%" height="15" fill="rgb(247,136,51)" fg:x="2320" fg:w="5"/><text x="41.1743%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="40.9596%" y="981" width="0.0529%" height="15" fill="rgb(231,47,47)" fg:x="2322" fg:w="3"/><text x="41.2096%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="40.9772%" y="965" width="0.0353%" height="15" fill="rgb(211,192,36)" fg:x="2323" fg:w="2"/><text x="41.2272%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="40.9772%" y="949" width="0.0353%" height="15" fill="rgb(229,156,32)" fg:x="2323" fg:w="2"/><text x="41.2272%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="40.9772%" y="933" width="0.0353%" height="15" fill="rgb(248,213,20)" fg:x="2323" fg:w="2"/><text x="41.2272%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.9949%" y="917" width="0.0176%" height="15" fill="rgb(217,64,7)" fg:x="2324" fg:w="1"/><text x="41.2449%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.9949%" y="901" width="0.0176%" height="15" fill="rgb(232,142,8)" fg:x="2324" fg:w="1"/><text x="41.2449%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.9949%" y="885" width="0.0176%" height="15" fill="rgb(224,92,44)" fg:x="2324" fg:w="1"/><text x="41.2449%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.9949%" y="869" width="0.0176%" height="15" fill="rgb(214,169,17)" fg:x="2324" fg:w="1"/><text x="41.2449%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.9949%" y="853" width="0.0176%" height="15" fill="rgb(210,59,37)" fg:x="2324" fg:w="1"/><text x="41.2449%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.9949%" y="837" width="0.0176%" height="15" fill="rgb(214,116,48)" fg:x="2324" fg:w="1"/><text x="41.2449%" y="847.50"></text></g><g><title>FlatFileSeq::Flush (16 samples, 0.28%)</title><rect x="40.7832%" y="1253" width="0.2822%" height="15" fill="rgb(244,191,6)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1263.50"></text></g><g><title>FileCommit (16 samples, 0.28%)</title><rect x="40.7832%" y="1237" width="0.2822%" height="15" fill="rgb(241,50,52)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1247.50"></text></g><g><title>fdatasync (16 samples, 0.28%)</title><rect x="40.7832%" y="1221" width="0.2822%" height="15" fill="rgb(236,75,39)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1231.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="40.7832%" y="1205" width="0.2822%" height="15" fill="rgb(236,99,0)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1215.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="40.7832%" y="1189" width="0.2822%" height="15" fill="rgb(207,202,15)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1199.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="40.7832%" y="1173" width="0.2822%" height="15" fill="rgb(233,207,14)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1183.50"></text></g><g><title>[[ext4]] (16 samples, 0.28%)</title><rect x="40.7832%" y="1157" width="0.2822%" height="15" fill="rgb(226,27,51)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1167.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="40.7832%" y="1141" width="0.2822%" height="15" fill="rgb(206,104,42)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1151.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="40.7832%" y="1125" width="0.2822%" height="15" fill="rgb(212,225,4)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1135.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="40.7832%" y="1109" width="0.2822%" height="15" fill="rgb(233,96,42)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1119.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="40.7832%" y="1093" width="0.2822%" height="15" fill="rgb(229,21,32)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1103.50"></text></g><g><title>[[ext4]] (16 samples, 0.28%)</title><rect x="40.7832%" y="1077" width="0.2822%" height="15" fill="rgb(226,216,24)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1087.50"></text></g><g><title>[[ext4]] (16 samples, 0.28%)</title><rect x="40.7832%" y="1061" width="0.2822%" height="15" fill="rgb(221,163,17)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1071.50"></text></g><g><title>[[ext4]] (16 samples, 0.28%)</title><rect x="40.7832%" y="1045" width="0.2822%" height="15" fill="rgb(216,216,42)" fg:x="2312" fg:w="16"/><text x="41.0332%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0125%" y="1029" width="0.0529%" height="15" fill="rgb(240,118,7)" fg:x="2325" fg:w="3"/><text x="41.2625%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="1013" width="0.0176%" height="15" fill="rgb(221,67,37)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="997" width="0.0176%" height="15" fill="rgb(241,32,44)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="981" width="0.0176%" height="15" fill="rgb(235,204,43)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="965" width="0.0176%" height="15" fill="rgb(213,116,10)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="975.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="41.0478%" y="949" width="0.0176%" height="15" fill="rgb(239,15,48)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="959.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="41.0478%" y="933" width="0.0176%" height="15" fill="rgb(207,123,36)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="917" width="0.0176%" height="15" fill="rgb(209,103,30)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="901" width="0.0176%" height="15" fill="rgb(238,100,19)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="885" width="0.0176%" height="15" fill="rgb(244,30,14)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="869" width="0.0176%" height="15" fill="rgb(249,174,6)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="853" width="0.0176%" height="15" fill="rgb(235,213,41)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.0478%" y="837" width="0.0176%" height="15" fill="rgb(213,118,6)" fg:x="2327" fg:w="1"/><text x="41.2978%" y="847.50"></text></g><g><title>node::BlockManager::FindNextBlockPos (20 samples, 0.35%)</title><rect x="40.7656%" y="1285" width="0.3528%" height="15" fill="rgb(235,44,51)" fg:x="2311" fg:w="20"/><text x="41.0156%" y="1295.50"></text></g><g><title>node::BlockManager::FlushBlockFile (19 samples, 0.34%)</title><rect x="40.7832%" y="1269" width="0.3352%" height="15" fill="rgb(217,9,53)" fg:x="2312" fg:w="19"/><text x="41.0332%" y="1279.50"></text></g><g><title>node::BlockManager::FlushUndoFile (3 samples, 0.05%)</title><rect x="41.0654%" y="1253" width="0.0529%" height="15" fill="rgb(237,172,34)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1263.50"></text></g><g><title>FlatFileSeq::Flush (3 samples, 0.05%)</title><rect x="41.0654%" y="1237" width="0.0529%" height="15" fill="rgb(206,206,11)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1247.50"></text></g><g><title>FileCommit (3 samples, 0.05%)</title><rect x="41.0654%" y="1221" width="0.0529%" height="15" fill="rgb(214,149,29)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1231.50"></text></g><g><title>fdatasync (3 samples, 0.05%)</title><rect x="41.0654%" y="1205" width="0.0529%" height="15" fill="rgb(208,123,3)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="1189" width="0.0529%" height="15" fill="rgb(229,126,4)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="1173" width="0.0529%" height="15" fill="rgb(222,92,36)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="1157" width="0.0529%" height="15" fill="rgb(216,39,41)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1167.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="41.0654%" y="1141" width="0.0529%" height="15" fill="rgb(253,127,28)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="1125" width="0.0529%" height="15" fill="rgb(249,152,51)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="1109" width="0.0529%" height="15" fill="rgb(209,123,42)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="1093" width="0.0529%" height="15" fill="rgb(241,118,22)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="1077" width="0.0529%" height="15" fill="rgb(208,25,7)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1087.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="41.0654%" y="1061" width="0.0529%" height="15" fill="rgb(243,144,39)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1071.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="41.0654%" y="1045" width="0.0529%" height="15" fill="rgb(250,50,5)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1055.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="41.0654%" y="1029" width="0.0529%" height="15" fill="rgb(207,67,11)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1039.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="41.0654%" y="1013" width="0.0529%" height="15" fill="rgb(245,204,40)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1023.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="41.0654%" y="997" width="0.0529%" height="15" fill="rgb(238,228,24)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="981" width="0.0529%" height="15" fill="rgb(217,116,22)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.0654%" y="965" width="0.0529%" height="15" fill="rgb(234,98,12)" fg:x="2328" fg:w="3"/><text x="41.3154%" y="975.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="41.1184%" y="1125" width="0.0706%" height="15" fill="rgb(242,170,50)" fg:x="2331" fg:w="4"/><text x="41.3684%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="41.1184%" y="1109" width="0.0706%" height="15" fill="rgb(235,7,5)" fg:x="2331" fg:w="4"/><text x="41.3684%" y="1119.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="41.1184%" y="1093" width="0.0706%" height="15" fill="rgb(241,114,28)" fg:x="2331" fg:w="4"/><text x="41.3684%" y="1103.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (4 samples, 0.07%)</title><rect x="41.1184%" y="1077" width="0.0706%" height="15" fill="rgb(246,112,42)" fg:x="2331" fg:w="4"/><text x="41.3684%" y="1087.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (4 samples, 0.07%)</title><rect x="41.1184%" y="1061" width="0.0706%" height="15" fill="rgb(248,228,14)" fg:x="2331" fg:w="4"/><text x="41.3684%" y="1071.50"></text></g><g><title>AutoFile::write (7 samples, 0.12%)</title><rect x="41.1184%" y="1141" width="0.1235%" height="15" fill="rgb(208,133,18)" fg:x="2331" fg:w="7"/><text x="41.3684%" y="1151.50"></text></g><g><title>util::Xor (3 samples, 0.05%)</title><rect x="41.1889%" y="1125" width="0.0529%" height="15" fill="rgb(207,35,49)" fg:x="2335" fg:w="3"/><text x="41.4389%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2418%" y="789" width="0.0176%" height="15" fill="rgb(205,68,36)" fg:x="2338" fg:w="1"/><text x="41.4918%" y="799.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="41.2418%" y="773" width="0.0176%" height="15" fill="rgb(245,62,40)" fg:x="2338" fg:w="1"/><text x="41.4918%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="41.2418%" y="757" width="0.0176%" height="15" fill="rgb(228,27,24)" fg:x="2338" fg:w="1"/><text x="41.4918%" y="767.50"></text></g><g><title>AutoFile::write (1 samples, 0.02%)</title><rect x="41.2418%" y="741" width="0.0176%" height="15" fill="rgb(253,19,12)" fg:x="2338" fg:w="1"/><text x="41.4918%" y="751.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="41.2418%" y="725" width="0.0176%" height="15" fill="rgb(232,28,20)" fg:x="2338" fg:w="1"/><text x="41.4918%" y="735.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="41.2948%" y="437" width="0.0176%" height="15" fill="rgb(218,35,51)" fg:x="2341" fg:w="1"/><text x="41.5448%" y="447.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="41.2595%" y="629" width="0.0706%" height="15" fill="rgb(212,90,40)" fg:x="2339" fg:w="4"/><text x="41.5095%" y="639.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="41.2948%" y="613" width="0.0353%" height="15" fill="rgb(220,172,12)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="623.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="41.2948%" y="597" width="0.0353%" height="15" fill="rgb(226,159,20)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="607.50"></text></g><g><title>new_do_write (2 samples, 0.04%)</title><rect x="41.2948%" y="581" width="0.0353%" height="15" fill="rgb(234,205,16)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="591.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="41.2948%" y="565" width="0.0353%" height="15" fill="rgb(207,9,39)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="575.50"></text></g><g><title>__GI___libc_write (2 samples, 0.04%)</title><rect x="41.2948%" y="549" width="0.0353%" height="15" fill="rgb(249,143,15)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.2948%" y="533" width="0.0353%" height="15" fill="rgb(253,133,29)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.2948%" y="517" width="0.0353%" height="15" fill="rgb(221,187,0)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.2948%" y="501" width="0.0353%" height="15" fill="rgb(205,204,26)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.2948%" y="485" width="0.0353%" height="15" fill="rgb(224,68,54)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="495.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="41.2948%" y="469" width="0.0353%" height="15" fill="rgb(209,67,4)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.2948%" y="453" width="0.0353%" height="15" fill="rgb(228,229,18)" fg:x="2341" fg:w="2"/><text x="41.5448%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.3124%" y="437" width="0.0176%" height="15" fill="rgb(231,89,13)" fg:x="2342" fg:w="1"/><text x="41.5624%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.3124%" y="421" width="0.0176%" height="15" fill="rgb(210,182,18)" fg:x="2342" fg:w="1"/><text x="41.5624%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.3124%" y="405" width="0.0176%" height="15" fill="rgb(240,105,2)" fg:x="2342" fg:w="1"/><text x="41.5624%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.3124%" y="389" width="0.0176%" height="15" fill="rgb(207,170,50)" fg:x="2342" fg:w="1"/><text x="41.5624%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.3124%" y="373" width="0.0176%" height="15" fill="rgb(232,133,24)" fg:x="2342" fg:w="1"/><text x="41.5624%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.3124%" y="357" width="0.0176%" height="15" fill="rgb(235,166,27)" fg:x="2342" fg:w="1"/><text x="41.5624%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.3124%" y="341" width="0.0176%" height="15" fill="rgb(209,19,13)" fg:x="2342" fg:w="1"/><text x="41.5624%" y="351.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="41.2595%" y="693" width="0.0882%" height="15" fill="rgb(226,79,39)" fg:x="2339" fg:w="5"/><text x="41.5095%" y="703.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="41.2595%" y="677" width="0.0882%" height="15" fill="rgb(222,163,10)" fg:x="2339" fg:w="5"/><text x="41.5095%" y="687.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (5 samples, 0.09%)</title><rect x="41.2595%" y="661" width="0.0882%" height="15" fill="rgb(214,44,19)" fg:x="2339" fg:w="5"/><text x="41.5095%" y="671.50"></text></g><g><title>AutoFile::write (5 samples, 0.09%)</title><rect x="41.2595%" y="645" width="0.0882%" height="15" fill="rgb(210,217,13)" fg:x="2339" fg:w="5"/><text x="41.5095%" y="655.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="41.3300%" y="629" width="0.0176%" height="15" fill="rgb(237,61,54)" fg:x="2343" fg:w="1"/><text x="41.5800%" y="639.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="41.3300%" y="613" width="0.0176%" height="15" fill="rgb(226,184,24)" fg:x="2343" fg:w="1"/><text x="41.5800%" y="623.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="41.3300%" y="597" width="0.0176%" height="15" fill="rgb(223,226,4)" fg:x="2343" fg:w="1"/><text x="41.5800%" y="607.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="41.3830%" y="357" width="0.0176%" height="15" fill="rgb(210,26,41)" fg:x="2346" fg:w="1"/><text x="41.6330%" y="367.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="41.3830%" y="373" width="0.0706%" height="15" fill="rgb(220,221,6)" fg:x="2346" fg:w="4"/><text x="41.6330%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.4006%" y="357" width="0.0529%" height="15" fill="rgb(225,89,49)" fg:x="2347" fg:w="3"/><text x="41.6506%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.4182%" y="341" width="0.0353%" height="15" fill="rgb(218,70,45)" fg:x="2348" fg:w="2"/><text x="41.6682%" y="351.50"></text></g><g><title>[[ext4]] (9 samples, 0.16%)</title><rect x="41.3830%" y="389" width="0.1588%" height="15" fill="rgb(238,166,21)" fg:x="2346" fg:w="9"/><text x="41.6330%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="41.4535%" y="373" width="0.0882%" height="15" fill="rgb(224,141,44)" fg:x="2350" fg:w="5"/><text x="41.7035%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="41.4535%" y="357" width="0.0882%" height="15" fill="rgb(230,12,49)" fg:x="2350" fg:w="5"/><text x="41.7035%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.4888%" y="341" width="0.0529%" height="15" fill="rgb(212,174,12)" fg:x="2352" fg:w="3"/><text x="41.7388%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.4888%" y="325" width="0.0529%" height="15" fill="rgb(246,67,9)" fg:x="2352" fg:w="3"/><text x="41.7388%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.5064%" y="309" width="0.0353%" height="15" fill="rgb(239,35,23)" fg:x="2353" fg:w="2"/><text x="41.7564%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.5241%" y="293" width="0.0176%" height="15" fill="rgb(211,167,0)" fg:x="2354" fg:w="1"/><text x="41.7741%" y="303.50"></text></g><g><title>_IO_fwrite (12 samples, 0.21%)</title><rect x="41.3653%" y="581" width="0.2117%" height="15" fill="rgb(225,119,45)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="591.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (12 samples, 0.21%)</title><rect x="41.3653%" y="565" width="0.2117%" height="15" fill="rgb(210,162,6)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="575.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (12 samples, 0.21%)</title><rect x="41.3653%" y="549" width="0.2117%" height="15" fill="rgb(208,118,35)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="559.50"></text></g><g><title>new_do_write (12 samples, 0.21%)</title><rect x="41.3653%" y="533" width="0.2117%" height="15" fill="rgb(239,4,53)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="543.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (12 samples, 0.21%)</title><rect x="41.3653%" y="517" width="0.2117%" height="15" fill="rgb(213,130,21)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="527.50"></text></g><g><title>__GI___libc_write (12 samples, 0.21%)</title><rect x="41.3653%" y="501" width="0.2117%" height="15" fill="rgb(235,148,0)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="511.50"></text></g><g><title>[unknown] (12 samples, 0.21%)</title><rect x="41.3653%" y="485" width="0.2117%" height="15" fill="rgb(244,224,18)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="495.50"></text></g><g><title>[unknown] (12 samples, 0.21%)</title><rect x="41.3653%" y="469" width="0.2117%" height="15" fill="rgb(211,214,4)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="479.50"></text></g><g><title>[unknown] (12 samples, 0.21%)</title><rect x="41.3653%" y="453" width="0.2117%" height="15" fill="rgb(206,119,25)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="463.50"></text></g><g><title>[unknown] (12 samples, 0.21%)</title><rect x="41.3653%" y="437" width="0.2117%" height="15" fill="rgb(243,93,47)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="447.50"></text></g><g><title>[[ext4]] (12 samples, 0.21%)</title><rect x="41.3653%" y="421" width="0.2117%" height="15" fill="rgb(224,194,6)" fg:x="2345" fg:w="12"/><text x="41.6153%" y="431.50"></text></g><g><title>[unknown] (11 samples, 0.19%)</title><rect x="41.3830%" y="405" width="0.1940%" height="15" fill="rgb(243,229,6)" fg:x="2346" fg:w="11"/><text x="41.6330%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.5417%" y="389" width="0.0353%" height="15" fill="rgb(207,23,50)" fg:x="2355" fg:w="2"/><text x="41.7917%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.5417%" y="373" width="0.0353%" height="15" fill="rgb(253,192,32)" fg:x="2355" fg:w="2"/><text x="41.7917%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint&gt; (25 samples, 0.44%)</title><rect x="41.2595%" y="789" width="0.4410%" height="15" fill="rgb(213,21,6)" fg:x="2339" fg:w="25"/><text x="41.5095%" y="799.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.44%)</title><rect x="41.2595%" y="773" width="0.4410%" height="15" fill="rgb(243,151,13)" fg:x="2339" fg:w="25"/><text x="41.5095%" y="783.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.44%)</title><rect x="41.2595%" y="757" width="0.4410%" height="15" fill="rgb(233,165,41)" fg:x="2339" fg:w="25"/><text x="41.5095%" y="767.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (25 samples, 0.44%)</title><rect x="41.2595%" y="741" width="0.4410%" height="15" fill="rgb(246,176,45)" fg:x="2339" fg:w="25"/><text x="41.5095%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (25 samples, 0.44%)</title><rect x="41.2595%" y="725" width="0.4410%" height="15" fill="rgb(217,170,52)" fg:x="2339" fg:w="25"/><text x="41.5095%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (25 samples, 0.44%)</title><rect x="41.2595%" y="709" width="0.4410%" height="15" fill="rgb(214,203,54)" fg:x="2339" fg:w="25"/><text x="41.5095%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (20 samples, 0.35%)</title><rect x="41.3477%" y="693" width="0.3528%" height="15" fill="rgb(248,215,49)" fg:x="2344" fg:w="20"/><text x="41.5977%" y="703.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.35%)</title><rect x="41.3477%" y="677" width="0.3528%" height="15" fill="rgb(208,46,10)" fg:x="2344" fg:w="20"/><text x="41.5977%" y="687.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (20 samples, 0.35%)</title><rect x="41.3477%" y="661" width="0.3528%" height="15" fill="rgb(254,5,31)" fg:x="2344" fg:w="20"/><text x="41.5977%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (20 samples, 0.35%)</title><rect x="41.3477%" y="645" width="0.3528%" height="15" fill="rgb(222,104,33)" fg:x="2344" fg:w="20"/><text x="41.5977%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char const&gt; (20 samples, 0.35%)</title><rect x="41.3477%" y="629" width="0.3528%" height="15" fill="rgb(248,49,16)" fg:x="2344" fg:w="20"/><text x="41.5977%" y="639.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (20 samples, 0.35%)</title><rect x="41.3477%" y="613" width="0.3528%" height="15" fill="rgb(232,198,41)" fg:x="2344" fg:w="20"/><text x="41.5977%" y="623.50"></text></g><g><title>AutoFile::write (20 samples, 0.35%)</title><rect x="41.3477%" y="597" width="0.3528%" height="15" fill="rgb(214,125,3)" fg:x="2344" fg:w="20"/><text x="41.5977%" y="607.50"></text></g><g><title>util::Xor (7 samples, 0.12%)</title><rect x="41.5770%" y="581" width="0.1235%" height="15" fill="rgb(229,220,28)" fg:x="2357" fg:w="7"/><text x="41.8270%" y="591.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="41.7181%" y="453" width="0.0353%" height="15" fill="rgb(222,64,37)" fg:x="2365" fg:w="2"/><text x="41.9681%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.7181%" y="437" width="0.0353%" height="15" fill="rgb(249,184,13)" fg:x="2365" fg:w="2"/><text x="41.9681%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.7181%" y="421" width="0.0353%" height="15" fill="rgb(252,176,6)" fg:x="2365" fg:w="2"/><text x="41.9681%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.7181%" y="405" width="0.0353%" height="15" fill="rgb(228,153,7)" fg:x="2365" fg:w="2"/><text x="41.9681%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="41.7181%" y="389" width="0.0353%" height="15" fill="rgb(242,193,5)" fg:x="2365" fg:w="2"/><text x="41.9681%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.7358%" y="373" width="0.0176%" height="15" fill="rgb(232,140,9)" fg:x="2366" fg:w="1"/><text x="41.9858%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.7358%" y="357" width="0.0176%" height="15" fill="rgb(213,222,16)" fg:x="2366" fg:w="1"/><text x="41.9858%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.7358%" y="341" width="0.0176%" height="15" fill="rgb(222,75,50)" fg:x="2366" fg:w="1"/><text x="41.9858%" y="351.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="41.7005%" y="645" width="0.0706%" height="15" fill="rgb(205,180,2)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="41.7005%" y="629" width="0.0706%" height="15" fill="rgb(216,34,7)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="41.7005%" y="613" width="0.0706%" height="15" fill="rgb(253,16,32)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="623.50"></text></g><g><title>new_do_write (4 samples, 0.07%)</title><rect x="41.7005%" y="597" width="0.0706%" height="15" fill="rgb(208,97,28)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="41.7005%" y="581" width="0.0706%" height="15" fill="rgb(225,92,11)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="591.50"></text></g><g><title>__GI___libc_write (4 samples, 0.07%)</title><rect x="41.7005%" y="565" width="0.0706%" height="15" fill="rgb(243,38,12)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="41.7005%" y="549" width="0.0706%" height="15" fill="rgb(208,139,16)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="41.7005%" y="533" width="0.0706%" height="15" fill="rgb(227,24,9)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="41.7005%" y="517" width="0.0706%" height="15" fill="rgb(206,62,11)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="41.7005%" y="501" width="0.0706%" height="15" fill="rgb(228,134,27)" fg:x="2364" fg:w="4"/><text x="41.9505%" y="511.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="41.7181%" y="485" width="0.0529%" height="15" fill="rgb(205,55,33)" fg:x="2365" fg:w="3"/><text x="41.9681%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="41.7181%" y="469" width="0.0529%" height="15" fill="rgb(243,75,43)" fg:x="2365" fg:w="3"/><text x="41.9681%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.7534%" y="453" width="0.0176%" height="15" fill="rgb(223,27,42)" fg:x="2367" fg:w="1"/><text x="42.0034%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.7534%" y="437" width="0.0176%" height="15" fill="rgb(232,189,33)" fg:x="2367" fg:w="1"/><text x="42.0034%" y="447.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (2 samples, 0.04%)</title><rect x="41.7710%" y="645" width="0.0353%" height="15" fill="rgb(210,9,39)" fg:x="2368" fg:w="2"/><text x="42.0210%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (2 samples, 0.04%)</title><rect x="41.7710%" y="629" width="0.0353%" height="15" fill="rgb(242,85,26)" fg:x="2368" fg:w="2"/><text x="42.0210%" y="639.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (2 samples, 0.04%)</title><rect x="41.7710%" y="613" width="0.0353%" height="15" fill="rgb(248,44,4)" fg:x="2368" fg:w="2"/><text x="42.0210%" y="623.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (2 samples, 0.04%)</title><rect x="41.7710%" y="597" width="0.0353%" height="15" fill="rgb(250,96,46)" fg:x="2368" fg:w="2"/><text x="42.0210%" y="607.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (2 samples, 0.04%)</title><rect x="41.7710%" y="581" width="0.0353%" height="15" fill="rgb(229,116,26)" fg:x="2368" fg:w="2"/><text x="42.0210%" y="591.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (7 samples, 0.12%)</title><rect x="41.7005%" y="677" width="0.1235%" height="15" fill="rgb(246,94,34)" fg:x="2364" fg:w="7"/><text x="41.9505%" y="687.50"></text></g><g><title>AutoFile::write (7 samples, 0.12%)</title><rect x="41.7005%" y="661" width="0.1235%" height="15" fill="rgb(251,73,21)" fg:x="2364" fg:w="7"/><text x="41.9505%" y="671.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="41.8063%" y="645" width="0.0176%" height="15" fill="rgb(254,121,25)" fg:x="2370" fg:w="1"/><text x="42.0563%" y="655.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="41.8063%" y="629" width="0.0176%" height="15" fill="rgb(215,161,49)" fg:x="2370" fg:w="1"/><text x="42.0563%" y="639.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="41.8063%" y="613" width="0.0176%" height="15" fill="rgb(221,43,13)" fg:x="2370" fg:w="1"/><text x="42.0563%" y="623.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="41.8240%" y="613" width="0.0706%" height="15" fill="rgb(249,5,37)" fg:x="2371" fg:w="4"/><text x="42.0740%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (38 samples, 0.67%)</title><rect x="41.2418%" y="901" width="0.6703%" height="15" fill="rgb(226,25,44)" fg:x="2338" fg:w="38"/><text x="41.4918%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn&gt; (38 samples, 0.67%)</title><rect x="41.2418%" y="885" width="0.6703%" height="15" fill="rgb(238,189,16)" fg:x="2338" fg:w="38"/><text x="41.4918%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.67%)</title><rect x="41.2418%" y="869" width="0.6703%" height="15" fill="rgb(251,186,8)" fg:x="2338" fg:w="38"/><text x="41.4918%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (38 samples, 0.67%)</title><rect x="41.2418%" y="853" width="0.6703%" height="15" fill="rgb(254,34,31)" fg:x="2338" fg:w="38"/><text x="41.4918%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (38 samples, 0.67%)</title><rect x="41.2418%" y="837" width="0.6703%" height="15" fill="rgb(225,215,27)" fg:x="2338" fg:w="38"/><text x="41.4918%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (38 samples, 0.67%)</title><rect x="41.2418%" y="821" width="0.6703%" height="15" fill="rgb(221,192,48)" fg:x="2338" fg:w="38"/><text x="41.4918%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (38 samples, 0.67%)</title><rect x="41.2418%" y="805" width="0.6703%" height="15" fill="rgb(219,137,20)" fg:x="2338" fg:w="38"/><text x="41.4918%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (12 samples, 0.21%)</title><rect x="41.7005%" y="789" width="0.2117%" height="15" fill="rgb(219,84,11)" fg:x="2364" fg:w="12"/><text x="41.9505%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.21%)</title><rect x="41.7005%" y="773" width="0.2117%" height="15" fill="rgb(224,10,23)" fg:x="2364" fg:w="12"/><text x="41.9505%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.21%)</title><rect x="41.7005%" y="757" width="0.2117%" height="15" fill="rgb(248,22,39)" fg:x="2364" fg:w="12"/><text x="41.9505%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (12 samples, 0.21%)</title><rect x="41.7005%" y="741" width="0.2117%" height="15" fill="rgb(212,154,20)" fg:x="2364" fg:w="12"/><text x="41.9505%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.21%)</title><rect x="41.7005%" y="725" width="0.2117%" height="15" fill="rgb(236,199,50)" fg:x="2364" fg:w="12"/><text x="41.9505%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (12 samples, 0.21%)</title><rect x="41.7005%" y="709" width="0.2117%" height="15" fill="rgb(211,9,17)" fg:x="2364" fg:w="12"/><text x="41.9505%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (12 samples, 0.21%)</title><rect x="41.7005%" y="693" width="0.2117%" height="15" fill="rgb(243,216,36)" fg:x="2364" fg:w="12"/><text x="41.9505%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="41.8240%" y="677" width="0.0882%" height="15" fill="rgb(250,2,10)" fg:x="2371" fg:w="5"/><text x="42.0740%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="41.8240%" y="661" width="0.0882%" height="15" fill="rgb(226,50,48)" fg:x="2371" fg:w="5"/><text x="42.0740%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (5 samples, 0.09%)</title><rect x="41.8240%" y="645" width="0.0882%" height="15" fill="rgb(243,81,16)" fg:x="2371" fg:w="5"/><text x="42.0740%" y="655.50"></text></g><g><title>AutoFile::write (5 samples, 0.09%)</title><rect x="41.8240%" y="629" width="0.0882%" height="15" fill="rgb(250,14,2)" fg:x="2371" fg:w="5"/><text x="42.0740%" y="639.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="41.8945%" y="613" width="0.0176%" height="15" fill="rgb(233,135,29)" fg:x="2375" fg:w="1"/><text x="42.1445%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (40 samples, 0.71%)</title><rect x="41.2418%" y="981" width="0.7056%" height="15" fill="rgb(224,64,43)" fg:x="2338" fg:w="40"/><text x="41.4918%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (40 samples, 0.71%)</title><rect x="41.2418%" y="965" width="0.7056%" height="15" fill="rgb(238,84,13)" fg:x="2338" fg:w="40"/><text x="41.4918%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (40 samples, 0.71%)</title><rect x="41.2418%" y="949" width="0.7056%" height="15" fill="rgb(253,48,26)" fg:x="2338" fg:w="40"/><text x="41.4918%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (40 samples, 0.71%)</title><rect x="41.2418%" y="933" width="0.7056%" height="15" fill="rgb(205,223,31)" fg:x="2338" fg:w="40"/><text x="41.4918%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (40 samples, 0.71%)</title><rect x="41.2418%" y="917" width="0.7056%" height="15" fill="rgb(221,41,32)" fg:x="2338" fg:w="40"/><text x="41.4918%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="41.9122%" y="901" width="0.0353%" height="15" fill="rgb(213,158,31)" fg:x="2376" fg:w="2"/><text x="42.1622%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="41.9122%" y="885" width="0.0353%" height="15" fill="rgb(245,126,43)" fg:x="2376" fg:w="2"/><text x="42.1622%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="41.9122%" y="869" width="0.0353%" height="15" fill="rgb(227,7,22)" fg:x="2376" fg:w="2"/><text x="42.1622%" y="879.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="41.9122%" y="853" width="0.0353%" height="15" fill="rgb(252,90,44)" fg:x="2376" fg:w="2"/><text x="42.1622%" y="863.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="41.9122%" y="837" width="0.0353%" height="15" fill="rgb(253,91,0)" fg:x="2376" fg:w="2"/><text x="42.1622%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="789" width="0.0176%" height="15" fill="rgb(252,175,49)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="773" width="0.0176%" height="15" fill="rgb(246,150,1)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="757" width="0.0176%" height="15" fill="rgb(241,192,25)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="741" width="0.0176%" height="15" fill="rgb(239,187,11)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="725" width="0.0176%" height="15" fill="rgb(218,202,51)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="709" width="0.0176%" height="15" fill="rgb(225,176,8)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="693" width="0.0176%" height="15" fill="rgb(219,122,41)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="677" width="0.0176%" height="15" fill="rgb(248,140,20)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="661" width="0.0176%" height="15" fill="rgb(245,41,37)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="645" width="0.0176%" height="15" fill="rgb(235,82,39)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="41.9474%" y="629" width="0.0176%" height="15" fill="rgb(230,108,42)" fg:x="2378" fg:w="1"/><text x="42.1974%" y="639.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="42.0004%" y="517" width="0.0176%" height="15" fill="rgb(215,150,50)" fg:x="2381" fg:w="1"/><text x="42.2504%" y="527.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="42.0004%" y="501" width="0.0176%" height="15" fill="rgb(233,212,5)" fg:x="2381" fg:w="1"/><text x="42.2504%" y="511.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="42.0004%" y="485" width="0.0176%" height="15" fill="rgb(245,80,22)" fg:x="2381" fg:w="1"/><text x="42.2504%" y="495.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="42.0004%" y="693" width="0.0353%" height="15" fill="rgb(238,129,16)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="703.50"></text></g><g><title>new_do_write (2 samples, 0.04%)</title><rect x="42.0004%" y="677" width="0.0353%" height="15" fill="rgb(240,19,0)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="687.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="42.0004%" y="661" width="0.0353%" height="15" fill="rgb(232,42,35)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="671.50"></text></g><g><title>__GI___libc_write (2 samples, 0.04%)</title><rect x="42.0004%" y="645" width="0.0353%" height="15" fill="rgb(223,130,24)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.0004%" y="629" width="0.0353%" height="15" fill="rgb(237,16,22)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.0004%" y="613" width="0.0353%" height="15" fill="rgb(248,192,20)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.0004%" y="597" width="0.0353%" height="15" fill="rgb(233,167,2)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.0004%" y="581" width="0.0353%" height="15" fill="rgb(252,71,44)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="591.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="42.0004%" y="565" width="0.0353%" height="15" fill="rgb(238,37,47)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.0004%" y="549" width="0.0353%" height="15" fill="rgb(214,202,54)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="559.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="42.0004%" y="533" width="0.0353%" height="15" fill="rgb(254,165,40)" fg:x="2381" fg:w="2"/><text x="42.2504%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0180%" y="517" width="0.0176%" height="15" fill="rgb(246,173,38)" fg:x="2382" fg:w="1"/><text x="42.2680%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0180%" y="501" width="0.0176%" height="15" fill="rgb(215,3,27)" fg:x="2382" fg:w="1"/><text x="42.2680%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0180%" y="485" width="0.0176%" height="15" fill="rgb(239,169,51)" fg:x="2382" fg:w="1"/><text x="42.2680%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0180%" y="469" width="0.0176%" height="15" fill="rgb(212,5,25)" fg:x="2382" fg:w="1"/><text x="42.2680%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.0180%" y="453" width="0.0176%" height="15" fill="rgb(243,45,17)" fg:x="2382" fg:w="1"/><text x="42.2680%" y="463.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="41.9827%" y="725" width="0.0706%" height="15" fill="rgb(242,97,9)" fg:x="2380" fg:w="4"/><text x="42.2327%" y="735.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="42.0004%" y="709" width="0.0529%" height="15" fill="rgb(228,71,31)" fg:x="2381" fg:w="3"/><text x="42.2504%" y="719.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="42.0356%" y="693" width="0.0176%" height="15" fill="rgb(252,184,16)" fg:x="2383" fg:w="1"/><text x="42.2856%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="41.9651%" y="789" width="0.1058%" height="15" fill="rgb(236,169,46)" fg:x="2379" fg:w="6"/><text x="42.2151%" y="799.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="41.9651%" y="773" width="0.1058%" height="15" fill="rgb(207,17,47)" fg:x="2379" fg:w="6"/><text x="42.2151%" y="783.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (6 samples, 0.11%)</title><rect x="41.9651%" y="757" width="0.1058%" height="15" fill="rgb(206,201,28)" fg:x="2379" fg:w="6"/><text x="42.2151%" y="767.50"></text></g><g><title>AutoFile::write (6 samples, 0.11%)</title><rect x="41.9651%" y="741" width="0.1058%" height="15" fill="rgb(224,184,23)" fg:x="2379" fg:w="6"/><text x="42.2151%" y="751.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="42.0533%" y="725" width="0.0176%" height="15" fill="rgb(208,139,48)" fg:x="2384" fg:w="1"/><text x="42.3033%" y="735.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="42.0533%" y="709" width="0.0176%" height="15" fill="rgb(208,130,10)" fg:x="2384" fg:w="1"/><text x="42.3033%" y="719.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="42.0533%" y="693" width="0.0176%" height="15" fill="rgb(211,213,45)" fg:x="2384" fg:w="1"/><text x="42.3033%" y="703.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="42.0533%" y="677" width="0.0176%" height="15" fill="rgb(235,100,30)" fg:x="2384" fg:w="1"/><text x="42.3033%" y="687.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="42.0533%" y="661" width="0.0176%" height="15" fill="rgb(206,144,31)" fg:x="2384" fg:w="1"/><text x="42.3033%" y="671.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="42.1944%" y="437" width="0.0176%" height="15" fill="rgb(224,200,26)" fg:x="2392" fg:w="1"/><text x="42.4444%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.1944%" y="421" width="0.0176%" height="15" fill="rgb(247,104,53)" fg:x="2392" fg:w="1"/><text x="42.4444%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.1944%" y="405" width="0.0176%" height="15" fill="rgb(220,14,17)" fg:x="2392" fg:w="1"/><text x="42.4444%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.1944%" y="389" width="0.0176%" height="15" fill="rgb(230,140,40)" fg:x="2392" fg:w="1"/><text x="42.4444%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.1944%" y="373" width="0.0176%" height="15" fill="rgb(229,2,41)" fg:x="2392" fg:w="1"/><text x="42.4444%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.1944%" y="357" width="0.0176%" height="15" fill="rgb(232,89,16)" fg:x="2392" fg:w="1"/><text x="42.4444%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.1944%" y="341" width="0.0176%" height="15" fill="rgb(247,59,52)" fg:x="2392" fg:w="1"/><text x="42.4444%" y="351.50"></text></g><g><title>[[ext4]] (12 samples, 0.21%)</title><rect x="42.1591%" y="453" width="0.2117%" height="15" fill="rgb(226,110,21)" fg:x="2390" fg:w="12"/><text x="42.4091%" y="463.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="42.2120%" y="437" width="0.1588%" height="15" fill="rgb(224,176,43)" fg:x="2393" fg:w="9"/><text x="42.4620%" y="447.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="42.2120%" y="421" width="0.1588%" height="15" fill="rgb(221,73,6)" fg:x="2393" fg:w="9"/><text x="42.4620%" y="431.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="42.2297%" y="405" width="0.1411%" height="15" fill="rgb(232,78,19)" fg:x="2394" fg:w="8"/><text x="42.4797%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="42.2473%" y="389" width="0.1235%" height="15" fill="rgb(233,112,48)" fg:x="2395" fg:w="7"/><text x="42.4973%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="42.2826%" y="373" width="0.0882%" height="15" fill="rgb(243,131,47)" fg:x="2397" fg:w="5"/><text x="42.5326%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.3355%" y="357" width="0.0353%" height="15" fill="rgb(226,51,1)" fg:x="2400" fg:w="2"/><text x="42.5855%" y="367.50"></text></g><g><title>_IO_fwrite (19 samples, 0.34%)</title><rect x="42.0886%" y="645" width="0.3352%" height="15" fill="rgb(247,58,7)" fg:x="2386" fg:w="19"/><text x="42.3386%" y="655.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (18 samples, 0.32%)</title><rect x="42.1062%" y="629" width="0.3175%" height="15" fill="rgb(209,7,32)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="639.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (18 samples, 0.32%)</title><rect x="42.1062%" y="613" width="0.3175%" height="15" fill="rgb(209,39,41)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="623.50"></text></g><g><title>new_do_write (18 samples, 0.32%)</title><rect x="42.1062%" y="597" width="0.3175%" height="15" fill="rgb(226,182,46)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="607.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (18 samples, 0.32%)</title><rect x="42.1062%" y="581" width="0.3175%" height="15" fill="rgb(230,219,10)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="591.50"></text></g><g><title>__GI___libc_write (18 samples, 0.32%)</title><rect x="42.1062%" y="565" width="0.3175%" height="15" fill="rgb(227,175,30)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="575.50"></text></g><g><title>[unknown] (18 samples, 0.32%)</title><rect x="42.1062%" y="549" width="0.3175%" height="15" fill="rgb(217,2,50)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="559.50"></text></g><g><title>[unknown] (18 samples, 0.32%)</title><rect x="42.1062%" y="533" width="0.3175%" height="15" fill="rgb(229,160,0)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="543.50"></text></g><g><title>[unknown] (18 samples, 0.32%)</title><rect x="42.1062%" y="517" width="0.3175%" height="15" fill="rgb(207,78,37)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="527.50"></text></g><g><title>[unknown] (18 samples, 0.32%)</title><rect x="42.1062%" y="501" width="0.3175%" height="15" fill="rgb(225,57,0)" fg:x="2387" fg:w="18"/><text x="42.3562%" y="511.50"></text></g><g><title>[[ext4]] (17 samples, 0.30%)</title><rect x="42.1238%" y="485" width="0.2999%" height="15" fill="rgb(232,154,2)" fg:x="2388" fg:w="17"/><text x="42.3738%" y="495.50"></text></g><g><title>[unknown] (17 samples, 0.30%)</title><rect x="42.1238%" y="469" width="0.2999%" height="15" fill="rgb(241,212,25)" fg:x="2388" fg:w="17"/><text x="42.3738%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="42.3708%" y="453" width="0.0529%" height="15" fill="rgb(226,69,20)" fg:x="2402" fg:w="3"/><text x="42.6208%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="42.3708%" y="437" width="0.0529%" height="15" fill="rgb(247,184,54)" fg:x="2402" fg:w="3"/><text x="42.6208%" y="447.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (3 samples, 0.05%)</title><rect x="42.4237%" y="645" width="0.0529%" height="15" fill="rgb(210,145,0)" fg:x="2405" fg:w="3"/><text x="42.6737%" y="655.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (3 samples, 0.05%)</title><rect x="42.4237%" y="629" width="0.0529%" height="15" fill="rgb(253,82,12)" fg:x="2405" fg:w="3"/><text x="42.6737%" y="639.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (3 samples, 0.05%)</title><rect x="42.4237%" y="613" width="0.0529%" height="15" fill="rgb(245,42,11)" fg:x="2405" fg:w="3"/><text x="42.6737%" y="623.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (3 samples, 0.05%)</title><rect x="42.4237%" y="597" width="0.0529%" height="15" fill="rgb(219,147,32)" fg:x="2405" fg:w="3"/><text x="42.6737%" y="607.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (3 samples, 0.05%)</title><rect x="42.4237%" y="581" width="0.0529%" height="15" fill="rgb(246,12,7)" fg:x="2405" fg:w="3"/><text x="42.6737%" y="591.50"></text></g><g><title>AutoFile::write (27 samples, 0.48%)</title><rect x="42.0709%" y="661" width="0.4763%" height="15" fill="rgb(243,50,9)" fg:x="2385" fg:w="27"/><text x="42.3209%" y="671.50"></text></g><g><title>util::Xor (4 samples, 0.07%)</title><rect x="42.4766%" y="645" width="0.0706%" height="15" fill="rgb(219,149,6)" fg:x="2408" fg:w="4"/><text x="42.7266%" y="655.50"></text></g><g><title>std::operator^= (2 samples, 0.04%)</title><rect x="42.5119%" y="629" width="0.0353%" height="15" fill="rgb(241,51,42)" fg:x="2410" fg:w="2"/><text x="42.7619%" y="639.50"></text></g><g><title>std::operator^ (2 samples, 0.04%)</title><rect x="42.5119%" y="613" width="0.0353%" height="15" fill="rgb(226,128,27)" fg:x="2410" fg:w="2"/><text x="42.7619%" y="623.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (28 samples, 0.49%)</title><rect x="42.0709%" y="677" width="0.4939%" height="15" fill="rgb(244,144,4)" fg:x="2385" fg:w="28"/><text x="42.3209%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="661" width="0.0176%" height="15" fill="rgb(221,4,13)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="645" width="0.0176%" height="15" fill="rgb(208,170,28)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="629" width="0.0176%" height="15" fill="rgb(226,131,13)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="639.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="613" width="0.0176%" height="15" fill="rgb(215,72,41)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="623.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="597" width="0.0176%" height="15" fill="rgb(243,108,20)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="607.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="581" width="0.0176%" height="15" fill="rgb(230,189,17)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="591.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="565" width="0.0176%" height="15" fill="rgb(220,50,17)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="549" width="0.0176%" height="15" fill="rgb(248,152,48)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="559.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="533" width="0.0176%" height="15" fill="rgb(244,91,11)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="517" width="0.0176%" height="15" fill="rgb(220,157,5)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="527.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="42.5472%" y="501" width="0.0176%" height="15" fill="rgb(253,137,8)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="485" width="0.0176%" height="15" fill="rgb(217,137,51)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="469" width="0.0176%" height="15" fill="rgb(218,209,53)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="479.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="453" width="0.0176%" height="15" fill="rgb(249,137,25)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="463.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="437" width="0.0176%" height="15" fill="rgb(239,155,26)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="421" width="0.0176%" height="15" fill="rgb(227,85,46)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="431.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="405" width="0.0176%" height="15" fill="rgb(251,107,43)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="415.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="389" width="0.0176%" height="15" fill="rgb(234,170,33)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="399.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="373" width="0.0176%" height="15" fill="rgb(206,29,35)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="383.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="357" width="0.0176%" height="15" fill="rgb(227,138,25)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="367.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="341" width="0.0176%" height="15" fill="rgb(249,131,35)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="351.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="325" width="0.0176%" height="15" fill="rgb(239,6,40)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="335.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="309" width="0.0176%" height="15" fill="rgb(246,136,47)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="319.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="293" width="0.0176%" height="15" fill="rgb(253,58,26)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="303.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="277" width="0.0176%" height="15" fill="rgb(237,141,10)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="287.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="261" width="0.0176%" height="15" fill="rgb(234,156,12)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="271.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="245" width="0.0176%" height="15" fill="rgb(243,224,36)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="255.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="229" width="0.0176%" height="15" fill="rgb(205,229,51)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="239.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="42.5472%" y="213" width="0.0176%" height="15" fill="rgb(223,189,4)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="223.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (1 samples, 0.02%)</title><rect x="42.5472%" y="197" width="0.0176%" height="15" fill="rgb(249,167,54)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="207.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="42.5472%" y="181" width="0.0176%" height="15" fill="rgb(218,34,28)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="191.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="42.5472%" y="165" width="0.0176%" height="15" fill="rgb(232,109,42)" fg:x="2412" fg:w="1"/><text x="42.7972%" y="175.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="42.6354%" y="597" width="0.0176%" height="15" fill="rgb(248,214,46)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="607.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="42.6354%" y="581" width="0.0176%" height="15" fill="rgb(244,216,40)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="591.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="42.6354%" y="565" width="0.0176%" height="15" fill="rgb(231,226,31)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="575.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="42.6354%" y="549" width="0.0176%" height="15" fill="rgb(238,38,43)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="559.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="42.6354%" y="533" width="0.0176%" height="15" fill="rgb(208,88,43)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="517" width="0.0176%" height="15" fill="rgb(205,136,37)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="501" width="0.0176%" height="15" fill="rgb(237,34,14)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="485" width="0.0176%" height="15" fill="rgb(236,193,44)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="469" width="0.0176%" height="15" fill="rgb(231,48,10)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="479.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="42.6354%" y="453" width="0.0176%" height="15" fill="rgb(213,141,34)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="437" width="0.0176%" height="15" fill="rgb(249,130,34)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="447.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="42.6354%" y="421" width="0.0176%" height="15" fill="rgb(219,42,41)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="405" width="0.0176%" height="15" fill="rgb(224,100,54)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="389" width="0.0176%" height="15" fill="rgb(229,200,27)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="373" width="0.0176%" height="15" fill="rgb(217,118,10)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="357" width="0.0176%" height="15" fill="rgb(206,22,3)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.6354%" y="341" width="0.0176%" height="15" fill="rgb(232,163,46)" fg:x="2417" fg:w="1"/><text x="42.8854%" y="351.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (41 samples, 0.72%)</title><rect x="41.9474%" y="901" width="0.7232%" height="15" fill="rgb(206,95,13)" fg:x="2378" fg:w="41"/><text x="42.1974%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (41 samples, 0.72%)</title><rect x="41.9474%" y="885" width="0.7232%" height="15" fill="rgb(253,154,18)" fg:x="2378" fg:w="41"/><text x="42.1974%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.72%)</title><rect x="41.9474%" y="869" width="0.7232%" height="15" fill="rgb(219,32,23)" fg:x="2378" fg:w="41"/><text x="42.1974%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (41 samples, 0.72%)</title><rect x="41.9474%" y="853" width="0.7232%" height="15" fill="rgb(230,191,45)" fg:x="2378" fg:w="41"/><text x="42.1974%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (41 samples, 0.72%)</title><rect x="41.9474%" y="837" width="0.7232%" height="15" fill="rgb(229,64,36)" fg:x="2378" fg:w="41"/><text x="42.1974%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (41 samples, 0.72%)</title><rect x="41.9474%" y="821" width="0.7232%" height="15" fill="rgb(205,129,25)" fg:x="2378" fg:w="41"/><text x="42.1974%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (41 samples, 0.72%)</title><rect x="41.9474%" y="805" width="0.7232%" height="15" fill="rgb(254,112,7)" fg:x="2378" fg:w="41"/><text x="42.1974%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (34 samples, 0.60%)</title><rect x="42.0709%" y="789" width="0.5998%" height="15" fill="rgb(226,53,48)" fg:x="2385" fg:w="34"/><text x="42.3209%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.60%)</title><rect x="42.0709%" y="773" width="0.5998%" height="15" fill="rgb(214,153,38)" fg:x="2385" fg:w="34"/><text x="42.3209%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (34 samples, 0.60%)</title><rect x="42.0709%" y="757" width="0.5998%" height="15" fill="rgb(243,101,7)" fg:x="2385" fg:w="34"/><text x="42.3209%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (34 samples, 0.60%)</title><rect x="42.0709%" y="741" width="0.5998%" height="15" fill="rgb(240,140,22)" fg:x="2385" fg:w="34"/><text x="42.3209%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (34 samples, 0.60%)</title><rect x="42.0709%" y="725" width="0.5998%" height="15" fill="rgb(235,114,2)" fg:x="2385" fg:w="34"/><text x="42.3209%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (34 samples, 0.60%)</title><rect x="42.0709%" y="709" width="0.5998%" height="15" fill="rgb(242,59,12)" fg:x="2385" fg:w="34"/><text x="42.3209%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (34 samples, 0.60%)</title><rect x="42.0709%" y="693" width="0.5998%" height="15" fill="rgb(252,134,9)" fg:x="2385" fg:w="34"/><text x="42.3209%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="42.5648%" y="677" width="0.1058%" height="15" fill="rgb(236,4,44)" fg:x="2413" fg:w="6"/><text x="42.8148%" y="687.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="42.5648%" y="661" width="0.1058%" height="15" fill="rgb(254,172,41)" fg:x="2413" fg:w="6"/><text x="42.8148%" y="671.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (6 samples, 0.11%)</title><rect x="42.5648%" y="645" width="0.1058%" height="15" fill="rgb(244,63,20)" fg:x="2413" fg:w="6"/><text x="42.8148%" y="655.50"></text></g><g><title>AutoFile::write (6 samples, 0.11%)</title><rect x="42.5648%" y="629" width="0.1058%" height="15" fill="rgb(250,73,31)" fg:x="2413" fg:w="6"/><text x="42.8148%" y="639.50"></text></g><g><title>_IO_fwrite (6 samples, 0.11%)</title><rect x="42.5648%" y="613" width="0.1058%" height="15" fill="rgb(241,38,36)" fg:x="2413" fg:w="6"/><text x="42.8148%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="42.6530%" y="597" width="0.0176%" height="15" fill="rgb(245,211,2)" fg:x="2418" fg:w="1"/><text x="42.9030%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (43 samples, 0.76%)</title><rect x="41.9474%" y="981" width="0.7585%" height="15" fill="rgb(206,120,28)" fg:x="2378" fg:w="43"/><text x="42.1974%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (43 samples, 0.76%)</title><rect x="41.9474%" y="965" width="0.7585%" height="15" fill="rgb(211,59,34)" fg:x="2378" fg:w="43"/><text x="42.1974%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (43 samples, 0.76%)</title><rect x="41.9474%" y="949" width="0.7585%" height="15" fill="rgb(233,168,5)" fg:x="2378" fg:w="43"/><text x="42.1974%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (43 samples, 0.76%)</title><rect x="41.9474%" y="933" width="0.7585%" height="15" fill="rgb(234,33,13)" fg:x="2378" fg:w="43"/><text x="42.1974%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (43 samples, 0.76%)</title><rect x="41.9474%" y="917" width="0.7585%" height="15" fill="rgb(231,150,26)" fg:x="2378" fg:w="43"/><text x="42.1974%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.6707%" y="901" width="0.0353%" height="15" fill="rgb(217,191,4)" fg:x="2419" fg:w="2"/><text x="42.9207%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="42.6707%" y="885" width="0.0353%" height="15" fill="rgb(246,198,38)" fg:x="2419" fg:w="2"/><text x="42.9207%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="42.6707%" y="869" width="0.0353%" height="15" fill="rgb(245,64,37)" fg:x="2419" fg:w="2"/><text x="42.9207%" y="879.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="42.6707%" y="853" width="0.0353%" height="15" fill="rgb(250,30,36)" fg:x="2419" fg:w="2"/><text x="42.9207%" y="863.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="42.6707%" y="837" width="0.0353%" height="15" fill="rgb(217,86,53)" fg:x="2419" fg:w="2"/><text x="42.9207%" y="847.50"></text></g><g><title>_IO_fwrite (1 samples, 0.02%)</title><rect x="42.6883%" y="821" width="0.0176%" height="15" fill="rgb(228,157,16)" fg:x="2420" fg:w="1"/><text x="42.9383%" y="831.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="42.7765%" y="629" width="0.0882%" height="15" fill="rgb(217,59,31)" fg:x="2425" fg:w="5"/><text x="43.0265%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="42.7765%" y="613" width="0.0882%" height="15" fill="rgb(237,138,41)" fg:x="2425" fg:w="5"/><text x="43.0265%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="42.8118%" y="597" width="0.0529%" height="15" fill="rgb(227,91,49)" fg:x="2427" fg:w="3"/><text x="43.0618%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="42.8118%" y="581" width="0.0529%" height="15" fill="rgb(247,21,44)" fg:x="2427" fg:w="3"/><text x="43.0618%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.8294%" y="565" width="0.0353%" height="15" fill="rgb(219,210,51)" fg:x="2428" fg:w="2"/><text x="43.0794%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.8294%" y="549" width="0.0353%" height="15" fill="rgb(209,140,6)" fg:x="2428" fg:w="2"/><text x="43.0794%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="42.8294%" y="533" width="0.0353%" height="15" fill="rgb(221,188,24)" fg:x="2428" fg:w="2"/><text x="43.0794%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8471%" y="517" width="0.0176%" height="15" fill="rgb(232,154,20)" fg:x="2429" fg:w="1"/><text x="43.0971%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8471%" y="501" width="0.0176%" height="15" fill="rgb(244,137,50)" fg:x="2429" fg:w="1"/><text x="43.0971%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8471%" y="485" width="0.0176%" height="15" fill="rgb(225,185,43)" fg:x="2429" fg:w="1"/><text x="43.0971%" y="495.50"></text></g><g><title>[[ext4]] (19 samples, 0.34%)</title><rect x="42.7589%" y="645" width="0.3352%" height="15" fill="rgb(213,205,38)" fg:x="2424" fg:w="19"/><text x="43.0089%" y="655.50"></text></g><g><title>[unknown] (13 samples, 0.23%)</title><rect x="42.8647%" y="629" width="0.2293%" height="15" fill="rgb(236,73,12)" fg:x="2430" fg:w="13"/><text x="43.1147%" y="639.50"></text></g><g><title>[unknown] (13 samples, 0.23%)</title><rect x="42.8647%" y="613" width="0.2293%" height="15" fill="rgb(235,219,13)" fg:x="2430" fg:w="13"/><text x="43.1147%" y="623.50"></text></g><g><title>[unknown] (11 samples, 0.19%)</title><rect x="42.9000%" y="597" width="0.1940%" height="15" fill="rgb(218,59,36)" fg:x="2432" fg:w="11"/><text x="43.1500%" y="607.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="42.9176%" y="581" width="0.1764%" height="15" fill="rgb(205,110,39)" fg:x="2433" fg:w="10"/><text x="43.1676%" y="591.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="42.9529%" y="565" width="0.1411%" height="15" fill="rgb(218,206,42)" fg:x="2435" fg:w="8"/><text x="43.2029%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.0764%" y="549" width="0.0176%" height="15" fill="rgb(248,125,24)" fg:x="2442" fg:w="1"/><text x="43.3264%" y="559.50"></text></g><g><title>_IO_fwrite (23 samples, 0.41%)</title><rect x="42.7236%" y="837" width="0.4057%" height="15" fill="rgb(242,28,27)" fg:x="2422" fg:w="23"/><text x="42.9736%" y="847.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (23 samples, 0.41%)</title><rect x="42.7236%" y="821" width="0.4057%" height="15" fill="rgb(216,228,15)" fg:x="2422" fg:w="23"/><text x="42.9736%" y="831.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (23 samples, 0.41%)</title><rect x="42.7236%" y="805" width="0.4057%" height="15" fill="rgb(235,116,46)" fg:x="2422" fg:w="23"/><text x="42.9736%" y="815.50"></text></g><g><title>new_do_write (23 samples, 0.41%)</title><rect x="42.7236%" y="789" width="0.4057%" height="15" fill="rgb(224,18,32)" fg:x="2422" fg:w="23"/><text x="42.9736%" y="799.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (23 samples, 0.41%)</title><rect x="42.7236%" y="773" width="0.4057%" height="15" fill="rgb(252,5,12)" fg:x="2422" fg:w="23"/><text x="42.9736%" y="783.50"></text></g><g><title>__GI___libc_write (22 samples, 0.39%)</title><rect x="42.7412%" y="757" width="0.3881%" height="15" fill="rgb(251,36,5)" fg:x="2423" fg:w="22"/><text x="42.9912%" y="767.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="42.7412%" y="741" width="0.3881%" height="15" fill="rgb(217,53,14)" fg:x="2423" fg:w="22"/><text x="42.9912%" y="751.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="42.7412%" y="725" width="0.3881%" height="15" fill="rgb(215,86,45)" fg:x="2423" fg:w="22"/><text x="42.9912%" y="735.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="42.7412%" y="709" width="0.3881%" height="15" fill="rgb(242,169,11)" fg:x="2423" fg:w="22"/><text x="42.9912%" y="719.50"></text></g><g><title>[unknown] (21 samples, 0.37%)</title><rect x="42.7589%" y="693" width="0.3704%" height="15" fill="rgb(211,213,45)" fg:x="2424" fg:w="21"/><text x="43.0089%" y="703.50"></text></g><g><title>[[ext4]] (21 samples, 0.37%)</title><rect x="42.7589%" y="677" width="0.3704%" height="15" fill="rgb(205,88,11)" fg:x="2424" fg:w="21"/><text x="43.0089%" y="687.50"></text></g><g><title>[unknown] (21 samples, 0.37%)</title><rect x="42.7589%" y="661" width="0.3704%" height="15" fill="rgb(252,69,26)" fg:x="2424" fg:w="21"/><text x="43.0089%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="43.0940%" y="645" width="0.0353%" height="15" fill="rgb(246,123,37)" fg:x="2443" fg:w="2"/><text x="43.3440%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="43.0940%" y="629" width="0.0353%" height="15" fill="rgb(212,205,5)" fg:x="2443" fg:w="2"/><text x="43.3440%" y="639.50"></text></g><g><title>std::byte* std::copy&lt;std::byte const*, std::byte*&gt; (6 samples, 0.11%)</title><rect x="43.1293%" y="837" width="0.1058%" height="15" fill="rgb(253,148,0)" fg:x="2445" fg:w="6"/><text x="43.3793%" y="847.50"></text></g><g><title>std::byte* std::__copy_move_a&lt;false, std::byte const*, std::byte*&gt; (6 samples, 0.11%)</title><rect x="43.1293%" y="821" width="0.1058%" height="15" fill="rgb(239,22,4)" fg:x="2445" fg:w="6"/><text x="43.3793%" y="831.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (6 samples, 0.11%)</title><rect x="43.1293%" y="805" width="0.1058%" height="15" fill="rgb(226,26,53)" fg:x="2445" fg:w="6"/><text x="43.3793%" y="815.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (6 samples, 0.11%)</title><rect x="43.1293%" y="789" width="0.1058%" height="15" fill="rgb(225,229,45)" fg:x="2445" fg:w="6"/><text x="43.3793%" y="799.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (6 samples, 0.11%)</title><rect x="43.1293%" y="773" width="0.1058%" height="15" fill="rgb(220,60,37)" fg:x="2445" fg:w="6"/><text x="43.3793%" y="783.50"></text></g><g><title>AutoFile::write (48 samples, 0.85%)</title><rect x="42.7059%" y="853" width="0.8467%" height="15" fill="rgb(217,180,35)" fg:x="2421" fg:w="48"/><text x="42.9559%" y="863.50"></text></g><g><title>util::Xor (18 samples, 0.32%)</title><rect x="43.2351%" y="837" width="0.3175%" height="15" fill="rgb(229,7,53)" fg:x="2451" fg:w="18"/><text x="43.4851%" y="847.50"></text></g><g><title>std::operator^= (6 samples, 0.11%)</title><rect x="43.4468%" y="821" width="0.1058%" height="15" fill="rgb(254,137,3)" fg:x="2463" fg:w="6"/><text x="43.6968%" y="831.50"></text></g><g><title>std::operator^ (6 samples, 0.11%)</title><rect x="43.4468%" y="805" width="0.1058%" height="15" fill="rgb(215,140,41)" fg:x="2463" fg:w="6"/><text x="43.6968%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="789" width="0.0176%" height="15" fill="rgb(250,80,15)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="773" width="0.0176%" height="15" fill="rgb(252,191,6)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="757" width="0.0176%" height="15" fill="rgb(246,217,18)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="741" width="0.0176%" height="15" fill="rgb(223,93,7)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="725" width="0.0176%" height="15" fill="rgb(225,55,52)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="709" width="0.0176%" height="15" fill="rgb(240,31,24)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="693" width="0.0176%" height="15" fill="rgb(205,56,52)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="677" width="0.0176%" height="15" fill="rgb(246,146,12)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="661" width="0.0176%" height="15" fill="rgb(239,84,36)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.5350%" y="645" width="0.0176%" height="15" fill="rgb(207,41,40)" fg:x="2468" fg:w="1"/><text x="43.7850%" y="655.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (49 samples, 0.86%)</title><rect x="42.7059%" y="869" width="0.8643%" height="15" fill="rgb(241,179,25)" fg:x="2421" fg:w="49"/><text x="42.9559%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="853" width="0.0176%" height="15" fill="rgb(210,0,34)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="837" width="0.0176%" height="15" fill="rgb(225,217,29)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="821" width="0.0176%" height="15" fill="rgb(216,191,38)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="805" width="0.0176%" height="15" fill="rgb(232,140,52)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="789" width="0.0176%" height="15" fill="rgb(223,158,51)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="773" width="0.0176%" height="15" fill="rgb(235,29,51)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="757" width="0.0176%" height="15" fill="rgb(215,181,18)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="741" width="0.0176%" height="15" fill="rgb(227,125,34)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="725" width="0.0176%" height="15" fill="rgb(230,197,49)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="709" width="0.0176%" height="15" fill="rgb(239,141,16)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="719.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="43.5527%" y="693" width="0.0176%" height="15" fill="rgb(225,105,43)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="677" width="0.0176%" height="15" fill="rgb(214,131,14)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="661" width="0.0176%" height="15" fill="rgb(229,177,11)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="645" width="0.0176%" height="15" fill="rgb(231,180,14)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="629" width="0.0176%" height="15" fill="rgb(232,88,2)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="639.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="613" width="0.0176%" height="15" fill="rgb(205,220,8)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="43.5527%" y="597" width="0.0176%" height="15" fill="rgb(225,23,53)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="607.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="43.5527%" y="581" width="0.0176%" height="15" fill="rgb(213,62,29)" fg:x="2469" fg:w="1"/><text x="43.8027%" y="591.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (53 samples, 0.93%)</title><rect x="42.7059%" y="901" width="0.9349%" height="15" fill="rgb(227,75,7)" fg:x="2421" fg:w="53"/><text x="42.9559%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (53 samples, 0.93%)</title><rect x="42.7059%" y="885" width="0.9349%" height="15" fill="rgb(207,105,14)" fg:x="2421" fg:w="53"/><text x="42.9559%" y="895.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.5703%" y="869" width="0.0706%" height="15" fill="rgb(245,62,29)" fg:x="2470" fg:w="4"/><text x="43.8203%" y="879.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="43.5703%" y="853" width="0.0706%" height="15" fill="rgb(236,202,4)" fg:x="2470" fg:w="4"/><text x="43.8203%" y="863.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="43.5703%" y="837" width="0.0706%" height="15" fill="rgb(250,67,1)" fg:x="2470" fg:w="4"/><text x="43.8203%" y="847.50"></text></g><g><title>AutoFile::write (4 samples, 0.07%)</title><rect x="43.5703%" y="821" width="0.0706%" height="15" fill="rgb(253,115,44)" fg:x="2470" fg:w="4"/><text x="43.8203%" y="831.50"></text></g><g><title>_IO_fwrite (4 samples, 0.07%)</title><rect x="43.5703%" y="805" width="0.0706%" height="15" fill="rgb(251,139,18)" fg:x="2470" fg:w="4"/><text x="43.8203%" y="815.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.6232%" y="789" width="0.0176%" height="15" fill="rgb(218,22,32)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="799.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.6232%" y="773" width="0.0176%" height="15" fill="rgb(243,53,5)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="783.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="43.6232%" y="757" width="0.0176%" height="15" fill="rgb(227,56,16)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="767.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.6232%" y="741" width="0.0176%" height="15" fill="rgb(245,53,0)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="751.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="43.6232%" y="725" width="0.0176%" height="15" fill="rgb(216,170,35)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.6232%" y="709" width="0.0176%" height="15" fill="rgb(211,200,8)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.6232%" y="693" width="0.0176%" height="15" fill="rgb(228,204,44)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.6232%" y="677" width="0.0176%" height="15" fill="rgb(214,121,17)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.6232%" y="661" width="0.0176%" height="15" fill="rgb(233,64,38)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="671.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.6232%" y="645" width="0.0176%" height="15" fill="rgb(253,54,19)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.6232%" y="629" width="0.0176%" height="15" fill="rgb(253,94,18)" fg:x="2473" fg:w="1"/><text x="43.8732%" y="639.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (55 samples, 0.97%)</title><rect x="42.7059%" y="981" width="0.9702%" height="15" fill="rgb(227,57,52)" fg:x="2421" fg:w="55"/><text x="42.9559%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (55 samples, 0.97%)</title><rect x="42.7059%" y="965" width="0.9702%" height="15" fill="rgb(230,228,50)" fg:x="2421" fg:w="55"/><text x="42.9559%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (55 samples, 0.97%)</title><rect x="42.7059%" y="949" width="0.9702%" height="15" fill="rgb(217,205,27)" fg:x="2421" fg:w="55"/><text x="42.9559%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (55 samples, 0.97%)</title><rect x="42.7059%" y="933" width="0.9702%" height="15" fill="rgb(252,71,50)" fg:x="2421" fg:w="55"/><text x="42.9559%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (55 samples, 0.97%)</title><rect x="42.7059%" y="917" width="0.9702%" height="15" fill="rgb(209,86,4)" fg:x="2421" fg:w="55"/><text x="42.9559%" y="927.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.6409%" y="901" width="0.0353%" height="15" fill="rgb(229,94,0)" fg:x="2474" fg:w="2"/><text x="43.8909%" y="911.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.6409%" y="885" width="0.0353%" height="15" fill="rgb(252,223,21)" fg:x="2474" fg:w="2"/><text x="43.8909%" y="895.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="43.6409%" y="869" width="0.0353%" height="15" fill="rgb(230,210,4)" fg:x="2474" fg:w="2"/><text x="43.8909%" y="879.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="43.6409%" y="853" width="0.0353%" height="15" fill="rgb(240,149,38)" fg:x="2474" fg:w="2"/><text x="43.8909%" y="863.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="43.6409%" y="837" width="0.0353%" height="15" fill="rgb(254,105,20)" fg:x="2474" fg:w="2"/><text x="43.8909%" y="847.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (2 samples, 0.04%)</title><rect x="43.6761%" y="981" width="0.0353%" height="15" fill="rgb(253,87,46)" fg:x="2476" fg:w="2"/><text x="43.9261%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.6761%" y="965" width="0.0353%" height="15" fill="rgb(253,116,33)" fg:x="2476" fg:w="2"/><text x="43.9261%" y="975.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.6761%" y="949" width="0.0353%" height="15" fill="rgb(229,198,5)" fg:x="2476" fg:w="2"/><text x="43.9261%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="43.6761%" y="933" width="0.0353%" height="15" fill="rgb(242,38,37)" fg:x="2476" fg:w="2"/><text x="43.9261%" y="943.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="43.6761%" y="917" width="0.0353%" height="15" fill="rgb(242,69,53)" fg:x="2476" fg:w="2"/><text x="43.9261%" y="927.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="43.6761%" y="901" width="0.0353%" height="15" fill="rgb(249,80,16)" fg:x="2476" fg:w="2"/><text x="43.9261%" y="911.50"></text></g><g><title>fwrite@plt (1 samples, 0.02%)</title><rect x="43.6938%" y="885" width="0.0176%" height="15" fill="rgb(206,128,11)" fg:x="2477" fg:w="1"/><text x="43.9438%" y="895.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (149 samples, 2.63%)</title><rect x="41.1184%" y="1269" width="2.6283%" height="15" fill="rgb(212,35,20)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1279.50">Au..</text></g><g><title>void Serialize&lt;AutoFile, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (149 samples, 2.63%)</title><rect x="41.1184%" y="1253" width="2.6283%" height="15" fill="rgb(236,79,13)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1263.50">vo..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;AutoFile&gt; (149 samples, 2.63%)</title><rect x="41.1184%" y="1237" width="2.6283%" height="15" fill="rgb(233,123,3)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1247.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock&gt; (149 samples, 2.63%)</title><rect x="41.1184%" y="1221" width="2.6283%" height="15" fill="rgb(214,93,52)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1231.50">vo..</text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (149 samples, 2.63%)</title><rect x="41.1184%" y="1205" width="2.6283%" height="15" fill="rgb(251,37,40)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1215.50">vo..</text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (149 samples, 2.63%)</title><rect x="41.1184%" y="1189" width="2.6283%" height="15" fill="rgb(227,80,54)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1199.50">vo..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (149 samples, 2.63%)</title><rect x="41.1184%" y="1173" width="2.6283%" height="15" fill="rgb(254,48,11)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1183.50">vo..</text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (149 samples, 2.63%)</title><rect x="41.1184%" y="1157" width="2.6283%" height="15" fill="rgb(235,193,26)" fg:x="2331" fg:w="149"/><text x="41.3684%" y="1167.50">vo..</text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1141" width="2.5049%" height="15" fill="rgb(229,99,21)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1151.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1125" width="2.5049%" height="15" fill="rgb(211,140,41)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1135.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1109" width="2.5049%" height="15" fill="rgb(240,227,30)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1119.50">vo..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1093" width="2.5049%" height="15" fill="rgb(215,224,45)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1103.50">vo..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1077" width="2.5049%" height="15" fill="rgb(206,123,31)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1087.50">vo..</text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1061" width="2.5049%" height="15" fill="rgb(210,138,16)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1071.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1045" width="2.5049%" height="15" fill="rgb(228,57,28)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1055.50">vo..</text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1029" width="2.5049%" height="15" fill="rgb(242,170,10)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1039.50">vo..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="1013" width="2.5049%" height="15" fill="rgb(228,214,39)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1023.50">vo..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (142 samples, 2.50%)</title><rect x="41.2418%" y="997" width="2.5049%" height="15" fill="rgb(218,179,33)" fg:x="2338" fg:w="142"/><text x="41.4918%" y="1007.50">vo..</text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (2 samples, 0.04%)</title><rect x="43.7114%" y="981" width="0.0353%" height="15" fill="rgb(235,193,39)" fg:x="2478" fg:w="2"/><text x="43.9614%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.7114%" y="965" width="0.0353%" height="15" fill="rgb(219,221,36)" fg:x="2478" fg:w="2"/><text x="43.9614%" y="975.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.7114%" y="949" width="0.0353%" height="15" fill="rgb(248,218,19)" fg:x="2478" fg:w="2"/><text x="43.9614%" y="959.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="43.7114%" y="933" width="0.0353%" height="15" fill="rgb(205,50,9)" fg:x="2478" fg:w="2"/><text x="43.9614%" y="943.50"></text></g><g><title>AutoFile::write (2 samples, 0.04%)</title><rect x="43.7114%" y="917" width="0.0353%" height="15" fill="rgb(238,81,28)" fg:x="2478" fg:w="2"/><text x="43.9614%" y="927.50"></text></g><g><title>_IO_fwrite (2 samples, 0.04%)</title><rect x="43.7114%" y="901" width="0.0353%" height="15" fill="rgb(235,110,19)" fg:x="2478" fg:w="2"/><text x="43.9614%" y="911.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.7291%" y="885" width="0.0176%" height="15" fill="rgb(214,7,14)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="895.50"></text></g><g><title>_IO_do_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.7291%" y="869" width="0.0176%" height="15" fill="rgb(211,77,3)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="879.50"></text></g><g><title>new_do_write (1 samples, 0.02%)</title><rect x="43.7291%" y="853" width="0.0176%" height="15" fill="rgb(229,5,9)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="863.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="43.7291%" y="837" width="0.0176%" height="15" fill="rgb(225,90,11)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="847.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="43.7291%" y="821" width="0.0176%" height="15" fill="rgb(242,56,8)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="805" width="0.0176%" height="15" fill="rgb(249,212,39)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="789" width="0.0176%" height="15" fill="rgb(236,90,9)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="773" width="0.0176%" height="15" fill="rgb(206,88,35)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="757" width="0.0176%" height="15" fill="rgb(205,126,30)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="767.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.7291%" y="741" width="0.0176%" height="15" fill="rgb(230,176,12)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="725" width="0.0176%" height="15" fill="rgb(243,19,9)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="735.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="43.7291%" y="709" width="0.0176%" height="15" fill="rgb(245,171,17)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="693" width="0.0176%" height="15" fill="rgb(227,52,21)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="677" width="0.0176%" height="15" fill="rgb(238,69,14)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="661" width="0.0176%" height="15" fill="rgb(241,156,39)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="645" width="0.0176%" height="15" fill="rgb(212,227,28)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="629" width="0.0176%" height="15" fill="rgb(209,118,27)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7291%" y="613" width="0.0176%" height="15" fill="rgb(226,102,5)" fg:x="2479" fg:w="1"/><text x="43.9791%" y="623.50"></text></g><g><title>node::BlockManager::OpenBlockFile (1 samples, 0.02%)</title><rect x="43.7467%" y="1269" width="0.0176%" height="15" fill="rgb(223,34,3)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1279.50"></text></g><g><title>FlatFileSeq::Open (1 samples, 0.02%)</title><rect x="43.7467%" y="1253" width="0.0176%" height="15" fill="rgb(221,81,38)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1263.50"></text></g><g><title>create_directories (1 samples, 0.02%)</title><rect x="43.7467%" y="1237" width="0.0176%" height="15" fill="rgb(236,219,28)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1247.50"></text></g><g><title>std::filesystem::is_symlink (1 samples, 0.02%)</title><rect x="43.7467%" y="1221" width="0.0176%" height="15" fill="rgb(213,200,14)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1231.50"></text></g><g><title>std::filesystem::symlink_status (1 samples, 0.02%)</title><rect x="43.7467%" y="1205" width="0.0176%" height="15" fill="rgb(240,33,19)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1215.50"></text></g><g><title>std::filesystem::symlink_status (1 samples, 0.02%)</title><rect x="43.7467%" y="1189" width="0.0176%" height="15" fill="rgb(233,113,27)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1199.50"></text></g><g><title>__GI___fstatat64 (1 samples, 0.02%)</title><rect x="43.7467%" y="1173" width="0.0176%" height="15" fill="rgb(220,221,18)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7467%" y="1157" width="0.0176%" height="15" fill="rgb(238,92,8)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7467%" y="1141" width="0.0176%" height="15" fill="rgb(222,164,16)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7467%" y="1125" width="0.0176%" height="15" fill="rgb(241,119,3)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="43.7467%" y="1109" width="0.0176%" height="15" fill="rgb(241,44,8)" fg:x="2480" fg:w="1"/><text x="43.9967%" y="1119.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (2 samples, 0.04%)</title><rect x="43.7996%" y="885" width="0.0353%" height="15" fill="rgb(230,36,40)" fg:x="2483" fg:w="2"/><text x="44.0496%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8349%" y="773" width="0.0176%" height="15" fill="rgb(243,16,36)" fg:x="2485" fg:w="1"/><text x="44.0849%" y="783.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8349%" y="757" width="0.0176%" height="15" fill="rgb(231,4,26)" fg:x="2485" fg:w="1"/><text x="44.0849%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="43.8349%" y="741" width="0.0176%" height="15" fill="rgb(240,9,31)" fg:x="2485" fg:w="1"/><text x="44.0849%" y="751.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="43.8349%" y="725" width="0.0176%" height="15" fill="rgb(207,173,15)" fg:x="2485" fg:w="1"/><text x="44.0849%" y="735.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.04%)</title><rect x="43.8349%" y="885" width="0.0353%" height="15" fill="rgb(224,192,53)" fg:x="2485" fg:w="2"/><text x="44.0849%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.04%)</title><rect x="43.8349%" y="869" width="0.0353%" height="15" fill="rgb(223,67,28)" fg:x="2485" fg:w="2"/><text x="44.0849%" y="879.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.8349%" y="853" width="0.0353%" height="15" fill="rgb(211,20,47)" fg:x="2485" fg:w="2"/><text x="44.0849%" y="863.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.8349%" y="837" width="0.0353%" height="15" fill="rgb(240,228,2)" fg:x="2485" fg:w="2"/><text x="44.0849%" y="847.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="43.8349%" y="821" width="0.0353%" height="15" fill="rgb(248,151,12)" fg:x="2485" fg:w="2"/><text x="44.0849%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.04%)</title><rect x="43.8349%" y="805" width="0.0353%" height="15" fill="rgb(244,8,39)" fg:x="2485" fg:w="2"/><text x="44.0849%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.04%)</title><rect x="43.8349%" y="789" width="0.0353%" height="15" fill="rgb(222,26,8)" fg:x="2485" fg:w="2"/><text x="44.0849%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="773" width="0.0176%" height="15" fill="rgb(213,106,44)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="757" width="0.0176%" height="15" fill="rgb(214,129,20)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="741" width="0.0176%" height="15" fill="rgb(212,32,13)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="725" width="0.0176%" height="15" fill="rgb(208,168,33)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="709" width="0.0176%" height="15" fill="rgb(231,207,8)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="693" width="0.0176%" height="15" fill="rgb(235,219,23)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="677" width="0.0176%" height="15" fill="rgb(226,216,26)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="661" width="0.0176%" height="15" fill="rgb(239,137,16)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="671.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8525%" y="645" width="0.0176%" height="15" fill="rgb(207,12,36)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="655.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="43.8525%" y="629" width="0.0176%" height="15" fill="rgb(210,214,24)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="639.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="43.8525%" y="613" width="0.0176%" height="15" fill="rgb(206,56,30)" fg:x="2486" fg:w="1"/><text x="44.1025%" y="623.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (6 samples, 0.11%)</title><rect x="43.7820%" y="965" width="0.1058%" height="15" fill="rgb(228,143,26)" fg:x="2482" fg:w="6"/><text x="44.0320%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (6 samples, 0.11%)</title><rect x="43.7820%" y="949" width="0.1058%" height="15" fill="rgb(216,218,46)" fg:x="2482" fg:w="6"/><text x="44.0320%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="43.7820%" y="933" width="0.1058%" height="15" fill="rgb(206,6,19)" fg:x="2482" fg:w="6"/><text x="44.0320%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="43.7820%" y="917" width="0.1058%" height="15" fill="rgb(239,177,51)" fg:x="2482" fg:w="6"/><text x="44.0320%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="43.7820%" y="901" width="0.1058%" height="15" fill="rgb(216,55,25)" fg:x="2482" fg:w="6"/><text x="44.0320%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8702%" y="885" width="0.0176%" height="15" fill="rgb(231,163,29)" fg:x="2487" fg:w="1"/><text x="44.1202%" y="895.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8702%" y="869" width="0.0176%" height="15" fill="rgb(232,149,50)" fg:x="2487" fg:w="1"/><text x="44.1202%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="43.8702%" y="853" width="0.0176%" height="15" fill="rgb(223,142,48)" fg:x="2487" fg:w="1"/><text x="44.1202%" y="863.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="43.8702%" y="837" width="0.0176%" height="15" fill="rgb(245,83,23)" fg:x="2487" fg:w="1"/><text x="44.1202%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="885" width="0.0353%" height="15" fill="rgb(224,63,2)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="869" width="0.0353%" height="15" fill="rgb(218,65,53)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="879.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="853" width="0.0353%" height="15" fill="rgb(221,84,29)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="863.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="837" width="0.0353%" height="15" fill="rgb(234,0,32)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="847.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="821" width="0.0353%" height="15" fill="rgb(206,20,16)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="831.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="805" width="0.0353%" height="15" fill="rgb(244,172,18)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="815.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="789" width="0.0353%" height="15" fill="rgb(254,133,1)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="773" width="0.0353%" height="15" fill="rgb(222,206,41)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="783.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="757" width="0.0353%" height="15" fill="rgb(212,3,42)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="767.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="741" width="0.0353%" height="15" fill="rgb(241,11,4)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="751.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="725" width="0.0353%" height="15" fill="rgb(205,19,26)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="735.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="709" width="0.0353%" height="15" fill="rgb(210,179,32)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="719.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="693" width="0.0353%" height="15" fill="rgb(227,116,49)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="43.9231%" y="677" width="0.0353%" height="15" fill="rgb(211,146,6)" fg:x="2490" fg:w="2"/><text x="44.1731%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="43.9407%" y="661" width="0.0176%" height="15" fill="rgb(219,44,39)" fg:x="2491" fg:w="1"/><text x="44.1907%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (5 samples, 0.09%)</title><rect x="43.8878%" y="965" width="0.0882%" height="15" fill="rgb(234,128,11)" fg:x="2488" fg:w="5"/><text x="44.1378%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (5 samples, 0.09%)</title><rect x="43.8878%" y="949" width="0.0882%" height="15" fill="rgb(220,183,53)" fg:x="2488" fg:w="5"/><text x="44.1378%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="43.8878%" y="933" width="0.0882%" height="15" fill="rgb(213,219,32)" fg:x="2488" fg:w="5"/><text x="44.1378%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="43.8878%" y="917" width="0.0882%" height="15" fill="rgb(232,156,16)" fg:x="2488" fg:w="5"/><text x="44.1378%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="43.8878%" y="901" width="0.0882%" height="15" fill="rgb(246,135,34)" fg:x="2488" fg:w="5"/><text x="44.1378%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="885" width="0.0176%" height="15" fill="rgb(241,99,0)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="869" width="0.0176%" height="15" fill="rgb(222,103,45)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="853" width="0.0176%" height="15" fill="rgb(212,57,4)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="837" width="0.0176%" height="15" fill="rgb(215,68,47)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="821" width="0.0176%" height="15" fill="rgb(230,84,2)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="805" width="0.0176%" height="15" fill="rgb(220,102,14)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="789" width="0.0176%" height="15" fill="rgb(240,10,32)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="773" width="0.0176%" height="15" fill="rgb(215,47,27)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="757" width="0.0176%" height="15" fill="rgb(233,188,43)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="741" width="0.0176%" height="15" fill="rgb(253,190,1)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="43.9584%" y="725" width="0.0176%" height="15" fill="rgb(206,114,52)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="709" width="0.0176%" height="15" fill="rgb(233,120,37)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="693" width="0.0176%" height="15" fill="rgb(214,52,39)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="677" width="0.0176%" height="15" fill="rgb(223,80,29)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.9584%" y="661" width="0.0176%" height="15" fill="rgb(230,101,40)" fg:x="2492" fg:w="1"/><text x="44.2084%" y="671.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="43.9936%" y="853" width="0.0176%" height="15" fill="rgb(219,211,8)" fg:x="2494" fg:w="1"/><text x="44.2436%" y="863.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="43.9936%" y="837" width="0.0176%" height="15" fill="rgb(252,126,28)" fg:x="2494" fg:w="1"/><text x="44.2436%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="43.9936%" y="885" width="0.0353%" height="15" fill="rgb(215,56,38)" fg:x="2494" fg:w="2"/><text x="44.2436%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.04%)</title><rect x="43.9936%" y="869" width="0.0353%" height="15" fill="rgb(249,55,44)" fg:x="2494" fg:w="2"/><text x="44.2436%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="853" width="0.0176%" height="15" fill="rgb(220,221,32)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="837" width="0.0176%" height="15" fill="rgb(212,216,41)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="821" width="0.0176%" height="15" fill="rgb(228,213,43)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="831.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="805" width="0.0176%" height="15" fill="rgb(211,31,26)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="815.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="789" width="0.0176%" height="15" fill="rgb(229,202,19)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="799.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="773" width="0.0176%" height="15" fill="rgb(229,105,46)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="757" width="0.0176%" height="15" fill="rgb(235,108,1)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="741" width="0.0176%" height="15" fill="rgb(245,111,35)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="751.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="725" width="0.0176%" height="15" fill="rgb(219,185,31)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="735.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="709" width="0.0176%" height="15" fill="rgb(214,4,43)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="44.0113%" y="693" width="0.0176%" height="15" fill="rgb(235,227,40)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="677" width="0.0176%" height="15" fill="rgb(230,88,30)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="687.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="661" width="0.0176%" height="15" fill="rgb(216,217,1)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="671.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="645" width="0.0176%" height="15" fill="rgb(248,139,50)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.0113%" y="629" width="0.0176%" height="15" fill="rgb(233,1,21)" fg:x="2495" fg:w="1"/><text x="44.2613%" y="639.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="885" width="0.0353%" height="15" fill="rgb(215,183,12)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="869" width="0.0353%" height="15" fill="rgb(229,104,42)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="853" width="0.0353%" height="15" fill="rgb(243,34,48)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="863.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="837" width="0.0353%" height="15" fill="rgb(239,11,44)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="847.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="821" width="0.0353%" height="15" fill="rgb(231,98,35)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="831.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="805" width="0.0353%" height="15" fill="rgb(233,28,25)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="789" width="0.0353%" height="15" fill="rgb(234,123,11)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="773" width="0.0353%" height="15" fill="rgb(220,69,3)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="783.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="757" width="0.0353%" height="15" fill="rgb(214,64,36)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="767.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="741" width="0.0353%" height="15" fill="rgb(211,138,32)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="751.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="44.0289%" y="725" width="0.0353%" height="15" fill="rgb(213,118,47)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="709" width="0.0353%" height="15" fill="rgb(243,124,49)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="693" width="0.0353%" height="15" fill="rgb(221,30,28)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="703.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="677" width="0.0353%" height="15" fill="rgb(246,37,13)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="687.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="661" width="0.0353%" height="15" fill="rgb(249,66,14)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="671.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="645" width="0.0353%" height="15" fill="rgb(213,166,5)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="629" width="0.0353%" height="15" fill="rgb(221,66,24)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="639.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="613" width="0.0353%" height="15" fill="rgb(210,132,17)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="623.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="597" width="0.0353%" height="15" fill="rgb(243,202,5)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="607.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="581" width="0.0353%" height="15" fill="rgb(233,70,48)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="565" width="0.0353%" height="15" fill="rgb(238,41,26)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="549" width="0.0353%" height="15" fill="rgb(241,19,31)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="533" width="0.0353%" height="15" fill="rgb(214,76,10)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="543.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="517" width="0.0353%" height="15" fill="rgb(254,202,22)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="527.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="501" width="0.0353%" height="15" fill="rgb(214,72,24)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="511.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="485" width="0.0353%" height="15" fill="rgb(221,92,46)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="495.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="469" width="0.0353%" height="15" fill="rgb(246,13,50)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="479.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="453" width="0.0353%" height="15" fill="rgb(240,165,38)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="44.0289%" y="437" width="0.0353%" height="15" fill="rgb(241,24,51)" fg:x="2496" fg:w="2"/><text x="44.2789%" y="447.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="44.0466%" y="421" width="0.0176%" height="15" fill="rgb(227,51,44)" fg:x="2497" fg:w="1"/><text x="44.2966%" y="431.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1125" width="0.3175%" height="15" fill="rgb(231,121,3)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1109" width="0.3175%" height="15" fill="rgb(245,3,41)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1093" width="0.3175%" height="15" fill="rgb(214,13,26)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1077" width="0.3175%" height="15" fill="rgb(252,75,11)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1061" width="0.3175%" height="15" fill="rgb(218,226,17)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1071.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1045" width="0.3175%" height="15" fill="rgb(248,89,38)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1029" width="0.3175%" height="15" fill="rgb(237,73,46)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1039.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="1013" width="0.3175%" height="15" fill="rgb(242,78,33)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1023.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="997" width="0.3175%" height="15" fill="rgb(235,60,3)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="1007.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (18 samples, 0.32%)</title><rect x="43.7643%" y="981" width="0.3175%" height="15" fill="rgb(216,172,19)" fg:x="2481" fg:w="18"/><text x="44.0143%" y="991.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (6 samples, 0.11%)</title><rect x="43.9760%" y="965" width="0.1058%" height="15" fill="rgb(227,6,42)" fg:x="2493" fg:w="6"/><text x="44.2260%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="43.9760%" y="949" width="0.1058%" height="15" fill="rgb(223,207,42)" fg:x="2493" fg:w="6"/><text x="44.2260%" y="959.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="43.9760%" y="933" width="0.1058%" height="15" fill="rgb(246,138,30)" fg:x="2493" fg:w="6"/><text x="44.2260%" y="943.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="43.9760%" y="917" width="0.1058%" height="15" fill="rgb(251,199,47)" fg:x="2493" fg:w="6"/><text x="44.2260%" y="927.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="43.9760%" y="901" width="0.1058%" height="15" fill="rgb(228,218,44)" fg:x="2493" fg:w="6"/><text x="44.2260%" y="911.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.0642%" y="885" width="0.0176%" height="15" fill="rgb(220,68,6)" fg:x="2498" fg:w="1"/><text x="44.3142%" y="895.50"></text></g><g><title>node::BlockManager::WriteBlockToDisk (179 samples, 3.16%)</title><rect x="41.1184%" y="1285" width="3.1575%" height="15" fill="rgb(240,60,26)" fg:x="2331" fg:w="179"/><text x="41.3684%" y="1295.50">nod..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1269" width="0.5116%" height="15" fill="rgb(211,200,19)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1279.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (29 samples, 0.51%)</title><rect x="43.7643%" y="1253" width="0.5116%" height="15" fill="rgb(242,145,30)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1263.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1237" width="0.5116%" height="15" fill="rgb(225,64,13)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1247.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1221" width="0.5116%" height="15" fill="rgb(218,103,35)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1231.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1205" width="0.5116%" height="15" fill="rgb(216,93,46)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1215.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1189" width="0.5116%" height="15" fill="rgb(225,159,27)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1199.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1173" width="0.5116%" height="15" fill="rgb(225,204,11)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1183.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1157" width="0.5116%" height="15" fill="rgb(205,56,4)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1167.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (29 samples, 0.51%)</title><rect x="43.7643%" y="1141" width="0.5116%" height="15" fill="rgb(206,6,35)" fg:x="2481" fg:w="29"/><text x="44.0143%" y="1151.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.19%)</title><rect x="44.0818%" y="1125" width="0.1940%" height="15" fill="rgb(247,73,52)" fg:x="2499" fg:w="11"/><text x="44.3318%" y="1135.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="44.2230%" y="1109" width="0.0529%" height="15" fill="rgb(246,97,4)" fg:x="2507" fg:w="3"/><text x="44.4730%" y="1119.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="44.2230%" y="1093" width="0.0529%" height="15" fill="rgb(212,37,15)" fg:x="2507" fg:w="3"/><text x="44.4730%" y="1103.50"></text></g><g><title>SizeComputer::write (3 samples, 0.05%)</title><rect x="44.2230%" y="1077" width="0.0529%" height="15" fill="rgb(208,130,40)" fg:x="2507" fg:w="3"/><text x="44.4730%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="901" width="0.0353%" height="15" fill="rgb(236,55,29)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="885" width="0.0353%" height="15" fill="rgb(209,156,45)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="895.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="869" width="0.0353%" height="15" fill="rgb(249,107,4)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="879.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="853" width="0.0353%" height="15" fill="rgb(227,7,13)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="863.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="837" width="0.0353%" height="15" fill="rgb(250,129,14)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="821" width="0.0353%" height="15" fill="rgb(229,92,13)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="805" width="0.0353%" height="15" fill="rgb(245,98,39)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="789" width="0.0353%" height="15" fill="rgb(234,135,48)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="773" width="0.0353%" height="15" fill="rgb(230,98,28)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="757" width="0.0353%" height="15" fill="rgb(223,121,0)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="741" width="0.0353%" height="15" fill="rgb(234,173,33)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="725" width="0.0353%" height="15" fill="rgb(245,47,8)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="709" width="0.0353%" height="15" fill="rgb(205,17,20)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="44.2759%" y="693" width="0.0353%" height="15" fill="rgb(232,151,16)" fg:x="2510" fg:w="2"/><text x="44.5259%" y="703.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="44.2935%" y="677" width="0.0176%" height="15" fill="rgb(208,30,32)" fg:x="2511" fg:w="1"/><text x="44.5435%" y="687.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="44.2759%" y="981" width="0.0529%" height="15" fill="rgb(254,26,3)" fg:x="2510" fg:w="3"/><text x="44.5259%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (3 samples, 0.05%)</title><rect x="44.2759%" y="965" width="0.0529%" height="15" fill="rgb(240,177,30)" fg:x="2510" fg:w="3"/><text x="44.5259%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="44.2759%" y="949" width="0.0529%" height="15" fill="rgb(248,76,44)" fg:x="2510" fg:w="3"/><text x="44.5259%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="44.2759%" y="933" width="0.0529%" height="15" fill="rgb(241,186,54)" fg:x="2510" fg:w="3"/><text x="44.5259%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="44.2759%" y="917" width="0.0529%" height="15" fill="rgb(249,171,29)" fg:x="2510" fg:w="3"/><text x="44.5259%" y="927.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3112%" y="901" width="0.0176%" height="15" fill="rgb(237,151,44)" fg:x="2512" fg:w="1"/><text x="44.5612%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3112%" y="885" width="0.0176%" height="15" fill="rgb(228,174,30)" fg:x="2512" fg:w="1"/><text x="44.5612%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3112%" y="869" width="0.0176%" height="15" fill="rgb(252,14,37)" fg:x="2512" fg:w="1"/><text x="44.5612%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3112%" y="853" width="0.0176%" height="15" fill="rgb(207,111,40)" fg:x="2512" fg:w="1"/><text x="44.5612%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3112%" y="837" width="0.0176%" height="15" fill="rgb(248,171,54)" fg:x="2512" fg:w="1"/><text x="44.5612%" y="847.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="44.3288%" y="901" width="0.0176%" height="15" fill="rgb(211,127,2)" fg:x="2513" fg:w="1"/><text x="44.5788%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="44.3288%" y="981" width="0.0353%" height="15" fill="rgb(236,87,47)" fg:x="2513" fg:w="2"/><text x="44.5788%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="44.3288%" y="965" width="0.0353%" height="15" fill="rgb(223,190,45)" fg:x="2513" fg:w="2"/><text x="44.5788%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="44.3288%" y="949" width="0.0353%" height="15" fill="rgb(215,5,16)" fg:x="2513" fg:w="2"/><text x="44.5788%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.3288%" y="933" width="0.0353%" height="15" fill="rgb(252,82,33)" fg:x="2513" fg:w="2"/><text x="44.5788%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.3288%" y="917" width="0.0353%" height="15" fill="rgb(247,213,44)" fg:x="2513" fg:w="2"/><text x="44.5788%" y="927.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="901" width="0.0176%" height="15" fill="rgb(205,196,44)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="885" width="0.0176%" height="15" fill="rgb(237,96,54)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="895.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="869" width="0.0176%" height="15" fill="rgb(230,113,34)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="879.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="853" width="0.0176%" height="15" fill="rgb(221,224,12)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="863.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="837" width="0.0176%" height="15" fill="rgb(219,112,44)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="847.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="821" width="0.0176%" height="15" fill="rgb(210,31,13)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="831.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="805" width="0.0176%" height="15" fill="rgb(230,25,16)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="789" width="0.0176%" height="15" fill="rgb(246,108,53)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="799.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="773" width="0.0176%" height="15" fill="rgb(241,172,50)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="783.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="757" width="0.0176%" height="15" fill="rgb(235,141,10)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="767.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="741" width="0.0176%" height="15" fill="rgb(220,174,43)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="751.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="725" width="0.0176%" height="15" fill="rgb(215,181,40)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="735.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="709" width="0.0176%" height="15" fill="rgb(230,97,2)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="693" width="0.0176%" height="15" fill="rgb(211,25,27)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="703.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3464%" y="677" width="0.0176%" height="15" fill="rgb(230,87,26)" fg:x="2514" fg:w="1"/><text x="44.5964%" y="687.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="44.3641%" y="901" width="0.0176%" height="15" fill="rgb(227,160,17)" fg:x="2515" fg:w="1"/><text x="44.6141%" y="911.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="869" width="0.0176%" height="15" fill="rgb(244,85,34)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="853" width="0.0176%" height="15" fill="rgb(207,70,0)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="863.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="837" width="0.0176%" height="15" fill="rgb(223,129,7)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="847.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="821" width="0.0176%" height="15" fill="rgb(246,105,7)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="831.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="805" width="0.0176%" height="15" fill="rgb(215,154,42)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="815.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="789" width="0.0176%" height="15" fill="rgb(220,215,30)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="799.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="773" width="0.0176%" height="15" fill="rgb(228,81,51)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="783.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="757" width="0.0176%" height="15" fill="rgb(247,71,54)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="767.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="741" width="0.0176%" height="15" fill="rgb(234,176,34)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="751.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="725" width="0.0176%" height="15" fill="rgb(241,103,54)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="735.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="44.3817%" y="709" width="0.0176%" height="15" fill="rgb(228,22,34)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="719.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="693" width="0.0176%" height="15" fill="rgb(241,179,48)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="703.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="677" width="0.0176%" height="15" fill="rgb(235,167,37)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="687.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="661" width="0.0176%" height="15" fill="rgb(213,109,30)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="671.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="645" width="0.0176%" height="15" fill="rgb(222,172,16)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="655.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="629" width="0.0176%" height="15" fill="rgb(233,192,5)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3817%" y="613" width="0.0176%" height="15" fill="rgb(247,189,41)" fg:x="2516" fg:w="1"/><text x="44.6317%" y="623.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.3817%" y="901" width="0.0353%" height="15" fill="rgb(218,134,47)" fg:x="2516" fg:w="2"/><text x="44.6317%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.04%)</title><rect x="44.3817%" y="885" width="0.0353%" height="15" fill="rgb(216,29,3)" fg:x="2516" fg:w="2"/><text x="44.6317%" y="895.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.3994%" y="869" width="0.0176%" height="15" fill="rgb(246,140,12)" fg:x="2517" fg:w="1"/><text x="44.6494%" y="879.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1141" width="0.1764%" height="15" fill="rgb(230,136,11)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1125" width="0.1764%" height="15" fill="rgb(247,22,47)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1109" width="0.1764%" height="15" fill="rgb(218,84,22)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1093" width="0.1764%" height="15" fill="rgb(216,87,39)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1077" width="0.1764%" height="15" fill="rgb(221,178,8)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1061" width="0.1764%" height="15" fill="rgb(230,42,11)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1045" width="0.1764%" height="15" fill="rgb(237,229,4)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1055.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1029" width="0.1764%" height="15" fill="rgb(222,31,33)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1039.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="1013" width="0.1764%" height="15" fill="rgb(210,17,39)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1023.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (10 samples, 0.18%)</title><rect x="44.2759%" y="997" width="0.1764%" height="15" fill="rgb(244,93,20)" fg:x="2510" fg:w="10"/><text x="44.5259%" y="1007.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (5 samples, 0.09%)</title><rect x="44.3641%" y="981" width="0.0882%" height="15" fill="rgb(210,40,47)" fg:x="2515" fg:w="5"/><text x="44.6141%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="44.3641%" y="965" width="0.0882%" height="15" fill="rgb(239,211,47)" fg:x="2515" fg:w="5"/><text x="44.6141%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="44.3641%" y="949" width="0.0882%" height="15" fill="rgb(251,223,49)" fg:x="2515" fg:w="5"/><text x="44.6141%" y="959.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="44.3641%" y="933" width="0.0882%" height="15" fill="rgb(221,149,5)" fg:x="2515" fg:w="5"/><text x="44.6141%" y="943.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="44.3641%" y="917" width="0.0882%" height="15" fill="rgb(219,224,51)" fg:x="2515" fg:w="5"/><text x="44.6141%" y="927.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="901" width="0.0353%" height="15" fill="rgb(223,7,8)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="885" width="0.0353%" height="15" fill="rgb(241,217,22)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="869" width="0.0353%" height="15" fill="rgb(248,209,0)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="853" width="0.0353%" height="15" fill="rgb(217,205,4)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="837" width="0.0353%" height="15" fill="rgb(228,124,39)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="821" width="0.0353%" height="15" fill="rgb(250,116,42)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="805" width="0.0353%" height="15" fill="rgb(223,202,9)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="789" width="0.0353%" height="15" fill="rgb(242,222,40)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="799.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="773" width="0.0353%" height="15" fill="rgb(229,99,46)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="783.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="44.4170%" y="757" width="0.0353%" height="15" fill="rgb(225,56,46)" fg:x="2518" fg:w="2"/><text x="44.6670%" y="767.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="44.4346%" y="741" width="0.0176%" height="15" fill="rgb(227,94,5)" fg:x="2519" fg:w="1"/><text x="44.6846%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.4346%" y="725" width="0.0176%" height="15" fill="rgb(205,112,38)" fg:x="2519" fg:w="1"/><text x="44.6846%" y="735.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.4346%" y="709" width="0.0176%" height="15" fill="rgb(231,133,46)" fg:x="2519" fg:w="1"/><text x="44.6846%" y="719.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="44.4346%" y="693" width="0.0176%" height="15" fill="rgb(217,16,9)" fg:x="2519" fg:w="1"/><text x="44.6846%" y="703.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="44.4346%" y="677" width="0.0176%" height="15" fill="rgb(249,173,9)" fg:x="2519" fg:w="1"/><text x="44.6846%" y="687.50"></text></g><g><title>ChainstateManager::AcceptBlock (247 samples, 4.36%)</title><rect x="40.1835%" y="1317" width="4.3570%" height="15" fill="rgb(205,163,53)" fg:x="2278" fg:w="247"/><text x="40.4335%" y="1327.50">Chain..</text></g><g><title>node::BlockManager::SaveBlockToDisk (214 samples, 3.77%)</title><rect x="40.7656%" y="1301" width="3.7749%" height="15" fill="rgb(217,54,41)" fg:x="2311" fg:w="214"/><text x="41.0156%" y="1311.50">node..</text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1285" width="0.2646%" height="15" fill="rgb(228,216,12)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1295.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (15 samples, 0.26%)</title><rect x="44.2759%" y="1269" width="0.2646%" height="15" fill="rgb(244,228,15)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1279.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1253" width="0.2646%" height="15" fill="rgb(221,176,53)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1263.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1237" width="0.2646%" height="15" fill="rgb(205,94,34)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1247.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1221" width="0.2646%" height="15" fill="rgb(213,110,48)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1231.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1205" width="0.2646%" height="15" fill="rgb(236,142,28)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1215.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1189" width="0.2646%" height="15" fill="rgb(225,135,29)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1199.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1173" width="0.2646%" height="15" fill="rgb(252,45,31)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (15 samples, 0.26%)</title><rect x="44.2759%" y="1157" width="0.2646%" height="15" fill="rgb(211,187,50)" fg:x="2510" fg:w="15"/><text x="44.5259%" y="1167.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="44.4523%" y="1141" width="0.0882%" height="15" fill="rgb(229,109,7)" fg:x="2520" fg:w="5"/><text x="44.7023%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="44.5052%" y="1125" width="0.0353%" height="15" fill="rgb(251,131,51)" fg:x="2523" fg:w="2"/><text x="44.7552%" y="1135.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="44.5052%" y="1109" width="0.0353%" height="15" fill="rgb(251,180,35)" fg:x="2523" fg:w="2"/><text x="44.7552%" y="1119.50"></text></g><g><title>SizeComputer::write (2 samples, 0.04%)</title><rect x="44.5052%" y="1093" width="0.0353%" height="15" fill="rgb(211,46,32)" fg:x="2523" fg:w="2"/><text x="44.7552%" y="1103.50"></text></g><g><title>COutPoint::IsNull (1 samples, 0.02%)</title><rect x="44.5581%" y="1285" width="0.0176%" height="15" fill="rgb(248,123,17)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1295.50"></text></g><g><title>transaction_identifier&lt;false&gt;::IsNull (1 samples, 0.02%)</title><rect x="44.5581%" y="1269" width="0.0176%" height="15" fill="rgb(227,141,18)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1279.50"></text></g><g><title>base_blob&lt;256u&gt;::IsNull (1 samples, 0.02%)</title><rect x="44.5581%" y="1253" width="0.0176%" height="15" fill="rgb(216,102,9)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1263.50"></text></g><g><title>bool std::all_of&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="44.5581%" y="1237" width="0.0176%" height="15" fill="rgb(253,47,13)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1247.50"></text></g><g><title>unsigned char const* std::find_if_not&lt;unsigned char const*, base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; (1 samples, 0.02%)</title><rect x="44.5581%" y="1221" width="0.0176%" height="15" fill="rgb(226,93,23)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1231.50"></text></g><g><title>unsigned char const* std::__find_if_not&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_pred&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5581%" y="1205" width="0.0176%" height="15" fill="rgb(247,104,17)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1215.50"></text></g><g><title>unsigned char const* std::__find_if&lt;unsigned char const*, __gnu_cxx::__ops::_Iter_negate&lt;base_blob&lt;256u&gt;::IsNull() const::{lambda(unsigned char)#1}&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5581%" y="1189" width="0.0176%" height="15" fill="rgb(233,203,26)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1173" width="0.0176%" height="15" fill="rgb(244,98,49)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1157" width="0.0176%" height="15" fill="rgb(235,134,22)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1141" width="0.0176%" height="15" fill="rgb(221,70,32)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1125" width="0.0176%" height="15" fill="rgb(238,15,50)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1109" width="0.0176%" height="15" fill="rgb(215,221,48)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1093" width="0.0176%" height="15" fill="rgb(236,73,3)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1103.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="44.5581%" y="1077" width="0.0176%" height="15" fill="rgb(250,107,11)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1061" width="0.0176%" height="15" fill="rgb(242,39,14)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1045" width="0.0176%" height="15" fill="rgb(248,164,37)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1029" width="0.0176%" height="15" fill="rgb(217,60,12)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="1013" width="0.0176%" height="15" fill="rgb(240,125,29)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="997" width="0.0176%" height="15" fill="rgb(208,207,28)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="981" width="0.0176%" height="15" fill="rgb(209,159,27)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="965" width="0.0176%" height="15" fill="rgb(251,176,53)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="44.5581%" y="949" width="0.0176%" height="15" fill="rgb(211,85,7)" fg:x="2526" fg:w="1"/><text x="44.8081%" y="959.50"></text></g><g><title>CheckTransaction (1 samples, 0.02%)</title><rect x="44.5758%" y="1269" width="0.0176%" height="15" fill="rgb(216,64,54)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1279.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1253" width="0.0176%" height="15" fill="rgb(217,54,24)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1263.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="44.5758%" y="1237" width="0.0176%" height="15" fill="rgb(208,206,53)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1247.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1221" width="0.0176%" height="15" fill="rgb(251,74,39)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1231.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1205" width="0.0176%" height="15" fill="rgb(226,47,5)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1215.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1189" width="0.0176%" height="15" fill="rgb(234,111,33)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1199.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1173" width="0.0176%" height="15" fill="rgb(251,14,10)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1183.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1157" width="0.0176%" height="15" fill="rgb(232,43,0)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1167.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="44.5758%" y="1141" width="0.0176%" height="15" fill="rgb(222,68,43)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1125" width="0.0176%" height="15" fill="rgb(217,24,23)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1109" width="0.0176%" height="15" fill="rgb(229,209,14)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1119.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1093" width="0.0176%" height="15" fill="rgb(250,149,48)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1103.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1077" width="0.0176%" height="15" fill="rgb(210,120,37)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1087.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1061" width="0.0176%" height="15" fill="rgb(210,21,8)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1045" width="0.0176%" height="15" fill="rgb(243,145,7)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1055.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1029" width="0.0176%" height="15" fill="rgb(238,178,32)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1039.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="1013" width="0.0176%" height="15" fill="rgb(222,4,10)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1023.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="997" width="0.0176%" height="15" fill="rgb(239,7,37)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="1007.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="981" width="0.0176%" height="15" fill="rgb(215,31,37)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="991.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="965" width="0.0176%" height="15" fill="rgb(224,83,33)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="975.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="949" width="0.0176%" height="15" fill="rgb(239,55,3)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="959.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.5758%" y="933" width="0.0176%" height="15" fill="rgb(247,92,11)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="943.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="44.5758%" y="917" width="0.0176%" height="15" fill="rgb(239,200,7)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="927.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="44.5758%" y="901" width="0.0176%" height="15" fill="rgb(227,115,8)" fg:x="2527" fg:w="1"/><text x="44.8258%" y="911.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_end (1 samples, 0.02%)</title><rect x="44.5934%" y="1237" width="0.0176%" height="15" fill="rgb(215,189,27)" fg:x="2528" fg:w="1"/><text x="44.8434%" y="1247.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="44.6110%" y="1109" width="0.0176%" height="15" fill="rgb(251,216,39)" fg:x="2529" fg:w="1"/><text x="44.8610%" y="1119.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_insert_unique_pos (3 samples, 0.05%)</title><rect x="44.5934%" y="1253" width="0.0529%" height="15" fill="rgb(207,29,47)" fg:x="2528" fg:w="3"/><text x="44.8434%" y="1263.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (2 samples, 0.04%)</title><rect x="44.6110%" y="1237" width="0.0353%" height="15" fill="rgb(210,71,34)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1247.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (2 samples, 0.04%)</title><rect x="44.6110%" y="1221" width="0.0353%" height="15" fill="rgb(253,217,51)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1231.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="44.6110%" y="1205" width="0.0353%" height="15" fill="rgb(222,117,46)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1215.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (2 samples, 0.04%)</title><rect x="44.6110%" y="1189" width="0.0353%" height="15" fill="rgb(226,132,6)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1199.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (2 samples, 0.04%)</title><rect x="44.6110%" y="1173" width="0.0353%" height="15" fill="rgb(254,145,51)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (2 samples, 0.04%)</title><rect x="44.6110%" y="1157" width="0.0353%" height="15" fill="rgb(231,199,27)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (2 samples, 0.04%)</title><rect x="44.6110%" y="1141" width="0.0353%" height="15" fill="rgb(245,158,14)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (2 samples, 0.04%)</title><rect x="44.6110%" y="1125" width="0.0353%" height="15" fill="rgb(240,113,14)" fg:x="2529" fg:w="2"/><text x="44.8610%" y="1135.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="44.6287%" y="1109" width="0.0176%" height="15" fill="rgb(210,20,13)" fg:x="2530" fg:w="1"/><text x="44.8787%" y="1119.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node::operator (1 samples, 0.02%)</title><rect x="44.6463%" y="1237" width="0.0176%" height="15" fill="rgb(241,144,13)" fg:x="2531" fg:w="1"/><text x="44.8963%" y="1247.50"></text></g><g><title>std::_Rb_tree_node&lt;COutPoint&gt;* std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_create_node&lt;COutPoint const&amp;&gt; (1 samples, 0.02%)</title><rect x="44.6463%" y="1221" width="0.0176%" height="15" fill="rgb(235,43,34)" fg:x="2531" fg:w="1"/><text x="44.8963%" y="1231.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_get_node (1 samples, 0.02%)</title><rect x="44.6463%" y="1205" width="0.0176%" height="15" fill="rgb(208,36,20)" fg:x="2531" fg:w="1"/><text x="44.8963%" y="1215.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="44.6463%" y="1189" width="0.0176%" height="15" fill="rgb(239,204,10)" fg:x="2531" fg:w="1"/><text x="44.8963%" y="1199.50"></text></g><g><title>std::allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="44.6463%" y="1173" width="0.0176%" height="15" fill="rgb(217,84,43)" fg:x="2531" fg:w="1"/><text x="44.8963%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;COutPoint&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="44.6463%" y="1157" width="0.0176%" height="15" fill="rgb(241,170,50)" fg:x="2531" fg:w="1"/><text x="44.8963%" y="1167.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::insert (6 samples, 0.11%)</title><rect x="44.5758%" y="1285" width="0.1058%" height="15" fill="rgb(226,205,29)" fg:x="2527" fg:w="6"/><text x="44.8258%" y="1295.50"></text></g><g><title>std::pair&lt;std::_Rb_tree_iterator&lt;COutPoint&gt;, bool&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_unique&lt;COutPoint const&amp;&gt; (5 samples, 0.09%)</title><rect x="44.5934%" y="1269" width="0.0882%" height="15" fill="rgb(233,113,1)" fg:x="2528" fg:w="5"/><text x="44.8434%" y="1279.50"></text></g><g><title>std::_Rb_tree_iterator&lt;COutPoint&gt; std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_insert_&lt;COutPoint const&amp;, std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_Alloc_node&gt; (2 samples, 0.04%)</title><rect x="44.6463%" y="1253" width="0.0353%" height="15" fill="rgb(253,98,13)" fg:x="2531" fg:w="2"/><text x="44.8963%" y="1263.50"></text></g><g><title>std::less&lt;COutPoint&gt;::operator (1 samples, 0.02%)</title><rect x="44.6640%" y="1237" width="0.0176%" height="15" fill="rgb(211,115,12)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1247.50"></text></g><g><title>operator&lt;(COutPoint const&amp;, COutPoint const&amp;) (1 samples, 0.02%)</title><rect x="44.6640%" y="1221" width="0.0176%" height="15" fill="rgb(208,12,16)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1231.50"></text></g><g><title>std::common_comparison_category&lt;decltype (std::__detail::__synth3way((declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)(), (declval&lt;transaction_identifier&lt;false&gt; const&amp;&gt;)())), decltype (std::__detail::__synth3way((declval&lt;unsigned int const&amp;&gt;)(), (declval&lt;unsigned int const&amp;&gt;)()))&gt;::type std::operator&lt;=&gt;&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;, transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="44.6640%" y="1205" width="0.0176%" height="15" fill="rgb(237,193,54)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1215.50"></text></g><g><title>std::weak_ordering std::__tuple_cmp&lt;std::weak_ordering, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, std::tuple&lt;transaction_identifier&lt;false&gt; const&amp;, unsigned int const&amp;&gt;, 0ul, 1ul&gt; (1 samples, 0.02%)</title><rect x="44.6640%" y="1189" width="0.0176%" height="15" fill="rgb(243,22,42)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1199.50"></text></g><g><title>auto std::__detail::_Synth3way::operator (1 samples, 0.02%)</title><rect x="44.6640%" y="1173" width="0.0176%" height="15" fill="rgb(233,151,36)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1183.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator&lt; &lt;transaction_identifier&lt;false&gt; &gt;(transaction_identifier&lt;false&gt; const&amp;) const (1 samples, 0.02%)</title><rect x="44.6640%" y="1157" width="0.0176%" height="15" fill="rgb(237,57,45)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1167.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="44.6640%" y="1141" width="0.0176%" height="15" fill="rgb(221,88,17)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1151.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="44.6640%" y="1125" width="0.0176%" height="15" fill="rgb(230,79,15)" fg:x="2532" fg:w="1"/><text x="44.9140%" y="1135.50"></text></g><g><title>CheckTransaction (1 samples, 0.02%)</title><rect x="44.6816%" y="1253" width="0.0176%" height="15" fill="rgb(213,57,13)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1263.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1237" width="0.0176%" height="15" fill="rgb(222,116,39)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1247.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.02%)</title><rect x="44.6816%" y="1221" width="0.0176%" height="15" fill="rgb(245,107,2)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1231.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1205" width="0.0176%" height="15" fill="rgb(238,1,10)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1215.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1189" width="0.0176%" height="15" fill="rgb(249,4,48)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1199.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1173" width="0.0176%" height="15" fill="rgb(223,151,18)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1183.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1157" width="0.0176%" height="15" fill="rgb(227,65,43)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1167.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1141" width="0.0176%" height="15" fill="rgb(218,40,45)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1151.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="44.6816%" y="1125" width="0.0176%" height="15" fill="rgb(252,121,31)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1135.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1109" width="0.0176%" height="15" fill="rgb(219,158,43)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1119.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1093" width="0.0176%" height="15" fill="rgb(231,162,42)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1103.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1077" width="0.0176%" height="15" fill="rgb(217,179,25)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1087.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.6816%" y="1061" width="0.0176%" height="15" fill="rgb(206,212,31)" fg:x="2533" fg:w="1"/><text x="44.9316%" y="1071.50"></text></g><g><title>GetScriptOp (1 samples, 0.02%)</title><rect x="44.6992%" y="1253" width="0.0176%" height="15" fill="rgb(235,144,12)" fg:x="2534" fg:w="1"/><text x="44.9492%" y="1263.50"></text></g><g><title>CheckTransaction (11 samples, 0.19%)</title><rect x="44.5405%" y="1301" width="0.1940%" height="15" fill="rgb(213,51,10)" fg:x="2525" fg:w="11"/><text x="44.7905%" y="1311.50"></text></g><g><title>std::set&lt;COutPoint, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~set (3 samples, 0.05%)</title><rect x="44.6816%" y="1285" width="0.0529%" height="15" fill="rgb(231,145,14)" fg:x="2533" fg:w="3"/><text x="44.9316%" y="1295.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::~_Rb_tree (3 samples, 0.05%)</title><rect x="44.6816%" y="1269" width="0.0529%" height="15" fill="rgb(235,15,28)" fg:x="2533" fg:w="3"/><text x="44.9316%" y="1279.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, COutPoint, std::_Identity&lt;COutPoint&gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;COutPoint&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="44.7169%" y="1253" width="0.0176%" height="15" fill="rgb(237,206,10)" fg:x="2535" fg:w="1"/><text x="44.9669%" y="1263.50"></text></g><g><title>CScript::GetSigOpCount (1 samples, 0.02%)</title><rect x="44.8051%" y="1253" width="0.0176%" height="15" fill="rgb(236,227,27)" fg:x="2540" fg:w="1"/><text x="45.0551%" y="1263.50"></text></g><g><title>CScript::GetSigOpCount (10 samples, 0.18%)</title><rect x="44.7345%" y="1285" width="0.1764%" height="15" fill="rgb(246,83,35)" fg:x="2536" fg:w="10"/><text x="44.9845%" y="1295.50"></text></g><g><title>CScript::GetOp (7 samples, 0.12%)</title><rect x="44.7874%" y="1269" width="0.1235%" height="15" fill="rgb(220,136,24)" fg:x="2539" fg:w="7"/><text x="45.0374%" y="1279.50"></text></g><g><title>GetScriptOp (5 samples, 0.09%)</title><rect x="44.8227%" y="1253" width="0.0882%" height="15" fill="rgb(217,3,25)" fg:x="2541" fg:w="5"/><text x="45.0727%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="44.8933%" y="1237" width="0.0176%" height="15" fill="rgb(239,24,14)" fg:x="2545" fg:w="1"/><text x="45.1433%" y="1247.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator++ (1 samples, 0.02%)</title><rect x="44.8933%" y="1221" width="0.0176%" height="15" fill="rgb(244,16,53)" fg:x="2545" fg:w="1"/><text x="45.1433%" y="1231.50"></text></g><g><title>GetLegacySigOpCount (1 samples, 0.02%)</title><rect x="44.9109%" y="1285" width="0.0176%" height="15" fill="rgb(208,175,44)" fg:x="2546" fg:w="1"/><text x="45.1609%" y="1295.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="44.9109%" y="1269" width="0.0176%" height="15" fill="rgb(252,18,48)" fg:x="2546" fg:w="1"/><text x="45.1609%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="44.9109%" y="1253" width="0.0176%" height="15" fill="rgb(234,199,32)" fg:x="2546" fg:w="1"/><text x="45.1609%" y="1263.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator+= (2 samples, 0.04%)</title><rect x="45.0520%" y="1269" width="0.0353%" height="15" fill="rgb(225,77,54)" fg:x="2554" fg:w="2"/><text x="45.3020%" y="1279.50"></text></g><g><title>GetLegacySigOpCount (21 samples, 0.37%)</title><rect x="44.7345%" y="1301" width="0.3704%" height="15" fill="rgb(225,42,25)" fg:x="2536" fg:w="21"/><text x="44.9845%" y="1311.50"></text></g><g><title>GetScriptOp (10 samples, 0.18%)</title><rect x="44.9286%" y="1285" width="0.1764%" height="15" fill="rgb(242,227,46)" fg:x="2547" fg:w="10"/><text x="45.1786%" y="1295.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator::operator&gt;=(prevector&lt;28u, unsigned char, unsigned int, int&gt;::const_iterator) const (1 samples, 0.02%)</title><rect x="45.0873%" y="1269" width="0.0176%" height="15" fill="rgb(246,197,35)" fg:x="2556" fg:w="1"/><text x="45.3373%" y="1279.50"></text></g><g><title>GetScriptOp (2 samples, 0.04%)</title><rect x="45.1050%" y="1301" width="0.0353%" height="15" fill="rgb(215,159,26)" fg:x="2557" fg:w="2"/><text x="45.3550%" y="1311.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CTxIn const*, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="45.1755%" y="917" width="0.0176%" height="15" fill="rgb(212,194,50)" fg:x="2561" fg:w="1"/><text x="45.4255%" y="927.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="917" width="0.0176%" height="15" fill="rgb(246,132,1)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="927.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="45.1932%" y="901" width="0.0176%" height="15" fill="rgb(217,71,7)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="885" width="0.0176%" height="15" fill="rgb(252,59,32)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="895.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="869" width="0.0176%" height="15" fill="rgb(253,204,25)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="879.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="853" width="0.0176%" height="15" fill="rgb(232,21,16)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="837" width="0.0176%" height="15" fill="rgb(248,90,29)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="847.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="821" width="0.0176%" height="15" fill="rgb(249,223,7)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="805" width="0.0176%" height="15" fill="rgb(231,119,42)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="815.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="789" width="0.0176%" height="15" fill="rgb(215,41,35)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="799.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="773" width="0.0176%" height="15" fill="rgb(220,44,45)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="783.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="757" width="0.0176%" height="15" fill="rgb(253,197,36)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="767.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="741" width="0.0176%" height="15" fill="rgb(245,225,54)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="751.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="725" width="0.0176%" height="15" fill="rgb(239,94,37)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="735.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="709" width="0.0176%" height="15" fill="rgb(242,217,10)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="719.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="693" width="0.0176%" height="15" fill="rgb(250,193,7)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="703.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="677" width="0.0176%" height="15" fill="rgb(230,104,19)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="687.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="661" width="0.0176%" height="15" fill="rgb(230,181,4)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="671.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="645" width="0.0176%" height="15" fill="rgb(216,219,49)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="655.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="629" width="0.0176%" height="15" fill="rgb(254,144,0)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="613" width="0.0176%" height="15" fill="rgb(205,209,38)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="623.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="597" width="0.0176%" height="15" fill="rgb(240,21,42)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="607.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.1932%" y="581" width="0.0176%" height="15" fill="rgb(241,132,3)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="591.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="45.1932%" y="565" width="0.0176%" height="15" fill="rgb(225,14,2)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="575.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="45.1932%" y="549" width="0.0176%" height="15" fill="rgb(210,141,35)" fg:x="2562" fg:w="1"/><text x="45.4432%" y="559.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="45.1755%" y="997" width="0.0529%" height="15" fill="rgb(251,14,44)" fg:x="2561" fg:w="3"/><text x="45.4255%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (3 samples, 0.05%)</title><rect x="45.1755%" y="981" width="0.0529%" height="15" fill="rgb(247,48,18)" fg:x="2561" fg:w="3"/><text x="45.4255%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="45.1755%" y="965" width="0.0529%" height="15" fill="rgb(225,0,40)" fg:x="2561" fg:w="3"/><text x="45.4255%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="45.1755%" y="949" width="0.0529%" height="15" fill="rgb(221,31,33)" fg:x="2561" fg:w="3"/><text x="45.4255%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="45.1755%" y="933" width="0.0529%" height="15" fill="rgb(237,42,40)" fg:x="2561" fg:w="3"/><text x="45.4255%" y="943.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.2108%" y="917" width="0.0176%" height="15" fill="rgb(233,51,29)" fg:x="2563" fg:w="1"/><text x="45.4608%" y="927.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.2108%" y="901" width="0.0176%" height="15" fill="rgb(226,58,20)" fg:x="2563" fg:w="1"/><text x="45.4608%" y="911.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="45.2108%" y="885" width="0.0176%" height="15" fill="rgb(208,98,7)" fg:x="2563" fg:w="1"/><text x="45.4608%" y="895.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="45.2108%" y="869" width="0.0176%" height="15" fill="rgb(228,143,44)" fg:x="2563" fg:w="1"/><text x="45.4608%" y="879.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="45.2284%" y="997" width="0.0353%" height="15" fill="rgb(246,55,38)" fg:x="2564" fg:w="2"/><text x="45.4784%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="45.2284%" y="981" width="0.0353%" height="15" fill="rgb(247,87,16)" fg:x="2564" fg:w="2"/><text x="45.4784%" y="991.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="45.2284%" y="965" width="0.0353%" height="15" fill="rgb(234,129,42)" fg:x="2564" fg:w="2"/><text x="45.4784%" y="975.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="45.2284%" y="949" width="0.0353%" height="15" fill="rgb(220,82,16)" fg:x="2564" fg:w="2"/><text x="45.4784%" y="959.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="45.2284%" y="933" width="0.0353%" height="15" fill="rgb(211,88,4)" fg:x="2564" fg:w="2"/><text x="45.4784%" y="943.50"></text></g><g><title>CheckBlock (42 samples, 0.74%)</title><rect x="44.5405%" y="1317" width="0.7409%" height="15" fill="rgb(248,151,21)" fg:x="2525" fg:w="42"/><text x="44.7905%" y="1327.50"></text></g><g><title>unsigned long GetSerializeSize&lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1301" width="0.1411%" height="15" fill="rgb(238,163,6)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1311.50"></text></g><g><title>SizeComputer&amp; SizeComputer::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; const&amp;) (8 samples, 0.14%)</title><rect x="45.1402%" y="1285" width="0.1411%" height="15" fill="rgb(209,183,11)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1295.50"></text></g><g><title>void Serialize&lt;SizeComputer, ParamsWrapper&lt;TransactionSerParams, CBlock const&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1269" width="0.1411%" height="15" fill="rgb(219,37,20)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1279.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock const&gt;::Serialize&lt;SizeComputer&gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1253" width="0.1411%" height="15" fill="rgb(210,158,4)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1263.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock&gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1237" width="0.1411%" height="15" fill="rgb(221,167,53)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1247.50"></text></g><g><title>void CBlock::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1221" width="0.1411%" height="15" fill="rgb(237,151,45)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1231.50"></text></g><g><title>void CBlock::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1205" width="0.1411%" height="15" fill="rgb(231,39,3)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1215.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlock const, ActionSerialize&gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1189" width="0.1411%" height="15" fill="rgb(212,167,28)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1199.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1173" width="0.1411%" height="15" fill="rgb(232,178,8)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1183.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1157" width="0.1411%" height="15" fill="rgb(225,151,20)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1167.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1141" width="0.1411%" height="15" fill="rgb(238,3,37)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1151.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1125" width="0.1411%" height="15" fill="rgb(251,147,42)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1135.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1109" width="0.1411%" height="15" fill="rgb(208,173,10)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1119.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1093" width="0.1411%" height="15" fill="rgb(246,225,4)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1103.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1077" width="0.1411%" height="15" fill="rgb(248,102,6)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1061" width="0.1411%" height="15" fill="rgb(232,6,21)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1071.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1045" width="0.1411%" height="15" fill="rgb(221,179,22)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1055.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1029" width="0.1411%" height="15" fill="rgb(252,50,20)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1039.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (8 samples, 0.14%)</title><rect x="45.1402%" y="1013" width="0.1411%" height="15" fill="rgb(222,56,38)" fg:x="2559" fg:w="8"/><text x="45.3902%" y="1023.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="45.2637%" y="997" width="0.0176%" height="15" fill="rgb(206,193,29)" fg:x="2566" fg:w="1"/><text x="45.5137%" y="1007.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.2637%" y="981" width="0.0176%" height="15" fill="rgb(239,192,45)" fg:x="2566" fg:w="1"/><text x="45.5137%" y="991.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.2637%" y="965" width="0.0176%" height="15" fill="rgb(254,18,36)" fg:x="2566" fg:w="1"/><text x="45.5137%" y="975.50"></text></g><g><title>ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="45.2637%" y="949" width="0.0176%" height="15" fill="rgb(221,127,11)" fg:x="2566" fg:w="1"/><text x="45.5137%" y="959.50"></text></g><g><title>SizeComputer::write (1 samples, 0.02%)</title><rect x="45.2637%" y="933" width="0.0176%" height="15" fill="rgb(234,146,35)" fg:x="2566" fg:w="1"/><text x="45.5137%" y="943.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1,890 samples, 33.34%)</title><rect x="11.9598%" y="1333" width="33.3392%" height="15" fill="rgb(254,201,37)" fg:x="678" fg:w="1890"/><text x="12.2098%" y="1343.50">ChainstateManager::ProcessNewBlock</text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="45.2814%" y="1317" width="0.0176%" height="15" fill="rgb(211,202,23)" fg:x="2567" fg:w="1"/><text x="45.5314%" y="1327.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="45.2814%" y="1301" width="0.0176%" height="15" fill="rgb(237,91,2)" fg:x="2567" fg:w="1"/><text x="45.5314%" y="1311.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="45.2814%" y="1285" width="0.0176%" height="15" fill="rgb(226,228,36)" fg:x="2567" fg:w="1"/><text x="45.5314%" y="1295.50"></text></g><g><title>std::equal_to&lt;uint256&gt;::operator (1 samples, 0.02%)</title><rect x="45.2814%" y="1269" width="0.0176%" height="15" fill="rgb(213,63,50)" fg:x="2567" fg:w="1"/><text x="45.5314%" y="1279.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="45.2814%" y="1253" width="0.0176%" height="15" fill="rgb(235,194,19)" fg:x="2567" fg:w="1"/><text x="45.5314%" y="1263.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="45.2814%" y="1237" width="0.0176%" height="15" fill="rgb(207,204,18)" fg:x="2567" fg:w="1"/><text x="45.5314%" y="1247.50"></text></g><g><title>CheckBlockHeader (1 samples, 0.02%)</title><rect x="45.2990%" y="1301" width="0.0176%" height="15" fill="rgb(248,8,7)" fg:x="2568" fg:w="1"/><text x="45.5490%" y="1311.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.02%)</title><rect x="45.2990%" y="1285" width="0.0176%" height="15" fill="rgb(223,145,47)" fg:x="2568" fg:w="1"/><text x="45.5490%" y="1295.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.02%)</title><rect x="45.2990%" y="1269" width="0.0176%" height="15" fill="rgb(228,84,11)" fg:x="2568" fg:w="1"/><text x="45.5490%" y="1279.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="45.2990%" y="1253" width="0.0176%" height="15" fill="rgb(218,76,45)" fg:x="2568" fg:w="1"/><text x="45.5490%" y="1263.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="45.2990%" y="1237" width="0.0176%" height="15" fill="rgb(223,80,15)" fg:x="2568" fg:w="1"/><text x="45.5490%" y="1247.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="45.2990%" y="1221" width="0.0176%" height="15" fill="rgb(219,218,33)" fg:x="2568" fg:w="1"/><text x="45.5490%" y="1231.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="45.2990%" y="1205" width="0.0176%" height="15" fill="rgb(208,51,11)" fg:x="2568" fg:w="1"/><text x="45.5490%" y="1215.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (1 samples, 0.02%)</title><rect x="45.3166%" y="1301" width="0.0176%" height="15" fill="rgb(229,165,39)" fg:x="2569" fg:w="1"/><text x="45.5666%" y="1311.50"></text></g><g><title>GetBlockProof (1 samples, 0.02%)</title><rect x="45.3166%" y="1285" width="0.0176%" height="15" fill="rgb(241,100,24)" fg:x="2569" fg:w="1"/><text x="45.5666%" y="1295.50"></text></g><g><title>operator/ (1 samples, 0.02%)</title><rect x="45.3166%" y="1269" width="0.0176%" height="15" fill="rgb(228,14,23)" fg:x="2569" fg:w="1"/><text x="45.5666%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (1 samples, 0.02%)</title><rect x="45.3166%" y="1253" width="0.0176%" height="15" fill="rgb(247,116,52)" fg:x="2569" fg:w="1"/><text x="45.5666%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="45.3166%" y="1237" width="0.0176%" height="15" fill="rgb(216,149,33)" fg:x="2569" fg:w="1"/><text x="45.5666%" y="1247.50"></text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (3 samples, 0.05%)</title><rect x="45.2990%" y="1333" width="0.0529%" height="15" fill="rgb(238,142,29)" fg:x="2568" fg:w="3"/><text x="45.5490%" y="1343.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (3 samples, 0.05%)</title><rect x="45.2990%" y="1317" width="0.0529%" height="15" fill="rgb(224,83,40)" fg:x="2568" fg:w="3"/><text x="45.5490%" y="1327.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="45.3343%" y="1301" width="0.0176%" height="15" fill="rgb(234,165,11)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1311.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.02%)</title><rect x="45.3343%" y="1285" width="0.0176%" height="15" fill="rgb(215,96,23)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1295.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.02%)</title><rect x="45.3343%" y="1269" width="0.0176%" height="15" fill="rgb(233,179,26)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1279.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (1 samples, 0.02%)</title><rect x="45.3343%" y="1253" width="0.0176%" height="15" fill="rgb(225,129,33)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1263.50"></text></g><g><title>BCLog::Logger::LogTimestampStr[abi:cxx11] (1 samples, 0.02%)</title><rect x="45.3343%" y="1237" width="0.0176%" height="15" fill="rgb(237,49,13)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1247.50"></text></g><g><title>FormatISO8601DateTime[abi:cxx11] (1 samples, 0.02%)</title><rect x="45.3343%" y="1221" width="0.0176%" height="15" fill="rgb(211,3,31)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.02%)</title><rect x="45.3343%" y="1205" width="0.0176%" height="15" fill="rgb(216,152,19)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1215.50"></text></g><g><title>void tinyformat::format&lt;int, unsigned int, unsigned int, long, long, long&gt; (1 samples, 0.02%)</title><rect x="45.3343%" y="1189" width="0.0176%" height="15" fill="rgb(251,121,35)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1199.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.02%)</title><rect x="45.3343%" y="1173" width="0.0176%" height="15" fill="rgb(210,217,47)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1183.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.02%)</title><rect x="45.3343%" y="1157" width="0.0176%" height="15" fill="rgb(244,116,22)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1167.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.02%)</title><rect x="45.3343%" y="1141" width="0.0176%" height="15" fill="rgb(228,17,21)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1151.50"></text></g><g><title>std::ostream::write (1 samples, 0.02%)</title><rect x="45.3343%" y="1125" width="0.0176%" height="15" fill="rgb(240,149,34)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1135.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.02%)</title><rect x="45.3343%" y="1109" width="0.0176%" height="15" fill="rgb(208,125,47)" fg:x="2570" fg:w="1"/><text x="45.5843%" y="1119.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="45.3519%" y="1141" width="0.0176%" height="15" fill="rgb(249,186,39)" fg:x="2571" fg:w="1"/><text x="45.6019%" y="1151.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="45.3519%" y="1125" width="0.0176%" height="15" fill="rgb(240,220,33)" fg:x="2571" fg:w="1"/><text x="45.6019%" y="1135.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="45.3519%" y="1109" width="0.0176%" height="15" fill="rgb(243,110,23)" fg:x="2571" fg:w="1"/><text x="45.6019%" y="1119.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="45.3519%" y="1093" width="0.0176%" height="15" fill="rgb(219,163,46)" fg:x="2571" fg:w="1"/><text x="45.6019%" y="1103.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="45.3696%" y="1077" width="0.0176%" height="15" fill="rgb(216,126,30)" fg:x="2572" fg:w="1"/><text x="45.6196%" y="1087.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="45.3696%" y="1109" width="0.0353%" height="15" fill="rgb(208,139,11)" fg:x="2572" fg:w="2"/><text x="45.6196%" y="1119.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="45.3696%" y="1093" width="0.0353%" height="15" fill="rgb(213,118,36)" fg:x="2572" fg:w="2"/><text x="45.6196%" y="1103.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="45.3872%" y="1077" width="0.0176%" height="15" fill="rgb(226,43,17)" fg:x="2573" fg:w="1"/><text x="45.6372%" y="1087.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="45.4048%" y="1109" width="0.0176%" height="15" fill="rgb(254,217,4)" fg:x="2574" fg:w="1"/><text x="45.6548%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="45.4048%" y="1093" width="0.0176%" height="15" fill="rgb(210,134,47)" fg:x="2574" fg:w="1"/><text x="45.6548%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::item_ptr (1 samples, 0.02%)</title><rect x="45.4048%" y="1077" width="0.0176%" height="15" fill="rgb(237,24,49)" fg:x="2574" fg:w="1"/><text x="45.6548%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::indirect_ptr (1 samples, 0.02%)</title><rect x="45.4048%" y="1061" width="0.0176%" height="15" fill="rgb(251,39,46)" fg:x="2574" fg:w="1"/><text x="45.6548%" y="1071.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="45.4401%" y="853" width="0.0176%" height="15" fill="rgb(251,220,3)" fg:x="2576" fg:w="1"/><text x="45.6901%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="45.4578%" y="853" width="0.0176%" height="15" fill="rgb(228,105,12)" fg:x="2577" fg:w="1"/><text x="45.7078%" y="863.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="45.4578%" y="837" width="0.0176%" height="15" fill="rgb(215,196,1)" fg:x="2577" fg:w="1"/><text x="45.7078%" y="847.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="45.4578%" y="821" width="0.0176%" height="15" fill="rgb(214,33,39)" fg:x="2577" fg:w="1"/><text x="45.7078%" y="831.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.4754%" y="853" width="0.0176%" height="15" fill="rgb(220,19,52)" fg:x="2578" fg:w="1"/><text x="45.7254%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="45.4930%" y="853" width="0.0176%" height="15" fill="rgb(221,78,38)" fg:x="2579" fg:w="1"/><text x="45.7430%" y="863.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (1 samples, 0.02%)</title><rect x="45.4930%" y="837" width="0.0176%" height="15" fill="rgb(253,30,16)" fg:x="2579" fg:w="1"/><text x="45.7430%" y="847.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.02%)</title><rect x="45.4930%" y="821" width="0.0176%" height="15" fill="rgb(242,65,0)" fg:x="2579" fg:w="1"/><text x="45.7430%" y="831.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="45.4930%" y="805" width="0.0176%" height="15" fill="rgb(235,201,12)" fg:x="2579" fg:w="1"/><text x="45.7430%" y="815.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="45.4930%" y="789" width="0.0176%" height="15" fill="rgb(233,161,9)" fg:x="2579" fg:w="1"/><text x="45.7430%" y="799.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_base (1 samples, 0.02%)</title><rect x="45.5107%" y="757" width="0.0176%" height="15" fill="rgb(241,207,41)" fg:x="2580" fg:w="1"/><text x="45.7607%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="45.5107%" y="853" width="0.0353%" height="15" fill="rgb(212,69,46)" fg:x="2580" fg:w="2"/><text x="45.7607%" y="863.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="45.5107%" y="837" width="0.0353%" height="15" fill="rgb(239,69,45)" fg:x="2580" fg:w="2"/><text x="45.7607%" y="847.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="45.5107%" y="821" width="0.0353%" height="15" fill="rgb(242,117,48)" fg:x="2580" fg:w="2"/><text x="45.7607%" y="831.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="45.5107%" y="805" width="0.0353%" height="15" fill="rgb(228,41,36)" fg:x="2580" fg:w="2"/><text x="45.7607%" y="815.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="45.5107%" y="789" width="0.0353%" height="15" fill="rgb(212,3,32)" fg:x="2580" fg:w="2"/><text x="45.7607%" y="799.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="45.5107%" y="773" width="0.0353%" height="15" fill="rgb(233,41,49)" fg:x="2580" fg:w="2"/><text x="45.7607%" y="783.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="45.5283%" y="757" width="0.0176%" height="15" fill="rgb(252,170,49)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="767.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="45.5283%" y="741" width="0.0176%" height="15" fill="rgb(229,53,26)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="751.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.5283%" y="725" width="0.0176%" height="15" fill="rgb(217,157,12)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="735.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="45.5283%" y="709" width="0.0176%" height="15" fill="rgb(227,17,9)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="719.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="45.5283%" y="693" width="0.0176%" height="15" fill="rgb(218,84,12)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="703.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="45.5283%" y="677" width="0.0176%" height="15" fill="rgb(212,79,24)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="687.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="45.5283%" y="661" width="0.0176%" height="15" fill="rgb(217,222,37)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="671.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="45.5283%" y="645" width="0.0176%" height="15" fill="rgb(246,208,8)" fg:x="2581" fg:w="1"/><text x="45.7783%" y="655.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="45.5636%" y="837" width="0.0176%" height="15" fill="rgb(244,133,10)" fg:x="2583" fg:w="1"/><text x="45.8136%" y="847.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="837" width="0.0706%" height="15" fill="rgb(209,219,41)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="847.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="821" width="0.0706%" height="15" fill="rgb(253,175,45)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="805" width="0.0706%" height="15" fill="rgb(235,100,37)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="815.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="789" width="0.0706%" height="15" fill="rgb(225,87,19)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="799.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="773" width="0.0706%" height="15" fill="rgb(217,152,17)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="783.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="757" width="0.0706%" height="15" fill="rgb(235,72,13)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="741" width="0.0706%" height="15" fill="rgb(233,140,18)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="725" width="0.0706%" height="15" fill="rgb(207,212,28)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="45.5812%" y="709" width="0.0706%" height="15" fill="rgb(220,130,25)" fg:x="2584" fg:w="4"/><text x="45.8312%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="45.5989%" y="693" width="0.0529%" height="15" fill="rgb(205,55,34)" fg:x="2585" fg:w="3"/><text x="45.8489%" y="703.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.12%)</title><rect x="45.6694%" y="709" width="0.1235%" height="15" fill="rgb(237,54,35)" fg:x="2589" fg:w="7"/><text x="45.9194%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="45.6694%" y="693" width="0.1235%" height="15" fill="rgb(208,67,23)" fg:x="2589" fg:w="7"/><text x="45.9194%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="45.6694%" y="677" width="0.1235%" height="15" fill="rgb(206,207,50)" fg:x="2589" fg:w="7"/><text x="45.9194%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="45.6694%" y="661" width="0.1235%" height="15" fill="rgb(213,211,42)" fg:x="2589" fg:w="7"/><text x="45.9194%" y="671.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="45.6694%" y="645" width="0.1235%" height="15" fill="rgb(252,197,50)" fg:x="2589" fg:w="7"/><text x="45.9194%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="45.6694%" y="629" width="0.1235%" height="15" fill="rgb(251,211,41)" fg:x="2589" fg:w="7"/><text x="45.9194%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="45.7047%" y="613" width="0.0882%" height="15" fill="rgb(229,211,5)" fg:x="2591" fg:w="5"/><text x="45.9547%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="45.7047%" y="597" width="0.0882%" height="15" fill="rgb(239,36,31)" fg:x="2591" fg:w="5"/><text x="45.9547%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.7753%" y="581" width="0.0176%" height="15" fill="rgb(248,67,31)" fg:x="2595" fg:w="1"/><text x="46.0253%" y="591.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (37 samples, 0.65%)</title><rect x="45.6518%" y="837" width="0.6527%" height="15" fill="rgb(249,55,44)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (37 samples, 0.65%)</title><rect x="45.6518%" y="821" width="0.6527%" height="15" fill="rgb(216,82,12)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (37 samples, 0.65%)</title><rect x="45.6518%" y="805" width="0.6527%" height="15" fill="rgb(242,174,1)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (37 samples, 0.65%)</title><rect x="45.6518%" y="789" width="0.6527%" height="15" fill="rgb(208,120,29)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="799.50"></text></g><g><title>std::allocator&lt;CTxIn&gt;::allocate (37 samples, 0.65%)</title><rect x="45.6518%" y="773" width="0.6527%" height="15" fill="rgb(221,105,43)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (37 samples, 0.65%)</title><rect x="45.6518%" y="757" width="0.6527%" height="15" fill="rgb(234,124,22)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="767.50"></text></g><g><title>operator new (37 samples, 0.65%)</title><rect x="45.6518%" y="741" width="0.6527%" height="15" fill="rgb(212,23,30)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="751.50"></text></g><g><title>malloc (37 samples, 0.65%)</title><rect x="45.6518%" y="725" width="0.6527%" height="15" fill="rgb(219,122,53)" fg:x="2588" fg:w="37"/><text x="45.9018%" y="735.50"></text></g><g><title>_int_malloc (29 samples, 0.51%)</title><rect x="45.7929%" y="709" width="0.5116%" height="15" fill="rgb(248,84,24)" fg:x="2596" fg:w="29"/><text x="46.0429%" y="719.50"></text></g><g><title>malloc_consolidate (14 samples, 0.25%)</title><rect x="46.0575%" y="693" width="0.2470%" height="15" fill="rgb(245,115,18)" fg:x="2611" fg:w="14"/><text x="46.3075%" y="703.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3045%" y="837" width="0.0176%" height="15" fill="rgb(227,176,51)" fg:x="2625" fg:w="1"/><text x="46.5545%" y="847.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3221%" y="629" width="0.0176%" height="15" fill="rgb(229,63,42)" fg:x="2626" fg:w="1"/><text x="46.5721%" y="639.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3221%" y="613" width="0.0176%" height="15" fill="rgb(247,202,24)" fg:x="2626" fg:w="1"/><text x="46.5721%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="46.3221%" y="597" width="0.0176%" height="15" fill="rgb(244,173,20)" fg:x="2626" fg:w="1"/><text x="46.5721%" y="607.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="46.3221%" y="581" width="0.0176%" height="15" fill="rgb(242,81,47)" fg:x="2626" fg:w="1"/><text x="46.5721%" y="591.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.3221%" y="565" width="0.0176%" height="15" fill="rgb(231,185,54)" fg:x="2626" fg:w="1"/><text x="46.5721%" y="575.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="837" width="0.0529%" height="15" fill="rgb(243,55,32)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="821" width="0.0529%" height="15" fill="rgb(208,167,19)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="831.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="805" width="0.0529%" height="15" fill="rgb(231,72,35)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="815.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="789" width="0.0529%" height="15" fill="rgb(250,173,51)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="773" width="0.0529%" height="15" fill="rgb(209,5,22)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="757" width="0.0529%" height="15" fill="rgb(250,174,19)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="741" width="0.0529%" height="15" fill="rgb(217,3,49)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="725" width="0.0529%" height="15" fill="rgb(218,225,5)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="709" width="0.0529%" height="15" fill="rgb(236,89,11)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="693" width="0.0529%" height="15" fill="rgb(206,33,28)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="677" width="0.0529%" height="15" fill="rgb(241,56,42)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="661" width="0.0529%" height="15" fill="rgb(222,44,11)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (3 samples, 0.05%)</title><rect x="46.3221%" y="645" width="0.0529%" height="15" fill="rgb(234,111,20)" fg:x="2626" fg:w="3"/><text x="46.5721%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="46.3397%" y="629" width="0.0353%" height="15" fill="rgb(237,77,6)" fg:x="2627" fg:w="2"/><text x="46.5897%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="613" width="0.0176%" height="15" fill="rgb(235,111,23)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="623.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="597" width="0.0176%" height="15" fill="rgb(251,135,29)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="581" width="0.0176%" height="15" fill="rgb(217,57,1)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="591.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="565" width="0.0176%" height="15" fill="rgb(249,119,31)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="575.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="549" width="0.0176%" height="15" fill="rgb(233,164,33)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="559.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="533" width="0.0176%" height="15" fill="rgb(250,217,43)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="543.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="517" width="0.0176%" height="15" fill="rgb(232,154,50)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="527.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="501" width="0.0176%" height="15" fill="rgb(227,190,8)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="511.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="485" width="0.0176%" height="15" fill="rgb(209,217,32)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="495.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="469" width="0.0176%" height="15" fill="rgb(243,203,50)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="479.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="453" width="0.0176%" height="15" fill="rgb(232,152,27)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="463.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="437" width="0.0176%" height="15" fill="rgb(240,34,29)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="447.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="421" width="0.0176%" height="15" fill="rgb(215,185,52)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="431.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="405" width="0.0176%" height="15" fill="rgb(240,89,49)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="415.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="389" width="0.0176%" height="15" fill="rgb(225,12,52)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="399.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="373" width="0.0176%" height="15" fill="rgb(239,128,45)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="383.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3574%" y="357" width="0.0176%" height="15" fill="rgb(211,78,47)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="367.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="46.3574%" y="341" width="0.0176%" height="15" fill="rgb(232,31,21)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="351.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="46.3574%" y="325" width="0.0176%" height="15" fill="rgb(222,168,14)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="335.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.3574%" y="309" width="0.0176%" height="15" fill="rgb(209,128,24)" fg:x="2628" fg:w="1"/><text x="46.6074%" y="319.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="821" width="0.0176%" height="15" fill="rgb(249,35,13)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="831.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="805" width="0.0176%" height="15" fill="rgb(218,7,2)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="815.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="789" width="0.0176%" height="15" fill="rgb(238,107,27)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="799.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="773" width="0.0176%" height="15" fill="rgb(217,88,38)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="783.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="757" width="0.0176%" height="15" fill="rgb(230,207,0)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="767.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="741" width="0.0176%" height="15" fill="rgb(249,64,54)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="751.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="725" width="0.0176%" height="15" fill="rgb(231,7,11)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="735.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="709" width="0.0176%" height="15" fill="rgb(205,149,21)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="719.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="693" width="0.0176%" height="15" fill="rgb(215,126,34)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="703.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="677" width="0.0176%" height="15" fill="rgb(241,132,45)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="687.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="661" width="0.0176%" height="15" fill="rgb(252,69,32)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="671.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (1 samples, 0.02%)</title><rect x="46.3750%" y="645" width="0.0176%" height="15" fill="rgb(232,204,19)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="629" width="0.0176%" height="15" fill="rgb(249,15,47)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="639.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.3750%" y="613" width="0.0176%" height="15" fill="rgb(209,227,23)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="46.3750%" y="597" width="0.0176%" height="15" fill="rgb(248,92,24)" fg:x="2629" fg:w="1"/><text x="46.6250%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="46.3750%" y="837" width="0.0353%" height="15" fill="rgb(247,59,2)" fg:x="2629" fg:w="2"/><text x="46.6250%" y="847.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::operator= (1 samples, 0.02%)</title><rect x="46.3927%" y="821" width="0.0176%" height="15" fill="rgb(221,30,5)" fg:x="2630" fg:w="1"/><text x="46.6427%" y="831.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.02%)</title><rect x="46.3927%" y="805" width="0.0176%" height="15" fill="rgb(208,108,53)" fg:x="2630" fg:w="1"/><text x="46.6427%" y="815.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::swap (1 samples, 0.02%)</title><rect x="46.3927%" y="789" width="0.0176%" height="15" fill="rgb(211,183,26)" fg:x="2630" fg:w="1"/><text x="46.6427%" y="799.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (1 samples, 0.02%)</title><rect x="46.3927%" y="773" width="0.0176%" height="15" fill="rgb(232,132,4)" fg:x="2630" fg:w="1"/><text x="46.6427%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;) (56 samples, 0.99%)</title><rect x="45.4401%" y="917" width="0.9878%" height="15" fill="rgb(253,128,37)" fg:x="2576" fg:w="56"/><text x="45.6901%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (56 samples, 0.99%)</title><rect x="45.4401%" y="901" width="0.9878%" height="15" fill="rgb(221,58,24)" fg:x="2576" fg:w="56"/><text x="45.6901%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt; &gt; (56 samples, 0.99%)</title><rect x="45.4401%" y="885" width="0.9878%" height="15" fill="rgb(230,54,45)" fg:x="2576" fg:w="56"/><text x="45.6901%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (56 samples, 0.99%)</title><rect x="45.4401%" y="869" width="0.9878%" height="15" fill="rgb(254,21,18)" fg:x="2576" fg:w="56"/><text x="45.6901%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (50 samples, 0.88%)</title><rect x="45.5460%" y="853" width="0.8820%" height="15" fill="rgb(221,108,0)" fg:x="2582" fg:w="50"/><text x="45.7960%" y="863.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.4103%" y="837" width="0.0176%" height="15" fill="rgb(206,95,1)" fg:x="2631" fg:w="1"/><text x="46.6603%" y="847.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.4103%" y="821" width="0.0176%" height="15" fill="rgb(237,52,5)" fg:x="2631" fg:w="1"/><text x="46.6603%" y="831.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4279%" y="853" width="0.0176%" height="15" fill="rgb(218,150,34)" fg:x="2632" fg:w="1"/><text x="46.6779%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="46.4456%" y="853" width="0.0176%" height="15" fill="rgb(235,194,28)" fg:x="2633" fg:w="1"/><text x="46.6956%" y="863.50"></text></g><g><title>CScript::CScript (1 samples, 0.02%)</title><rect x="46.4632%" y="773" width="0.0176%" height="15" fill="rgb(245,92,18)" fg:x="2634" fg:w="1"/><text x="46.7132%" y="783.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector (1 samples, 0.02%)</title><rect x="46.4632%" y="757" width="0.0176%" height="15" fill="rgb(253,203,53)" fg:x="2634" fg:w="1"/><text x="46.7132%" y="767.50"></text></g><g><title>CTxIn&amp; std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::emplace_back&lt;&gt; (2 samples, 0.04%)</title><rect x="46.4632%" y="837" width="0.0353%" height="15" fill="rgb(249,185,47)" fg:x="2634" fg:w="2"/><text x="46.7132%" y="847.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::construct&lt;CTxIn&gt; (2 samples, 0.04%)</title><rect x="46.4632%" y="821" width="0.0353%" height="15" fill="rgb(252,194,52)" fg:x="2634" fg:w="2"/><text x="46.7132%" y="831.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="46.4632%" y="805" width="0.0353%" height="15" fill="rgb(210,53,36)" fg:x="2634" fg:w="2"/><text x="46.7132%" y="815.50"></text></g><g><title>CTxIn::CTxIn (2 samples, 0.04%)</title><rect x="46.4632%" y="789" width="0.0353%" height="15" fill="rgb(237,37,25)" fg:x="2634" fg:w="2"/><text x="46.7132%" y="799.50"></text></g><g><title>CScriptWitness::CScriptWitness (1 samples, 0.02%)</title><rect x="46.4809%" y="773" width="0.0176%" height="15" fill="rgb(242,116,27)" fg:x="2635" fg:w="1"/><text x="46.7309%" y="783.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="46.4809%" y="757" width="0.0176%" height="15" fill="rgb(213,185,26)" fg:x="2635" fg:w="1"/><text x="46.7309%" y="767.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="46.4809%" y="741" width="0.0176%" height="15" fill="rgb(225,204,8)" fg:x="2635" fg:w="1"/><text x="46.7309%" y="751.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="46.4809%" y="725" width="0.0176%" height="15" fill="rgb(254,111,37)" fg:x="2635" fg:w="1"/><text x="46.7309%" y="735.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="46.4809%" y="709" width="0.0176%" height="15" fill="rgb(242,35,9)" fg:x="2635" fg:w="1"/><text x="46.7309%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="46.4632%" y="853" width="0.0529%" height="15" fill="rgb(232,138,49)" fg:x="2634" fg:w="3"/><text x="46.7132%" y="863.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="837" width="0.0176%" height="15" fill="rgb(247,56,4)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="821" width="0.0176%" height="15" fill="rgb(226,179,17)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="831.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="805" width="0.0176%" height="15" fill="rgb(216,163,45)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="815.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="789" width="0.0176%" height="15" fill="rgb(211,157,3)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="799.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="773" width="0.0176%" height="15" fill="rgb(234,44,20)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="757" width="0.0176%" height="15" fill="rgb(254,138,23)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="741" width="0.0176%" height="15" fill="rgb(206,119,39)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="725" width="0.0176%" height="15" fill="rgb(231,105,52)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="735.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="709" width="0.0176%" height="15" fill="rgb(250,20,5)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="719.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="693" width="0.0176%" height="15" fill="rgb(215,198,30)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="703.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="677" width="0.0176%" height="15" fill="rgb(246,142,8)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="661" width="0.0176%" height="15" fill="rgb(243,26,38)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="645" width="0.0176%" height="15" fill="rgb(205,133,28)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="655.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="629" width="0.0176%" height="15" fill="rgb(212,34,0)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="639.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="613" width="0.0176%" height="15" fill="rgb(251,226,22)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="623.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="597" width="0.0176%" height="15" fill="rgb(252,119,9)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="46.4985%" y="581" width="0.0176%" height="15" fill="rgb(213,150,50)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="591.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="46.4985%" y="565" width="0.0176%" height="15" fill="rgb(212,24,39)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="575.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.4985%" y="549" width="0.0176%" height="15" fill="rgb(213,46,39)" fg:x="2636" fg:w="1"/><text x="46.7485%" y="559.50"></text></g><g><title>__lll_lock_wake_private (7 samples, 0.12%)</title><rect x="46.5161%" y="709" width="0.1235%" height="15" fill="rgb(239,106,12)" fg:x="2637" fg:w="7"/><text x="46.7661%" y="719.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="46.5161%" y="693" width="0.1235%" height="15" fill="rgb(249,229,21)" fg:x="2637" fg:w="7"/><text x="46.7661%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="46.5161%" y="677" width="0.1235%" height="15" fill="rgb(212,158,3)" fg:x="2637" fg:w="7"/><text x="46.7661%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="46.5161%" y="661" width="0.1235%" height="15" fill="rgb(253,26,48)" fg:x="2637" fg:w="7"/><text x="46.7661%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="46.5338%" y="645" width="0.1058%" height="15" fill="rgb(238,178,20)" fg:x="2638" fg:w="6"/><text x="46.7838%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="46.5338%" y="629" width="0.1058%" height="15" fill="rgb(208,86,15)" fg:x="2638" fg:w="6"/><text x="46.7838%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="46.5338%" y="613" width="0.1058%" height="15" fill="rgb(239,42,53)" fg:x="2638" fg:w="6"/><text x="46.7838%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="46.5338%" y="597" width="0.1058%" height="15" fill="rgb(245,226,8)" fg:x="2638" fg:w="6"/><text x="46.7838%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="46.5867%" y="581" width="0.0529%" height="15" fill="rgb(216,176,32)" fg:x="2641" fg:w="3"/><text x="46.8367%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="46.6043%" y="565" width="0.0353%" height="15" fill="rgb(231,186,21)" fg:x="2642" fg:w="2"/><text x="46.8543%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6220%" y="549" width="0.0176%" height="15" fill="rgb(205,95,49)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6220%" y="533" width="0.0176%" height="15" fill="rgb(217,145,8)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6220%" y="517" width="0.0176%" height="15" fill="rgb(239,144,48)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6220%" y="501" width="0.0176%" height="15" fill="rgb(214,189,23)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6220%" y="485" width="0.0176%" height="15" fill="rgb(229,157,17)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="495.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="46.6220%" y="469" width="0.0176%" height="15" fill="rgb(230,5,48)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6220%" y="453" width="0.0176%" height="15" fill="rgb(224,156,48)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.6220%" y="437" width="0.0176%" height="15" fill="rgb(223,14,29)" fg:x="2643" fg:w="1"/><text x="46.8720%" y="447.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (28 samples, 0.49%)</title><rect x="46.5161%" y="837" width="0.4939%" height="15" fill="rgb(229,96,36)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="847.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (28 samples, 0.49%)</title><rect x="46.5161%" y="821" width="0.4939%" height="15" fill="rgb(231,102,53)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="831.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_allocate (28 samples, 0.49%)</title><rect x="46.5161%" y="805" width="0.4939%" height="15" fill="rgb(210,77,38)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::allocate (28 samples, 0.49%)</title><rect x="46.5161%" y="789" width="0.4939%" height="15" fill="rgb(235,131,6)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="799.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::allocate (28 samples, 0.49%)</title><rect x="46.5161%" y="773" width="0.4939%" height="15" fill="rgb(252,55,38)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="783.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::allocate (28 samples, 0.49%)</title><rect x="46.5161%" y="757" width="0.4939%" height="15" fill="rgb(246,38,14)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="767.50"></text></g><g><title>operator new (28 samples, 0.49%)</title><rect x="46.5161%" y="741" width="0.4939%" height="15" fill="rgb(242,27,5)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="751.50"></text></g><g><title>malloc (28 samples, 0.49%)</title><rect x="46.5161%" y="725" width="0.4939%" height="15" fill="rgb(228,65,35)" fg:x="2637" fg:w="28"/><text x="46.7661%" y="735.50"></text></g><g><title>_int_malloc (21 samples, 0.37%)</title><rect x="46.6396%" y="709" width="0.3704%" height="15" fill="rgb(245,93,11)" fg:x="2644" fg:w="21"/><text x="46.8896%" y="719.50"></text></g><g><title>malloc_consolidate (13 samples, 0.23%)</title><rect x="46.7807%" y="693" width="0.2293%" height="15" fill="rgb(213,1,31)" fg:x="2652" fg:w="13"/><text x="47.0307%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="677" width="0.0176%" height="15" fill="rgb(237,205,14)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="661" width="0.0176%" height="15" fill="rgb(232,118,45)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="645" width="0.0176%" height="15" fill="rgb(218,5,6)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="629" width="0.0176%" height="15" fill="rgb(251,87,51)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="613" width="0.0176%" height="15" fill="rgb(207,225,20)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="597" width="0.0176%" height="15" fill="rgb(222,78,54)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="607.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="46.9924%" y="581" width="0.0176%" height="15" fill="rgb(232,85,16)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="591.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.02%)</title><rect x="46.9924%" y="565" width="0.0176%" height="15" fill="rgb(244,25,33)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="549" width="0.0176%" height="15" fill="rgb(233,24,36)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="533" width="0.0176%" height="15" fill="rgb(253,49,54)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="517" width="0.0176%" height="15" fill="rgb(245,12,22)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="501" width="0.0176%" height="15" fill="rgb(253,141,28)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.9924%" y="485" width="0.0176%" height="15" fill="rgb(225,207,27)" fg:x="2664" fg:w="1"/><text x="47.2424%" y="495.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="47.0101%" y="629" width="0.0353%" height="15" fill="rgb(220,84,2)" fg:x="2665" fg:w="2"/><text x="47.2601%" y="639.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (9 samples, 0.16%)</title><rect x="47.0630%" y="613" width="0.1588%" height="15" fill="rgb(224,37,37)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="623.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize_uninitialized (9 samples, 0.16%)</title><rect x="47.0630%" y="597" width="0.1588%" height="15" fill="rgb(220,143,18)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="607.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::change_capacity (9 samples, 0.16%)</title><rect x="47.0630%" y="581" width="0.1588%" height="15" fill="rgb(210,88,33)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="591.50"></text></g><g><title>malloc (9 samples, 0.16%)</title><rect x="47.0630%" y="565" width="0.1588%" height="15" fill="rgb(219,87,51)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="575.50"></text></g><g><title>__lll_lock_wake_private (9 samples, 0.16%)</title><rect x="47.0630%" y="549" width="0.1588%" height="15" fill="rgb(211,7,35)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="559.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="47.0630%" y="533" width="0.1588%" height="15" fill="rgb(232,77,2)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="543.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="47.0630%" y="517" width="0.1588%" height="15" fill="rgb(249,94,25)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="527.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="47.0630%" y="501" width="0.1588%" height="15" fill="rgb(215,112,2)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="511.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="47.0630%" y="485" width="0.1588%" height="15" fill="rgb(226,115,48)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="495.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="47.0630%" y="469" width="0.1588%" height="15" fill="rgb(249,196,10)" fg:x="2668" fg:w="9"/><text x="47.3130%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="47.0983%" y="453" width="0.1235%" height="15" fill="rgb(237,109,14)" fg:x="2670" fg:w="7"/><text x="47.3483%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="47.0983%" y="437" width="0.1235%" height="15" fill="rgb(217,103,53)" fg:x="2670" fg:w="7"/><text x="47.3483%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="47.1865%" y="421" width="0.0353%" height="15" fill="rgb(244,137,9)" fg:x="2675" fg:w="2"/><text x="47.4365%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="47.1865%" y="405" width="0.0353%" height="15" fill="rgb(227,201,3)" fg:x="2675" fg:w="2"/><text x="47.4365%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.2041%" y="389" width="0.0176%" height="15" fill="rgb(243,94,6)" fg:x="2676" fg:w="1"/><text x="47.4541%" y="399.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (11 samples, 0.19%)</title><rect x="47.0453%" y="629" width="0.1940%" height="15" fill="rgb(235,118,5)" fg:x="2667" fg:w="11"/><text x="47.2953%" y="639.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.2217%" y="613" width="0.0176%" height="15" fill="rgb(247,10,30)" fg:x="2677" fg:w="1"/><text x="47.4717%" y="623.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.2217%" y="597" width="0.0176%" height="15" fill="rgb(205,26,28)" fg:x="2677" fg:w="1"/><text x="47.4717%" y="607.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;) (48 samples, 0.85%)</title><rect x="46.4279%" y="917" width="0.8467%" height="15" fill="rgb(206,99,35)" fg:x="2632" fg:w="48"/><text x="46.6779%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (48 samples, 0.85%)</title><rect x="46.4279%" y="901" width="0.8467%" height="15" fill="rgb(238,130,40)" fg:x="2632" fg:w="48"/><text x="46.6779%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt; &gt; (48 samples, 0.85%)</title><rect x="46.4279%" y="885" width="0.8467%" height="15" fill="rgb(224,126,31)" fg:x="2632" fg:w="48"/><text x="46.6779%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (48 samples, 0.85%)</title><rect x="46.4279%" y="869" width="0.8467%" height="15" fill="rgb(254,105,17)" fg:x="2632" fg:w="48"/><text x="46.6779%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (43 samples, 0.76%)</title><rect x="46.5161%" y="853" width="0.7585%" height="15" fill="rgb(216,87,36)" fg:x="2637" fg:w="43"/><text x="46.7661%" y="863.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="837" width="0.2646%" height="15" fill="rgb(240,21,12)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="821" width="0.2646%" height="15" fill="rgb(245,192,34)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="831.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="805" width="0.2646%" height="15" fill="rgb(226,100,49)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="815.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="789" width="0.2646%" height="15" fill="rgb(245,188,27)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="799.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="773" width="0.2646%" height="15" fill="rgb(212,170,8)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="783.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="757" width="0.2646%" height="15" fill="rgb(217,113,29)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="767.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="741" width="0.2646%" height="15" fill="rgb(237,30,3)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript&amp;&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="725" width="0.2646%" height="15" fill="rgb(227,19,28)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="735.50"></text></g><g><title>void CScript::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="709" width="0.2646%" height="15" fill="rgb(239,172,45)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="719.50"></text></g><g><title>void CScript::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="693" width="0.2646%" height="15" fill="rgb(254,55,39)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="703.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CScript, ActionUnserialize&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="677" width="0.2646%" height="15" fill="rgb(249,208,12)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="687.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="661" width="0.2646%" height="15" fill="rgb(240,52,13)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="671.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt;&amp;&gt; (15 samples, 0.26%)</title><rect x="47.0101%" y="645" width="0.2646%" height="15" fill="rgb(252,149,13)" fg:x="2665" fg:w="15"/><text x="47.2601%" y="655.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="47.2394%" y="629" width="0.0353%" height="15" fill="rgb(232,81,48)" fg:x="2678" fg:w="2"/><text x="47.4894%" y="639.50"></text></g><g><title>__lll_lock_wake_private (8 samples, 0.14%)</title><rect x="47.2923%" y="709" width="0.1411%" height="15" fill="rgb(222,144,2)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="719.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="47.2923%" y="693" width="0.1411%" height="15" fill="rgb(216,81,32)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="703.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="47.2923%" y="677" width="0.1411%" height="15" fill="rgb(244,78,51)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="47.2923%" y="661" width="0.1411%" height="15" fill="rgb(217,66,21)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="671.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="47.2923%" y="645" width="0.1411%" height="15" fill="rgb(247,101,42)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="47.2923%" y="629" width="0.1411%" height="15" fill="rgb(227,81,39)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="639.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="47.2923%" y="613" width="0.1411%" height="15" fill="rgb(220,223,44)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="623.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="47.2923%" y="597" width="0.1411%" height="15" fill="rgb(205,218,2)" fg:x="2681" fg:w="8"/><text x="47.5423%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="47.3981%" y="581" width="0.0353%" height="15" fill="rgb(212,207,28)" fg:x="2687" fg:w="2"/><text x="47.6481%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4158%" y="565" width="0.0176%" height="15" fill="rgb(224,12,41)" fg:x="2688" fg:w="1"/><text x="47.6658%" y="575.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (26 samples, 0.46%)</title><rect x="47.2747%" y="837" width="0.4586%" height="15" fill="rgb(216,118,12)" fg:x="2680" fg:w="26"/><text x="47.5247%" y="847.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (25 samples, 0.44%)</title><rect x="47.2923%" y="821" width="0.4410%" height="15" fill="rgb(252,97,46)" fg:x="2681" fg:w="25"/><text x="47.5423%" y="831.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (25 samples, 0.44%)</title><rect x="47.2923%" y="805" width="0.4410%" height="15" fill="rgb(244,206,19)" fg:x="2681" fg:w="25"/><text x="47.5423%" y="815.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (25 samples, 0.44%)</title><rect x="47.2923%" y="789" width="0.4410%" height="15" fill="rgb(231,84,31)" fg:x="2681" fg:w="25"/><text x="47.5423%" y="799.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (25 samples, 0.44%)</title><rect x="47.2923%" y="773" width="0.4410%" height="15" fill="rgb(244,133,0)" fg:x="2681" fg:w="25"/><text x="47.5423%" y="783.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (25 samples, 0.44%)</title><rect x="47.2923%" y="757" width="0.4410%" height="15" fill="rgb(223,15,50)" fg:x="2681" fg:w="25"/><text x="47.5423%" y="767.50"></text></g><g><title>operator new (25 samples, 0.44%)</title><rect x="47.2923%" y="741" width="0.4410%" height="15" fill="rgb(250,118,49)" fg:x="2681" fg:w="25"/><text x="47.5423%" y="751.50"></text></g><g><title>malloc (25 samples, 0.44%)</title><rect x="47.2923%" y="725" width="0.4410%" height="15" fill="rgb(248,25,38)" fg:x="2681" fg:w="25"/><text x="47.5423%" y="735.50"></text></g><g><title>_int_malloc (17 samples, 0.30%)</title><rect x="47.4334%" y="709" width="0.2999%" height="15" fill="rgb(215,70,14)" fg:x="2689" fg:w="17"/><text x="47.6834%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="693" width="0.0176%" height="15" fill="rgb(215,28,15)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="677" width="0.0176%" height="15" fill="rgb(243,6,28)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="661" width="0.0176%" height="15" fill="rgb(222,130,1)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="645" width="0.0176%" height="15" fill="rgb(236,166,44)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="629" width="0.0176%" height="15" fill="rgb(221,108,14)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="613" width="0.0176%" height="15" fill="rgb(252,3,45)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="623.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="47.7156%" y="597" width="0.0176%" height="15" fill="rgb(237,68,30)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="581" width="0.0176%" height="15" fill="rgb(211,79,22)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.7156%" y="565" width="0.0176%" height="15" fill="rgb(252,185,21)" fg:x="2705" fg:w="1"/><text x="47.9656%" y="575.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="47.7333%" y="837" width="0.0176%" height="15" fill="rgb(225,189,26)" fg:x="2706" fg:w="1"/><text x="47.9833%" y="847.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="47.7509%" y="837" width="0.0353%" height="15" fill="rgb(241,30,40)" fg:x="2707" fg:w="2"/><text x="48.0009%" y="847.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7686%" y="821" width="0.0176%" height="15" fill="rgb(235,215,44)" fg:x="2708" fg:w="1"/><text x="48.0186%" y="831.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="47.7686%" y="805" width="0.0176%" height="15" fill="rgb(205,8,29)" fg:x="2708" fg:w="1"/><text x="48.0186%" y="815.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="47.7686%" y="789" width="0.0176%" height="15" fill="rgb(241,137,42)" fg:x="2708" fg:w="1"/><text x="48.0186%" y="799.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.7686%" y="773" width="0.0176%" height="15" fill="rgb(237,155,2)" fg:x="2708" fg:w="1"/><text x="48.0186%" y="783.50"></text></g><g><title>memset@plt (1 samples, 0.02%)</title><rect x="47.8038%" y="789" width="0.0176%" height="15" fill="rgb(245,29,42)" fg:x="2710" fg:w="1"/><text x="48.0538%" y="799.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="47.8744%" y="661" width="0.0176%" height="15" fill="rgb(234,101,35)" fg:x="2714" fg:w="1"/><text x="48.1244%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8744%" y="645" width="0.0176%" height="15" fill="rgb(228,64,37)" fg:x="2714" fg:w="1"/><text x="48.1244%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8744%" y="629" width="0.0176%" height="15" fill="rgb(217,214,36)" fg:x="2714" fg:w="1"/><text x="48.1244%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8744%" y="613" width="0.0176%" height="15" fill="rgb(243,70,3)" fg:x="2714" fg:w="1"/><text x="48.1244%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8744%" y="597" width="0.0176%" height="15" fill="rgb(253,158,52)" fg:x="2714" fg:w="1"/><text x="48.1244%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8744%" y="581" width="0.0176%" height="15" fill="rgb(234,111,54)" fg:x="2714" fg:w="1"/><text x="48.1244%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.8744%" y="565" width="0.0176%" height="15" fill="rgb(217,70,32)" fg:x="2714" fg:w="1"/><text x="48.1244%" y="575.50"></text></g><g><title>__lll_lock_wake_private (16 samples, 0.28%)</title><rect x="47.8920%" y="661" width="0.2822%" height="15" fill="rgb(234,18,33)" fg:x="2715" fg:w="16"/><text x="48.1420%" y="671.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="47.8920%" y="645" width="0.2822%" height="15" fill="rgb(234,12,49)" fg:x="2715" fg:w="16"/><text x="48.1420%" y="655.50"></text></g><g><title>[unknown] (15 samples, 0.26%)</title><rect x="47.9097%" y="629" width="0.2646%" height="15" fill="rgb(236,10,21)" fg:x="2716" fg:w="15"/><text x="48.1597%" y="639.50"></text></g><g><title>[unknown] (15 samples, 0.26%)</title><rect x="47.9097%" y="613" width="0.2646%" height="15" fill="rgb(248,182,45)" fg:x="2716" fg:w="15"/><text x="48.1597%" y="623.50"></text></g><g><title>[unknown] (14 samples, 0.25%)</title><rect x="47.9273%" y="597" width="0.2470%" height="15" fill="rgb(217,95,36)" fg:x="2717" fg:w="14"/><text x="48.1773%" y="607.50"></text></g><g><title>[unknown] (12 samples, 0.21%)</title><rect x="47.9626%" y="581" width="0.2117%" height="15" fill="rgb(212,110,31)" fg:x="2719" fg:w="12"/><text x="48.2126%" y="591.50"></text></g><g><title>[unknown] (11 samples, 0.19%)</title><rect x="47.9802%" y="565" width="0.1940%" height="15" fill="rgb(206,32,53)" fg:x="2720" fg:w="11"/><text x="48.2302%" y="575.50"></text></g><g><title>[unknown] (11 samples, 0.19%)</title><rect x="47.9802%" y="549" width="0.1940%" height="15" fill="rgb(246,141,37)" fg:x="2720" fg:w="11"/><text x="48.2302%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="48.1390%" y="533" width="0.0353%" height="15" fill="rgb(219,16,7)" fg:x="2729" fg:w="2"/><text x="48.3890%" y="543.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (32 samples, 0.56%)</title><rect x="47.8215%" y="789" width="0.5645%" height="15" fill="rgb(230,205,45)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="799.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (32 samples, 0.56%)</title><rect x="47.8215%" y="773" width="0.5645%" height="15" fill="rgb(231,43,49)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="783.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (32 samples, 0.56%)</title><rect x="47.8215%" y="757" width="0.5645%" height="15" fill="rgb(212,106,34)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (32 samples, 0.56%)</title><rect x="47.8215%" y="741" width="0.5645%" height="15" fill="rgb(206,83,17)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="751.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::allocate (32 samples, 0.56%)</title><rect x="47.8215%" y="725" width="0.5645%" height="15" fill="rgb(244,154,49)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="735.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (32 samples, 0.56%)</title><rect x="47.8215%" y="709" width="0.5645%" height="15" fill="rgb(244,149,49)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="719.50"></text></g><g><title>operator new (32 samples, 0.56%)</title><rect x="47.8215%" y="693" width="0.5645%" height="15" fill="rgb(227,134,18)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="703.50"></text></g><g><title>malloc (32 samples, 0.56%)</title><rect x="47.8215%" y="677" width="0.5645%" height="15" fill="rgb(237,116,36)" fg:x="2711" fg:w="32"/><text x="48.0715%" y="687.50"></text></g><g><title>_int_malloc (12 samples, 0.21%)</title><rect x="48.1743%" y="661" width="0.2117%" height="15" fill="rgb(205,129,40)" fg:x="2731" fg:w="12"/><text x="48.4243%" y="671.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.3860%" y="789" width="0.0529%" height="15" fill="rgb(236,178,4)" fg:x="2743" fg:w="3"/><text x="48.6360%" y="799.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.4212%" y="773" width="0.0176%" height="15" fill="rgb(251,76,53)" fg:x="2745" fg:w="1"/><text x="48.6712%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="48.4212%" y="757" width="0.0176%" height="15" fill="rgb(242,92,40)" fg:x="2745" fg:w="1"/><text x="48.6712%" y="767.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="48.4212%" y="741" width="0.0176%" height="15" fill="rgb(209,45,30)" fg:x="2745" fg:w="1"/><text x="48.6712%" y="751.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="48.4212%" y="725" width="0.0176%" height="15" fill="rgb(218,157,36)" fg:x="2745" fg:w="1"/><text x="48.6712%" y="735.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="48.4565%" y="517" width="0.0176%" height="15" fill="rgb(222,186,16)" fg:x="2747" fg:w="1"/><text x="48.7065%" y="527.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="48.4742%" y="485" width="0.0176%" height="15" fill="rgb(254,72,35)" fg:x="2748" fg:w="1"/><text x="48.7242%" y="495.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="48.4742%" y="469" width="0.0176%" height="15" fill="rgb(224,25,35)" fg:x="2748" fg:w="1"/><text x="48.7242%" y="479.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="48.4742%" y="453" width="0.0176%" height="15" fill="rgb(206,135,52)" fg:x="2748" fg:w="1"/><text x="48.7242%" y="463.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (41 samples, 0.72%)</title><rect x="47.7862%" y="837" width="0.7232%" height="15" fill="rgb(229,174,47)" fg:x="2709" fg:w="41"/><text x="48.0362%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (41 samples, 0.72%)</title><rect x="47.7862%" y="821" width="0.7232%" height="15" fill="rgb(242,184,21)" fg:x="2709" fg:w="41"/><text x="48.0362%" y="831.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (40 samples, 0.71%)</title><rect x="47.8038%" y="805" width="0.7056%" height="15" fill="rgb(213,22,45)" fg:x="2710" fg:w="40"/><text x="48.0538%" y="815.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="789" width="0.0706%" height="15" fill="rgb(237,81,54)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="799.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="773" width="0.0706%" height="15" fill="rgb(248,177,18)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="783.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="757" width="0.0706%" height="15" fill="rgb(254,31,16)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="767.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="741" width="0.0706%" height="15" fill="rgb(235,20,31)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="751.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="725" width="0.0706%" height="15" fill="rgb(240,56,43)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="735.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="709" width="0.0706%" height="15" fill="rgb(237,197,51)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="719.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="693" width="0.0706%" height="15" fill="rgb(241,162,44)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="703.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="677" width="0.0706%" height="15" fill="rgb(224,23,20)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="687.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="661" width="0.0706%" height="15" fill="rgb(250,109,34)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="671.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="645" width="0.0706%" height="15" fill="rgb(214,175,50)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="655.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="629" width="0.0706%" height="15" fill="rgb(213,182,5)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="639.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="613" width="0.0706%" height="15" fill="rgb(209,199,19)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="623.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (4 samples, 0.07%)</title><rect x="48.4389%" y="597" width="0.0706%" height="15" fill="rgb(236,224,42)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="607.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="581" width="0.0706%" height="15" fill="rgb(246,226,29)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="591.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="565" width="0.0706%" height="15" fill="rgb(227,223,11)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="575.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="549" width="0.0706%" height="15" fill="rgb(219,7,51)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="559.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="48.4389%" y="533" width="0.0706%" height="15" fill="rgb(245,167,10)" fg:x="2746" fg:w="4"/><text x="48.6889%" y="543.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="48.4742%" y="517" width="0.0353%" height="15" fill="rgb(237,224,16)" fg:x="2748" fg:w="2"/><text x="48.7242%" y="527.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (2 samples, 0.04%)</title><rect x="48.4742%" y="501" width="0.0353%" height="15" fill="rgb(226,132,13)" fg:x="2748" fg:w="2"/><text x="48.7242%" y="511.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="48.4918%" y="485" width="0.0176%" height="15" fill="rgb(214,140,3)" fg:x="2749" fg:w="1"/><text x="48.7418%" y="495.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="48.4918%" y="469" width="0.0176%" height="15" fill="rgb(221,177,4)" fg:x="2749" fg:w="1"/><text x="48.7418%" y="479.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (71 samples, 1.25%)</title><rect x="47.2747%" y="917" width="1.2524%" height="15" fill="rgb(238,139,3)" fg:x="2680" fg:w="71"/><text x="47.5247%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (71 samples, 1.25%)</title><rect x="47.2747%" y="901" width="1.2524%" height="15" fill="rgb(216,17,39)" fg:x="2680" fg:w="71"/><text x="47.5247%" y="911.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (71 samples, 1.25%)</title><rect x="47.2747%" y="885" width="1.2524%" height="15" fill="rgb(238,120,9)" fg:x="2680" fg:w="71"/><text x="47.5247%" y="895.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (71 samples, 1.25%)</title><rect x="47.2747%" y="869" width="1.2524%" height="15" fill="rgb(244,92,53)" fg:x="2680" fg:w="71"/><text x="47.5247%" y="879.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (71 samples, 1.25%)</title><rect x="47.2747%" y="853" width="1.2524%" height="15" fill="rgb(224,148,33)" fg:x="2680" fg:w="71"/><text x="47.5247%" y="863.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="48.5094%" y="837" width="0.0176%" height="15" fill="rgb(243,6,36)" fg:x="2750" fg:w="1"/><text x="48.7594%" y="847.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="48.5271%" y="821" width="0.0176%" height="15" fill="rgb(230,102,11)" fg:x="2751" fg:w="1"/><text x="48.7771%" y="831.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="48.5271%" y="837" width="0.0353%" height="15" fill="rgb(234,148,36)" fg:x="2751" fg:w="2"/><text x="48.7771%" y="847.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="48.5447%" y="821" width="0.0176%" height="15" fill="rgb(251,153,25)" fg:x="2752" fg:w="1"/><text x="48.7947%" y="831.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="48.5624%" y="805" width="0.0176%" height="15" fill="rgb(215,129,8)" fg:x="2753" fg:w="1"/><text x="48.8124%" y="815.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (181 samples, 3.19%)</title><rect x="45.4401%" y="965" width="3.1928%" height="15" fill="rgb(224,128,35)" fg:x="2576" fg:w="181"/><text x="45.6901%" y="975.50">CMu..</text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (181 samples, 3.19%)</title><rect x="45.4401%" y="949" width="3.1928%" height="15" fill="rgb(237,56,52)" fg:x="2576" fg:w="181"/><text x="45.6901%" y="959.50">voi..</text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (181 samples, 3.19%)</title><rect x="45.4401%" y="933" width="3.1928%" height="15" fill="rgb(234,213,19)" fg:x="2576" fg:w="181"/><text x="45.6901%" y="943.50">voi..</text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;unsigned int&amp;&gt;(unsigned int&amp;) (6 samples, 0.11%)</title><rect x="48.5271%" y="917" width="0.1058%" height="15" fill="rgb(252,82,23)" fg:x="2751" fg:w="6"/><text x="48.7771%" y="927.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="48.5271%" y="901" width="0.1058%" height="15" fill="rgb(254,201,21)" fg:x="2751" fg:w="6"/><text x="48.7771%" y="911.50"></text></g><g><title>unsigned int ser_readdata32&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="48.5271%" y="885" width="0.1058%" height="15" fill="rgb(250,186,11)" fg:x="2751" fg:w="6"/><text x="48.7771%" y="895.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (6 samples, 0.11%)</title><rect x="48.5271%" y="869" width="0.1058%" height="15" fill="rgb(211,174,5)" fg:x="2751" fg:w="6"/><text x="48.7771%" y="879.50"></text></g><g><title>sha256_x86_shani::Transform (6 samples, 0.11%)</title><rect x="48.5271%" y="853" width="0.1058%" height="15" fill="rgb(214,121,10)" fg:x="2751" fg:w="6"/><text x="48.7771%" y="863.50"></text></g><g><title>ShiftMessageB (4 samples, 0.07%)</title><rect x="48.5624%" y="837" width="0.0706%" height="15" fill="rgb(241,66,2)" fg:x="2753" fg:w="4"/><text x="48.8124%" y="847.50"></text></g><g><title>ShiftMessageC (4 samples, 0.07%)</title><rect x="48.5624%" y="821" width="0.0706%" height="15" fill="rgb(220,167,19)" fg:x="2753" fg:w="4"/><text x="48.8124%" y="831.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.05%)</title><rect x="48.5800%" y="805" width="0.0529%" height="15" fill="rgb(231,54,50)" fg:x="2754" fg:w="3"/><text x="48.8300%" y="815.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.6329%" y="949" width="0.0176%" height="15" fill="rgb(239,217,53)" fg:x="2757" fg:w="1"/><text x="48.8829%" y="959.50"></text></g><g><title>CTransaction::ComputeHash (1 samples, 0.02%)</title><rect x="48.6506%" y="853" width="0.0176%" height="15" fill="rgb(248,8,0)" fg:x="2758" fg:w="1"/><text x="48.9006%" y="863.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="48.6682%" y="853" width="0.0176%" height="15" fill="rgb(229,118,37)" fg:x="2759" fg:w="1"/><text x="48.9182%" y="863.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="48.6682%" y="837" width="0.0176%" height="15" fill="rgb(253,223,43)" fg:x="2759" fg:w="1"/><text x="48.9182%" y="847.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="48.6682%" y="821" width="0.0176%" height="15" fill="rgb(211,77,36)" fg:x="2759" fg:w="1"/><text x="48.9182%" y="831.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="48.6682%" y="805" width="0.0176%" height="15" fill="rgb(219,3,53)" fg:x="2759" fg:w="1"/><text x="48.9182%" y="815.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.7211%" y="565" width="0.0176%" height="15" fill="rgb(244,45,42)" fg:x="2762" fg:w="1"/><text x="48.9711%" y="575.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.7211%" y="549" width="0.0176%" height="15" fill="rgb(225,95,27)" fg:x="2762" fg:w="1"/><text x="48.9711%" y="559.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="48.6858%" y="581" width="0.0706%" height="15" fill="rgb(207,74,8)" fg:x="2760" fg:w="4"/><text x="48.9358%" y="591.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="48.7388%" y="565" width="0.0176%" height="15" fill="rgb(243,63,36)" fg:x="2763" fg:w="1"/><text x="48.9888%" y="575.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="48.7388%" y="549" width="0.0176%" height="15" fill="rgb(211,180,12)" fg:x="2763" fg:w="1"/><text x="48.9888%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="48.6858%" y="645" width="0.0882%" height="15" fill="rgb(254,166,49)" fg:x="2760" fg:w="5"/><text x="48.9358%" y="655.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="48.6858%" y="629" width="0.0882%" height="15" fill="rgb(205,19,0)" fg:x="2760" fg:w="5"/><text x="48.9358%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (5 samples, 0.09%)</title><rect x="48.6858%" y="613" width="0.0882%" height="15" fill="rgb(224,172,32)" fg:x="2760" fg:w="5"/><text x="48.9358%" y="623.50"></text></g><g><title>HashWriter::write (5 samples, 0.09%)</title><rect x="48.6858%" y="597" width="0.0882%" height="15" fill="rgb(254,136,30)" fg:x="2760" fg:w="5"/><text x="48.9358%" y="607.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="581" width="0.0176%" height="15" fill="rgb(246,19,35)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="48.7564%" y="565" width="0.0176%" height="15" fill="rgb(219,24,36)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="549" width="0.0176%" height="15" fill="rgb(251,55,1)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="533" width="0.0176%" height="15" fill="rgb(218,117,39)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="517" width="0.0176%" height="15" fill="rgb(248,169,11)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="501" width="0.0176%" height="15" fill="rgb(244,40,44)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="485" width="0.0176%" height="15" fill="rgb(234,62,37)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="469" width="0.0176%" height="15" fill="rgb(207,117,42)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="479.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="453" width="0.0176%" height="15" fill="rgb(213,43,2)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="463.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="437" width="0.0176%" height="15" fill="rgb(244,202,51)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="447.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="421" width="0.0176%" height="15" fill="rgb(253,174,46)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="405" width="0.0176%" height="15" fill="rgb(251,23,1)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="415.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="389" width="0.0176%" height="15" fill="rgb(253,26,1)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="373" width="0.0176%" height="15" fill="rgb(216,89,31)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="383.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="357" width="0.0176%" height="15" fill="rgb(209,109,5)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="367.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="341" width="0.0176%" height="15" fill="rgb(229,63,13)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="351.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="325" width="0.0176%" height="15" fill="rgb(238,137,54)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="309" width="0.0176%" height="15" fill="rgb(228,1,9)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="293" width="0.0176%" height="15" fill="rgb(249,120,48)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="277" width="0.0176%" height="15" fill="rgb(209,72,36)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="287.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7564%" y="261" width="0.0176%" height="15" fill="rgb(247,98,49)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="271.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="48.7564%" y="245" width="0.0176%" height="15" fill="rgb(233,75,36)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="255.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="48.7564%" y="229" width="0.0176%" height="15" fill="rgb(225,14,24)" fg:x="2764" fg:w="1"/><text x="49.0064%" y="239.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7740%" y="549" width="0.0176%" height="15" fill="rgb(237,193,20)" fg:x="2765" fg:w="1"/><text x="49.0240%" y="559.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.7740%" y="533" width="0.0176%" height="15" fill="rgb(239,122,19)" fg:x="2765" fg:w="1"/><text x="49.0240%" y="543.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="48.7740%" y="517" width="0.0176%" height="15" fill="rgb(231,220,10)" fg:x="2765" fg:w="1"/><text x="49.0240%" y="527.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="48.7740%" y="501" width="0.0176%" height="15" fill="rgb(220,66,15)" fg:x="2765" fg:w="1"/><text x="49.0240%" y="511.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.7740%" y="485" width="0.0176%" height="15" fill="rgb(215,171,52)" fg:x="2765" fg:w="1"/><text x="49.0240%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.7917%" y="421" width="0.0176%" height="15" fill="rgb(241,169,50)" fg:x="2766" fg:w="1"/><text x="49.0417%" y="431.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="48.8093%" y="421" width="0.0176%" height="15" fill="rgb(236,189,0)" fg:x="2767" fg:w="1"/><text x="49.0593%" y="431.50"></text></g><g><title>CSHA256::CSHA256 (1 samples, 0.02%)</title><rect x="48.8093%" y="405" width="0.0176%" height="15" fill="rgb(217,147,20)" fg:x="2767" fg:w="1"/><text x="49.0593%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (4 samples, 0.07%)</title><rect x="48.7740%" y="645" width="0.0706%" height="15" fill="rgb(206,188,39)" fg:x="2765" fg:w="4"/><text x="49.0240%" y="655.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.7740%" y="629" width="0.0706%" height="15" fill="rgb(227,118,25)" fg:x="2765" fg:w="4"/><text x="49.0240%" y="639.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="48.7740%" y="613" width="0.0706%" height="15" fill="rgb(248,171,40)" fg:x="2765" fg:w="4"/><text x="49.0240%" y="623.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="48.7740%" y="597" width="0.0706%" height="15" fill="rgb(251,90,54)" fg:x="2765" fg:w="4"/><text x="49.0240%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (4 samples, 0.07%)</title><rect x="48.7740%" y="581" width="0.0706%" height="15" fill="rgb(234,11,46)" fg:x="2765" fg:w="4"/><text x="49.0240%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (4 samples, 0.07%)</title><rect x="48.7740%" y="565" width="0.0706%" height="15" fill="rgb(229,134,13)" fg:x="2765" fg:w="4"/><text x="49.0240%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (3 samples, 0.05%)</title><rect x="48.7917%" y="549" width="0.0529%" height="15" fill="rgb(223,129,3)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="559.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.7917%" y="533" width="0.0529%" height="15" fill="rgb(221,124,13)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="543.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.7917%" y="517" width="0.0529%" height="15" fill="rgb(234,3,18)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (3 samples, 0.05%)</title><rect x="48.7917%" y="501" width="0.0529%" height="15" fill="rgb(249,199,20)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="511.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (3 samples, 0.05%)</title><rect x="48.7917%" y="485" width="0.0529%" height="15" fill="rgb(224,134,6)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="48.7917%" y="469" width="0.0529%" height="15" fill="rgb(254,83,26)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="479.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="48.7917%" y="453" width="0.0529%" height="15" fill="rgb(217,88,9)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="463.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="48.7917%" y="437" width="0.0529%" height="15" fill="rgb(225,73,2)" fg:x="2766" fg:w="3"/><text x="49.0417%" y="447.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="48.8270%" y="421" width="0.0176%" height="15" fill="rgb(226,44,39)" fg:x="2768" fg:w="1"/><text x="49.0770%" y="431.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="48.8270%" y="405" width="0.0176%" height="15" fill="rgb(228,53,17)" fg:x="2768" fg:w="1"/><text x="49.0770%" y="415.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="48.8270%" y="389" width="0.0176%" height="15" fill="rgb(212,27,27)" fg:x="2768" fg:w="1"/><text x="49.0770%" y="399.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="48.8270%" y="373" width="0.0176%" height="15" fill="rgb(241,50,6)" fg:x="2768" fg:w="1"/><text x="49.0770%" y="383.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="48.8446%" y="533" width="0.0176%" height="15" fill="rgb(225,28,51)" fg:x="2769" fg:w="1"/><text x="49.0946%" y="543.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="48.8446%" y="517" width="0.0176%" height="15" fill="rgb(215,33,16)" fg:x="2769" fg:w="1"/><text x="49.0946%" y="527.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.8446%" y="501" width="0.0176%" height="15" fill="rgb(243,40,39)" fg:x="2769" fg:w="1"/><text x="49.0946%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.8446%" y="485" width="0.0176%" height="15" fill="rgb(225,11,42)" fg:x="2769" fg:w="1"/><text x="49.0946%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.8622%" y="469" width="0.0176%" height="15" fill="rgb(241,220,38)" fg:x="2770" fg:w="1"/><text x="49.1122%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (12 samples, 0.21%)</title><rect x="48.6858%" y="837" width="0.2117%" height="15" fill="rgb(244,52,35)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="821" width="0.2117%" height="15" fill="rgb(246,42,46)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="805" width="0.2117%" height="15" fill="rgb(205,184,13)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="789" width="0.2117%" height="15" fill="rgb(209,48,36)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="773" width="0.2117%" height="15" fill="rgb(244,34,51)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="757" width="0.2117%" height="15" fill="rgb(221,107,33)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="741" width="0.2117%" height="15" fill="rgb(224,203,12)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="751.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="725" width="0.2117%" height="15" fill="rgb(230,215,18)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="735.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="709" width="0.2117%" height="15" fill="rgb(206,185,35)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="719.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="693" width="0.2117%" height="15" fill="rgb(228,140,34)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="677" width="0.2117%" height="15" fill="rgb(208,93,13)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (12 samples, 0.21%)</title><rect x="48.6858%" y="661" width="0.2117%" height="15" fill="rgb(221,193,39)" fg:x="2760" fg:w="12"/><text x="48.9358%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (3 samples, 0.05%)</title><rect x="48.8446%" y="645" width="0.0529%" height="15" fill="rgb(241,132,34)" fg:x="2769" fg:w="3"/><text x="49.0946%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.8446%" y="629" width="0.0529%" height="15" fill="rgb(221,141,10)" fg:x="2769" fg:w="3"/><text x="49.0946%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="48.8446%" y="613" width="0.0529%" height="15" fill="rgb(226,90,31)" fg:x="2769" fg:w="3"/><text x="49.0946%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="48.8446%" y="597" width="0.0529%" height="15" fill="rgb(243,75,5)" fg:x="2769" fg:w="3"/><text x="49.0946%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="48.8446%" y="581" width="0.0529%" height="15" fill="rgb(227,156,21)" fg:x="2769" fg:w="3"/><text x="49.0946%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (3 samples, 0.05%)</title><rect x="48.8446%" y="565" width="0.0529%" height="15" fill="rgb(250,195,8)" fg:x="2769" fg:w="3"/><text x="49.0946%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (3 samples, 0.05%)</title><rect x="48.8446%" y="549" width="0.0529%" height="15" fill="rgb(220,134,5)" fg:x="2769" fg:w="3"/><text x="49.0946%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8622%" y="533" width="0.0353%" height="15" fill="rgb(246,106,34)" fg:x="2770" fg:w="2"/><text x="49.1122%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="48.8622%" y="517" width="0.0353%" height="15" fill="rgb(205,1,4)" fg:x="2770" fg:w="2"/><text x="49.1122%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (2 samples, 0.04%)</title><rect x="48.8622%" y="501" width="0.0353%" height="15" fill="rgb(224,151,29)" fg:x="2770" fg:w="2"/><text x="49.1122%" y="511.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="48.8622%" y="485" width="0.0353%" height="15" fill="rgb(251,196,0)" fg:x="2770" fg:w="2"/><text x="49.1122%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.8799%" y="469" width="0.0176%" height="15" fill="rgb(212,127,0)" fg:x="2771" fg:w="1"/><text x="49.1299%" y="479.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.8975%" y="757" width="0.0176%" height="15" fill="rgb(236,71,53)" fg:x="2772" fg:w="1"/><text x="49.1475%" y="767.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.8975%" y="741" width="0.0176%" height="15" fill="rgb(227,99,0)" fg:x="2772" fg:w="1"/><text x="49.1475%" y="751.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="48.9504%" y="565" width="0.0176%" height="15" fill="rgb(239,89,21)" fg:x="2775" fg:w="1"/><text x="49.2004%" y="575.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="48.9152%" y="581" width="0.0706%" height="15" fill="rgb(243,122,19)" fg:x="2773" fg:w="4"/><text x="49.1652%" y="591.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="565" width="0.0176%" height="15" fill="rgb(229,192,45)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="575.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="48.9681%" y="549" width="0.0176%" height="15" fill="rgb(235,165,35)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="533" width="0.0176%" height="15" fill="rgb(253,202,0)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="543.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="517" width="0.0176%" height="15" fill="rgb(235,51,20)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="527.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="501" width="0.0176%" height="15" fill="rgb(218,95,46)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="511.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="485" width="0.0176%" height="15" fill="rgb(212,81,10)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="495.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="469" width="0.0176%" height="15" fill="rgb(240,59,0)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="453" width="0.0176%" height="15" fill="rgb(212,191,42)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="463.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="437" width="0.0176%" height="15" fill="rgb(233,140,3)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="447.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="421" width="0.0176%" height="15" fill="rgb(215,69,23)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="431.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="405" width="0.0176%" height="15" fill="rgb(240,202,20)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="415.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="389" width="0.0176%" height="15" fill="rgb(209,146,50)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="399.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="373" width="0.0176%" height="15" fill="rgb(253,102,54)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="357" width="0.0176%" height="15" fill="rgb(250,173,47)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="367.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="341" width="0.0176%" height="15" fill="rgb(232,142,7)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="351.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="325" width="0.0176%" height="15" fill="rgb(230,157,47)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="335.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="309" width="0.0176%" height="15" fill="rgb(214,177,35)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="293" width="0.0176%" height="15" fill="rgb(234,119,46)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="277" width="0.0176%" height="15" fill="rgb(241,180,50)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="48.9681%" y="261" width="0.0176%" height="15" fill="rgb(221,54,25)" fg:x="2776" fg:w="1"/><text x="49.2181%" y="271.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="49.0034%" y="565" width="0.0176%" height="15" fill="rgb(209,157,44)" fg:x="2778" fg:w="1"/><text x="49.2534%" y="575.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="49.0034%" y="549" width="0.0176%" height="15" fill="rgb(246,115,41)" fg:x="2778" fg:w="1"/><text x="49.2534%" y="559.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.05%)</title><rect x="48.9857%" y="581" width="0.0529%" height="15" fill="rgb(229,86,1)" fg:x="2777" fg:w="3"/><text x="49.2357%" y="591.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="49.0210%" y="565" width="0.0176%" height="15" fill="rgb(240,108,53)" fg:x="2779" fg:w="1"/><text x="49.2710%" y="575.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="49.0210%" y="549" width="0.0176%" height="15" fill="rgb(227,134,2)" fg:x="2779" fg:w="1"/><text x="49.2710%" y="559.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="49.0210%" y="533" width="0.0176%" height="15" fill="rgb(213,129,25)" fg:x="2779" fg:w="1"/><text x="49.2710%" y="543.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="581" width="0.0176%" height="15" fill="rgb(226,35,21)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="591.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="49.0386%" y="565" width="0.0176%" height="15" fill="rgb(208,129,26)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="549" width="0.0176%" height="15" fill="rgb(224,83,6)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="533" width="0.0176%" height="15" fill="rgb(227,52,39)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="517" width="0.0176%" height="15" fill="rgb(241,30,17)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="501" width="0.0176%" height="15" fill="rgb(246,186,42)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="511.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="485" width="0.0176%" height="15" fill="rgb(221,169,15)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="469" width="0.0176%" height="15" fill="rgb(235,108,21)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="479.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="453" width="0.0176%" height="15" fill="rgb(219,148,30)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="463.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="437" width="0.0176%" height="15" fill="rgb(220,109,5)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="447.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="421" width="0.0176%" height="15" fill="rgb(213,203,48)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="431.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="405" width="0.0176%" height="15" fill="rgb(244,71,33)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="415.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="389" width="0.0176%" height="15" fill="rgb(209,23,2)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="373" width="0.0176%" height="15" fill="rgb(219,97,7)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="383.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="357" width="0.0176%" height="15" fill="rgb(216,161,23)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="367.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="341" width="0.0176%" height="15" fill="rgb(207,45,42)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="351.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="325" width="0.0176%" height="15" fill="rgb(241,61,4)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="309" width="0.0176%" height="15" fill="rgb(236,170,1)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="293" width="0.0176%" height="15" fill="rgb(239,72,5)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="49.0386%" y="277" width="0.0176%" height="15" fill="rgb(214,13,50)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="287.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (1 samples, 0.02%)</title><rect x="49.0386%" y="261" width="0.0176%" height="15" fill="rgb(224,88,9)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="271.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="49.0386%" y="245" width="0.0176%" height="15" fill="rgb(238,192,34)" fg:x="2780" fg:w="1"/><text x="49.2886%" y="255.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.16%)</title><rect x="48.9152%" y="645" width="0.1588%" height="15" fill="rgb(217,203,50)" fg:x="2773" fg:w="9"/><text x="49.1652%" y="655.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (9 samples, 0.16%)</title><rect x="48.9152%" y="629" width="0.1588%" height="15" fill="rgb(241,123,32)" fg:x="2773" fg:w="9"/><text x="49.1652%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (9 samples, 0.16%)</title><rect x="48.9152%" y="613" width="0.1588%" height="15" fill="rgb(248,151,39)" fg:x="2773" fg:w="9"/><text x="49.1652%" y="623.50"></text></g><g><title>HashWriter::write (9 samples, 0.16%)</title><rect x="48.9152%" y="597" width="0.1588%" height="15" fill="rgb(208,89,6)" fg:x="2773" fg:w="9"/><text x="49.1652%" y="607.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.0563%" y="581" width="0.0176%" height="15" fill="rgb(254,43,26)" fg:x="2781" fg:w="1"/><text x="49.3063%" y="591.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="49.0739%" y="533" width="0.0176%" height="15" fill="rgb(216,158,13)" fg:x="2782" fg:w="1"/><text x="49.3239%" y="543.50"></text></g><g><title>CSHA256::Write (6 samples, 0.11%)</title><rect x="49.1092%" y="485" width="0.1058%" height="15" fill="rgb(212,47,37)" fg:x="2784" fg:w="6"/><text x="49.3592%" y="495.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="49.1974%" y="469" width="0.0176%" height="15" fill="rgb(254,16,10)" fg:x="2789" fg:w="1"/><text x="49.4474%" y="479.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.2150%" y="389" width="0.0176%" height="15" fill="rgb(223,228,16)" fg:x="2790" fg:w="1"/><text x="49.4650%" y="399.50"></text></g><g><title>CSHA256::Write (9 samples, 0.16%)</title><rect x="49.0916%" y="501" width="0.1588%" height="15" fill="rgb(249,108,50)" fg:x="2783" fg:w="9"/><text x="49.3416%" y="511.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="49.2150%" y="485" width="0.0353%" height="15" fill="rgb(208,220,5)" fg:x="2790" fg:w="2"/><text x="49.4650%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="49.2150%" y="469" width="0.0353%" height="15" fill="rgb(217,89,48)" fg:x="2790" fg:w="2"/><text x="49.4650%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="49.2150%" y="453" width="0.0353%" height="15" fill="rgb(212,113,41)" fg:x="2790" fg:w="2"/><text x="49.4650%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="49.2150%" y="437" width="0.0353%" height="15" fill="rgb(231,127,5)" fg:x="2790" fg:w="2"/><text x="49.4650%" y="447.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="49.2150%" y="421" width="0.0353%" height="15" fill="rgb(217,141,17)" fg:x="2790" fg:w="2"/><text x="49.4650%" y="431.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.2150%" y="405" width="0.0353%" height="15" fill="rgb(245,125,54)" fg:x="2790" fg:w="2"/><text x="49.4650%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="389" width="0.0176%" height="15" fill="rgb(248,125,3)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="373" width="0.0176%" height="15" fill="rgb(236,119,51)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="383.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="357" width="0.0176%" height="15" fill="rgb(239,99,8)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="367.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="341" width="0.0176%" height="15" fill="rgb(224,228,4)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="351.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="325" width="0.0176%" height="15" fill="rgb(220,131,45)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="309" width="0.0176%" height="15" fill="rgb(215,62,5)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="293" width="0.0176%" height="15" fill="rgb(253,12,24)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="277" width="0.0176%" height="15" fill="rgb(248,120,50)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="287.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="261" width="0.0176%" height="15" fill="rgb(245,194,10)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="271.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="245" width="0.0176%" height="15" fill="rgb(241,149,38)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="255.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="229" width="0.0176%" height="15" fill="rgb(219,215,7)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="239.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="213" width="0.0176%" height="15" fill="rgb(208,120,31)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="223.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="197" width="0.0176%" height="15" fill="rgb(244,30,8)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="207.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="49.2327%" y="181" width="0.0176%" height="15" fill="rgb(238,35,44)" fg:x="2791" fg:w="1"/><text x="49.4827%" y="191.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="49.2503%" y="453" width="0.0176%" height="15" fill="rgb(243,218,37)" fg:x="2792" fg:w="1"/><text x="49.5003%" y="463.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.05%)</title><rect x="49.2503%" y="501" width="0.0529%" height="15" fill="rgb(218,169,10)" fg:x="2792" fg:w="3"/><text x="49.5003%" y="511.50"></text></g><g><title>ShiftMessageB (3 samples, 0.05%)</title><rect x="49.2503%" y="485" width="0.0529%" height="15" fill="rgb(221,144,10)" fg:x="2792" fg:w="3"/><text x="49.5003%" y="495.50"></text></g><g><title>ShiftMessageC (3 samples, 0.05%)</title><rect x="49.2503%" y="469" width="0.0529%" height="15" fill="rgb(226,41,38)" fg:x="2792" fg:w="3"/><text x="49.5003%" y="479.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="49.2679%" y="453" width="0.0353%" height="15" fill="rgb(228,3,1)" fg:x="2793" fg:w="2"/><text x="49.5179%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (13 samples, 0.23%)</title><rect x="49.0916%" y="533" width="0.2293%" height="15" fill="rgb(209,129,12)" fg:x="2783" fg:w="13"/><text x="49.3416%" y="543.50"></text></g><g><title>HashWriter::write (13 samples, 0.23%)</title><rect x="49.0916%" y="517" width="0.2293%" height="15" fill="rgb(213,136,33)" fg:x="2783" fg:w="13"/><text x="49.3416%" y="527.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.3032%" y="501" width="0.0176%" height="15" fill="rgb(209,181,29)" fg:x="2795" fg:w="1"/><text x="49.5532%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (25 samples, 0.44%)</title><rect x="48.8975%" y="837" width="0.4410%" height="15" fill="rgb(234,173,18)" fg:x="2772" fg:w="25"/><text x="49.1475%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (25 samples, 0.44%)</title><rect x="48.8975%" y="821" width="0.4410%" height="15" fill="rgb(227,73,47)" fg:x="2772" fg:w="25"/><text x="49.1475%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (25 samples, 0.44%)</title><rect x="48.8975%" y="805" width="0.4410%" height="15" fill="rgb(234,9,34)" fg:x="2772" fg:w="25"/><text x="49.1475%" y="815.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (25 samples, 0.44%)</title><rect x="48.8975%" y="789" width="0.4410%" height="15" fill="rgb(235,172,15)" fg:x="2772" fg:w="25"/><text x="49.1475%" y="799.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (25 samples, 0.44%)</title><rect x="48.8975%" y="773" width="0.4410%" height="15" fill="rgb(245,61,2)" fg:x="2772" fg:w="25"/><text x="49.1475%" y="783.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.42%)</title><rect x="48.9152%" y="757" width="0.4234%" height="15" fill="rgb(238,39,47)" fg:x="2773" fg:w="24"/><text x="49.1652%" y="767.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (24 samples, 0.42%)</title><rect x="48.9152%" y="741" width="0.4234%" height="15" fill="rgb(234,37,24)" fg:x="2773" fg:w="24"/><text x="49.1652%" y="751.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.42%)</title><rect x="48.9152%" y="725" width="0.4234%" height="15" fill="rgb(248,223,24)" fg:x="2773" fg:w="24"/><text x="49.1652%" y="735.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (24 samples, 0.42%)</title><rect x="48.9152%" y="709" width="0.4234%" height="15" fill="rgb(223,12,15)" fg:x="2773" fg:w="24"/><text x="49.1652%" y="719.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (24 samples, 0.42%)</title><rect x="48.9152%" y="693" width="0.4234%" height="15" fill="rgb(249,6,3)" fg:x="2773" fg:w="24"/><text x="49.1652%" y="703.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.42%)</title><rect x="48.9152%" y="677" width="0.4234%" height="15" fill="rgb(237,105,33)" fg:x="2773" fg:w="24"/><text x="49.1652%" y="687.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (24 samples, 0.42%)</title><rect x="48.9152%" y="661" width="0.4234%" height="15" fill="rgb(252,208,35)" fg:x="2773" fg:w="24"/><text x="49.1652%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (15 samples, 0.26%)</title><rect x="49.0739%" y="645" width="0.2646%" height="15" fill="rgb(215,181,35)" fg:x="2782" fg:w="15"/><text x="49.3239%" y="655.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="49.0739%" y="629" width="0.2646%" height="15" fill="rgb(246,212,3)" fg:x="2782" fg:w="15"/><text x="49.3239%" y="639.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (15 samples, 0.26%)</title><rect x="49.0739%" y="613" width="0.2646%" height="15" fill="rgb(247,156,24)" fg:x="2782" fg:w="15"/><text x="49.3239%" y="623.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (15 samples, 0.26%)</title><rect x="49.0739%" y="597" width="0.2646%" height="15" fill="rgb(248,9,31)" fg:x="2782" fg:w="15"/><text x="49.3239%" y="607.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (15 samples, 0.26%)</title><rect x="49.0739%" y="581" width="0.2646%" height="15" fill="rgb(234,26,45)" fg:x="2782" fg:w="15"/><text x="49.3239%" y="591.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (15 samples, 0.26%)</title><rect x="49.0739%" y="565" width="0.2646%" height="15" fill="rgb(249,11,32)" fg:x="2782" fg:w="15"/><text x="49.3239%" y="575.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (15 samples, 0.26%)</title><rect x="49.0739%" y="549" width="0.2646%" height="15" fill="rgb(249,162,33)" fg:x="2782" fg:w="15"/><text x="49.3239%" y="559.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.3209%" y="533" width="0.0176%" height="15" fill="rgb(232,4,32)" fg:x="2796" fg:w="1"/><text x="49.5709%" y="543.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.3209%" y="517" width="0.0176%" height="15" fill="rgb(212,5,45)" fg:x="2796" fg:w="1"/><text x="49.5709%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="49.3209%" y="501" width="0.0176%" height="15" fill="rgb(227,95,13)" fg:x="2796" fg:w="1"/><text x="49.5709%" y="511.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="49.3209%" y="485" width="0.0176%" height="15" fill="rgb(223,205,10)" fg:x="2796" fg:w="1"/><text x="49.5709%" y="495.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="49.3209%" y="469" width="0.0176%" height="15" fill="rgb(222,178,8)" fg:x="2796" fg:w="1"/><text x="49.5709%" y="479.50"></text></g><g><title>CTransaction::CTransaction (3 samples, 0.05%)</title><rect x="49.3385%" y="757" width="0.0529%" height="15" fill="rgb(216,13,22)" fg:x="2797" fg:w="3"/><text x="49.5885%" y="767.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="49.3738%" y="741" width="0.0176%" height="15" fill="rgb(240,167,12)" fg:x="2799" fg:w="1"/><text x="49.6238%" y="751.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="49.3738%" y="725" width="0.0176%" height="15" fill="rgb(235,68,35)" fg:x="2799" fg:w="1"/><text x="49.6238%" y="735.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="49.3738%" y="709" width="0.0176%" height="15" fill="rgb(253,40,27)" fg:x="2799" fg:w="1"/><text x="49.6238%" y="719.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="49.3738%" y="693" width="0.0176%" height="15" fill="rgb(214,19,28)" fg:x="2799" fg:w="1"/><text x="49.6238%" y="703.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (41 samples, 0.72%)</title><rect x="48.6858%" y="853" width="0.7232%" height="15" fill="rgb(210,167,45)" fg:x="2760" fg:w="41"/><text x="48.9358%" y="863.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (4 samples, 0.07%)</title><rect x="49.3385%" y="837" width="0.0706%" height="15" fill="rgb(232,97,40)" fg:x="2797" fg:w="4"/><text x="49.5885%" y="847.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="49.3385%" y="821" width="0.0706%" height="15" fill="rgb(250,35,23)" fg:x="2797" fg:w="4"/><text x="49.5885%" y="831.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="49.3385%" y="805" width="0.0706%" height="15" fill="rgb(248,47,53)" fg:x="2797" fg:w="4"/><text x="49.5885%" y="815.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="49.3385%" y="789" width="0.0706%" height="15" fill="rgb(226,58,50)" fg:x="2797" fg:w="4"/><text x="49.5885%" y="799.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="49.3385%" y="773" width="0.0706%" height="15" fill="rgb(217,105,26)" fg:x="2797" fg:w="4"/><text x="49.5885%" y="783.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="49.3914%" y="757" width="0.0176%" height="15" fill="rgb(208,64,1)" fg:x="2800" fg:w="1"/><text x="49.6414%" y="767.50"></text></g><g><title>Shuffle (1 samples, 0.02%)</title><rect x="49.3914%" y="741" width="0.0176%" height="15" fill="rgb(214,80,1)" fg:x="2800" fg:w="1"/><text x="49.6414%" y="751.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="49.3914%" y="725" width="0.0176%" height="15" fill="rgb(206,175,26)" fg:x="2800" fg:w="1"/><text x="49.6414%" y="735.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (44 samples, 0.78%)</title><rect x="48.6506%" y="933" width="0.7762%" height="15" fill="rgb(235,156,37)" fg:x="2758" fg:w="44"/><text x="48.9006%" y="943.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (44 samples, 0.78%)</title><rect x="48.6506%" y="917" width="0.7762%" height="15" fill="rgb(213,100,9)" fg:x="2758" fg:w="44"/><text x="48.9006%" y="927.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (44 samples, 0.78%)</title><rect x="48.6506%" y="901" width="0.7762%" height="15" fill="rgb(241,15,13)" fg:x="2758" fg:w="44"/><text x="48.9006%" y="911.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (44 samples, 0.78%)</title><rect x="48.6506%" y="885" width="0.7762%" height="15" fill="rgb(205,97,43)" fg:x="2758" fg:w="44"/><text x="48.9006%" y="895.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (44 samples, 0.78%)</title><rect x="48.6506%" y="869" width="0.7762%" height="15" fill="rgb(216,106,32)" fg:x="2758" fg:w="44"/><text x="48.9006%" y="879.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4091%" y="853" width="0.0176%" height="15" fill="rgb(226,200,8)" fg:x="2801" fg:w="1"/><text x="49.6591%" y="863.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.4091%" y="837" width="0.0176%" height="15" fill="rgb(244,54,29)" fg:x="2801" fg:w="1"/><text x="49.6591%" y="847.50"></text></g><g><title>CSHA256::Reset (1 samples, 0.02%)</title><rect x="49.4267%" y="885" width="0.0176%" height="15" fill="rgb(252,169,12)" fg:x="2802" fg:w="1"/><text x="49.6767%" y="895.50"></text></g><g><title>CSHA256::Reset (1 samples, 0.02%)</title><rect x="49.4267%" y="869" width="0.0176%" height="15" fill="rgb(231,199,11)" fg:x="2802" fg:w="1"/><text x="49.6767%" y="879.50"></text></g><g><title>CSHA256::Write (6 samples, 0.11%)</title><rect x="49.4443%" y="885" width="0.1058%" height="15" fill="rgb(233,191,18)" fg:x="2803" fg:w="6"/><text x="49.6943%" y="895.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="49.5325%" y="869" width="0.0176%" height="15" fill="rgb(215,83,47)" fg:x="2808" fg:w="1"/><text x="49.7825%" y="879.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="49.5502%" y="869" width="0.0353%" height="15" fill="rgb(251,67,19)" fg:x="2809" fg:w="2"/><text x="49.8002%" y="879.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="49.5502%" y="853" width="0.0353%" height="15" fill="rgb(240,7,20)" fg:x="2809" fg:w="2"/><text x="49.8002%" y="863.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="49.5855%" y="869" width="0.0176%" height="15" fill="rgb(210,150,26)" fg:x="2811" fg:w="1"/><text x="49.8355%" y="879.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="49.5855%" y="853" width="0.0176%" height="15" fill="rgb(228,75,42)" fg:x="2811" fg:w="1"/><text x="49.8355%" y="863.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="49.5855%" y="837" width="0.0176%" height="15" fill="rgb(237,134,48)" fg:x="2811" fg:w="1"/><text x="49.8355%" y="847.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="49.5502%" y="885" width="0.0706%" height="15" fill="rgb(205,80,50)" fg:x="2809" fg:w="4"/><text x="49.8002%" y="895.50"></text></g><g><title>Shuffle (1 samples, 0.02%)</title><rect x="49.6031%" y="869" width="0.0176%" height="15" fill="rgb(217,74,48)" fg:x="2812" fg:w="1"/><text x="49.8531%" y="879.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="49.6031%" y="853" width="0.0176%" height="15" fill="rgb(205,82,50)" fg:x="2812" fg:w="1"/><text x="49.8531%" y="863.50"></text></g><g><title>CSHA256::Write (13 samples, 0.23%)</title><rect x="49.4267%" y="901" width="0.2293%" height="15" fill="rgb(228,1,33)" fg:x="2802" fg:w="13"/><text x="49.6767%" y="911.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="49.6207%" y="885" width="0.0353%" height="15" fill="rgb(214,50,23)" fg:x="2813" fg:w="2"/><text x="49.8707%" y="895.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (1 samples, 0.02%)</title><rect x="49.6384%" y="869" width="0.0176%" height="15" fill="rgb(210,62,9)" fg:x="2814" fg:w="1"/><text x="49.8884%" y="879.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="49.6384%" y="853" width="0.0176%" height="15" fill="rgb(210,104,37)" fg:x="2814" fg:w="1"/><text x="49.8884%" y="863.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="49.6737%" y="885" width="0.0176%" height="15" fill="rgb(232,104,43)" fg:x="2816" fg:w="1"/><text x="49.9237%" y="895.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="49.6737%" y="869" width="0.0176%" height="15" fill="rgb(244,52,6)" fg:x="2816" fg:w="1"/><text x="49.9237%" y="879.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="49.6913%" y="869" width="0.0353%" height="15" fill="rgb(211,174,52)" fg:x="2817" fg:w="2"/><text x="49.9413%" y="879.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="49.6913%" y="853" width="0.0353%" height="15" fill="rgb(229,48,4)" fg:x="2817" fg:w="2"/><text x="49.9413%" y="863.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="49.7266%" y="853" width="0.0176%" height="15" fill="rgb(205,155,16)" fg:x="2819" fg:w="1"/><text x="49.9766%" y="863.50"></text></g><g><title>ShiftMessageB (4 samples, 0.07%)</title><rect x="49.6913%" y="885" width="0.0706%" height="15" fill="rgb(211,141,53)" fg:x="2817" fg:w="4"/><text x="49.9413%" y="895.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="49.7266%" y="869" width="0.0353%" height="15" fill="rgb(240,148,11)" fg:x="2819" fg:w="2"/><text x="49.9766%" y="879.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="49.7442%" y="853" width="0.0176%" height="15" fill="rgb(214,45,23)" fg:x="2820" fg:w="1"/><text x="49.9942%" y="863.50"></text></g><g><title>CSHA256::Finalize (21 samples, 0.37%)</title><rect x="49.4267%" y="917" width="0.3704%" height="15" fill="rgb(248,74,26)" fg:x="2802" fg:w="21"/><text x="49.6767%" y="927.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.14%)</title><rect x="49.6560%" y="901" width="0.1411%" height="15" fill="rgb(218,121,16)" fg:x="2815" fg:w="8"/><text x="49.9060%" y="911.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="49.7619%" y="885" width="0.0353%" height="15" fill="rgb(218,10,47)" fg:x="2821" fg:w="2"/><text x="50.0119%" y="895.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="49.7619%" y="869" width="0.0353%" height="15" fill="rgb(227,99,14)" fg:x="2821" fg:w="2"/><text x="50.0119%" y="879.50"></text></g><g><title>CTransaction::ComputeHash (66 samples, 1.16%)</title><rect x="48.6506%" y="949" width="1.1642%" height="15" fill="rgb(229,83,46)" fg:x="2758" fg:w="66"/><text x="48.9006%" y="959.50"></text></g><g><title>HashWriter::GetHash (22 samples, 0.39%)</title><rect x="49.4267%" y="933" width="0.3881%" height="15" fill="rgb(228,25,1)" fg:x="2802" fg:w="22"/><text x="49.6767%" y="943.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="49.7971%" y="917" width="0.0176%" height="15" fill="rgb(252,190,15)" fg:x="2823" fg:w="1"/><text x="50.0471%" y="927.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="49.7971%" y="901" width="0.0176%" height="15" fill="rgb(213,103,51)" fg:x="2823" fg:w="1"/><text x="50.0471%" y="911.50"></text></g><g><title>CSHA256::Write (8 samples, 0.14%)</title><rect x="49.8148%" y="837" width="0.1411%" height="15" fill="rgb(220,38,44)" fg:x="2824" fg:w="8"/><text x="50.0648%" y="847.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="49.9383%" y="821" width="0.0176%" height="15" fill="rgb(210,45,26)" fg:x="2831" fg:w="1"/><text x="50.1883%" y="831.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="49.9559%" y="821" width="0.0176%" height="15" fill="rgb(205,95,48)" fg:x="2832" fg:w="1"/><text x="50.2059%" y="831.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="49.9559%" y="805" width="0.0176%" height="15" fill="rgb(225,179,37)" fg:x="2832" fg:w="1"/><text x="50.2059%" y="815.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="49.9559%" y="837" width="0.0353%" height="15" fill="rgb(230,209,3)" fg:x="2832" fg:w="2"/><text x="50.2059%" y="847.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="49.9735%" y="821" width="0.0176%" height="15" fill="rgb(248,12,46)" fg:x="2833" fg:w="1"/><text x="50.2235%" y="831.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="49.9735%" y="805" width="0.0176%" height="15" fill="rgb(234,18,0)" fg:x="2833" fg:w="1"/><text x="50.2235%" y="815.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="49.9735%" y="789" width="0.0176%" height="15" fill="rgb(238,197,14)" fg:x="2833" fg:w="1"/><text x="50.2235%" y="799.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="49.9912%" y="549" width="0.0176%" height="15" fill="rgb(251,162,48)" fg:x="2834" fg:w="1"/><text x="50.2412%" y="559.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="49.9912%" y="533" width="0.0176%" height="15" fill="rgb(237,73,42)" fg:x="2834" fg:w="1"/><text x="50.2412%" y="543.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="50.0088%" y="533" width="0.0176%" height="15" fill="rgb(211,108,8)" fg:x="2835" fg:w="1"/><text x="50.2588%" y="543.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="50.0088%" y="517" width="0.0176%" height="15" fill="rgb(213,45,22)" fg:x="2835" fg:w="1"/><text x="50.2588%" y="527.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="50.0088%" y="549" width="0.0353%" height="15" fill="rgb(252,154,5)" fg:x="2835" fg:w="2"/><text x="50.2588%" y="559.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="50.0265%" y="533" width="0.0176%" height="15" fill="rgb(221,79,52)" fg:x="2836" fg:w="1"/><text x="50.2765%" y="543.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="50.0265%" y="517" width="0.0176%" height="15" fill="rgb(229,220,36)" fg:x="2836" fg:w="1"/><text x="50.2765%" y="527.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="49.9912%" y="629" width="0.0706%" height="15" fill="rgb(211,17,16)" fg:x="2834" fg:w="4"/><text x="50.2412%" y="639.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="49.9912%" y="613" width="0.0706%" height="15" fill="rgb(222,55,31)" fg:x="2834" fg:w="4"/><text x="50.2412%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="49.9912%" y="597" width="0.0706%" height="15" fill="rgb(221,221,31)" fg:x="2834" fg:w="4"/><text x="50.2412%" y="607.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="49.9912%" y="581" width="0.0706%" height="15" fill="rgb(227,168,26)" fg:x="2834" fg:w="4"/><text x="50.2412%" y="591.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="49.9912%" y="565" width="0.0706%" height="15" fill="rgb(224,139,9)" fg:x="2834" fg:w="4"/><text x="50.2412%" y="575.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="50.0441%" y="549" width="0.0176%" height="15" fill="rgb(254,172,0)" fg:x="2837" fg:w="1"/><text x="50.2941%" y="559.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="50.0617%" y="469" width="0.0353%" height="15" fill="rgb(235,203,1)" fg:x="2838" fg:w="2"/><text x="50.3117%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.0617%" y="533" width="0.0529%" height="15" fill="rgb(216,205,24)" fg:x="2838" fg:w="3"/><text x="50.3117%" y="543.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.0617%" y="517" width="0.0529%" height="15" fill="rgb(233,24,6)" fg:x="2838" fg:w="3"/><text x="50.3117%" y="527.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="50.0617%" y="501" width="0.0529%" height="15" fill="rgb(244,110,9)" fg:x="2838" fg:w="3"/><text x="50.3117%" y="511.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="50.0617%" y="485" width="0.0529%" height="15" fill="rgb(239,222,42)" fg:x="2838" fg:w="3"/><text x="50.3117%" y="495.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.0970%" y="469" width="0.0176%" height="15" fill="rgb(218,145,13)" fg:x="2840" fg:w="1"/><text x="50.3470%" y="479.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="50.1323%" y="405" width="0.0353%" height="15" fill="rgb(207,69,11)" fg:x="2842" fg:w="2"/><text x="50.3823%" y="415.50"></text></g><g><title>CSHA256::Write (7 samples, 0.12%)</title><rect x="50.1147%" y="421" width="0.1235%" height="15" fill="rgb(220,223,22)" fg:x="2841" fg:w="7"/><text x="50.3647%" y="431.50"></text></g><g><title>sha256_x86_shani::Transform (4 samples, 0.07%)</title><rect x="50.1676%" y="405" width="0.0706%" height="15" fill="rgb(245,102,5)" fg:x="2844" fg:w="4"/><text x="50.4176%" y="415.50"></text></g><g><title>QuadRound (4 samples, 0.07%)</title><rect x="50.1676%" y="389" width="0.0706%" height="15" fill="rgb(211,148,2)" fg:x="2844" fg:w="4"/><text x="50.4176%" y="399.50"></text></g><g><title>_mm_shuffle_epi32 (4 samples, 0.07%)</title><rect x="50.1676%" y="373" width="0.0706%" height="15" fill="rgb(241,13,44)" fg:x="2844" fg:w="4"/><text x="50.4176%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="50.1676%" y="357" width="0.0706%" height="15" fill="rgb(219,137,21)" fg:x="2844" fg:w="4"/><text x="50.4176%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="341" width="0.0529%" height="15" fill="rgb(242,206,5)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="325" width="0.0529%" height="15" fill="rgb(217,114,22)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="309" width="0.0529%" height="15" fill="rgb(253,206,42)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="293" width="0.0529%" height="15" fill="rgb(236,102,18)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="277" width="0.0529%" height="15" fill="rgb(208,59,49)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="261" width="0.0529%" height="15" fill="rgb(215,194,28)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="245" width="0.0529%" height="15" fill="rgb(243,207,11)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="229" width="0.0529%" height="15" fill="rgb(254,179,35)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="213" width="0.0529%" height="15" fill="rgb(235,97,3)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="50.1852%" y="197" width="0.0529%" height="15" fill="rgb(215,155,33)" fg:x="2845" fg:w="3"/><text x="50.4352%" y="207.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint&gt; (11 samples, 0.19%)</title><rect x="50.0617%" y="629" width="0.1940%" height="15" fill="rgb(223,128,12)" fg:x="2838" fg:w="11"/><text x="50.3117%" y="639.50"></text></g><g><title>void COutPoint::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.19%)</title><rect x="50.0617%" y="613" width="0.1940%" height="15" fill="rgb(208,157,18)" fg:x="2838" fg:w="11"/><text x="50.3117%" y="623.50"></text></g><g><title>void COutPoint::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.19%)</title><rect x="50.0617%" y="597" width="0.1940%" height="15" fill="rgb(249,70,54)" fg:x="2838" fg:w="11"/><text x="50.3117%" y="607.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint const, ActionSerialize&gt; (11 samples, 0.19%)</title><rect x="50.0617%" y="581" width="0.1940%" height="15" fill="rgb(244,118,24)" fg:x="2838" fg:w="11"/><text x="50.3117%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (11 samples, 0.19%)</title><rect x="50.0617%" y="565" width="0.1940%" height="15" fill="rgb(211,54,0)" fg:x="2838" fg:w="11"/><text x="50.3117%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;, unsigned int&gt; (11 samples, 0.19%)</title><rect x="50.0617%" y="549" width="0.1940%" height="15" fill="rgb(245,137,45)" fg:x="2838" fg:w="11"/><text x="50.3117%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt; &gt; (8 samples, 0.14%)</title><rect x="50.1147%" y="533" width="0.1411%" height="15" fill="rgb(232,154,31)" fg:x="2841" fg:w="8"/><text x="50.3647%" y="543.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.14%)</title><rect x="50.1147%" y="517" width="0.1411%" height="15" fill="rgb(253,6,39)" fg:x="2841" fg:w="8"/><text x="50.3647%" y="527.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (8 samples, 0.14%)</title><rect x="50.1147%" y="501" width="0.1411%" height="15" fill="rgb(234,183,24)" fg:x="2841" fg:w="8"/><text x="50.3647%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (8 samples, 0.14%)</title><rect x="50.1147%" y="485" width="0.1411%" height="15" fill="rgb(252,84,40)" fg:x="2841" fg:w="8"/><text x="50.3647%" y="495.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char const&gt; (8 samples, 0.14%)</title><rect x="50.1147%" y="469" width="0.1411%" height="15" fill="rgb(224,65,2)" fg:x="2841" fg:w="8"/><text x="50.3647%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (8 samples, 0.14%)</title><rect x="50.1147%" y="453" width="0.1411%" height="15" fill="rgb(229,38,24)" fg:x="2841" fg:w="8"/><text x="50.3647%" y="463.50"></text></g><g><title>HashWriter::write (8 samples, 0.14%)</title><rect x="50.1147%" y="437" width="0.1411%" height="15" fill="rgb(218,131,50)" fg:x="2841" fg:w="8"/><text x="50.3647%" y="447.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.2381%" y="421" width="0.0176%" height="15" fill="rgb(233,106,18)" fg:x="2848" fg:w="1"/><text x="50.4881%" y="431.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.2381%" y="405" width="0.0176%" height="15" fill="rgb(220,216,11)" fg:x="2848" fg:w="1"/><text x="50.4881%" y="415.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2381%" y="389" width="0.0176%" height="15" fill="rgb(251,100,45)" fg:x="2848" fg:w="1"/><text x="50.4881%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2381%" y="373" width="0.0176%" height="15" fill="rgb(235,143,32)" fg:x="2848" fg:w="1"/><text x="50.4881%" y="383.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.2381%" y="357" width="0.0176%" height="15" fill="rgb(248,124,34)" fg:x="2848" fg:w="1"/><text x="50.4881%" y="367.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.2381%" y="341" width="0.0176%" height="15" fill="rgb(225,221,4)" fg:x="2848" fg:w="1"/><text x="50.4881%" y="351.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="50.2558%" y="517" width="0.0176%" height="15" fill="rgb(242,27,43)" fg:x="2849" fg:w="1"/><text x="50.5058%" y="527.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="50.2558%" y="501" width="0.0176%" height="15" fill="rgb(227,54,8)" fg:x="2849" fg:w="1"/><text x="50.5058%" y="511.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="50.2558%" y="485" width="0.0176%" height="15" fill="rgb(253,139,49)" fg:x="2849" fg:w="1"/><text x="50.5058%" y="495.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="50.2558%" y="469" width="0.0176%" height="15" fill="rgb(231,26,43)" fg:x="2849" fg:w="1"/><text x="50.5058%" y="479.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="50.2558%" y="453" width="0.0176%" height="15" fill="rgb(207,121,39)" fg:x="2849" fg:w="1"/><text x="50.5058%" y="463.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="50.2558%" y="437" width="0.0176%" height="15" fill="rgb(223,101,35)" fg:x="2849" fg:w="1"/><text x="50.5058%" y="447.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="50.2558%" y="421" width="0.0176%" height="15" fill="rgb(232,87,23)" fg:x="2849" fg:w="1"/><text x="50.5058%" y="431.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="50.2734%" y="517" width="0.0176%" height="15" fill="rgb(225,180,29)" fg:x="2850" fg:w="1"/><text x="50.5234%" y="527.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="50.2911%" y="517" width="0.0353%" height="15" fill="rgb(225,25,17)" fg:x="2851" fg:w="2"/><text x="50.5411%" y="527.50"></text></g><g><title>ShiftMessageB (2 samples, 0.04%)</title><rect x="50.2911%" y="501" width="0.0353%" height="15" fill="rgb(223,8,52)" fg:x="2851" fg:w="2"/><text x="50.5411%" y="511.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="50.2911%" y="485" width="0.0353%" height="15" fill="rgb(246,42,21)" fg:x="2851" fg:w="2"/><text x="50.5411%" y="495.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="50.2911%" y="469" width="0.0353%" height="15" fill="rgb(205,64,43)" fg:x="2851" fg:w="2"/><text x="50.5411%" y="479.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="50.3263%" y="453" width="0.0176%" height="15" fill="rgb(221,160,13)" fg:x="2853" fg:w="1"/><text x="50.5763%" y="463.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (22 samples, 0.39%)</title><rect x="49.9912%" y="741" width="0.3881%" height="15" fill="rgb(239,58,35)" fg:x="2834" fg:w="22"/><text x="50.2412%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn&gt; (22 samples, 0.39%)</title><rect x="49.9912%" y="725" width="0.3881%" height="15" fill="rgb(251,26,40)" fg:x="2834" fg:w="22"/><text x="50.2412%" y="735.50"></text></g><g><title>void CTxIn::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.39%)</title><rect x="49.9912%" y="709" width="0.3881%" height="15" fill="rgb(247,0,4)" fg:x="2834" fg:w="22"/><text x="50.2412%" y="719.50"></text></g><g><title>void CTxIn::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (22 samples, 0.39%)</title><rect x="49.9912%" y="693" width="0.3881%" height="15" fill="rgb(218,130,10)" fg:x="2834" fg:w="22"/><text x="50.2412%" y="703.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn const, ActionSerialize&gt; (22 samples, 0.39%)</title><rect x="49.9912%" y="677" width="0.3881%" height="15" fill="rgb(239,32,7)" fg:x="2834" fg:w="22"/><text x="50.2412%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (22 samples, 0.39%)</title><rect x="49.9912%" y="661" width="0.3881%" height="15" fill="rgb(210,192,24)" fg:x="2834" fg:w="22"/><text x="50.2412%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, COutPoint, CScript, unsigned int&gt; (22 samples, 0.39%)</title><rect x="49.9912%" y="645" width="0.3881%" height="15" fill="rgb(226,212,17)" fg:x="2834" fg:w="22"/><text x="50.2412%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (7 samples, 0.12%)</title><rect x="50.2558%" y="629" width="0.1235%" height="15" fill="rgb(219,201,28)" fg:x="2849" fg:w="7"/><text x="50.5058%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="50.2558%" y="613" width="0.1235%" height="15" fill="rgb(235,207,41)" fg:x="2849" fg:w="7"/><text x="50.5058%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="50.2558%" y="597" width="0.1235%" height="15" fill="rgb(241,95,54)" fg:x="2849" fg:w="7"/><text x="50.5058%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (7 samples, 0.12%)</title><rect x="50.2558%" y="581" width="0.1235%" height="15" fill="rgb(248,12,23)" fg:x="2849" fg:w="7"/><text x="50.5058%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.12%)</title><rect x="50.2558%" y="565" width="0.1235%" height="15" fill="rgb(228,173,4)" fg:x="2849" fg:w="7"/><text x="50.5058%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (7 samples, 0.12%)</title><rect x="50.2558%" y="549" width="0.1235%" height="15" fill="rgb(254,99,5)" fg:x="2849" fg:w="7"/><text x="50.5058%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (7 samples, 0.12%)</title><rect x="50.2558%" y="533" width="0.1235%" height="15" fill="rgb(212,184,17)" fg:x="2849" fg:w="7"/><text x="50.5058%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.3263%" y="517" width="0.0529%" height="15" fill="rgb(252,174,1)" fg:x="2853" fg:w="3"/><text x="50.5763%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.3263%" y="501" width="0.0529%" height="15" fill="rgb(241,118,51)" fg:x="2853" fg:w="3"/><text x="50.5763%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="50.3263%" y="485" width="0.0529%" height="15" fill="rgb(227,94,47)" fg:x="2853" fg:w="3"/><text x="50.5763%" y="495.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="50.3263%" y="469" width="0.0529%" height="15" fill="rgb(229,104,2)" fg:x="2853" fg:w="3"/><text x="50.5763%" y="479.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="50.3440%" y="453" width="0.0353%" height="15" fill="rgb(219,28,31)" fg:x="2854" fg:w="2"/><text x="50.5940%" y="463.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (26 samples, 0.46%)</title><rect x="49.9912%" y="821" width="0.4586%" height="15" fill="rgb(233,109,36)" fg:x="2834" fg:w="26"/><text x="50.2412%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (26 samples, 0.46%)</title><rect x="49.9912%" y="805" width="0.4586%" height="15" fill="rgb(246,88,11)" fg:x="2834" fg:w="26"/><text x="50.2412%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (26 samples, 0.46%)</title><rect x="49.9912%" y="789" width="0.4586%" height="15" fill="rgb(209,212,17)" fg:x="2834" fg:w="26"/><text x="50.2412%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (26 samples, 0.46%)</title><rect x="49.9912%" y="773" width="0.4586%" height="15" fill="rgb(243,59,29)" fg:x="2834" fg:w="26"/><text x="50.2412%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (26 samples, 0.46%)</title><rect x="49.9912%" y="757" width="0.4586%" height="15" fill="rgb(244,205,48)" fg:x="2834" fg:w="26"/><text x="50.2412%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="50.3793%" y="741" width="0.0706%" height="15" fill="rgb(227,30,6)" fg:x="2856" fg:w="4"/><text x="50.6293%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="50.3793%" y="725" width="0.0706%" height="15" fill="rgb(220,205,48)" fg:x="2856" fg:w="4"/><text x="50.6293%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (4 samples, 0.07%)</title><rect x="50.3793%" y="709" width="0.0706%" height="15" fill="rgb(250,94,14)" fg:x="2856" fg:w="4"/><text x="50.6293%" y="719.50"></text></g><g><title>HashWriter::write (4 samples, 0.07%)</title><rect x="50.3793%" y="693" width="0.0706%" height="15" fill="rgb(216,119,42)" fg:x="2856" fg:w="4"/><text x="50.6293%" y="703.50"></text></g><g><title>CTransaction::ComputeWitnessHash (4 samples, 0.07%)</title><rect x="50.3793%" y="677" width="0.0706%" height="15" fill="rgb(232,155,0)" fg:x="2856" fg:w="4"/><text x="50.6293%" y="687.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.04%)</title><rect x="50.4145%" y="661" width="0.0353%" height="15" fill="rgb(212,24,32)" fg:x="2858" fg:w="2"/><text x="50.6645%" y="671.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.4498%" y="629" width="0.0529%" height="15" fill="rgb(216,69,20)" fg:x="2860" fg:w="3"/><text x="50.6998%" y="639.50"></text></g><g><title>void ser_writedata64&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.4498%" y="613" width="0.0529%" height="15" fill="rgb(229,73,31)" fg:x="2860" fg:w="3"/><text x="50.6998%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="50.4498%" y="597" width="0.0529%" height="15" fill="rgb(224,219,20)" fg:x="2860" fg:w="3"/><text x="50.6998%" y="607.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="50.4498%" y="581" width="0.0529%" height="15" fill="rgb(215,146,41)" fg:x="2860" fg:w="3"/><text x="50.6998%" y="591.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="50.4498%" y="565" width="0.0529%" height="15" fill="rgb(244,71,31)" fg:x="2860" fg:w="3"/><text x="50.6998%" y="575.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="50.4851%" y="549" width="0.0176%" height="15" fill="rgb(224,24,11)" fg:x="2862" fg:w="1"/><text x="50.7351%" y="559.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="50.5027%" y="517" width="0.0353%" height="15" fill="rgb(229,76,15)" fg:x="2863" fg:w="2"/><text x="50.7527%" y="527.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="50.5909%" y="469" width="0.0706%" height="15" fill="rgb(209,93,2)" fg:x="2868" fg:w="4"/><text x="50.8409%" y="479.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="50.6615%" y="469" width="0.0176%" height="15" fill="rgb(216,200,50)" fg:x="2872" fg:w="1"/><text x="50.9115%" y="479.50"></text></g><g><title>CSHA256::Write (9 samples, 0.16%)</title><rect x="50.5380%" y="485" width="0.1588%" height="15" fill="rgb(211,67,34)" fg:x="2865" fg:w="9"/><text x="50.7880%" y="495.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="469" width="0.0176%" height="15" fill="rgb(225,87,47)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="479.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="50.6791%" y="453" width="0.0176%" height="15" fill="rgb(217,185,16)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="437" width="0.0176%" height="15" fill="rgb(205,0,0)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="447.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="421" width="0.0176%" height="15" fill="rgb(207,116,45)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="431.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="405" width="0.0176%" height="15" fill="rgb(221,156,26)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="415.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="389" width="0.0176%" height="15" fill="rgb(213,140,4)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="399.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="373" width="0.0176%" height="15" fill="rgb(231,224,15)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="383.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="357" width="0.0176%" height="15" fill="rgb(244,76,20)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="367.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="341" width="0.0176%" height="15" fill="rgb(238,117,7)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="351.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="325" width="0.0176%" height="15" fill="rgb(235,1,10)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="335.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="309" width="0.0176%" height="15" fill="rgb(216,165,6)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="319.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="293" width="0.0176%" height="15" fill="rgb(246,91,35)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="303.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="277" width="0.0176%" height="15" fill="rgb(228,96,24)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="287.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="261" width="0.0176%" height="15" fill="rgb(254,217,53)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="271.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="245" width="0.0176%" height="15" fill="rgb(209,60,0)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="255.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="229" width="0.0176%" height="15" fill="rgb(250,93,26)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="239.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="213" width="0.0176%" height="15" fill="rgb(211,9,40)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="223.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="197" width="0.0176%" height="15" fill="rgb(242,57,20)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="207.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="181" width="0.0176%" height="15" fill="rgb(248,85,48)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (1 samples, 0.02%)</title><rect x="50.6791%" y="165" width="0.0176%" height="15" fill="rgb(212,117,2)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="175.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (1 samples, 0.02%)</title><rect x="50.6791%" y="149" width="0.0176%" height="15" fill="rgb(243,19,3)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="159.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="50.6791%" y="133" width="0.0176%" height="15" fill="rgb(232,217,24)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="143.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="50.6791%" y="117" width="0.0176%" height="15" fill="rgb(224,175,40)" fg:x="2873" fg:w="1"/><text x="50.9291%" y="127.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="50.6968%" y="453" width="0.0176%" height="15" fill="rgb(212,162,32)" fg:x="2874" fg:w="1"/><text x="50.9468%" y="463.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="50.6968%" y="469" width="0.0353%" height="15" fill="rgb(215,9,4)" fg:x="2874" fg:w="2"/><text x="50.9468%" y="479.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="50.7144%" y="453" width="0.0176%" height="15" fill="rgb(242,42,7)" fg:x="2875" fg:w="1"/><text x="50.9644%" y="463.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="50.7321%" y="453" width="0.0353%" height="15" fill="rgb(242,184,45)" fg:x="2876" fg:w="2"/><text x="50.9821%" y="463.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="50.7321%" y="437" width="0.0353%" height="15" fill="rgb(228,111,51)" fg:x="2876" fg:w="2"/><text x="50.9821%" y="447.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="50.7673%" y="437" width="0.0176%" height="15" fill="rgb(236,147,17)" fg:x="2878" fg:w="1"/><text x="51.0173%" y="447.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="50.7850%" y="437" width="0.0176%" height="15" fill="rgb(210,75,22)" fg:x="2879" fg:w="1"/><text x="51.0350%" y="447.50"></text></g><g><title>ShiftMessageB (7 samples, 0.12%)</title><rect x="50.7321%" y="469" width="0.1235%" height="15" fill="rgb(217,159,45)" fg:x="2876" fg:w="7"/><text x="50.9821%" y="479.50"></text></g><g><title>ShiftMessageC (5 samples, 0.09%)</title><rect x="50.7673%" y="453" width="0.0882%" height="15" fill="rgb(245,165,53)" fg:x="2878" fg:w="5"/><text x="51.0173%" y="463.50"></text></g><g><title>_mm_sha256msg2_epu32 (3 samples, 0.05%)</title><rect x="50.8026%" y="437" width="0.0529%" height="15" fill="rgb(251,190,50)" fg:x="2880" fg:w="3"/><text x="51.0526%" y="447.50"></text></g><g><title>sha256_x86_shani::Transform (10 samples, 0.18%)</title><rect x="50.6968%" y="485" width="0.1764%" height="15" fill="rgb(208,203,29)" fg:x="2874" fg:w="10"/><text x="50.9468%" y="495.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="50.8555%" y="469" width="0.0176%" height="15" fill="rgb(207,209,35)" fg:x="2883" fg:w="1"/><text x="51.1055%" y="479.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="50.8555%" y="453" width="0.0176%" height="15" fill="rgb(230,144,49)" fg:x="2883" fg:w="1"/><text x="51.1055%" y="463.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="50.8732%" y="485" width="0.0353%" height="15" fill="rgb(229,31,6)" fg:x="2884" fg:w="2"/><text x="51.1232%" y="495.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="50.8732%" y="469" width="0.0353%" height="15" fill="rgb(251,129,24)" fg:x="2884" fg:w="2"/><text x="51.1232%" y="479.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (2 samples, 0.04%)</title><rect x="50.8732%" y="453" width="0.0353%" height="15" fill="rgb(235,105,15)" fg:x="2884" fg:w="2"/><text x="51.1232%" y="463.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="50.8732%" y="437" width="0.0353%" height="15" fill="rgb(216,52,43)" fg:x="2884" fg:w="2"/><text x="51.1232%" y="447.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="50.8732%" y="421" width="0.0353%" height="15" fill="rgb(238,144,41)" fg:x="2884" fg:w="2"/><text x="51.1232%" y="431.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="50.8732%" y="405" width="0.0353%" height="15" fill="rgb(243,63,9)" fg:x="2884" fg:w="2"/><text x="51.1232%" y="415.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="389" width="0.0176%" height="15" fill="rgb(246,208,1)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="399.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="373" width="0.0176%" height="15" fill="rgb(233,182,18)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="383.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="357" width="0.0176%" height="15" fill="rgb(242,224,8)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="367.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="341" width="0.0176%" height="15" fill="rgb(243,54,37)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="351.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="325" width="0.0176%" height="15" fill="rgb(233,192,12)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="335.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="309" width="0.0176%" height="15" fill="rgb(251,192,53)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="319.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="293" width="0.0176%" height="15" fill="rgb(246,141,26)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="303.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.8908%" y="277" width="0.0176%" height="15" fill="rgb(239,195,19)" fg:x="2885" fg:w="1"/><text x="51.1408%" y="287.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (22 samples, 0.39%)</title><rect x="50.5380%" y="517" width="0.3881%" height="15" fill="rgb(241,16,39)" fg:x="2865" fg:w="22"/><text x="50.7880%" y="527.50"></text></g><g><title>HashWriter::write (22 samples, 0.39%)</title><rect x="50.5380%" y="501" width="0.3881%" height="15" fill="rgb(223,13,53)" fg:x="2865" fg:w="22"/><text x="50.7880%" y="511.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.9084%" y="485" width="0.0176%" height="15" fill="rgb(214,227,0)" fg:x="2886" fg:w="1"/><text x="51.1584%" y="495.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="50.9614%" y="437" width="0.0176%" height="15" fill="rgb(228,103,26)" fg:x="2889" fg:w="1"/><text x="51.2114%" y="447.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (31 samples, 0.55%)</title><rect x="50.4498%" y="741" width="0.5468%" height="15" fill="rgb(254,177,53)" fg:x="2860" fg:w="31"/><text x="50.6998%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut&gt; (31 samples, 0.55%)</title><rect x="50.4498%" y="725" width="0.5468%" height="15" fill="rgb(208,201,34)" fg:x="2860" fg:w="31"/><text x="50.6998%" y="735.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.55%)</title><rect x="50.4498%" y="709" width="0.5468%" height="15" fill="rgb(212,39,5)" fg:x="2860" fg:w="31"/><text x="50.6998%" y="719.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (31 samples, 0.55%)</title><rect x="50.4498%" y="693" width="0.5468%" height="15" fill="rgb(246,117,3)" fg:x="2860" fg:w="31"/><text x="50.6998%" y="703.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (31 samples, 0.55%)</title><rect x="50.4498%" y="677" width="0.5468%" height="15" fill="rgb(244,118,39)" fg:x="2860" fg:w="31"/><text x="50.6998%" y="687.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (31 samples, 0.55%)</title><rect x="50.4498%" y="661" width="0.5468%" height="15" fill="rgb(241,64,10)" fg:x="2860" fg:w="31"/><text x="50.6998%" y="671.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, long, CScript&gt; (31 samples, 0.55%)</title><rect x="50.4498%" y="645" width="0.5468%" height="15" fill="rgb(229,39,44)" fg:x="2860" fg:w="31"/><text x="50.6998%" y="655.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript&gt; (28 samples, 0.49%)</title><rect x="50.5027%" y="629" width="0.4939%" height="15" fill="rgb(230,226,3)" fg:x="2863" fg:w="28"/><text x="50.7527%" y="639.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.49%)</title><rect x="50.5027%" y="613" width="0.4939%" height="15" fill="rgb(222,13,42)" fg:x="2863" fg:w="28"/><text x="50.7527%" y="623.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (28 samples, 0.49%)</title><rect x="50.5027%" y="597" width="0.4939%" height="15" fill="rgb(247,180,54)" fg:x="2863" fg:w="28"/><text x="50.7527%" y="607.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (28 samples, 0.49%)</title><rect x="50.5027%" y="581" width="0.4939%" height="15" fill="rgb(205,96,16)" fg:x="2863" fg:w="28"/><text x="50.7527%" y="591.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (28 samples, 0.49%)</title><rect x="50.5027%" y="565" width="0.4939%" height="15" fill="rgb(205,100,21)" fg:x="2863" fg:w="28"/><text x="50.7527%" y="575.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (28 samples, 0.49%)</title><rect x="50.5027%" y="549" width="0.4939%" height="15" fill="rgb(248,51,4)" fg:x="2863" fg:w="28"/><text x="50.7527%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (28 samples, 0.49%)</title><rect x="50.5027%" y="533" width="0.4939%" height="15" fill="rgb(217,197,30)" fg:x="2863" fg:w="28"/><text x="50.7527%" y="543.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (4 samples, 0.07%)</title><rect x="50.9261%" y="517" width="0.0706%" height="15" fill="rgb(240,179,40)" fg:x="2887" fg:w="4"/><text x="51.1761%" y="527.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="50.9437%" y="501" width="0.0529%" height="15" fill="rgb(212,185,35)" fg:x="2888" fg:w="3"/><text x="51.1937%" y="511.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="50.9437%" y="485" width="0.0529%" height="15" fill="rgb(251,222,31)" fg:x="2888" fg:w="3"/><text x="51.1937%" y="495.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="50.9437%" y="469" width="0.0529%" height="15" fill="rgb(208,140,36)" fg:x="2888" fg:w="3"/><text x="51.1937%" y="479.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="50.9437%" y="453" width="0.0529%" height="15" fill="rgb(220,148,1)" fg:x="2888" fg:w="3"/><text x="51.1937%" y="463.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="50.9790%" y="437" width="0.0176%" height="15" fill="rgb(254,4,28)" fg:x="2890" fg:w="1"/><text x="51.2290%" y="447.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (32 samples, 0.56%)</title><rect x="50.4498%" y="821" width="0.5645%" height="15" fill="rgb(222,185,44)" fg:x="2860" fg:w="32"/><text x="50.6998%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (32 samples, 0.56%)</title><rect x="50.4498%" y="805" width="0.5645%" height="15" fill="rgb(215,74,39)" fg:x="2860" fg:w="32"/><text x="50.6998%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (32 samples, 0.56%)</title><rect x="50.4498%" y="789" width="0.5645%" height="15" fill="rgb(247,86,4)" fg:x="2860" fg:w="32"/><text x="50.6998%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (32 samples, 0.56%)</title><rect x="50.4498%" y="773" width="0.5645%" height="15" fill="rgb(231,105,32)" fg:x="2860" fg:w="32"/><text x="50.6998%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (32 samples, 0.56%)</title><rect x="50.4498%" y="757" width="0.5645%" height="15" fill="rgb(222,65,35)" fg:x="2860" fg:w="32"/><text x="50.6998%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.9966%" y="741" width="0.0176%" height="15" fill="rgb(218,145,35)" fg:x="2891" fg:w="1"/><text x="51.2466%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="50.9966%" y="725" width="0.0176%" height="15" fill="rgb(208,7,15)" fg:x="2891" fg:w="1"/><text x="51.2466%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="50.9966%" y="709" width="0.0176%" height="15" fill="rgb(209,83,13)" fg:x="2891" fg:w="1"/><text x="51.2466%" y="719.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="50.9966%" y="693" width="0.0176%" height="15" fill="rgb(218,3,10)" fg:x="2891" fg:w="1"/><text x="51.2466%" y="703.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="50.9966%" y="677" width="0.0176%" height="15" fill="rgb(211,219,4)" fg:x="2891" fg:w="1"/><text x="51.2466%" y="687.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="50.9966%" y="661" width="0.0176%" height="15" fill="rgb(228,194,12)" fg:x="2891" fg:w="1"/><text x="51.2466%" y="671.50"></text></g><g><title>CSHA256::Write (4 samples, 0.07%)</title><rect x="51.0143%" y="661" width="0.0706%" height="15" fill="rgb(210,175,7)" fg:x="2892" fg:w="4"/><text x="51.2643%" y="671.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.0672%" y="645" width="0.0176%" height="15" fill="rgb(243,132,6)" fg:x="2895" fg:w="1"/><text x="51.3172%" y="655.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.0848%" y="629" width="0.0176%" height="15" fill="rgb(207,72,18)" fg:x="2896" fg:w="1"/><text x="51.3348%" y="639.50"></text></g><g><title>QuadRound (2 samples, 0.04%)</title><rect x="51.0848%" y="645" width="0.0353%" height="15" fill="rgb(236,1,18)" fg:x="2896" fg:w="2"/><text x="51.3348%" y="655.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="51.1025%" y="629" width="0.0176%" height="15" fill="rgb(227,0,18)" fg:x="2897" fg:w="1"/><text x="51.3525%" y="639.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="51.1201%" y="629" width="0.0176%" height="15" fill="rgb(247,37,5)" fg:x="2898" fg:w="1"/><text x="51.3701%" y="639.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="51.1201%" y="613" width="0.0176%" height="15" fill="rgb(237,179,24)" fg:x="2898" fg:w="1"/><text x="51.3701%" y="623.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="51.1378%" y="613" width="0.0353%" height="15" fill="rgb(226,53,20)" fg:x="2899" fg:w="2"/><text x="51.3878%" y="623.50"></text></g><g><title>ShiftMessageB (5 samples, 0.09%)</title><rect x="51.1201%" y="645" width="0.0882%" height="15" fill="rgb(247,75,7)" fg:x="2898" fg:w="5"/><text x="51.3701%" y="655.50"></text></g><g><title>ShiftMessageC (4 samples, 0.07%)</title><rect x="51.1378%" y="629" width="0.0706%" height="15" fill="rgb(233,96,12)" fg:x="2899" fg:w="4"/><text x="51.3878%" y="639.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="51.1730%" y="613" width="0.0353%" height="15" fill="rgb(224,125,0)" fg:x="2901" fg:w="2"/><text x="51.4230%" y="623.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.2083%" y="629" width="0.0176%" height="15" fill="rgb(224,92,25)" fg:x="2903" fg:w="1"/><text x="51.4583%" y="639.50"></text></g><g><title>sha256_x86_shani::Transform (9 samples, 0.16%)</title><rect x="51.0848%" y="661" width="0.1588%" height="15" fill="rgb(224,42,24)" fg:x="2896" fg:w="9"/><text x="51.3348%" y="671.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="51.2083%" y="645" width="0.0353%" height="15" fill="rgb(234,132,49)" fg:x="2903" fg:w="2"/><text x="51.4583%" y="655.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="51.2260%" y="629" width="0.0176%" height="15" fill="rgb(248,100,35)" fg:x="2904" fg:w="1"/><text x="51.4760%" y="639.50"></text></g><g><title>CSHA256::Write (18 samples, 0.32%)</title><rect x="51.0143%" y="677" width="0.3175%" height="15" fill="rgb(239,94,40)" fg:x="2892" fg:w="18"/><text x="51.2643%" y="687.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="51.2436%" y="661" width="0.0882%" height="15" fill="rgb(235,139,28)" fg:x="2905" fg:w="5"/><text x="51.4936%" y="671.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="51.3318%" y="645" width="0.0176%" height="15" fill="rgb(217,144,7)" fg:x="2910" fg:w="1"/><text x="51.5818%" y="655.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="51.3318%" y="629" width="0.0176%" height="15" fill="rgb(227,55,4)" fg:x="2910" fg:w="1"/><text x="51.5818%" y="639.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.3494%" y="629" width="0.0176%" height="15" fill="rgb(252,82,54)" fg:x="2911" fg:w="1"/><text x="51.5994%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (21 samples, 0.37%)</title><rect x="51.0143%" y="709" width="0.3704%" height="15" fill="rgb(245,172,4)" fg:x="2892" fg:w="21"/><text x="51.2643%" y="719.50"></text></g><g><title>HashWriter::write (21 samples, 0.37%)</title><rect x="51.0143%" y="693" width="0.3704%" height="15" fill="rgb(207,26,27)" fg:x="2892" fg:w="21"/><text x="51.2643%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.05%)</title><rect x="51.3318%" y="677" width="0.0529%" height="15" fill="rgb(252,98,18)" fg:x="2910" fg:w="3"/><text x="51.5818%" y="687.50"></text></g><g><title>ShiftMessageB (3 samples, 0.05%)</title><rect x="51.3318%" y="661" width="0.0529%" height="15" fill="rgb(244,8,26)" fg:x="2910" fg:w="3"/><text x="51.5818%" y="671.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="51.3494%" y="645" width="0.0353%" height="15" fill="rgb(237,173,45)" fg:x="2911" fg:w="2"/><text x="51.5994%" y="655.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="51.3671%" y="629" width="0.0176%" height="15" fill="rgb(208,213,49)" fg:x="2912" fg:w="1"/><text x="51.6171%" y="639.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="51.3847%" y="645" width="0.0353%" height="15" fill="rgb(212,122,37)" fg:x="2913" fg:w="2"/><text x="51.6347%" y="655.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="51.4200%" y="645" width="0.0176%" height="15" fill="rgb(213,80,17)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="51.4200%" y="629" width="0.0176%" height="15" fill="rgb(206,210,43)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="639.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.4200%" y="613" width="0.0176%" height="15" fill="rgb(229,214,3)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="623.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4200%" y="597" width="0.0176%" height="15" fill="rgb(235,213,29)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="607.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4200%" y="581" width="0.0176%" height="15" fill="rgb(248,135,26)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="591.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.4200%" y="565" width="0.0176%" height="15" fill="rgb(242,188,12)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="575.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.4200%" y="549" width="0.0176%" height="15" fill="rgb(245,38,12)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="559.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4200%" y="533" width="0.0176%" height="15" fill="rgb(218,42,13)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="543.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="51.4200%" y="517" width="0.0176%" height="15" fill="rgb(238,132,49)" fg:x="2915" fg:w="1"/><text x="51.6700%" y="527.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (26 samples, 0.46%)</title><rect x="51.0143%" y="741" width="0.4586%" height="15" fill="rgb(209,196,19)" fg:x="2892" fg:w="26"/><text x="51.2643%" y="751.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (26 samples, 0.46%)</title><rect x="51.0143%" y="725" width="0.4586%" height="15" fill="rgb(244,131,22)" fg:x="2892" fg:w="26"/><text x="51.2643%" y="735.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="51.3847%" y="709" width="0.0882%" height="15" fill="rgb(223,18,34)" fg:x="2913" fg:w="5"/><text x="51.6347%" y="719.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (5 samples, 0.09%)</title><rect x="51.3847%" y="693" width="0.0882%" height="15" fill="rgb(252,124,54)" fg:x="2913" fg:w="5"/><text x="51.6347%" y="703.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (5 samples, 0.09%)</title><rect x="51.3847%" y="677" width="0.0882%" height="15" fill="rgb(229,106,42)" fg:x="2913" fg:w="5"/><text x="51.6347%" y="687.50"></text></g><g><title>HashWriter::write (5 samples, 0.09%)</title><rect x="51.3847%" y="661" width="0.0882%" height="15" fill="rgb(221,129,1)" fg:x="2913" fg:w="5"/><text x="51.6347%" y="671.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.4376%" y="645" width="0.0353%" height="15" fill="rgb(229,74,15)" fg:x="2916" fg:w="2"/><text x="51.6876%" y="655.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="51.4376%" y="629" width="0.0353%" height="15" fill="rgb(210,206,50)" fg:x="2916" fg:w="2"/><text x="51.6876%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.4553%" y="613" width="0.0176%" height="15" fill="rgb(251,114,31)" fg:x="2917" fg:w="1"/><text x="51.7053%" y="623.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::GetStream (1 samples, 0.02%)</title><rect x="51.4553%" y="597" width="0.0176%" height="15" fill="rgb(215,225,28)" fg:x="2917" fg:w="1"/><text x="51.7053%" y="607.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="51.4729%" y="677" width="0.0176%" height="15" fill="rgb(237,109,14)" fg:x="2918" fg:w="1"/><text x="51.7229%" y="687.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.4729%" y="661" width="0.0176%" height="15" fill="rgb(230,13,37)" fg:x="2918" fg:w="1"/><text x="51.7229%" y="671.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="51.4906%" y="661" width="0.0176%" height="15" fill="rgb(231,40,28)" fg:x="2919" fg:w="1"/><text x="51.7406%" y="671.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="51.4906%" y="645" width="0.0176%" height="15" fill="rgb(231,202,18)" fg:x="2919" fg:w="1"/><text x="51.7406%" y="655.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.4906%" y="629" width="0.0176%" height="15" fill="rgb(225,33,18)" fg:x="2919" fg:w="1"/><text x="51.7406%" y="639.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (29 samples, 0.51%)</title><rect x="51.0143%" y="821" width="0.5116%" height="15" fill="rgb(223,64,47)" fg:x="2892" fg:w="29"/><text x="51.2643%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (29 samples, 0.51%)</title><rect x="51.0143%" y="805" width="0.5116%" height="15" fill="rgb(234,114,13)" fg:x="2892" fg:w="29"/><text x="51.2643%" y="815.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (29 samples, 0.51%)</title><rect x="51.0143%" y="789" width="0.5116%" height="15" fill="rgb(248,56,40)" fg:x="2892" fg:w="29"/><text x="51.2643%" y="799.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (29 samples, 0.51%)</title><rect x="51.0143%" y="773" width="0.5116%" height="15" fill="rgb(221,194,21)" fg:x="2892" fg:w="29"/><text x="51.2643%" y="783.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (29 samples, 0.51%)</title><rect x="51.0143%" y="757" width="0.5116%" height="15" fill="rgb(242,108,46)" fg:x="2892" fg:w="29"/><text x="51.2643%" y="767.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="51.4729%" y="741" width="0.0529%" height="15" fill="rgb(220,106,10)" fg:x="2918" fg:w="3"/><text x="51.7229%" y="751.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="51.4729%" y="725" width="0.0529%" height="15" fill="rgb(211,88,4)" fg:x="2918" fg:w="3"/><text x="51.7229%" y="735.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (3 samples, 0.05%)</title><rect x="51.4729%" y="709" width="0.0529%" height="15" fill="rgb(214,95,34)" fg:x="2918" fg:w="3"/><text x="51.7229%" y="719.50"></text></g><g><title>HashWriter::write (3 samples, 0.05%)</title><rect x="51.4729%" y="693" width="0.0529%" height="15" fill="rgb(250,160,33)" fg:x="2918" fg:w="3"/><text x="51.7229%" y="703.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="51.4906%" y="677" width="0.0353%" height="15" fill="rgb(225,29,10)" fg:x="2919" fg:w="2"/><text x="51.7406%" y="687.50"></text></g><g><title>Shuffle (1 samples, 0.02%)</title><rect x="51.5082%" y="661" width="0.0176%" height="15" fill="rgb(224,28,30)" fg:x="2920" fg:w="1"/><text x="51.7582%" y="671.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="51.5082%" y="645" width="0.0176%" height="15" fill="rgb(231,77,4)" fg:x="2920" fg:w="1"/><text x="51.7582%" y="655.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned char&gt;(unsigned char const&amp;) (1 samples, 0.02%)</title><rect x="51.5258%" y="821" width="0.0176%" height="15" fill="rgb(209,63,21)" fg:x="2921" fg:w="1"/><text x="51.7758%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.5258%" y="805" width="0.0176%" height="15" fill="rgb(226,22,11)" fg:x="2921" fg:w="1"/><text x="51.7758%" y="815.50"></text></g><g><title>void ser_writedata8&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="51.5258%" y="789" width="0.0176%" height="15" fill="rgb(216,82,30)" fg:x="2921" fg:w="1"/><text x="51.7758%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="51.5258%" y="773" width="0.0176%" height="15" fill="rgb(246,227,38)" fg:x="2921" fg:w="1"/><text x="51.7758%" y="783.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="51.5258%" y="757" width="0.0176%" height="15" fill="rgb(251,203,53)" fg:x="2921" fg:w="1"/><text x="51.7758%" y="767.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="51.5258%" y="741" width="0.0176%" height="15" fill="rgb(254,101,1)" fg:x="2921" fg:w="1"/><text x="51.7758%" y="751.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.02%)</title><rect x="51.5258%" y="725" width="0.0176%" height="15" fill="rgb(241,180,5)" fg:x="2921" fg:w="1"/><text x="51.7758%" y="735.50"></text></g><g><title>CSHA256::Write (3 samples, 0.05%)</title><rect x="51.5435%" y="741" width="0.0529%" height="15" fill="rgb(218,168,4)" fg:x="2922" fg:w="3"/><text x="51.7935%" y="751.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="51.5788%" y="725" width="0.0176%" height="15" fill="rgb(224,223,32)" fg:x="2924" fg:w="1"/><text x="51.8288%" y="735.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="51.5964%" y="709" width="0.0176%" height="15" fill="rgb(236,106,22)" fg:x="2925" fg:w="1"/><text x="51.8464%" y="719.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="51.6140%" y="709" width="0.0176%" height="15" fill="rgb(206,121,5)" fg:x="2926" fg:w="1"/><text x="51.8640%" y="719.50"></text></g><g><title>QuadRound (3 samples, 0.05%)</title><rect x="51.5964%" y="725" width="0.0529%" height="15" fill="rgb(233,87,28)" fg:x="2925" fg:w="3"/><text x="51.8464%" y="735.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="51.6317%" y="709" width="0.0176%" height="15" fill="rgb(236,137,17)" fg:x="2927" fg:w="1"/><text x="51.8817%" y="719.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="51.6493%" y="709" width="0.0176%" height="15" fill="rgb(209,183,38)" fg:x="2928" fg:w="1"/><text x="51.8993%" y="719.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="51.6493%" y="693" width="0.0176%" height="15" fill="rgb(206,162,44)" fg:x="2928" fg:w="1"/><text x="51.8993%" y="703.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="51.6670%" y="693" width="0.0353%" height="15" fill="rgb(237,70,39)" fg:x="2929" fg:w="2"/><text x="51.9170%" y="703.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (109 samples, 1.92%)</title><rect x="49.8148%" y="917" width="1.9227%" height="15" fill="rgb(212,176,5)" fg:x="2824" fg:w="109"/><text x="50.0648%" y="927.50">H..</text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (109 samples, 1.92%)</title><rect x="49.8148%" y="901" width="1.9227%" height="15" fill="rgb(232,95,16)" fg:x="2824" fg:w="109"/><text x="50.0648%" y="911.50">v..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (109 samples, 1.92%)</title><rect x="49.8148%" y="885" width="1.9227%" height="15" fill="rgb(219,115,35)" fg:x="2824" fg:w="109"/><text x="50.0648%" y="895.50">v..</text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (109 samples, 1.92%)</title><rect x="49.8148%" y="869" width="1.9227%" height="15" fill="rgb(251,67,27)" fg:x="2824" fg:w="109"/><text x="50.0648%" y="879.50">v..</text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (109 samples, 1.92%)</title><rect x="49.8148%" y="853" width="1.9227%" height="15" fill="rgb(222,95,40)" fg:x="2824" fg:w="109"/><text x="50.0648%" y="863.50">v..</text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (99 samples, 1.75%)</title><rect x="49.9912%" y="837" width="1.7463%" height="15" fill="rgb(250,35,16)" fg:x="2834" fg:w="99"/><text x="50.2412%" y="847.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;unsigned int&gt;(unsigned int const&amp;) (11 samples, 0.19%)</title><rect x="51.5435%" y="821" width="0.1940%" height="15" fill="rgb(224,86,44)" fg:x="2922" fg:w="11"/><text x="51.7935%" y="831.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.19%)</title><rect x="51.5435%" y="805" width="0.1940%" height="15" fill="rgb(237,53,53)" fg:x="2922" fg:w="11"/><text x="51.7935%" y="815.50"></text></g><g><title>void ser_writedata32&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (11 samples, 0.19%)</title><rect x="51.5435%" y="789" width="0.1940%" height="15" fill="rgb(208,171,33)" fg:x="2922" fg:w="11"/><text x="51.7935%" y="799.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::write (11 samples, 0.19%)</title><rect x="51.5435%" y="773" width="0.1940%" height="15" fill="rgb(222,64,27)" fg:x="2922" fg:w="11"/><text x="51.7935%" y="783.50"></text></g><g><title>HashWriter::write (11 samples, 0.19%)</title><rect x="51.5435%" y="757" width="0.1940%" height="15" fill="rgb(221,121,35)" fg:x="2922" fg:w="11"/><text x="51.7935%" y="767.50"></text></g><g><title>sha256_x86_shani::Transform (8 samples, 0.14%)</title><rect x="51.5964%" y="741" width="0.1411%" height="15" fill="rgb(228,137,42)" fg:x="2925" fg:w="8"/><text x="51.8464%" y="751.50"></text></g><g><title>ShiftMessageB (5 samples, 0.09%)</title><rect x="51.6493%" y="725" width="0.0882%" height="15" fill="rgb(227,54,21)" fg:x="2928" fg:w="5"/><text x="51.8993%" y="735.50"></text></g><g><title>ShiftMessageC (4 samples, 0.07%)</title><rect x="51.6670%" y="709" width="0.0706%" height="15" fill="rgb(240,168,33)" fg:x="2929" fg:w="4"/><text x="51.9170%" y="719.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="51.7022%" y="693" width="0.0353%" height="15" fill="rgb(243,159,6)" fg:x="2931" fg:w="2"/><text x="51.9522%" y="703.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="51.7552%" y="869" width="0.0176%" height="15" fill="rgb(205,211,41)" fg:x="2934" fg:w="1"/><text x="52.0052%" y="879.50"></text></g><g><title>CSHA256::Write (10 samples, 0.18%)</title><rect x="51.7728%" y="869" width="0.1764%" height="15" fill="rgb(253,30,1)" fg:x="2935" fg:w="10"/><text x="52.0228%" y="879.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.04%)</title><rect x="51.9492%" y="869" width="0.0353%" height="15" fill="rgb(226,80,18)" fg:x="2945" fg:w="2"/><text x="52.1992%" y="879.50"></text></g><g><title>CTransaction::ComputeWitnessHash (2 samples, 0.04%)</title><rect x="51.9492%" y="853" width="0.0353%" height="15" fill="rgb(253,156,46)" fg:x="2945" fg:w="2"/><text x="52.1992%" y="863.50"></text></g><g><title>HashWriter::GetHash (2 samples, 0.04%)</title><rect x="51.9492%" y="837" width="0.0353%" height="15" fill="rgb(248,87,27)" fg:x="2945" fg:w="2"/><text x="52.1992%" y="847.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="52.0021%" y="853" width="0.0176%" height="15" fill="rgb(227,122,2)" fg:x="2948" fg:w="1"/><text x="52.2521%" y="863.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="52.0021%" y="837" width="0.0176%" height="15" fill="rgb(229,94,39)" fg:x="2948" fg:w="1"/><text x="52.2521%" y="847.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="52.0021%" y="821" width="0.0176%" height="15" fill="rgb(225,173,31)" fg:x="2948" fg:w="1"/><text x="52.2521%" y="831.50"></text></g><g><title>sha256_x86_shani::Transform (3 samples, 0.05%)</title><rect x="51.9845%" y="869" width="0.0529%" height="15" fill="rgb(239,176,30)" fg:x="2947" fg:w="3"/><text x="52.2345%" y="879.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="52.0198%" y="853" width="0.0176%" height="15" fill="rgb(212,104,21)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="837" width="0.0176%" height="15" fill="rgb(240,209,40)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="821" width="0.0176%" height="15" fill="rgb(234,195,5)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="805" width="0.0176%" height="15" fill="rgb(238,213,1)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="789" width="0.0176%" height="15" fill="rgb(235,182,54)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="773" width="0.0176%" height="15" fill="rgb(229,50,46)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="757" width="0.0176%" height="15" fill="rgb(219,145,13)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="767.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="52.0198%" y="741" width="0.0176%" height="15" fill="rgb(220,226,10)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="725" width="0.0176%" height="15" fill="rgb(248,47,30)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="709" width="0.0176%" height="15" fill="rgb(231,209,44)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="693" width="0.0176%" height="15" fill="rgb(209,80,30)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.0198%" y="677" width="0.0176%" height="15" fill="rgb(232,9,14)" fg:x="2949" fg:w="1"/><text x="52.2698%" y="687.50"></text></g><g><title>CSHA256::Write (18 samples, 0.32%)</title><rect x="51.7375%" y="885" width="0.3175%" height="15" fill="rgb(243,91,43)" fg:x="2933" fg:w="18"/><text x="51.9875%" y="895.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.0374%" y="869" width="0.0176%" height="15" fill="rgb(231,90,52)" fg:x="2950" fg:w="1"/><text x="52.2874%" y="879.50"></text></g><g><title>_mm_add_epi32 (2 samples, 0.04%)</title><rect x="52.0903%" y="853" width="0.0353%" height="15" fill="rgb(253,192,44)" fg:x="2953" fg:w="2"/><text x="52.3403%" y="863.50"></text></g><g><title>_mm_sha256rnds2_epu32 (4 samples, 0.07%)</title><rect x="52.1256%" y="853" width="0.0706%" height="15" fill="rgb(241,66,31)" fg:x="2955" fg:w="4"/><text x="52.3756%" y="863.50"></text></g><g><title>QuadRound (8 samples, 0.14%)</title><rect x="52.0903%" y="869" width="0.1411%" height="15" fill="rgb(235,81,37)" fg:x="2953" fg:w="8"/><text x="52.3403%" y="879.50"></text></g><g><title>_mm_shuffle_epi32 (2 samples, 0.04%)</title><rect x="52.1962%" y="853" width="0.0353%" height="15" fill="rgb(223,221,9)" fg:x="2959" fg:w="2"/><text x="52.4462%" y="863.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="52.2314%" y="853" width="0.0353%" height="15" fill="rgb(242,180,7)" fg:x="2961" fg:w="2"/><text x="52.4814%" y="863.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="52.2314%" y="837" width="0.0353%" height="15" fill="rgb(243,78,19)" fg:x="2961" fg:w="2"/><text x="52.4814%" y="847.50"></text></g><g><title>_mm_add_epi32 (3 samples, 0.05%)</title><rect x="52.2667%" y="837" width="0.0529%" height="15" fill="rgb(233,23,17)" fg:x="2963" fg:w="3"/><text x="52.5167%" y="847.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="52.3196%" y="837" width="0.0176%" height="15" fill="rgb(252,122,45)" fg:x="2966" fg:w="1"/><text x="52.5696%" y="847.50"></text></g><g><title>ShiftMessageB (8 samples, 0.14%)</title><rect x="52.2314%" y="869" width="0.1411%" height="15" fill="rgb(247,108,20)" fg:x="2961" fg:w="8"/><text x="52.4814%" y="879.50"></text></g><g><title>ShiftMessageC (6 samples, 0.11%)</title><rect x="52.2667%" y="853" width="0.1058%" height="15" fill="rgb(235,84,21)" fg:x="2963" fg:w="6"/><text x="52.5167%" y="863.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="52.3373%" y="837" width="0.0353%" height="15" fill="rgb(247,129,10)" fg:x="2967" fg:w="2"/><text x="52.5873%" y="847.50"></text></g><g><title>CSHA256::Finalize (37 samples, 0.65%)</title><rect x="51.7375%" y="901" width="0.6527%" height="15" fill="rgb(208,173,14)" fg:x="2933" fg:w="37"/><text x="51.9875%" y="911.50"></text></g><g><title>sha256_x86_shani::Transform (19 samples, 0.34%)</title><rect x="52.0550%" y="885" width="0.3352%" height="15" fill="rgb(236,31,38)" fg:x="2951" fg:w="19"/><text x="52.3050%" y="895.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="52.3726%" y="869" width="0.0176%" height="15" fill="rgb(232,65,17)" fg:x="2969" fg:w="1"/><text x="52.6226%" y="879.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="52.3726%" y="853" width="0.0176%" height="15" fill="rgb(224,45,49)" fg:x="2969" fg:w="1"/><text x="52.6226%" y="863.50"></text></g><g><title>CTransaction::ComputeWitnessHash (147 samples, 2.59%)</title><rect x="49.8148%" y="949" width="2.5930%" height="15" fill="rgb(225,2,53)" fg:x="2824" fg:w="147"/><text x="50.0648%" y="959.50">CT..</text></g><g><title>CTransaction::ComputeWitnessHash (147 samples, 2.59%)</title><rect x="49.8148%" y="933" width="2.5930%" height="15" fill="rgb(248,210,53)" fg:x="2824" fg:w="147"/><text x="50.0648%" y="943.50">CT..</text></g><g><title>HashWriter::GetHash (38 samples, 0.67%)</title><rect x="51.7375%" y="917" width="0.6703%" height="15" fill="rgb(211,1,30)" fg:x="2933" fg:w="38"/><text x="51.9875%" y="927.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="52.3902%" y="901" width="0.0176%" height="15" fill="rgb(224,96,15)" fg:x="2970" fg:w="1"/><text x="52.6402%" y="911.50"></text></g><g><title>memcpy (1 samples, 0.02%)</title><rect x="52.3902%" y="885" width="0.0176%" height="15" fill="rgb(252,45,11)" fg:x="2970" fg:w="1"/><text x="52.6402%" y="895.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="52.4078%" y="949" width="0.0176%" height="15" fill="rgb(220,125,38)" fg:x="2971" fg:w="1"/><text x="52.6578%" y="959.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="52.4255%" y="949" width="0.0176%" height="15" fill="rgb(243,161,33)" fg:x="2972" fg:w="1"/><text x="52.6755%" y="959.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="52.4255%" y="933" width="0.0176%" height="15" fill="rgb(248,197,34)" fg:x="2972" fg:w="1"/><text x="52.6755%" y="943.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="52.4255%" y="917" width="0.0176%" height="15" fill="rgb(228,165,23)" fg:x="2972" fg:w="1"/><text x="52.6755%" y="927.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="52.4255%" y="901" width="0.0176%" height="15" fill="rgb(236,94,38)" fg:x="2972" fg:w="1"/><text x="52.6755%" y="911.50"></text></g><g><title>CTransaction::CTransaction (217 samples, 3.83%)</title><rect x="48.6329%" y="965" width="3.8278%" height="15" fill="rgb(220,13,23)" fg:x="2757" fg:w="217"/><text x="48.8829%" y="975.50">CTra..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="949" width="0.0176%" height="15" fill="rgb(234,26,39)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="933" width="0.0176%" height="15" fill="rgb(205,117,44)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="943.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="917" width="0.0176%" height="15" fill="rgb(250,42,2)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="927.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="901" width="0.0176%" height="15" fill="rgb(223,83,14)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="911.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="885" width="0.0176%" height="15" fill="rgb(241,147,50)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="895.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="869" width="0.0176%" height="15" fill="rgb(218,90,6)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="853" width="0.0176%" height="15" fill="rgb(210,191,5)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="863.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="837" width="0.0176%" height="15" fill="rgb(225,139,19)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="847.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="821" width="0.0176%" height="15" fill="rgb(210,1,33)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="831.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="805" width="0.0176%" height="15" fill="rgb(213,50,3)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="815.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="789" width="0.0176%" height="15" fill="rgb(234,227,4)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="799.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="773" width="0.0176%" height="15" fill="rgb(246,63,5)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="783.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (1 samples, 0.02%)</title><rect x="52.4431%" y="757" width="0.0176%" height="15" fill="rgb(245,136,27)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="741" width="0.0176%" height="15" fill="rgb(247,199,27)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="751.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="725" width="0.0176%" height="15" fill="rgb(252,158,49)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="735.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="709" width="0.0176%" height="15" fill="rgb(254,73,1)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="719.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="693" width="0.0176%" height="15" fill="rgb(248,93,19)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="703.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="677" width="0.0176%" height="15" fill="rgb(206,67,5)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="687.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="52.4431%" y="661" width="0.0176%" height="15" fill="rgb(209,210,4)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="671.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="52.4431%" y="645" width="0.0176%" height="15" fill="rgb(214,185,36)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="655.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="52.4431%" y="629" width="0.0176%" height="15" fill="rgb(233,191,26)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="639.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.4431%" y="613" width="0.0176%" height="15" fill="rgb(248,94,17)" fg:x="2973" fg:w="1"/><text x="52.6931%" y="623.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="52.4608%" y="965" width="0.0176%" height="15" fill="rgb(250,64,4)" fg:x="2974" fg:w="1"/><text x="52.7108%" y="975.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="52.4784%" y="965" width="0.0176%" height="15" fill="rgb(218,41,53)" fg:x="2975" fg:w="1"/><text x="52.7284%" y="975.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.4960%" y="693" width="0.0176%" height="15" fill="rgb(251,176,28)" fg:x="2976" fg:w="1"/><text x="52.7460%" y="703.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (402 samples, 7.09%)</title><rect x="45.4401%" y="1029" width="7.0912%" height="15" fill="rgb(247,22,9)" fg:x="2576" fg:w="402"/><text x="45.6901%" y="1039.50">std::_Sp_c..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (402 samples, 7.09%)</title><rect x="45.4401%" y="1013" width="7.0912%" height="15" fill="rgb(218,201,14)" fg:x="2576" fg:w="402"/><text x="45.6901%" y="1023.50">void std::..</text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (402 samples, 7.09%)</title><rect x="45.4401%" y="997" width="7.0912%" height="15" fill="rgb(218,94,10)" fg:x="2576" fg:w="402"/><text x="45.6901%" y="1007.50">void std::..</text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (402 samples, 7.09%)</title><rect x="45.4401%" y="981" width="7.0912%" height="15" fill="rgb(222,183,52)" fg:x="2576" fg:w="402"/><text x="45.6901%" y="991.50">CTransacti..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="965" width="0.0353%" height="15" fill="rgb(242,140,25)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="975.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="949" width="0.0353%" height="15" fill="rgb(235,197,38)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="959.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="933" width="0.0353%" height="15" fill="rgb(237,136,15)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="943.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="917" width="0.0353%" height="15" fill="rgb(223,44,49)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="927.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="901" width="0.0353%" height="15" fill="rgb(227,71,15)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="911.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="885" width="0.0353%" height="15" fill="rgb(225,153,20)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="895.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="869" width="0.0353%" height="15" fill="rgb(210,190,26)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="879.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="853" width="0.0353%" height="15" fill="rgb(223,147,5)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="863.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="837" width="0.0353%" height="15" fill="rgb(207,14,23)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="847.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="821" width="0.0353%" height="15" fill="rgb(211,195,53)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="831.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="805" width="0.0353%" height="15" fill="rgb(237,75,46)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="815.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="789" width="0.0353%" height="15" fill="rgb(254,55,14)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="799.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (2 samples, 0.04%)</title><rect x="52.4960%" y="773" width="0.0353%" height="15" fill="rgb(230,185,30)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="783.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="757" width="0.0353%" height="15" fill="rgb(220,14,11)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="767.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="741" width="0.0353%" height="15" fill="rgb(215,169,44)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="751.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="725" width="0.0353%" height="15" fill="rgb(253,203,20)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="735.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="52.4960%" y="709" width="0.0353%" height="15" fill="rgb(229,225,17)" fg:x="2976" fg:w="2"/><text x="52.7460%" y="719.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.5137%" y="693" width="0.0176%" height="15" fill="rgb(236,76,26)" fg:x="2977" fg:w="1"/><text x="52.7637%" y="703.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.02%)</title><rect x="52.5137%" y="677" width="0.0176%" height="15" fill="rgb(234,15,30)" fg:x="2977" fg:w="1"/><text x="52.7637%" y="687.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="52.5137%" y="661" width="0.0176%" height="15" fill="rgb(211,113,48)" fg:x="2977" fg:w="1"/><text x="52.7637%" y="671.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="52.5137%" y="645" width="0.0176%" height="15" fill="rgb(221,31,36)" fg:x="2977" fg:w="1"/><text x="52.7637%" y="655.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.5137%" y="629" width="0.0176%" height="15" fill="rgb(215,118,52)" fg:x="2977" fg:w="1"/><text x="52.7637%" y="639.50"></text></g><g><title>__lll_lock_wake_private (2 samples, 0.04%)</title><rect x="52.5490%" y="933" width="0.0353%" height="15" fill="rgb(241,151,27)" fg:x="2979" fg:w="2"/><text x="52.7990%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="52.5490%" y="917" width="0.0353%" height="15" fill="rgb(253,51,3)" fg:x="2979" fg:w="2"/><text x="52.7990%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="52.5490%" y="901" width="0.0353%" height="15" fill="rgb(216,201,24)" fg:x="2979" fg:w="2"/><text x="52.7990%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="52.5490%" y="885" width="0.0353%" height="15" fill="rgb(231,107,4)" fg:x="2979" fg:w="2"/><text x="52.7990%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.5666%" y="869" width="0.0176%" height="15" fill="rgb(243,97,54)" fg:x="2980" fg:w="1"/><text x="52.8166%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.5666%" y="853" width="0.0176%" height="15" fill="rgb(221,32,51)" fg:x="2980" fg:w="1"/><text x="52.8166%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="52.5666%" y="837" width="0.0176%" height="15" fill="rgb(218,171,35)" fg:x="2980" fg:w="1"/><text x="52.8166%" y="847.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (408 samples, 7.20%)</title><rect x="45.4225%" y="1109" width="7.1970%" height="15" fill="rgb(214,20,53)" fg:x="2575" fg:w="408"/><text x="45.6725%" y="1119.50">void Unser..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (407 samples, 7.18%)</title><rect x="45.4401%" y="1093" width="7.1794%" height="15" fill="rgb(239,9,52)" fg:x="2576" fg:w="407"/><text x="45.6901%" y="1103.50">std::share..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (407 samples, 7.18%)</title><rect x="45.4401%" y="1077" width="7.1794%" height="15" fill="rgb(215,114,45)" fg:x="2576" fg:w="407"/><text x="45.6901%" y="1087.50">std::share..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (407 samples, 7.18%)</title><rect x="45.4401%" y="1061" width="7.1794%" height="15" fill="rgb(208,118,9)" fg:x="2576" fg:w="407"/><text x="45.6901%" y="1071.50">std::__sha..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (407 samples, 7.18%)</title><rect x="45.4401%" y="1045" width="7.1794%" height="15" fill="rgb(235,7,39)" fg:x="2576" fg:w="407"/><text x="45.6901%" y="1055.50">std::__sha..</text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="52.5313%" y="1029" width="0.0882%" height="15" fill="rgb(243,225,15)" fg:x="2978" fg:w="5"/><text x="52.7813%" y="1039.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (5 samples, 0.09%)</title><rect x="52.5313%" y="1013" width="0.0882%" height="15" fill="rgb(225,216,18)" fg:x="2978" fg:w="5"/><text x="52.7813%" y="1023.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (5 samples, 0.09%)</title><rect x="52.5313%" y="997" width="0.0882%" height="15" fill="rgb(233,36,38)" fg:x="2978" fg:w="5"/><text x="52.7813%" y="1007.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (5 samples, 0.09%)</title><rect x="52.5313%" y="981" width="0.0882%" height="15" fill="rgb(239,88,23)" fg:x="2978" fg:w="5"/><text x="52.7813%" y="991.50"></text></g><g><title>operator new (5 samples, 0.09%)</title><rect x="52.5313%" y="965" width="0.0882%" height="15" fill="rgb(219,181,35)" fg:x="2978" fg:w="5"/><text x="52.7813%" y="975.50"></text></g><g><title>malloc (4 samples, 0.07%)</title><rect x="52.5490%" y="949" width="0.0706%" height="15" fill="rgb(215,18,46)" fg:x="2979" fg:w="4"/><text x="52.7990%" y="959.50"></text></g><g><title>_int_malloc (2 samples, 0.04%)</title><rect x="52.5842%" y="933" width="0.0353%" height="15" fill="rgb(241,38,11)" fg:x="2981" fg:w="2"/><text x="52.8342%" y="943.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (414 samples, 7.30%)</title><rect x="45.3519%" y="1333" width="7.3029%" height="15" fill="rgb(248,169,45)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1343.50">DataStream..</text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1317" width="7.3029%" height="15" fill="rgb(239,50,49)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1327.50">void Unser..</text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1301" width="7.3029%" height="15" fill="rgb(231,96,31)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1311.50">void Param..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1285" width="7.3029%" height="15" fill="rgb(224,193,37)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1295.50">void Unser..</text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1269" width="7.3029%" height="15" fill="rgb(227,153,50)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1279.50">void CBloc..</text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1253" width="7.3029%" height="15" fill="rgb(249,228,3)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1263.50">void CBloc..</text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1237" width="7.3029%" height="15" fill="rgb(219,164,43)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1247.50">void CBloc..</text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1221" width="7.3029%" height="15" fill="rgb(216,45,41)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1231.50">void Actio..</text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1205" width="7.3029%" height="15" fill="rgb(210,226,51)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1215.50">void Unser..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1189" width="7.3029%" height="15" fill="rgb(209,117,49)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1199.50">void Unser..</text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1173" width="7.3029%" height="15" fill="rgb(206,196,24)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1183.50">void Unser..</text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (414 samples, 7.30%)</title><rect x="45.3519%" y="1157" width="7.3029%" height="15" fill="rgb(253,218,3)" fg:x="2571" fg:w="414"/><text x="45.6019%" y="1167.50">void Wrapp..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (413 samples, 7.29%)</title><rect x="45.3696%" y="1141" width="7.2852%" height="15" fill="rgb(252,166,2)" fg:x="2572" fg:w="413"/><text x="45.6196%" y="1151.50">void Vecto..</text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (413 samples, 7.29%)</title><rect x="45.3696%" y="1125" width="7.2852%" height="15" fill="rgb(236,218,26)" fg:x="2572" fg:w="413"/><text x="45.6196%" y="1135.50">void Defau..</text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="1109" width="0.0353%" height="15" fill="rgb(254,84,19)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1119.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="1093" width="0.0353%" height="15" fill="rgb(219,137,29)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1103.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut&amp;&gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="1077" width="0.0353%" height="15" fill="rgb(227,47,52)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1087.50"></text></g><g><title>void CTxOut::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="1061" width="0.0353%" height="15" fill="rgb(229,167,24)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1071.50"></text></g><g><title>void CTxOut::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="1045" width="0.0353%" height="15" fill="rgb(233,164,1)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1055.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxOut, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="1029" width="0.0353%" height="15" fill="rgb(218,88,48)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1039.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="1013" width="0.0353%" height="15" fill="rgb(226,214,24)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1023.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, long&amp;, CScript&amp;&gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="997" width="0.0353%" height="15" fill="rgb(233,29,12)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="1007.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="981" width="0.0353%" height="15" fill="rgb(219,120,34)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="991.50"></text></g><g><title>unsigned long ser_readdata64&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="52.6195%" y="965" width="0.0353%" height="15" fill="rgb(226,78,44)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="975.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.04%)</title><rect x="52.6195%" y="949" width="0.0353%" height="15" fill="rgb(240,15,48)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="959.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="52.6195%" y="933" width="0.0353%" height="15" fill="rgb(253,176,7)" fg:x="2983" fg:w="2"/><text x="52.8695%" y="943.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="52.6371%" y="917" width="0.0176%" height="15" fill="rgb(206,166,28)" fg:x="2984" fg:w="1"/><text x="52.8871%" y="927.50"></text></g><g><title>_mm_add_epi32 (5 samples, 0.09%)</title><rect x="52.6901%" y="1221" width="0.0882%" height="15" fill="rgb(241,53,51)" fg:x="2987" fg:w="5"/><text x="52.9401%" y="1231.50"></text></g><g><title>QuadRound (11 samples, 0.19%)</title><rect x="52.6901%" y="1237" width="0.1940%" height="15" fill="rgb(249,112,30)" fg:x="2987" fg:w="11"/><text x="52.9401%" y="1247.50"></text></g><g><title>_mm_sha256rnds2_epu32 (6 samples, 0.11%)</title><rect x="52.7783%" y="1221" width="0.1058%" height="15" fill="rgb(217,85,30)" fg:x="2992" fg:w="6"/><text x="53.0283%" y="1231.50"></text></g><g><title>ShiftMessageA (1 samples, 0.02%)</title><rect x="52.8841%" y="1221" width="0.0176%" height="15" fill="rgb(233,49,7)" fg:x="2998" fg:w="1"/><text x="53.1341%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (1 samples, 0.02%)</title><rect x="52.8841%" y="1205" width="0.0176%" height="15" fill="rgb(234,109,9)" fg:x="2998" fg:w="1"/><text x="53.1341%" y="1215.50"></text></g><g><title>ShiftMessageB (3 samples, 0.05%)</title><rect x="52.8841%" y="1237" width="0.0529%" height="15" fill="rgb(253,95,22)" fg:x="2998" fg:w="3"/><text x="53.1341%" y="1247.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="52.9017%" y="1221" width="0.0353%" height="15" fill="rgb(233,176,25)" fg:x="2999" fg:w="2"/><text x="53.1517%" y="1231.50"></text></g><g><title>_mm_sha256msg2_epu32 (2 samples, 0.04%)</title><rect x="52.9017%" y="1205" width="0.0353%" height="15" fill="rgb(236,33,39)" fg:x="2999" fg:w="2"/><text x="53.1517%" y="1215.50"></text></g><g><title>ShiftMessageC (2 samples, 0.04%)</title><rect x="52.9370%" y="1237" width="0.0353%" height="15" fill="rgb(223,226,42)" fg:x="3001" fg:w="2"/><text x="53.1870%" y="1247.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.04%)</title><rect x="52.9370%" y="1221" width="0.0353%" height="15" fill="rgb(216,99,33)" fg:x="3001" fg:w="2"/><text x="53.1870%" y="1231.50"></text></g><g><title>CheckMerkleRoot (19 samples, 0.34%)</title><rect x="52.6548%" y="1317" width="0.3352%" height="15" fill="rgb(235,84,23)" fg:x="2985" fg:w="19"/><text x="52.9048%" y="1327.50"></text></g><g><title>BlockMerkleRoot (19 samples, 0.34%)</title><rect x="52.6548%" y="1301" width="0.3352%" height="15" fill="rgb(232,2,27)" fg:x="2985" fg:w="19"/><text x="52.9048%" y="1311.50"></text></g><g><title>ComputeMerkleRoot (17 samples, 0.30%)</title><rect x="52.6901%" y="1285" width="0.2999%" height="15" fill="rgb(241,23,22)" fg:x="2987" fg:w="17"/><text x="52.9401%" y="1295.50"></text></g><g><title>SHA256D64 (17 samples, 0.30%)</title><rect x="52.6901%" y="1269" width="0.2999%" height="15" fill="rgb(211,73,27)" fg:x="2987" fg:w="17"/><text x="52.9401%" y="1279.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (17 samples, 0.30%)</title><rect x="52.6901%" y="1253" width="0.2999%" height="15" fill="rgb(235,109,49)" fg:x="2987" fg:w="17"/><text x="52.9401%" y="1263.50"></text></g><g><title>Unshuffle (1 samples, 0.02%)</title><rect x="52.9723%" y="1237" width="0.0176%" height="15" fill="rgb(230,99,29)" fg:x="3003" fg:w="1"/><text x="53.2223%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (1 samples, 0.02%)</title><rect x="52.9723%" y="1221" width="0.0176%" height="15" fill="rgb(245,199,7)" fg:x="3003" fg:w="1"/><text x="53.2223%" y="1231.50"></text></g><g><title>Load (1 samples, 0.02%)</title><rect x="53.0076%" y="1237" width="0.0176%" height="15" fill="rgb(217,179,10)" fg:x="3005" fg:w="1"/><text x="53.2576%" y="1247.50"></text></g><g><title>_mm_shuffle_epi8 (1 samples, 0.02%)</title><rect x="53.0076%" y="1221" width="0.0176%" height="15" fill="rgb(254,99,47)" fg:x="3005" fg:w="1"/><text x="53.2576%" y="1231.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="53.0252%" y="1221" width="0.0176%" height="15" fill="rgb(251,121,7)" fg:x="3006" fg:w="1"/><text x="53.2752%" y="1231.50"></text></g><g><title>QuadRound (3 samples, 0.05%)</title><rect x="53.0252%" y="1237" width="0.0529%" height="15" fill="rgb(250,177,26)" fg:x="3006" fg:w="3"/><text x="53.2752%" y="1247.50"></text></g><g><title>_mm_shuffle_epi32 (2 samples, 0.04%)</title><rect x="53.0429%" y="1221" width="0.0353%" height="15" fill="rgb(232,88,15)" fg:x="3007" fg:w="2"/><text x="53.2929%" y="1231.50"></text></g><g><title>ShiftMessageA (2 samples, 0.04%)</title><rect x="53.0781%" y="1221" width="0.0353%" height="15" fill="rgb(251,54,54)" fg:x="3009" fg:w="2"/><text x="53.3281%" y="1231.50"></text></g><g><title>_mm_sha256msg1_epu32 (2 samples, 0.04%)</title><rect x="53.0781%" y="1205" width="0.0353%" height="15" fill="rgb(208,177,15)" fg:x="3009" fg:w="2"/><text x="53.3281%" y="1215.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="53.1134%" y="1205" width="0.0176%" height="15" fill="rgb(205,97,32)" fg:x="3011" fg:w="1"/><text x="53.3634%" y="1215.50"></text></g><g><title>_mm_alignr_epi8 (2 samples, 0.04%)</title><rect x="53.1311%" y="1205" width="0.0353%" height="15" fill="rgb(217,192,13)" fg:x="3012" fg:w="2"/><text x="53.3811%" y="1215.50"></text></g><g><title>BlockWitnessMerkleRoot (16 samples, 0.28%)</title><rect x="52.9899%" y="1301" width="0.2822%" height="15" fill="rgb(215,163,41)" fg:x="3004" fg:w="16"/><text x="53.2399%" y="1311.50"></text></g><g><title>ComputeMerkleRoot (15 samples, 0.26%)</title><rect x="53.0076%" y="1285" width="0.2646%" height="15" fill="rgb(246,83,29)" fg:x="3005" fg:w="15"/><text x="53.2576%" y="1295.50"></text></g><g><title>SHA256D64 (15 samples, 0.26%)</title><rect x="53.0076%" y="1269" width="0.2646%" height="15" fill="rgb(219,2,45)" fg:x="3005" fg:w="15"/><text x="53.2576%" y="1279.50"></text></g><g><title>sha256d64_x86_shani::Transform_2way (15 samples, 0.26%)</title><rect x="53.0076%" y="1253" width="0.2646%" height="15" fill="rgb(242,215,33)" fg:x="3005" fg:w="15"/><text x="53.2576%" y="1263.50"></text></g><g><title>ShiftMessageB (11 samples, 0.19%)</title><rect x="53.0781%" y="1237" width="0.1940%" height="15" fill="rgb(217,1,6)" fg:x="3009" fg:w="11"/><text x="53.3281%" y="1247.50"></text></g><g><title>ShiftMessageC (9 samples, 0.16%)</title><rect x="53.1134%" y="1221" width="0.1588%" height="15" fill="rgb(207,85,52)" fg:x="3011" fg:w="9"/><text x="53.3634%" y="1231.50"></text></g><g><title>_mm_sha256msg2_epu32 (6 samples, 0.11%)</title><rect x="53.1663%" y="1205" width="0.1058%" height="15" fill="rgb(231,171,19)" fg:x="3014" fg:w="6"/><text x="53.4163%" y="1215.50"></text></g><g><title>IsBlockMutated (36 samples, 0.64%)</title><rect x="52.6548%" y="1333" width="0.6350%" height="15" fill="rgb(207,128,4)" fg:x="2985" fg:w="36"/><text x="52.9048%" y="1343.50"></text></g><g><title>CheckWitnessMalleation (17 samples, 0.30%)</title><rect x="52.9899%" y="1317" width="0.2999%" height="15" fill="rgb(219,208,4)" fg:x="3004" fg:w="17"/><text x="53.2399%" y="1327.50"></text></g><g><title>CHash256::Finalize (1 samples, 0.02%)</title><rect x="53.2722%" y="1301" width="0.0176%" height="15" fill="rgb(235,161,42)" fg:x="3020" fg:w="1"/><text x="53.5222%" y="1311.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.02%)</title><rect x="53.2722%" y="1285" width="0.0176%" height="15" fill="rgb(247,218,18)" fg:x="3020" fg:w="1"/><text x="53.5222%" y="1295.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="53.2722%" y="1269" width="0.0176%" height="15" fill="rgb(232,114,51)" fg:x="3020" fg:w="1"/><text x="53.5222%" y="1279.50"></text></g><g><title>CSHA256::Reset (1 samples, 0.02%)</title><rect x="53.2722%" y="1253" width="0.0176%" height="15" fill="rgb(222,95,3)" fg:x="3020" fg:w="1"/><text x="53.5222%" y="1263.50"></text></g><g><title>SendMessages (1 samples, 0.02%)</title><rect x="53.2898%" y="1333" width="0.0176%" height="15" fill="rgb(240,65,29)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1343.50"></text></g><g><title>std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="53.2898%" y="1317" width="0.0176%" height="15" fill="rgb(249,209,20)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1327.50"></text></g><g><title>std::_Vector_base&lt;CInv, std::allocator&lt;CInv&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="53.2898%" y="1301" width="0.0176%" height="15" fill="rgb(241,48,37)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;CInv, std::allocator&lt;CInv&gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="53.2898%" y="1285" width="0.0176%" height="15" fill="rgb(230,140,42)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1295.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CInv&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="53.2898%" y="1269" width="0.0176%" height="15" fill="rgb(230,176,45)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1279.50"></text></g><g><title>std::allocator&lt;CInv&gt;::allocate (1 samples, 0.02%)</title><rect x="53.2898%" y="1253" width="0.0176%" height="15" fill="rgb(245,112,21)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1263.50"></text></g><g><title>std::__new_allocator&lt;CInv&gt;::allocate (1 samples, 0.02%)</title><rect x="53.2898%" y="1237" width="0.0176%" height="15" fill="rgb(207,183,35)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1247.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="53.2898%" y="1221" width="0.0176%" height="15" fill="rgb(227,44,33)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1231.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="53.2898%" y="1205" width="0.0176%" height="15" fill="rgb(246,120,21)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1215.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="53.2898%" y="1189" width="0.0176%" height="15" fill="rgb(235,57,52)" fg:x="3021" fg:w="1"/><text x="53.5398%" y="1199.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (4 samples, 0.07%)</title><rect x="53.3075%" y="1333" width="0.0706%" height="15" fill="rgb(238,84,10)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1343.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::Enter (4 samples, 0.07%)</title><rect x="53.3075%" y="1317" width="0.0706%" height="15" fill="rgb(251,200,32)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1327.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (4 samples, 0.07%)</title><rect x="53.3075%" y="1301" width="0.0706%" height="15" fill="rgb(247,159,13)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1311.50"></text></g><g><title>std::mutex::lock (4 samples, 0.07%)</title><rect x="53.3075%" y="1285" width="0.0706%" height="15" fill="rgb(238,64,4)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1295.50"></text></g><g><title>UniqueLock&lt;AnnotatedMixin&lt;std::mutex&gt; &gt;::UniqueLock (4 samples, 0.07%)</title><rect x="53.3075%" y="1269" width="0.0706%" height="15" fill="rgb(221,131,51)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1279.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="53.3075%" y="1253" width="0.0706%" height="15" fill="rgb(242,5,29)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1263.50"></text></g><g><title>__GI___lll_lock_wait (4 samples, 0.07%)</title><rect x="53.3075%" y="1237" width="0.0706%" height="15" fill="rgb(214,130,32)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3075%" y="1221" width="0.0706%" height="15" fill="rgb(244,210,16)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3075%" y="1205" width="0.0706%" height="15" fill="rgb(234,48,26)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3075%" y="1189" width="0.0706%" height="15" fill="rgb(231,82,38)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3075%" y="1173" width="0.0706%" height="15" fill="rgb(254,128,41)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3075%" y="1157" width="0.0706%" height="15" fill="rgb(212,73,49)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="53.3075%" y="1141" width="0.0706%" height="15" fill="rgb(205,62,54)" fg:x="3022" fg:w="4"/><text x="53.5575%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1125" width="0.0529%" height="15" fill="rgb(228,0,8)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1109" width="0.0529%" height="15" fill="rgb(251,28,17)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1093" width="0.0529%" height="15" fill="rgb(238,105,27)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1077" width="0.0529%" height="15" fill="rgb(237,216,33)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1061" width="0.0529%" height="15" fill="rgb(229,228,25)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1045" width="0.0529%" height="15" fill="rgb(233,75,23)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1029" width="0.0529%" height="15" fill="rgb(231,207,16)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="1013" width="0.0529%" height="15" fill="rgb(231,191,45)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="997" width="0.0529%" height="15" fill="rgb(224,133,17)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="53.3251%" y="981" width="0.0529%" height="15" fill="rgb(209,178,27)" fg:x="3023" fg:w="3"/><text x="53.5751%" y="991.50"></text></g><g><title>std::optional&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::~optional (1 samples, 0.02%)</title><rect x="53.3780%" y="1333" width="0.0176%" height="15" fill="rgb(218,37,11)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1343.50"></text></g><g><title>std::_Optional_base&lt;std::pair&lt;CNetMessage, bool&gt;, false, false&gt;::~_Optional_base (1 samples, 0.02%)</title><rect x="53.3780%" y="1317" width="0.0176%" height="15" fill="rgb(251,226,25)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1327.50"></text></g><g><title>std::_Optional_payload&lt;std::pair&lt;CNetMessage, bool&gt;, false, false, false&gt;::~_Optional_payload (1 samples, 0.02%)</title><rect x="53.3780%" y="1301" width="0.0176%" height="15" fill="rgb(209,222,27)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1311.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="53.3780%" y="1285" width="0.0176%" height="15" fill="rgb(238,22,21)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1295.50"></text></g><g><title>std::_Optional_payload_base&lt;std::pair&lt;CNetMessage, bool&gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="53.3780%" y="1269" width="0.0176%" height="15" fill="rgb(233,161,25)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1279.50"></text></g><g><title>std::pair&lt;CNetMessage, bool&gt;::~pair (1 samples, 0.02%)</title><rect x="53.3780%" y="1253" width="0.0176%" height="15" fill="rgb(226,122,53)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1263.50"></text></g><g><title>CNetMessage::~CNetMessage (1 samples, 0.02%)</title><rect x="53.3780%" y="1237" width="0.0176%" height="15" fill="rgb(220,123,17)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1247.50"></text></g><g><title>DataStream::~DataStream (1 samples, 0.02%)</title><rect x="53.3780%" y="1221" width="0.0176%" height="15" fill="rgb(230,224,35)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="53.3780%" y="1205" width="0.0176%" height="15" fill="rgb(246,83,8)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::~_Vector_base (1 samples, 0.02%)</title><rect x="53.3780%" y="1189" width="0.0176%" height="15" fill="rgb(230,214,17)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="53.3780%" y="1173" width="0.0176%" height="15" fill="rgb(222,97,18)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="53.3780%" y="1157" width="0.0176%" height="15" fill="rgb(206,79,1)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1167.50"></text></g><g><title>zero_after_free_allocator&lt;std::byte&gt;::deallocate (1 samples, 0.02%)</title><rect x="53.3780%" y="1141" width="0.0176%" height="15" fill="rgb(214,121,34)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1151.50"></text></g><g><title>memory_cleanse (1 samples, 0.02%)</title><rect x="53.3780%" y="1125" width="0.0176%" height="15" fill="rgb(249,199,46)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1135.50"></text></g><g><title>memory_cleanse (1 samples, 0.02%)</title><rect x="53.3780%" y="1109" width="0.0176%" height="15" fill="rgb(214,222,46)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1119.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="53.3780%" y="1093" width="0.0176%" height="15" fill="rgb(248,168,30)" fg:x="3026" fg:w="1"/><text x="53.6280%" y="1103.50"></text></g><g><title>CConnman::PushMessage (1 samples, 0.02%)</title><rect x="53.3957%" y="1317" width="0.0176%" height="15" fill="rgb(226,14,28)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1327.50"></text></g><g><title>CConnman::SocketSendData (1 samples, 0.02%)</title><rect x="53.3957%" y="1301" width="0.0176%" height="15" fill="rgb(253,123,1)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1311.50"></text></g><g><title>__send (1 samples, 0.02%)</title><rect x="53.3957%" y="1285" width="0.0176%" height="15" fill="rgb(225,24,42)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1269" width="0.0176%" height="15" fill="rgb(216,161,37)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1253" width="0.0176%" height="15" fill="rgb(251,164,26)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1237" width="0.0176%" height="15" fill="rgb(219,177,3)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1221" width="0.0176%" height="15" fill="rgb(222,65,0)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1205" width="0.0176%" height="15" fill="rgb(223,69,54)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1189" width="0.0176%" height="15" fill="rgb(235,30,27)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1173" width="0.0176%" height="15" fill="rgb(220,183,50)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1157" width="0.0176%" height="15" fill="rgb(248,198,15)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1141" width="0.0176%" height="15" fill="rgb(222,211,4)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1125" width="0.0176%" height="15" fill="rgb(214,102,34)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1109" width="0.0176%" height="15" fill="rgb(245,92,5)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1093" width="0.0176%" height="15" fill="rgb(252,72,51)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1077" width="0.0176%" height="15" fill="rgb(252,208,19)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1061" width="0.0176%" height="15" fill="rgb(211,69,7)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.3957%" y="1045" width="0.0176%" height="15" fill="rgb(211,27,16)" fg:x="3027" fg:w="1"/><text x="53.6457%" y="1055.50"></text></g><g><title>__clone (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1509" width="41.4888%" height="15" fill="rgb(219,216,14)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1519.50">__clone</text></g><g><title>start_thread (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1493" width="41.4888%" height="15" fill="rgb(219,71,8)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1503.50">start_thread</text></g><g><title>execute_native_thread_routine (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1477" width="41.4888%" height="15" fill="rgb(223,170,53)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1487.50">execute_native_thread_routine</text></g><g><title>_M_run (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1461" width="41.4888%" height="15" fill="rgb(246,21,26)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1471.50">_M_run</text></g><g><title>operator (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1445" width="41.4888%" height="15" fill="rgb(248,20,46)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1429" width="41.4888%" height="15" fill="rgb(252,94,11)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1439.50">_M_invoke&lt;0, 1, 2&gt;</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1413" width="41.4888%" height="15" fill="rgb(236,163,8)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1423.50">__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1397" width="41.4888%" height="15" fill="rgb(217,221,45)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1407.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(s..</text></g><g><title>util::TraceThread (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1381" width="41.4888%" height="15" fill="rgb(238,38,17)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1391.50">util::TraceThread</text></g><g><title>std::function&lt;void ()&gt;::operator (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1365" width="41.4888%" height="15" fill="rgb(242,210,23)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1375.50">std::function&lt;void ()&gt;::operator</text></g><g><title>CConnman::ThreadMessageHandler (2,352 samples, 41.49%)</title><rect x="11.9421%" y="1349" width="41.4888%" height="15" fill="rgb(250,86,53)" fg:x="677" fg:w="2352"/><text x="12.1921%" y="1359.50">CConnman::ThreadMessageHandler</text></g><g><title>void (anonymous namespace)::PeerManagerImpl::MakeAndPushMessage&lt;std::vector&lt;CInv, std::allocator&lt;CInv&gt; &gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="53.3957%" y="1333" width="0.0353%" height="15" fill="rgb(223,168,25)" fg:x="3027" fg:w="2"/><text x="53.6457%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="53.4133%" y="1317" width="0.0176%" height="15" fill="rgb(251,189,4)" fg:x="3028" fg:w="1"/><text x="53.6633%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="53.4133%" y="1301" width="0.0176%" height="15" fill="rgb(245,19,28)" fg:x="3028" fg:w="1"/><text x="53.6633%" y="1311.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.04%)</title><rect x="53.4309%" y="1509" width="0.0353%" height="15" fill="rgb(207,10,34)" fg:x="3029" fg:w="2"/><text x="53.6809%" y="1519.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="53.4662%" y="1509" width="0.0176%" height="15" fill="rgb(235,153,31)" fg:x="3031" fg:w="1"/><text x="53.7162%" y="1519.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="53.4839%" y="1509" width="0.0176%" height="15" fill="rgb(228,72,37)" fg:x="3032" fg:w="1"/><text x="53.7339%" y="1519.50"></text></g><g><title>__strlen_evex (1 samples, 0.02%)</title><rect x="53.5015%" y="1509" width="0.0176%" height="15" fill="rgb(215,15,16)" fg:x="3033" fg:w="1"/><text x="53.7515%" y="1519.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="53.5191%" y="1509" width="0.0529%" height="15" fill="rgb(250,119,29)" fg:x="3034" fg:w="3"/><text x="53.7691%" y="1519.50"></text></g><g><title>_int_malloc (12 samples, 0.21%)</title><rect x="53.5721%" y="1509" width="0.2117%" height="15" fill="rgb(214,59,1)" fg:x="3037" fg:w="12"/><text x="53.8221%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="53.7661%" y="1493" width="0.0176%" height="15" fill="rgb(223,109,25)" fg:x="3048" fg:w="1"/><text x="54.0161%" y="1503.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="53.7837%" y="1509" width="0.0176%" height="15" fill="rgb(230,198,22)" fg:x="3049" fg:w="1"/><text x="54.0337%" y="1519.50"></text></g><g><title>_mm_crc32_u64 (4 samples, 0.07%)</title><rect x="53.8896%" y="1493" width="0.0706%" height="15" fill="rgb(245,184,46)" fg:x="3055" fg:w="4"/><text x="54.1396%" y="1503.50"></text></g><g><title>crc32c::ExtendSse42 (10 samples, 0.18%)</title><rect x="53.8014%" y="1509" width="0.1764%" height="15" fill="rgb(253,73,16)" fg:x="3050" fg:w="10"/><text x="54.0514%" y="1519.50"></text></g><g><title>_mm_crc32_u8 (1 samples, 0.02%)</title><rect x="53.9601%" y="1493" width="0.0176%" height="15" fill="rgb(206,94,45)" fg:x="3059" fg:w="1"/><text x="54.2101%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="54.0131%" y="1477" width="0.0176%" height="15" fill="rgb(236,83,27)" fg:x="3062" fg:w="1"/><text x="54.2631%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (4 samples, 0.07%)</title><rect x="53.9778%" y="1509" width="0.0706%" height="15" fill="rgb(220,196,8)" fg:x="3060" fg:w="4"/><text x="54.2278%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (3 samples, 0.05%)</title><rect x="53.9954%" y="1493" width="0.0529%" height="15" fill="rgb(254,185,14)" fg:x="3061" fg:w="3"/><text x="54.2454%" y="1503.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.02%)</title><rect x="54.0307%" y="1477" width="0.0176%" height="15" fill="rgb(226,50,22)" fg:x="3063" fg:w="1"/><text x="54.2807%" y="1487.50"></text></g><g><title>leveldb::Block::Iter::~Iter (2 samples, 0.04%)</title><rect x="54.0483%" y="1509" width="0.0353%" height="15" fill="rgb(253,147,0)" fg:x="3064" fg:w="2"/><text x="54.2983%" y="1519.50"></text></g><g><title>leveldb::Block::Iter::~Iter (2 samples, 0.04%)</title><rect x="54.0483%" y="1493" width="0.0353%" height="15" fill="rgb(252,46,33)" fg:x="3064" fg:w="2"/><text x="54.2983%" y="1503.50"></text></g><g><title>leveldb::Block::~Block (1 samples, 0.02%)</title><rect x="54.0836%" y="1509" width="0.0176%" height="15" fill="rgb(242,22,54)" fg:x="3066" fg:w="1"/><text x="54.3336%" y="1519.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.02%)</title><rect x="54.1013%" y="1509" width="0.0176%" height="15" fill="rgb(223,178,32)" fg:x="3067" fg:w="1"/><text x="54.3513%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="54.1189%" y="1509" width="0.0176%" height="15" fill="rgb(214,106,53)" fg:x="3068" fg:w="1"/><text x="54.3689%" y="1519.50"></text></g><g><title>leveldb::Iterator::~Iterator (1 samples, 0.02%)</title><rect x="54.1365%" y="1509" width="0.0176%" height="15" fill="rgb(232,65,50)" fg:x="3069" fg:w="1"/><text x="54.3865%" y="1519.50"></text></g><g><title>leveldb::SaveValue (1 samples, 0.02%)</title><rect x="54.1542%" y="1509" width="0.0176%" height="15" fill="rgb(231,110,28)" fg:x="3070" fg:w="1"/><text x="54.4042%" y="1519.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.02%)</title><rect x="54.1718%" y="1509" width="0.0176%" height="15" fill="rgb(216,71,40)" fg:x="3071" fg:w="1"/><text x="54.4218%" y="1519.50"></text></g><g><title>malloc (4 samples, 0.07%)</title><rect x="54.1895%" y="1509" width="0.0706%" height="15" fill="rgb(229,89,53)" fg:x="3072" fg:w="4"/><text x="54.4395%" y="1519.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="54.2600%" y="1509" width="0.0176%" height="15" fill="rgb(210,124,14)" fg:x="3076" fg:w="1"/><text x="54.5100%" y="1519.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1141" width="0.0706%" height="15" fill="rgb(236,213,6)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1151.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1125" width="0.0706%" height="15" fill="rgb(228,41,5)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1135.50"></text></g><g><title>void TxOutCompression::Ser&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1109" width="0.0706%" height="15" fill="rgb(221,167,25)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1119.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;AutoFile, CTxOut const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1093" width="0.0706%" height="15" fill="rgb(228,144,37)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1103.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1077" width="0.0706%" height="15" fill="rgb(227,189,38)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1087.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1061" width="0.0706%" height="15" fill="rgb(218,8,2)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1071.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1045" width="0.0706%" height="15" fill="rgb(209,61,28)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1055.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1029" width="0.0706%" height="15" fill="rgb(233,140,39)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1039.50"></text></g><g><title>void AmountCompression::Ser&lt;AutoFile, long&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="1013" width="0.0706%" height="15" fill="rgb(251,66,48)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1023.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (4 samples, 0.07%)</title><rect x="54.2777%" y="997" width="0.0706%" height="15" fill="rgb(210,44,45)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="1007.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="981" width="0.0706%" height="15" fill="rgb(214,136,46)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="991.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;AutoFile&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="965" width="0.0706%" height="15" fill="rgb(207,130,50)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="975.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;AutoFile, unsigned long&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="949" width="0.0706%" height="15" fill="rgb(228,102,49)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="959.50"></text></g><g><title>void WriteVarInt&lt;AutoFile, (VarIntMode)0, unsigned long&gt; (4 samples, 0.07%)</title><rect x="54.2777%" y="933" width="0.0706%" height="15" fill="rgb(253,55,1)" fg:x="3077" fg:w="4"/><text x="54.5277%" y="943.50"></text></g><g><title>node::BlockManager::UndoWriteToDisk (5 samples, 0.09%)</title><rect x="54.2777%" y="1509" width="0.0882%" height="15" fill="rgb(238,222,9)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1519.50"></text></g><g><title>AutoFile&amp; AutoFile::operator&lt;&lt; &lt;CBlockUndo&gt;(CBlockUndo const&amp;) (5 samples, 0.09%)</title><rect x="54.2777%" y="1493" width="0.0882%" height="15" fill="rgb(246,99,6)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1503.50"></text></g><g><title>void Serialize&lt;AutoFile, CBlockUndo&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1477" width="0.0882%" height="15" fill="rgb(219,110,26)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1487.50"></text></g><g><title>void CBlockUndo::Serialize&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1461" width="0.0882%" height="15" fill="rgb(239,160,33)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1471.50"></text></g><g><title>void CBlockUndo::Ser&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1445" width="0.0882%" height="15" fill="rgb(220,202,23)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1455.50"></text></g><g><title>void CBlockUndo::SerializationOps&lt;AutoFile, CBlockUndo const, ActionSerialize&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1429" width="0.0882%" height="15" fill="rgb(208,80,26)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1439.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1413" width="0.0882%" height="15" fill="rgb(243,85,7)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1423.50"></text></g><g><title>void SerializeMany&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1397" width="0.0882%" height="15" fill="rgb(228,77,47)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1407.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1381" width="0.0882%" height="15" fill="rgb(212,226,8)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1391.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1365" width="0.0882%" height="15" fill="rgb(241,120,54)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1375.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1349" width="0.0882%" height="15" fill="rgb(226,80,16)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1359.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1333" width="0.0882%" height="15" fill="rgb(240,76,13)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1343.50"></text></g><g><title>void DefaultFormatter::Ser&lt;AutoFile, CTxUndo&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1317" width="0.0882%" height="15" fill="rgb(252,74,8)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1327.50"></text></g><g><title>void Serialize&lt;AutoFile, CTxUndo&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1301" width="0.0882%" height="15" fill="rgb(244,155,2)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1311.50"></text></g><g><title>void CTxUndo::Serialize&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1285" width="0.0882%" height="15" fill="rgb(215,81,35)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1295.50"></text></g><g><title>void CTxUndo::Ser&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1269" width="0.0882%" height="15" fill="rgb(206,55,2)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1279.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;AutoFile, CTxUndo const, ActionSerialize&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1253" width="0.0882%" height="15" fill="rgb(231,2,34)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1237" width="0.0882%" height="15" fill="rgb(242,176,48)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1247.50"></text></g><g><title>void SerializeMany&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1221" width="0.0882%" height="15" fill="rgb(249,31,36)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1231.50"></text></g><g><title>void Serialize&lt;AutoFile, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1205" width="0.0882%" height="15" fill="rgb(205,18,17)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1215.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1189" width="0.0882%" height="15" fill="rgb(254,130,5)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1199.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;AutoFile, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1173" width="0.0882%" height="15" fill="rgb(229,42,45)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1183.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;AutoFile&gt; (5 samples, 0.09%)</title><rect x="54.2777%" y="1157" width="0.0882%" height="15" fill="rgb(245,95,25)" fg:x="3077" fg:w="5"/><text x="54.5277%" y="1167.50"></text></g><g><title>void Serialize&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="54.3482%" y="1141" width="0.0176%" height="15" fill="rgb(249,193,38)" fg:x="3081" fg:w="1"/><text x="54.5982%" y="1151.50"></text></g><g><title>void ser_writedata8&lt;AutoFile&gt; (1 samples, 0.02%)</title><rect x="54.3482%" y="1125" width="0.0176%" height="15" fill="rgb(241,140,43)" fg:x="3081" fg:w="1"/><text x="54.5982%" y="1135.50"></text></g><g><title>operator new (3 samples, 0.05%)</title><rect x="54.3658%" y="1509" width="0.0529%" height="15" fill="rgb(245,78,48)" fg:x="3082" fg:w="3"/><text x="54.6158%" y="1519.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="54.4188%" y="1509" width="0.0353%" height="15" fill="rgb(214,92,39)" fg:x="3085" fg:w="2"/><text x="54.6688%" y="1519.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="54.4364%" y="1493" width="0.0176%" height="15" fill="rgb(211,189,14)" fg:x="3086" fg:w="1"/><text x="54.6864%" y="1503.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.02%)</title><rect x="54.4364%" y="1477" width="0.0176%" height="15" fill="rgb(218,7,24)" fg:x="3086" fg:w="1"/><text x="54.6864%" y="1487.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.11%)</title><rect x="54.4540%" y="1509" width="0.1058%" height="15" fill="rgb(224,200,49)" fg:x="3087" fg:w="6"/><text x="54.7040%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (2 samples, 0.04%)</title><rect x="54.5246%" y="1493" width="0.0353%" height="15" fill="rgb(218,210,14)" fg:x="3091" fg:w="2"/><text x="54.7746%" y="1503.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (2 samples, 0.04%)</title><rect x="54.5246%" y="1477" width="0.0353%" height="15" fill="rgb(234,142,31)" fg:x="3091" fg:w="2"/><text x="54.7746%" y="1487.50"></text></g><g><title>std::equal_to&lt;COutPoint&gt;::operator (2 samples, 0.04%)</title><rect x="54.5246%" y="1461" width="0.0353%" height="15" fill="rgb(227,165,2)" fg:x="3091" fg:w="2"/><text x="54.7746%" y="1471.50"></text></g><g><title>operator== (2 samples, 0.04%)</title><rect x="54.5246%" y="1445" width="0.0353%" height="15" fill="rgb(232,44,46)" fg:x="3091" fg:w="2"/><text x="54.7746%" y="1455.50"></text></g><g><title>bool transaction_identifier&lt;false&gt;::operator==&lt;transaction_identifier&lt;false&gt; &gt; (1 samples, 0.02%)</title><rect x="54.5422%" y="1429" width="0.0176%" height="15" fill="rgb(236,149,47)" fg:x="3092" fg:w="1"/><text x="54.7922%" y="1439.50"></text></g><g><title>transaction_identifier&lt;false&gt;::Compare (1 samples, 0.02%)</title><rect x="54.5422%" y="1413" width="0.0176%" height="15" fill="rgb(227,45,31)" fg:x="3092" fg:w="1"/><text x="54.7922%" y="1423.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="54.5422%" y="1397" width="0.0176%" height="15" fill="rgb(240,176,51)" fg:x="3092" fg:w="1"/><text x="54.7922%" y="1407.50"></text></g><g><title>std::_Rb_tree&lt;CBlockIndex*, CBlockIndex*, std::_Identity&lt;CBlockIndex*&gt;, std::less&lt;CBlockIndex*&gt;, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.02%)</title><rect x="54.5599%" y="1509" width="0.0176%" height="15" fill="rgb(249,146,41)" fg:x="3093" fg:w="1"/><text x="54.8099%" y="1519.50"></text></g><g><title>std::_Rb_tree&lt;uint256, std::pair&lt;uint256 const, long&gt;, std::_Select1st&lt;std::pair&lt;uint256 const, long&gt; &gt;, std::less&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, long&gt; &gt; &gt;::equal_range (1 samples, 0.02%)</title><rect x="54.5775%" y="1509" width="0.0176%" height="15" fill="rgb(213,208,4)" fg:x="3094" fg:w="1"/><text x="54.8275%" y="1519.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="54.5952%" y="1509" width="0.0176%" height="15" fill="rgb(245,84,36)" fg:x="3095" fg:w="1"/><text x="54.8452%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="54.6128%" y="1509" width="0.0176%" height="15" fill="rgb(254,84,18)" fg:x="3096" fg:w="1"/><text x="54.8628%" y="1519.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (2 samples, 0.04%)</title><rect x="54.6304%" y="1509" width="0.0353%" height="15" fill="rgb(225,38,54)" fg:x="3097" fg:w="2"/><text x="54.8804%" y="1519.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="54.6481%" y="1493" width="0.0176%" height="15" fill="rgb(246,50,30)" fg:x="3098" fg:w="1"/><text x="54.8981%" y="1503.50"></text></g><g><title>unsigned long ReadCompactSize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="54.6657%" y="1509" width="0.0529%" height="15" fill="rgb(246,148,9)" fg:x="3099" fg:w="3"/><text x="54.9157%" y="1519.50"></text></g><g><title>unsigned char ser_readdata8&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7010%" y="1493" width="0.0176%" height="15" fill="rgb(223,75,4)" fg:x="3101" fg:w="1"/><text x="54.9510%" y="1503.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="54.7010%" y="1477" width="0.0176%" height="15" fill="rgb(239,148,41)" fg:x="3101" fg:w="1"/><text x="54.9510%" y="1487.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="54.7010%" y="1461" width="0.0176%" height="15" fill="rgb(205,195,3)" fg:x="3101" fg:w="1"/><text x="54.9510%" y="1471.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="54.7010%" y="1445" width="0.0176%" height="15" fill="rgb(254,161,1)" fg:x="3101" fg:w="1"/><text x="54.9510%" y="1455.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt;(std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="54.7186%" y="1349" width="0.0176%" height="15" fill="rgb(211,229,8)" fg:x="3102" fg:w="1"/><text x="54.9686%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7186%" y="1333" width="0.0176%" height="15" fill="rgb(220,97,9)" fg:x="3102" fg:w="1"/><text x="54.9686%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7186%" y="1317" width="0.0176%" height="15" fill="rgb(240,218,8)" fg:x="3102" fg:w="1"/><text x="54.9686%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7186%" y="1301" width="0.0176%" height="15" fill="rgb(250,44,0)" fg:x="3102" fg:w="1"/><text x="54.9686%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="54.7186%" y="1285" width="0.0176%" height="15" fill="rgb(236,41,53)" fg:x="3102" fg:w="1"/><text x="54.9686%" y="1295.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (1 samples, 0.02%)</title><rect x="54.7186%" y="1269" width="0.0176%" height="15" fill="rgb(218,227,13)" fg:x="3102" fg:w="1"/><text x="54.9686%" y="1279.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::write (1 samples, 0.02%)</title><rect x="54.7539%" y="1045" width="0.0176%" height="15" fill="rgb(217,94,32)" fg:x="3104" fg:w="1"/><text x="55.0039%" y="1055.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.02%)</title><rect x="54.7539%" y="1029" width="0.0176%" height="15" fill="rgb(213,217,12)" fg:x="3104" fg:w="1"/><text x="55.0039%" y="1039.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt;(std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;) (3 samples, 0.05%)</title><rect x="54.7363%" y="1349" width="0.0529%" height="15" fill="rgb(229,13,46)" fg:x="3103" fg:w="3"/><text x="54.9863%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (3 samples, 0.05%)</title><rect x="54.7363%" y="1333" width="0.0529%" height="15" fill="rgb(243,139,5)" fg:x="3103" fg:w="3"/><text x="54.9863%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="54.7363%" y="1317" width="0.0529%" height="15" fill="rgb(249,38,45)" fg:x="3103" fg:w="3"/><text x="54.9863%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="54.7363%" y="1301" width="0.0529%" height="15" fill="rgb(216,70,11)" fg:x="3103" fg:w="3"/><text x="54.9863%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="54.7363%" y="1285" width="0.0529%" height="15" fill="rgb(253,101,25)" fg:x="3103" fg:w="3"/><text x="54.9863%" y="1295.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1269" width="0.0353%" height="15" fill="rgb(207,197,30)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1279.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1253" width="0.0353%" height="15" fill="rgb(238,87,13)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1263.50"></text></g><g><title>void CTxOut::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1237" width="0.0353%" height="15" fill="rgb(215,155,8)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1247.50"></text></g><g><title>void CTxOut::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1221" width="0.0353%" height="15" fill="rgb(239,166,38)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1231.50"></text></g><g><title>void CTxOut::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTxOut const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1205" width="0.0353%" height="15" fill="rgb(240,194,35)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1215.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1189" width="0.0353%" height="15" fill="rgb(219,10,44)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1199.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, long, CScript&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1173" width="0.0353%" height="15" fill="rgb(251,220,35)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1183.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1157" width="0.0353%" height="15" fill="rgb(218,117,13)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1167.50"></text></g><g><title>void CScript::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1141" width="0.0353%" height="15" fill="rgb(221,213,40)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1151.50"></text></g><g><title>void CScript::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1125" width="0.0353%" height="15" fill="rgb(251,224,35)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1135.50"></text></g><g><title>void CScript::SerializationOps&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CScript const, ActionSerialize&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1109" width="0.0353%" height="15" fill="rgb(241,33,39)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1119.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1093" width="0.0353%" height="15" fill="rgb(222,74,17)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1103.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1077" width="0.0353%" height="15" fill="rgb(225,103,0)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1087.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="54.7539%" y="1061" width="0.0353%" height="15" fill="rgb(240,0,12)" fg:x="3104" fg:w="2"/><text x="55.0039%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (1 samples, 0.02%)</title><rect x="54.7716%" y="1045" width="0.0176%" height="15" fill="rgb(233,213,37)" fg:x="3105" fg:w="1"/><text x="55.0216%" y="1055.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (1 samples, 0.02%)</title><rect x="54.7716%" y="1029" width="0.0176%" height="15" fill="rgb(225,84,52)" fg:x="3105" fg:w="1"/><text x="55.0216%" y="1039.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (1 samples, 0.02%)</title><rect x="54.7716%" y="1013" width="0.0176%" height="15" fill="rgb(247,160,51)" fg:x="3105" fg:w="1"/><text x="55.0216%" y="1023.50"></text></g><g><title>void SerializeMany&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CBlockHeader, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1509" width="0.1058%" height="15" fill="rgb(244,60,51)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1519.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1493" width="0.1058%" height="15" fill="rgb(233,114,7)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1503.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt; &gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1477" width="0.1058%" height="15" fill="rgb(246,136,16)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1487.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1461" width="0.1058%" height="15" fill="rgb(243,114,45)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1471.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1445" width="0.1058%" height="15" fill="rgb(247,183,43)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1455.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1429" width="0.1058%" height="15" fill="rgb(251,210,42)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1439.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1413" width="0.1058%" height="15" fill="rgb(221,88,35)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1423.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1397" width="0.1058%" height="15" fill="rgb(242,21,20)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1407.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1381" width="0.1058%" height="15" fill="rgb(233,226,36)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1391.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, CTransaction&gt; (6 samples, 0.11%)</title><rect x="54.7186%" y="1365" width="0.1058%" height="15" fill="rgb(243,189,34)" fg:x="3102" fg:w="6"/><text x="54.9686%" y="1375.50"></text></g><g><title>ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="54.7892%" y="1349" width="0.0353%" height="15" fill="rgb(207,145,50)" fg:x="3106" fg:w="2"/><text x="55.0392%" y="1359.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="54.7892%" y="1333" width="0.0353%" height="15" fill="rgb(242,1,50)" fg:x="3106" fg:w="2"/><text x="55.0392%" y="1343.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7892%" y="1317" width="0.0353%" height="15" fill="rgb(231,65,32)" fg:x="3106" fg:w="2"/><text x="55.0392%" y="1327.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="54.7892%" y="1301" width="0.0353%" height="15" fill="rgb(208,68,49)" fg:x="3106" fg:w="2"/><text x="55.0392%" y="1311.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="54.7892%" y="1285" width="0.0353%" height="15" fill="rgb(253,54,49)" fg:x="3106" fg:w="2"/><text x="55.0392%" y="1295.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="54.7892%" y="1269" width="0.0353%" height="15" fill="rgb(245,186,24)" fg:x="3106" fg:w="2"/><text x="55.0392%" y="1279.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;SizeComputer&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.02%)</title><rect x="54.8245%" y="1509" width="0.0176%" height="15" fill="rgb(209,2,41)" fg:x="3108" fg:w="1"/><text x="55.0745%" y="1519.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="54.8421%" y="1509" width="0.0353%" height="15" fill="rgb(242,208,54)" fg:x="3109" fg:w="2"/><text x="55.0921%" y="1519.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.04%)</title><rect x="54.8421%" y="1493" width="0.0353%" height="15" fill="rgb(225,9,51)" fg:x="3109" fg:w="2"/><text x="55.0921%" y="1503.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="54.8421%" y="1477" width="0.0353%" height="15" fill="rgb(207,207,25)" fg:x="3109" fg:w="2"/><text x="55.0921%" y="1487.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, 28u, unsigned char&gt; (2 samples, 0.04%)</title><rect x="54.8421%" y="1461" width="0.0353%" height="15" fill="rgb(253,96,18)" fg:x="3109" fg:w="2"/><text x="55.0921%" y="1471.50"></text></g><g><title>_int_malloc (2 samples, 0.04%)</title><rect x="54.8421%" y="1445" width="0.0353%" height="15" fill="rgb(252,215,20)" fg:x="3109" fg:w="2"/><text x="55.0921%" y="1455.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&amp; std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (1 samples, 0.02%)</title><rect x="54.8950%" y="1237" width="0.0176%" height="15" fill="rgb(245,227,26)" fg:x="3112" fg:w="1"/><text x="55.1450%" y="1247.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (1 samples, 0.02%)</title><rect x="54.9303%" y="1205" width="0.0176%" height="15" fill="rgb(241,208,0)" fg:x="3114" fg:w="1"/><text x="55.1803%" y="1215.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="54.9303%" y="1189" width="0.0176%" height="15" fill="rgb(224,130,10)" fg:x="3114" fg:w="1"/><text x="55.1803%" y="1199.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="54.9303%" y="1173" width="0.0176%" height="15" fill="rgb(237,29,0)" fg:x="3114" fg:w="1"/><text x="55.1803%" y="1183.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1509" width="0.1235%" height="15" fill="rgb(219,27,41)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1519.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1493" width="0.1235%" height="15" fill="rgb(245,101,19)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1503.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1477" width="0.1235%" height="15" fill="rgb(243,44,37)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1487.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1461" width="0.1235%" height="15" fill="rgb(228,213,43)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1471.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1445" width="0.1235%" height="15" fill="rgb(219,163,21)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1455.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1429" width="0.1235%" height="15" fill="rgb(234,86,24)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1439.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1413" width="0.1235%" height="15" fill="rgb(225,10,24)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1423.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1397" width="0.1235%" height="15" fill="rgb(218,109,7)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1407.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1381" width="0.1235%" height="15" fill="rgb(210,20,26)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1391.50"></text></g><g><title>CMutableTransaction::CMutableTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1365" width="0.1235%" height="15" fill="rgb(216,18,1)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1375.50"></text></g><g><title>void CMutableTransaction::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1349" width="0.1235%" height="15" fill="rgb(206,163,23)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1359.50"></text></g><g><title>void UnserializeTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CMutableTransaction&gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1333" width="0.1235%" height="15" fill="rgb(229,150,31)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1343.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;) (7 samples, 0.12%)</title><rect x="54.8774%" y="1317" width="0.1235%" height="15" fill="rgb(231,10,5)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1327.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1301" width="0.1235%" height="15" fill="rgb(250,40,50)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt; &gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1285" width="0.1235%" height="15" fill="rgb(217,119,7)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1295.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1269" width="0.1235%" height="15" fill="rgb(245,214,40)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1279.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (7 samples, 0.12%)</title><rect x="54.8774%" y="1253" width="0.1235%" height="15" fill="rgb(216,187,1)" fg:x="3111" fg:w="7"/><text x="55.1274%" y="1263.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="54.9127%" y="1237" width="0.0882%" height="15" fill="rgb(237,146,21)" fg:x="3113" fg:w="5"/><text x="55.1627%" y="1247.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (5 samples, 0.09%)</title><rect x="54.9127%" y="1221" width="0.0882%" height="15" fill="rgb(210,174,47)" fg:x="3113" fg:w="5"/><text x="55.1627%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (3 samples, 0.05%)</title><rect x="54.9480%" y="1205" width="0.0529%" height="15" fill="rgb(218,111,39)" fg:x="3115" fg:w="3"/><text x="55.1980%" y="1215.50"></text></g><g><title>_int_malloc (3 samples, 0.05%)</title><rect x="54.9480%" y="1189" width="0.0529%" height="15" fill="rgb(224,95,19)" fg:x="3115" fg:w="3"/><text x="55.1980%" y="1199.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;CTxUndo, std::allocator&lt;CTxUndo&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1509" width="0.0176%" height="15" fill="rgb(234,15,38)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1519.50"></text></g><g><title>void DefaultFormatter::Ser&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1493" width="0.0176%" height="15" fill="rgb(246,56,12)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1503.50"></text></g><g><title>void Serialize&lt;SizeComputer, CTxUndo&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1477" width="0.0176%" height="15" fill="rgb(247,16,17)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1487.50"></text></g><g><title>void CTxUndo::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1461" width="0.0176%" height="15" fill="rgb(215,151,11)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1471.50"></text></g><g><title>void CTxUndo::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1445" width="0.0176%" height="15" fill="rgb(225,16,24)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1455.50"></text></g><g><title>void CTxUndo::SerializationOps&lt;SizeComputer, CTxUndo const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1429" width="0.0176%" height="15" fill="rgb(217,117,5)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1439.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1413" width="0.0176%" height="15" fill="rgb(246,187,53)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1423.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1397" width="0.0176%" height="15" fill="rgb(241,71,40)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1407.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1381" width="0.0176%" height="15" fill="rgb(231,67,39)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1391.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;TxInUndoFormatter&gt;, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1365" width="0.0176%" height="15" fill="rgb(222,120,24)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1375.50"></text></g><g><title>void VectorFormatter&lt;TxInUndoFormatter&gt;::Ser&lt;SizeComputer, std::vector&lt;Coin, std::allocator&lt;Coin&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1349" width="0.0176%" height="15" fill="rgb(248,3,3)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1359.50"></text></g><g><title>void TxInUndoFormatter::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1333" width="0.0176%" height="15" fill="rgb(228,218,5)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1343.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1317" width="0.0176%" height="15" fill="rgb(212,202,43)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1327.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1301" width="0.0176%" height="15" fill="rgb(235,183,2)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1311.50"></text></g><g><title>void TxOutCompression::Ser&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1285" width="0.0176%" height="15" fill="rgb(230,165,10)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1295.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;SizeComputer, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1269" width="0.0176%" height="15" fill="rgb(219,54,40)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1279.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1253" width="0.0176%" height="15" fill="rgb(244,73,9)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1263.50"></text></g><g><title>void SerializeMany&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1237" width="0.0176%" height="15" fill="rgb(212,32,45)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1247.50"></text></g><g><title>void Serialize&lt;SizeComputer, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1221" width="0.0176%" height="15" fill="rgb(205,58,31)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1231.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;SizeComputer&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1205" width="0.0176%" height="15" fill="rgb(250,120,43)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1215.50"></text></g><g><title>void AmountCompression::Ser&lt;SizeComputer, long&gt; (1 samples, 0.02%)</title><rect x="55.0009%" y="1189" width="0.0176%" height="15" fill="rgb(235,13,10)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1199.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="55.0009%" y="1173" width="0.0176%" height="15" fill="rgb(232,219,31)" fg:x="3118" fg:w="1"/><text x="55.2509%" y="1183.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1509" width="0.0353%" height="15" fill="rgb(218,157,51)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1519.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1493" width="0.0353%" height="15" fill="rgb(211,91,52)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1503.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn&amp;&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1477" width="0.0353%" height="15" fill="rgb(240,173,1)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1487.50"></text></g><g><title>void CTxIn::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1461" width="0.0353%" height="15" fill="rgb(248,20,47)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1471.50"></text></g><g><title>void CTxIn::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1445" width="0.0353%" height="15" fill="rgb(217,221,40)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1455.50"></text></g><g><title>void CTxIn::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTxIn, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1429" width="0.0353%" height="15" fill="rgb(226,149,51)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1439.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1413" width="0.0353%" height="15" fill="rgb(252,193,7)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1423.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;, CScript&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1397" width="0.0353%" height="15" fill="rgb(205,123,0)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1407.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint&amp;&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1381" width="0.0353%" height="15" fill="rgb(233,173,25)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1391.50"></text></g><g><title>void COutPoint::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1365" width="0.0353%" height="15" fill="rgb(216,63,32)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1375.50"></text></g><g><title>void COutPoint::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1349" width="0.0353%" height="15" fill="rgb(209,56,45)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1359.50"></text></g><g><title>void COutPoint::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, COutPoint, ActionUnserialize&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1333" width="0.0353%" height="15" fill="rgb(226,111,49)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1343.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1317" width="0.0353%" height="15" fill="rgb(244,181,21)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1327.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;, unsigned int&amp;&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1301" width="0.0353%" height="15" fill="rgb(222,126,15)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1311.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, transaction_identifier&lt;false&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1285" width="0.0353%" height="15" fill="rgb(222,95,17)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1295.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1269" width="0.0353%" height="15" fill="rgb(254,46,5)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1279.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (2 samples, 0.04%)</title><rect x="55.0185%" y="1253" width="0.0353%" height="15" fill="rgb(236,216,35)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1263.50"></text></g><g><title>ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;::read (2 samples, 0.04%)</title><rect x="55.0185%" y="1237" width="0.0353%" height="15" fill="rgb(217,187,26)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1247.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="55.0185%" y="1221" width="0.0353%" height="15" fill="rgb(207,192,25)" fg:x="3119" fg:w="2"/><text x="55.2685%" y="1231.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.0362%" y="1205" width="0.0176%" height="15" fill="rgb(253,135,27)" fg:x="3120" fg:w="1"/><text x="55.2862%" y="1215.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="55.0538%" y="1509" width="0.0353%" height="15" fill="rgb(211,122,29)" fg:x="3121" fg:w="2"/><text x="55.3038%" y="1519.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="55.0714%" y="1493" width="0.0176%" height="15" fill="rgb(233,162,40)" fg:x="3122" fg:w="1"/><text x="55.3214%" y="1503.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="55.0714%" y="1477" width="0.0176%" height="15" fill="rgb(222,184,47)" fg:x="3122" fg:w="1"/><text x="55.3214%" y="1487.50"></text></g><g><title>void WriteCompactSize&lt;ParamsStream&lt;AutoFile&amp;, TransactionSerParams&gt; &gt; (3 samples, 0.05%)</title><rect x="55.0891%" y="1509" width="0.0529%" height="15" fill="rgb(249,99,23)" fg:x="3123" fg:w="3"/><text x="55.3391%" y="1519.50"></text></g><g><title>void WriteVarInt&lt;HashWriter, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="55.1420%" y="1509" width="0.0176%" height="15" fill="rgb(214,60,12)" fg:x="3126" fg:w="1"/><text x="55.3920%" y="1519.50"></text></g><g><title>void ser_writedata8&lt;HashWriter&gt; (1 samples, 0.02%)</title><rect x="55.1420%" y="1493" width="0.0176%" height="15" fill="rgb(250,229,36)" fg:x="3126" fg:w="1"/><text x="55.3920%" y="1503.50"></text></g><g><title>HashWriter::write (1 samples, 0.02%)</title><rect x="55.1420%" y="1477" width="0.0176%" height="15" fill="rgb(232,195,10)" fg:x="3126" fg:w="1"/><text x="55.3920%" y="1487.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="55.1420%" y="1461" width="0.0176%" height="15" fill="rgb(205,213,31)" fg:x="3126" fg:w="1"/><text x="55.3920%" y="1471.50"></text></g><g><title>b-msghand (3,116 samples, 54.97%)</title><rect x="0.2117%" y="1525" width="54.9656%" height="15" fill="rgb(237,43,8)" fg:x="12" fg:w="3116"/><text x="0.4617%" y="1535.50">b-msghand</text></g><g><title>vtable for std::ios_base (1 samples, 0.02%)</title><rect x="55.1596%" y="1509" width="0.0176%" height="15" fill="rgb(216,208,3)" fg:x="3127" fg:w="1"/><text x="55.4096%" y="1519.50"></text></g><g><title>SipHashUint256Extra (1 samples, 0.02%)</title><rect x="55.1596%" y="1493" width="0.0176%" height="15" fill="rgb(228,179,44)" fg:x="3127" fg:w="1"/><text x="55.4096%" y="1503.50"></text></g><g><title>DataStream::resize (19 samples, 0.34%)</title><rect x="55.1773%" y="1461" width="0.3352%" height="15" fill="rgb(230,192,27)" fg:x="3128" fg:w="19"/><text x="55.4273%" y="1471.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::resize (19 samples, 0.34%)</title><rect x="55.1773%" y="1445" width="0.3352%" height="15" fill="rgb(251,30,38)" fg:x="3128" fg:w="19"/><text x="55.4273%" y="1455.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (19 samples, 0.34%)</title><rect x="55.1773%" y="1429" width="0.3352%" height="15" fill="rgb(246,55,52)" fg:x="3128" fg:w="19"/><text x="55.4273%" y="1439.50"></text></g><g><title>std::byte* std::__uninitialized_fill_n_a&lt;std::byte*, unsigned long, std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; (19 samples, 0.34%)</title><rect x="55.1773%" y="1413" width="0.3352%" height="15" fill="rgb(249,79,26)" fg:x="3128" fg:w="19"/><text x="55.4273%" y="1423.50"></text></g><g><title>decltype  (10 samples, 0.18%)</title><rect x="55.3360%" y="1397" width="0.1764%" height="15" fill="rgb(220,202,16)" fg:x="3137" fg:w="10"/><text x="55.5860%" y="1407.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (10 samples, 0.18%)</title><rect x="55.3360%" y="1381" width="0.1764%" height="15" fill="rgb(250,170,23)" fg:x="3137" fg:w="10"/><text x="55.5860%" y="1391.50"></text></g><g><title>decltype (10 samples, 0.18%)</title><rect x="55.3360%" y="1365" width="0.1764%" height="15" fill="rgb(230,7,37)" fg:x="3137" fg:w="10"/><text x="55.5860%" y="1375.50"></text></g><g><title>V2Transport::GetReceivedMessage (22 samples, 0.39%)</title><rect x="55.1773%" y="1477" width="0.3881%" height="15" fill="rgb(213,71,1)" fg:x="3128" fg:w="22"/><text x="55.4273%" y="1487.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="55.5124%" y="1461" width="0.0529%" height="15" fill="rgb(227,87,39)" fg:x="3147" fg:w="3"/><text x="55.7624%" y="1471.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="55.5124%" y="1445" width="0.0529%" height="15" fill="rgb(210,41,29)" fg:x="3147" fg:w="3"/><text x="55.7624%" y="1455.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="55.5124%" y="1429" width="0.0529%" height="15" fill="rgb(206,191,31)" fg:x="3147" fg:w="3"/><text x="55.7624%" y="1439.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (3 samples, 0.05%)</title><rect x="55.5124%" y="1413" width="0.0529%" height="15" fill="rgb(247,75,54)" fg:x="3147" fg:w="3"/><text x="55.7624%" y="1423.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (3 samples, 0.05%)</title><rect x="55.5124%" y="1397" width="0.0529%" height="15" fill="rgb(208,54,50)" fg:x="3147" fg:w="3"/><text x="55.7624%" y="1407.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="55.5124%" y="1381" width="0.0529%" height="15" fill="rgb(214,90,37)" fg:x="3147" fg:w="3"/><text x="55.7624%" y="1391.50"></text></g><g><title>WriteLE32 (1 samples, 0.02%)</title><rect x="57.3646%" y="1365" width="0.0176%" height="15" fill="rgb(220,132,6)" fg:x="3252" fg:w="1"/><text x="57.6146%" y="1375.50"></text></g><g><title>ChaCha20Aligned::Crypt (1 samples, 0.02%)</title><rect x="57.3646%" y="1349" width="0.0176%" height="15" fill="rgb(213,167,7)" fg:x="3252" fg:w="1"/><text x="57.6146%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1365" width="0.0176%" height="15" fill="rgb(243,36,27)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1349" width="0.0176%" height="15" fill="rgb(235,147,12)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1333" width="0.0176%" height="15" fill="rgb(212,198,44)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1317" width="0.0176%" height="15" fill="rgb(218,68,50)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1301" width="0.0176%" height="15" fill="rgb(224,79,48)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1285" width="0.0176%" height="15" fill="rgb(213,191,50)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1295.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="57.3823%" y="1269" width="0.0176%" height="15" fill="rgb(254,146,10)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1253" width="0.0176%" height="15" fill="rgb(215,175,11)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="57.3823%" y="1237" width="0.0176%" height="15" fill="rgb(207,49,7)" fg:x="3253" fg:w="1"/><text x="57.6323%" y="1247.50"></text></g><g><title>ChaCha20::Crypt (166 samples, 2.93%)</title><rect x="55.5654%" y="1397" width="2.9282%" height="15" fill="rgb(234,144,29)" fg:x="3150" fg:w="166"/><text x="55.8154%" y="1407.50">Ch..</text></g><g><title>ChaCha20Aligned::Crypt (166 samples, 2.93%)</title><rect x="55.5654%" y="1381" width="2.9282%" height="15" fill="rgb(213,222,48)" fg:x="3150" fg:w="166"/><text x="55.8154%" y="1391.50">Ch..</text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (62 samples, 1.09%)</title><rect x="57.3999%" y="1365" width="1.0937%" height="15" fill="rgb(222,8,6)" fg:x="3254" fg:w="62"/><text x="57.6499%" y="1375.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (62 samples, 1.09%)</title><rect x="57.3999%" y="1349" width="1.0937%" height="15" fill="rgb(221,114,49)" fg:x="3254" fg:w="62"/><text x="57.6499%" y="1359.50"></text></g><g><title>ChaCha20::Keystream (1 samples, 0.02%)</title><rect x="58.4936%" y="1397" width="0.0176%" height="15" fill="rgb(250,140,42)" fg:x="3316" fg:w="1"/><text x="58.7436%" y="1407.50"></text></g><g><title>ChaCha20Aligned::Keystream (1 samples, 0.02%)</title><rect x="58.4936%" y="1381" width="0.0176%" height="15" fill="rgb(250,150,27)" fg:x="3316" fg:w="1"/><text x="58.7436%" y="1391.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="59.7460%" y="1141" width="0.0176%" height="15" fill="rgb(252,159,3)" fg:x="3387" fg:w="1"/><text x="59.9960%" y="1151.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="59.7460%" y="1125" width="0.0176%" height="15" fill="rgb(241,182,3)" fg:x="3387" fg:w="1"/><text x="59.9960%" y="1135.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="59.7460%" y="1109" width="0.0176%" height="15" fill="rgb(236,3,9)" fg:x="3387" fg:w="1"/><text x="59.9960%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.7460%" y="1093" width="0.0176%" height="15" fill="rgb(223,227,51)" fg:x="3387" fg:w="1"/><text x="59.9960%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.7460%" y="1077" width="0.0176%" height="15" fill="rgb(232,133,30)" fg:x="3387" fg:w="1"/><text x="59.9960%" y="1087.50"></text></g><g><title>BIP324Cipher::Decrypt (241 samples, 4.25%)</title><rect x="55.5654%" y="1445" width="4.2512%" height="15" fill="rgb(209,93,27)" fg:x="3150" fg:w="241"/><text x="55.8154%" y="1455.50">BIP32..</text></g><g><title>FSChaCha20Poly1305::Decrypt (241 samples, 4.25%)</title><rect x="55.5654%" y="1429" width="4.2512%" height="15" fill="rgb(208,108,34)" fg:x="3150" fg:w="241"/><text x="55.8154%" y="1439.50">FSCha..</text></g><g><title>AEADChaCha20Poly1305::Decrypt (241 samples, 4.25%)</title><rect x="55.5654%" y="1413" width="4.2512%" height="15" fill="rgb(215,189,13)" fg:x="3150" fg:w="241"/><text x="55.8154%" y="1423.50">AEADC..</text></g><g><title>ComputeTag (74 samples, 1.31%)</title><rect x="58.5112%" y="1397" width="1.3053%" height="15" fill="rgb(206,88,23)" fg:x="3317" fg:w="74"/><text x="58.7612%" y="1407.50"></text></g><g><title>Poly1305::Update (74 samples, 1.31%)</title><rect x="58.5112%" y="1381" width="1.3053%" height="15" fill="rgb(240,173,0)" fg:x="3317" fg:w="74"/><text x="58.7612%" y="1391.50"></text></g><g><title>poly1305_donna::poly1305_update (74 samples, 1.31%)</title><rect x="58.5112%" y="1365" width="1.3053%" height="15" fill="rgb(223,106,52)" fg:x="3317" fg:w="74"/><text x="58.7612%" y="1375.50"></text></g><g><title>poly1305_donna::poly1305_blocks (74 samples, 1.31%)</title><rect x="58.5112%" y="1349" width="1.3053%" height="15" fill="rgb(206,130,16)" fg:x="3317" fg:w="74"/><text x="58.7612%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="59.6754%" y="1333" width="0.1411%" height="15" fill="rgb(220,54,25)" fg:x="3383" fg:w="8"/><text x="59.9254%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="59.6754%" y="1317" width="0.1411%" height="15" fill="rgb(210,4,38)" fg:x="3383" fg:w="8"/><text x="59.9254%" y="1327.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="59.6754%" y="1301" width="0.1411%" height="15" fill="rgb(238,94,39)" fg:x="3383" fg:w="8"/><text x="59.9254%" y="1311.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="59.6754%" y="1285" width="0.1411%" height="15" fill="rgb(234,124,34)" fg:x="3383" fg:w="8"/><text x="59.9254%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="59.6931%" y="1269" width="0.1235%" height="15" fill="rgb(221,91,40)" fg:x="3384" fg:w="7"/><text x="59.9431%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="59.6931%" y="1253" width="0.1235%" height="15" fill="rgb(246,53,28)" fg:x="3384" fg:w="7"/><text x="59.9431%" y="1263.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="59.6931%" y="1237" width="0.1235%" height="15" fill="rgb(229,109,7)" fg:x="3384" fg:w="7"/><text x="59.9431%" y="1247.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="59.6931%" y="1221" width="0.1235%" height="15" fill="rgb(249,117,8)" fg:x="3384" fg:w="7"/><text x="59.9431%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="59.6931%" y="1205" width="0.1235%" height="15" fill="rgb(210,181,1)" fg:x="3384" fg:w="7"/><text x="59.9431%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="59.6931%" y="1189" width="0.1235%" height="15" fill="rgb(211,66,1)" fg:x="3384" fg:w="7"/><text x="59.9431%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="59.7460%" y="1173" width="0.0706%" height="15" fill="rgb(221,90,14)" fg:x="3387" fg:w="4"/><text x="59.9960%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="59.7460%" y="1157" width="0.0706%" height="15" fill="rgb(219,222,44)" fg:x="3387" fg:w="4"/><text x="59.9960%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="59.7636%" y="1141" width="0.0529%" height="15" fill="rgb(246,34,33)" fg:x="3388" fg:w="3"/><text x="60.0136%" y="1151.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (242 samples, 4.27%)</title><rect x="55.5654%" y="1461" width="4.2688%" height="15" fill="rgb(227,135,41)" fg:x="3150" fg:w="242"/><text x="55.8154%" y="1471.50">V2Tra..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="59.8165%" y="1445" width="0.0176%" height="15" fill="rgb(226,15,14)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1455.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="59.8165%" y="1429" width="0.0176%" height="15" fill="rgb(236,148,47)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1439.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1413" width="0.0176%" height="15" fill="rgb(233,162,52)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1397" width="0.0176%" height="15" fill="rgb(244,35,28)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1407.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1381" width="0.0176%" height="15" fill="rgb(205,121,10)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1391.50"></text></g><g><title>unsigned char* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1365" width="0.0176%" height="15" fill="rgb(250,58,18)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1375.50"></text></g><g><title>unsigned char* std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1349" width="0.0176%" height="15" fill="rgb(216,37,13)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1359.50"></text></g><g><title>unsigned char* std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1333" width="0.0176%" height="15" fill="rgb(221,215,42)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1343.50"></text></g><g><title>void std::__fill_a&lt;unsigned char*, unsigned char&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1317" width="0.0176%" height="15" fill="rgb(217,214,19)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1327.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_byte&lt;unsigned char&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="59.8165%" y="1301" width="0.0176%" height="15" fill="rgb(233,139,13)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1311.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="59.8165%" y="1285" width="0.0176%" height="15" fill="rgb(247,168,23)" fg:x="3391" fg:w="1"/><text x="60.0665%" y="1295.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::insert&lt;unsigned char const*, void&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1461" width="0.0882%" height="15" fill="rgb(207,202,1)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1471.50"></text></g><g><title>void std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_range_insert&lt;unsigned char const*&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1445" width="0.0882%" height="15" fill="rgb(220,155,48)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1455.50"></text></g><g><title>unsigned char* std::__uninitialized_copy_a&lt;unsigned char const*, unsigned char*, unsigned char&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1429" width="0.0882%" height="15" fill="rgb(250,43,26)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1439.50"></text></g><g><title>unsigned char* std::uninitialized_copy&lt;unsigned char const*, unsigned char*&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1413" width="0.0882%" height="15" fill="rgb(212,190,23)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1423.50"></text></g><g><title>unsigned char* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned char const*, unsigned char*&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1397" width="0.0882%" height="15" fill="rgb(216,39,24)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1407.50"></text></g><g><title>unsigned char* std::copy&lt;unsigned char const*, unsigned char*&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1381" width="0.0882%" height="15" fill="rgb(252,113,16)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1391.50"></text></g><g><title>unsigned char* std::__copy_move_a&lt;false, unsigned char const*, unsigned char*&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1365" width="0.0882%" height="15" fill="rgb(208,113,19)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1375.50"></text></g><g><title>unsigned char* std::__copy_move_a1&lt;false, unsigned char const*, unsigned char*&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1349" width="0.0882%" height="15" fill="rgb(234,107,25)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1359.50"></text></g><g><title>unsigned char* std::__copy_move_a2&lt;false, unsigned char const*, unsigned char*&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1333" width="0.0882%" height="15" fill="rgb(234,217,51)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1343.50"></text></g><g><title>unsigned char* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char const, unsigned char&gt; (5 samples, 0.09%)</title><rect x="59.8342%" y="1317" width="0.0882%" height="15" fill="rgb(251,29,42)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1327.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.09%)</title><rect x="59.8342%" y="1301" width="0.0882%" height="15" fill="rgb(221,62,51)" fg:x="3392" fg:w="5"/><text x="60.0842%" y="1311.50"></text></g><g><title>CNode::ReceiveMsgBytes (274 samples, 4.83%)</title><rect x="55.1773%" y="1493" width="4.8333%" height="15" fill="rgb(240,192,43)" fg:x="3128" fg:w="274"/><text x="55.4273%" y="1503.50">CNode:..</text></g><g><title>V2Transport::ReceivedBytes (252 samples, 4.45%)</title><rect x="55.5654%" y="1477" width="4.4452%" height="15" fill="rgb(224,157,47)" fg:x="3150" fg:w="252"/><text x="55.8154%" y="1487.50">V2Tra..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::reserve (5 samples, 0.09%)</title><rect x="59.9224%" y="1461" width="0.0882%" height="15" fill="rgb(226,84,45)" fg:x="3397" fg:w="5"/><text x="60.1724%" y="1471.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (5 samples, 0.09%)</title><rect x="59.9224%" y="1445" width="0.0882%" height="15" fill="rgb(208,207,23)" fg:x="3397" fg:w="5"/><text x="60.1724%" y="1455.50"></text></g><g><title>unsigned char* std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (5 samples, 0.09%)</title><rect x="59.9224%" y="1429" width="0.0882%" height="15" fill="rgb(253,34,51)" fg:x="3397" fg:w="5"/><text x="60.1724%" y="1439.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;unsigned char, void&gt;::value, unsigned char*&gt;::type std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (5 samples, 0.09%)</title><rect x="59.9224%" y="1413" width="0.0882%" height="15" fill="rgb(227,26,34)" fg:x="3397" fg:w="5"/><text x="60.1724%" y="1423.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.09%)</title><rect x="59.9224%" y="1397" width="0.0882%" height="15" fill="rgb(245,75,19)" fg:x="3397" fg:w="5"/><text x="60.1724%" y="1407.50"></text></g><g><title>CConnman::SocketHandlerConnected (303 samples, 5.34%)</title><rect x="55.1773%" y="1509" width="5.3449%" height="15" fill="rgb(250,191,31)" fg:x="3128" fg:w="303"/><text x="55.4273%" y="1519.50">CConnma..</text></g><g><title>__libc_recv (29 samples, 0.51%)</title><rect x="60.0106%" y="1493" width="0.5116%" height="15" fill="rgb(224,11,50)" fg:x="3402" fg:w="29"/><text x="60.2606%" y="1503.50"></text></g><g><title>[unknown] (29 samples, 0.51%)</title><rect x="60.0106%" y="1477" width="0.5116%" height="15" fill="rgb(231,171,7)" fg:x="3402" fg:w="29"/><text x="60.2606%" y="1487.50"></text></g><g><title>[unknown] (29 samples, 0.51%)</title><rect x="60.0106%" y="1461" width="0.5116%" height="15" fill="rgb(252,214,10)" fg:x="3402" fg:w="29"/><text x="60.2606%" y="1471.50"></text></g><g><title>[unknown] (29 samples, 0.51%)</title><rect x="60.0106%" y="1445" width="0.5116%" height="15" fill="rgb(249,45,46)" fg:x="3402" fg:w="29"/><text x="60.2606%" y="1455.50"></text></g><g><title>[unknown] (29 samples, 0.51%)</title><rect x="60.0106%" y="1429" width="0.5116%" height="15" fill="rgb(240,173,7)" fg:x="3402" fg:w="29"/><text x="60.2606%" y="1439.50"></text></g><g><title>[unknown] (29 samples, 0.51%)</title><rect x="60.0106%" y="1413" width="0.5116%" height="15" fill="rgb(235,214,13)" fg:x="3402" fg:w="29"/><text x="60.2606%" y="1423.50"></text></g><g><title>[unknown] (29 samples, 0.51%)</title><rect x="60.0106%" y="1397" width="0.5116%" height="15" fill="rgb(245,156,8)" fg:x="3402" fg:w="29"/><text x="60.2606%" y="1407.50"></text></g><g><title>[unknown] (28 samples, 0.49%)</title><rect x="60.0282%" y="1381" width="0.4939%" height="15" fill="rgb(235,46,12)" fg:x="3403" fg:w="28"/><text x="60.2782%" y="1391.50"></text></g><g><title>[unknown] (28 samples, 0.49%)</title><rect x="60.0282%" y="1365" width="0.4939%" height="15" fill="rgb(221,81,14)" fg:x="3403" fg:w="28"/><text x="60.2782%" y="1375.50"></text></g><g><title>[unknown] (27 samples, 0.48%)</title><rect x="60.0459%" y="1349" width="0.4763%" height="15" fill="rgb(238,207,9)" fg:x="3404" fg:w="27"/><text x="60.2959%" y="1359.50"></text></g><g><title>[unknown] (26 samples, 0.46%)</title><rect x="60.0635%" y="1333" width="0.4586%" height="15" fill="rgb(224,129,35)" fg:x="3405" fg:w="26"/><text x="60.3135%" y="1343.50"></text></g><g><title>[unknown] (24 samples, 0.42%)</title><rect x="60.0988%" y="1317" width="0.4234%" height="15" fill="rgb(243,218,34)" fg:x="3407" fg:w="24"/><text x="60.3488%" y="1327.50"></text></g><g><title>[unknown] (20 samples, 0.35%)</title><rect x="60.1693%" y="1301" width="0.3528%" height="15" fill="rgb(220,166,13)" fg:x="3411" fg:w="20"/><text x="60.4193%" y="1311.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="60.4163%" y="1285" width="0.1058%" height="15" fill="rgb(227,167,49)" fg:x="3425" fg:w="6"/><text x="60.6663%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.5045%" y="1269" width="0.0176%" height="15" fill="rgb(234,142,12)" fg:x="3430" fg:w="1"/><text x="60.7545%" y="1279.50"></text></g><g><title>[[heap]] (1 samples, 0.02%)</title><rect x="60.5221%" y="1509" width="0.0176%" height="15" fill="rgb(207,100,48)" fg:x="3431" fg:w="1"/><text x="60.7721%" y="1519.50"></text></g><g><title>__pthread_mutex_cond_lock (1 samples, 0.02%)</title><rect x="60.5221%" y="1493" width="0.0176%" height="15" fill="rgb(210,25,14)" fg:x="3431" fg:w="1"/><text x="60.7721%" y="1503.50"></text></g><g><title>[anon] (1 samples, 0.02%)</title><rect x="60.5398%" y="1509" width="0.0176%" height="15" fill="rgb(246,116,27)" fg:x="3432" fg:w="1"/><text x="60.7898%" y="1519.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.02%)</title><rect x="60.5398%" y="1493" width="0.0176%" height="15" fill="rgb(214,193,42)" fg:x="3432" fg:w="1"/><text x="60.7898%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.5574%" y="1509" width="0.0176%" height="15" fill="rgb(214,122,8)" fg:x="3433" fg:w="1"/><text x="60.8074%" y="1519.50"></text></g><g><title>poly1305_donna::poly1305_blocks (1 samples, 0.02%)</title><rect x="60.5574%" y="1493" width="0.0176%" height="15" fill="rgb(244,173,18)" fg:x="3433" fg:w="1"/><text x="60.8074%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.5574%" y="1477" width="0.0176%" height="15" fill="rgb(232,68,19)" fg:x="3433" fg:w="1"/><text x="60.8074%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.5574%" y="1461" width="0.0176%" height="15" fill="rgb(236,224,1)" fg:x="3433" fg:w="1"/><text x="60.8074%" y="1471.50"></text></g><g><title>CThreadInterrupt::sleep_for (4 samples, 0.07%)</title><rect x="60.5751%" y="1317" width="0.0706%" height="15" fill="rgb(240,11,8)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1327.50"></text></g><g><title>wait_for&lt;long int, std::ratio&lt;1, 1000000000&gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="60.5751%" y="1301" width="0.0706%" height="15" fill="rgb(244,159,20)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1311.50"></text></g><g><title>wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long int, std::ratio&lt;1, 1000000000&gt; &gt;, CThreadInterrupt::sleep_for(std::chrono::_V2::steady_clock::duration)::&lt;lambda()&gt; &gt; (4 samples, 0.07%)</title><rect x="60.5751%" y="1285" width="0.0706%" height="15" fill="rgb(240,223,54)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1295.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="60.5751%" y="1269" width="0.0706%" height="15" fill="rgb(237,146,5)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1279.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="60.5751%" y="1253" width="0.0706%" height="15" fill="rgb(218,221,32)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1263.50"></text></g><g><title>std::__condvar::wait_until (4 samples, 0.07%)</title><rect x="60.5751%" y="1237" width="0.0706%" height="15" fill="rgb(244,96,26)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1247.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (4 samples, 0.07%)</title><rect x="60.5751%" y="1221" width="0.0706%" height="15" fill="rgb(245,184,37)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1231.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="60.5751%" y="1205" width="0.0706%" height="15" fill="rgb(248,91,47)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="60.5751%" y="1189" width="0.0706%" height="15" fill="rgb(243,199,8)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="60.5751%" y="1173" width="0.0706%" height="15" fill="rgb(249,12,15)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="60.5751%" y="1157" width="0.0706%" height="15" fill="rgb(245,97,12)" fg:x="3434" fg:w="4"/><text x="60.8251%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1141" width="0.0529%" height="15" fill="rgb(244,61,1)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1125" width="0.0529%" height="15" fill="rgb(222,194,10)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1109" width="0.0529%" height="15" fill="rgb(226,178,8)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1093" width="0.0529%" height="15" fill="rgb(241,32,34)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1077" width="0.0529%" height="15" fill="rgb(254,26,6)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1061" width="0.0529%" height="15" fill="rgb(249,71,11)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1045" width="0.0529%" height="15" fill="rgb(232,170,27)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1029" width="0.0529%" height="15" fill="rgb(214,223,17)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="1013" width="0.0529%" height="15" fill="rgb(250,18,15)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="997" width="0.0529%" height="15" fill="rgb(212,153,51)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="60.5927%" y="981" width="0.0529%" height="15" fill="rgb(219,194,12)" fg:x="3435" fg:w="3"/><text x="60.8427%" y="991.50"></text></g><g><title>__clone (5 samples, 0.09%)</title><rect x="60.5751%" y="1509" width="0.0882%" height="15" fill="rgb(212,58,17)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1519.50"></text></g><g><title>start_thread (5 samples, 0.09%)</title><rect x="60.5751%" y="1493" width="0.0882%" height="15" fill="rgb(254,5,10)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1503.50"></text></g><g><title>execute_native_thread_routine (5 samples, 0.09%)</title><rect x="60.5751%" y="1477" width="0.0882%" height="15" fill="rgb(246,91,7)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1487.50"></text></g><g><title>_M_run (5 samples, 0.09%)</title><rect x="60.5751%" y="1461" width="0.0882%" height="15" fill="rgb(218,108,49)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1471.50"></text></g><g><title>operator (5 samples, 0.09%)</title><rect x="60.5751%" y="1445" width="0.0882%" height="15" fill="rgb(238,123,20)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1455.50"></text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (5 samples, 0.09%)</title><rect x="60.5751%" y="1429" width="0.0882%" height="15" fill="rgb(231,69,23)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1439.50"></text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (5 samples, 0.09%)</title><rect x="60.5751%" y="1413" width="0.0882%" height="15" fill="rgb(230,209,3)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1423.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (5 samples, 0.09%)</title><rect x="60.5751%" y="1397" width="0.0882%" height="15" fill="rgb(231,19,0)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1407.50"></text></g><g><title>util::TraceThread (5 samples, 0.09%)</title><rect x="60.5751%" y="1381" width="0.0882%" height="15" fill="rgb(226,192,25)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1391.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (5 samples, 0.09%)</title><rect x="60.5751%" y="1365" width="0.0882%" height="15" fill="rgb(223,175,53)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1375.50"></text></g><g><title>CConnman::ThreadSocketHandler (5 samples, 0.09%)</title><rect x="60.5751%" y="1349" width="0.0882%" height="15" fill="rgb(248,35,51)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1359.50"></text></g><g><title>CConnman::SocketHandler (5 samples, 0.09%)</title><rect x="60.5751%" y="1333" width="0.0882%" height="15" fill="rgb(230,37,26)" fg:x="3434" fg:w="5"/><text x="60.8251%" y="1343.50"></text></g><g><title>Sock::WaitMany (1 samples, 0.02%)</title><rect x="60.6456%" y="1317" width="0.0176%" height="15" fill="rgb(206,120,22)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1327.50"></text></g><g><title>Sock::WaitMany (1 samples, 0.02%)</title><rect x="60.6456%" y="1301" width="0.0176%" height="15" fill="rgb(207,165,28)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1311.50"></text></g><g><title>__poll (1 samples, 0.02%)</title><rect x="60.6456%" y="1285" width="0.0176%" height="15" fill="rgb(226,23,46)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1269" width="0.0176%" height="15" fill="rgb(208,130,44)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1253" width="0.0176%" height="15" fill="rgb(231,67,8)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1237" width="0.0176%" height="15" fill="rgb(205,183,22)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1221" width="0.0176%" height="15" fill="rgb(224,47,9)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1205" width="0.0176%" height="15" fill="rgb(250,183,49)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1189" width="0.0176%" height="15" fill="rgb(220,151,39)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1173" width="0.0176%" height="15" fill="rgb(220,118,20)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1157" width="0.0176%" height="15" fill="rgb(231,65,51)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1141" width="0.0176%" height="15" fill="rgb(253,125,37)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1125" width="0.0176%" height="15" fill="rgb(232,102,6)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.6456%" y="1109" width="0.0176%" height="15" fill="rgb(251,105,13)" fg:x="3438" fg:w="1"/><text x="60.8956%" y="1119.50"></text></g><g><title>b-net (312 samples, 5.50%)</title><rect x="55.1773%" y="1525" width="5.5036%" height="15" fill="rgb(222,179,29)" fg:x="3128" fg:w="312"/><text x="55.4273%" y="1535.50">b-net</text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="60.6633%" y="1509" width="0.0176%" height="15" fill="rgb(229,180,53)" fg:x="3439" fg:w="1"/><text x="60.9133%" y="1519.50"></text></g><g><title>MurmurHash3 (2 samples, 0.04%)</title><rect x="60.6809%" y="1509" width="0.0353%" height="15" fill="rgb(238,104,13)" fg:x="3440" fg:w="2"/><text x="60.9309%" y="1519.50"></text></g><g><title>MurmurHash3 (3 samples, 0.05%)</title><rect x="60.7162%" y="1493" width="0.0529%" height="15" fill="rgb(210,130,5)" fg:x="3442" fg:w="3"/><text x="60.9662%" y="1503.50"></text></g><g><title>[[heap]] (4 samples, 0.07%)</title><rect x="60.7162%" y="1509" width="0.0706%" height="15" fill="rgb(233,87,49)" fg:x="3442" fg:w="4"/><text x="60.9662%" y="1519.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="60.7691%" y="1493" width="0.0176%" height="15" fill="rgb(243,34,9)" fg:x="3445" fg:w="1"/><text x="61.0191%" y="1503.50"></text></g><g><title>MurmurHash3 (1 samples, 0.02%)</title><rect x="60.7867%" y="1493" width="0.0176%" height="15" fill="rgb(235,225,10)" fg:x="3446" fg:w="1"/><text x="61.0367%" y="1503.50"></text></g><g><title>_int_free (22 samples, 0.39%)</title><rect x="60.8044%" y="1493" width="0.3881%" height="15" fill="rgb(212,0,30)" fg:x="3447" fg:w="22"/><text x="61.0544%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="61.1925%" y="1493" width="0.0176%" height="15" fill="rgb(211,177,0)" fg:x="3469" fg:w="1"/><text x="61.4425%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (19 samples, 0.34%)</title><rect x="61.2101%" y="1493" width="0.3352%" height="15" fill="rgb(225,220,11)" fg:x="3470" fg:w="19"/><text x="61.4601%" y="1503.50"></text></g><g><title>[anon] (46 samples, 0.81%)</title><rect x="60.7867%" y="1509" width="0.8114%" height="15" fill="rgb(215,10,13)" fg:x="3446" fg:w="46"/><text x="61.0367%" y="1519.50"></text></g><g><title>operator delete (3 samples, 0.05%)</title><rect x="61.5452%" y="1493" width="0.0529%" height="15" fill="rgb(240,177,14)" fg:x="3489" fg:w="3"/><text x="61.7952%" y="1503.50"></text></g><g><title>MurmurHash3 (4 samples, 0.07%)</title><rect x="61.5982%" y="1493" width="0.0706%" height="15" fill="rgb(243,7,39)" fg:x="3492" fg:w="4"/><text x="61.8482%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="61.6687%" y="1493" width="0.0176%" height="15" fill="rgb(212,99,0)" fg:x="3496" fg:w="1"/><text x="61.9187%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="61.6687%" y="1477" width="0.0176%" height="15" fill="rgb(225,162,48)" fg:x="3496" fg:w="1"/><text x="61.9187%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="61.6687%" y="1461" width="0.0176%" height="15" fill="rgb(246,16,25)" fg:x="3496" fg:w="1"/><text x="61.9187%" y="1471.50"></text></g><g><title>_int_free (10 samples, 0.18%)</title><rect x="61.6864%" y="1493" width="0.1764%" height="15" fill="rgb(220,150,2)" fg:x="3497" fg:w="10"/><text x="61.9364%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="61.8628%" y="1493" width="0.0176%" height="15" fill="rgb(237,113,11)" fg:x="3507" fg:w="1"/><text x="62.1128%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="61.8804%" y="1493" width="0.0706%" height="15" fill="rgb(236,70,20)" fg:x="3508" fg:w="4"/><text x="62.1304%" y="1503.50"></text></g><g><title>[unknown] (23 samples, 0.41%)</title><rect x="61.5982%" y="1509" width="0.4057%" height="15" fill="rgb(234,94,7)" fg:x="3492" fg:w="23"/><text x="61.8482%" y="1519.50"></text></g><g><title>operator delete (3 samples, 0.05%)</title><rect x="61.9510%" y="1493" width="0.0529%" height="15" fill="rgb(250,221,0)" fg:x="3512" fg:w="3"/><text x="62.2010%" y="1503.50"></text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="62.0039%" y="1333" width="0.0176%" height="15" fill="rgb(245,149,46)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1343.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="62.0039%" y="1317" width="0.0176%" height="15" fill="rgb(215,37,27)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1327.50"></text></g><g><title>std::__condvar::wait_until (1 samples, 0.02%)</title><rect x="62.0039%" y="1301" width="0.0176%" height="15" fill="rgb(232,65,3)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1311.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="62.0039%" y="1285" width="0.0176%" height="15" fill="rgb(214,2,16)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1295.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.02%)</title><rect x="62.0039%" y="1269" width="0.0176%" height="15" fill="rgb(227,131,50)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1253" width="0.0176%" height="15" fill="rgb(247,131,45)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1237" width="0.0176%" height="15" fill="rgb(215,97,47)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1221" width="0.0176%" height="15" fill="rgb(233,143,12)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1205" width="0.0176%" height="15" fill="rgb(222,57,17)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1189" width="0.0176%" height="15" fill="rgb(214,119,38)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1173" width="0.0176%" height="15" fill="rgb(217,28,47)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1157" width="0.0176%" height="15" fill="rgb(231,14,52)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="62.0039%" y="1141" width="0.0176%" height="15" fill="rgb(220,158,18)" fg:x="3515" fg:w="1"/><text x="62.2539%" y="1151.50"></text></g><g><title>CRollingBloomFilter::insert (1 samples, 0.02%)</title><rect x="62.0215%" y="1173" width="0.0176%" height="15" fill="rgb(222,143,46)" fg:x="3516" fg:w="1"/><text x="62.2715%" y="1183.50"></text></g><g><title>CRollingBloomFilter::insert (7 samples, 0.12%)</title><rect x="62.8859%" y="1109" width="0.1235%" height="15" fill="rgb(227,165,5)" fg:x="3565" fg:w="7"/><text x="63.1359%" y="1119.50"></text></g><g><title>FastRange32 (4 samples, 0.07%)</title><rect x="63.0093%" y="1109" width="0.0706%" height="15" fill="rgb(216,222,49)" fg:x="3572" fg:w="4"/><text x="63.2593%" y="1119.50"></text></g><g><title>RollingBloomHash (3 samples, 0.05%)</title><rect x="63.0799%" y="1109" width="0.0529%" height="15" fill="rgb(238,73,39)" fg:x="3576" fg:w="3"/><text x="63.3299%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (4 samples, 0.07%)</title><rect x="63.1328%" y="1109" width="0.0706%" height="15" fill="rgb(252,115,9)" fg:x="3579" fg:w="4"/><text x="63.3828%" y="1119.50"></text></g><g><title>CRollingBloomFilter::insert (47 samples, 0.83%)</title><rect x="62.3920%" y="1125" width="0.8291%" height="15" fill="rgb(238,202,4)" fg:x="3537" fg:w="47"/><text x="62.6420%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (1 samples, 0.02%)</title><rect x="63.2034%" y="1109" width="0.0176%" height="15" fill="rgb(252,153,44)" fg:x="3583" fg:w="1"/><text x="63.4534%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="63.9619%" y="1109" width="0.1411%" height="15" fill="rgb(235,128,27)" fg:x="3626" fg:w="8"/><text x="64.2119%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="63.9619%" y="1093" width="0.1411%" height="15" fill="rgb(221,121,47)" fg:x="3626" fg:w="8"/><text x="64.2119%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="63.9795%" y="1077" width="0.1235%" height="15" fill="rgb(247,211,47)" fg:x="3627" fg:w="7"/><text x="64.2295%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="63.9795%" y="1061" width="0.1235%" height="15" fill="rgb(252,47,49)" fg:x="3627" fg:w="7"/><text x="64.2295%" y="1071.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="63.9972%" y="1045" width="0.1058%" height="15" fill="rgb(219,119,53)" fg:x="3628" fg:w="6"/><text x="64.2472%" y="1055.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="63.9972%" y="1029" width="0.1058%" height="15" fill="rgb(243,165,53)" fg:x="3628" fg:w="6"/><text x="64.2472%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="63.9972%" y="1013" width="0.1058%" height="15" fill="rgb(230,12,35)" fg:x="3628" fg:w="6"/><text x="64.2472%" y="1023.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="63.9972%" y="997" width="0.1058%" height="15" fill="rgb(239,57,49)" fg:x="3628" fg:w="6"/><text x="64.2472%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="63.9972%" y="981" width="0.1058%" height="15" fill="rgb(231,154,7)" fg:x="3628" fg:w="6"/><text x="64.2472%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="63.9972%" y="965" width="0.1058%" height="15" fill="rgb(248,81,34)" fg:x="3628" fg:w="6"/><text x="64.2472%" y="975.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="63.9972%" y="949" width="0.1058%" height="15" fill="rgb(247,9,5)" fg:x="3628" fg:w="6"/><text x="64.2472%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0501%" y="933" width="0.0529%" height="15" fill="rgb(228,172,27)" fg:x="3631" fg:w="3"/><text x="64.3001%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.0501%" y="917" width="0.0529%" height="15" fill="rgb(230,57,44)" fg:x="3631" fg:w="3"/><text x="64.3001%" y="927.50"></text></g><g><title>MurmurHash3 (62 samples, 1.09%)</title><rect x="63.2210%" y="1125" width="1.0937%" height="15" fill="rgb(249,35,22)" fg:x="3584" fg:w="62"/><text x="63.4710%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (12 samples, 0.21%)</title><rect x="64.1030%" y="1109" width="0.2117%" height="15" fill="rgb(250,137,27)" fg:x="3634" fg:w="12"/><text x="64.3530%" y="1119.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (12 samples, 0.21%)</title><rect x="64.1030%" y="1093" width="0.2117%" height="15" fill="rgb(251,57,31)" fg:x="3634" fg:w="12"/><text x="64.3530%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="1125" width="0.0176%" height="15" fill="rgb(238,60,0)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="1109" width="0.0176%" height="15" fill="rgb(242,185,39)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="1093" width="0.0176%" height="15" fill="rgb(240,63,43)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="1077" width="0.0176%" height="15" fill="rgb(236,155,6)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="1061" width="0.0176%" height="15" fill="rgb(215,11,29)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="1045" width="0.0176%" height="15" fill="rgb(228,180,48)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1055.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="64.3147%" y="1029" width="0.0176%" height="15" fill="rgb(241,102,12)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="1013" width="0.0176%" height="15" fill="rgb(246,213,4)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="997" width="0.0176%" height="15" fill="rgb(218,134,35)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="981" width="0.0176%" height="15" fill="rgb(251,117,35)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="965" width="0.0176%" height="15" fill="rgb(206,156,45)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="949" width="0.0176%" height="15" fill="rgb(218,52,27)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="933" width="0.0176%" height="15" fill="rgb(238,83,36)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="917" width="0.0176%" height="15" fill="rgb(218,53,43)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="901" width="0.0176%" height="15" fill="rgb(239,54,39)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.3147%" y="885" width="0.0176%" height="15" fill="rgb(212,198,13)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="895.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="64.3147%" y="869" width="0.0176%" height="15" fill="rgb(234,54,46)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="879.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="64.3147%" y="853" width="0.0176%" height="15" fill="rgb(217,120,7)" fg:x="3646" fg:w="1"/><text x="64.5647%" y="863.50"></text></g><g><title>CRollingBloomFilter::insert (115 samples, 2.03%)</title><rect x="62.3214%" y="1141" width="2.0286%" height="15" fill="rgb(246,39,15)" fg:x="3533" fg:w="115"/><text x="62.5714%" y="1151.50">C..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (1 samples, 0.02%)</title><rect x="64.3323%" y="1125" width="0.0176%" height="15" fill="rgb(242,143,31)" fg:x="3647" fg:w="1"/><text x="64.5823%" y="1135.50"></text></g><g><title>FastRange32 (7 samples, 0.12%)</title><rect x="64.3500%" y="1141" width="0.1235%" height="15" fill="rgb(252,60,24)" fg:x="3648" fg:w="7"/><text x="64.6000%" y="1151.50"></text></g><g><title>RollingBloomHash (2 samples, 0.04%)</title><rect x="64.4735%" y="1141" width="0.0353%" height="15" fill="rgb(249,220,7)" fg:x="3655" fg:w="2"/><text x="64.7235%" y="1151.50"></text></g><g><title>[[xt_MASQUERADE]] (1 samples, 0.02%)</title><rect x="64.5264%" y="1029" width="0.0176%" height="15" fill="rgb(236,67,13)" fg:x="3658" fg:w="1"/><text x="64.7764%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.5264%" y="1013" width="0.0176%" height="15" fill="rgb(210,62,39)" fg:x="3658" fg:w="1"/><text x="64.7764%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.5264%" y="997" width="0.0176%" height="15" fill="rgb(219,122,53)" fg:x="3658" fg:w="1"/><text x="64.7764%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.5264%" y="981" width="0.0176%" height="15" fill="rgb(218,87,25)" fg:x="3658" fg:w="1"/><text x="64.7764%" y="991.50"></text></g><g><title>[[nf_conntrack]] (1 samples, 0.02%)</title><rect x="64.5793%" y="869" width="0.0176%" height="15" fill="rgb(234,179,48)" fg:x="3661" fg:w="1"/><text x="64.8293%" y="879.50"></text></g><g><title>[[igc]] (5 samples, 0.09%)</title><rect x="64.5264%" y="1045" width="0.0882%" height="15" fill="rgb(248,90,0)" fg:x="3658" fg:w="5"/><text x="64.7764%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="64.5440%" y="1029" width="0.0706%" height="15" fill="rgb(207,228,37)" fg:x="3659" fg:w="4"/><text x="64.7940%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.5617%" y="1013" width="0.0529%" height="15" fill="rgb(235,214,15)" fg:x="3660" fg:w="3"/><text x="64.8117%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.5617%" y="997" width="0.0529%" height="15" fill="rgb(210,144,39)" fg:x="3660" fg:w="3"/><text x="64.8117%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.5793%" y="981" width="0.0353%" height="15" fill="rgb(222,67,41)" fg:x="3661" fg:w="2"/><text x="64.8293%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.5793%" y="965" width="0.0353%" height="15" fill="rgb(205,35,37)" fg:x="3661" fg:w="2"/><text x="64.8293%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.5793%" y="949" width="0.0353%" height="15" fill="rgb(216,125,40)" fg:x="3661" fg:w="2"/><text x="64.8293%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.5793%" y="933" width="0.0353%" height="15" fill="rgb(228,227,20)" fg:x="3661" fg:w="2"/><text x="64.8293%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.5793%" y="917" width="0.0353%" height="15" fill="rgb(242,173,45)" fg:x="3661" fg:w="2"/><text x="64.8293%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.5793%" y="901" width="0.0353%" height="15" fill="rgb(215,79,24)" fg:x="3661" fg:w="2"/><text x="64.8293%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="64.5793%" y="885" width="0.0353%" height="15" fill="rgb(238,164,38)" fg:x="3661" fg:w="2"/><text x="64.8293%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.5969%" y="869" width="0.0176%" height="15" fill="rgb(245,196,38)" fg:x="3662" fg:w="1"/><text x="64.8469%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.5969%" y="853" width="0.0176%" height="15" fill="rgb(231,217,29)" fg:x="3662" fg:w="1"/><text x="64.8469%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.5969%" y="837" width="0.0176%" height="15" fill="rgb(245,6,4)" fg:x="3662" fg:w="1"/><text x="64.8469%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="64.5969%" y="821" width="0.0176%" height="15" fill="rgb(214,76,49)" fg:x="3662" fg:w="1"/><text x="64.8469%" y="831.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="64.5087%" y="1141" width="0.1588%" height="15" fill="rgb(205,96,12)" fg:x="3657" fg:w="9"/><text x="64.7587%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="64.5087%" y="1125" width="0.1588%" height="15" fill="rgb(243,131,4)" fg:x="3657" fg:w="9"/><text x="64.7587%" y="1135.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="64.5087%" y="1109" width="0.1588%" height="15" fill="rgb(214,114,4)" fg:x="3657" fg:w="9"/><text x="64.7587%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="64.5264%" y="1093" width="0.1411%" height="15" fill="rgb(234,215,15)" fg:x="3658" fg:w="8"/><text x="64.7764%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="64.5264%" y="1077" width="0.1411%" height="15" fill="rgb(250,216,45)" fg:x="3658" fg:w="8"/><text x="64.7764%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="64.5264%" y="1061" width="0.1411%" height="15" fill="rgb(236,128,4)" fg:x="3658" fg:w="8"/><text x="64.7764%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.6146%" y="1045" width="0.0529%" height="15" fill="rgb(234,50,33)" fg:x="3663" fg:w="3"/><text x="64.8646%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.6146%" y="1029" width="0.0529%" height="15" fill="rgb(253,131,37)" fg:x="3663" fg:w="3"/><text x="64.8646%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.6146%" y="1013" width="0.0529%" height="15" fill="rgb(218,55,27)" fg:x="3663" fg:w="3"/><text x="64.8646%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.6146%" y="997" width="0.0529%" height="15" fill="rgb(241,220,28)" fg:x="3663" fg:w="3"/><text x="64.8646%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="64.6146%" y="981" width="0.0529%" height="15" fill="rgb(241,90,48)" fg:x="3663" fg:w="3"/><text x="64.8646%" y="991.50"></text></g><g><title>CRollingBloomFilter::insert (153 samples, 2.70%)</title><rect x="62.0392%" y="1157" width="2.6989%" height="15" fill="rgb(216,43,37)" fg:x="3517" fg:w="153"/><text x="62.2892%" y="1167.50">CR..</text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (4 samples, 0.07%)</title><rect x="64.6675%" y="1141" width="0.0706%" height="15" fill="rgb(207,173,9)" fg:x="3666" fg:w="4"/><text x="64.9175%" y="1151.50"></text></g><g><title>MurmurHash3 (64 samples, 1.13%)</title><rect x="64.7380%" y="1157" width="1.1289%" height="15" fill="rgb(240,126,30)" fg:x="3670" fg:w="64"/><text x="64.9880%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;::value, unsigned int&gt;::type std::rotl&lt;unsigned int&gt; (6 samples, 0.11%)</title><rect x="65.7612%" y="1141" width="0.1058%" height="15" fill="rgb(228,178,53)" fg:x="3728" fg:w="6"/><text x="66.0112%" y="1151.50"></text></g><g><title>unsigned int std::__rotl&lt;unsigned int&gt; (6 samples, 0.11%)</title><rect x="65.7612%" y="1125" width="0.1058%" height="15" fill="rgb(217,33,4)" fg:x="3728" fg:w="6"/><text x="66.0112%" y="1135.50"></text></g><g><title>TxOrphanage::EraseForBlock (8 samples, 0.14%)</title><rect x="65.8670%" y="1157" width="0.1411%" height="15" fill="rgb(206,124,34)" fg:x="3734" fg:w="8"/><text x="66.1170%" y="1167.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (3 samples, 0.05%)</title><rect x="65.9552%" y="1141" width="0.0529%" height="15" fill="rgb(208,122,53)" fg:x="3739" fg:w="3"/><text x="66.2052%" y="1151.50"></text></g><g><title>TxOrphanage::EraseForBlock (2 samples, 0.04%)</title><rect x="65.9728%" y="1125" width="0.0353%" height="15" fill="rgb(215,202,26)" fg:x="3740" fg:w="2"/><text x="66.2228%" y="1135.50"></text></g><g><title>std::map&lt;COutPoint, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="65.9905%" y="1109" width="0.0176%" height="15" fill="rgb(232,198,31)" fg:x="3741" fg:w="1"/><text x="66.2405%" y="1119.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (227 samples, 4.00%)</title><rect x="62.0215%" y="1269" width="4.0042%" height="15" fill="rgb(222,23,35)" fg:x="3516" fg:w="227"/><text x="62.2715%" y="1279.50">__in..</text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (227 samples, 4.00%)</title><rect x="62.0215%" y="1253" width="4.0042%" height="15" fill="rgb(242,27,53)" fg:x="3516" fg:w="227"/><text x="62.2715%" y="1263.50">__in..</text></g><g><title>operator (227 samples, 4.00%)</title><rect x="62.0215%" y="1237" width="4.0042%" height="15" fill="rgb(210,216,42)" fg:x="3516" fg:w="227"/><text x="62.2715%" y="1247.50">oper..</text></g><g><title>operator (227 samples, 4.00%)</title><rect x="62.0215%" y="1221" width="4.0042%" height="15" fill="rgb(234,39,38)" fg:x="3516" fg:w="227"/><text x="62.2715%" y="1231.50">oper..</text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (227 samples, 4.00%)</title><rect x="62.0215%" y="1205" width="4.0042%" height="15" fill="rgb(235,126,54)" fg:x="3516" fg:w="227"/><text x="62.2715%" y="1215.50">Iter..</text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (227 samples, 4.00%)</title><rect x="62.0215%" y="1189" width="4.0042%" height="15" fill="rgb(235,150,33)" fg:x="3516" fg:w="227"/><text x="62.2715%" y="1199.50">std:..</text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (226 samples, 3.99%)</title><rect x="62.0392%" y="1173" width="3.9866%" height="15" fill="rgb(249,49,53)" fg:x="3517" fg:w="226"/><text x="62.2892%" y="1183.50">node..</text></g><g><title>node::TxDownloadManagerImpl::RecentConfirmedTransactionsFilter (1 samples, 0.02%)</title><rect x="66.0081%" y="1157" width="0.0176%" height="15" fill="rgb(238,60,50)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1167.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CRollingBloomFilter&gt;::__single_object std::make_unique&lt;CRollingBloomFilter, int, double&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="1141" width="0.0176%" height="15" fill="rgb(210,5,2)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1151.50"></text></g><g><title>CRollingBloomFilter::CRollingBloomFilter (1 samples, 0.02%)</title><rect x="66.0081%" y="1125" width="0.0176%" height="15" fill="rgb(214,207,24)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1135.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="66.0081%" y="1109" width="0.0176%" height="15" fill="rgb(228,173,2)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1119.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="66.0081%" y="1093" width="0.0176%" height="15" fill="rgb(244,26,8)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1103.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="1077" width="0.0176%" height="15" fill="rgb(249,153,35)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1087.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="1061" width="0.0176%" height="15" fill="rgb(221,215,40)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1071.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="1045" width="0.0176%" height="15" fill="rgb(238,106,35)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1055.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="1029" width="0.0176%" height="15" fill="rgb(207,195,21)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1039.50"></text></g><g><title>unsigned long* std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="1013" width="0.0176%" height="15" fill="rgb(205,43,29)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1023.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="997" width="0.0176%" height="15" fill="rgb(236,35,21)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="1007.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="981" width="0.0176%" height="15" fill="rgb(244,74,8)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="991.50"></text></g><g><title>void std::__fill_a&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="965" width="0.0176%" height="15" fill="rgb(241,229,7)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="975.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;unsigned long&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned long*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="66.0081%" y="949" width="0.0176%" height="15" fill="rgb(212,223,25)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="959.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="66.0081%" y="933" width="0.0176%" height="15" fill="rgb(234,58,53)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="917" width="0.0176%" height="15" fill="rgb(244,36,1)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="901" width="0.0176%" height="15" fill="rgb(222,40,54)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="885" width="0.0176%" height="15" fill="rgb(210,207,39)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="869" width="0.0176%" height="15" fill="rgb(234,52,14)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="853" width="0.0176%" height="15" fill="rgb(239,108,46)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="837" width="0.0176%" height="15" fill="rgb(252,223,5)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="821" width="0.0176%" height="15" fill="rgb(227,181,11)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="805" width="0.0176%" height="15" fill="rgb(248,126,40)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="789" width="0.0176%" height="15" fill="rgb(243,1,18)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="773" width="0.0176%" height="15" fill="rgb(214,145,23)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0081%" y="757" width="0.0176%" height="15" fill="rgb(241,218,11)" fg:x="3742" fg:w="1"/><text x="66.2581%" y="767.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (228 samples, 4.02%)</title><rect x="62.0215%" y="1301" width="4.0219%" height="15" fill="rgb(214,219,24)" fg:x="3516" fg:w="228"/><text x="62.2715%" y="1311.50">std:..</text></g><g><title>_M_invoke (228 samples, 4.02%)</title><rect x="62.0215%" y="1285" width="4.0219%" height="15" fill="rgb(235,32,7)" fg:x="3516" fg:w="228"/><text x="62.2715%" y="1295.50">_M_i..</text></g><g><title>__invoke_r&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="66.0258%" y="1269" width="0.0176%" height="15" fill="rgb(227,121,28)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1279.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="66.0258%" y="1253" width="0.0176%" height="15" fill="rgb(216,129,49)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1263.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="66.0258%" y="1237" width="0.0176%" height="15" fill="rgb(207,194,50)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1247.50"></text></g><g><title>operator (1 samples, 0.02%)</title><rect x="66.0258%" y="1221" width="0.0176%" height="15" fill="rgb(207,4,18)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1231.50"></text></g><g><title>Iterate&lt;ValidationSignals::MempoolTransactionsRemovedForBlock(const std::vector&lt;RemovedMempoolTransactionInfo&gt;&amp;, unsigned int)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (1 samples, 0.02%)</title><rect x="66.0258%" y="1205" width="0.0176%" height="15" fill="rgb(213,50,30)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1215.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::MempoolTransactionsRemovedForBlock(std::vector&lt;RemovedMempoolTransactionInfo, std::allocator&lt;RemovedMempoolTransactionInfo&gt; &gt; const&amp;, unsigned int)::{lambda()#2}&gt;::_M_invoke (1 samples, 0.02%)</title><rect x="66.0258%" y="1189" width="0.0176%" height="15" fill="rgb(208,77,22)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1199.50"></text></g><g><title>CBlockPolicyEstimator::processBlock (1 samples, 0.02%)</title><rect x="66.0258%" y="1173" width="0.0176%" height="15" fill="rgb(244,204,34)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1183.50"></text></g><g><title>TxConfirmStats::UpdateMovingAverages (1 samples, 0.02%)</title><rect x="66.0258%" y="1157" width="0.0176%" height="15" fill="rgb(230,20,17)" fg:x="3743" fg:w="1"/><text x="66.2758%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="66.0434%" y="1125" width="0.0353%" height="15" fill="rgb(237,83,15)" fg:x="3744" fg:w="2"/><text x="66.2934%" y="1135.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="66.0434%" y="1109" width="0.0353%" height="15" fill="rgb(221,109,25)" fg:x="3744" fg:w="2"/><text x="66.2934%" y="1119.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.04%)</title><rect x="66.0434%" y="1093" width="0.0353%" height="15" fill="rgb(205,194,52)" fg:x="3744" fg:w="2"/><text x="66.2934%" y="1103.50"></text></g><g><title>malloc_consolidate (2 samples, 0.04%)</title><rect x="66.0434%" y="1077" width="0.0353%" height="15" fill="rgb(244,173,54)" fg:x="3744" fg:w="2"/><text x="66.2934%" y="1087.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="66.1140%" y="853" width="0.0176%" height="15" fill="rgb(227,181,18)" fg:x="3748" fg:w="1"/><text x="66.3640%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.1140%" y="837" width="0.0176%" height="15" fill="rgb(238,36,30)" fg:x="3748" fg:w="1"/><text x="66.3640%" y="847.50"></text></g><g><title>__lll_lock_wake_private (13 samples, 0.23%)</title><rect x="66.1316%" y="853" width="0.2293%" height="15" fill="rgb(254,85,0)" fg:x="3749" fg:w="13"/><text x="66.3816%" y="863.50"></text></g><g><title>[unknown] (13 samples, 0.23%)</title><rect x="66.1316%" y="837" width="0.2293%" height="15" fill="rgb(247,63,33)" fg:x="3749" fg:w="13"/><text x="66.3816%" y="847.50"></text></g><g><title>[unknown] (13 samples, 0.23%)</title><rect x="66.1316%" y="821" width="0.2293%" height="15" fill="rgb(220,7,54)" fg:x="3749" fg:w="13"/><text x="66.3816%" y="831.50"></text></g><g><title>[unknown] (12 samples, 0.21%)</title><rect x="66.1492%" y="805" width="0.2117%" height="15" fill="rgb(238,227,21)" fg:x="3750" fg:w="12"/><text x="66.3992%" y="815.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="66.1845%" y="789" width="0.1764%" height="15" fill="rgb(237,29,31)" fg:x="3752" fg:w="10"/><text x="66.4345%" y="799.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="66.1845%" y="773" width="0.1764%" height="15" fill="rgb(211,21,50)" fg:x="3752" fg:w="10"/><text x="66.4345%" y="783.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="66.2551%" y="757" width="0.1058%" height="15" fill="rgb(239,119,2)" fg:x="3756" fg:w="6"/><text x="66.5051%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="741" width="0.0529%" height="15" fill="rgb(250,2,39)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="725" width="0.0529%" height="15" fill="rgb(244,46,53)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="709" width="0.0529%" height="15" fill="rgb(209,21,19)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="693" width="0.0529%" height="15" fill="rgb(236,145,4)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="677" width="0.0529%" height="15" fill="rgb(220,133,36)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="661" width="0.0529%" height="15" fill="rgb(244,18,3)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="645" width="0.0529%" height="15" fill="rgb(232,171,48)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="66.3080%" y="629" width="0.0529%" height="15" fill="rgb(223,223,53)" fg:x="3759" fg:w="3"/><text x="66.5580%" y="639.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="67.2605%" y="629" width="0.0176%" height="15" fill="rgb(246,92,13)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="613" width="0.0176%" height="15" fill="rgb(229,171,10)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="597" width="0.0176%" height="15" fill="rgb(213,131,26)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="581" width="0.0176%" height="15" fill="rgb(242,87,54)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="565" width="0.0176%" height="15" fill="rgb(237,21,35)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="549" width="0.0176%" height="15" fill="rgb(253,13,47)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="533" width="0.0176%" height="15" fill="rgb(215,122,49)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="517" width="0.0176%" height="15" fill="rgb(209,179,30)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="501" width="0.0176%" height="15" fill="rgb(235,100,24)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="485" width="0.0176%" height="15" fill="rgb(209,67,24)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.2605%" y="469" width="0.0176%" height="15" fill="rgb(206,74,32)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="479.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="67.2605%" y="453" width="0.0176%" height="15" fill="rgb(212,45,25)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="463.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="67.2605%" y="437" width="0.0176%" height="15" fill="rgb(239,26,3)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="447.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="67.2605%" y="421" width="0.0176%" height="15" fill="rgb(218,36,15)" fg:x="3813" fg:w="1"/><text x="67.5105%" y="431.50"></text></g><g><title>__lll_lock_wait_private (43 samples, 0.76%)</title><rect x="66.6079%" y="837" width="0.7585%" height="15" fill="rgb(206,108,24)" fg:x="3776" fg:w="43"/><text x="66.8579%" y="847.50"></text></g><g><title>[unknown] (43 samples, 0.76%)</title><rect x="66.6079%" y="821" width="0.7585%" height="15" fill="rgb(234,204,42)" fg:x="3776" fg:w="43"/><text x="66.8579%" y="831.50"></text></g><g><title>[unknown] (41 samples, 0.72%)</title><rect x="66.6431%" y="805" width="0.7232%" height="15" fill="rgb(229,2,11)" fg:x="3778" fg:w="41"/><text x="66.8931%" y="815.50"></text></g><g><title>[unknown] (40 samples, 0.71%)</title><rect x="66.6608%" y="789" width="0.7056%" height="15" fill="rgb(221,20,48)" fg:x="3779" fg:w="40"/><text x="66.9108%" y="799.50"></text></g><g><title>[unknown] (37 samples, 0.65%)</title><rect x="66.7137%" y="773" width="0.6527%" height="15" fill="rgb(244,164,10)" fg:x="3782" fg:w="37"/><text x="66.9637%" y="783.50"></text></g><g><title>[unknown] (35 samples, 0.62%)</title><rect x="66.7490%" y="757" width="0.6174%" height="15" fill="rgb(243,229,2)" fg:x="3784" fg:w="35"/><text x="66.9990%" y="767.50"></text></g><g><title>[unknown] (30 samples, 0.53%)</title><rect x="66.8372%" y="741" width="0.5292%" height="15" fill="rgb(232,131,37)" fg:x="3789" fg:w="30"/><text x="67.0872%" y="751.50"></text></g><g><title>[unknown] (29 samples, 0.51%)</title><rect x="66.8548%" y="725" width="0.5116%" height="15" fill="rgb(217,156,11)" fg:x="3790" fg:w="29"/><text x="67.1048%" y="735.50"></text></g><g><title>[unknown] (26 samples, 0.46%)</title><rect x="66.9077%" y="709" width="0.4586%" height="15" fill="rgb(239,99,48)" fg:x="3793" fg:w="26"/><text x="67.1577%" y="719.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="66.9783%" y="693" width="0.3881%" height="15" fill="rgb(231,209,9)" fg:x="3797" fg:w="22"/><text x="67.2283%" y="703.50"></text></g><g><title>[unknown] (19 samples, 0.34%)</title><rect x="67.0312%" y="677" width="0.3352%" height="15" fill="rgb(254,97,27)" fg:x="3800" fg:w="19"/><text x="67.2812%" y="687.50"></text></g><g><title>[unknown] (13 samples, 0.23%)</title><rect x="67.1371%" y="661" width="0.2293%" height="15" fill="rgb(223,151,38)" fg:x="3806" fg:w="13"/><text x="67.3871%" y="671.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="67.1900%" y="645" width="0.1764%" height="15" fill="rgb(219,206,35)" fg:x="3809" fg:w="10"/><text x="67.4400%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="67.2782%" y="629" width="0.0882%" height="15" fill="rgb(216,130,31)" fg:x="3814" fg:w="5"/><text x="67.5282%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="67.2782%" y="613" width="0.0882%" height="15" fill="rgb(251,97,34)" fg:x="3814" fg:w="5"/><text x="67.5282%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.2958%" y="597" width="0.0706%" height="15" fill="rgb(246,159,47)" fg:x="3815" fg:w="4"/><text x="67.5458%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.3135%" y="581" width="0.0529%" height="15" fill="rgb(232,87,10)" fg:x="3816" fg:w="3"/><text x="67.5635%" y="591.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="67.3664%" y="837" width="0.0176%" height="15" fill="rgb(249,1,37)" fg:x="3819" fg:w="1"/><text x="67.6164%" y="847.50"></text></g><g><title>_int_free (59 samples, 1.04%)</title><rect x="66.3609%" y="853" width="1.0407%" height="15" fill="rgb(239,135,14)" fg:x="3762" fg:w="59"/><text x="66.6109%" y="863.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="67.3840%" y="837" width="0.0176%" height="15" fill="rgb(253,116,46)" fg:x="3820" fg:w="1"/><text x="67.6340%" y="847.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="67.3840%" y="821" width="0.0176%" height="15" fill="rgb(222,217,37)" fg:x="3820" fg:w="1"/><text x="67.6340%" y="831.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="67.4017%" y="853" width="0.0176%" height="15" fill="rgb(252,96,8)" fg:x="3821" fg:w="1"/><text x="67.6517%" y="863.50"></text></g><g><title>cfree@GLIBC_2.2.5 (77 samples, 1.36%)</title><rect x="66.0787%" y="869" width="1.3583%" height="15" fill="rgb(254,103,41)" fg:x="3746" fg:w="77"/><text x="66.3287%" y="879.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="67.4193%" y="853" width="0.0176%" height="15" fill="rgb(218,213,19)" fg:x="3822" fg:w="1"/><text x="67.6693%" y="863.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.4369%" y="613" width="0.0706%" height="15" fill="rgb(253,95,21)" fg:x="3823" fg:w="4"/><text x="67.6869%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.4369%" y="597" width="0.0706%" height="15" fill="rgb(229,26,28)" fg:x="3823" fg:w="4"/><text x="67.6869%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="67.4369%" y="581" width="0.0706%" height="15" fill="rgb(230,129,16)" fg:x="3823" fg:w="4"/><text x="67.6869%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="565" width="0.0529%" height="15" fill="rgb(236,126,17)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="549" width="0.0529%" height="15" fill="rgb(209,33,33)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="533" width="0.0529%" height="15" fill="rgb(227,85,29)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="517" width="0.0529%" height="15" fill="rgb(241,53,46)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="501" width="0.0529%" height="15" fill="rgb(228,167,53)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="485" width="0.0529%" height="15" fill="rgb(238,195,45)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="469" width="0.0529%" height="15" fill="rgb(252,124,45)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="67.4546%" y="453" width="0.0529%" height="15" fill="rgb(251,38,35)" fg:x="3824" fg:w="3"/><text x="67.7046%" y="463.50"></text></g><g><title>CScript::~CScript (5 samples, 0.09%)</title><rect x="67.4369%" y="677" width="0.0882%" height="15" fill="rgb(227,33,2)" fg:x="3823" fg:w="5"/><text x="67.6869%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (5 samples, 0.09%)</title><rect x="67.4369%" y="661" width="0.0882%" height="15" fill="rgb(223,157,46)" fg:x="3823" fg:w="5"/><text x="67.6869%" y="671.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.09%)</title><rect x="67.4369%" y="645" width="0.0882%" height="15" fill="rgb(222,78,41)" fg:x="3823" fg:w="5"/><text x="67.6869%" y="655.50"></text></g><g><title>_int_free (5 samples, 0.09%)</title><rect x="67.4369%" y="629" width="0.0882%" height="15" fill="rgb(248,176,11)" fg:x="3823" fg:w="5"/><text x="67.6869%" y="639.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="67.5075%" y="613" width="0.0176%" height="15" fill="rgb(241,221,18)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="597" width="0.0176%" height="15" fill="rgb(218,85,22)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="581" width="0.0176%" height="15" fill="rgb(222,223,7)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="565" width="0.0176%" height="15" fill="rgb(254,59,39)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="549" width="0.0176%" height="15" fill="rgb(247,100,27)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="533" width="0.0176%" height="15" fill="rgb(237,207,10)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="517" width="0.0176%" height="15" fill="rgb(220,121,28)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="501" width="0.0176%" height="15" fill="rgb(213,223,20)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="485" width="0.0176%" height="15" fill="rgb(205,121,27)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="469" width="0.0176%" height="15" fill="rgb(253,24,53)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="453" width="0.0176%" height="15" fill="rgb(224,224,47)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="437" width="0.0176%" height="15" fill="rgb(250,125,36)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="421" width="0.0176%" height="15" fill="rgb(240,144,38)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="405" width="0.0176%" height="15" fill="rgb(250,15,50)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="389" width="0.0176%" height="15" fill="rgb(210,24,26)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="399.50"></text></g><g><title>[[igc]] (1 samples, 0.02%)</title><rect x="67.5075%" y="373" width="0.0176%" height="15" fill="rgb(234,53,53)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="357" width="0.0176%" height="15" fill="rgb(208,108,28)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="341" width="0.0176%" height="15" fill="rgb(227,143,7)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="325" width="0.0176%" height="15" fill="rgb(238,189,38)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="309" width="0.0176%" height="15" fill="rgb(222,69,15)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="293" width="0.0176%" height="15" fill="rgb(213,169,7)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="277" width="0.0176%" height="15" fill="rgb(251,219,4)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="261" width="0.0176%" height="15" fill="rgb(241,55,40)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="245" width="0.0176%" height="15" fill="rgb(243,57,30)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="229" width="0.0176%" height="15" fill="rgb(234,50,30)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="239.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="67.5075%" y="213" width="0.0176%" height="15" fill="rgb(239,23,42)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="223.50"></text></g><g><title>[[nf_tables]] (1 samples, 0.02%)</title><rect x="67.5075%" y="197" width="0.0176%" height="15" fill="rgb(217,38,19)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="207.50"></text></g><g><title>[[nft_compat]] (1 samples, 0.02%)</title><rect x="67.5075%" y="181" width="0.0176%" height="15" fill="rgb(215,179,16)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="191.50"></text></g><g><title>[[ipt_rpfilter]] (1 samples, 0.02%)</title><rect x="67.5075%" y="165" width="0.0176%" height="15" fill="rgb(254,21,37)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="149" width="0.0176%" height="15" fill="rgb(219,207,48)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.5075%" y="133" width="0.0176%" height="15" fill="rgb(227,225,41)" fg:x="3827" fg:w="1"/><text x="67.7575%" y="143.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="67.5428%" y="549" width="0.0529%" height="15" fill="rgb(223,130,1)" fg:x="3829" fg:w="3"/><text x="67.7928%" y="559.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (5 samples, 0.09%)</title><rect x="67.5251%" y="645" width="0.0882%" height="15" fill="rgb(249,54,42)" fg:x="3828" fg:w="5"/><text x="67.7751%" y="655.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (5 samples, 0.09%)</title><rect x="67.5251%" y="629" width="0.0882%" height="15" fill="rgb(248,69,25)" fg:x="3828" fg:w="5"/><text x="67.7751%" y="639.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="67.5428%" y="613" width="0.0706%" height="15" fill="rgb(234,21,32)" fg:x="3829" fg:w="4"/><text x="67.7928%" y="623.50"></text></g><g><title>std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="67.5428%" y="597" width="0.0706%" height="15" fill="rgb(252,136,6)" fg:x="3829" fg:w="4"/><text x="67.7928%" y="607.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="67.5428%" y="581" width="0.0706%" height="15" fill="rgb(245,87,12)" fg:x="3829" fg:w="4"/><text x="67.7928%" y="591.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="67.5428%" y="565" width="0.0706%" height="15" fill="rgb(208,12,15)" fg:x="3829" fg:w="4"/><text x="67.7928%" y="575.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="67.5957%" y="549" width="0.0176%" height="15" fill="rgb(250,98,2)" fg:x="3832" fg:w="1"/><text x="67.8457%" y="559.50"></text></g><g><title>__lll_lock_wake_private (2 samples, 0.04%)</title><rect x="67.7015%" y="453" width="0.0353%" height="15" fill="rgb(205,213,15)" fg:x="3838" fg:w="2"/><text x="67.9515%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.7192%" y="437" width="0.0176%" height="15" fill="rgb(248,192,44)" fg:x="3839" fg:w="1"/><text x="67.9692%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.7192%" y="421" width="0.0176%" height="15" fill="rgb(221,89,17)" fg:x="3839" fg:w="1"/><text x="67.9692%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.7192%" y="405" width="0.0176%" height="15" fill="rgb(209,55,3)" fg:x="3839" fg:w="1"/><text x="67.9692%" y="415.50"></text></g><g><title>_int_free (8 samples, 0.14%)</title><rect x="67.7368%" y="453" width="0.1411%" height="15" fill="rgb(247,23,45)" fg:x="3840" fg:w="8"/><text x="67.9868%" y="463.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="67.8603%" y="437" width="0.0176%" height="15" fill="rgb(235,152,23)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="421" width="0.0176%" height="15" fill="rgb(244,63,13)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="405" width="0.0176%" height="15" fill="rgb(227,30,37)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="389" width="0.0176%" height="15" fill="rgb(224,49,42)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="373" width="0.0176%" height="15" fill="rgb(218,129,5)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="357" width="0.0176%" height="15" fill="rgb(240,199,54)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="341" width="0.0176%" height="15" fill="rgb(234,31,13)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="325" width="0.0176%" height="15" fill="rgb(219,73,54)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="309" width="0.0176%" height="15" fill="rgb(251,162,10)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="293" width="0.0176%" height="15" fill="rgb(240,138,47)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="277" width="0.0176%" height="15" fill="rgb(216,138,26)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8603%" y="261" width="0.0176%" height="15" fill="rgb(243,17,35)" fg:x="3847" fg:w="1"/><text x="68.1103%" y="271.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (26 samples, 0.46%)</title><rect x="67.4369%" y="789" width="0.4586%" height="15" fill="rgb(241,60,18)" fg:x="3823" fg:w="26"/><text x="67.6869%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (26 samples, 0.46%)</title><rect x="67.4369%" y="773" width="0.4586%" height="15" fill="rgb(234,2,44)" fg:x="3823" fg:w="26"/><text x="67.6869%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (26 samples, 0.46%)</title><rect x="67.4369%" y="757" width="0.4586%" height="15" fill="rgb(225,225,33)" fg:x="3823" fg:w="26"/><text x="67.6869%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (26 samples, 0.46%)</title><rect x="67.4369%" y="741" width="0.4586%" height="15" fill="rgb(234,50,31)" fg:x="3823" fg:w="26"/><text x="67.6869%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (26 samples, 0.46%)</title><rect x="67.4369%" y="725" width="0.4586%" height="15" fill="rgb(249,6,25)" fg:x="3823" fg:w="26"/><text x="67.6869%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (26 samples, 0.46%)</title><rect x="67.4369%" y="709" width="0.4586%" height="15" fill="rgb(241,5,17)" fg:x="3823" fg:w="26"/><text x="67.6869%" y="719.50"></text></g><g><title>CTxIn::~CTxIn (26 samples, 0.46%)</title><rect x="67.4369%" y="693" width="0.4586%" height="15" fill="rgb(207,116,10)" fg:x="3823" fg:w="26"/><text x="67.6869%" y="703.50"></text></g><g><title>CScriptWitness::~CScriptWitness (21 samples, 0.37%)</title><rect x="67.5251%" y="677" width="0.3704%" height="15" fill="rgb(222,128,18)" fg:x="3828" fg:w="21"/><text x="67.7751%" y="687.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (21 samples, 0.37%)</title><rect x="67.5251%" y="661" width="0.3704%" height="15" fill="rgb(229,109,25)" fg:x="3828" fg:w="21"/><text x="67.7751%" y="671.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (16 samples, 0.28%)</title><rect x="67.6133%" y="645" width="0.2822%" height="15" fill="rgb(222,102,25)" fg:x="3833" fg:w="16"/><text x="67.8633%" y="655.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (16 samples, 0.28%)</title><rect x="67.6133%" y="629" width="0.2822%" height="15" fill="rgb(239,211,5)" fg:x="3833" fg:w="16"/><text x="67.8633%" y="639.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (16 samples, 0.28%)</title><rect x="67.6133%" y="613" width="0.2822%" height="15" fill="rgb(223,136,26)" fg:x="3833" fg:w="16"/><text x="67.8633%" y="623.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (16 samples, 0.28%)</title><rect x="67.6133%" y="597" width="0.2822%" height="15" fill="rgb(227,30,15)" fg:x="3833" fg:w="16"/><text x="67.8633%" y="607.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (16 samples, 0.28%)</title><rect x="67.6133%" y="581" width="0.2822%" height="15" fill="rgb(247,76,4)" fg:x="3833" fg:w="16"/><text x="67.8633%" y="591.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (16 samples, 0.28%)</title><rect x="67.6133%" y="565" width="0.2822%" height="15" fill="rgb(245,38,48)" fg:x="3833" fg:w="16"/><text x="67.8633%" y="575.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (16 samples, 0.28%)</title><rect x="67.6133%" y="549" width="0.2822%" height="15" fill="rgb(210,220,14)" fg:x="3833" fg:w="16"/><text x="67.8633%" y="559.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (14 samples, 0.25%)</title><rect x="67.6486%" y="533" width="0.2470%" height="15" fill="rgb(224,60,51)" fg:x="3835" fg:w="14"/><text x="67.8986%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (14 samples, 0.25%)</title><rect x="67.6486%" y="517" width="0.2470%" height="15" fill="rgb(212,133,49)" fg:x="3835" fg:w="14"/><text x="67.8986%" y="527.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (14 samples, 0.25%)</title><rect x="67.6486%" y="501" width="0.2470%" height="15" fill="rgb(231,39,22)" fg:x="3835" fg:w="14"/><text x="67.8986%" y="511.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (14 samples, 0.25%)</title><rect x="67.6486%" y="485" width="0.2470%" height="15" fill="rgb(236,173,22)" fg:x="3835" fg:w="14"/><text x="67.8986%" y="495.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.25%)</title><rect x="67.6486%" y="469" width="0.2470%" height="15" fill="rgb(210,70,0)" fg:x="3835" fg:w="14"/><text x="67.8986%" y="479.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="67.8779%" y="453" width="0.0176%" height="15" fill="rgb(215,170,11)" fg:x="3848" fg:w="1"/><text x="68.1279%" y="463.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.02%)</title><rect x="67.8956%" y="677" width="0.0176%" height="15" fill="rgb(220,154,28)" fg:x="3849" fg:w="1"/><text x="68.1456%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8956%" y="661" width="0.0176%" height="15" fill="rgb(240,160,41)" fg:x="3849" fg:w="1"/><text x="68.1456%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8956%" y="645" width="0.0176%" height="15" fill="rgb(243,215,41)" fg:x="3849" fg:w="1"/><text x="68.1456%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="67.8956%" y="629" width="0.0176%" height="15" fill="rgb(214,208,31)" fg:x="3849" fg:w="1"/><text x="68.1456%" y="639.50"></text></g><g><title>_int_free (10 samples, 0.18%)</title><rect x="67.9132%" y="677" width="0.1764%" height="15" fill="rgb(247,57,22)" fg:x="3850" fg:w="10"/><text x="68.1632%" y="687.50"></text></g><g><title>__lll_lock_wait_private (7 samples, 0.12%)</title><rect x="67.9661%" y="661" width="0.1235%" height="15" fill="rgb(228,73,52)" fg:x="3853" fg:w="7"/><text x="68.2161%" y="671.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="67.9661%" y="645" width="0.1235%" height="15" fill="rgb(252,60,9)" fg:x="3853" fg:w="7"/><text x="68.2161%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="67.9661%" y="629" width="0.1235%" height="15" fill="rgb(233,9,51)" fg:x="3853" fg:w="7"/><text x="68.2161%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="67.9838%" y="613" width="0.1058%" height="15" fill="rgb(223,67,14)" fg:x="3854" fg:w="6"/><text x="68.2338%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="67.9838%" y="597" width="0.1058%" height="15" fill="rgb(222,86,2)" fg:x="3854" fg:w="6"/><text x="68.2338%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="67.9838%" y="581" width="0.1058%" height="15" fill="rgb(243,58,54)" fg:x="3854" fg:w="6"/><text x="68.2338%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="68.0014%" y="565" width="0.0882%" height="15" fill="rgb(210,200,39)" fg:x="3855" fg:w="5"/><text x="68.2514%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="68.0014%" y="549" width="0.0882%" height="15" fill="rgb(238,135,9)" fg:x="3855" fg:w="5"/><text x="68.2514%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="68.0014%" y="533" width="0.0882%" height="15" fill="rgb(232,179,7)" fg:x="3855" fg:w="5"/><text x="68.2514%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.0191%" y="517" width="0.0706%" height="15" fill="rgb(245,65,41)" fg:x="3856" fg:w="4"/><text x="68.2691%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.0367%" y="501" width="0.0529%" height="15" fill="rgb(227,43,8)" fg:x="3857" fg:w="3"/><text x="68.2867%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="68.0543%" y="485" width="0.0353%" height="15" fill="rgb(235,91,14)" fg:x="3858" fg:w="2"/><text x="68.3043%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="68.0543%" y="469" width="0.0353%" height="15" fill="rgb(235,219,31)" fg:x="3858" fg:w="2"/><text x="68.3043%" y="479.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.02%)</title><rect x="68.0896%" y="677" width="0.0176%" height="15" fill="rgb(227,121,25)" fg:x="3860" fg:w="1"/><text x="68.3396%" y="687.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="68.0896%" y="661" width="0.0176%" height="15" fill="rgb(254,129,24)" fg:x="3860" fg:w="1"/><text x="68.3396%" y="671.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 0.23%)</title><rect x="67.8956%" y="693" width="0.2293%" height="15" fill="rgb(226,144,49)" fg:x="3849" fg:w="13"/><text x="68.1456%" y="703.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="68.1072%" y="677" width="0.0176%" height="15" fill="rgb(214,187,32)" fg:x="3861" fg:w="1"/><text x="68.3572%" y="687.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~_Vector_base (14 samples, 0.25%)</title><rect x="67.8956%" y="773" width="0.2470%" height="15" fill="rgb(243,129,46)" fg:x="3849" fg:w="14"/><text x="68.1456%" y="783.50"></text></g><g><title>std::_Vector_base&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::_M_deallocate (14 samples, 0.25%)</title><rect x="67.8956%" y="757" width="0.2470%" height="15" fill="rgb(221,185,35)" fg:x="3849" fg:w="14"/><text x="68.1456%" y="767.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxOut&gt; &gt;::deallocate (14 samples, 0.25%)</title><rect x="67.8956%" y="741" width="0.2470%" height="15" fill="rgb(205,0,32)" fg:x="3849" fg:w="14"/><text x="68.1456%" y="751.50"></text></g><g><title>std::allocator&lt;CTxOut&gt;::deallocate (14 samples, 0.25%)</title><rect x="67.8956%" y="725" width="0.2470%" height="15" fill="rgb(229,179,12)" fg:x="3849" fg:w="14"/><text x="68.1456%" y="735.50"></text></g><g><title>std::__new_allocator&lt;CTxOut&gt;::deallocate (14 samples, 0.25%)</title><rect x="67.8956%" y="709" width="0.2470%" height="15" fill="rgb(252,107,19)" fg:x="3849" fg:w="14"/><text x="68.1456%" y="719.50"></text></g><g><title>free@plt (1 samples, 0.02%)</title><rect x="68.1249%" y="693" width="0.0176%" height="15" fill="rgb(220,95,27)" fg:x="3862" fg:w="1"/><text x="68.3749%" y="703.50"></text></g><g><title>__clone (350 samples, 6.17%)</title><rect x="62.0039%" y="1509" width="6.1739%" height="15" fill="rgb(240,113,40)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1519.50">__clone</text></g><g><title>start_thread (350 samples, 6.17%)</title><rect x="62.0039%" y="1493" width="6.1739%" height="15" fill="rgb(208,4,43)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1503.50">start_th..</text></g><g><title>execute_native_thread_routine (350 samples, 6.17%)</title><rect x="62.0039%" y="1477" width="6.1739%" height="15" fill="rgb(247,189,30)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1487.50">execute_..</text></g><g><title>_M_run (350 samples, 6.17%)</title><rect x="62.0039%" y="1461" width="6.1739%" height="15" fill="rgb(231,157,17)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1471.50">_M_run</text></g><g><title>operator (350 samples, 6.17%)</title><rect x="62.0039%" y="1445" width="6.1739%" height="15" fill="rgb(224,139,6)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1455.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (350 samples, 6.17%)</title><rect x="62.0039%" y="1429" width="6.1739%" height="15" fill="rgb(223,83,16)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1439.50">_M_invok..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (350 samples, 6.17%)</title><rect x="62.0039%" y="1413" width="6.1739%" height="15" fill="rgb(232,211,20)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1423.50">__invoke..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (350 samples, 6.17%)</title><rect x="62.0039%" y="1397" width="6.1739%" height="15" fill="rgb(225,203,35)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1407.50">std::thr..</text></g><g><title>util::TraceThread (350 samples, 6.17%)</title><rect x="62.0039%" y="1381" width="6.1739%" height="15" fill="rgb(215,211,44)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1391.50">util::Tr..</text></g><g><title>std::function&lt;void ()&gt;::operator (350 samples, 6.17%)</title><rect x="62.0039%" y="1365" width="6.1739%" height="15" fill="rgb(248,213,26)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1375.50">std::fun..</text></g><g><title>CScheduler::serviceQueue (350 samples, 6.17%)</title><rect x="62.0039%" y="1349" width="6.1739%" height="15" fill="rgb(214,23,52)" fg:x="3515" fg:w="350"/><text x="62.2539%" y="1359.50">CSchedul..</text></g><g><title>std::function&lt;void ()&gt;::operator (349 samples, 6.16%)</title><rect x="62.0215%" y="1333" width="6.1563%" height="15" fill="rgb(225,173,50)" fg:x="3516" fg:w="349"/><text x="62.2715%" y="1343.50">std::fun..</text></g><g><title>SerialTaskRunner::ProcessQueue (349 samples, 6.16%)</title><rect x="62.0215%" y="1317" width="6.1563%" height="15" fill="rgb(206,150,22)" fg:x="3516" fg:w="349"/><text x="62.2715%" y="1327.50">SerialTa..</text></g><g><title>std::function&lt;void ()&gt;::~function (121 samples, 2.13%)</title><rect x="66.0434%" y="1301" width="2.1344%" height="15" fill="rgb(239,64,23)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1311.50">s..</text></g><g><title>std::_Function_base::~_Function_base (121 samples, 2.13%)</title><rect x="66.0434%" y="1285" width="2.1344%" height="15" fill="rgb(242,50,38)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1295.50">s..</text></g><g><title>_M_manager (121 samples, 2.13%)</title><rect x="66.0434%" y="1269" width="2.1344%" height="15" fill="rgb(217,91,15)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1279.50">_..</text></g><g><title>_M_manager (121 samples, 2.13%)</title><rect x="66.0434%" y="1253" width="2.1344%" height="15" fill="rgb(230,172,6)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1263.50">_..</text></g><g><title>_M_destroy (121 samples, 2.13%)</title><rect x="66.0434%" y="1237" width="2.1344%" height="15" fill="rgb(221,98,26)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1247.50">_..</text></g><g><title>~&lt;lambda&gt; (121 samples, 2.13%)</title><rect x="66.0434%" y="1221" width="2.1344%" height="15" fill="rgb(227,210,45)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1231.50">~..</text></g><g><title>std::shared_ptr&lt;CBlock const&gt;::~shared_ptr (121 samples, 2.13%)</title><rect x="66.0434%" y="1205" width="2.1344%" height="15" fill="rgb(206,8,30)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1215.50">s..</text></g><g><title>std::__shared_ptr&lt;CBlock const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (121 samples, 2.13%)</title><rect x="66.0434%" y="1189" width="2.1344%" height="15" fill="rgb(241,219,17)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1199.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (121 samples, 2.13%)</title><rect x="66.0434%" y="1173" width="2.1344%" height="15" fill="rgb(247,121,29)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1183.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (121 samples, 2.13%)</title><rect x="66.0434%" y="1157" width="2.1344%" height="15" fill="rgb(219,169,49)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1167.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (121 samples, 2.13%)</title><rect x="66.0434%" y="1141" width="2.1344%" height="15" fill="rgb(253,49,49)" fg:x="3744" fg:w="121"/><text x="66.2934%" y="1151.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (119 samples, 2.10%)</title><rect x="66.0787%" y="1125" width="2.0991%" height="15" fill="rgb(217,178,3)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1135.50">s..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="1109" width="2.0991%" height="15" fill="rgb(234,73,37)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1119.50">v..</text></g><g><title>void std::_Destroy&lt;CBlock&gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="1093" width="2.0991%" height="15" fill="rgb(250,98,22)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1103.50">v..</text></g><g><title>void std::destroy_at&lt;CBlock&gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="1077" width="2.0991%" height="15" fill="rgb(220,108,37)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1087.50">v..</text></g><g><title>CBlock::~CBlock (119 samples, 2.10%)</title><rect x="66.0787%" y="1061" width="2.0991%" height="15" fill="rgb(225,168,10)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1071.50">C..</text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (119 samples, 2.10%)</title><rect x="66.0787%" y="1045" width="2.0991%" height="15" fill="rgb(247,215,21)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1055.50">s..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="1029" width="2.0991%" height="15" fill="rgb(253,189,31)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1039.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="1013" width="2.0991%" height="15" fill="rgb(241,54,22)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1023.50">v..</text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="997" width="2.0991%" height="15" fill="rgb(211,87,4)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="1007.50">v..</text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="981" width="2.0991%" height="15" fill="rgb(245,112,24)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="991.50">v..</text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (119 samples, 2.10%)</title><rect x="66.0787%" y="965" width="2.0991%" height="15" fill="rgb(235,190,41)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="975.50">v..</text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (119 samples, 2.10%)</title><rect x="66.0787%" y="949" width="2.0991%" height="15" fill="rgb(214,89,8)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="959.50">s..</text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (119 samples, 2.10%)</title><rect x="66.0787%" y="933" width="2.0991%" height="15" fill="rgb(249,155,35)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="943.50">s..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (119 samples, 2.10%)</title><rect x="66.0787%" y="917" width="2.0991%" height="15" fill="rgb(249,88,26)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="927.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (119 samples, 2.10%)</title><rect x="66.0787%" y="901" width="2.0991%" height="15" fill="rgb(232,56,8)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="911.50">s..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (119 samples, 2.10%)</title><rect x="66.0787%" y="885" width="2.0991%" height="15" fill="rgb(240,95,3)" fg:x="3746" fg:w="119"/><text x="66.3287%" y="895.50">s..</text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (42 samples, 0.74%)</title><rect x="67.4369%" y="869" width="0.7409%" height="15" fill="rgb(222,44,28)" fg:x="3823" fg:w="42"/><text x="67.6869%" y="879.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (42 samples, 0.74%)</title><rect x="67.4369%" y="853" width="0.7409%" height="15" fill="rgb(234,16,30)" fg:x="3823" fg:w="42"/><text x="67.6869%" y="863.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (42 samples, 0.74%)</title><rect x="67.4369%" y="837" width="0.7409%" height="15" fill="rgb(223,26,17)" fg:x="3823" fg:w="42"/><text x="67.6869%" y="847.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (42 samples, 0.74%)</title><rect x="67.4369%" y="821" width="0.7409%" height="15" fill="rgb(239,187,47)" fg:x="3823" fg:w="42"/><text x="67.6869%" y="831.50"></text></g><g><title>CTransaction::~CTransaction (42 samples, 0.74%)</title><rect x="67.4369%" y="805" width="0.7409%" height="15" fill="rgb(247,102,50)" fg:x="3823" fg:w="42"/><text x="67.6869%" y="815.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (16 samples, 0.28%)</title><rect x="67.8956%" y="789" width="0.2822%" height="15" fill="rgb(231,216,22)" fg:x="3849" fg:w="16"/><text x="68.1456%" y="799.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (2 samples, 0.04%)</title><rect x="68.1425%" y="773" width="0.0353%" height="15" fill="rgb(216,201,26)" fg:x="3863" fg:w="2"/><text x="68.3925%" y="783.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (2 samples, 0.04%)</title><rect x="68.1425%" y="757" width="0.0353%" height="15" fill="rgb(214,186,23)" fg:x="3863" fg:w="2"/><text x="68.3925%" y="767.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (2 samples, 0.04%)</title><rect x="68.1425%" y="741" width="0.0353%" height="15" fill="rgb(235,184,4)" fg:x="3863" fg:w="2"/><text x="68.3925%" y="751.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (1 samples, 0.02%)</title><rect x="68.1602%" y="725" width="0.0176%" height="15" fill="rgb(244,46,17)" fg:x="3864" fg:w="1"/><text x="68.4102%" y="735.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (1 samples, 0.02%)</title><rect x="68.1602%" y="709" width="0.0176%" height="15" fill="rgb(248,74,46)" fg:x="3864" fg:w="1"/><text x="68.4102%" y="719.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.02%)</title><rect x="68.1602%" y="693" width="0.0176%" height="15" fill="rgb(243,79,5)" fg:x="3864" fg:w="1"/><text x="68.4102%" y="703.50"></text></g><g><title>CScript::~CScript (1 samples, 0.02%)</title><rect x="68.1602%" y="677" width="0.0176%" height="15" fill="rgb(213,148,1)" fg:x="3864" fg:w="1"/><text x="68.4102%" y="687.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.02%)</title><rect x="68.1602%" y="661" width="0.0176%" height="15" fill="rgb(221,30,0)" fg:x="3864" fg:w="1"/><text x="68.4102%" y="671.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="68.1778%" y="1509" width="0.0353%" height="15" fill="rgb(207,85,29)" fg:x="3865" fg:w="2"/><text x="68.4278%" y="1519.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="68.2131%" y="1509" width="0.0176%" height="15" fill="rgb(239,31,46)" fg:x="3867" fg:w="1"/><text x="68.4631%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.14%)</title><rect x="68.2307%" y="1509" width="0.1411%" height="15" fill="rgb(219,6,1)" fg:x="3868" fg:w="8"/><text x="68.4807%" y="1519.50"></text></g><g><title>std::_Rb_tree&lt;COutPoint, std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;COutPoint&gt;, std::allocator&lt;std::pair&lt;COutPoint const, std::set&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt;, TxOrphanage::IteratorComparator, std::allocator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;transaction_identifier&lt;true&gt; const, TxOrphanage::OrphanTx&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="68.3718%" y="1509" width="0.0176%" height="15" fill="rgb(229,90,29)" fg:x="3876" fg:w="1"/><text x="68.6218%" y="1519.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CBlock, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (6 samples, 0.11%)</title><rect x="68.3895%" y="1509" width="0.1058%" height="15" fill="rgb(242,201,42)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CBlock&gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1493" width="0.1058%" height="15" fill="rgb(243,80,54)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CBlock&gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1477" width="0.1058%" height="15" fill="rgb(223,166,15)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CBlock&gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1461" width="0.1058%" height="15" fill="rgb(238,78,27)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1471.50"></text></g><g><title>CBlock::~CBlock (6 samples, 0.11%)</title><rect x="68.3895%" y="1445" width="0.1058%" height="15" fill="rgb(235,28,43)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1455.50"></text></g><g><title>std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;::~vector (6 samples, 0.11%)</title><rect x="68.3895%" y="1429" width="0.1058%" height="15" fill="rgb(240,210,28)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*, std::shared_ptr&lt;CTransaction const&gt; &gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1413" width="0.1058%" height="15" fill="rgb(253,6,46)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1397" width="0.1058%" height="15" fill="rgb(250,159,47)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;CTransaction const&gt;*&gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1381" width="0.1058%" height="15" fill="rgb(216,139,2)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1365" width="0.1058%" height="15" fill="rgb(221,124,44)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; (6 samples, 0.11%)</title><rect x="68.3895%" y="1349" width="0.1058%" height="15" fill="rgb(205,37,22)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1359.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::~shared_ptr (6 samples, 0.11%)</title><rect x="68.3895%" y="1333" width="0.1058%" height="15" fill="rgb(250,55,8)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1343.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (6 samples, 0.11%)</title><rect x="68.3895%" y="1317" width="0.1058%" height="15" fill="rgb(215,83,48)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1327.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (6 samples, 0.11%)</title><rect x="68.3895%" y="1301" width="0.1058%" height="15" fill="rgb(253,2,32)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1311.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (6 samples, 0.11%)</title><rect x="68.3895%" y="1285" width="0.1058%" height="15" fill="rgb(236,67,28)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1295.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (6 samples, 0.11%)</title><rect x="68.3895%" y="1269" width="0.1058%" height="15" fill="rgb(252,55,15)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1279.50"></text></g><g><title>_int_free (6 samples, 0.11%)</title><rect x="68.3895%" y="1253" width="0.1058%" height="15" fill="rgb(243,173,17)" fg:x="3877" fg:w="6"/><text x="68.6395%" y="1263.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (5 samples, 0.09%)</title><rect x="68.4953%" y="1429" width="0.0882%" height="15" fill="rgb(215,212,13)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*, CTxIn&gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1413" width="0.0882%" height="15" fill="rgb(253,176,6)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxIn*&gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1397" width="0.0882%" height="15" fill="rgb(236,105,26)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1381" width="0.0882%" height="15" fill="rgb(239,226,32)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;CTxIn&gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1365" width="0.0882%" height="15" fill="rgb(236,104,51)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;CTxIn&gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1349" width="0.0882%" height="15" fill="rgb(220,172,33)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1359.50"></text></g><g><title>CTxIn::~CTxIn (5 samples, 0.09%)</title><rect x="68.4953%" y="1333" width="0.0882%" height="15" fill="rgb(224,182,25)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1343.50"></text></g><g><title>CScriptWitness::~CScriptWitness (5 samples, 0.09%)</title><rect x="68.4953%" y="1317" width="0.0882%" height="15" fill="rgb(236,184,24)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1327.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (5 samples, 0.09%)</title><rect x="68.4953%" y="1301" width="0.0882%" height="15" fill="rgb(241,221,14)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1285" width="0.0882%" height="15" fill="rgb(227,146,5)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1295.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1269" width="0.0882%" height="15" fill="rgb(214,15,23)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1279.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (5 samples, 0.09%)</title><rect x="68.4953%" y="1253" width="0.0882%" height="15" fill="rgb(233,157,31)" fg:x="3883" fg:w="5"/><text x="68.7453%" y="1263.50"></text></g><g><title>void std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="68.5130%" y="1237" width="0.0706%" height="15" fill="rgb(211,27,52)" fg:x="3884" fg:w="4"/><text x="68.7630%" y="1247.50"></text></g><g><title>void std::destroy_at&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="68.5130%" y="1221" width="0.0706%" height="15" fill="rgb(212,223,15)" fg:x="3884" fg:w="4"/><text x="68.7630%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (4 samples, 0.07%)</title><rect x="68.5130%" y="1205" width="0.0706%" height="15" fill="rgb(254,211,0)" fg:x="3884" fg:w="4"/><text x="68.7630%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (4 samples, 0.07%)</title><rect x="68.5130%" y="1189" width="0.0706%" height="15" fill="rgb(205,43,38)" fg:x="3884" fg:w="4"/><text x="68.7630%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (2 samples, 0.04%)</title><rect x="68.5482%" y="1173" width="0.0353%" height="15" fill="rgb(242,206,46)" fg:x="3886" fg:w="2"/><text x="68.7982%" y="1183.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (2 samples, 0.04%)</title><rect x="68.5482%" y="1157" width="0.0353%" height="15" fill="rgb(220,221,12)" fg:x="3886" fg:w="2"/><text x="68.7982%" y="1167.50"></text></g><g><title>std::allocator&lt;unsigned char&gt;::deallocate (2 samples, 0.04%)</title><rect x="68.5482%" y="1141" width="0.0353%" height="15" fill="rgb(217,156,35)" fg:x="3886" fg:w="2"/><text x="68.7982%" y="1151.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (2 samples, 0.04%)</title><rect x="68.5482%" y="1125" width="0.0353%" height="15" fill="rgb(207,181,49)" fg:x="3886" fg:w="2"/><text x="68.7982%" y="1135.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="68.5659%" y="1109" width="0.0176%" height="15" fill="rgb(235,103,47)" fg:x="3887" fg:w="1"/><text x="68.8159%" y="1119.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (9 samples, 0.16%)</title><rect x="68.4953%" y="1509" width="0.1588%" height="15" fill="rgb(222,63,28)" fg:x="3883" fg:w="9"/><text x="68.7453%" y="1519.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;CTransaction const&gt; (9 samples, 0.16%)</title><rect x="68.4953%" y="1493" width="0.1588%" height="15" fill="rgb(244,137,21)" fg:x="3883" fg:w="9"/><text x="68.7453%" y="1503.50"></text></g><g><title>void std::_Destroy&lt;CTransaction const&gt; (9 samples, 0.16%)</title><rect x="68.4953%" y="1477" width="0.1588%" height="15" fill="rgb(228,35,27)" fg:x="3883" fg:w="9"/><text x="68.7453%" y="1487.50"></text></g><g><title>void std::destroy_at&lt;CTransaction const&gt; (9 samples, 0.16%)</title><rect x="68.4953%" y="1461" width="0.1588%" height="15" fill="rgb(226,191,41)" fg:x="3883" fg:w="9"/><text x="68.7453%" y="1471.50"></text></g><g><title>CTransaction::~CTransaction (9 samples, 0.16%)</title><rect x="68.4953%" y="1445" width="0.1588%" height="15" fill="rgb(210,154,3)" fg:x="3883" fg:w="9"/><text x="68.7453%" y="1455.50"></text></g><g><title>std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt;::~vector (4 samples, 0.07%)</title><rect x="68.5835%" y="1429" width="0.0706%" height="15" fill="rgb(216,60,49)" fg:x="3888" fg:w="4"/><text x="68.8335%" y="1439.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*, CTxOut&gt; (4 samples, 0.07%)</title><rect x="68.5835%" y="1413" width="0.0706%" height="15" fill="rgb(226,17,20)" fg:x="3888" fg:w="4"/><text x="68.8335%" y="1423.50"></text></g><g><title>void std::_Destroy&lt;CTxOut*&gt; (4 samples, 0.07%)</title><rect x="68.5835%" y="1397" width="0.0706%" height="15" fill="rgb(206,115,35)" fg:x="3888" fg:w="4"/><text x="68.8335%" y="1407.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxOut*&gt; (4 samples, 0.07%)</title><rect x="68.5835%" y="1381" width="0.0706%" height="15" fill="rgb(227,88,1)" fg:x="3888" fg:w="4"/><text x="68.8335%" y="1391.50"></text></g><g><title>void std::_Destroy&lt;CTxOut&gt; (3 samples, 0.05%)</title><rect x="68.6012%" y="1365" width="0.0529%" height="15" fill="rgb(230,222,24)" fg:x="3889" fg:w="3"/><text x="68.8512%" y="1375.50"></text></g><g><title>void std::destroy_at&lt;CTxOut&gt; (3 samples, 0.05%)</title><rect x="68.6012%" y="1349" width="0.0529%" height="15" fill="rgb(214,124,32)" fg:x="3889" fg:w="3"/><text x="68.8512%" y="1359.50"></text></g><g><title>CTxOut::~CTxOut (3 samples, 0.05%)</title><rect x="68.6012%" y="1333" width="0.0529%" height="15" fill="rgb(240,41,36)" fg:x="3889" fg:w="3"/><text x="68.8512%" y="1343.50"></text></g><g><title>CScript::~CScript (3 samples, 0.05%)</title><rect x="68.6012%" y="1317" width="0.0529%" height="15" fill="rgb(221,17,52)" fg:x="3889" fg:w="3"/><text x="68.8512%" y="1327.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (3 samples, 0.05%)</title><rect x="68.6012%" y="1301" width="0.0529%" height="15" fill="rgb(252,70,16)" fg:x="3889" fg:w="3"/><text x="68.8512%" y="1311.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="68.6364%" y="1285" width="0.0176%" height="15" fill="rgb(250,177,4)" fg:x="3891" fg:w="1"/><text x="68.8864%" y="1295.50"></text></g><g><title>b-scheduler (453 samples, 7.99%)</title><rect x="60.6809%" y="1525" width="7.9908%" height="15" fill="rgb(240,188,47)" fg:x="3440" fg:w="453"/><text x="60.9309%" y="1535.50">b-scheduler</text></g><g><title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="68.6541%" y="1509" width="0.0176%" height="15" fill="rgb(215,92,12)" fg:x="3892" fg:w="1"/><text x="68.9041%" y="1519.50"></text></g><g><title>b-scriptch.10 (4 samples, 0.07%)</title><rect x="68.6717%" y="1525" width="0.0706%" height="15" fill="rgb(242,110,29)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="68.6717%" y="1509" width="0.0706%" height="15" fill="rgb(208,211,26)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="68.6717%" y="1493" width="0.0706%" height="15" fill="rgb(244,147,6)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="68.6717%" y="1477" width="0.0706%" height="15" fill="rgb(211,130,42)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="68.6717%" y="1461" width="0.0706%" height="15" fill="rgb(220,63,1)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="68.6717%" y="1445" width="0.0706%" height="15" fill="rgb(241,212,30)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="68.6717%" y="1429" width="0.0706%" height="15" fill="rgb(233,153,17)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1413" width="0.0706%" height="15" fill="rgb(236,3,10)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1397" width="0.0706%" height="15" fill="rgb(232,41,21)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1381" width="0.0706%" height="15" fill="rgb(206,63,51)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1365" width="0.0706%" height="15" fill="rgb(250,214,3)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1349" width="0.0706%" height="15" fill="rgb(254,89,27)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1333" width="0.0706%" height="15" fill="rgb(249,41,14)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1317" width="0.0706%" height="15" fill="rgb(221,196,51)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1301" width="0.0706%" height="15" fill="rgb(214,116,26)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1285" width="0.0706%" height="15" fill="rgb(236,67,7)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1269" width="0.0706%" height="15" fill="rgb(253,179,32)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.6717%" y="1253" width="0.0706%" height="15" fill="rgb(218,33,15)" fg:x="3893" fg:w="4"/><text x="68.9217%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.6894%" y="1237" width="0.0529%" height="15" fill="rgb(217,202,41)" fg:x="3894" fg:w="3"/><text x="68.9394%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.6894%" y="1221" width="0.0529%" height="15" fill="rgb(234,133,5)" fg:x="3894" fg:w="3"/><text x="68.9394%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.6894%" y="1205" width="0.0529%" height="15" fill="rgb(240,47,40)" fg:x="3894" fg:w="3"/><text x="68.9394%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.6894%" y="1189" width="0.0529%" height="15" fill="rgb(234,166,26)" fg:x="3894" fg:w="3"/><text x="68.9394%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.6894%" y="1173" width="0.0529%" height="15" fill="rgb(244,125,51)" fg:x="3894" fg:w="3"/><text x="68.9394%" y="1183.50"></text></g><g><title>b-scriptch.11 (4 samples, 0.07%)</title><rect x="68.7423%" y="1525" width="0.0706%" height="15" fill="rgb(229,171,11)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="68.7423%" y="1509" width="0.0706%" height="15" fill="rgb(224,38,45)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="68.7423%" y="1493" width="0.0706%" height="15" fill="rgb(237,27,7)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="68.7423%" y="1477" width="0.0706%" height="15" fill="rgb(216,52,7)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="68.7423%" y="1461" width="0.0706%" height="15" fill="rgb(243,11,11)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="68.7423%" y="1445" width="0.0706%" height="15" fill="rgb(253,167,20)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="68.7423%" y="1429" width="0.0706%" height="15" fill="rgb(215,207,5)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1413" width="0.0706%" height="15" fill="rgb(252,127,31)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1397" width="0.0706%" height="15" fill="rgb(209,106,27)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1381" width="0.0706%" height="15" fill="rgb(214,220,18)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1365" width="0.0706%" height="15" fill="rgb(237,89,12)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1349" width="0.0706%" height="15" fill="rgb(209,167,36)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1333" width="0.0706%" height="15" fill="rgb(243,45,22)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1317" width="0.0706%" height="15" fill="rgb(239,2,46)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1301" width="0.0706%" height="15" fill="rgb(241,101,0)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1285" width="0.0706%" height="15" fill="rgb(244,34,31)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.7423%" y="1269" width="0.0706%" height="15" fill="rgb(248,23,22)" fg:x="3897" fg:w="4"/><text x="68.9923%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.7599%" y="1253" width="0.0529%" height="15" fill="rgb(218,27,48)" fg:x="3898" fg:w="3"/><text x="69.0099%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.7599%" y="1237" width="0.0529%" height="15" fill="rgb(232,78,1)" fg:x="3898" fg:w="3"/><text x="69.0099%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.7599%" y="1221" width="0.0529%" height="15" fill="rgb(233,169,12)" fg:x="3898" fg:w="3"/><text x="69.0099%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.7599%" y="1205" width="0.0529%" height="15" fill="rgb(225,222,54)" fg:x="3898" fg:w="3"/><text x="69.0099%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.7599%" y="1189" width="0.0529%" height="15" fill="rgb(245,126,29)" fg:x="3898" fg:w="3"/><text x="69.0099%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.7599%" y="1173" width="0.0529%" height="15" fill="rgb(241,63,48)" fg:x="3898" fg:w="3"/><text x="69.0099%" y="1183.50"></text></g><g><title>b-scriptch.12 (4 samples, 0.07%)</title><rect x="68.8128%" y="1525" width="0.0706%" height="15" fill="rgb(235,126,38)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="68.8128%" y="1509" width="0.0706%" height="15" fill="rgb(232,96,49)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="68.8128%" y="1493" width="0.0706%" height="15" fill="rgb(211,146,40)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="68.8128%" y="1477" width="0.0706%" height="15" fill="rgb(247,93,44)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="68.8128%" y="1461" width="0.0706%" height="15" fill="rgb(251,41,49)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="68.8128%" y="1445" width="0.0706%" height="15" fill="rgb(218,155,12)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="68.8128%" y="1429" width="0.0706%" height="15" fill="rgb(221,161,30)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1413" width="0.0706%" height="15" fill="rgb(221,179,11)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1397" width="0.0706%" height="15" fill="rgb(224,170,48)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1381" width="0.0706%" height="15" fill="rgb(223,117,5)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1365" width="0.0706%" height="15" fill="rgb(209,52,20)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1349" width="0.0706%" height="15" fill="rgb(209,19,41)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1333" width="0.0706%" height="15" fill="rgb(210,177,12)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1317" width="0.0706%" height="15" fill="rgb(211,159,37)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1301" width="0.0706%" height="15" fill="rgb(209,20,2)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1285" width="0.0706%" height="15" fill="rgb(244,3,46)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8128%" y="1269" width="0.0706%" height="15" fill="rgb(220,94,38)" fg:x="3901" fg:w="4"/><text x="69.0628%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8305%" y="1253" width="0.0529%" height="15" fill="rgb(253,14,31)" fg:x="3902" fg:w="3"/><text x="69.0805%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8305%" y="1237" width="0.0529%" height="15" fill="rgb(234,176,13)" fg:x="3902" fg:w="3"/><text x="69.0805%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8305%" y="1221" width="0.0529%" height="15" fill="rgb(218,62,25)" fg:x="3902" fg:w="3"/><text x="69.0805%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8305%" y="1205" width="0.0529%" height="15" fill="rgb(216,124,40)" fg:x="3902" fg:w="3"/><text x="69.0805%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8305%" y="1189" width="0.0529%" height="15" fill="rgb(228,170,12)" fg:x="3902" fg:w="3"/><text x="69.0805%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.8305%" y="1173" width="0.0529%" height="15" fill="rgb(231,226,5)" fg:x="3902" fg:w="3"/><text x="69.0805%" y="1183.50"></text></g><g><title>b-scriptch.14 (4 samples, 0.07%)</title><rect x="68.8834%" y="1525" width="0.0706%" height="15" fill="rgb(237,122,22)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="68.8834%" y="1509" width="0.0706%" height="15" fill="rgb(209,185,25)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="68.8834%" y="1493" width="0.0706%" height="15" fill="rgb(228,200,32)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="68.8834%" y="1477" width="0.0706%" height="15" fill="rgb(217,140,10)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="68.8834%" y="1461" width="0.0706%" height="15" fill="rgb(253,17,24)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="68.8834%" y="1445" width="0.0706%" height="15" fill="rgb(212,61,6)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="68.8834%" y="1429" width="0.0706%" height="15" fill="rgb(205,14,25)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8834%" y="1413" width="0.0706%" height="15" fill="rgb(232,69,41)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8834%" y="1397" width="0.0706%" height="15" fill="rgb(241,106,47)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8834%" y="1381" width="0.0706%" height="15" fill="rgb(210,213,53)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.8834%" y="1365" width="0.0706%" height="15" fill="rgb(253,175,27)" fg:x="3905" fg:w="4"/><text x="69.1334%" y="1375.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1349" width="0.0529%" height="15" fill="rgb(211,171,24)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1333" width="0.0529%" height="15" fill="rgb(229,80,7)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1317" width="0.0529%" height="15" fill="rgb(212,46,39)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1301" width="0.0529%" height="15" fill="rgb(240,80,45)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1285" width="0.0529%" height="15" fill="rgb(253,177,40)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1269" width="0.0529%" height="15" fill="rgb(249,200,15)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1253" width="0.0529%" height="15" fill="rgb(217,78,26)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1237" width="0.0529%" height="15" fill="rgb(254,151,32)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1221" width="0.0529%" height="15" fill="rgb(226,165,27)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1205" width="0.0529%" height="15" fill="rgb(250,206,4)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1189" width="0.0529%" height="15" fill="rgb(231,229,27)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9010%" y="1173" width="0.0529%" height="15" fill="rgb(239,217,8)" fg:x="3906" fg:w="3"/><text x="69.1510%" y="1183.50"></text></g><g><title>b-scriptch.7 (4 samples, 0.07%)</title><rect x="68.9540%" y="1525" width="0.0706%" height="15" fill="rgb(225,204,27)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="68.9540%" y="1509" width="0.0706%" height="15" fill="rgb(230,56,32)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="68.9540%" y="1493" width="0.0706%" height="15" fill="rgb(222,56,27)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="68.9540%" y="1477" width="0.0706%" height="15" fill="rgb(253,108,27)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="68.9540%" y="1461" width="0.0706%" height="15" fill="rgb(212,87,36)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="68.9540%" y="1445" width="0.0706%" height="15" fill="rgb(247,82,36)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="68.9540%" y="1429" width="0.0706%" height="15" fill="rgb(222,143,9)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1413" width="0.0706%" height="15" fill="rgb(238,162,48)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1397" width="0.0706%" height="15" fill="rgb(221,59,43)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1381" width="0.0706%" height="15" fill="rgb(205,166,41)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1365" width="0.0706%" height="15" fill="rgb(241,186,40)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1349" width="0.0706%" height="15" fill="rgb(216,119,35)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1333" width="0.0706%" height="15" fill="rgb(208,68,38)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1317" width="0.0706%" height="15" fill="rgb(217,113,1)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1301" width="0.0706%" height="15" fill="rgb(242,153,3)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1285" width="0.0706%" height="15" fill="rgb(229,76,35)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1269" width="0.0706%" height="15" fill="rgb(229,125,34)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="68.9540%" y="1253" width="0.0706%" height="15" fill="rgb(238,179,36)" fg:x="3909" fg:w="4"/><text x="69.2040%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9716%" y="1237" width="0.0529%" height="15" fill="rgb(244,183,19)" fg:x="3910" fg:w="3"/><text x="69.2216%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9716%" y="1221" width="0.0529%" height="15" fill="rgb(216,85,49)" fg:x="3910" fg:w="3"/><text x="69.2216%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="68.9716%" y="1205" width="0.0529%" height="15" fill="rgb(208,161,47)" fg:x="3910" fg:w="3"/><text x="69.2216%" y="1215.50"></text></g><g><title>b-scriptch.8 (4 samples, 0.07%)</title><rect x="69.0245%" y="1525" width="0.0706%" height="15" fill="rgb(233,210,18)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="69.0245%" y="1509" width="0.0706%" height="15" fill="rgb(205,104,42)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="69.0245%" y="1493" width="0.0706%" height="15" fill="rgb(248,90,43)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="69.0245%" y="1477" width="0.0706%" height="15" fill="rgb(206,198,11)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="69.0245%" y="1461" width="0.0706%" height="15" fill="rgb(239,165,27)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="69.0245%" y="1445" width="0.0706%" height="15" fill="rgb(246,44,32)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="69.0245%" y="1429" width="0.0706%" height="15" fill="rgb(252,65,42)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1413" width="0.0706%" height="15" fill="rgb(246,197,18)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1397" width="0.0706%" height="15" fill="rgb(216,192,4)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1381" width="0.0706%" height="15" fill="rgb(208,117,10)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1365" width="0.0706%" height="15" fill="rgb(240,61,47)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1349" width="0.0706%" height="15" fill="rgb(228,178,21)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1333" width="0.0706%" height="15" fill="rgb(219,96,54)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1317" width="0.0706%" height="15" fill="rgb(250,177,24)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1301" width="0.0706%" height="15" fill="rgb(242,154,46)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1285" width="0.0706%" height="15" fill="rgb(226,176,29)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1269" width="0.0706%" height="15" fill="rgb(226,29,2)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1253" width="0.0706%" height="15" fill="rgb(237,104,14)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1237" width="0.0706%" height="15" fill="rgb(245,207,31)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0245%" y="1221" width="0.0706%" height="15" fill="rgb(229,211,45)" fg:x="3913" fg:w="4"/><text x="69.2745%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.0422%" y="1205" width="0.0529%" height="15" fill="rgb(229,113,15)" fg:x="3914" fg:w="3"/><text x="69.2922%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.0422%" y="1189" width="0.0529%" height="15" fill="rgb(237,147,15)" fg:x="3914" fg:w="3"/><text x="69.2922%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="69.0422%" y="1173" width="0.0529%" height="15" fill="rgb(244,120,12)" fg:x="3914" fg:w="3"/><text x="69.2922%" y="1183.50"></text></g><g><title>b-scriptch.9 (4 samples, 0.07%)</title><rect x="69.0951%" y="1525" width="0.0706%" height="15" fill="rgb(205,120,12)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1535.50"></text></g><g><title>__clone (4 samples, 0.07%)</title><rect x="69.0951%" y="1509" width="0.0706%" height="15" fill="rgb(231,26,45)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1519.50"></text></g><g><title>start_thread (4 samples, 0.07%)</title><rect x="69.0951%" y="1493" width="0.0706%" height="15" fill="rgb(246,98,1)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1503.50"></text></g><g><title>execute_native_thread_routine (4 samples, 0.07%)</title><rect x="69.0951%" y="1477" width="0.0706%" height="15" fill="rgb(207,68,45)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1487.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 0.07%)</title><rect x="69.0951%" y="1461" width="0.0706%" height="15" fill="rgb(231,27,38)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1471.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 0.07%)</title><rect x="69.0951%" y="1445" width="0.0706%" height="15" fill="rgb(214,223,3)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1455.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="69.0951%" y="1429" width="0.0706%" height="15" fill="rgb(228,195,46)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1413" width="0.0706%" height="15" fill="rgb(231,100,42)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1397" width="0.0706%" height="15" fill="rgb(236,53,4)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1381" width="0.0706%" height="15" fill="rgb(230,152,12)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1365" width="0.0706%" height="15" fill="rgb(226,101,19)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1349" width="0.0706%" height="15" fill="rgb(250,149,32)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1333" width="0.0706%" height="15" fill="rgb(232,178,12)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1317" width="0.0706%" height="15" fill="rgb(246,151,17)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1301" width="0.0706%" height="15" fill="rgb(252,17,51)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1285" width="0.0706%" height="15" fill="rgb(250,207,23)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1269" width="0.0706%" height="15" fill="rgb(205,27,5)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1253" width="0.0706%" height="15" fill="rgb(224,32,19)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1237" width="0.0706%" height="15" fill="rgb(247,214,40)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="69.0951%" y="1221" width="0.0706%" height="15" fill="rgb(239,199,17)" fg:x="3917" fg:w="4"/><text x="69.3451%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.1480%" y="1205" width="0.0176%" height="15" fill="rgb(251,159,9)" fg:x="3920" fg:w="1"/><text x="69.3980%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.1480%" y="1189" width="0.0176%" height="15" fill="rgb(225,78,32)" fg:x="3920" fg:w="1"/><text x="69.3980%" y="1199.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="69.1656%" y="1493" width="0.0176%" height="15" fill="rgb(206,97,47)" fg:x="3921" fg:w="1"/><text x="69.4156%" y="1503.50"></text></g><g><title>[000546.ldb] (4 samples, 0.07%)</title><rect x="69.1656%" y="1509" width="0.0706%" height="15" fill="rgb(227,107,4)" fg:x="3921" fg:w="4"/><text x="69.4156%" y="1519.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.05%)</title><rect x="69.1833%" y="1493" width="0.0529%" height="15" fill="rgb(241,146,50)" fg:x="3922" fg:w="3"/><text x="69.4333%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.07%)</title><rect x="69.2362%" y="1493" width="0.0706%" height="15" fill="rgb(232,92,30)" fg:x="3925" fg:w="4"/><text x="69.4862%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="69.3068%" y="1493" width="0.0353%" height="15" fill="rgb(222,0,40)" fg:x="3929" fg:w="2"/><text x="69.5568%" y="1503.50"></text></g><g><title>_int_free (8 samples, 0.14%)</title><rect x="69.3420%" y="1493" width="0.1411%" height="15" fill="rgb(219,54,33)" fg:x="3931" fg:w="8"/><text x="69.5920%" y="1503.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="69.4832%" y="1493" width="0.0176%" height="15" fill="rgb(226,209,28)" fg:x="3939" fg:w="1"/><text x="69.7332%" y="1503.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.04%)</title><rect x="69.5008%" y="1493" width="0.0353%" height="15" fill="rgb(254,205,35)" fg:x="3940" fg:w="2"/><text x="69.7508%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="69.5361%" y="1493" width="0.0706%" height="15" fill="rgb(230,159,3)" fg:x="3942" fg:w="4"/><text x="69.7861%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.09%)</title><rect x="69.6066%" y="1493" width="0.0882%" height="15" fill="rgb(232,190,24)" fg:x="3946" fg:w="5"/><text x="69.8566%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="69.6948%" y="1493" width="0.0176%" height="15" fill="rgb(217,227,44)" fg:x="3951" fg:w="1"/><text x="69.9448%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (6 samples, 0.11%)</title><rect x="69.7125%" y="1493" width="0.1058%" height="15" fill="rgb(236,211,1)" fg:x="3952" fg:w="6"/><text x="69.9625%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="69.8183%" y="1493" width="0.0353%" height="15" fill="rgb(250,127,46)" fg:x="3958" fg:w="2"/><text x="70.0683%" y="1503.50"></text></g><g><title>malloc_consolidate (6 samples, 0.11%)</title><rect x="69.8536%" y="1493" width="0.1058%" height="15" fill="rgb(229,213,6)" fg:x="3960" fg:w="6"/><text x="70.1036%" y="1503.50"></text></g><g><title>[[heap]] (42 samples, 0.74%)</title><rect x="69.2362%" y="1509" width="0.7409%" height="15" fill="rgb(237,15,36)" fg:x="3925" fg:w="42"/><text x="69.4862%" y="1519.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="69.9594%" y="1493" width="0.0176%" height="15" fill="rgb(213,131,41)" fg:x="3966" fg:w="1"/><text x="70.2094%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (7 samples, 0.12%)</title><rect x="69.9771%" y="1493" width="0.1235%" height="15" fill="rgb(225,82,44)" fg:x="3967" fg:w="7"/><text x="70.2271%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7 samples, 0.12%)</title><rect x="70.1005%" y="1493" width="0.1235%" height="15" fill="rgb(249,42,11)" fg:x="3974" fg:w="7"/><text x="70.3505%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.16%)</title><rect x="70.2240%" y="1493" width="0.1588%" height="15" fill="rgb(253,11,29)" fg:x="3981" fg:w="9"/><text x="70.4740%" y="1503.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="70.3828%" y="1493" width="0.0176%" height="15" fill="rgb(206,8,54)" fg:x="3990" fg:w="1"/><text x="70.6328%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="70.4004%" y="1493" width="0.0353%" height="15" fill="rgb(222,186,2)" fg:x="3991" fg:w="2"/><text x="70.6504%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="70.4357%" y="1493" width="0.0176%" height="15" fill="rgb(221,206,53)" fg:x="3993" fg:w="1"/><text x="70.6857%" y="1503.50"></text></g><g><title>leveldb::VarintLength (2 samples, 0.04%)</title><rect x="70.4533%" y="1493" width="0.0353%" height="15" fill="rgb(230,150,21)" fg:x="3994" fg:w="2"/><text x="70.7033%" y="1503.50"></text></g><g><title>unlink_chunk.isra.0 (2 samples, 0.04%)</title><rect x="70.4886%" y="1493" width="0.0353%" height="15" fill="rgb(253,202,10)" fg:x="3996" fg:w="2"/><text x="70.7386%" y="1503.50"></text></g><g><title>[[stack]] (32 samples, 0.56%)</title><rect x="69.9771%" y="1509" width="0.5645%" height="15" fill="rgb(238,109,40)" fg:x="3967" fg:w="32"/><text x="70.2271%" y="1519.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="70.5239%" y="1493" width="0.0176%" height="15" fill="rgb(247,120,22)" fg:x="3998" fg:w="1"/><text x="70.7739%" y="1503.50"></text></g><g><title>__memset_avx512_unaligned (1 samples, 0.02%)</title><rect x="70.5415%" y="1493" width="0.0176%" height="15" fill="rgb(207,43,30)" fg:x="3999" fg:w="1"/><text x="70.7915%" y="1503.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="70.5592%" y="1493" width="0.0176%" height="15" fill="rgb(213,211,24)" fg:x="4000" fg:w="1"/><text x="70.8092%" y="1503.50"></text></g><g><title>leveldb::WriteBatchInternal::SetCount (1 samples, 0.02%)</title><rect x="70.5768%" y="1493" width="0.0176%" height="15" fill="rgb(239,73,39)" fg:x="4001" fg:w="1"/><text x="70.8268%" y="1503.50"></text></g><g><title>[anon] (4 samples, 0.07%)</title><rect x="70.5415%" y="1509" width="0.0706%" height="15" fill="rgb(245,182,19)" fg:x="3999" fg:w="4"/><text x="70.7915%" y="1519.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="70.5945%" y="1493" width="0.0176%" height="15" fill="rgb(247,143,26)" fg:x="4002" fg:w="1"/><text x="70.8445%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="70.6474%" y="1493" width="0.0706%" height="15" fill="rgb(228,191,23)" fg:x="4005" fg:w="4"/><text x="70.8974%" y="1503.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="70.6650%" y="1477" width="0.0529%" height="15" fill="rgb(253,165,31)" fg:x="4006" fg:w="3"/><text x="70.9150%" y="1487.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="70.6650%" y="1461" width="0.0529%" height="15" fill="rgb(234,138,20)" fg:x="4006" fg:w="3"/><text x="70.9150%" y="1471.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="70.6650%" y="1445" width="0.0529%" height="15" fill="rgb(218,191,29)" fg:x="4006" fg:w="3"/><text x="70.9150%" y="1455.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="70.6650%" y="1429" width="0.0529%" height="15" fill="rgb(221,157,19)" fg:x="4006" fg:w="3"/><text x="70.9150%" y="1439.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="70.6650%" y="1413" width="0.0529%" height="15" fill="rgb(237,26,42)" fg:x="4006" fg:w="3"/><text x="70.9150%" y="1423.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="70.6650%" y="1397" width="0.0529%" height="15" fill="rgb(220,163,24)" fg:x="4006" fg:w="3"/><text x="70.9150%" y="1407.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="70.6650%" y="1381" width="0.0529%" height="15" fill="rgb(242,115,20)" fg:x="4006" fg:w="3"/><text x="70.9150%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7003%" y="1365" width="0.0176%" height="15" fill="rgb(210,206,9)" fg:x="4008" fg:w="1"/><text x="70.9503%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7003%" y="1349" width="0.0176%" height="15" fill="rgb(208,71,17)" fg:x="4008" fg:w="1"/><text x="70.9503%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7003%" y="1333" width="0.0176%" height="15" fill="rgb(233,7,5)" fg:x="4008" fg:w="1"/><text x="70.9503%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.7003%" y="1317" width="0.0176%" height="15" fill="rgb(207,92,33)" fg:x="4008" fg:w="1"/><text x="70.9503%" y="1327.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.05%)</title><rect x="70.7179%" y="1493" width="0.0529%" height="15" fill="rgb(218,87,9)" fg:x="4009" fg:w="3"/><text x="70.9679%" y="1503.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="70.7709%" y="1493" width="0.0353%" height="15" fill="rgb(219,47,37)" fg:x="4012" fg:w="2"/><text x="71.0209%" y="1503.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.04%)</title><rect x="70.8061%" y="1493" width="0.0353%" height="15" fill="rgb(221,152,34)" fg:x="4014" fg:w="2"/><text x="71.0561%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (10 samples, 0.18%)</title><rect x="70.8414%" y="1493" width="0.1764%" height="15" fill="rgb(235,176,21)" fg:x="4016" fg:w="10"/><text x="71.0914%" y="1503.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="71.0178%" y="1493" width="0.0176%" height="15" fill="rgb(232,212,21)" fg:x="4026" fg:w="1"/><text x="71.2678%" y="1503.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.04%)</title><rect x="71.0355%" y="1493" width="0.0353%" height="15" fill="rgb(245,82,39)" fg:x="4027" fg:w="2"/><text x="71.2855%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.09%)</title><rect x="71.0707%" y="1493" width="0.0882%" height="15" fill="rgb(241,52,51)" fg:x="4029" fg:w="5"/><text x="71.3207%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="71.1589%" y="1493" width="0.0176%" height="15" fill="rgb(219,91,24)" fg:x="4034" fg:w="1"/><text x="71.4089%" y="1503.50"></text></g><g><title>memcmp@plt (1 samples, 0.02%)</title><rect x="71.1766%" y="1493" width="0.0176%" height="15" fill="rgb(241,142,12)" fg:x="4035" fg:w="1"/><text x="71.4266%" y="1503.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (2 samples, 0.04%)</title><rect x="71.1942%" y="1493" width="0.0353%" height="15" fill="rgb(230,27,9)" fg:x="4036" fg:w="2"/><text x="71.4442%" y="1503.50"></text></g><g><title>[unknown] (37 samples, 0.65%)</title><rect x="70.6121%" y="1509" width="0.6527%" height="15" fill="rgb(249,181,32)" fg:x="4003" fg:w="37"/><text x="70.8621%" y="1519.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.04%)</title><rect x="71.2295%" y="1493" width="0.0353%" height="15" fill="rgb(230,107,3)" fg:x="4038" fg:w="2"/><text x="71.4795%" y="1503.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::~PoolResource (14 samples, 0.25%)</title><rect x="71.2648%" y="1365" width="0.2470%" height="15" fill="rgb(246,204,14)" fg:x="4040" fg:w="14"/><text x="71.5148%" y="1375.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.25%)</title><rect x="71.2648%" y="1349" width="0.2470%" height="15" fill="rgb(213,192,47)" fg:x="4040" fg:w="14"/><text x="71.5148%" y="1359.50"></text></g><g><title>_int_free (14 samples, 0.25%)</title><rect x="71.2648%" y="1333" width="0.2470%" height="15" fill="rgb(240,44,36)" fg:x="4040" fg:w="14"/><text x="71.5148%" y="1343.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (14 samples, 0.25%)</title><rect x="71.2648%" y="1317" width="0.2470%" height="15" fill="rgb(244,209,38)" fg:x="4040" fg:w="14"/><text x="71.5148%" y="1327.50"></text></g><g><title>malloc_consolidate (14 samples, 0.25%)</title><rect x="71.2648%" y="1301" width="0.2470%" height="15" fill="rgb(219,34,37)" fg:x="4040" fg:w="14"/><text x="71.5148%" y="1311.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="71.4941%" y="1285" width="0.0176%" height="15" fill="rgb(210,28,6)" fg:x="4053" fg:w="1"/><text x="71.7441%" y="1295.50"></text></g><g><title>CCoinsViewCache::ReallocateCache (15 samples, 0.26%)</title><rect x="71.2648%" y="1381" width="0.2646%" height="15" fill="rgb(244,110,52)" fg:x="4040" fg:w="15"/><text x="71.5148%" y="1391.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::~unordered_map (1 samples, 0.02%)</title><rect x="71.5117%" y="1365" width="0.0176%" height="15" fill="rgb(254,124,47)" fg:x="4054" fg:w="1"/><text x="71.7617%" y="1375.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="71.5117%" y="1349" width="0.0176%" height="15" fill="rgb(254,110,13)" fg:x="4054" fg:w="1"/><text x="71.7617%" y="1359.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="71.5117%" y="1333" width="0.0176%" height="15" fill="rgb(252,57,21)" fg:x="4054" fg:w="1"/><text x="71.7617%" y="1343.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="71.5117%" y="1317" width="0.0176%" height="15" fill="rgb(242,60,45)" fg:x="4054" fg:w="1"/><text x="71.7617%" y="1327.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="71.5294%" y="1317" width="0.0176%" height="15" fill="rgb(234,49,30)" fg:x="4055" fg:w="1"/><text x="71.7794%" y="1327.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="71.5294%" y="1301" width="0.0176%" height="15" fill="rgb(218,98,6)" fg:x="4055" fg:w="1"/><text x="71.7794%" y="1311.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="71.5294%" y="1285" width="0.0176%" height="15" fill="rgb(220,174,29)" fg:x="4055" fg:w="1"/><text x="71.7794%" y="1295.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="71.5294%" y="1269" width="0.0176%" height="15" fill="rgb(236,163,23)" fg:x="4055" fg:w="1"/><text x="71.7794%" y="1279.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="71.5294%" y="1253" width="0.0176%" height="15" fill="rgb(242,114,45)" fg:x="4055" fg:w="1"/><text x="71.7794%" y="1263.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="71.5294%" y="1237" width="0.0176%" height="15" fill="rgb(232,10,53)" fg:x="4055" fg:w="1"/><text x="71.7794%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="71.5470%" y="1317" width="0.0176%" height="15" fill="rgb(245,108,29)" fg:x="4056" fg:w="1"/><text x="71.7970%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="71.5470%" y="1301" width="0.0176%" height="15" fill="rgb(240,89,53)" fg:x="4056" fg:w="1"/><text x="71.7970%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="71.5470%" y="1285" width="0.0176%" height="15" fill="rgb(226,60,45)" fg:x="4056" fg:w="1"/><text x="71.7970%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="71.5470%" y="1269" width="0.0176%" height="15" fill="rgb(230,41,44)" fg:x="4056" fg:w="1"/><text x="71.7970%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="71.5470%" y="1253" width="0.0176%" height="15" fill="rgb(230,26,20)" fg:x="4056" fg:w="1"/><text x="71.7970%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="71.5470%" y="1237" width="0.0176%" height="15" fill="rgb(237,170,32)" fg:x="4056" fg:w="1"/><text x="71.7970%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="71.5470%" y="1221" width="0.0176%" height="15" fill="rgb(212,35,42)" fg:x="4056" fg:w="1"/><text x="71.7970%" y="1231.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (3 samples, 0.05%)</title><rect x="71.5294%" y="1333" width="0.0529%" height="15" fill="rgb(227,31,34)" fg:x="4055" fg:w="3"/><text x="71.7794%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="71.5646%" y="1317" width="0.0176%" height="15" fill="rgb(216,19,18)" fg:x="4057" fg:w="1"/><text x="71.8146%" y="1327.50"></text></g><g><title>CDBBatch::EraseImpl (4 samples, 0.07%)</title><rect x="71.5294%" y="1349" width="0.0706%" height="15" fill="rgb(211,133,42)" fg:x="4055" fg:w="4"/><text x="71.7794%" y="1359.50"></text></g><g><title>leveldb::WriteBatch::Delete (1 samples, 0.02%)</title><rect x="71.5823%" y="1333" width="0.0176%" height="15" fill="rgb(244,66,13)" fg:x="4058" fg:w="1"/><text x="71.8323%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="71.5823%" y="1317" width="0.0176%" height="15" fill="rgb(218,185,50)" fg:x="4058" fg:w="1"/><text x="71.8323%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="71.5823%" y="1301" width="0.0176%" height="15" fill="rgb(219,149,13)" fg:x="4058" fg:w="1"/><text x="71.8323%" y="1311.50"></text></g><g><title>CDBBatch::WriteImpl (8 samples, 0.14%)</title><rect x="71.5999%" y="1333" width="0.1411%" height="15" fill="rgb(221,125,0)" fg:x="4059" fg:w="8"/><text x="71.8499%" y="1343.50"></text></g><g><title>DataStream::Xor (8 samples, 0.14%)</title><rect x="71.5999%" y="1317" width="0.1411%" height="15" fill="rgb(247,126,27)" fg:x="4059" fg:w="8"/><text x="71.8499%" y="1327.50"></text></g><g><title>util::Xor (8 samples, 0.14%)</title><rect x="71.5999%" y="1301" width="0.1411%" height="15" fill="rgb(250,138,30)" fg:x="4059" fg:w="8"/><text x="71.8499%" y="1311.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="71.7234%" y="1285" width="0.0176%" height="15" fill="rgb(230,151,9)" fg:x="4066" fg:w="1"/><text x="71.9734%" y="1295.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="71.7234%" y="1269" width="0.0176%" height="15" fill="rgb(233,80,38)" fg:x="4066" fg:w="1"/><text x="71.9734%" y="1279.50"></text></g><g><title>Span&lt;std::byte&gt; MakeWritableByteSpan&lt;DataStream&amp;&gt; (1 samples, 0.02%)</title><rect x="71.7587%" y="1285" width="0.0176%" height="15" fill="rgb(232,68,43)" fg:x="4068" fg:w="1"/><text x="72.0087%" y="1295.50"></text></g><g><title>Span&lt;std::byte&gt;::Span&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="71.7587%" y="1269" width="0.0176%" height="15" fill="rgb(254,5,50)" fg:x="4068" fg:w="1"/><text x="72.0087%" y="1279.50"></text></g><g><title>DataStream::data (1 samples, 0.02%)</title><rect x="71.7587%" y="1253" width="0.0176%" height="15" fill="rgb(225,45,5)" fg:x="4068" fg:w="1"/><text x="72.0087%" y="1263.50"></text></g><g><title>CDBBatch::WriteImpl (4 samples, 0.07%)</title><rect x="71.7410%" y="1317" width="0.0706%" height="15" fill="rgb(239,22,3)" fg:x="4067" fg:w="4"/><text x="71.9910%" y="1327.50"></text></g><g><title>DataStream::Xor (3 samples, 0.05%)</title><rect x="71.7587%" y="1301" width="0.0529%" height="15" fill="rgb(243,129,0)" fg:x="4068" fg:w="3"/><text x="72.0087%" y="1311.50"></text></g><g><title>util::Xor (2 samples, 0.04%)</title><rect x="71.7763%" y="1285" width="0.0353%" height="15" fill="rgb(223,164,0)" fg:x="4069" fg:w="2"/><text x="72.0263%" y="1295.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="71.7940%" y="1269" width="0.0176%" height="15" fill="rgb(221,46,29)" fg:x="4070" fg:w="1"/><text x="72.0440%" y="1279.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="71.7940%" y="1253" width="0.0176%" height="15" fill="rgb(205,97,47)" fg:x="4070" fg:w="1"/><text x="72.0440%" y="1263.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="71.8116%" y="1317" width="0.0176%" height="15" fill="rgb(249,14,8)" fg:x="4071" fg:w="1"/><text x="72.0616%" y="1327.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.02%)</title><rect x="71.8116%" y="1301" width="0.0176%" height="15" fill="rgb(216,77,3)" fg:x="4071" fg:w="1"/><text x="72.0616%" y="1311.50"></text></g><g><title>DataStream::size (1 samples, 0.02%)</title><rect x="71.8116%" y="1285" width="0.0176%" height="15" fill="rgb(206,168,54)" fg:x="4071" fg:w="1"/><text x="72.0616%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Put (1 samples, 0.02%)</title><rect x="71.8292%" y="1317" width="0.0176%" height="15" fill="rgb(236,3,41)" fg:x="4072" fg:w="1"/><text x="72.0792%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.05%)</title><rect x="71.8469%" y="1285" width="0.0529%" height="15" fill="rgb(231,132,24)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="71.8469%" y="1269" width="0.0529%" height="15" fill="rgb(227,221,40)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="71.8469%" y="1253" width="0.0529%" height="15" fill="rgb(233,151,11)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="71.8469%" y="1237" width="0.0529%" height="15" fill="rgb(247,81,35)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="71.8469%" y="1221" width="0.0529%" height="15" fill="rgb(243,128,48)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8469%" y="1205" width="0.0529%" height="15" fill="rgb(253,16,10)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8469%" y="1189" width="0.0529%" height="15" fill="rgb(228,67,27)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8469%" y="1173" width="0.0529%" height="15" fill="rgb(231,105,25)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8469%" y="1157" width="0.0529%" height="15" fill="rgb(213,166,47)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="71.8469%" y="1141" width="0.0529%" height="15" fill="rgb(209,27,10)" fg:x="4073" fg:w="3"/><text x="72.0969%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.8645%" y="1125" width="0.0353%" height="15" fill="rgb(241,44,30)" fg:x="4074" fg:w="2"/><text x="72.1145%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.8645%" y="1109" width="0.0353%" height="15" fill="rgb(223,216,15)" fg:x="4074" fg:w="2"/><text x="72.1145%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="71.8645%" y="1093" width="0.0353%" height="15" fill="rgb(227,14,7)" fg:x="4074" fg:w="2"/><text x="72.1145%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8822%" y="1077" width="0.0176%" height="15" fill="rgb(237,14,5)" fg:x="4075" fg:w="1"/><text x="72.1322%" y="1087.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (10 samples, 0.18%)</title><rect x="71.7410%" y="1333" width="0.1764%" height="15" fill="rgb(232,14,36)" fg:x="4067" fg:w="10"/><text x="71.9910%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4 samples, 0.07%)</title><rect x="71.8469%" y="1317" width="0.0706%" height="15" fill="rgb(234,0,38)" fg:x="4073" fg:w="4"/><text x="72.0969%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.07%)</title><rect x="71.8469%" y="1301" width="0.0706%" height="15" fill="rgb(207,170,14)" fg:x="4073" fg:w="4"/><text x="72.0969%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="71.8998%" y="1285" width="0.0176%" height="15" fill="rgb(252,45,13)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="71.8998%" y="1269" width="0.0176%" height="15" fill="rgb(213,142,7)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1279.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="71.8998%" y="1253" width="0.0176%" height="15" fill="rgb(216,157,23)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1263.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="71.8998%" y="1237" width="0.0176%" height="15" fill="rgb(212,145,33)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1221" width="0.0176%" height="15" fill="rgb(233,26,13)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1205" width="0.0176%" height="15" fill="rgb(219,196,19)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1189" width="0.0176%" height="15" fill="rgb(246,56,21)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1173" width="0.0176%" height="15" fill="rgb(222,28,53)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1157" width="0.0176%" height="15" fill="rgb(224,5,27)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1141" width="0.0176%" height="15" fill="rgb(220,153,33)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1125" width="0.0176%" height="15" fill="rgb(226,58,19)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.8998%" y="1109" width="0.0176%" height="15" fill="rgb(239,112,23)" fg:x="4076" fg:w="1"/><text x="72.1498%" y="1119.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.04%)</title><rect x="71.9174%" y="1301" width="0.0353%" height="15" fill="rgb(251,213,20)" fg:x="4077" fg:w="2"/><text x="72.1674%" y="1311.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.04%)</title><rect x="71.9174%" y="1285" width="0.0353%" height="15" fill="rgb(215,181,21)" fg:x="4077" fg:w="2"/><text x="72.1674%" y="1295.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.04%)</title><rect x="71.9174%" y="1269" width="0.0353%" height="15" fill="rgb(240,8,35)" fg:x="4077" fg:w="2"/><text x="72.1674%" y="1279.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="71.9351%" y="1253" width="0.0176%" height="15" fill="rgb(232,203,3)" fg:x="4078" fg:w="1"/><text x="72.1851%" y="1263.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="71.9351%" y="1237" width="0.0176%" height="15" fill="rgb(214,202,43)" fg:x="4078" fg:w="1"/><text x="72.1851%" y="1247.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="71.9351%" y="1221" width="0.0176%" height="15" fill="rgb(254,35,11)" fg:x="4078" fg:w="1"/><text x="72.1851%" y="1231.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (3 samples, 0.05%)</title><rect x="71.9174%" y="1317" width="0.0529%" height="15" fill="rgb(239,173,13)" fg:x="4077" fg:w="3"/><text x="72.1674%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="71.9527%" y="1301" width="0.0176%" height="15" fill="rgb(220,141,0)" fg:x="4079" fg:w="1"/><text x="72.2027%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="71.9527%" y="1285" width="0.0176%" height="15" fill="rgb(210,98,12)" fg:x="4079" fg:w="1"/><text x="72.2027%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="71.9527%" y="1269" width="0.0176%" height="15" fill="rgb(254,153,22)" fg:x="4079" fg:w="1"/><text x="72.2027%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="71.9527%" y="1253" width="0.0176%" height="15" fill="rgb(247,223,17)" fg:x="4079" fg:w="1"/><text x="72.2027%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="71.9527%" y="1237" width="0.0176%" height="15" fill="rgb(246,56,7)" fg:x="4079" fg:w="1"/><text x="72.2027%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="71.9527%" y="1221" width="0.0176%" height="15" fill="rgb(240,226,12)" fg:x="4079" fg:w="1"/><text x="72.2027%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="71.9527%" y="1205" width="0.0176%" height="15" fill="rgb(205,87,46)" fg:x="4079" fg:w="1"/><text x="72.2027%" y="1215.50"></text></g><g><title>leveldb::WriteBatch::Put (6 samples, 0.11%)</title><rect x="71.9174%" y="1333" width="0.1058%" height="15" fill="rgb(245,214,51)" fg:x="4077" fg:w="6"/><text x="72.1674%" y="1343.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.05%)</title><rect x="71.9704%" y="1317" width="0.0529%" height="15" fill="rgb(223,172,33)" fg:x="4080" fg:w="3"/><text x="72.2204%" y="1327.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (3 samples, 0.05%)</title><rect x="71.9704%" y="1301" width="0.0529%" height="15" fill="rgb(227,203,34)" fg:x="4080" fg:w="3"/><text x="72.2204%" y="1311.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="72.0056%" y="1285" width="0.0176%" height="15" fill="rgb(248,143,44)" fg:x="4082" fg:w="1"/><text x="72.2556%" y="1295.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="72.0056%" y="1269" width="0.0176%" height="15" fill="rgb(226,162,5)" fg:x="4082" fg:w="1"/><text x="72.2556%" y="1279.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="72.0056%" y="1253" width="0.0176%" height="15" fill="rgb(211,143,1)" fg:x="4082" fg:w="1"/><text x="72.2556%" y="1263.50"></text></g><g><title>leveldb::WriteBatchInternal::Count (1 samples, 0.02%)</title><rect x="72.0233%" y="1333" width="0.0176%" height="15" fill="rgb(224,96,15)" fg:x="4083" fg:w="1"/><text x="72.2733%" y="1343.50"></text></g><g><title>CDBBatch::WriteImpl (26 samples, 0.46%)</title><rect x="71.5999%" y="1349" width="0.4586%" height="15" fill="rgb(222,4,38)" fg:x="4059" fg:w="26"/><text x="71.8499%" y="1359.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="72.0409%" y="1333" width="0.0176%" height="15" fill="rgb(253,228,15)" fg:x="4084" fg:w="1"/><text x="72.2909%" y="1343.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="72.0409%" y="1317" width="0.0176%" height="15" fill="rgb(242,194,12)" fg:x="4084" fg:w="1"/><text x="72.2909%" y="1327.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="72.0409%" y="1301" width="0.0176%" height="15" fill="rgb(214,177,31)" fg:x="4084" fg:w="1"/><text x="72.2909%" y="1311.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="72.0409%" y="1285" width="0.0176%" height="15" fill="rgb(226,58,51)" fg:x="4084" fg:w="1"/><text x="72.2909%" y="1295.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="72.0409%" y="1269" width="0.0176%" height="15" fill="rgb(250,119,16)" fg:x="4084" fg:w="1"/><text x="72.2909%" y="1279.50"></text></g><g><title>CCoinsViewDB::BatchWrite (45 samples, 0.79%)</title><rect x="71.5294%" y="1365" width="0.7938%" height="15" fill="rgb(223,128,53)" fg:x="4055" fg:w="45"/><text x="71.7794%" y="1375.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (15 samples, 0.26%)</title><rect x="72.0586%" y="1349" width="0.2646%" height="15" fill="rgb(251,199,15)" fg:x="4085" fg:w="15"/><text x="72.3086%" y="1359.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (15 samples, 0.26%)</title><rect x="72.0586%" y="1333" width="0.2646%" height="15" fill="rgb(235,168,42)" fg:x="4085" fg:w="15"/><text x="72.3086%" y="1343.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="72.3055%" y="1317" width="0.0176%" height="15" fill="rgb(250,210,17)" fg:x="4099" fg:w="1"/><text x="72.5555%" y="1327.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="72.3055%" y="1301" width="0.0176%" height="15" fill="rgb(226,36,41)" fg:x="4099" fg:w="1"/><text x="72.5555%" y="1311.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="72.3055%" y="1285" width="0.0176%" height="15" fill="rgb(225,87,10)" fg:x="4099" fg:w="1"/><text x="72.5555%" y="1295.50"></text></g><g><title>CDBBatch::~CDBBatch (1 samples, 0.02%)</title><rect x="72.3232%" y="1365" width="0.0176%" height="15" fill="rgb(228,83,9)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1375.50"></text></g><g><title>std::unique_ptr&lt;CDBBatch::WriteBatchImpl, std::default_delete&lt;CDBBatch::WriteBatchImpl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="72.3232%" y="1349" width="0.0176%" height="15" fill="rgb(225,16,36)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1359.50"></text></g><g><title>std::default_delete&lt;CDBBatch::WriteBatchImpl&gt;::operator (1 samples, 0.02%)</title><rect x="72.3232%" y="1333" width="0.0176%" height="15" fill="rgb(242,198,13)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1343.50"></text></g><g><title>std::default_delete&lt;CDBBatch::WriteBatchImpl&gt;::operator (1 samples, 0.02%)</title><rect x="72.3232%" y="1317" width="0.0176%" height="15" fill="rgb(239,25,51)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1327.50"></text></g><g><title>CDBBatch::WriteBatchImpl::~WriteBatchImpl (1 samples, 0.02%)</title><rect x="72.3232%" y="1301" width="0.0176%" height="15" fill="rgb(239,28,37)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1311.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="72.3232%" y="1285" width="0.0176%" height="15" fill="rgb(234,70,17)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1295.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="72.3232%" y="1269" width="0.0176%" height="15" fill="rgb(231,215,53)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1253" width="0.0176%" height="15" fill="rgb(218,140,42)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1237" width="0.0176%" height="15" fill="rgb(233,227,45)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1221" width="0.0176%" height="15" fill="rgb(225,189,21)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1205" width="0.0176%" height="15" fill="rgb(237,176,54)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1189" width="0.0176%" height="15" fill="rgb(215,131,46)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1173" width="0.0176%" height="15" fill="rgb(218,95,20)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1157" width="0.0176%" height="15" fill="rgb(208,198,12)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1141" width="0.0176%" height="15" fill="rgb(239,107,50)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1125" width="0.0176%" height="15" fill="rgb(240,217,37)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1109" width="0.0176%" height="15" fill="rgb(242,197,49)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1093" width="0.0176%" height="15" fill="rgb(219,171,17)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1077" width="0.0176%" height="15" fill="rgb(209,81,40)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1061" width="0.0176%" height="15" fill="rgb(237,156,30)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.3232%" y="1045" width="0.0176%" height="15" fill="rgb(212,127,16)" fg:x="4100" fg:w="1"/><text x="72.5732%" y="1055.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="72.3408%" y="1317" width="0.0176%" height="15" fill="rgb(226,66,32)" fg:x="4101" fg:w="1"/><text x="72.5908%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.09%)</title><rect x="72.3584%" y="1285" width="0.0882%" height="15" fill="rgb(245,22,46)" fg:x="4102" fg:w="5"/><text x="72.6084%" y="1295.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="72.4466%" y="1285" width="0.0176%" height="15" fill="rgb(210,112,21)" fg:x="4107" fg:w="1"/><text x="72.6966%" y="1295.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="72.4466%" y="1269" width="0.0176%" height="15" fill="rgb(207,118,39)" fg:x="4107" fg:w="1"/><text x="72.6966%" y="1279.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="72.4466%" y="1253" width="0.0176%" height="15" fill="rgb(205,206,35)" fg:x="4107" fg:w="1"/><text x="72.6966%" y="1263.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (8 samples, 0.14%)</title><rect x="72.3584%" y="1301" width="0.1411%" height="15" fill="rgb(222,120,2)" fg:x="4102" fg:w="8"/><text x="72.6084%" y="1311.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (2 samples, 0.04%)</title><rect x="72.4643%" y="1285" width="0.0353%" height="15" fill="rgb(205,38,18)" fg:x="4108" fg:w="2"/><text x="72.7143%" y="1295.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (1 samples, 0.02%)</title><rect x="72.4819%" y="1269" width="0.0176%" height="15" fill="rgb(226,61,2)" fg:x="4109" fg:w="1"/><text x="72.7319%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="72.4996%" y="1301" width="0.0176%" height="15" fill="rgb(242,161,23)" fg:x="4110" fg:w="1"/><text x="72.7496%" y="1311.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.04%)</title><rect x="72.5172%" y="1301" width="0.0353%" height="15" fill="rgb(213,13,52)" fg:x="4111" fg:w="2"/><text x="72.7672%" y="1311.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="72.5525%" y="1285" width="0.0176%" height="15" fill="rgb(246,209,47)" fg:x="4113" fg:w="1"/><text x="72.8025%" y="1295.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="72.5878%" y="1157" width="0.1764%" height="15" fill="rgb(214,41,3)" fg:x="4115" fg:w="10"/><text x="72.8378%" y="1167.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="72.5878%" y="1141" width="0.1764%" height="15" fill="rgb(236,119,38)" fg:x="4115" fg:w="10"/><text x="72.8378%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="72.6054%" y="1125" width="0.1588%" height="15" fill="rgb(218,50,11)" fg:x="4116" fg:w="9"/><text x="72.8554%" y="1135.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="72.6054%" y="1109" width="0.1588%" height="15" fill="rgb(228,38,11)" fg:x="4116" fg:w="9"/><text x="72.8554%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="72.6230%" y="1093" width="0.1411%" height="15" fill="rgb(212,13,9)" fg:x="4117" fg:w="8"/><text x="72.8730%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="72.6583%" y="1077" width="0.1058%" height="15" fill="rgb(208,211,9)" fg:x="4119" fg:w="6"/><text x="72.9083%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="72.6760%" y="1061" width="0.0882%" height="15" fill="rgb(239,39,32)" fg:x="4120" fg:w="5"/><text x="72.9260%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="72.7289%" y="1045" width="0.0353%" height="15" fill="rgb(254,179,26)" fg:x="4123" fg:w="2"/><text x="72.9789%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="72.7289%" y="1029" width="0.0353%" height="15" fill="rgb(249,165,28)" fg:x="4123" fg:w="2"/><text x="72.9789%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="72.7289%" y="1013" width="0.0353%" height="15" fill="rgb(225,59,50)" fg:x="4123" fg:w="2"/><text x="72.9789%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="72.7289%" y="997" width="0.0353%" height="15" fill="rgb(209,122,5)" fg:x="4123" fg:w="2"/><text x="72.9789%" y="1007.50"></text></g><g><title>leveldb::Arena::Allocate (11 samples, 0.19%)</title><rect x="72.5878%" y="1269" width="0.1940%" height="15" fill="rgb(214,65,34)" fg:x="4115" fg:w="11"/><text x="72.8378%" y="1279.50"></text></g><g><title>leveldb::Arena::AllocateFallback (11 samples, 0.19%)</title><rect x="72.5878%" y="1253" width="0.1940%" height="15" fill="rgb(249,183,32)" fg:x="4115" fg:w="11"/><text x="72.8378%" y="1263.50"></text></g><g><title>leveldb::Arena::AllocateFallback (11 samples, 0.19%)</title><rect x="72.5878%" y="1237" width="0.1940%" height="15" fill="rgb(218,122,24)" fg:x="4115" fg:w="11"/><text x="72.8378%" y="1247.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (11 samples, 0.19%)</title><rect x="72.5878%" y="1221" width="0.1940%" height="15" fill="rgb(224,109,18)" fg:x="4115" fg:w="11"/><text x="72.8378%" y="1231.50"></text></g><g><title>operator new (11 samples, 0.19%)</title><rect x="72.5878%" y="1205" width="0.1940%" height="15" fill="rgb(210,68,50)" fg:x="4115" fg:w="11"/><text x="72.8378%" y="1215.50"></text></g><g><title>malloc (11 samples, 0.19%)</title><rect x="72.5878%" y="1189" width="0.1940%" height="15" fill="rgb(212,184,34)" fg:x="4115" fg:w="11"/><text x="72.8378%" y="1199.50"></text></g><g><title>_int_malloc (11 samples, 0.19%)</title><rect x="72.5878%" y="1173" width="0.1940%" height="15" fill="rgb(238,105,48)" fg:x="4115" fg:w="11"/><text x="72.8378%" y="1183.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="72.7642%" y="1157" width="0.0176%" height="15" fill="rgb(222,134,54)" fg:x="4125" fg:w="1"/><text x="73.0142%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.7642%" y="1141" width="0.0176%" height="15" fill="rgb(246,24,43)" fg:x="4125" fg:w="1"/><text x="73.0142%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="72.7642%" y="1125" width="0.0176%" height="15" fill="rgb(227,169,22)" fg:x="4125" fg:w="1"/><text x="73.0142%" y="1135.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="72.7818%" y="1269" width="0.0176%" height="15" fill="rgb(253,152,4)" fg:x="4126" fg:w="1"/><text x="73.0318%" y="1279.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 0.07%)</title><rect x="72.7994%" y="1269" width="0.0706%" height="15" fill="rgb(219,158,36)" fg:x="4127" fg:w="4"/><text x="73.0494%" y="1279.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="72.8524%" y="1253" width="0.0176%" height="15" fill="rgb(251,128,40)" fg:x="4130" fg:w="1"/><text x="73.1024%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="72.8700%" y="1253" width="0.0529%" height="15" fill="rgb(254,101,39)" fg:x="4131" fg:w="3"/><text x="73.1200%" y="1263.50"></text></g><g><title>leveldb::GetVarint32 (1 samples, 0.02%)</title><rect x="72.9229%" y="1253" width="0.0176%" height="15" fill="rgb(221,168,40)" fg:x="4134" fg:w="1"/><text x="73.1729%" y="1263.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.16%)</title><rect x="72.9406%" y="1253" width="0.1588%" height="15" fill="rgb(221,14,27)" fg:x="4135" fg:w="9"/><text x="73.1906%" y="1263.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="73.0817%" y="1237" width="0.0176%" height="15" fill="rgb(207,36,43)" fg:x="4143" fg:w="1"/><text x="73.3317%" y="1247.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="73.0817%" y="1221" width="0.0176%" height="15" fill="rgb(240,172,53)" fg:x="4143" fg:w="1"/><text x="73.3317%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (30 samples, 0.53%)</title><rect x="74.1577%" y="1237" width="0.5292%" height="15" fill="rgb(241,138,43)" fg:x="4204" fg:w="30"/><text x="74.4077%" y="1247.50"></text></g><g><title>leveldb::GetVarint32Ptr (27 samples, 0.48%)</title><rect x="74.2106%" y="1221" width="0.4763%" height="15" fill="rgb(227,78,19)" fg:x="4207" fg:w="27"/><text x="74.4606%" y="1231.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (92 samples, 1.62%)</title><rect x="73.0993%" y="1253" width="1.6229%" height="15" fill="rgb(215,127,44)" fg:x="4144" fg:w="92"/><text x="73.3493%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="74.6869%" y="1237" width="0.0353%" height="15" fill="rgb(227,13,10)" fg:x="4234" fg:w="2"/><text x="74.9369%" y="1247.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="74.7398%" y="1221" width="0.0176%" height="15" fill="rgb(249,177,6)" fg:x="4237" fg:w="1"/><text x="74.9898%" y="1231.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="74.7398%" y="1205" width="0.0176%" height="15" fill="rgb(215,154,26)" fg:x="4237" fg:w="1"/><text x="74.9898%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="74.7575%" y="1221" width="0.0176%" height="15" fill="rgb(250,168,20)" fg:x="4238" fg:w="1"/><text x="75.0075%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="74.7927%" y="1205" width="0.0353%" height="15" fill="rgb(222,53,38)" fg:x="4240" fg:w="2"/><text x="75.0427%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.05%)</title><rect x="74.8280%" y="1205" width="0.0529%" height="15" fill="rgb(245,154,5)" fg:x="4242" fg:w="3"/><text x="75.0780%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.14%)</title><rect x="74.7751%" y="1221" width="0.1411%" height="15" fill="rgb(214,89,50)" fg:x="4239" fg:w="8"/><text x="75.0251%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.04%)</title><rect x="74.8809%" y="1205" width="0.0353%" height="15" fill="rgb(232,73,14)" fg:x="4245" fg:w="2"/><text x="75.1309%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="74.8986%" y="1189" width="0.0176%" height="15" fill="rgb(230,101,20)" fg:x="4246" fg:w="1"/><text x="75.1486%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (17 samples, 0.30%)</title><rect x="74.7222%" y="1253" width="0.2999%" height="15" fill="rgb(208,56,28)" fg:x="4236" fg:w="17"/><text x="74.9722%" y="1263.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (17 samples, 0.30%)</title><rect x="74.7222%" y="1237" width="0.2999%" height="15" fill="rgb(247,205,22)" fg:x="4236" fg:w="17"/><text x="74.9722%" y="1247.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.11%)</title><rect x="74.9162%" y="1221" width="0.1058%" height="15" fill="rgb(252,109,51)" fg:x="4247" fg:w="6"/><text x="75.1662%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="74.9868%" y="1205" width="0.0353%" height="15" fill="rgb(220,40,24)" fg:x="4251" fg:w="2"/><text x="75.2368%" y="1215.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.04%)</title><rect x="74.9868%" y="1189" width="0.0353%" height="15" fill="rgb(251,108,7)" fg:x="4251" fg:w="2"/><text x="75.2368%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="75.0750%" y="1221" width="0.0353%" height="15" fill="rgb(238,102,51)" fg:x="4256" fg:w="2"/><text x="75.3250%" y="1231.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="75.0926%" y="1205" width="0.0176%" height="15" fill="rgb(219,149,34)" fg:x="4257" fg:w="1"/><text x="75.3426%" y="1215.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="75.1102%" y="1221" width="0.0353%" height="15" fill="rgb(239,70,0)" fg:x="4258" fg:w="2"/><text x="75.3602%" y="1231.50"></text></g><g><title>GetLengthPrefixedSlice (20 samples, 0.35%)</title><rect x="75.5336%" y="1205" width="0.3528%" height="15" fill="rgb(246,214,23)" fg:x="4282" fg:w="20"/><text x="75.7836%" y="1215.50"></text></g><g><title>leveldb::GetVarint32Ptr (14 samples, 0.25%)</title><rect x="75.6394%" y="1189" width="0.2470%" height="15" fill="rgb(239,221,51)" fg:x="4288" fg:w="14"/><text x="75.8894%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (12 samples, 0.21%)</title><rect x="75.8864%" y="1205" width="0.2117%" height="15" fill="rgb(254,62,14)" fg:x="4302" fg:w="12"/><text x="76.1364%" y="1215.50"></text></g><g><title>leveldb::Slice::compare (5 samples, 0.09%)</title><rect x="76.0099%" y="1189" width="0.0882%" height="15" fill="rgb(253,57,33)" fg:x="4309" fg:w="5"/><text x="76.2599%" y="1199.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.04%)</title><rect x="76.0981%" y="1205" width="0.0353%" height="15" fill="rgb(229,34,6)" fg:x="4314" fg:w="2"/><text x="76.3481%" y="1215.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.04%)</title><rect x="76.7331%" y="1157" width="0.0353%" height="15" fill="rgb(235,191,23)" fg:x="4350" fg:w="2"/><text x="76.9831%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="76.7331%" y="1141" width="0.0353%" height="15" fill="rgb(217,207,27)" fg:x="4350" fg:w="2"/><text x="76.9831%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="76.7331%" y="1125" width="0.0353%" height="15" fill="rgb(232,41,44)" fg:x="4350" fg:w="2"/><text x="76.9831%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="76.7331%" y="1109" width="0.0353%" height="15" fill="rgb(221,188,19)" fg:x="4350" fg:w="2"/><text x="76.9831%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="76.7331%" y="1093" width="0.0353%" height="15" fill="rgb(245,180,45)" fg:x="4350" fg:w="2"/><text x="76.9831%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.7507%" y="1077" width="0.0176%" height="15" fill="rgb(250,220,42)" fg:x="4351" fg:w="1"/><text x="77.0007%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="76.7507%" y="1061" width="0.0176%" height="15" fill="rgb(234,16,34)" fg:x="4351" fg:w="1"/><text x="77.0007%" y="1071.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="76.7684%" y="1157" width="0.0353%" height="15" fill="rgb(233,217,23)" fg:x="4352" fg:w="2"/><text x="77.0184%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (31 samples, 0.55%)</title><rect x="76.2921%" y="1189" width="0.5468%" height="15" fill="rgb(209,22,46)" fg:x="4325" fg:w="31"/><text x="76.5421%" y="1199.50"></text></g><g><title>leveldb::Slice::compare (19 samples, 0.34%)</title><rect x="76.5038%" y="1173" width="0.3352%" height="15" fill="rgb(213,101,18)" fg:x="4337" fg:w="19"/><text x="76.7538%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="76.8037%" y="1157" width="0.0353%" height="15" fill="rgb(215,179,52)" fg:x="4354" fg:w="2"/><text x="77.0537%" y="1167.50"></text></g><g><title>leveldb::ExtractUserKey (2 samples, 0.04%)</title><rect x="76.8389%" y="1189" width="0.0353%" height="15" fill="rgb(223,50,25)" fg:x="4356" fg:w="2"/><text x="77.0889%" y="1199.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="76.8566%" y="1173" width="0.0176%" height="15" fill="rgb(224,51,44)" fg:x="4357" fg:w="1"/><text x="77.1066%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (22 samples, 0.39%)</title><rect x="76.8742%" y="1189" width="0.3881%" height="15" fill="rgb(224,13,54)" fg:x="4358" fg:w="22"/><text x="77.1242%" y="1199.50"></text></g><g><title>leveldb::ExtractUserKey (7 samples, 0.12%)</title><rect x="77.1388%" y="1173" width="0.1235%" height="15" fill="rgb(219,58,47)" fg:x="4373" fg:w="7"/><text x="77.3888%" y="1183.50"></text></g><g><title>GetLengthPrefixedSlice (16 samples, 0.28%)</title><rect x="78.0208%" y="1173" width="0.2822%" height="15" fill="rgb(246,124,34)" fg:x="4423" fg:w="16"/><text x="78.2708%" y="1183.50"></text></g><g><title>leveldb::GetVarint32Ptr (13 samples, 0.23%)</title><rect x="78.0737%" y="1157" width="0.2293%" height="15" fill="rgb(245,109,25)" fg:x="4426" fg:w="13"/><text x="78.3237%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (60 samples, 1.06%)</title><rect x="77.2623%" y="1189" width="1.0584%" height="15" fill="rgb(235,48,23)" fg:x="4380" fg:w="60"/><text x="77.5123%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="78.3031%" y="1173" width="0.0176%" height="15" fill="rgb(229,203,36)" fg:x="4439" fg:w="1"/><text x="78.5531%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (7 samples, 0.12%)</title><rect x="78.4618%" y="1173" width="0.1235%" height="15" fill="rgb(234,180,9)" fg:x="4448" fg:w="7"/><text x="78.7118%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (144 samples, 2.54%)</title><rect x="76.1334%" y="1205" width="2.5401%" height="15" fill="rgb(228,98,45)" fg:x="4316" fg:w="144"/><text x="76.3834%" y="1215.50">le..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (20 samples, 0.35%)</title><rect x="78.3207%" y="1189" width="0.3528%" height="15" fill="rgb(240,24,36)" fg:x="4440" fg:w="20"/><text x="78.5707%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (5 samples, 0.09%)</title><rect x="78.5853%" y="1173" width="0.0882%" height="15" fill="rgb(227,154,19)" fg:x="4455" fg:w="5"/><text x="78.8353%" y="1183.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (5 samples, 0.09%)</title><rect x="78.5853%" y="1157" width="0.0882%" height="15" fill="rgb(231,2,48)" fg:x="4455" fg:w="5"/><text x="78.8353%" y="1167.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (5 samples, 0.09%)</title><rect x="78.5853%" y="1141" width="0.0882%" height="15" fill="rgb(219,216,0)" fg:x="4455" fg:w="5"/><text x="78.8353%" y="1151.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (48 samples, 0.85%)</title><rect x="78.6735%" y="1205" width="0.8467%" height="15" fill="rgb(251,88,0)" fg:x="4460" fg:w="48"/><text x="78.9235%" y="1215.50"></text></g><g><title>GetLengthPrefixedSlice (13 samples, 0.23%)</title><rect x="79.2909%" y="1189" width="0.2293%" height="15" fill="rgb(242,45,45)" fg:x="4495" fg:w="13"/><text x="79.5409%" y="1199.50"></text></g><g><title>leveldb::GetVarint32Ptr (11 samples, 0.19%)</title><rect x="79.3262%" y="1173" width="0.1940%" height="15" fill="rgb(218,149,45)" fg:x="4497" fg:w="11"/><text x="79.5762%" y="1183.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (3 samples, 0.05%)</title><rect x="79.6260%" y="1189" width="0.0529%" height="15" fill="rgb(247,194,10)" fg:x="4514" fg:w="3"/><text x="79.8760%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (11 samples, 0.19%)</title><rect x="79.5202%" y="1205" width="0.1940%" height="15" fill="rgb(234,33,37)" fg:x="4508" fg:w="11"/><text x="79.7702%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (2 samples, 0.04%)</title><rect x="79.6790%" y="1189" width="0.0353%" height="15" fill="rgb(218,61,13)" fg:x="4517" fg:w="2"/><text x="79.9290%" y="1199.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2 samples, 0.04%)</title><rect x="79.6790%" y="1173" width="0.0353%" height="15" fill="rgb(210,80,52)" fg:x="4517" fg:w="2"/><text x="79.9290%" y="1183.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2 samples, 0.04%)</title><rect x="79.6790%" y="1157" width="0.0353%" height="15" fill="rgb(218,203,27)" fg:x="4517" fg:w="2"/><text x="79.9290%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (260 samples, 4.59%)</title><rect x="75.1455%" y="1221" width="4.5863%" height="15" fill="rgb(209,126,33)" fg:x="4260" fg:w="260"/><text x="75.3955%" y="1231.50">level..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="79.7142%" y="1205" width="0.0176%" height="15" fill="rgb(234,173,41)" fg:x="4519" fg:w="1"/><text x="79.9642%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (265 samples, 4.67%)</title><rect x="75.0750%" y="1237" width="4.6745%" height="15" fill="rgb(228,166,9)" fg:x="4256" fg:w="265"/><text x="75.3250%" y="1247.50">level..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="79.7319%" y="1221" width="0.0176%" height="15" fill="rgb(208,124,43)" fg:x="4520" fg:w="1"/><text x="79.9819%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1 samples, 0.02%)</title><rect x="79.7319%" y="1205" width="0.0176%" height="15" fill="rgb(212,154,38)" fg:x="4520" fg:w="1"/><text x="79.9819%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (269 samples, 4.75%)</title><rect x="75.0220%" y="1253" width="4.7451%" height="15" fill="rgb(246,179,35)" fg:x="4253" fg:w="269"/><text x="75.2720%" y="1263.50">leveld..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1 samples, 0.02%)</title><rect x="79.7495%" y="1237" width="0.0176%" height="15" fill="rgb(251,3,50)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1247.50"></text></g><g><title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="79.7495%" y="1221" width="0.0176%" height="15" fill="rgb(219,96,8)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1231.50"></text></g><g><title>std::__atomic_base&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1 samples, 0.02%)</title><rect x="79.7495%" y="1205" width="0.0176%" height="15" fill="rgb(251,216,33)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1189" width="0.0176%" height="15" fill="rgb(243,145,29)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1173" width="0.0176%" height="15" fill="rgb(210,75,20)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1157" width="0.0176%" height="15" fill="rgb(235,56,8)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1141" width="0.0176%" height="15" fill="rgb(226,175,49)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1125" width="0.0176%" height="15" fill="rgb(242,204,23)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1109" width="0.0176%" height="15" fill="rgb(225,104,24)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1093" width="0.0176%" height="15" fill="rgb(253,34,1)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1077" width="0.0176%" height="15" fill="rgb(233,199,23)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1061" width="0.0176%" height="15" fill="rgb(247,7,51)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1045" width="0.0176%" height="15" fill="rgb(214,146,12)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1029" width="0.0176%" height="15" fill="rgb(234,181,43)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7495%" y="1013" width="0.0176%" height="15" fill="rgb(239,148,6)" fg:x="4521" fg:w="1"/><text x="79.9995%" y="1023.50"></text></g><g><title>leveldb::MemTable::Add (409 samples, 7.21%)</title><rect x="72.5701%" y="1285" width="7.2147%" height="15" fill="rgb(206,151,17)" fg:x="4114" fg:w="409"/><text x="72.8201%" y="1295.50">leveldb::M..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (392 samples, 6.91%)</title><rect x="72.8700%" y="1269" width="6.9148%" height="15" fill="rgb(213,215,10)" fg:x="4131" fg:w="392"/><text x="73.1200%" y="1279.50">leveldb::..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1 samples, 0.02%)</title><rect x="79.7672%" y="1253" width="0.0176%" height="15" fill="rgb(215,220,44)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1263.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="79.7672%" y="1237" width="0.0176%" height="15" fill="rgb(245,205,37)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1247.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="79.7672%" y="1221" width="0.0176%" height="15" fill="rgb(245,130,43)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1231.50"></text></g><g><title>leveldb::Arena::AllocateFallback (1 samples, 0.02%)</title><rect x="79.7672%" y="1205" width="0.0176%" height="15" fill="rgb(231,227,38)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1215.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (1 samples, 0.02%)</title><rect x="79.7672%" y="1189" width="0.0176%" height="15" fill="rgb(233,185,4)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1199.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="79.7672%" y="1173" width="0.0176%" height="15" fill="rgb(224,154,43)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1183.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="79.7672%" y="1157" width="0.0176%" height="15" fill="rgb(235,156,15)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1167.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="79.7672%" y="1141" width="0.0176%" height="15" fill="rgb(211,55,43)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1125" width="0.0176%" height="15" fill="rgb(247,149,40)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1109" width="0.0176%" height="15" fill="rgb(232,171,16)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1093" width="0.0176%" height="15" fill="rgb(215,117,49)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1077" width="0.0176%" height="15" fill="rgb(246,194,11)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1061" width="0.0176%" height="15" fill="rgb(242,101,44)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1045" width="0.0176%" height="15" fill="rgb(226,174,6)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1029" width="0.0176%" height="15" fill="rgb(213,150,20)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7672%" y="1013" width="0.0176%" height="15" fill="rgb(222,124,42)" fg:x="4522" fg:w="1"/><text x="80.0172%" y="1023.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (424 samples, 7.48%)</title><rect x="72.3408%" y="1333" width="7.4793%" height="15" fill="rgb(250,19,47)" fg:x="4101" fg:w="424"/><text x="72.5908%" y="1343.50">leveldb::W..</text></g><g><title>leveldb::WriteBatch::Iterate (423 samples, 7.46%)</title><rect x="72.3584%" y="1317" width="7.4616%" height="15" fill="rgb(241,217,19)" fg:x="4102" fg:w="423"/><text x="72.6084%" y="1327.50">leveldb::W..</text></g><g><title>leveldb::WriteBatch::Iterate (412 samples, 7.27%)</title><rect x="72.5525%" y="1301" width="7.2676%" height="15" fill="rgb(207,210,34)" fg:x="4113" fg:w="412"/><text x="72.8025%" y="1311.50">leveldb::W..</text></g><g><title>leveldb::WriteBatch::Iterate (2 samples, 0.04%)</title><rect x="79.7848%" y="1285" width="0.0353%" height="15" fill="rgb(244,45,4)" fg:x="4523" fg:w="2"/><text x="80.0348%" y="1295.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="79.8201%" y="1109" width="0.0706%" height="15" fill="rgb(252,134,50)" fg:x="4525" fg:w="4"/><text x="80.0701%" y="1119.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="79.8201%" y="1093" width="0.0706%" height="15" fill="rgb(238,74,2)" fg:x="4525" fg:w="4"/><text x="80.0701%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="79.8730%" y="1077" width="0.0176%" height="15" fill="rgb(226,58,46)" fg:x="4528" fg:w="1"/><text x="80.1230%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.8730%" y="1061" width="0.0176%" height="15" fill="rgb(232,83,35)" fg:x="4528" fg:w="1"/><text x="80.1230%" y="1071.50"></text></g><g><title>[[ext4]] (6 samples, 0.11%)</title><rect x="79.8201%" y="1125" width="0.1058%" height="15" fill="rgb(212,148,47)" fg:x="4525" fg:w="6"/><text x="80.0701%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="79.8906%" y="1109" width="0.0353%" height="15" fill="rgb(235,29,1)" fg:x="4529" fg:w="2"/><text x="80.1406%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.9083%" y="1093" width="0.0176%" height="15" fill="rgb(247,55,37)" fg:x="4530" fg:w="1"/><text x="80.1583%" y="1103.50"></text></g><g><title>[[ext4]] (14 samples, 0.25%)</title><rect x="79.8201%" y="1141" width="0.2470%" height="15" fill="rgb(222,48,3)" fg:x="4525" fg:w="14"/><text x="80.0701%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="79.9259%" y="1125" width="0.1411%" height="15" fill="rgb(234,21,33)" fg:x="4531" fg:w="8"/><text x="80.1759%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="79.9259%" y="1109" width="0.1411%" height="15" fill="rgb(247,178,53)" fg:x="4531" fg:w="8"/><text x="80.1759%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="79.9259%" y="1093" width="0.1411%" height="15" fill="rgb(225,75,7)" fg:x="4531" fg:w="8"/><text x="80.1759%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="79.9259%" y="1077" width="0.1411%" height="15" fill="rgb(219,199,7)" fg:x="4531" fg:w="8"/><text x="80.1759%" y="1087.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="79.9612%" y="1061" width="0.1058%" height="15" fill="rgb(209,93,42)" fg:x="4533" fg:w="6"/><text x="80.2112%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="80.0318%" y="1045" width="0.0353%" height="15" fill="rgb(240,175,17)" fg:x="4537" fg:w="2"/><text x="80.2818%" y="1055.50"></text></g><g><title>Flush (16 samples, 0.28%)</title><rect x="79.8201%" y="1301" width="0.2822%" height="15" fill="rgb(232,106,7)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1311.50"></text></g><g><title>FlushBuffer (16 samples, 0.28%)</title><rect x="79.8201%" y="1285" width="0.2822%" height="15" fill="rgb(242,106,43)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (16 samples, 0.28%)</title><rect x="79.8201%" y="1269" width="0.2822%" height="15" fill="rgb(242,61,37)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1279.50"></text></g><g><title>__GI___libc_write (16 samples, 0.28%)</title><rect x="79.8201%" y="1253" width="0.2822%" height="15" fill="rgb(205,72,10)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1263.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="79.8201%" y="1237" width="0.2822%" height="15" fill="rgb(214,184,36)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1247.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="79.8201%" y="1221" width="0.2822%" height="15" fill="rgb(206,107,18)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1231.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="79.8201%" y="1205" width="0.2822%" height="15" fill="rgb(210,75,5)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1215.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="79.8201%" y="1189" width="0.2822%" height="15" fill="rgb(205,3,19)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1199.50"></text></g><g><title>[[ext4]] (16 samples, 0.28%)</title><rect x="79.8201%" y="1173" width="0.2822%" height="15" fill="rgb(207,181,42)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1183.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="79.8201%" y="1157" width="0.2822%" height="15" fill="rgb(229,179,43)" fg:x="4525" fg:w="16"/><text x="80.0701%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="80.0670%" y="1141" width="0.0353%" height="15" fill="rgb(246,95,30)" fg:x="4539" fg:w="2"/><text x="80.3170%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="80.0670%" y="1125" width="0.0353%" height="15" fill="rgb(234,144,45)" fg:x="4539" fg:w="2"/><text x="80.3170%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.0847%" y="1109" width="0.0176%" height="15" fill="rgb(250,54,25)" fg:x="4540" fg:w="1"/><text x="80.3347%" y="1119.50"></text></g><g><title>CDBWrapper::WriteBatch (442 samples, 7.80%)</title><rect x="72.3408%" y="1365" width="7.7968%" height="15" fill="rgb(215,195,40)" fg:x="4101" fg:w="442"/><text x="72.5908%" y="1375.50">CDBWrapper:..</text></g><g><title>leveldb::DBImpl::Write (442 samples, 7.80%)</title><rect x="72.3408%" y="1349" width="7.7968%" height="15" fill="rgb(233,188,42)" fg:x="4101" fg:w="442"/><text x="72.5908%" y="1359.50">leveldb::DB..</text></g><g><title>leveldb::log::Writer::AddRecord (18 samples, 0.32%)</title><rect x="79.8201%" y="1333" width="0.3175%" height="15" fill="rgb(247,227,35)" fg:x="4525" fg:w="18"/><text x="80.0701%" y="1343.50"></text></g><g><title>leveldb::log::Writer::EmitPhysicalRecord (18 samples, 0.32%)</title><rect x="79.8201%" y="1317" width="0.3175%" height="15" fill="rgb(249,124,27)" fg:x="4525" fg:w="18"/><text x="80.0701%" y="1327.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.04%)</title><rect x="80.1023%" y="1301" width="0.0353%" height="15" fill="rgb(219,207,25)" fg:x="4541" fg:w="2"/><text x="80.3523%" y="1311.50"></text></g><g><title>_mm_crc32_u64 (2 samples, 0.04%)</title><rect x="80.1023%" y="1285" width="0.0353%" height="15" fill="rgb(241,216,47)" fg:x="4541" fg:w="2"/><text x="80.3523%" y="1295.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="80.1376%" y="1205" width="0.0176%" height="15" fill="rgb(233,82,50)" fg:x="4543" fg:w="1"/><text x="80.3876%" y="1215.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1376%" y="1189" width="0.0176%" height="15" fill="rgb(232,63,2)" fg:x="4543" fg:w="1"/><text x="80.3876%" y="1199.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="80.1376%" y="1173" width="0.0176%" height="15" fill="rgb(236,184,28)" fg:x="4543" fg:w="1"/><text x="80.3876%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="80.1376%" y="1157" width="0.0176%" height="15" fill="rgb(254,63,27)" fg:x="4543" fg:w="1"/><text x="80.3876%" y="1167.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="80.1552%" y="1157" width="0.0176%" height="15" fill="rgb(253,106,28)" fg:x="4544" fg:w="1"/><text x="80.4052%" y="1167.50"></text></g><g><title>CCoinsViewDB::BatchWrite (1 samples, 0.02%)</title><rect x="80.1729%" y="1093" width="0.0176%" height="15" fill="rgb(225,141,39)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="1103.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="1077" width="0.0176%" height="15" fill="rgb(222,157,20)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="1087.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (1 samples, 0.02%)</title><rect x="80.1729%" y="1061" width="0.0176%" height="15" fill="rgb(210,190,9)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="1071.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="1045" width="0.0176%" height="15" fill="rgb(242,167,7)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="1055.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="1029" width="0.0176%" height="15" fill="rgb(227,82,41)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="1039.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="1013" width="0.0176%" height="15" fill="rgb(222,131,13)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="1023.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="997" width="0.0176%" height="15" fill="rgb(221,98,26)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="1007.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="981" width="0.0176%" height="15" fill="rgb(251,63,52)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="991.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="965" width="0.0176%" height="15" fill="rgb(246,25,43)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="975.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="949" width="0.0176%" height="15" fill="rgb(247,167,15)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="959.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="933" width="0.0176%" height="15" fill="rgb(240,104,42)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="943.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="917" width="0.0176%" height="15" fill="rgb(224,54,6)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="927.50"></text></g><g><title>void Wrapper&lt;AmountCompression, long const&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="901" width="0.0176%" height="15" fill="rgb(244,108,35)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="911.50"></text></g><g><title>void AmountCompression::Ser&lt;DataStream, long&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="885" width="0.0176%" height="15" fill="rgb(216,154,2)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="895.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; const&amp;) (1 samples, 0.02%)</title><rect x="80.1729%" y="869" width="0.0176%" height="15" fill="rgb(222,8,47)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="879.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="853" width="0.0176%" height="15" fill="rgb(252,93,1)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="863.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned long&amp;&gt;::Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="837" width="0.0176%" height="15" fill="rgb(223,226,51)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="847.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned long&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="821" width="0.0176%" height="15" fill="rgb(206,147,9)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="831.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned long&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="805" width="0.0176%" height="15" fill="rgb(248,180,41)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="815.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="789" width="0.0176%" height="15" fill="rgb(209,47,50)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="799.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="80.1729%" y="773" width="0.0176%" height="15" fill="rgb(243,65,31)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="783.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="80.1729%" y="757" width="0.0176%" height="15" fill="rgb(228,128,1)" fg:x="4545" fg:w="1"/><text x="80.4229%" y="767.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="80.1905%" y="1093" width="0.0176%" height="15" fill="rgb(231,192,16)" fg:x="4546" fg:w="1"/><text x="80.4405%" y="1103.50"></text></g><g><title>CompressScript (1 samples, 0.02%)</title><rect x="80.1905%" y="1077" width="0.0176%" height="15" fill="rgb(224,26,40)" fg:x="4546" fg:w="1"/><text x="80.4405%" y="1087.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (2 samples, 0.04%)</title><rect x="80.2081%" y="1093" width="0.0353%" height="15" fill="rgb(214,192,17)" fg:x="4547" fg:w="2"/><text x="80.4581%" y="1103.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="80.2611%" y="1029" width="0.0176%" height="15" fill="rgb(225,147,18)" fg:x="4550" fg:w="1"/><text x="80.5111%" y="1039.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (7 samples, 0.12%)</title><rect x="80.1729%" y="1157" width="0.1235%" height="15" fill="rgb(205,35,11)" fg:x="4545" fg:w="7"/><text x="80.4229%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (7 samples, 0.12%)</title><rect x="80.1729%" y="1141" width="0.1235%" height="15" fill="rgb(242,40,42)" fg:x="4545" fg:w="7"/><text x="80.4229%" y="1151.50"></text></g><g><title>DataStream::write (7 samples, 0.12%)</title><rect x="80.1729%" y="1125" width="0.1235%" height="15" fill="rgb(250,170,13)" fg:x="4545" fg:w="7"/><text x="80.4229%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (7 samples, 0.12%)</title><rect x="80.1729%" y="1109" width="0.1235%" height="15" fill="rgb(240,161,28)" fg:x="4545" fg:w="7"/><text x="80.4229%" y="1119.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (3 samples, 0.05%)</title><rect x="80.2434%" y="1093" width="0.0529%" height="15" fill="rgb(245,179,12)" fg:x="4549" fg:w="3"/><text x="80.4934%" y="1103.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (2 samples, 0.04%)</title><rect x="80.2611%" y="1077" width="0.0353%" height="15" fill="rgb(250,92,32)" fg:x="4550" fg:w="2"/><text x="80.5111%" y="1087.50"></text></g><g><title>decltype  (2 samples, 0.04%)</title><rect x="80.2611%" y="1061" width="0.0353%" height="15" fill="rgb(233,10,40)" fg:x="4550" fg:w="2"/><text x="80.5111%" y="1071.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (2 samples, 0.04%)</title><rect x="80.2611%" y="1045" width="0.0353%" height="15" fill="rgb(217,98,1)" fg:x="4550" fg:w="2"/><text x="80.5111%" y="1055.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="80.2787%" y="1029" width="0.0176%" height="15" fill="rgb(238,202,7)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="1013" width="0.0176%" height="15" fill="rgb(222,91,3)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="997" width="0.0176%" height="15" fill="rgb(211,170,49)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="981" width="0.0176%" height="15" fill="rgb(253,139,18)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="965" width="0.0176%" height="15" fill="rgb(222,4,43)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="949" width="0.0176%" height="15" fill="rgb(207,205,12)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="933" width="0.0176%" height="15" fill="rgb(216,159,46)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="917" width="0.0176%" height="15" fill="rgb(236,115,1)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="901" width="0.0176%" height="15" fill="rgb(251,35,33)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="885" width="0.0176%" height="15" fill="rgb(248,62,51)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="869" width="0.0176%" height="15" fill="rgb(254,180,19)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="853" width="0.0176%" height="15" fill="rgb(217,100,32)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="837" width="0.0176%" height="15" fill="rgb(224,71,22)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="80.2787%" y="821" width="0.0176%" height="15" fill="rgb(251,185,33)" fg:x="4551" fg:w="1"/><text x="80.5287%" y="831.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="80.2963%" y="1093" width="0.0176%" height="15" fill="rgb(209,75,48)" fg:x="4552" fg:w="1"/><text x="80.5463%" y="1103.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.2963%" y="1077" width="0.0176%" height="15" fill="rgb(253,190,16)" fg:x="4552" fg:w="1"/><text x="80.5463%" y="1087.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="80.2963%" y="1061" width="0.0176%" height="15" fill="rgb(226,140,1)" fg:x="4552" fg:w="1"/><text x="80.5463%" y="1071.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="80.2963%" y="1045" width="0.0176%" height="15" fill="rgb(206,75,30)" fg:x="4552" fg:w="1"/><text x="80.5463%" y="1055.50"></text></g><g><title>CompressAmount (1 samples, 0.02%)</title><rect x="80.2963%" y="1029" width="0.0176%" height="15" fill="rgb(231,208,37)" fg:x="4552" fg:w="1"/><text x="80.5463%" y="1039.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt;(Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; const&amp;) (2 samples, 0.04%)</title><rect x="80.2963%" y="1157" width="0.0353%" height="15" fill="rgb(238,136,40)" fg:x="4552" fg:w="2"/><text x="80.5463%" y="1167.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (2 samples, 0.04%)</title><rect x="80.2963%" y="1141" width="0.0353%" height="15" fill="rgb(247,137,17)" fg:x="4552" fg:w="2"/><text x="80.5463%" y="1151.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="80.2963%" y="1125" width="0.0353%" height="15" fill="rgb(240,60,40)" fg:x="4552" fg:w="2"/><text x="80.5463%" y="1135.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (2 samples, 0.04%)</title><rect x="80.2963%" y="1109" width="0.0353%" height="15" fill="rgb(236,68,50)" fg:x="4552" fg:w="2"/><text x="80.5463%" y="1119.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="80.3140%" y="1093" width="0.0176%" height="15" fill="rgb(230,42,12)" fg:x="4553" fg:w="1"/><text x="80.5640%" y="1103.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="80.3140%" y="1077" width="0.0176%" height="15" fill="rgb(219,16,16)" fg:x="4553" fg:w="1"/><text x="80.5640%" y="1087.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="80.3140%" y="1061" width="0.0176%" height="15" fill="rgb(220,38,35)" fg:x="4553" fg:w="1"/><text x="80.5640%" y="1071.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="80.3140%" y="1045" width="0.0176%" height="15" fill="rgb(228,33,1)" fg:x="4553" fg:w="1"/><text x="80.5640%" y="1055.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="80.3140%" y="1029" width="0.0176%" height="15" fill="rgb(241,46,31)" fg:x="4553" fg:w="1"/><text x="80.5640%" y="1039.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="80.3140%" y="1013" width="0.0176%" height="15" fill="rgb(232,58,20)" fg:x="4553" fg:w="1"/><text x="80.5640%" y="1023.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (1 samples, 0.02%)</title><rect x="80.3316%" y="1141" width="0.0176%" height="15" fill="rgb(206,228,53)" fg:x="4554" fg:w="1"/><text x="80.5816%" y="1151.50"></text></g><g><title>decltype  (1 samples, 0.02%)</title><rect x="80.3316%" y="1125" width="0.0176%" height="15" fill="rgb(206,88,33)" fg:x="4554" fg:w="1"/><text x="80.5816%" y="1135.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (1 samples, 0.02%)</title><rect x="80.3316%" y="1109" width="0.0176%" height="15" fill="rgb(238,69,7)" fg:x="4554" fg:w="1"/><text x="80.5816%" y="1119.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="80.3316%" y="1093" width="0.0176%" height="15" fill="rgb(250,21,46)" fg:x="4554" fg:w="1"/><text x="80.5816%" y="1103.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt; &gt; (13 samples, 0.23%)</title><rect x="80.1376%" y="1301" width="0.2293%" height="15" fill="rgb(215,212,21)" fg:x="4543" fg:w="13"/><text x="80.3876%" y="1311.50"></text></g><g><title>void Wrapper&lt;TxOutCompression, CTxOut const&amp;&gt;::Serialize&lt;DataStream&gt; (13 samples, 0.23%)</title><rect x="80.1376%" y="1285" width="0.2293%" height="15" fill="rgb(211,35,12)" fg:x="4543" fg:w="13"/><text x="80.3876%" y="1295.50"></text></g><g><title>void TxOutCompression::Ser&lt;DataStream&gt; (13 samples, 0.23%)</title><rect x="80.1376%" y="1269" width="0.2293%" height="15" fill="rgb(231,184,16)" fg:x="4543" fg:w="13"/><text x="80.3876%" y="1279.50"></text></g><g><title>void TxOutCompression::SerializationOps&lt;DataStream, CTxOut const, ActionSerialize&gt; (13 samples, 0.23%)</title><rect x="80.1376%" y="1253" width="0.2293%" height="15" fill="rgb(242,140,15)" fg:x="4543" fg:w="13"/><text x="80.3876%" y="1263.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.23%)</title><rect x="80.1376%" y="1237" width="0.2293%" height="15" fill="rgb(220,37,14)" fg:x="4543" fg:w="13"/><text x="80.3876%" y="1247.50"></text></g><g><title>void SerializeMany&lt;DataStream, Wrapper&lt;AmountCompression, long const&amp;&gt;, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (13 samples, 0.23%)</title><rect x="80.1376%" y="1221" width="0.2293%" height="15" fill="rgb(223,146,22)" fg:x="4543" fg:w="13"/><text x="80.3876%" y="1231.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;ScriptCompression, CScript const&amp;&gt; &gt; (12 samples, 0.21%)</title><rect x="80.1552%" y="1205" width="0.2117%" height="15" fill="rgb(216,132,15)" fg:x="4544" fg:w="12"/><text x="80.4052%" y="1215.50"></text></g><g><title>void Wrapper&lt;ScriptCompression, CScript const&amp;&gt;::Serialize&lt;DataStream&gt; (12 samples, 0.21%)</title><rect x="80.1552%" y="1189" width="0.2117%" height="15" fill="rgb(248,83,5)" fg:x="4544" fg:w="12"/><text x="80.4052%" y="1199.50"></text></g><g><title>void ScriptCompression::Ser&lt;DataStream&gt; (12 samples, 0.21%)</title><rect x="80.1552%" y="1173" width="0.2117%" height="15" fill="rgb(231,206,48)" fg:x="4544" fg:w="12"/><text x="80.4052%" y="1183.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.04%)</title><rect x="80.3316%" y="1157" width="0.0353%" height="15" fill="rgb(253,185,37)" fg:x="4554" fg:w="2"/><text x="80.5816%" y="1167.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="80.3493%" y="1141" width="0.0176%" height="15" fill="rgb(208,21,44)" fg:x="4555" fg:w="1"/><text x="80.5993%" y="1151.50"></text></g><g><title>std::iterator_traits&lt;std::byte const*&gt;::difference_type std::__distance&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="80.3493%" y="1125" width="0.0176%" height="15" fill="rgb(236,125,4)" fg:x="4555" fg:w="1"/><text x="80.5993%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::copy&lt;std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="80.4551%" y="1173" width="0.0176%" height="15" fill="rgb(226,134,25)" fg:x="4561" fg:w="1"/><text x="80.7051%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::__copy_move_a&lt;false, std::byte const*, __gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="80.4551%" y="1157" width="0.0176%" height="15" fill="rgb(250,201,12)" fg:x="4561" fg:w="1"/><text x="80.7051%" y="1167.50"></text></g><g><title>std::byte* std::__copy_move_a1&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="80.4551%" y="1141" width="0.0176%" height="15" fill="rgb(225,92,18)" fg:x="4561" fg:w="1"/><text x="80.7051%" y="1151.50"></text></g><g><title>std::byte* std::__copy_move_a2&lt;false, std::byte const*, std::byte*&gt; (1 samples, 0.02%)</title><rect x="80.4551%" y="1125" width="0.0176%" height="15" fill="rgb(227,35,22)" fg:x="4561" fg:w="1"/><text x="80.7051%" y="1135.50"></text></g><g><title>std::byte* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;std::byte const, std::byte&gt; (1 samples, 0.02%)</title><rect x="80.4551%" y="1109" width="0.0176%" height="15" fill="rgb(214,180,52)" fg:x="4561" fg:w="1"/><text x="80.7051%" y="1119.50"></text></g><g><title>void WriteVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (21 samples, 0.37%)</title><rect x="80.3845%" y="1253" width="0.3704%" height="15" fill="rgb(233,55,38)" fg:x="4557" fg:w="21"/><text x="80.6345%" y="1263.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (20 samples, 0.35%)</title><rect x="80.4022%" y="1237" width="0.3528%" height="15" fill="rgb(249,171,43)" fg:x="4558" fg:w="20"/><text x="80.6522%" y="1247.50"></text></g><g><title>DataStream::write (20 samples, 0.35%)</title><rect x="80.4022%" y="1221" width="0.3528%" height="15" fill="rgb(239,87,2)" fg:x="4558" fg:w="20"/><text x="80.6522%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (20 samples, 0.35%)</title><rect x="80.4022%" y="1205" width="0.3528%" height="15" fill="rgb(248,141,5)" fg:x="4558" fg:w="20"/><text x="80.6522%" y="1215.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (20 samples, 0.35%)</title><rect x="80.4022%" y="1189" width="0.3528%" height="15" fill="rgb(238,33,42)" fg:x="4558" fg:w="20"/><text x="80.6522%" y="1199.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (16 samples, 0.28%)</title><rect x="80.4727%" y="1173" width="0.2822%" height="15" fill="rgb(231,57,19)" fg:x="4562" fg:w="16"/><text x="80.7227%" y="1183.50"></text></g><g><title>decltype  (9 samples, 0.16%)</title><rect x="80.5962%" y="1157" width="0.1588%" height="15" fill="rgb(214,78,53)" fg:x="4569" fg:w="9"/><text x="80.8462%" y="1167.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (9 samples, 0.16%)</title><rect x="80.5962%" y="1141" width="0.1588%" height="15" fill="rgb(206,132,29)" fg:x="4569" fg:w="9"/><text x="80.8462%" y="1151.50"></text></g><g><title>decltype (9 samples, 0.16%)</title><rect x="80.5962%" y="1125" width="0.1588%" height="15" fill="rgb(248,174,31)" fg:x="4569" fg:w="9"/><text x="80.8462%" y="1135.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Coin&gt;(Coin const&amp;) (41 samples, 0.72%)</title><rect x="80.1376%" y="1349" width="0.7232%" height="15" fill="rgb(221,87,13)" fg:x="4543" fg:w="41"/><text x="80.3876%" y="1359.50"></text></g><g><title>void Serialize&lt;DataStream, Coin&gt; (41 samples, 0.72%)</title><rect x="80.1376%" y="1333" width="0.7232%" height="15" fill="rgb(223,197,17)" fg:x="4543" fg:w="41"/><text x="80.3876%" y="1343.50"></text></g><g><title>void Coin::Serialize&lt;DataStream&gt; (41 samples, 0.72%)</title><rect x="80.1376%" y="1317" width="0.7232%" height="15" fill="rgb(220,144,50)" fg:x="4543" fg:w="41"/><text x="80.3876%" y="1327.50"></text></g><g><title>void Serialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (28 samples, 0.49%)</title><rect x="80.3669%" y="1301" width="0.4939%" height="15" fill="rgb(244,201,11)" fg:x="4556" fg:w="28"/><text x="80.6169%" y="1311.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Serialize&lt;DataStream&gt; (28 samples, 0.49%)</title><rect x="80.3669%" y="1285" width="0.4939%" height="15" fill="rgb(249,81,34)" fg:x="4556" fg:w="28"/><text x="80.6169%" y="1295.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Ser&lt;DataStream, unsigned int&gt; (28 samples, 0.49%)</title><rect x="80.3669%" y="1269" width="0.4939%" height="15" fill="rgb(205,161,12)" fg:x="4556" fg:w="28"/><text x="80.6169%" y="1279.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (6 samples, 0.11%)</title><rect x="80.7550%" y="1253" width="0.1058%" height="15" fill="rgb(252,139,50)" fg:x="4578" fg:w="6"/><text x="81.0050%" y="1263.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (6 samples, 0.11%)</title><rect x="80.7550%" y="1237" width="0.1058%" height="15" fill="rgb(205,169,14)" fg:x="4578" fg:w="6"/><text x="81.0050%" y="1247.50"></text></g><g><title>decltype  (5 samples, 0.09%)</title><rect x="80.7726%" y="1221" width="0.0882%" height="15" fill="rgb(248,198,33)" fg:x="4579" fg:w="5"/><text x="81.0226%" y="1231.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (5 samples, 0.09%)</title><rect x="80.7726%" y="1205" width="0.0882%" height="15" fill="rgb(236,23,21)" fg:x="4579" fg:w="5"/><text x="81.0226%" y="1215.50"></text></g><g><title>decltype (5 samples, 0.09%)</title><rect x="80.7726%" y="1189" width="0.0882%" height="15" fill="rgb(231,13,38)" fg:x="4579" fg:w="5"/><text x="81.0226%" y="1199.50"></text></g><g><title>CoinsViewCacheCursor::NextAndMaybeErase (1 samples, 0.02%)</title><rect x="80.8608%" y="1109" width="0.0176%" height="15" fill="rgb(239,139,21)" fg:x="4584" fg:w="1"/><text x="81.1108%" y="1119.50"></text></g><g><title>void Serialize&lt;DataStream, transaction_identifier&lt;false&gt; &gt; (2 samples, 0.04%)</title><rect x="80.8608%" y="1237" width="0.0353%" height="15" fill="rgb(222,164,45)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1247.50"></text></g><g><title>void transaction_identifier&lt;false&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="80.8608%" y="1221" width="0.0353%" height="15" fill="rgb(230,52,27)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1231.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="80.8608%" y="1205" width="0.0353%" height="15" fill="rgb(227,143,42)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1215.50"></text></g><g><title>DataStream&amp; DataStream::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.04%)</title><rect x="80.8608%" y="1189" width="0.0353%" height="15" fill="rgb(249,127,1)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1199.50"></text></g><g><title>void Serialize&lt;DataStream, unsigned char const&gt; (2 samples, 0.04%)</title><rect x="80.8608%" y="1173" width="0.0353%" height="15" fill="rgb(243,107,26)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1183.50"></text></g><g><title>DataStream::write (2 samples, 0.04%)</title><rect x="80.8608%" y="1157" width="0.0353%" height="15" fill="rgb(225,7,45)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (2 samples, 0.04%)</title><rect x="80.8608%" y="1141" width="0.0353%" height="15" fill="rgb(241,88,38)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1151.50"></text></g><g><title>CCoinsViewDB::BatchWrite (2 samples, 0.04%)</title><rect x="80.8608%" y="1125" width="0.0353%" height="15" fill="rgb(226,121,9)" fg:x="4584" fg:w="2"/><text x="81.1108%" y="1135.50"></text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (1 samples, 0.02%)</title><rect x="80.8785%" y="1109" width="0.0176%" height="15" fill="rgb(253,60,29)" fg:x="4585" fg:w="1"/><text x="81.1285%" y="1119.50"></text></g><g><title>DataStream::reserve (1 samples, 0.02%)</title><rect x="80.8785%" y="1093" width="0.0176%" height="15" fill="rgb(244,181,39)" fg:x="4585" fg:w="1"/><text x="81.1285%" y="1103.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="80.8785%" y="1077" width="0.0176%" height="15" fill="rgb(252,203,31)" fg:x="4585" fg:w="1"/><text x="81.1285%" y="1087.50"></text></g><g><title>CCoinsViewDB::BatchWrite (532 samples, 9.38%)</title><rect x="71.5294%" y="1381" width="9.3844%" height="15" fill="rgb(224,120,8)" fg:x="4055" fg:w="532"/><text x="71.7794%" y="1391.50">CCoinsViewDB:..</text></g><g><title>Write&lt;(anonymous namespace)::CoinEntry, Coin&gt; (44 samples, 0.78%)</title><rect x="80.1376%" y="1365" width="0.7762%" height="15" fill="rgb(205,171,54)" fg:x="4543" fg:w="44"/><text x="80.3876%" y="1375.50"></text></g><g><title>operator&lt;&lt; &lt;(anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="80.8608%" y="1349" width="0.0529%" height="15" fill="rgb(235,89,11)" fg:x="4584" fg:w="3"/><text x="81.1108%" y="1359.50"></text></g><g><title>Serialize&lt;DataStream, (anonymous namespace)::CoinEntry&gt; (3 samples, 0.05%)</title><rect x="80.8608%" y="1333" width="0.0529%" height="15" fill="rgb(212,180,28)" fg:x="4584" fg:w="3"/><text x="81.1108%" y="1343.50"></text></g><g><title>Serialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="80.8608%" y="1317" width="0.0529%" height="15" fill="rgb(247,84,49)" fg:x="4584" fg:w="3"/><text x="81.1108%" y="1327.50"></text></g><g><title>Ser&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="80.8608%" y="1301" width="0.0529%" height="15" fill="rgb(236,187,52)" fg:x="4584" fg:w="3"/><text x="81.1108%" y="1311.50"></text></g><g><title>SerializationOps&lt;DataStream, const (anonymous namespace)::CoinEntry, ActionSerialize&gt; (3 samples, 0.05%)</title><rect x="80.8608%" y="1285" width="0.0529%" height="15" fill="rgb(227,24,15)" fg:x="4584" fg:w="3"/><text x="81.1108%" y="1295.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="80.8608%" y="1269" width="0.0529%" height="15" fill="rgb(227,211,13)" fg:x="4584" fg:w="3"/><text x="81.1108%" y="1279.50"></text></g><g><title>void SerializeMany&lt;DataStream, unsigned char, transaction_identifier&lt;false&gt;, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (3 samples, 0.05%)</title><rect x="80.8608%" y="1253" width="0.0529%" height="15" fill="rgb(245,52,14)" fg:x="4584" fg:w="3"/><text x="81.1108%" y="1263.50"></text></g><g><title>void Serialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.8961%" y="1237" width="0.0176%" height="15" fill="rgb(225,185,13)" fg:x="4586" fg:w="1"/><text x="81.1461%" y="1247.50"></text></g><g><title>void ser_writedata8&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="80.8961%" y="1221" width="0.0176%" height="15" fill="rgb(217,160,29)" fg:x="4586" fg:w="1"/><text x="81.1461%" y="1231.50"></text></g><g><title>DataStream::write (1 samples, 0.02%)</title><rect x="80.8961%" y="1205" width="0.0176%" height="15" fill="rgb(216,115,53)" fg:x="4586" fg:w="1"/><text x="81.1461%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::byte*, std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt; &gt; std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::insert&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="80.8961%" y="1189" width="0.0176%" height="15" fill="rgb(236,99,5)" fg:x="4586" fg:w="1"/><text x="81.1461%" y="1199.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="80.8961%" y="1173" width="0.0176%" height="15" fill="rgb(222,60,38)" fg:x="4586" fg:w="1"/><text x="81.1461%" y="1183.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="80.9137%" y="1381" width="0.0176%" height="15" fill="rgb(212,82,22)" fg:x="4587" fg:w="1"/><text x="81.1637%" y="1391.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="80.9314%" y="1381" width="0.0176%" height="15" fill="rgb(214,48,28)" fg:x="4588" fg:w="1"/><text x="81.1814%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="80.9314%" y="1365" width="0.0176%" height="15" fill="rgb(245,196,50)" fg:x="4588" fg:w="1"/><text x="81.1814%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="80.9314%" y="1349" width="0.0176%" height="15" fill="rgb(225,159,46)" fg:x="4588" fg:w="1"/><text x="81.1814%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="80.9314%" y="1333" width="0.0176%" height="15" fill="rgb(207,195,48)" fg:x="4588" fg:w="1"/><text x="81.1814%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="80.9314%" y="1317" width="0.0176%" height="15" fill="rgb(240,73,3)" fg:x="4588" fg:w="1"/><text x="81.1814%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="80.9314%" y="1301" width="0.0176%" height="15" fill="rgb(245,57,23)" fg:x="4588" fg:w="1"/><text x="81.1814%" y="1311.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.04%)</title><rect x="80.9490%" y="1381" width="0.0353%" height="15" fill="rgb(240,75,18)" fg:x="4589" fg:w="2"/><text x="81.1990%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="80.9667%" y="1365" width="0.0176%" height="15" fill="rgb(238,168,12)" fg:x="4590" fg:w="1"/><text x="81.2167%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="80.9667%" y="1349" width="0.0176%" height="15" fill="rgb(226,20,40)" fg:x="4590" fg:w="1"/><text x="81.2167%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="80.9667%" y="1333" width="0.0176%" height="15" fill="rgb(224,130,35)" fg:x="4590" fg:w="1"/><text x="81.2167%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="80.9667%" y="1317" width="0.0176%" height="15" fill="rgb(225,63,41)" fg:x="4590" fg:w="1"/><text x="81.2167%" y="1327.50"></text></g><g><title>leveldb::WriteBatch::Put (1 samples, 0.02%)</title><rect x="80.9843%" y="1381" width="0.0176%" height="15" fill="rgb(219,3,3)" fg:x="4591" fg:w="1"/><text x="81.2343%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="80.9843%" y="1365" width="0.0176%" height="15" fill="rgb(218,157,4)" fg:x="4591" fg:w="1"/><text x="81.2343%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="80.9843%" y="1349" width="0.0176%" height="15" fill="rgb(232,76,36)" fg:x="4591" fg:w="1"/><text x="81.2343%" y="1359.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;::_M_next (1 samples, 0.02%)</title><rect x="81.0196%" y="1333" width="0.0176%" height="15" fill="rgb(247,36,0)" fg:x="4593" fg:w="1"/><text x="81.2696%" y="1343.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (13 samples, 0.23%)</title><rect x="81.0372%" y="1317" width="0.2293%" height="15" fill="rgb(205,2,34)" fg:x="4594" fg:w="13"/><text x="81.2872%" y="1327.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (13 samples, 0.23%)</title><rect x="81.0372%" y="1301" width="0.2293%" height="15" fill="rgb(239,136,13)" fg:x="4594" fg:w="13"/><text x="81.2872%" y="1311.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (13 samples, 0.23%)</title><rect x="81.0372%" y="1285" width="0.2293%" height="15" fill="rgb(253,122,12)" fg:x="4594" fg:w="13"/><text x="81.2872%" y="1295.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (8 samples, 0.14%)</title><rect x="81.1254%" y="1269" width="0.1411%" height="15" fill="rgb(222,174,7)" fg:x="4599" fg:w="8"/><text x="81.3754%" y="1279.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (8 samples, 0.14%)</title><rect x="81.1254%" y="1253" width="0.1411%" height="15" fill="rgb(208,191,42)" fg:x="4599" fg:w="8"/><text x="81.3754%" y="1263.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (8 samples, 0.14%)</title><rect x="81.1254%" y="1237" width="0.1411%" height="15" fill="rgb(237,212,15)" fg:x="4599" fg:w="8"/><text x="81.3754%" y="1247.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::ListNode::ListNode (4 samples, 0.07%)</title><rect x="81.1960%" y="1221" width="0.0706%" height="15" fill="rgb(215,65,20)" fg:x="4603" fg:w="4"/><text x="81.4460%" y="1231.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (4 samples, 0.07%)</title><rect x="81.2665%" y="1221" width="0.0706%" height="15" fill="rgb(232,103,11)" fg:x="4607" fg:w="4"/><text x="81.5165%" y="1231.50"></text></g><g><title>CCoinsCacheEntry::ClearFlags (4 samples, 0.07%)</title><rect x="81.2665%" y="1205" width="0.0706%" height="15" fill="rgb(235,148,18)" fg:x="4607" fg:w="4"/><text x="81.5165%" y="1215.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (35 samples, 0.62%)</title><rect x="81.0019%" y="1381" width="0.6174%" height="15" fill="rgb(240,173,7)" fg:x="4592" fg:w="35"/><text x="81.2519%" y="1391.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (35 samples, 0.62%)</title><rect x="81.0019%" y="1365" width="0.6174%" height="15" fill="rgb(228,182,25)" fg:x="4592" fg:w="35"/><text x="81.2519%" y="1375.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (35 samples, 0.62%)</title><rect x="81.0019%" y="1349" width="0.6174%" height="15" fill="rgb(247,3,52)" fg:x="4592" fg:w="35"/><text x="81.2519%" y="1359.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (33 samples, 0.58%)</title><rect x="81.0372%" y="1333" width="0.5821%" height="15" fill="rgb(226,155,8)" fg:x="4594" fg:w="33"/><text x="81.2872%" y="1343.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.35%)</title><rect x="81.2665%" y="1317" width="0.3528%" height="15" fill="rgb(243,195,38)" fg:x="4607" fg:w="20"/><text x="81.5165%" y="1327.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.35%)</title><rect x="81.2665%" y="1301" width="0.3528%" height="15" fill="rgb(254,181,33)" fg:x="4607" fg:w="20"/><text x="81.5165%" y="1311.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.35%)</title><rect x="81.2665%" y="1285" width="0.3528%" height="15" fill="rgb(232,98,23)" fg:x="4607" fg:w="20"/><text x="81.5165%" y="1295.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (20 samples, 0.35%)</title><rect x="81.2665%" y="1269" width="0.3528%" height="15" fill="rgb(205,23,10)" fg:x="4607" fg:w="20"/><text x="81.5165%" y="1279.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (20 samples, 0.35%)</title><rect x="81.2665%" y="1253" width="0.3528%" height="15" fill="rgb(212,124,38)" fg:x="4607" fg:w="20"/><text x="81.5165%" y="1263.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (20 samples, 0.35%)</title><rect x="81.2665%" y="1237" width="0.3528%" height="15" fill="rgb(228,207,2)" fg:x="4607" fg:w="20"/><text x="81.5165%" y="1247.50"></text></g><g><title>Coin::~Coin (16 samples, 0.28%)</title><rect x="81.3371%" y="1221" width="0.2822%" height="15" fill="rgb(215,120,22)" fg:x="4611" fg:w="16"/><text x="81.5871%" y="1231.50"></text></g><g><title>CTxOut::~CTxOut (16 samples, 0.28%)</title><rect x="81.3371%" y="1205" width="0.2822%" height="15" fill="rgb(251,172,33)" fg:x="4611" fg:w="16"/><text x="81.5871%" y="1215.50"></text></g><g><title>CScript::~CScript (16 samples, 0.28%)</title><rect x="81.3371%" y="1189" width="0.2822%" height="15" fill="rgb(250,83,2)" fg:x="4611" fg:w="16"/><text x="81.5871%" y="1199.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (16 samples, 0.28%)</title><rect x="81.3371%" y="1173" width="0.2822%" height="15" fill="rgb(210,132,53)" fg:x="4611" fg:w="16"/><text x="81.5871%" y="1183.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="81.5841%" y="1157" width="0.0353%" height="15" fill="rgb(221,208,36)" fg:x="4625" fg:w="2"/><text x="81.8341%" y="1167.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="81.5841%" y="1141" width="0.0353%" height="15" fill="rgb(205,192,46)" fg:x="4625" fg:w="2"/><text x="81.8341%" y="1151.50"></text></g><g><title>CCoinsViewCache::Flush (589 samples, 10.39%)</title><rect x="71.2648%" y="1397" width="10.3898%" height="15" fill="rgb(223,163,14)" fg:x="4040" fg:w="589"/><text x="71.5148%" y="1407.50">CCoinsViewCache..</text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_insert&lt;std::byte const*&gt; (2 samples, 0.04%)</title><rect x="81.6193%" y="1381" width="0.0353%" height="15" fill="rgb(218,41,28)" fg:x="4627" fg:w="2"/><text x="81.8693%" y="1391.50"></text></g><g><title>kernel::BlockTreeDB::WriteBatchSync (4 samples, 0.07%)</title><rect x="81.6546%" y="1381" width="0.0706%" height="15" fill="rgb(235,104,10)" fg:x="4629" fg:w="4"/><text x="81.9046%" y="1391.50"></text></g><g><title>CDiskBlockIndex::CDiskBlockIndex (4 samples, 0.07%)</title><rect x="81.6546%" y="1365" width="0.0706%" height="15" fill="rgb(246,17,4)" fg:x="4629" fg:w="4"/><text x="81.9046%" y="1375.50"></text></g><g><title>uint256::uint256 (4 samples, 0.07%)</title><rect x="81.6546%" y="1349" width="0.0706%" height="15" fill="rgb(240,7,16)" fg:x="4629" fg:w="4"/><text x="81.9046%" y="1359.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (4 samples, 0.07%)</title><rect x="81.6546%" y="1333" width="0.0706%" height="15" fill="rgb(213,160,23)" fg:x="4629" fg:w="4"/><text x="81.9046%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="81.6546%" y="1317" width="0.0706%" height="15" fill="rgb(251,179,49)" fg:x="4629" fg:w="4"/><text x="81.9046%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="81.6546%" y="1301" width="0.0706%" height="15" fill="rgb(247,198,10)" fg:x="4629" fg:w="4"/><text x="81.9046%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="81.6546%" y="1285" width="0.0706%" height="15" fill="rgb(220,65,29)" fg:x="4629" fg:w="4"/><text x="81.9046%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1269" width="0.0529%" height="15" fill="rgb(237,171,28)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1253" width="0.0529%" height="15" fill="rgb(228,44,26)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1237" width="0.0529%" height="15" fill="rgb(216,210,27)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1221" width="0.0529%" height="15" fill="rgb(252,10,17)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1205" width="0.0529%" height="15" fill="rgb(214,172,30)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1189" width="0.0529%" height="15" fill="rgb(253,130,48)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1173" width="0.0529%" height="15" fill="rgb(226,99,43)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1157" width="0.0529%" height="15" fill="rgb(239,111,26)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1141" width="0.0529%" height="15" fill="rgb(240,27,53)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1125" width="0.0529%" height="15" fill="rgb(254,163,12)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1109" width="0.0529%" height="15" fill="rgb(225,51,48)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1093" width="0.0529%" height="15" fill="rgb(205,19,32)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1077" width="0.0529%" height="15" fill="rgb(218,119,26)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="81.6723%" y="1061" width="0.0529%" height="15" fill="rgb(231,173,33)" fg:x="4630" fg:w="3"/><text x="81.9223%" y="1071.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (594 samples, 10.48%)</title><rect x="71.2648%" y="1429" width="10.4780%" height="15" fill="rgb(241,100,29)" fg:x="4040" fg:w="594"/><text x="71.5148%" y="1439.50">Chainstate::For..</text></g><g><title>Chainstate::FlushStateToDisk (594 samples, 10.48%)</title><rect x="71.2648%" y="1413" width="10.4780%" height="15" fill="rgb(250,194,34)" fg:x="4040" fg:w="594"/><text x="71.5148%" y="1423.50">Chainstate::Flu..</text></g><g><title>node::BlockManager::WriteBlockIndexDB (5 samples, 0.09%)</title><rect x="81.6546%" y="1397" width="0.0882%" height="15" fill="rgb(215,23,50)" fg:x="4629" fg:w="5"/><text x="81.9046%" y="1407.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="81.7252%" y="1381" width="0.0176%" height="15" fill="rgb(206,49,37)" fg:x="4633" fg:w="1"/><text x="81.9752%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="81.7252%" y="1365" width="0.0176%" height="15" fill="rgb(247,39,21)" fg:x="4633" fg:w="1"/><text x="81.9752%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="81.7252%" y="1349" width="0.0176%" height="15" fill="rgb(209,220,15)" fg:x="4633" fg:w="1"/><text x="81.9752%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="81.7252%" y="1333" width="0.0176%" height="15" fill="rgb(206,41,33)" fg:x="4633" fg:w="1"/><text x="81.9752%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="81.7252%" y="1317" width="0.0176%" height="15" fill="rgb(221,225,45)" fg:x="4633" fg:w="1"/><text x="81.9752%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="81.7252%" y="1301" width="0.0176%" height="15" fill="rgb(216,27,18)" fg:x="4633" fg:w="1"/><text x="81.9752%" y="1311.50"></text></g><g><title>leveldb::MemTable::Unref (1 samples, 0.02%)</title><rect x="81.7428%" y="1221" width="0.0176%" height="15" fill="rgb(250,193,34)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1231.50"></text></g><g><title>leveldb::MemTable::~MemTable (1 samples, 0.02%)</title><rect x="81.7428%" y="1205" width="0.0176%" height="15" fill="rgb(227,215,20)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1215.50"></text></g><g><title>leveldb::Arena::~Arena (1 samples, 0.02%)</title><rect x="81.7428%" y="1189" width="0.0176%" height="15" fill="rgb(242,211,27)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="81.7428%" y="1173" width="0.0176%" height="15" fill="rgb(229,190,30)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1183.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="81.7428%" y="1157" width="0.0176%" height="15" fill="rgb(253,31,29)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1167.50"></text></g><g><title>systrim.constprop.0 (1 samples, 0.02%)</title><rect x="81.7428%" y="1141" width="0.0176%" height="15" fill="rgb(229,177,52)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1151.50"></text></g><g><title>__default_morecore@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="81.7428%" y="1125" width="0.0176%" height="15" fill="rgb(226,88,8)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1135.50"></text></g><g><title>__sbrk (1 samples, 0.02%)</title><rect x="81.7428%" y="1109" width="0.0176%" height="15" fill="rgb(214,55,27)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1119.50"></text></g><g><title>__brk (1 samples, 0.02%)</title><rect x="81.7428%" y="1093" width="0.0176%" height="15" fill="rgb(233,202,5)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="1077" width="0.0176%" height="15" fill="rgb(251,49,30)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="1061" width="0.0176%" height="15" fill="rgb(235,18,52)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="1045" width="0.0176%" height="15" fill="rgb(250,111,51)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="1029" width="0.0176%" height="15" fill="rgb(218,13,25)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="1013" width="0.0176%" height="15" fill="rgb(248,96,7)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="997" width="0.0176%" height="15" fill="rgb(217,31,15)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="981" width="0.0176%" height="15" fill="rgb(228,59,49)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="965" width="0.0176%" height="15" fill="rgb(210,152,38)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="949" width="0.0176%" height="15" fill="rgb(206,71,11)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.7428%" y="933" width="0.0176%" height="15" fill="rgb(244,199,5)" fg:x="4634" fg:w="1"/><text x="81.9928%" y="943.50"></text></g><g><title>Chainstate::ResetCoinsViews (23 samples, 0.41%)</title><rect x="81.7428%" y="1429" width="0.4057%" height="15" fill="rgb(253,49,1)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1439.50"></text></g><g><title>std::unique_ptr&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.41%)</title><rect x="81.7428%" y="1413" width="0.4057%" height="15" fill="rgb(225,206,40)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1423.50"></text></g><g><title>std::__uniq_ptr_impl&lt;CoinsViews, std::default_delete&lt;CoinsViews&gt; &gt;::reset (23 samples, 0.41%)</title><rect x="81.7428%" y="1397" width="0.4057%" height="15" fill="rgb(243,116,47)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1407.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.41%)</title><rect x="81.7428%" y="1381" width="0.4057%" height="15" fill="rgb(219,225,16)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1391.50"></text></g><g><title>std::default_delete&lt;CoinsViews&gt;::operator (23 samples, 0.41%)</title><rect x="81.7428%" y="1365" width="0.4057%" height="15" fill="rgb(233,29,47)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1375.50"></text></g><g><title>CoinsViews::~CoinsViews (23 samples, 0.41%)</title><rect x="81.7428%" y="1349" width="0.4057%" height="15" fill="rgb(250,179,18)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1359.50"></text></g><g><title>CCoinsViewDB::~CCoinsViewDB (23 samples, 0.41%)</title><rect x="81.7428%" y="1333" width="0.4057%" height="15" fill="rgb(215,176,6)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1343.50"></text></g><g><title>std::unique_ptr&lt;CDBWrapper, std::default_delete&lt;CDBWrapper&gt; &gt;::~unique_ptr (23 samples, 0.41%)</title><rect x="81.7428%" y="1317" width="0.4057%" height="15" fill="rgb(214,117,39)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1327.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.41%)</title><rect x="81.7428%" y="1301" width="0.4057%" height="15" fill="rgb(247,183,36)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1311.50"></text></g><g><title>std::default_delete&lt;CDBWrapper&gt;::operator (23 samples, 0.41%)</title><rect x="81.7428%" y="1285" width="0.4057%" height="15" fill="rgb(237,200,3)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1295.50"></text></g><g><title>CDBWrapper::~CDBWrapper (23 samples, 0.41%)</title><rect x="81.7428%" y="1269" width="0.4057%" height="15" fill="rgb(212,220,24)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1279.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.41%)</title><rect x="81.7428%" y="1253" width="0.4057%" height="15" fill="rgb(245,216,20)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1263.50"></text></g><g><title>leveldb::DBImpl::~DBImpl (23 samples, 0.41%)</title><rect x="81.7428%" y="1237" width="0.4057%" height="15" fill="rgb(219,124,7)" fg:x="4634" fg:w="23"/><text x="81.9928%" y="1247.50"></text></g><g><title>leveldb::TableCache::~TableCache (22 samples, 0.39%)</title><rect x="81.7605%" y="1221" width="0.3881%" height="15" fill="rgb(227,167,8)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1231.50"></text></g><g><title>~ShardedLRUCache (22 samples, 0.39%)</title><rect x="81.7605%" y="1205" width="0.3881%" height="15" fill="rgb(241,37,2)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (22 samples, 0.39%)</title><rect x="81.7605%" y="1189" width="0.3881%" height="15" fill="rgb(238,134,33)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1199.50"></text></g><g><title>~LRUCache (22 samples, 0.39%)</title><rect x="81.7605%" y="1173" width="0.3881%" height="15" fill="rgb(248,48,27)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::~LRUCache (22 samples, 0.39%)</title><rect x="81.7605%" y="1157" width="0.3881%" height="15" fill="rgb(212,14,16)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1167.50"></text></g><g><title>leveldb::DeleteEntry (22 samples, 0.39%)</title><rect x="81.7605%" y="1141" width="0.3881%" height="15" fill="rgb(217,205,37)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1151.50"></text></g><g><title>~PosixMmapReadableFile (22 samples, 0.39%)</title><rect x="81.7605%" y="1125" width="0.3881%" height="15" fill="rgb(233,185,47)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1135.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (22 samples, 0.39%)</title><rect x="81.7605%" y="1109" width="0.3881%" height="15" fill="rgb(244,88,8)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1119.50"></text></g><g><title>__munmap (22 samples, 0.39%)</title><rect x="81.7605%" y="1093" width="0.3881%" height="15" fill="rgb(213,0,20)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1103.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="1077" width="0.3881%" height="15" fill="rgb(238,159,36)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1087.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="1061" width="0.3881%" height="15" fill="rgb(253,173,17)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1071.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="1045" width="0.3881%" height="15" fill="rgb(221,23,28)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1055.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="1029" width="0.3881%" height="15" fill="rgb(218,113,15)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1039.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="1013" width="0.3881%" height="15" fill="rgb(233,58,3)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1023.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="997" width="0.3881%" height="15" fill="rgb(250,46,35)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="1007.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="981" width="0.3881%" height="15" fill="rgb(210,169,11)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="991.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="965" width="0.3881%" height="15" fill="rgb(246,88,19)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="975.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="81.7605%" y="949" width="0.3881%" height="15" fill="rgb(206,81,49)" fg:x="4635" fg:w="22"/><text x="82.0105%" y="959.50"></text></g><g><title>[unknown] (14 samples, 0.25%)</title><rect x="81.9016%" y="933" width="0.2470%" height="15" fill="rgb(232,144,18)" fg:x="4643" fg:w="14"/><text x="82.1516%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.0956%" y="917" width="0.0529%" height="15" fill="rgb(235,2,27)" fg:x="4654" fg:w="3"/><text x="82.3456%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1309%" y="901" width="0.0176%" height="15" fill="rgb(239,157,39)" fg:x="4656" fg:w="1"/><text x="82.3809%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1309%" y="885" width="0.0176%" height="15" fill="rgb(220,11,17)" fg:x="4656" fg:w="1"/><text x="82.3809%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1309%" y="869" width="0.0176%" height="15" fill="rgb(243,94,50)" fg:x="4656" fg:w="1"/><text x="82.3809%" y="879.50"></text></g><g><title>Shutdown (1 samples, 0.02%)</title><rect x="82.1485%" y="1429" width="0.0176%" height="15" fill="rgb(218,22,0)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1439.50"></text></g><g><title>std::filesystem::remove (1 samples, 0.02%)</title><rect x="82.1485%" y="1413" width="0.0176%" height="15" fill="rgb(249,70,21)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1423.50"></text></g><g><title>remove (1 samples, 0.02%)</title><rect x="82.1485%" y="1397" width="0.0176%" height="15" fill="rgb(245,111,46)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1407.50"></text></g><g><title>__unlink (1 samples, 0.02%)</title><rect x="82.1485%" y="1381" width="0.0176%" height="15" fill="rgb(244,183,12)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1485%" y="1365" width="0.0176%" height="15" fill="rgb(207,117,0)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1485%" y="1349" width="0.0176%" height="15" fill="rgb(206,20,43)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1485%" y="1333" width="0.0176%" height="15" fill="rgb(221,104,11)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1485%" y="1317" width="0.0176%" height="15" fill="rgb(254,36,50)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1485%" y="1301" width="0.0176%" height="15" fill="rgb(252,17,15)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1311.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="82.1485%" y="1285" width="0.0176%" height="15" fill="rgb(219,129,43)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1485%" y="1269" width="0.0176%" height="15" fill="rgb(205,34,45)" fg:x="4657" fg:w="1"/><text x="82.3985%" y="1279.50"></text></g><g><title>StopHTTPServer (1 samples, 0.02%)</title><rect x="82.1662%" y="1429" width="0.0176%" height="15" fill="rgb(251,201,32)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1439.50"></text></g><g><title>std::thread::join (1 samples, 0.02%)</title><rect x="82.1662%" y="1413" width="0.0176%" height="15" fill="rgb(205,56,0)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1423.50"></text></g><g><title>__pthread_clockjoin_ex (1 samples, 0.02%)</title><rect x="82.1662%" y="1397" width="0.0176%" height="15" fill="rgb(211,193,27)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1407.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.02%)</title><rect x="82.1662%" y="1381" width="0.0176%" height="15" fill="rgb(231,100,42)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1365" width="0.0176%" height="15" fill="rgb(245,85,27)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1349" width="0.0176%" height="15" fill="rgb(241,76,24)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1333" width="0.0176%" height="15" fill="rgb(249,157,15)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1317" width="0.0176%" height="15" fill="rgb(222,218,25)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1301" width="0.0176%" height="15" fill="rgb(252,156,52)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1285" width="0.0176%" height="15" fill="rgb(211,185,7)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1269" width="0.0176%" height="15" fill="rgb(234,108,24)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1253" width="0.0176%" height="15" fill="rgb(227,218,2)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1662%" y="1237" width="0.0176%" height="15" fill="rgb(224,0,36)" fg:x="4658" fg:w="1"/><text x="82.4162%" y="1247.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::~CCheckQueue (4 samples, 0.07%)</title><rect x="82.1838%" y="1349" width="0.0706%" height="15" fill="rgb(233,201,10)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1359.50"></text></g><g><title>std::thread::join (4 samples, 0.07%)</title><rect x="82.1838%" y="1333" width="0.0706%" height="15" fill="rgb(252,209,14)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1343.50"></text></g><g><title>__pthread_clockjoin_ex (4 samples, 0.07%)</title><rect x="82.1838%" y="1317" width="0.0706%" height="15" fill="rgb(205,93,49)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1327.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 0.07%)</title><rect x="82.1838%" y="1301" width="0.0706%" height="15" fill="rgb(234,116,45)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1285" width="0.0706%" height="15" fill="rgb(248,89,35)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1269" width="0.0706%" height="15" fill="rgb(233,167,45)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1253" width="0.0706%" height="15" fill="rgb(248,228,14)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1237" width="0.0706%" height="15" fill="rgb(246,91,14)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1221" width="0.0706%" height="15" fill="rgb(227,142,5)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1205" width="0.0706%" height="15" fill="rgb(221,63,33)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1189" width="0.0706%" height="15" fill="rgb(233,49,0)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1173" width="0.0706%" height="15" fill="rgb(251,115,38)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.1838%" y="1157" width="0.0706%" height="15" fill="rgb(231,214,32)" fg:x="4659" fg:w="4"/><text x="82.4338%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.2014%" y="1141" width="0.0529%" height="15" fill="rgb(248,73,46)" fg:x="4660" fg:w="3"/><text x="82.4514%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.2014%" y="1125" width="0.0529%" height="15" fill="rgb(237,156,4)" fg:x="4660" fg:w="3"/><text x="82.4514%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.2014%" y="1109" width="0.0529%" height="15" fill="rgb(227,132,2)" fg:x="4660" fg:w="3"/><text x="82.4514%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.2014%" y="1093" width="0.0529%" height="15" fill="rgb(248,161,9)" fg:x="4660" fg:w="3"/><text x="82.4514%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="82.2014%" y="1077" width="0.0529%" height="15" fill="rgb(238,77,38)" fg:x="4660" fg:w="3"/><text x="82.4514%" y="1087.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="82.2544%" y="1173" width="0.0176%" height="15" fill="rgb(222,166,40)" fg:x="4663" fg:w="1"/><text x="82.5044%" y="1183.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.02%)</title><rect x="82.2720%" y="1173" width="0.0176%" height="15" fill="rgb(214,168,45)" fg:x="4664" fg:w="1"/><text x="82.5220%" y="1183.50"></text></g><g><title>_start (627 samples, 11.06%)</title><rect x="71.2648%" y="1509" width="11.0602%" height="15" fill="rgb(226,64,37)" fg:x="4040" fg:w="627"/><text x="71.5148%" y="1519.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (627 samples, 11.06%)</title><rect x="71.2648%" y="1493" width="11.0602%" height="15" fill="rgb(232,210,43)" fg:x="4040" fg:w="627"/><text x="71.5148%" y="1503.50">__libc_start_mai..</text></g><g><title>__libc_start_call_main (627 samples, 11.06%)</title><rect x="71.2648%" y="1477" width="11.0602%" height="15" fill="rgb(214,76,33)" fg:x="4040" fg:w="627"/><text x="71.5148%" y="1487.50">__libc_start_cal..</text></g><g><title>main (627 samples, 11.06%)</title><rect x="71.2648%" y="1461" width="11.0602%" height="15" fill="rgb(210,78,5)" fg:x="4040" fg:w="627"/><text x="71.5148%" y="1471.50">main</text></g><g><title>Shutdown (627 samples, 11.06%)</title><rect x="71.2648%" y="1445" width="11.0602%" height="15" fill="rgb(211,107,37)" fg:x="4040" fg:w="627"/><text x="71.5148%" y="1455.50">Shutdown</text></g><g><title>std::unique_ptr&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (8 samples, 0.14%)</title><rect x="82.1838%" y="1429" width="0.1411%" height="15" fill="rgb(249,67,16)" fg:x="4659" fg:w="8"/><text x="82.4338%" y="1439.50"></text></g><g><title>std::__uniq_ptr_impl&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (8 samples, 0.14%)</title><rect x="82.1838%" y="1413" width="0.1411%" height="15" fill="rgb(222,114,31)" fg:x="4659" fg:w="8"/><text x="82.4338%" y="1423.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (8 samples, 0.14%)</title><rect x="82.1838%" y="1397" width="0.1411%" height="15" fill="rgb(242,118,19)" fg:x="4659" fg:w="8"/><text x="82.4338%" y="1407.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (8 samples, 0.14%)</title><rect x="82.1838%" y="1381" width="0.1411%" height="15" fill="rgb(223,115,1)" fg:x="4659" fg:w="8"/><text x="82.4338%" y="1391.50"></text></g><g><title>ChainstateManager::~ChainstateManager (8 samples, 0.14%)</title><rect x="82.1838%" y="1365" width="0.1411%" height="15" fill="rgb(241,182,54)" fg:x="4659" fg:w="8"/><text x="82.4338%" y="1375.50"></text></g><g><title>node::BlockManager::~BlockManager (4 samples, 0.07%)</title><rect x="82.2544%" y="1349" width="0.0706%" height="15" fill="rgb(244,166,36)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1359.50"></text></g><g><title>std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::~unordered_map (4 samples, 0.07%)</title><rect x="82.2544%" y="1333" width="0.0706%" height="15" fill="rgb(241,52,43)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1343.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.07%)</title><rect x="82.2544%" y="1317" width="0.0706%" height="15" fill="rgb(236,82,9)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1327.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.07%)</title><rect x="82.2544%" y="1301" width="0.0706%" height="15" fill="rgb(241,119,0)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1311.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (4 samples, 0.07%)</title><rect x="82.2544%" y="1285" width="0.0706%" height="15" fill="rgb(221,19,22)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node (4 samples, 0.07%)</title><rect x="82.2544%" y="1269" width="0.0706%" height="15" fill="rgb(254,144,35)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (4 samples, 0.07%)</title><rect x="82.2544%" y="1253" width="0.0706%" height="15" fill="rgb(246,132,30)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1263.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="82.2544%" y="1237" width="0.0706%" height="15" fill="rgb(234,69,28)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1247.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="82.2544%" y="1221" width="0.0706%" height="15" fill="rgb(219,106,47)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1231.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::deallocate (4 samples, 0.07%)</title><rect x="82.2544%" y="1205" width="0.0706%" height="15" fill="rgb(218,79,24)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="82.2544%" y="1189" width="0.0706%" height="15" fill="rgb(225,26,21)" fg:x="4663" fg:w="4"/><text x="82.5044%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="82.2896%" y="1173" width="0.0353%" height="15" fill="rgb(217,68,49)" fg:x="4665" fg:w="2"/><text x="82.5396%" y="1183.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="82.2896%" y="1157" width="0.0353%" height="15" fill="rgb(220,204,28)" fg:x="4665" fg:w="2"/><text x="82.5396%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="82.3249%" y="1509" width="0.0176%" height="15" fill="rgb(237,208,43)" fg:x="4667" fg:w="1"/><text x="82.5749%" y="1519.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="82.3426%" y="1477" width="0.0706%" height="15" fill="rgb(213,97,42)" fg:x="4668" fg:w="4"/><text x="82.5926%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5 samples, 0.09%)</title><rect x="82.3426%" y="1509" width="0.0882%" height="15" fill="rgb(238,96,52)" fg:x="4668" fg:w="5"/><text x="82.5926%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (5 samples, 0.09%)</title><rect x="82.3426%" y="1493" width="0.0882%" height="15" fill="rgb(228,14,13)" fg:x="4668" fg:w="5"/><text x="82.5926%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="82.4131%" y="1477" width="0.0176%" height="15" fill="rgb(219,123,13)" fg:x="4672" fg:w="1"/><text x="82.6631%" y="1487.50"></text></g><g><title>leveldb::GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="82.4308%" y="1509" width="0.0176%" height="15" fill="rgb(216,144,17)" fg:x="4673" fg:w="1"/><text x="82.6808%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.02%)</title><rect x="82.4484%" y="1461" width="0.0176%" height="15" fill="rgb(230,228,29)" fg:x="4674" fg:w="1"/><text x="82.6984%" y="1471.50"></text></g><g><title>std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="82.4484%" y="1445" width="0.0176%" height="15" fill="rgb(233,18,5)" fg:x="4674" fg:w="1"/><text x="82.6984%" y="1455.50"></text></g><g><title>PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;::deallocate (1 samples, 0.02%)</title><rect x="82.4484%" y="1429" width="0.0176%" height="15" fill="rgb(233,197,12)" fg:x="4674" fg:w="1"/><text x="82.6984%" y="1439.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="82.4484%" y="1413" width="0.0176%" height="15" fill="rgb(234,140,29)" fg:x="4674" fg:w="1"/><text x="82.6984%" y="1423.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::Deallocate (1 samples, 0.02%)</title><rect x="82.4484%" y="1397" width="0.0176%" height="15" fill="rgb(233,113,19)" fg:x="4674" fg:w="1"/><text x="82.6984%" y="1407.50"></text></g><g><title>PoolResource&lt;144ul, 8ul&gt;::PlacementAddToList (1 samples, 0.02%)</title><rect x="82.4484%" y="1381" width="0.0176%" height="15" fill="rgb(246,209,13)" fg:x="4674" fg:w="1"/><text x="82.6984%" y="1391.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (7 samples, 0.12%)</title><rect x="82.4484%" y="1509" width="0.1235%" height="15" fill="rgb(242,79,54)" fg:x="4674" fg:w="7"/><text x="82.6984%" y="1519.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (7 samples, 0.12%)</title><rect x="82.4484%" y="1493" width="0.1235%" height="15" fill="rgb(219,73,16)" fg:x="4674" fg:w="7"/><text x="82.6984%" y="1503.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (7 samples, 0.12%)</title><rect x="82.4484%" y="1477" width="0.1235%" height="15" fill="rgb(224,52,10)" fg:x="4674" fg:w="7"/><text x="82.6984%" y="1487.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (6 samples, 0.11%)</title><rect x="82.4660%" y="1461" width="0.1058%" height="15" fill="rgb(237,179,5)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1471.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (6 samples, 0.11%)</title><rect x="82.4660%" y="1445" width="0.1058%" height="15" fill="rgb(231,20,6)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1455.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (6 samples, 0.11%)</title><rect x="82.4660%" y="1429" width="0.1058%" height="15" fill="rgb(253,171,45)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1439.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (6 samples, 0.11%)</title><rect x="82.4660%" y="1413" width="0.1058%" height="15" fill="rgb(230,75,49)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1423.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (6 samples, 0.11%)</title><rect x="82.4660%" y="1397" width="0.1058%" height="15" fill="rgb(216,83,46)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1407.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (6 samples, 0.11%)</title><rect x="82.4660%" y="1381" width="0.1058%" height="15" fill="rgb(236,56,9)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1391.50"></text></g><g><title>Coin::~Coin (6 samples, 0.11%)</title><rect x="82.4660%" y="1365" width="0.1058%" height="15" fill="rgb(215,28,34)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1375.50"></text></g><g><title>CTxOut::~CTxOut (6 samples, 0.11%)</title><rect x="82.4660%" y="1349" width="0.1058%" height="15" fill="rgb(230,222,20)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1359.50"></text></g><g><title>CScript::~CScript (6 samples, 0.11%)</title><rect x="82.4660%" y="1333" width="0.1058%" height="15" fill="rgb(235,209,51)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1343.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (6 samples, 0.11%)</title><rect x="82.4660%" y="1317" width="0.1058%" height="15" fill="rgb(235,167,1)" fg:x="4675" fg:w="6"/><text x="82.7160%" y="1327.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="82.5542%" y="1301" width="0.0176%" height="15" fill="rgb(248,220,0)" fg:x="4680" fg:w="1"/><text x="82.8042%" y="1311.50"></text></g><g><title>b-shutoff (762 samples, 13.44%)</title><rect x="69.1656%" y="1525" width="13.4415%" height="15" fill="rgb(239,0,18)" fg:x="3921" fg:w="762"/><text x="69.4156%" y="1535.50">b-shutoff</text></g><g><title>unlink_chunk.isra.0 (2 samples, 0.04%)</title><rect x="82.5719%" y="1509" width="0.0353%" height="15" fill="rgb(229,179,11)" fg:x="4681" fg:w="2"/><text x="82.8219%" y="1519.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="82.6072%" y="1509" width="0.0176%" height="15" fill="rgb(226,116,53)" fg:x="4683" fg:w="1"/><text x="82.8572%" y="1519.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="82.6072%" y="1493" width="0.0176%" height="15" fill="rgb(218,1,49)" fg:x="4683" fg:w="1"/><text x="82.8572%" y="1503.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="82.6072%" y="1477" width="0.0176%" height="15" fill="rgb(208,184,47)" fg:x="4683" fg:w="1"/><text x="82.8572%" y="1487.50"></text></g><g><title>leveldb::BlockBuilder::CurrentSizeEstimate (1 samples, 0.02%)</title><rect x="82.6072%" y="1461" width="0.0176%" height="15" fill="rgb(238,174,3)" fg:x="4683" fg:w="1"/><text x="82.8572%" y="1471.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="82.6248%" y="1493" width="0.0176%" height="15" fill="rgb(247,188,6)" fg:x="4684" fg:w="1"/><text x="82.8748%" y="1503.50"></text></g><g><title>__clone (75 samples, 1.32%)</title><rect x="82.6424%" y="1493" width="1.3230%" height="15" fill="rgb(211,165,46)" fg:x="4685" fg:w="75"/><text x="82.8924%" y="1503.50"></text></g><g><title>[unknown] (75 samples, 1.32%)</title><rect x="82.6424%" y="1477" width="1.3230%" height="15" fill="rgb(222,190,10)" fg:x="4685" fg:w="75"/><text x="82.8924%" y="1487.50"></text></g><g><title>[unknown] (72 samples, 1.27%)</title><rect x="82.6954%" y="1461" width="1.2701%" height="15" fill="rgb(206,185,3)" fg:x="4688" fg:w="72"/><text x="82.9454%" y="1471.50"></text></g><g><title>[unknown] (70 samples, 1.23%)</title><rect x="82.7306%" y="1445" width="1.2348%" height="15" fill="rgb(244,125,37)" fg:x="4690" fg:w="70"/><text x="82.9806%" y="1455.50"></text></g><g><title>[unknown] (70 samples, 1.23%)</title><rect x="82.7306%" y="1429" width="1.2348%" height="15" fill="rgb(211,43,7)" fg:x="4690" fg:w="70"/><text x="82.9806%" y="1439.50"></text></g><g><title>[unknown] (69 samples, 1.22%)</title><rect x="82.7483%" y="1413" width="1.2171%" height="15" fill="rgb(250,41,42)" fg:x="4691" fg:w="69"/><text x="82.9983%" y="1423.50"></text></g><g><title>[unknown] (69 samples, 1.22%)</title><rect x="82.7483%" y="1397" width="1.2171%" height="15" fill="rgb(254,54,42)" fg:x="4691" fg:w="69"/><text x="82.9983%" y="1407.50"></text></g><g><title>[unknown] (69 samples, 1.22%)</title><rect x="82.7483%" y="1381" width="1.2171%" height="15" fill="rgb(213,71,43)" fg:x="4691" fg:w="69"/><text x="82.9983%" y="1391.50"></text></g><g><title>[unknown] (68 samples, 1.20%)</title><rect x="82.7659%" y="1365" width="1.1995%" height="15" fill="rgb(249,3,44)" fg:x="4692" fg:w="68"/><text x="83.0159%" y="1375.50"></text></g><g><title>[unknown] (61 samples, 1.08%)</title><rect x="82.8894%" y="1349" width="1.0760%" height="15" fill="rgb(229,80,41)" fg:x="4699" fg:w="61"/><text x="83.1394%" y="1359.50"></text></g><g><title>[unknown] (28 samples, 0.49%)</title><rect x="83.4715%" y="1333" width="0.4939%" height="15" fill="rgb(231,25,28)" fg:x="4732" fg:w="28"/><text x="83.7215%" y="1343.50"></text></g><g><title>[unknown] (13 samples, 0.23%)</title><rect x="83.7361%" y="1317" width="0.2293%" height="15" fill="rgb(208,79,48)" fg:x="4747" fg:w="13"/><text x="83.9861%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="83.8949%" y="1301" width="0.0706%" height="15" fill="rgb(207,196,38)" fg:x="4756" fg:w="4"/><text x="84.1449%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.9478%" y="1285" width="0.0176%" height="15" fill="rgb(228,105,49)" fg:x="4759" fg:w="1"/><text x="84.1978%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.9478%" y="1269" width="0.0176%" height="15" fill="rgb(237,99,15)" fg:x="4759" fg:w="1"/><text x="84.1978%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.9478%" y="1253" width="0.0176%" height="15" fill="rgb(224,207,46)" fg:x="4759" fg:w="1"/><text x="84.1978%" y="1263.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="83.9654%" y="1493" width="0.0176%" height="15" fill="rgb(249,117,50)" fg:x="4760" fg:w="1"/><text x="84.2154%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.04%)</title><rect x="83.9831%" y="1493" width="0.0353%" height="15" fill="rgb(248,17,13)" fg:x="4761" fg:w="2"/><text x="84.2331%" y="1503.50"></text></g><g><title>_int_malloc (6 samples, 0.11%)</title><rect x="84.0183%" y="1493" width="0.1058%" height="15" fill="rgb(228,187,36)" fg:x="4763" fg:w="6"/><text x="84.2683%" y="1503.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="84.1242%" y="1493" width="0.0176%" height="15" fill="rgb(234,132,20)" fg:x="4769" fg:w="1"/><text x="84.3742%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (5 samples, 0.09%)</title><rect x="84.1418%" y="1493" width="0.0882%" height="15" fill="rgb(209,170,46)" fg:x="4770" fg:w="5"/><text x="84.3918%" y="1503.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (4 samples, 0.07%)</title><rect x="84.2300%" y="1493" width="0.0706%" height="15" fill="rgb(237,23,19)" fg:x="4775" fg:w="4"/><text x="84.4800%" y="1503.50"></text></g><g><title>[[heap]] (96 samples, 1.69%)</title><rect x="82.6248%" y="1509" width="1.6934%" height="15" fill="rgb(227,21,26)" fg:x="4684" fg:w="96"/><text x="82.8748%" y="1519.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="84.3006%" y="1493" width="0.0176%" height="15" fill="rgb(222,220,48)" fg:x="4779" fg:w="1"/><text x="84.5506%" y="1503.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="84.3182%" y="1493" width="0.0176%" height="15" fill="rgb(214,9,16)" fg:x="4780" fg:w="1"/><text x="84.5682%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="84.3359%" y="1493" width="0.0176%" height="15" fill="rgb(209,73,30)" fg:x="4781" fg:w="1"/><text x="84.5859%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="84.3535%" y="1493" width="0.0176%" height="15" fill="rgb(207,20,33)" fg:x="4782" fg:w="1"/><text x="84.6035%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="84.3711%" y="1493" width="0.0176%" height="15" fill="rgb(219,153,12)" fg:x="4783" fg:w="1"/><text x="84.6211%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="84.3888%" y="1493" width="0.0353%" height="15" fill="rgb(235,97,25)" fg:x="4784" fg:w="2"/><text x="84.6388%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="84.4241%" y="1493" width="0.0529%" height="15" fill="rgb(244,30,34)" fg:x="4786" fg:w="3"/><text x="84.6741%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="84.4770%" y="1493" width="0.0176%" height="15" fill="rgb(214,106,45)" fg:x="4789" fg:w="1"/><text x="84.7270%" y="1503.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="84.4946%" y="1493" width="0.0176%" height="15" fill="rgb(226,41,9)" fg:x="4790" fg:w="1"/><text x="84.7446%" y="1503.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (1 samples, 0.02%)</title><rect x="84.5123%" y="1493" width="0.0176%" height="15" fill="rgb(253,139,29)" fg:x="4791" fg:w="1"/><text x="84.7623%" y="1503.50"></text></g><g><title>[[stack]] (13 samples, 0.23%)</title><rect x="84.3182%" y="1509" width="0.2293%" height="15" fill="rgb(213,205,39)" fg:x="4780" fg:w="13"/><text x="84.5682%" y="1519.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="84.5299%" y="1493" width="0.0176%" height="15" fill="rgb(209,27,10)" fg:x="4792" fg:w="1"/><text x="84.7799%" y="1503.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="84.5475%" y="1493" width="0.0176%" height="15" fill="rgb(249,142,16)" fg:x="4793" fg:w="1"/><text x="84.7975%" y="1503.50"></text></g><g><title>__memcmp_evex_movbe (6 samples, 0.11%)</title><rect x="84.5652%" y="1493" width="0.1058%" height="15" fill="rgb(242,65,12)" fg:x="4794" fg:w="6"/><text x="84.8152%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (9 samples, 0.16%)</title><rect x="84.6710%" y="1493" width="0.1588%" height="15" fill="rgb(232,48,10)" fg:x="4800" fg:w="9"/><text x="84.9210%" y="1503.50"></text></g><g><title>_itoa_word (1 samples, 0.02%)</title><rect x="84.8298%" y="1493" width="0.0176%" height="15" fill="rgb(253,67,19)" fg:x="4809" fg:w="1"/><text x="85.0798%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="84.8474%" y="1493" width="0.0176%" height="15" fill="rgb(227,93,29)" fg:x="4810" fg:w="1"/><text x="85.0974%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (1 samples, 0.02%)</title><rect x="84.8651%" y="1493" width="0.0176%" height="15" fill="rgb(226,189,53)" fg:x="4811" fg:w="1"/><text x="85.1151%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="84.8827%" y="1493" width="0.0176%" height="15" fill="rgb(223,224,1)" fg:x="4812" fg:w="1"/><text x="85.1327%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1 samples, 0.02%)</title><rect x="84.9003%" y="1493" width="0.0176%" height="15" fill="rgb(221,84,32)" fg:x="4813" fg:w="1"/><text x="85.1503%" y="1503.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="84.9180%" y="1493" width="0.0176%" height="15" fill="rgb(214,189,28)" fg:x="4814" fg:w="1"/><text x="85.1680%" y="1503.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="84.9356%" y="1493" width="0.0176%" height="15" fill="rgb(234,7,52)" fg:x="4815" fg:w="1"/><text x="85.1856%" y="1503.50"></text></g><g><title>leveldb::Hash (2 samples, 0.04%)</title><rect x="84.9533%" y="1493" width="0.0353%" height="15" fill="rgb(249,73,31)" fg:x="4816" fg:w="2"/><text x="85.2033%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (8 samples, 0.14%)</title><rect x="84.9885%" y="1493" width="0.1411%" height="15" fill="rgb(253,153,41)" fg:x="4818" fg:w="8"/><text x="85.2385%" y="1503.50"></text></g><g><title>leveldb::MemTableIterator::value (1 samples, 0.02%)</title><rect x="85.1297%" y="1493" width="0.0176%" height="15" fill="rgb(249,52,34)" fg:x="4826" fg:w="1"/><text x="85.3797%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="85.1473%" y="1493" width="0.0176%" height="15" fill="rgb(236,177,47)" fg:x="4827" fg:w="1"/><text x="85.3973%" y="1503.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1 samples, 0.02%)</title><rect x="85.1649%" y="1493" width="0.0176%" height="15" fill="rgb(252,185,45)" fg:x="4828" fg:w="1"/><text x="85.4149%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="85.1826%" y="1493" width="0.0176%" height="15" fill="rgb(251,15,30)" fg:x="4829" fg:w="1"/><text x="85.4326%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::NumEntries (2 samples, 0.04%)</title><rect x="85.2002%" y="1493" width="0.0353%" height="15" fill="rgb(233,31,4)" fg:x="4830" fg:w="2"/><text x="85.4502%" y="1503.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="85.2355%" y="1493" width="0.0176%" height="15" fill="rgb(254,44,24)" fg:x="4832" fg:w="1"/><text x="85.4855%" y="1503.50"></text></g><g><title>memcpy@plt (3 samples, 0.05%)</title><rect x="85.2531%" y="1493" width="0.0529%" height="15" fill="rgb(218,54,1)" fg:x="4833" fg:w="3"/><text x="85.5031%" y="1503.50"></text></g><g><title>[anon] (44 samples, 0.78%)</title><rect x="84.5475%" y="1509" width="0.7762%" height="15" fill="rgb(243,209,39)" fg:x="4793" fg:w="44"/><text x="84.7975%" y="1519.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.02%)</title><rect x="85.3061%" y="1493" width="0.0176%" height="15" fill="rgb(206,75,33)" fg:x="4836" fg:w="1"/><text x="85.5561%" y="1503.50"></text></g><g><title>[bitcoind-head] (1 samples, 0.02%)</title><rect x="85.3237%" y="1509" width="0.0176%" height="15" fill="rgb(223,108,18)" fg:x="4837" fg:w="1"/><text x="85.5737%" y="1519.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;long&gt; (1 samples, 0.02%)</title><rect x="85.3237%" y="1493" width="0.0176%" height="15" fill="rgb(244,89,31)" fg:x="4837" fg:w="1"/><text x="85.5737%" y="1503.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="85.3590%" y="1493" width="0.0529%" height="15" fill="rgb(222,167,27)" fg:x="4839" fg:w="3"/><text x="85.6090%" y="1503.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.3766%" y="1477" width="0.0353%" height="15" fill="rgb(247,41,16)" fg:x="4840" fg:w="2"/><text x="85.6266%" y="1487.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="85.3766%" y="1461" width="0.0353%" height="15" fill="rgb(233,168,40)" fg:x="4840" fg:w="2"/><text x="85.6266%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1445" width="0.0176%" height="15" fill="rgb(205,211,8)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1429" width="0.0176%" height="15" fill="rgb(238,105,11)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1413" width="0.0176%" height="15" fill="rgb(223,142,52)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1397" width="0.0176%" height="15" fill="rgb(238,51,33)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1381" width="0.0176%" height="15" fill="rgb(231,188,43)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1365" width="0.0176%" height="15" fill="rgb(216,92,17)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1349" width="0.0176%" height="15" fill="rgb(228,2,40)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1333" width="0.0176%" height="15" fill="rgb(226,73,15)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1317" width="0.0176%" height="15" fill="rgb(227,66,46)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1301" width="0.0176%" height="15" fill="rgb(209,71,6)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1285" width="0.0176%" height="15" fill="rgb(246,100,25)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="85.3942%" y="1269" width="0.0176%" height="15" fill="rgb(248,185,27)" fg:x="4841" fg:w="1"/><text x="85.6442%" y="1279.50"></text></g><g><title>__memcmp_evex_movbe (6 samples, 0.11%)</title><rect x="85.4119%" y="1493" width="0.1058%" height="15" fill="rgb(225,118,47)" fg:x="4842" fg:w="6"/><text x="85.6619%" y="1503.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="85.5177%" y="1493" width="0.0176%" height="15" fill="rgb(220,185,44)" fg:x="4848" fg:w="1"/><text x="85.7677%" y="1503.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="85.5354%" y="1493" width="0.0353%" height="15" fill="rgb(227,95,24)" fg:x="4849" fg:w="2"/><text x="85.7854%" y="1503.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="85.5706%" y="1493" width="0.0176%" height="15" fill="rgb(252,84,24)" fg:x="4851" fg:w="1"/><text x="85.8206%" y="1503.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (3 samples, 0.05%)</title><rect x="85.5883%" y="1493" width="0.0529%" height="15" fill="rgb(240,34,44)" fg:x="4852" fg:w="3"/><text x="85.8383%" y="1503.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="85.6412%" y="1493" width="0.0176%" height="15" fill="rgb(209,72,54)" fg:x="4855" fg:w="1"/><text x="85.8912%" y="1503.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (1 samples, 0.02%)</title><rect x="85.6412%" y="1477" width="0.0176%" height="15" fill="rgb(226,19,45)" fg:x="4855" fg:w="1"/><text x="85.8912%" y="1487.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="85.6412%" y="1461" width="0.0176%" height="15" fill="rgb(246,7,45)" fg:x="4855" fg:w="1"/><text x="85.8912%" y="1471.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3 samples, 0.05%)</title><rect x="85.6588%" y="1493" width="0.0529%" height="15" fill="rgb(225,45,2)" fg:x="4856" fg:w="3"/><text x="85.9088%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="85.7118%" y="1493" width="0.0176%" height="15" fill="rgb(221,80,29)" fg:x="4859" fg:w="1"/><text x="85.9618%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="85.7294%" y="1493" width="0.0176%" height="15" fill="rgb(228,11,19)" fg:x="4860" fg:w="1"/><text x="85.9794%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (1 samples, 0.02%)</title><rect x="85.7470%" y="1493" width="0.0176%" height="15" fill="rgb(243,17,21)" fg:x="4861" fg:w="1"/><text x="85.9970%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="85.7647%" y="1493" width="0.0176%" height="15" fill="rgb(243,88,8)" fg:x="4862" fg:w="1"/><text x="86.0147%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="85.7823%" y="1493" width="0.0176%" height="15" fill="rgb(214,17,9)" fg:x="4863" fg:w="1"/><text x="86.0323%" y="1503.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (1 samples, 0.02%)</title><rect x="85.8000%" y="1493" width="0.0176%" height="15" fill="rgb(232,169,15)" fg:x="4864" fg:w="1"/><text x="86.0500%" y="1503.50"></text></g><g><title>leveldb::Hash (2 samples, 0.04%)</title><rect x="85.8176%" y="1493" width="0.0353%" height="15" fill="rgb(232,86,53)" fg:x="4865" fg:w="2"/><text x="86.0676%" y="1503.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="85.8529%" y="1493" width="0.0529%" height="15" fill="rgb(222,100,4)" fg:x="4867" fg:w="3"/><text x="86.1029%" y="1503.50"></text></g><g><title>leveldb::MemTableIterator::Next (2 samples, 0.04%)</title><rect x="85.9058%" y="1493" width="0.0353%" height="15" fill="rgb(253,151,38)" fg:x="4870" fg:w="2"/><text x="86.1558%" y="1503.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="85.9411%" y="1493" width="0.0176%" height="15" fill="rgb(238,215,29)" fg:x="4872" fg:w="1"/><text x="86.1911%" y="1503.50"></text></g><g><title>[unknown] (36 samples, 0.64%)</title><rect x="85.3413%" y="1509" width="0.6350%" height="15" fill="rgb(205,128,53)" fg:x="4838" fg:w="36"/><text x="85.5913%" y="1519.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="85.9587%" y="1493" width="0.0176%" height="15" fill="rgb(248,183,14)" fg:x="4873" fg:w="1"/><text x="86.2087%" y="1503.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="85.9764%" y="1509" width="0.0176%" height="15" fill="rgb(244,172,35)" fg:x="4874" fg:w="1"/><text x="86.2264%" y="1519.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="86.0293%" y="1477" width="0.1235%" height="15" fill="rgb(234,93,19)" fg:x="4877" fg:w="7"/><text x="86.2793%" y="1487.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="86.0293%" y="1461" width="0.1235%" height="15" fill="rgb(227,109,7)" fg:x="4877" fg:w="7"/><text x="86.2793%" y="1471.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="86.0293%" y="1445" width="0.1235%" height="15" fill="rgb(233,136,54)" fg:x="4877" fg:w="7"/><text x="86.2793%" y="1455.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="86.0646%" y="1429" width="0.0882%" height="15" fill="rgb(233,19,40)" fg:x="4879" fg:w="5"/><text x="86.3146%" y="1439.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.1175%" y="1413" width="0.0353%" height="15" fill="rgb(247,41,18)" fg:x="4882" fg:w="2"/><text x="86.3675%" y="1423.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="86.1528%" y="1397" width="0.0353%" height="15" fill="rgb(220,34,34)" fg:x="4884" fg:w="2"/><text x="86.4028%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (2 samples, 0.04%)</title><rect x="86.1880%" y="1397" width="0.0353%" height="15" fill="rgb(222,135,32)" fg:x="4886" fg:w="2"/><text x="86.4380%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="86.2233%" y="1397" width="0.0176%" height="15" fill="rgb(214,80,19)" fg:x="4888" fg:w="1"/><text x="86.4733%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="86.2410%" y="1397" width="0.0176%" height="15" fill="rgb(234,54,46)" fg:x="4889" fg:w="1"/><text x="86.4910%" y="1407.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="86.2410%" y="1381" width="0.0176%" height="15" fill="rgb(251,48,23)" fg:x="4889" fg:w="1"/><text x="86.4910%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.2410%" y="1365" width="0.0176%" height="15" fill="rgb(254,109,52)" fg:x="4889" fg:w="1"/><text x="86.4910%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.2410%" y="1349" width="0.0176%" height="15" fill="rgb(240,186,19)" fg:x="4889" fg:w="1"/><text x="86.4910%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1 samples, 0.02%)</title><rect x="86.2586%" y="1397" width="0.0176%" height="15" fill="rgb(246,187,17)" fg:x="4890" fg:w="1"/><text x="86.5086%" y="1407.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="86.2762%" y="1397" width="0.0176%" height="15" fill="rgb(212,21,5)" fg:x="4891" fg:w="1"/><text x="86.5262%" y="1407.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="86.2762%" y="1381" width="0.0176%" height="15" fill="rgb(225,185,18)" fg:x="4891" fg:w="1"/><text x="86.5262%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="86.2762%" y="1365" width="0.0176%" height="15" fill="rgb(245,114,17)" fg:x="4891" fg:w="1"/><text x="86.5262%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="86.2762%" y="1349" width="0.0176%" height="15" fill="rgb(223,164,24)" fg:x="4891" fg:w="1"/><text x="86.5262%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="86.2762%" y="1333" width="0.0176%" height="15" fill="rgb(211,228,3)" fg:x="4891" fg:w="1"/><text x="86.5262%" y="1343.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="86.2762%" y="1317" width="0.0176%" height="15" fill="rgb(223,16,38)" fg:x="4891" fg:w="1"/><text x="86.5262%" y="1327.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="86.2939%" y="1221" width="0.0176%" height="15" fill="rgb(207,31,54)" fg:x="4892" fg:w="1"/><text x="86.5439%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (9 samples, 0.16%)</title><rect x="86.2939%" y="1381" width="0.1588%" height="15" fill="rgb(220,39,11)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1391.50"></text></g><g><title>__unlink (9 samples, 0.16%)</title><rect x="86.2939%" y="1365" width="0.1588%" height="15" fill="rgb(235,185,0)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1375.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="86.2939%" y="1349" width="0.1588%" height="15" fill="rgb(249,39,18)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1359.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="86.2939%" y="1333" width="0.1588%" height="15" fill="rgb(240,110,33)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1343.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="86.2939%" y="1317" width="0.1588%" height="15" fill="rgb(210,92,42)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1327.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="86.2939%" y="1301" width="0.1588%" height="15" fill="rgb(218,215,28)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1311.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="86.2939%" y="1285" width="0.1588%" height="15" fill="rgb(238,215,36)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1295.50"></text></g><g><title>[[ext4]] (9 samples, 0.16%)</title><rect x="86.2939%" y="1269" width="0.1588%" height="15" fill="rgb(220,31,10)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1279.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="86.2939%" y="1253" width="0.1588%" height="15" fill="rgb(212,93,14)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1263.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="86.2939%" y="1237" width="0.1588%" height="15" fill="rgb(254,207,2)" fg:x="4892" fg:w="9"/><text x="86.5439%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="86.3115%" y="1221" width="0.1411%" height="15" fill="rgb(205,57,44)" fg:x="4893" fg:w="8"/><text x="86.5615%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="86.3644%" y="1205" width="0.0882%" height="15" fill="rgb(226,151,19)" fg:x="4896" fg:w="5"/><text x="86.6144%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.3821%" y="1189" width="0.0706%" height="15" fill="rgb(230,72,30)" fg:x="4897" fg:w="4"/><text x="86.6321%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.4350%" y="1173" width="0.0176%" height="15" fill="rgb(244,0,8)" fg:x="4900" fg:w="1"/><text x="86.6850%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::GetChildren (1 samples, 0.02%)</title><rect x="86.4526%" y="1381" width="0.0176%" height="15" fill="rgb(230,192,6)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1391.50"></text></g><g><title>__GI___readdir64 (1 samples, 0.02%)</title><rect x="86.4526%" y="1365" width="0.0176%" height="15" fill="rgb(233,207,13)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1375.50"></text></g><g><title>__GI___getdents64 (1 samples, 0.02%)</title><rect x="86.4526%" y="1349" width="0.0176%" height="15" fill="rgb(206,227,7)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.4526%" y="1333" width="0.0176%" height="15" fill="rgb(213,217,25)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.4526%" y="1317" width="0.0176%" height="15" fill="rgb(249,75,4)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.4526%" y="1301" width="0.0176%" height="15" fill="rgb(225,114,18)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.4526%" y="1285" width="0.0176%" height="15" fill="rgb(211,162,40)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1295.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1269" width="0.0176%" height="15" fill="rgb(206,49,29)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1279.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1253" width="0.0176%" height="15" fill="rgb(244,8,6)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1263.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1237" width="0.0176%" height="15" fill="rgb(231,194,28)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1247.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1221" width="0.0176%" height="15" fill="rgb(210,69,5)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1231.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1205" width="0.0176%" height="15" fill="rgb(216,186,12)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1189" width="0.0176%" height="15" fill="rgb(238,61,15)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1173" width="0.0176%" height="15" fill="rgb(226,104,1)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1157" width="0.0176%" height="15" fill="rgb(229,128,15)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="86.4526%" y="1141" width="0.0176%" height="15" fill="rgb(247,110,15)" fg:x="4901" fg:w="1"/><text x="86.7026%" y="1151.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (13 samples, 0.23%)</title><rect x="86.2939%" y="1397" width="0.2293%" height="15" fill="rgb(210,74,48)" fg:x="4892" fg:w="13"/><text x="86.5439%" y="1407.50"></text></g><g><title>leveldb::TableCache::Evict (3 samples, 0.05%)</title><rect x="86.4703%" y="1381" width="0.0529%" height="15" fill="rgb(246,121,10)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1391.50"></text></g><g><title>Erase (3 samples, 0.05%)</title><rect x="86.4703%" y="1365" width="0.0529%" height="15" fill="rgb(214,156,37)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (3 samples, 0.05%)</title><rect x="86.4703%" y="1349" width="0.0529%" height="15" fill="rgb(214,210,34)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::FinishErase (3 samples, 0.05%)</title><rect x="86.4703%" y="1333" width="0.0529%" height="15" fill="rgb(237,93,35)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::LRUCache::Unref (3 samples, 0.05%)</title><rect x="86.4703%" y="1317" width="0.0529%" height="15" fill="rgb(206,36,8)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1327.50"></text></g><g><title>leveldb::DeleteEntry (3 samples, 0.05%)</title><rect x="86.4703%" y="1301" width="0.0529%" height="15" fill="rgb(208,151,12)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1311.50"></text></g><g><title>~PosixMmapReadableFile (3 samples, 0.05%)</title><rect x="86.4703%" y="1285" width="0.0529%" height="15" fill="rgb(225,133,52)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (3 samples, 0.05%)</title><rect x="86.4703%" y="1269" width="0.0529%" height="15" fill="rgb(231,71,53)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1279.50"></text></g><g><title>__munmap (3 samples, 0.05%)</title><rect x="86.4703%" y="1253" width="0.0529%" height="15" fill="rgb(243,76,21)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1237" width="0.0529%" height="15" fill="rgb(252,144,3)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1221" width="0.0529%" height="15" fill="rgb(231,199,10)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1205" width="0.0529%" height="15" fill="rgb(215,18,11)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1189" width="0.0529%" height="15" fill="rgb(241,65,24)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1173" width="0.0529%" height="15" fill="rgb(251,192,38)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1157" width="0.0529%" height="15" fill="rgb(205,9,35)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1141" width="0.0529%" height="15" fill="rgb(229,225,49)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1125" width="0.0529%" height="15" fill="rgb(207,125,39)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.4703%" y="1109" width="0.0529%" height="15" fill="rgb(222,78,19)" fg:x="4902" fg:w="3"/><text x="86.7203%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.4879%" y="1093" width="0.0353%" height="15" fill="rgb(248,207,20)" fg:x="4903" fg:w="2"/><text x="86.7379%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.4879%" y="1077" width="0.0353%" height="15" fill="rgb(205,103,49)" fg:x="4903" fg:w="2"/><text x="86.7379%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.4879%" y="1061" width="0.0353%" height="15" fill="rgb(216,42,28)" fg:x="4903" fg:w="2"/><text x="86.7379%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.5056%" y="1045" width="0.0176%" height="15" fill="rgb(213,205,53)" fg:x="4904" fg:w="1"/><text x="86.7556%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.5056%" y="1029" width="0.0176%" height="15" fill="rgb(239,140,53)" fg:x="4904" fg:w="1"/><text x="86.7556%" y="1039.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="86.5232%" y="1285" width="0.0176%" height="15" fill="rgb(248,95,9)" fg:x="4905" fg:w="1"/><text x="86.7732%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="86.5232%" y="1269" width="0.0176%" height="15" fill="rgb(254,58,47)" fg:x="4905" fg:w="1"/><text x="86.7732%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="86.5232%" y="1253" width="0.0176%" height="15" fill="rgb(234,227,14)" fg:x="4905" fg:w="1"/><text x="86.7732%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="86.5232%" y="1237" width="0.0176%" height="15" fill="rgb(205,192,45)" fg:x="4905" fg:w="1"/><text x="86.7732%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="86.5232%" y="1221" width="0.0176%" height="15" fill="rgb(253,187,31)" fg:x="4905" fg:w="1"/><text x="86.7732%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="86.5408%" y="1253" width="0.0176%" height="15" fill="rgb(222,6,32)" fg:x="4906" fg:w="1"/><text x="86.7908%" y="1263.50"></text></g><g><title>Next (3 samples, 0.05%)</title><rect x="86.5232%" y="1317" width="0.0529%" height="15" fill="rgb(249,190,19)" fg:x="4905" fg:w="3"/><text x="86.7732%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.05%)</title><rect x="86.5232%" y="1301" width="0.0529%" height="15" fill="rgb(251,28,20)" fg:x="4905" fg:w="3"/><text x="86.7732%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.04%)</title><rect x="86.5408%" y="1285" width="0.0353%" height="15" fill="rgb(210,223,40)" fg:x="4906" fg:w="2"/><text x="86.7908%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.04%)</title><rect x="86.5408%" y="1269" width="0.0353%" height="15" fill="rgb(216,137,22)" fg:x="4906" fg:w="2"/><text x="86.7908%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="86.5585%" y="1253" width="0.0176%" height="15" fill="rgb(247,39,34)" fg:x="4907" fg:w="1"/><text x="86.8085%" y="1263.50"></text></g><g><title>leveldb::GetVarint64Ptr (1 samples, 0.02%)</title><rect x="86.5761%" y="1253" width="0.0176%" height="15" fill="rgb(239,43,50)" fg:x="4908" fg:w="1"/><text x="86.8261%" y="1263.50"></text></g><g><title>leveldb::crc32c::Unmask (2 samples, 0.04%)</title><rect x="86.5938%" y="1237" width="0.0353%" height="15" fill="rgb(241,212,9)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5938%" y="1221" width="0.0353%" height="15" fill="rgb(205,8,2)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5938%" y="1205" width="0.0353%" height="15" fill="rgb(217,173,54)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5938%" y="1189" width="0.0353%" height="15" fill="rgb(208,149,52)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5938%" y="1173" width="0.0353%" height="15" fill="rgb(239,99,40)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5938%" y="1157" width="0.0353%" height="15" fill="rgb(233,214,26)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5938%" y="1141" width="0.0353%" height="15" fill="rgb(231,225,37)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="86.5938%" y="1125" width="0.0353%" height="15" fill="rgb(252,55,35)" fg:x="4909" fg:w="2"/><text x="86.8438%" y="1135.50"></text></g><g><title>SkipEmptyDataBlocksForward (6 samples, 0.11%)</title><rect x="86.5761%" y="1317" width="0.1058%" height="15" fill="rgb(239,43,18)" fg:x="4908" fg:w="6"/><text x="86.8261%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (6 samples, 0.11%)</title><rect x="86.5761%" y="1301" width="0.1058%" height="15" fill="rgb(251,125,49)" fg:x="4908" fg:w="6"/><text x="86.8261%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (6 samples, 0.11%)</title><rect x="86.5761%" y="1285" width="0.1058%" height="15" fill="rgb(212,83,54)" fg:x="4908" fg:w="6"/><text x="86.8261%" y="1295.50"></text></g><g><title>leveldb::Table::BlockReader (6 samples, 0.11%)</title><rect x="86.5761%" y="1269" width="0.1058%" height="15" fill="rgb(250,75,6)" fg:x="4908" fg:w="6"/><text x="86.8261%" y="1279.50"></text></g><g><title>leveldb::ReadBlock (5 samples, 0.09%)</title><rect x="86.5938%" y="1253" width="0.0882%" height="15" fill="rgb(252,36,40)" fg:x="4909" fg:w="5"/><text x="86.8438%" y="1263.50"></text></g><g><title>leveldb::crc32c::Value (3 samples, 0.05%)</title><rect x="86.6290%" y="1237" width="0.0529%" height="15" fill="rgb(230,91,51)" fg:x="4911" fg:w="3"/><text x="86.8790%" y="1247.50"></text></g><g><title>crc32c::ExtendSse42 (3 samples, 0.05%)</title><rect x="86.6290%" y="1221" width="0.0529%" height="15" fill="rgb(212,92,28)" fg:x="4911" fg:w="3"/><text x="86.8790%" y="1231.50"></text></g><g><title>_mm_crc32_u64 (2 samples, 0.04%)</title><rect x="86.6467%" y="1205" width="0.0353%" height="15" fill="rgb(227,13,22)" fg:x="4912" fg:w="2"/><text x="86.8967%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Valid (1 samples, 0.02%)</title><rect x="86.6820%" y="1317" width="0.0176%" height="15" fill="rgb(239,204,32)" fg:x="4914" fg:w="1"/><text x="86.9320%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="86.6996%" y="1317" width="0.0176%" height="15" fill="rgb(228,49,41)" fg:x="4915" fg:w="1"/><text x="86.9496%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.7172%" y="1317" width="0.0176%" height="15" fill="rgb(206,95,6)" fg:x="4916" fg:w="1"/><text x="86.9672%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="86.7172%" y="1301" width="0.0176%" height="15" fill="rgb(251,20,14)" fg:x="4916" fg:w="1"/><text x="86.9672%" y="1311.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="86.7172%" y="1285" width="0.0176%" height="15" fill="rgb(214,99,28)" fg:x="4916" fg:w="1"/><text x="86.9672%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="86.7172%" y="1269" width="0.0176%" height="15" fill="rgb(239,122,54)" fg:x="4916" fg:w="1"/><text x="86.9672%" y="1279.50"></text></g><g><title>Next (13 samples, 0.23%)</title><rect x="86.5232%" y="1349" width="0.2293%" height="15" fill="rgb(218,217,46)" fg:x="4905" fg:w="13"/><text x="86.7732%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (13 samples, 0.23%)</title><rect x="86.5232%" y="1333" width="0.2293%" height="15" fill="rgb(249,106,28)" fg:x="4905" fg:w="13"/><text x="86.7732%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="86.7349%" y="1317" width="0.0176%" height="15" fill="rgb(250,158,18)" fg:x="4917" fg:w="1"/><text x="86.9849%" y="1327.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="86.7525%" y="1301" width="0.0176%" height="15" fill="rgb(226,137,29)" fg:x="4918" fg:w="1"/><text x="87.0025%" y="1311.50"></text></g><g><title>leveldb::Slice::data (1 samples, 0.02%)</title><rect x="86.7525%" y="1285" width="0.0176%" height="15" fill="rgb(210,188,1)" fg:x="4918" fg:w="1"/><text x="87.0025%" y="1295.50"></text></g><g><title>leveldb::crc32c::Unmask (1 samples, 0.02%)</title><rect x="86.7702%" y="1269" width="0.0176%" height="15" fill="rgb(227,84,42)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1253" width="0.0176%" height="15" fill="rgb(222,147,48)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1237" width="0.0176%" height="15" fill="rgb(241,150,43)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1221" width="0.0176%" height="15" fill="rgb(206,139,52)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1205" width="0.0176%" height="15" fill="rgb(230,63,14)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1189" width="0.0176%" height="15" fill="rgb(247,8,20)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1173" width="0.0176%" height="15" fill="rgb(213,115,4)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1157" width="0.0176%" height="15" fill="rgb(241,79,49)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="86.7702%" y="1141" width="0.0176%" height="15" fill="rgb(222,42,35)" fg:x="4919" fg:w="1"/><text x="87.0202%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (8 samples, 0.14%)</title><rect x="86.7525%" y="1317" width="0.1411%" height="15" fill="rgb(247,59,23)" fg:x="4918" fg:w="8"/><text x="87.0025%" y="1327.50"></text></g><g><title>leveldb::Table::BlockReader (7 samples, 0.12%)</title><rect x="86.7702%" y="1301" width="0.1235%" height="15" fill="rgb(247,93,18)" fg:x="4919" fg:w="7"/><text x="87.0202%" y="1311.50"></text></g><g><title>leveldb::ReadBlock (7 samples, 0.12%)</title><rect x="86.7702%" y="1285" width="0.1235%" height="15" fill="rgb(249,107,47)" fg:x="4919" fg:w="7"/><text x="87.0202%" y="1295.50"></text></g><g><title>leveldb::crc32c::Value (6 samples, 0.11%)</title><rect x="86.7878%" y="1269" width="0.1058%" height="15" fill="rgb(219,27,1)" fg:x="4920" fg:w="6"/><text x="87.0378%" y="1279.50"></text></g><g><title>crc32c::ExtendSse42 (6 samples, 0.11%)</title><rect x="86.7878%" y="1253" width="0.1058%" height="15" fill="rgb(217,82,32)" fg:x="4920" fg:w="6"/><text x="87.0378%" y="1263.50"></text></g><g><title>_mm_crc32_u64 (5 samples, 0.09%)</title><rect x="86.8054%" y="1237" width="0.0882%" height="15" fill="rgb(250,129,47)" fg:x="4921" fg:w="5"/><text x="87.0554%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1221" width="0.0706%" height="15" fill="rgb(253,88,35)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1205" width="0.0706%" height="15" fill="rgb(245,221,14)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1189" width="0.0706%" height="15" fill="rgb(217,119,54)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1173" width="0.0706%" height="15" fill="rgb(247,128,31)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1157" width="0.0706%" height="15" fill="rgb(211,99,22)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1141" width="0.0706%" height="15" fill="rgb(212,20,17)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1125" width="0.0706%" height="15" fill="rgb(209,159,29)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="86.8231%" y="1109" width="0.0706%" height="15" fill="rgb(222,177,53)" fg:x="4922" fg:w="4"/><text x="87.0731%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.8407%" y="1093" width="0.0529%" height="15" fill="rgb(234,46,43)" fg:x="4923" fg:w="3"/><text x="87.0907%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.8407%" y="1077" width="0.0529%" height="15" fill="rgb(208,108,14)" fg:x="4923" fg:w="3"/><text x="87.0907%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.8407%" y="1061" width="0.0529%" height="15" fill="rgb(226,78,53)" fg:x="4923" fg:w="3"/><text x="87.0907%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.8407%" y="1045" width="0.0529%" height="15" fill="rgb(230,20,41)" fg:x="4923" fg:w="3"/><text x="87.0907%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="86.8407%" y="1029" width="0.0529%" height="15" fill="rgb(213,195,35)" fg:x="4923" fg:w="3"/><text x="87.0907%" y="1039.50"></text></g><g><title>SkipEmptyDataBlocksForward (9 samples, 0.16%)</title><rect x="86.7525%" y="1349" width="0.1588%" height="15" fill="rgb(242,62,36)" fg:x="4918" fg:w="9"/><text x="87.0025%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (9 samples, 0.16%)</title><rect x="86.7525%" y="1333" width="0.1588%" height="15" fill="rgb(222,210,37)" fg:x="4918" fg:w="9"/><text x="87.0025%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.02%)</title><rect x="86.8936%" y="1317" width="0.0176%" height="15" fill="rgb(232,107,19)" fg:x="4926" fg:w="1"/><text x="87.1436%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="86.9113%" y="1349" width="0.0176%" height="15" fill="rgb(235,85,17)" fg:x="4927" fg:w="1"/><text x="87.1613%" y="1359.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (5 samples, 0.09%)</title><rect x="86.9289%" y="1349" width="0.0882%" height="15" fill="rgb(219,195,31)" fg:x="4928" fg:w="5"/><text x="87.1789%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="87.0171%" y="1349" width="0.0176%" height="15" fill="rgb(231,183,30)" fg:x="4933" fg:w="1"/><text x="87.2671%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.0348%" y="1349" width="0.0176%" height="15" fill="rgb(212,0,11)" fg:x="4934" fg:w="1"/><text x="87.2848%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="87.0524%" y="1349" width="0.0176%" height="15" fill="rgb(249,53,54)" fg:x="4935" fg:w="1"/><text x="87.3024%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::FileSize (1 samples, 0.02%)</title><rect x="87.0700%" y="1349" width="0.0176%" height="15" fill="rgb(211,118,13)" fg:x="4936" fg:w="1"/><text x="87.3200%" y="1359.50"></text></g><g><title>Next (33 samples, 0.58%)</title><rect x="86.5232%" y="1381" width="0.5821%" height="15" fill="rgb(237,42,9)" fg:x="4905" fg:w="33"/><text x="86.7732%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (33 samples, 0.58%)</title><rect x="86.5232%" y="1365" width="0.5821%" height="15" fill="rgb(227,68,32)" fg:x="4905" fg:w="33"/><text x="86.7732%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="87.0877%" y="1349" width="0.0176%" height="15" fill="rgb(238,10,7)" fg:x="4937" fg:w="1"/><text x="87.3377%" y="1359.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="87.1053%" y="1381" width="0.0176%" height="15" fill="rgb(224,42,12)" fg:x="4938" fg:w="1"/><text x="87.3553%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="87.1229%" y="1381" width="0.0176%" height="15" fill="rgb(252,190,5)" fg:x="4939" fg:w="1"/><text x="87.3729%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="87.1406%" y="1381" width="0.0353%" height="15" fill="rgb(220,214,39)" fg:x="4940" fg:w="2"/><text x="87.3906%" y="1391.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (2 samples, 0.04%)</title><rect x="87.1759%" y="1381" width="0.0353%" height="15" fill="rgb(247,98,4)" fg:x="4942" fg:w="2"/><text x="87.4259%" y="1391.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.04%)</title><rect x="87.2111%" y="1349" width="0.0353%" height="15" fill="rgb(211,60,12)" fg:x="4944" fg:w="2"/><text x="87.4611%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="87.2288%" y="1333" width="0.0176%" height="15" fill="rgb(224,42,10)" fg:x="4945" fg:w="1"/><text x="87.4788%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::Valid (1 samples, 0.02%)</title><rect x="87.2464%" y="1349" width="0.0176%" height="15" fill="rgb(217,167,4)" fg:x="4946" fg:w="1"/><text x="87.4964%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="87.2641%" y="1333" width="0.0176%" height="15" fill="rgb(253,18,17)" fg:x="4947" fg:w="1"/><text x="87.5141%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="87.2641%" y="1317" width="0.0176%" height="15" fill="rgb(249,186,44)" fg:x="4947" fg:w="1"/><text x="87.5141%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.2641%" y="1301" width="0.0176%" height="15" fill="rgb(254,124,54)" fg:x="4947" fg:w="1"/><text x="87.5141%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.2641%" y="1285" width="0.0176%" height="15" fill="rgb(220,124,39)" fg:x="4947" fg:w="1"/><text x="87.5141%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (5 samples, 0.09%)</title><rect x="87.2111%" y="1365" width="0.0882%" height="15" fill="rgb(225,96,46)" fg:x="4944" fg:w="5"/><text x="87.4611%" y="1375.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="87.2641%" y="1349" width="0.0353%" height="15" fill="rgb(221,106,12)" fg:x="4947" fg:w="2"/><text x="87.5141%" y="1359.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="87.2817%" y="1333" width="0.0176%" height="15" fill="rgb(227,133,23)" fg:x="4948" fg:w="1"/><text x="87.5317%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="87.2993%" y="1365" width="0.0176%" height="15" fill="rgb(216,44,52)" fg:x="4949" fg:w="1"/><text x="87.5493%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="87.3170%" y="1365" width="0.0176%" height="15" fill="rgb(239,149,7)" fg:x="4950" fg:w="1"/><text x="87.5670%" y="1375.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="87.3170%" y="1349" width="0.0176%" height="15" fill="rgb(211,157,31)" fg:x="4950" fg:w="1"/><text x="87.5670%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (8 samples, 0.14%)</title><rect x="87.2111%" y="1381" width="0.1411%" height="15" fill="rgb(206,215,22)" fg:x="4944" fg:w="8"/><text x="87.4611%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="87.3346%" y="1365" width="0.0176%" height="15" fill="rgb(208,113,15)" fg:x="4951" fg:w="1"/><text x="87.5846%" y="1375.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.3346%" y="1349" width="0.0176%" height="15" fill="rgb(207,189,15)" fg:x="4951" fg:w="1"/><text x="87.5846%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.3346%" y="1333" width="0.0176%" height="15" fill="rgb(231,115,4)" fg:x="4951" fg:w="1"/><text x="87.5846%" y="1343.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="87.3346%" y="1317" width="0.0176%" height="15" fill="rgb(253,117,2)" fg:x="4951" fg:w="1"/><text x="87.5846%" y="1327.50"></text></g><g><title>DecodeEntry (1 samples, 0.02%)</title><rect x="87.3346%" y="1301" width="0.0176%" height="15" fill="rgb(248,48,24)" fg:x="4951" fg:w="1"/><text x="87.5846%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1 samples, 0.02%)</title><rect x="87.3523%" y="1381" width="0.0176%" height="15" fill="rgb(241,28,46)" fg:x="4952" fg:w="1"/><text x="87.6023%" y="1391.50"></text></g><g><title>leveldb::IteratorWrapper::value (1 samples, 0.02%)</title><rect x="87.3523%" y="1365" width="0.0176%" height="15" fill="rgb(216,165,52)" fg:x="4952" fg:w="1"/><text x="87.6023%" y="1375.50"></text></g><g><title>value (1 samples, 0.02%)</title><rect x="87.3523%" y="1349" width="0.0176%" height="15" fill="rgb(220,222,34)" fg:x="4952" fg:w="1"/><text x="87.6023%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::value (1 samples, 0.02%)</title><rect x="87.3523%" y="1333" width="0.0176%" height="15" fill="rgb(247,222,49)" fg:x="4952" fg:w="1"/><text x="87.6023%" y="1343.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="87.3523%" y="1317" width="0.0176%" height="15" fill="rgb(240,10,31)" fg:x="4952" fg:w="1"/><text x="87.6023%" y="1327.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (2 samples, 0.04%)</title><rect x="87.3699%" y="1381" width="0.0353%" height="15" fill="rgb(221,199,35)" fg:x="4953" fg:w="2"/><text x="87.6199%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="87.3875%" y="1365" width="0.0176%" height="15" fill="rgb(230,223,11)" fg:x="4954" fg:w="1"/><text x="87.6375%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="87.3875%" y="1349" width="0.0176%" height="15" fill="rgb(218,82,45)" fg:x="4954" fg:w="1"/><text x="87.6375%" y="1359.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (2 samples, 0.04%)</title><rect x="87.4052%" y="1365" width="0.0353%" height="15" fill="rgb(233,213,33)" fg:x="4955" fg:w="2"/><text x="87.6552%" y="1375.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (3 samples, 0.05%)</title><rect x="87.4052%" y="1381" width="0.0529%" height="15" fill="rgb(210,143,52)" fg:x="4955" fg:w="3"/><text x="87.6552%" y="1391.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="87.4405%" y="1365" width="0.0176%" height="15" fill="rgb(206,95,4)" fg:x="4957" fg:w="1"/><text x="87.6905%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="87.4405%" y="1349" width="0.0176%" height="15" fill="rgb(246,164,46)" fg:x="4957" fg:w="1"/><text x="87.6905%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="87.4405%" y="1333" width="0.0176%" height="15" fill="rgb(213,210,47)" fg:x="4957" fg:w="1"/><text x="87.6905%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="87.4405%" y="1317" width="0.0176%" height="15" fill="rgb(210,12,38)" fg:x="4957" fg:w="1"/><text x="87.6905%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="87.4405%" y="1301" width="0.0176%" height="15" fill="rgb(252,192,54)" fg:x="4957" fg:w="1"/><text x="87.6905%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="87.4405%" y="1285" width="0.0176%" height="15" fill="rgb(242,92,6)" fg:x="4957" fg:w="1"/><text x="87.6905%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.02%)</title><rect x="87.5463%" y="1365" width="0.0176%" height="15" fill="rgb(253,154,15)" fg:x="4963" fg:w="1"/><text x="87.7963%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="87.5639%" y="1349" width="0.0176%" height="15" fill="rgb(209,20,43)" fg:x="4964" fg:w="1"/><text x="87.8139%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::key (1 samples, 0.02%)</title><rect x="87.5639%" y="1333" width="0.0176%" height="15" fill="rgb(232,28,49)" fg:x="4964" fg:w="1"/><text x="87.8139%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (2 samples, 0.04%)</title><rect x="87.5816%" y="1349" width="0.0353%" height="15" fill="rgb(248,131,53)" fg:x="4965" fg:w="2"/><text x="87.8316%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.04%)</title><rect x="87.5816%" y="1333" width="0.0353%" height="15" fill="rgb(214,16,30)" fg:x="4965" fg:w="2"/><text x="87.8316%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.04%)</title><rect x="87.5816%" y="1317" width="0.0353%" height="15" fill="rgb(245,16,0)" fg:x="4965" fg:w="2"/><text x="87.8316%" y="1327.50"></text></g><g><title>leveldb::IteratorWrapper::Update (2 samples, 0.04%)</title><rect x="87.5816%" y="1301" width="0.0353%" height="15" fill="rgb(245,17,35)" fg:x="4965" fg:w="2"/><text x="87.8316%" y="1311.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (10 samples, 0.18%)</title><rect x="87.4581%" y="1381" width="0.1764%" height="15" fill="rgb(249,27,53)" fg:x="4958" fg:w="10"/><text x="87.7081%" y="1391.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="87.5639%" y="1365" width="0.0706%" height="15" fill="rgb(214,73,24)" fg:x="4964" fg:w="4"/><text x="87.8139%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (1 samples, 0.02%)</title><rect x="87.6169%" y="1349" width="0.0176%" height="15" fill="rgb(223,84,37)" fg:x="4967" fg:w="1"/><text x="87.8669%" y="1359.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="87.6169%" y="1333" width="0.0176%" height="15" fill="rgb(210,109,28)" fg:x="4967" fg:w="1"/><text x="87.8669%" y="1343.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="87.6169%" y="1317" width="0.0176%" height="15" fill="rgb(208,186,6)" fg:x="4967" fg:w="1"/><text x="87.8669%" y="1327.50"></text></g><g><title>[[jbd2]] (1 samples, 0.02%)</title><rect x="87.6521%" y="1189" width="0.0176%" height="15" fill="rgb(235,201,30)" fg:x="4969" fg:w="1"/><text x="87.9021%" y="1199.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (7 samples, 0.12%)</title><rect x="87.6345%" y="1365" width="0.1235%" height="15" fill="rgb(216,198,48)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (7 samples, 0.12%)</title><rect x="87.6345%" y="1349" width="0.1235%" height="15" fill="rgb(254,186,25)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1359.50"></text></g><g><title>__unlink (7 samples, 0.12%)</title><rect x="87.6345%" y="1333" width="0.1235%" height="15" fill="rgb(227,87,5)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1343.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="87.6345%" y="1317" width="0.1235%" height="15" fill="rgb(236,205,25)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1327.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="87.6345%" y="1301" width="0.1235%" height="15" fill="rgb(229,99,32)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1311.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="87.6345%" y="1285" width="0.1235%" height="15" fill="rgb(231,177,31)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="87.6345%" y="1269" width="0.1235%" height="15" fill="rgb(246,15,2)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="87.6345%" y="1253" width="0.1235%" height="15" fill="rgb(207,39,15)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1263.50"></text></g><g><title>[[ext4]] (7 samples, 0.12%)</title><rect x="87.6345%" y="1237" width="0.1235%" height="15" fill="rgb(207,44,9)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1247.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="87.6345%" y="1221" width="0.1235%" height="15" fill="rgb(225,224,33)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1231.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="87.6345%" y="1205" width="0.1235%" height="15" fill="rgb(252,151,3)" fg:x="4968" fg:w="7"/><text x="87.8845%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.6698%" y="1189" width="0.0882%" height="15" fill="rgb(211,140,13)" fg:x="4970" fg:w="5"/><text x="87.9198%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.6698%" y="1173" width="0.0882%" height="15" fill="rgb(239,225,17)" fg:x="4970" fg:w="5"/><text x="87.9198%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="87.6698%" y="1157" width="0.0882%" height="15" fill="rgb(223,170,52)" fg:x="4970" fg:w="5"/><text x="87.9198%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.6874%" y="1141" width="0.0706%" height="15" fill="rgb(212,64,21)" fg:x="4971" fg:w="4"/><text x="87.9374%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.6874%" y="1125" width="0.0706%" height="15" fill="rgb(236,126,48)" fg:x="4971" fg:w="4"/><text x="87.9374%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.6874%" y="1109" width="0.0706%" height="15" fill="rgb(209,135,11)" fg:x="4971" fg:w="4"/><text x="87.9374%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.6874%" y="1093" width="0.0706%" height="15" fill="rgb(228,126,40)" fg:x="4971" fg:w="4"/><text x="87.9374%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="87.6874%" y="1077" width="0.0706%" height="15" fill="rgb(205,196,36)" fg:x="4971" fg:w="4"/><text x="87.9374%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7051%" y="1061" width="0.0529%" height="15" fill="rgb(243,160,33)" fg:x="4972" fg:w="3"/><text x="87.9551%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7051%" y="1045" width="0.0529%" height="15" fill="rgb(210,84,20)" fg:x="4972" fg:w="3"/><text x="87.9551%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7051%" y="1029" width="0.0529%" height="15" fill="rgb(228,213,30)" fg:x="4972" fg:w="3"/><text x="87.9551%" y="1039.50"></text></g><g><title>Sync (3 samples, 0.05%)</title><rect x="87.7756%" y="1333" width="0.0529%" height="15" fill="rgb(252,33,45)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (3 samples, 0.05%)</title><rect x="87.7756%" y="1317" width="0.0529%" height="15" fill="rgb(254,227,20)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1327.50"></text></g><g><title>fdatasync (3 samples, 0.05%)</title><rect x="87.7756%" y="1301" width="0.0529%" height="15" fill="rgb(228,192,2)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7756%" y="1285" width="0.0529%" height="15" fill="rgb(233,32,8)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7756%" y="1269" width="0.0529%" height="15" fill="rgb(220,146,47)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7756%" y="1253" width="0.0529%" height="15" fill="rgb(246,194,1)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1263.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="87.7756%" y="1237" width="0.0529%" height="15" fill="rgb(218,203,9)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7756%" y="1221" width="0.0529%" height="15" fill="rgb(237,97,14)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7756%" y="1205" width="0.0529%" height="15" fill="rgb(239,76,15)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7756%" y="1189" width="0.0529%" height="15" fill="rgb(222,53,45)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="87.7756%" y="1173" width="0.0529%" height="15" fill="rgb(237,88,5)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1183.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="87.7756%" y="1157" width="0.0529%" height="15" fill="rgb(218,223,35)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1167.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="87.7756%" y="1141" width="0.0529%" height="15" fill="rgb(243,229,38)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1151.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="87.7756%" y="1125" width="0.0529%" height="15" fill="rgb(240,75,41)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1135.50"></text></g><g><title>[[ext4]] (3 samples, 0.05%)</title><rect x="87.7756%" y="1109" width="0.0529%" height="15" fill="rgb(209,110,37)" fg:x="4976" fg:w="3"/><text x="88.0256%" y="1119.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="87.7933%" y="1093" width="0.0353%" height="15" fill="rgb(221,130,46)" fg:x="4977" fg:w="2"/><text x="88.0433%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.7933%" y="1077" width="0.0353%" height="15" fill="rgb(237,160,20)" fg:x="4977" fg:w="2"/><text x="88.0433%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="1061" width="0.0176%" height="15" fill="rgb(234,126,24)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="1045" width="0.0176%" height="15" fill="rgb(207,177,9)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="1029" width="0.0176%" height="15" fill="rgb(231,191,33)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="1013" width="0.0176%" height="15" fill="rgb(207,42,1)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="1023.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="87.8109%" y="997" width="0.0176%" height="15" fill="rgb(218,34,50)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="1007.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="87.8109%" y="981" width="0.0176%" height="15" fill="rgb(254,126,39)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="965" width="0.0176%" height="15" fill="rgb(251,17,26)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="949" width="0.0176%" height="15" fill="rgb(252,215,34)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="933" width="0.0176%" height="15" fill="rgb(217,120,44)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="917" width="0.0176%" height="15" fill="rgb(211,31,11)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="901" width="0.0176%" height="15" fill="rgb(222,69,51)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.8109%" y="885" width="0.0176%" height="15" fill="rgb(215,229,42)" fg:x="4978" fg:w="1"/><text x="88.0609%" y="895.50"></text></g><g><title>leveldb::BlockBuilder::Add (1 samples, 0.02%)</title><rect x="87.8285%" y="1333" width="0.0176%" height="15" fill="rgb(212,102,15)" fg:x="4979" fg:w="1"/><text x="88.0785%" y="1343.50"></text></g><g><title>leveldb::operator== (1 samples, 0.02%)</title><rect x="87.8285%" y="1317" width="0.0176%" height="15" fill="rgb(205,179,41)" fg:x="4979" fg:w="1"/><text x="88.0785%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="87.8462%" y="1317" width="0.0176%" height="15" fill="rgb(219,148,46)" fg:x="4980" fg:w="1"/><text x="88.0962%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (19 samples, 0.34%)</title><rect x="87.8991%" y="1301" width="0.3352%" height="15" fill="rgb(243,40,19)" fg:x="4983" fg:w="19"/><text x="88.1491%" y="1311.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (11 samples, 0.19%)</title><rect x="88.0402%" y="1285" width="0.1940%" height="15" fill="rgb(208,206,34)" fg:x="4991" fg:w="11"/><text x="88.2902%" y="1295.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="88.2166%" y="1269" width="0.0176%" height="15" fill="rgb(244,184,38)" fg:x="5001" fg:w="1"/><text x="88.4666%" y="1279.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="88.2343%" y="1301" width="0.0176%" height="15" fill="rgb(244,151,47)" fg:x="5002" fg:w="1"/><text x="88.4843%" y="1311.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="88.2343%" y="1285" width="0.0176%" height="15" fill="rgb(236,134,42)" fg:x="5002" fg:w="1"/><text x="88.4843%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="88.2519%" y="1301" width="0.0176%" height="15" fill="rgb(233,93,22)" fg:x="5003" fg:w="1"/><text x="88.5019%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="88.2519%" y="1285" width="0.0176%" height="15" fill="rgb(211,202,10)" fg:x="5003" fg:w="1"/><text x="88.5019%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="88.2519%" y="1269" width="0.0176%" height="15" fill="rgb(240,63,8)" fg:x="5003" fg:w="1"/><text x="88.5019%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="88.2519%" y="1253" width="0.0176%" height="15" fill="rgb(214,9,4)" fg:x="5003" fg:w="1"/><text x="88.5019%" y="1263.50"></text></g><g><title>leveldb::operator== (3 samples, 0.05%)</title><rect x="88.2695%" y="1301" width="0.0529%" height="15" fill="rgb(243,66,45)" fg:x="5004" fg:w="3"/><text x="88.5195%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="88.2695%" y="1285" width="0.0529%" height="15" fill="rgb(220,50,42)" fg:x="5004" fg:w="3"/><text x="88.5195%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4 samples, 0.07%)</title><rect x="88.3225%" y="1301" width="0.0706%" height="15" fill="rgb(220,134,27)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4 samples, 0.07%)</title><rect x="88.3225%" y="1285" width="0.0706%" height="15" fill="rgb(246,151,50)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.07%)</title><rect x="88.3225%" y="1269" width="0.0706%" height="15" fill="rgb(238,216,27)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (4 samples, 0.07%)</title><rect x="88.3225%" y="1253" width="0.0706%" height="15" fill="rgb(250,92,11)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (4 samples, 0.07%)</title><rect x="88.3225%" y="1237" width="0.0706%" height="15" fill="rgb(248,183,6)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1247.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4 samples, 0.07%)</title><rect x="88.3225%" y="1221" width="0.0706%" height="15" fill="rgb(211,204,50)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="88.3225%" y="1205" width="0.0706%" height="15" fill="rgb(252,55,47)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="88.3225%" y="1189" width="0.0706%" height="15" fill="rgb(240,198,32)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="88.3225%" y="1173" width="0.0706%" height="15" fill="rgb(224,203,19)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="88.3225%" y="1157" width="0.0706%" height="15" fill="rgb(205,27,16)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="88.3225%" y="1141" width="0.0706%" height="15" fill="rgb(224,226,17)" fg:x="5007" fg:w="4"/><text x="88.5725%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1125" width="0.0529%" height="15" fill="rgb(205,216,54)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1109" width="0.0529%" height="15" fill="rgb(248,168,46)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1093" width="0.0529%" height="15" fill="rgb(226,111,45)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1077" width="0.0529%" height="15" fill="rgb(231,15,9)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1061" width="0.0529%" height="15" fill="rgb(243,168,3)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1045" width="0.0529%" height="15" fill="rgb(221,220,54)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1029" width="0.0529%" height="15" fill="rgb(232,174,38)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="88.3401%" y="1013" width="0.0529%" height="15" fill="rgb(205,14,38)" fg:x="5008" fg:w="3"/><text x="88.5901%" y="1023.50"></text></g><g><title>leveldb::BlockBuilder::Add (32 samples, 0.56%)</title><rect x="87.8638%" y="1317" width="0.5645%" height="15" fill="rgb(234,89,19)" fg:x="4981" fg:w="32"/><text x="88.1138%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (2 samples, 0.04%)</title><rect x="88.3930%" y="1301" width="0.0353%" height="15" fill="rgb(216,68,51)" fg:x="5011" fg:w="2"/><text x="88.6430%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (2 samples, 0.04%)</title><rect x="88.3930%" y="1285" width="0.0353%" height="15" fill="rgb(213,49,2)" fg:x="5011" fg:w="2"/><text x="88.6430%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (2 samples, 0.04%)</title><rect x="88.3930%" y="1269" width="0.0353%" height="15" fill="rgb(242,146,30)" fg:x="5011" fg:w="2"/><text x="88.6430%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="88.4107%" y="1253" width="0.0176%" height="15" fill="rgb(224,188,11)" fg:x="5012" fg:w="1"/><text x="88.6607%" y="1263.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="88.4107%" y="1237" width="0.0176%" height="15" fill="rgb(213,159,11)" fg:x="5012" fg:w="1"/><text x="88.6607%" y="1247.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="88.4283%" y="1317" width="0.0176%" height="15" fill="rgb(229,13,31)" fg:x="5013" fg:w="1"/><text x="88.6783%" y="1327.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="88.4283%" y="1301" width="0.0176%" height="15" fill="rgb(209,103,11)" fg:x="5013" fg:w="1"/><text x="88.6783%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="88.4283%" y="1285" width="0.0176%" height="15" fill="rgb(206,3,4)" fg:x="5013" fg:w="1"/><text x="88.6783%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="88.4283%" y="1269" width="0.0176%" height="15" fill="rgb(252,10,49)" fg:x="5013" fg:w="1"/><text x="88.6783%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="88.4283%" y="1253" width="0.0176%" height="15" fill="rgb(217,160,32)" fg:x="5013" fg:w="1"/><text x="88.6783%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="88.4283%" y="1237" width="0.0176%" height="15" fill="rgb(249,196,0)" fg:x="5013" fg:w="1"/><text x="88.6783%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="88.4283%" y="1221" width="0.0176%" height="15" fill="rgb(213,17,48)" fg:x="5013" fg:w="1"/><text x="88.6783%" y="1231.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="88.4459%" y="1317" width="0.0176%" height="15" fill="rgb(206,42,46)" fg:x="5014" fg:w="1"/><text x="88.6959%" y="1327.50"></text></g><g><title>BloomHash (1 samples, 0.02%)</title><rect x="88.5165%" y="1269" width="0.0176%" height="15" fill="rgb(212,105,24)" fg:x="5018" fg:w="1"/><text x="88.7665%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (2 samples, 0.04%)</title><rect x="88.5341%" y="1253" width="0.0353%" height="15" fill="rgb(243,216,30)" fg:x="5019" fg:w="2"/><text x="88.7841%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (6 samples, 0.11%)</title><rect x="88.4812%" y="1285" width="0.1058%" height="15" fill="rgb(207,121,3)" fg:x="5016" fg:w="6"/><text x="88.7312%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (3 samples, 0.05%)</title><rect x="88.5341%" y="1269" width="0.0529%" height="15" fill="rgb(249,78,0)" fg:x="5019" fg:w="3"/><text x="88.7841%" y="1279.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="88.5694%" y="1253" width="0.0176%" height="15" fill="rgb(244,151,32)" fg:x="5021" fg:w="1"/><text x="88.8194%" y="1263.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (9 samples, 0.16%)</title><rect x="88.4636%" y="1317" width="0.1588%" height="15" fill="rgb(228,63,25)" fg:x="5015" fg:w="9"/><text x="88.7136%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (9 samples, 0.16%)</title><rect x="88.4636%" y="1301" width="0.1588%" height="15" fill="rgb(231,158,23)" fg:x="5015" fg:w="9"/><text x="88.7136%" y="1311.50"></text></g><g><title>leveldb::Hash (2 samples, 0.04%)</title><rect x="88.5871%" y="1285" width="0.0353%" height="15" fill="rgb(248,107,23)" fg:x="5022" fg:w="2"/><text x="88.8371%" y="1295.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="88.6223%" y="1317" width="0.0176%" height="15" fill="rgb(215,168,21)" fg:x="5024" fg:w="1"/><text x="88.8723%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="88.6400%" y="1317" width="0.0176%" height="15" fill="rgb(227,83,22)" fg:x="5025" fg:w="1"/><text x="88.8900%" y="1327.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="88.6400%" y="1301" width="0.0176%" height="15" fill="rgb(217,118,43)" fg:x="5025" fg:w="1"/><text x="88.8900%" y="1311.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="88.7105%" y="1077" width="0.0176%" height="15" fill="rgb(229,220,41)" fg:x="5029" fg:w="1"/><text x="88.9605%" y="1087.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="88.7105%" y="1093" width="0.0353%" height="15" fill="rgb(254,146,46)" fg:x="5029" fg:w="2"/><text x="88.9605%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7282%" y="1077" width="0.0176%" height="15" fill="rgb(233,208,31)" fg:x="5030" fg:w="1"/><text x="88.9782%" y="1087.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="88.7282%" y="1061" width="0.0176%" height="15" fill="rgb(222,162,7)" fg:x="5030" fg:w="1"/><text x="88.9782%" y="1071.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="88.6929%" y="1125" width="0.0706%" height="15" fill="rgb(230,117,45)" fg:x="5028" fg:w="4"/><text x="88.9429%" y="1135.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="88.6929%" y="1109" width="0.0706%" height="15" fill="rgb(239,163,6)" fg:x="5028" fg:w="4"/><text x="88.9429%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7458%" y="1093" width="0.0176%" height="15" fill="rgb(246,130,17)" fg:x="5031" fg:w="1"/><text x="88.9958%" y="1103.50"></text></g><g><title>[[ext4]] (15 samples, 0.26%)</title><rect x="88.6929%" y="1141" width="0.2646%" height="15" fill="rgb(216,84,5)" fg:x="5028" fg:w="15"/><text x="88.9429%" y="1151.50"></text></g><g><title>[unknown] (11 samples, 0.19%)</title><rect x="88.7635%" y="1125" width="0.1940%" height="15" fill="rgb(230,200,21)" fg:x="5032" fg:w="11"/><text x="89.0135%" y="1135.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="88.7987%" y="1109" width="0.1588%" height="15" fill="rgb(224,2,8)" fg:x="5034" fg:w="9"/><text x="89.0487%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="88.8164%" y="1093" width="0.1411%" height="15" fill="rgb(238,178,10)" fg:x="5035" fg:w="8"/><text x="89.0664%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="88.8164%" y="1077" width="0.1411%" height="15" fill="rgb(242,153,24)" fg:x="5035" fg:w="8"/><text x="89.0664%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="88.8693%" y="1061" width="0.0882%" height="15" fill="rgb(242,32,48)" fg:x="5038" fg:w="5"/><text x="89.1193%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="88.9222%" y="1045" width="0.0353%" height="15" fill="rgb(227,36,0)" fg:x="5041" fg:w="2"/><text x="89.1722%" y="1055.50"></text></g><g><title>leveldb::TableBuilder::Add (65 samples, 1.15%)</title><rect x="87.8462%" y="1333" width="1.1466%" height="15" fill="rgb(251,33,35)" fg:x="4980" fg:w="65"/><text x="88.0962%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Flush (19 samples, 0.34%)</title><rect x="88.6576%" y="1317" width="0.3352%" height="15" fill="rgb(232,168,51)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1327.50"></text></g><g><title>Flush (19 samples, 0.34%)</title><rect x="88.6576%" y="1301" width="0.3352%" height="15" fill="rgb(228,56,10)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1311.50"></text></g><g><title>FlushBuffer (19 samples, 0.34%)</title><rect x="88.6576%" y="1285" width="0.3352%" height="15" fill="rgb(231,10,26)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (19 samples, 0.34%)</title><rect x="88.6576%" y="1269" width="0.3352%" height="15" fill="rgb(226,202,12)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1279.50"></text></g><g><title>__GI___libc_write (19 samples, 0.34%)</title><rect x="88.6576%" y="1253" width="0.3352%" height="15" fill="rgb(251,49,21)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1263.50"></text></g><g><title>[unknown] (19 samples, 0.34%)</title><rect x="88.6576%" y="1237" width="0.3352%" height="15" fill="rgb(206,228,28)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1247.50"></text></g><g><title>[unknown] (19 samples, 0.34%)</title><rect x="88.6576%" y="1221" width="0.3352%" height="15" fill="rgb(205,198,31)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1231.50"></text></g><g><title>[unknown] (19 samples, 0.34%)</title><rect x="88.6576%" y="1205" width="0.3352%" height="15" fill="rgb(213,69,1)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1215.50"></text></g><g><title>[unknown] (19 samples, 0.34%)</title><rect x="88.6576%" y="1189" width="0.3352%" height="15" fill="rgb(209,177,9)" fg:x="5026" fg:w="19"/><text x="88.9076%" y="1199.50"></text></g><g><title>[[ext4]] (17 samples, 0.30%)</title><rect x="88.6929%" y="1173" width="0.2999%" height="15" fill="rgb(227,119,30)" fg:x="5028" fg:w="17"/><text x="88.9429%" y="1183.50"></text></g><g><title>[unknown] (17 samples, 0.30%)</title><rect x="88.6929%" y="1157" width="0.2999%" height="15" fill="rgb(234,106,41)" fg:x="5028" fg:w="17"/><text x="88.9429%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="88.9575%" y="1141" width="0.0353%" height="15" fill="rgb(244,103,47)" fg:x="5043" fg:w="2"/><text x="89.2075%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9751%" y="1125" width="0.0176%" height="15" fill="rgb(212,211,25)" fg:x="5044" fg:w="1"/><text x="89.2251%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9751%" y="1109" width="0.0176%" height="15" fill="rgb(208,63,53)" fg:x="5044" fg:w="1"/><text x="89.2251%" y="1119.50"></text></g><g><title>leveldb::TableBuilder::Finish (1 samples, 0.02%)</title><rect x="88.9928%" y="1333" width="0.0176%" height="15" fill="rgb(213,176,21)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="88.9928%" y="1317" width="0.0176%" height="15" fill="rgb(243,124,12)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1327.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="88.9928%" y="1301" width="0.0176%" height="15" fill="rgb(239,2,35)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="88.9928%" y="1285" width="0.0176%" height="15" fill="rgb(253,169,22)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1295.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="88.9928%" y="1269" width="0.0176%" height="15" fill="rgb(254,51,12)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9928%" y="1253" width="0.0176%" height="15" fill="rgb(244,17,47)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9928%" y="1237" width="0.0176%" height="15" fill="rgb(251,45,46)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9928%" y="1221" width="0.0176%" height="15" fill="rgb(223,87,43)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9928%" y="1205" width="0.0176%" height="15" fill="rgb(230,132,31)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="88.9928%" y="1189" width="0.0176%" height="15" fill="rgb(206,99,1)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9928%" y="1173" width="0.0176%" height="15" fill="rgb(227,110,25)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9928%" y="1157" width="0.0176%" height="15" fill="rgb(217,182,7)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.9928%" y="1141" width="0.0176%" height="15" fill="rgb(250,176,4)" fg:x="5045" fg:w="1"/><text x="89.2428%" y="1151.50"></text></g><g><title>leveldb::BuildTable (73 samples, 1.29%)</title><rect x="87.7580%" y="1349" width="1.2877%" height="15" fill="rgb(244,98,30)" fg:x="4975" fg:w="73"/><text x="88.0080%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::status (2 samples, 0.04%)</title><rect x="89.0104%" y="1333" width="0.0353%" height="15" fill="rgb(228,150,42)" fg:x="5046" fg:w="2"/><text x="89.2604%" y="1343.50"></text></g><g><title>leveldb::Status::Status (2 samples, 0.04%)</title><rect x="89.0104%" y="1317" width="0.0353%" height="15" fill="rgb(231,91,46)" fg:x="5046" fg:w="2"/><text x="89.2604%" y="1327.50"></text></g><g><title>leveldb::DBImpl::CompactMemTable (81 samples, 1.43%)</title><rect x="87.6345%" y="1381" width="1.4288%" height="15" fill="rgb(252,161,32)" fg:x="4968" fg:w="81"/><text x="87.8845%" y="1391.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (74 samples, 1.31%)</title><rect x="87.7580%" y="1365" width="1.3053%" height="15" fill="rgb(236,69,41)" fg:x="4975" fg:w="74"/><text x="88.0080%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="89.0457%" y="1349" width="0.0176%" height="15" fill="rgb(212,160,3)" fg:x="5048" fg:w="1"/><text x="89.2957%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="89.0986%" y="1317" width="0.0176%" height="15" fill="rgb(216,5,50)" fg:x="5051" fg:w="1"/><text x="89.3486%" y="1327.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (2 samples, 0.04%)</title><rect x="89.0986%" y="1365" width="0.0353%" height="15" fill="rgb(241,138,25)" fg:x="5051" fg:w="2"/><text x="89.3486%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.04%)</title><rect x="89.0986%" y="1349" width="0.0353%" height="15" fill="rgb(239,42,18)" fg:x="5051" fg:w="2"/><text x="89.3486%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.04%)</title><rect x="89.0986%" y="1333" width="0.0353%" height="15" fill="rgb(239,40,7)" fg:x="5051" fg:w="2"/><text x="89.3486%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="89.1162%" y="1317" width="0.0176%" height="15" fill="rgb(239,11,31)" fg:x="5052" fg:w="1"/><text x="89.3662%" y="1327.50"></text></g><g><title>leveldb::ParseInternalKey (1 samples, 0.02%)</title><rect x="89.1339%" y="1365" width="0.0176%" height="15" fill="rgb(224,77,40)" fg:x="5053" fg:w="1"/><text x="89.3839%" y="1375.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (7 samples, 0.12%)</title><rect x="89.0633%" y="1381" width="0.1235%" height="15" fill="rgb(226,15,5)" fg:x="5049" fg:w="7"/><text x="89.3133%" y="1391.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.04%)</title><rect x="89.1515%" y="1365" width="0.0353%" height="15" fill="rgb(254,188,5)" fg:x="5054" fg:w="2"/><text x="89.4015%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.04%)</title><rect x="89.1515%" y="1349" width="0.0353%" height="15" fill="rgb(241,148,52)" fg:x="5054" fg:w="2"/><text x="89.4015%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="89.1692%" y="1333" width="0.0176%" height="15" fill="rgb(251,48,36)" fg:x="5055" fg:w="1"/><text x="89.4192%" y="1343.50"></text></g><g><title>[[jbd2]] (4 samples, 0.07%)</title><rect x="89.1868%" y="1253" width="0.0706%" height="15" fill="rgb(243,83,13)" fg:x="5056" fg:w="4"/><text x="89.4368%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.1868%" y="1237" width="0.0706%" height="15" fill="rgb(210,105,0)" fg:x="5056" fg:w="4"/><text x="89.4368%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1221" width="0.0529%" height="15" fill="rgb(239,60,36)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1205" width="0.0529%" height="15" fill="rgb(210,20,0)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1189" width="0.0529%" height="15" fill="rgb(244,26,53)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1173" width="0.0529%" height="15" fill="rgb(240,100,49)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1157" width="0.0529%" height="15" fill="rgb(250,46,45)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1141" width="0.0529%" height="15" fill="rgb(220,181,29)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1125" width="0.0529%" height="15" fill="rgb(213,137,33)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1109" width="0.0529%" height="15" fill="rgb(213,27,48)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.2044%" y="1093" width="0.0529%" height="15" fill="rgb(245,180,39)" fg:x="5057" fg:w="3"/><text x="89.4544%" y="1103.50"></text></g><g><title>[[ext4]] (10 samples, 0.18%)</title><rect x="89.2750%" y="1125" width="0.1764%" height="15" fill="rgb(212,158,42)" fg:x="5061" fg:w="10"/><text x="89.5250%" y="1135.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="89.2750%" y="1109" width="0.1764%" height="15" fill="rgb(228,193,18)" fg:x="5061" fg:w="10"/><text x="89.5250%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="89.3279%" y="1093" width="0.1235%" height="15" fill="rgb(245,172,29)" fg:x="5064" fg:w="7"/><text x="89.5779%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="89.3985%" y="1077" width="0.0529%" height="15" fill="rgb(207,98,24)" fg:x="5068" fg:w="3"/><text x="89.6485%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.4161%" y="1061" width="0.0353%" height="15" fill="rgb(249,92,26)" fg:x="5069" fg:w="2"/><text x="89.6661%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4338%" y="1045" width="0.0176%" height="15" fill="rgb(217,176,26)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="1055.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="89.4338%" y="1029" width="0.0176%" height="15" fill="rgb(221,8,39)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="1039.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="89.4338%" y="1013" width="0.0176%" height="15" fill="rgb(208,90,18)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4338%" y="997" width="0.0176%" height="15" fill="rgb(207,202,30)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4338%" y="981" width="0.0176%" height="15" fill="rgb(231,124,22)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4338%" y="965" width="0.0176%" height="15" fill="rgb(206,15,5)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4338%" y="949" width="0.0176%" height="15" fill="rgb(239,16,52)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4338%" y="933" width="0.0176%" height="15" fill="rgb(245,213,29)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.4338%" y="917" width="0.0176%" height="15" fill="rgb(213,203,36)" fg:x="5070" fg:w="1"/><text x="89.6838%" y="927.50"></text></g><g><title>[[ext4]] (13 samples, 0.23%)</title><rect x="89.2574%" y="1189" width="0.2293%" height="15" fill="rgb(209,55,18)" fg:x="5060" fg:w="13"/><text x="89.5074%" y="1199.50"></text></g><g><title>[[ext4]] (13 samples, 0.23%)</title><rect x="89.2574%" y="1173" width="0.2293%" height="15" fill="rgb(207,133,49)" fg:x="5060" fg:w="13"/><text x="89.5074%" y="1183.50"></text></g><g><title>[[ext4]] (13 samples, 0.23%)</title><rect x="89.2574%" y="1157" width="0.2293%" height="15" fill="rgb(240,33,46)" fg:x="5060" fg:w="13"/><text x="89.5074%" y="1167.50"></text></g><g><title>[[ext4]] (13 samples, 0.23%)</title><rect x="89.2574%" y="1141" width="0.2293%" height="15" fill="rgb(212,35,2)" fg:x="5060" fg:w="13"/><text x="89.5074%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.4514%" y="1125" width="0.0353%" height="15" fill="rgb(231,119,28)" fg:x="5071" fg:w="2"/><text x="89.7014%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="89.4514%" y="1109" width="0.0353%" height="15" fill="rgb(252,178,7)" fg:x="5071" fg:w="2"/><text x="89.7014%" y="1119.50"></text></g><g><title>Sync (24 samples, 0.42%)</title><rect x="89.1868%" y="1365" width="0.4234%" height="15" fill="rgb(251,91,4)" fg:x="5056" fg:w="24"/><text x="89.4368%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (24 samples, 0.42%)</title><rect x="89.1868%" y="1349" width="0.4234%" height="15" fill="rgb(233,122,19)" fg:x="5056" fg:w="24"/><text x="89.4368%" y="1359.50"></text></g><g><title>fdatasync (24 samples, 0.42%)</title><rect x="89.1868%" y="1333" width="0.4234%" height="15" fill="rgb(231,208,46)" fg:x="5056" fg:w="24"/><text x="89.4368%" y="1343.50"></text></g><g><title>[unknown] (24 samples, 0.42%)</title><rect x="89.1868%" y="1317" width="0.4234%" height="15" fill="rgb(243,15,41)" fg:x="5056" fg:w="24"/><text x="89.4368%" y="1327.50"></text></g><g><title>[unknown] (24 samples, 0.42%)</title><rect x="89.1868%" y="1301" width="0.4234%" height="15" fill="rgb(210,32,43)" fg:x="5056" fg:w="24"/><text x="89.4368%" y="1311.50"></text></g><g><title>[unknown] (24 samples, 0.42%)</title><rect x="89.1868%" y="1285" width="0.4234%" height="15" fill="rgb(222,177,15)" fg:x="5056" fg:w="24"/><text x="89.4368%" y="1295.50"></text></g><g><title>[[ext4]] (24 samples, 0.42%)</title><rect x="89.1868%" y="1269" width="0.4234%" height="15" fill="rgb(244,121,34)" fg:x="5056" fg:w="24"/><text x="89.4368%" y="1279.50"></text></g><g><title>[unknown] (20 samples, 0.35%)</title><rect x="89.2574%" y="1253" width="0.3528%" height="15" fill="rgb(234,138,4)" fg:x="5060" fg:w="20"/><text x="89.5074%" y="1263.50"></text></g><g><title>[unknown] (20 samples, 0.35%)</title><rect x="89.2574%" y="1237" width="0.3528%" height="15" fill="rgb(240,97,48)" fg:x="5060" fg:w="20"/><text x="89.5074%" y="1247.50"></text></g><g><title>[unknown] (20 samples, 0.35%)</title><rect x="89.2574%" y="1221" width="0.3528%" height="15" fill="rgb(237,65,54)" fg:x="5060" fg:w="20"/><text x="89.5074%" y="1231.50"></text></g><g><title>[unknown] (20 samples, 0.35%)</title><rect x="89.2574%" y="1205" width="0.3528%" height="15" fill="rgb(214,25,24)" fg:x="5060" fg:w="20"/><text x="89.5074%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="89.4867%" y="1189" width="0.1235%" height="15" fill="rgb(213,5,3)" fg:x="5073" fg:w="7"/><text x="89.7367%" y="1199.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="89.4867%" y="1173" width="0.1235%" height="15" fill="rgb(219,81,29)" fg:x="5073" fg:w="7"/><text x="89.7367%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="89.4867%" y="1157" width="0.1235%" height="15" fill="rgb(220,43,48)" fg:x="5073" fg:w="7"/><text x="89.7367%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="89.4867%" y="1141" width="0.1235%" height="15" fill="rgb(239,157,2)" fg:x="5073" fg:w="7"/><text x="89.7367%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="89.5043%" y="1125" width="0.1058%" height="15" fill="rgb(213,104,43)" fg:x="5074" fg:w="6"/><text x="89.7543%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.5396%" y="1109" width="0.0706%" height="15" fill="rgb(237,84,9)" fg:x="5076" fg:w="4"/><text x="89.7896%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.5396%" y="1093" width="0.0706%" height="15" fill="rgb(252,6,33)" fg:x="5076" fg:w="4"/><text x="89.7896%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.5396%" y="1077" width="0.0706%" height="15" fill="rgb(251,172,22)" fg:x="5076" fg:w="4"/><text x="89.7896%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="89.5396%" y="1061" width="0.0706%" height="15" fill="rgb(244,91,53)" fg:x="5076" fg:w="4"/><text x="89.7896%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5925%" y="1045" width="0.0176%" height="15" fill="rgb(219,29,30)" fg:x="5079" fg:w="1"/><text x="89.8425%" y="1055.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (25 samples, 0.44%)</title><rect x="89.1868%" y="1381" width="0.4410%" height="15" fill="rgb(213,3,15)" fg:x="5056" fg:w="25"/><text x="89.4368%" y="1391.50"></text></g><g><title>leveldb::TableBuilder::Finish (1 samples, 0.02%)</title><rect x="89.6102%" y="1365" width="0.0176%" height="15" fill="rgb(208,25,28)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.02%)</title><rect x="89.6102%" y="1349" width="0.0176%" height="15" fill="rgb(252,144,25)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1359.50"></text></g><g><title>Append (1 samples, 0.02%)</title><rect x="89.6102%" y="1333" width="0.0176%" height="15" fill="rgb(226,220,25)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="89.6102%" y="1317" width="0.0176%" height="15" fill="rgb(212,131,28)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1327.50"></text></g><g><title>__GI___libc_write (1 samples, 0.02%)</title><rect x="89.6102%" y="1301" width="0.0176%" height="15" fill="rgb(219,143,52)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1285" width="0.0176%" height="15" fill="rgb(215,56,7)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1269" width="0.0176%" height="15" fill="rgb(239,59,51)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1253" width="0.0176%" height="15" fill="rgb(209,215,4)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1237" width="0.0176%" height="15" fill="rgb(221,118,39)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1247.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6102%" y="1221" width="0.0176%" height="15" fill="rgb(236,6,44)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1205" width="0.0176%" height="15" fill="rgb(216,122,9)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6102%" y="1189" width="0.0176%" height="15" fill="rgb(244,134,42)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1173" width="0.0176%" height="15" fill="rgb(209,189,35)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1157" width="0.0176%" height="15" fill="rgb(250,47,36)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6102%" y="1141" width="0.0176%" height="15" fill="rgb(252,112,4)" fg:x="5080" fg:w="1"/><text x="89.8602%" y="1151.50"></text></g><g><title>leveldb::DBImpl::OpenCompactionOutputFile (1 samples, 0.02%)</title><rect x="89.6278%" y="1381" width="0.0176%" height="15" fill="rgb(221,79,51)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1391.50"></text></g><g><title>NewWritableFile (1 samples, 0.02%)</title><rect x="89.6278%" y="1365" width="0.0176%" height="15" fill="rgb(232,65,53)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (1 samples, 0.02%)</title><rect x="89.6278%" y="1349" width="0.0176%" height="15" fill="rgb(211,37,7)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1359.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="89.6278%" y="1333" width="0.0176%" height="15" fill="rgb(234,221,18)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1317" width="0.0176%" height="15" fill="rgb(220,158,26)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1301" width="0.0176%" height="15" fill="rgb(220,70,6)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1285" width="0.0176%" height="15" fill="rgb(250,39,48)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1269" width="0.0176%" height="15" fill="rgb(206,40,27)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1253" width="0.0176%" height="15" fill="rgb(247,80,36)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1237" width="0.0176%" height="15" fill="rgb(222,9,20)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1247.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6278%" y="1221" width="0.0176%" height="15" fill="rgb(217,26,45)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1231.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6278%" y="1205" width="0.0176%" height="15" fill="rgb(221,67,14)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1215.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6278%" y="1189" width="0.0176%" height="15" fill="rgb(248,100,24)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6278%" y="1173" width="0.0176%" height="15" fill="rgb(230,187,16)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1183.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6278%" y="1157" width="0.0176%" height="15" fill="rgb(205,108,13)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="89.6278%" y="1141" width="0.0176%" height="15" fill="rgb(235,71,51)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1125" width="0.0176%" height="15" fill="rgb(251,172,48)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.6278%" y="1109" width="0.0176%" height="15" fill="rgb(240,96,49)" fg:x="5081" fg:w="1"/><text x="89.8778%" y="1119.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="89.6454%" y="1381" width="0.0353%" height="15" fill="rgb(235,46,36)" fg:x="5082" fg:w="2"/><text x="89.8954%" y="1391.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="89.6984%" y="1365" width="0.0176%" height="15" fill="rgb(244,3,49)" fg:x="5085" fg:w="1"/><text x="89.9484%" y="1375.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="89.7160%" y="1365" width="0.0176%" height="15" fill="rgb(206,78,54)" fg:x="5086" fg:w="1"/><text x="89.9660%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (2 samples, 0.04%)</title><rect x="89.7336%" y="1365" width="0.0353%" height="15" fill="rgb(208,85,42)" fg:x="5087" fg:w="2"/><text x="89.9836%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::value (1 samples, 0.02%)</title><rect x="89.7513%" y="1349" width="0.0176%" height="15" fill="rgb(219,196,21)" fg:x="5088" fg:w="1"/><text x="90.0013%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::value (2 samples, 0.04%)</title><rect x="89.7689%" y="1365" width="0.0353%" height="15" fill="rgb(238,19,9)" fg:x="5089" fg:w="2"/><text x="90.0189%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="89.9630%" y="1349" width="0.0176%" height="15" fill="rgb(206,86,13)" fg:x="5100" fg:w="1"/><text x="90.2130%" y="1359.50"></text></g><g><title>leveldb::BlockBuilder::Add (2 samples, 0.04%)</title><rect x="89.9806%" y="1349" width="0.0353%" height="15" fill="rgb(214,123,40)" fg:x="5101" fg:w="2"/><text x="90.2306%" y="1359.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (3 samples, 0.05%)</title><rect x="90.0159%" y="1349" width="0.0529%" height="15" fill="rgb(243,53,5)" fg:x="5103" fg:w="3"/><text x="90.2659%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="90.0512%" y="1333" width="0.0176%" height="15" fill="rgb(254,186,31)" fg:x="5105" fg:w="1"/><text x="90.3012%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="90.0512%" y="1317" width="0.0176%" height="15" fill="rgb(221,216,25)" fg:x="5105" fg:w="1"/><text x="90.3012%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="90.0512%" y="1301" width="0.0176%" height="15" fill="rgb(248,107,42)" fg:x="5105" fg:w="1"/><text x="90.3012%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="90.0512%" y="1285" width="0.0176%" height="15" fill="rgb(221,85,43)" fg:x="5105" fg:w="1"/><text x="90.3012%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="90.0512%" y="1269" width="0.0176%" height="15" fill="rgb(225,34,24)" fg:x="5105" fg:w="1"/><text x="90.3012%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="90.0864%" y="1333" width="0.0176%" height="15" fill="rgb(211,119,1)" fg:x="5107" fg:w="1"/><text x="90.3364%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="90.0688%" y="1349" width="0.0706%" height="15" fill="rgb(254,216,46)" fg:x="5106" fg:w="4"/><text x="90.3188%" y="1359.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="90.1041%" y="1333" width="0.0353%" height="15" fill="rgb(238,11,38)" fg:x="5108" fg:w="2"/><text x="90.3541%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.1394%" y="1333" width="0.0176%" height="15" fill="rgb(233,50,15)" fg:x="5110" fg:w="1"/><text x="90.3894%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.1394%" y="1317" width="0.0176%" height="15" fill="rgb(217,181,29)" fg:x="5110" fg:w="1"/><text x="90.3894%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.1394%" y="1301" width="0.0176%" height="15" fill="rgb(214,56,3)" fg:x="5110" fg:w="1"/><text x="90.3894%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.1394%" y="1285" width="0.0176%" height="15" fill="rgb(230,69,45)" fg:x="5110" fg:w="1"/><text x="90.3894%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.1394%" y="1269" width="0.0176%" height="15" fill="rgb(224,201,50)" fg:x="5110" fg:w="1"/><text x="90.3894%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.1394%" y="1253" width="0.0176%" height="15" fill="rgb(217,228,18)" fg:x="5110" fg:w="1"/><text x="90.3894%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.1394%" y="1237" width="0.0176%" height="15" fill="rgb(239,33,44)" fg:x="5110" fg:w="1"/><text x="90.3894%" y="1247.50"></text></g><g><title>leveldb::PutVarint32 (2 samples, 0.04%)</title><rect x="90.1394%" y="1349" width="0.0353%" height="15" fill="rgb(248,210,23)" fg:x="5110" fg:w="2"/><text x="90.3894%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="90.1570%" y="1333" width="0.0176%" height="15" fill="rgb(253,135,8)" fg:x="5111" fg:w="1"/><text x="90.4070%" y="1343.50"></text></g><g><title>leveldb::Slice::operator[] (6 samples, 0.11%)</title><rect x="90.1746%" y="1349" width="0.1058%" height="15" fill="rgb(217,98,21)" fg:x="5112" fg:w="6"/><text x="90.4246%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::Add (5 samples, 0.09%)</title><rect x="90.2805%" y="1349" width="0.0882%" height="15" fill="rgb(253,130,21)" fg:x="5118" fg:w="5"/><text x="90.5305%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (3 samples, 0.05%)</title><rect x="90.3158%" y="1333" width="0.0529%" height="15" fill="rgb(207,81,54)" fg:x="5120" fg:w="3"/><text x="90.5658%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (3 samples, 0.05%)</title><rect x="90.3158%" y="1317" width="0.0529%" height="15" fill="rgb(232,48,33)" fg:x="5120" fg:w="3"/><text x="90.5658%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="90.3334%" y="1301" width="0.0353%" height="15" fill="rgb(211,9,35)" fg:x="5121" fg:w="2"/><text x="90.5834%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="90.3334%" y="1285" width="0.0353%" height="15" fill="rgb(205,152,21)" fg:x="5121" fg:w="2"/><text x="90.5834%" y="1295.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="90.3510%" y="1269" width="0.0176%" height="15" fill="rgb(249,21,27)" fg:x="5122" fg:w="1"/><text x="90.6010%" y="1279.50"></text></g><g><title>leveldb::TableBuilder::status (2 samples, 0.04%)</title><rect x="90.3687%" y="1349" width="0.0353%" height="15" fill="rgb(252,29,24)" fg:x="5123" fg:w="2"/><text x="90.6187%" y="1359.50"></text></g><g><title>leveldb::Status::Status (1 samples, 0.02%)</title><rect x="90.3863%" y="1333" width="0.0176%" height="15" fill="rgb(230,130,50)" fg:x="5124" fg:w="1"/><text x="90.6363%" y="1343.50"></text></g><g><title>__memmove_avx512_unaligned_erms (6 samples, 0.11%)</title><rect x="90.4040%" y="1333" width="0.1058%" height="15" fill="rgb(239,144,14)" fg:x="5125" fg:w="6"/><text x="90.6540%" y="1343.50"></text></g><g><title>leveldb::operator== (8 samples, 0.14%)</title><rect x="90.4040%" y="1349" width="0.1411%" height="15" fill="rgb(227,111,50)" fg:x="5125" fg:w="8"/><text x="90.6540%" y="1359.50"></text></g><g><title>memcpy@plt (2 samples, 0.04%)</title><rect x="90.5098%" y="1333" width="0.0353%" height="15" fill="rgb(254,84,20)" fg:x="5131" fg:w="2"/><text x="90.7598%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (6 samples, 0.11%)</title><rect x="90.5451%" y="1349" width="0.1058%" height="15" fill="rgb(232,90,48)" fg:x="5133" fg:w="6"/><text x="90.7951%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.11%)</title><rect x="90.5451%" y="1333" width="0.1058%" height="15" fill="rgb(253,63,47)" fg:x="5133" fg:w="6"/><text x="90.7951%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (5 samples, 0.09%)</title><rect x="90.5627%" y="1317" width="0.0882%" height="15" fill="rgb(251,146,35)" fg:x="5134" fg:w="5"/><text x="90.8127%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (5 samples, 0.09%)</title><rect x="90.5627%" y="1301" width="0.0882%" height="15" fill="rgb(229,192,35)" fg:x="5134" fg:w="5"/><text x="90.8127%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (4 samples, 0.07%)</title><rect x="90.5803%" y="1285" width="0.0706%" height="15" fill="rgb(225,68,9)" fg:x="5135" fg:w="4"/><text x="90.8303%" y="1295.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.02%)</title><rect x="90.6333%" y="1269" width="0.0176%" height="15" fill="rgb(214,97,34)" fg:x="5138" fg:w="1"/><text x="90.8833%" y="1279.50"></text></g><g><title>leveldb::BlockBuilder::Add (50 samples, 0.88%)</title><rect x="89.8042%" y="1365" width="0.8820%" height="15" fill="rgb(253,31,26)" fg:x="5091" fg:w="50"/><text x="90.0542%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (2 samples, 0.04%)</title><rect x="90.6509%" y="1349" width="0.0353%" height="15" fill="rgb(225,151,47)" fg:x="5139" fg:w="2"/><text x="90.9009%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (2 samples, 0.04%)</title><rect x="90.6509%" y="1333" width="0.0353%" height="15" fill="rgb(206,185,9)" fg:x="5139" fg:w="2"/><text x="90.9009%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="90.6685%" y="1317" width="0.0176%" height="15" fill="rgb(249,65,17)" fg:x="5140" fg:w="1"/><text x="90.9185%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="90.6685%" y="1301" width="0.0176%" height="15" fill="rgb(220,110,10)" fg:x="5140" fg:w="1"/><text x="90.9185%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="90.6685%" y="1285" width="0.0176%" height="15" fill="rgb(222,198,49)" fg:x="5140" fg:w="1"/><text x="90.9185%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (4 samples, 0.07%)</title><rect x="90.6862%" y="1365" width="0.0706%" height="15" fill="rgb(239,81,13)" fg:x="5141" fg:w="4"/><text x="90.9362%" y="1375.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="90.7391%" y="1349" width="0.0176%" height="15" fill="rgb(216,128,11)" fg:x="5144" fg:w="1"/><text x="90.9891%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="90.7391%" y="1333" width="0.0176%" height="15" fill="rgb(247,156,8)" fg:x="5144" fg:w="1"/><text x="90.9891%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="90.7391%" y="1317" width="0.0176%" height="15" fill="rgb(219,173,1)" fg:x="5144" fg:w="1"/><text x="90.9891%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="90.7391%" y="1301" width="0.0176%" height="15" fill="rgb(227,42,24)" fg:x="5144" fg:w="1"/><text x="90.9891%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="90.7391%" y="1285" width="0.0176%" height="15" fill="rgb(253,219,50)" fg:x="5144" fg:w="1"/><text x="90.9891%" y="1295.50"></text></g><g><title>leveldb::EncodeVarint32 (2 samples, 0.04%)</title><rect x="90.7567%" y="1365" width="0.0353%" height="15" fill="rgb(215,191,54)" fg:x="5145" fg:w="2"/><text x="91.0067%" y="1375.50"></text></g><g><title>BloomHash (1 samples, 0.02%)</title><rect x="90.8449%" y="1317" width="0.0176%" height="15" fill="rgb(238,83,12)" fg:x="5150" fg:w="1"/><text x="91.0949%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="90.8626%" y="1317" width="0.0176%" height="15" fill="rgb(205,124,9)" fg:x="5151" fg:w="1"/><text x="91.1126%" y="1327.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="90.8626%" y="1301" width="0.0176%" height="15" fill="rgb(253,174,7)" fg:x="5151" fg:w="1"/><text x="91.1126%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (6 samples, 0.11%)</title><rect x="90.7920%" y="1333" width="0.1058%" height="15" fill="rgb(206,134,49)" fg:x="5147" fg:w="6"/><text x="91.0420%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="90.8802%" y="1317" width="0.0176%" height="15" fill="rgb(221,89,20)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="90.8802%" y="1301" width="0.0176%" height="15" fill="rgb(240,205,13)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1 samples, 0.02%)</title><rect x="90.8802%" y="1285" width="0.0176%" height="15" fill="rgb(237,174,32)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="90.8802%" y="1269" width="0.0176%" height="15" fill="rgb(226,12,15)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.8802%" y="1253" width="0.0176%" height="15" fill="rgb(245,160,52)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="90.8802%" y="1237" width="0.0176%" height="15" fill="rgb(253,80,21)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1247.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="90.8802%" y="1221" width="0.0176%" height="15" fill="rgb(231,225,22)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1231.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="90.8802%" y="1205" width="0.0176%" height="15" fill="rgb(253,185,12)" fg:x="5152" fg:w="1"/><text x="91.1302%" y="1215.50"></text></g><g><title>leveldb::Hash (6 samples, 0.11%)</title><rect x="90.8979%" y="1333" width="0.1058%" height="15" fill="rgb(234,197,21)" fg:x="5153" fg:w="6"/><text x="91.1479%" y="1343.50"></text></g><g><title>leveldb::InternalFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="91.0037%" y="1333" width="0.0176%" height="15" fill="rgb(210,47,30)" fg:x="5159" fg:w="1"/><text x="91.2537%" y="1343.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="91.0037%" y="1317" width="0.0176%" height="15" fill="rgb(246,139,27)" fg:x="5159" fg:w="1"/><text x="91.2537%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (14 samples, 0.25%)</title><rect x="90.7920%" y="1365" width="0.2470%" height="15" fill="rgb(226,130,16)" fg:x="5147" fg:w="14"/><text x="91.0420%" y="1375.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (14 samples, 0.25%)</title><rect x="90.7920%" y="1349" width="0.2470%" height="15" fill="rgb(237,208,20)" fg:x="5147" fg:w="14"/><text x="91.0420%" y="1359.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="91.0213%" y="1333" width="0.0176%" height="15" fill="rgb(245,186,28)" fg:x="5160" fg:w="1"/><text x="91.2713%" y="1343.50"></text></g><g><title>std::vector&lt;leveldb::Slice, std::allocator&lt;leveldb::Slice&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="91.0213%" y="1317" width="0.0176%" height="15" fill="rgb(238,105,39)" fg:x="5160" fg:w="1"/><text x="91.2713%" y="1327.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_a&lt;leveldb::Slice*, unsigned long, leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="91.0213%" y="1301" width="0.0176%" height="15" fill="rgb(253,228,11)" fg:x="5160" fg:w="1"/><text x="91.2713%" y="1311.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="91.0213%" y="1285" width="0.0176%" height="15" fill="rgb(224,136,38)" fg:x="5160" fg:w="1"/><text x="91.2713%" y="1295.50"></text></g><g><title>leveldb::Slice* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;leveldb::Slice*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="91.0213%" y="1269" width="0.0176%" height="15" fill="rgb(211,3,25)" fg:x="5160" fg:w="1"/><text x="91.2713%" y="1279.50"></text></g><g><title>void std::_Construct&lt;leveldb::Slice&gt; (1 samples, 0.02%)</title><rect x="91.0213%" y="1253" width="0.0176%" height="15" fill="rgb(238,66,34)" fg:x="5160" fg:w="1"/><text x="91.2713%" y="1263.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.02%)</title><rect x="91.0213%" y="1237" width="0.0176%" height="15" fill="rgb(223,188,11)" fg:x="5160" fg:w="1"/><text x="91.2713%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="91.0390%" y="1365" width="0.0529%" height="15" fill="rgb(221,10,35)" fg:x="5161" fg:w="3"/><text x="91.2890%" y="1375.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.02%)</title><rect x="91.0743%" y="1349" width="0.0176%" height="15" fill="rgb(223,18,44)" fg:x="5163" fg:w="1"/><text x="91.3243%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="91.2154%" y="1317" width="0.0176%" height="15" fill="rgb(220,97,41)" fg:x="5171" fg:w="1"/><text x="91.4654%" y="1327.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="91.2154%" y="1301" width="0.0176%" height="15" fill="rgb(206,95,45)" fg:x="5171" fg:w="1"/><text x="91.4654%" y="1311.50"></text></g><g><title>leveldb::PutVarint32 (9 samples, 0.16%)</title><rect x="91.0919%" y="1365" width="0.1588%" height="15" fill="rgb(209,96,13)" fg:x="5164" fg:w="9"/><text x="91.3419%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (3 samples, 0.05%)</title><rect x="91.1977%" y="1349" width="0.0529%" height="15" fill="rgb(237,39,34)" fg:x="5170" fg:w="3"/><text x="91.4477%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.05%)</title><rect x="91.1977%" y="1333" width="0.0529%" height="15" fill="rgb(213,49,47)" fg:x="5170" fg:w="3"/><text x="91.4477%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.02%)</title><rect x="91.2330%" y="1317" width="0.0176%" height="15" fill="rgb(205,107,27)" fg:x="5172" fg:w="1"/><text x="91.4830%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.02%)</title><rect x="91.2330%" y="1301" width="0.0176%" height="15" fill="rgb(212,142,9)" fg:x="5172" fg:w="1"/><text x="91.4830%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="91.2330%" y="1285" width="0.0176%" height="15" fill="rgb(226,182,0)" fg:x="5172" fg:w="1"/><text x="91.4830%" y="1295.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="91.2507%" y="1365" width="0.0176%" height="15" fill="rgb(231,3,53)" fg:x="5173" fg:w="1"/><text x="91.5007%" y="1375.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="91.2507%" y="1349" width="0.0176%" height="15" fill="rgb(246,111,28)" fg:x="5173" fg:w="1"/><text x="91.5007%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="91.2507%" y="1333" width="0.0176%" height="15" fill="rgb(254,183,7)" fg:x="5173" fg:w="1"/><text x="91.5007%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="91.2507%" y="1317" width="0.0176%" height="15" fill="rgb(247,177,28)" fg:x="5173" fg:w="1"/><text x="91.5007%" y="1327.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="91.4976%" y="1125" width="0.0882%" height="15" fill="rgb(244,43,1)" fg:x="5187" fg:w="5"/><text x="91.7476%" y="1135.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="91.5682%" y="1109" width="0.0176%" height="15" fill="rgb(207,2,35)" fg:x="5191" fg:w="1"/><text x="91.8182%" y="1119.50"></text></g><g><title>[[ext4]] (10 samples, 0.18%)</title><rect x="91.4976%" y="1141" width="0.1764%" height="15" fill="rgb(213,83,22)" fg:x="5187" fg:w="10"/><text x="91.7476%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="91.5858%" y="1125" width="0.0882%" height="15" fill="rgb(246,212,13)" fg:x="5192" fg:w="5"/><text x="91.8358%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.6564%" y="1109" width="0.0176%" height="15" fill="rgb(213,127,46)" fg:x="5196" fg:w="1"/><text x="91.9064%" y="1119.50"></text></g><g><title>[[ext4]] (12 samples, 0.21%)</title><rect x="91.4800%" y="1157" width="0.2117%" height="15" fill="rgb(219,215,39)" fg:x="5186" fg:w="12"/><text x="91.7300%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.6740%" y="1141" width="0.0176%" height="15" fill="rgb(227,99,17)" fg:x="5197" fg:w="1"/><text x="91.9240%" y="1151.50"></text></g><g><title>[[ext4]] (14 samples, 0.25%)</title><rect x="91.4800%" y="1173" width="0.2470%" height="15" fill="rgb(208,155,18)" fg:x="5186" fg:w="14"/><text x="91.7300%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="91.6917%" y="1157" width="0.0353%" height="15" fill="rgb(223,204,38)" fg:x="5198" fg:w="2"/><text x="91.9417%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.7093%" y="1141" width="0.0176%" height="15" fill="rgb(212,114,21)" fg:x="5199" fg:w="1"/><text x="91.9593%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.7093%" y="1125" width="0.0176%" height="15" fill="rgb(250,74,13)" fg:x="5199" fg:w="1"/><text x="91.9593%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="91.7093%" y="1109" width="0.0176%" height="15" fill="rgb(234,7,1)" fg:x="5199" fg:w="1"/><text x="91.9593%" y="1119.50"></text></g><g><title>[[ext4]] (39 samples, 0.69%)</title><rect x="91.4447%" y="1189" width="0.6880%" height="15" fill="rgb(207,138,31)" fg:x="5184" fg:w="39"/><text x="91.6947%" y="1199.50"></text></g><g><title>[unknown] (23 samples, 0.41%)</title><rect x="91.7269%" y="1173" width="0.4057%" height="15" fill="rgb(215,186,42)" fg:x="5200" fg:w="23"/><text x="91.9769%" y="1183.50"></text></g><g><title>[unknown] (22 samples, 0.39%)</title><rect x="91.7446%" y="1157" width="0.3881%" height="15" fill="rgb(229,205,49)" fg:x="5201" fg:w="22"/><text x="91.9946%" y="1167.50"></text></g><g><title>[unknown] (18 samples, 0.32%)</title><rect x="91.8151%" y="1141" width="0.3175%" height="15" fill="rgb(216,156,32)" fg:x="5205" fg:w="18"/><text x="92.0651%" y="1151.50"></text></g><g><title>[unknown] (16 samples, 0.28%)</title><rect x="91.8504%" y="1125" width="0.2822%" height="15" fill="rgb(238,7,21)" fg:x="5207" fg:w="16"/><text x="92.1004%" y="1135.50"></text></g><g><title>[unknown] (10 samples, 0.18%)</title><rect x="91.9563%" y="1109" width="0.1764%" height="15" fill="rgb(249,190,22)" fg:x="5213" fg:w="10"/><text x="92.2063%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="92.0621%" y="1093" width="0.0706%" height="15" fill="rgb(253,51,31)" fg:x="5219" fg:w="4"/><text x="92.3121%" y="1103.50"></text></g><g><title>[[ext4]] (49 samples, 0.86%)</title><rect x="91.3918%" y="1221" width="0.8643%" height="15" fill="rgb(237,90,54)" fg:x="5181" fg:w="49"/><text x="91.6418%" y="1231.50"></text></g><g><title>[unknown] (49 samples, 0.86%)</title><rect x="91.3918%" y="1205" width="0.8643%" height="15" fill="rgb(250,214,33)" fg:x="5181" fg:w="49"/><text x="91.6418%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="92.1327%" y="1189" width="0.1235%" height="15" fill="rgb(237,10,49)" fg:x="5223" fg:w="7"/><text x="92.3827%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="92.1856%" y="1173" width="0.0706%" height="15" fill="rgb(241,56,36)" fg:x="5226" fg:w="4"/><text x="92.4356%" y="1183.50"></text></g><g><title>Flush (60 samples, 1.06%)</title><rect x="91.2683%" y="1349" width="1.0584%" height="15" fill="rgb(227,164,12)" fg:x="5174" fg:w="60"/><text x="91.5183%" y="1359.50"></text></g><g><title>FlushBuffer (60 samples, 1.06%)</title><rect x="91.2683%" y="1333" width="1.0584%" height="15" fill="rgb(249,149,35)" fg:x="5174" fg:w="60"/><text x="91.5183%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (60 samples, 1.06%)</title><rect x="91.2683%" y="1317" width="1.0584%" height="15" fill="rgb(238,227,50)" fg:x="5174" fg:w="60"/><text x="91.5183%" y="1327.50"></text></g><g><title>__GI___libc_write (60 samples, 1.06%)</title><rect x="91.2683%" y="1301" width="1.0584%" height="15" fill="rgb(235,102,45)" fg:x="5174" fg:w="60"/><text x="91.5183%" y="1311.50"></text></g><g><title>[unknown] (60 samples, 1.06%)</title><rect x="91.2683%" y="1285" width="1.0584%" height="15" fill="rgb(211,10,38)" fg:x="5174" fg:w="60"/><text x="91.5183%" y="1295.50"></text></g><g><title>[unknown] (59 samples, 1.04%)</title><rect x="91.2859%" y="1269" width="1.0407%" height="15" fill="rgb(219,77,48)" fg:x="5175" fg:w="59"/><text x="91.5359%" y="1279.50"></text></g><g><title>[unknown] (58 samples, 1.02%)</title><rect x="91.3036%" y="1253" width="1.0231%" height="15" fill="rgb(246,6,15)" fg:x="5176" fg:w="58"/><text x="91.5536%" y="1263.50"></text></g><g><title>[unknown] (58 samples, 1.02%)</title><rect x="91.3036%" y="1237" width="1.0231%" height="15" fill="rgb(207,220,2)" fg:x="5176" fg:w="58"/><text x="91.5536%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="92.2561%" y="1221" width="0.0706%" height="15" fill="rgb(242,48,14)" fg:x="5230" fg:w="4"/><text x="92.5061%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.2914%" y="1205" width="0.0353%" height="15" fill="rgb(218,19,27)" fg:x="5232" fg:w="2"/><text x="92.5414%" y="1215.50"></text></g><g><title>leveldb::Status::operator= (1 samples, 0.02%)</title><rect x="92.3267%" y="1349" width="0.0176%" height="15" fill="rgb(228,0,35)" fg:x="5234" fg:w="1"/><text x="92.5767%" y="1359.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;char const*&gt; &gt;, std::is_move_constructible&lt;char const*&gt;, std::is_move_assignable&lt;char const*&gt; &gt;::value, void&gt;::type std::swap&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="92.3267%" y="1333" width="0.0176%" height="15" fill="rgb(244,142,54)" fg:x="5234" fg:w="1"/><text x="92.5767%" y="1343.50"></text></g><g><title>leveldb::BlockBuilder::Finish (2 samples, 0.04%)</title><rect x="92.3443%" y="1333" width="0.0353%" height="15" fill="rgb(243,217,40)" fg:x="5235" fg:w="2"/><text x="92.5943%" y="1343.50"></text></g><g><title>Append (3 samples, 0.05%)</title><rect x="92.3796%" y="1317" width="0.0529%" height="15" fill="rgb(207,114,16)" fg:x="5237" fg:w="3"/><text x="92.6296%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (3 samples, 0.05%)</title><rect x="92.3796%" y="1301" width="0.0529%" height="15" fill="rgb(224,33,25)" fg:x="5237" fg:w="3"/><text x="92.6296%" y="1311.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="92.3796%" y="1285" width="0.0529%" height="15" fill="rgb(230,93,54)" fg:x="5237" fg:w="3"/><text x="92.6296%" y="1295.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="92.4325%" y="1317" width="0.0176%" height="15" fill="rgb(224,56,24)" fg:x="5240" fg:w="1"/><text x="92.6825%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1 samples, 0.02%)</title><rect x="92.4502%" y="1317" width="0.0176%" height="15" fill="rgb(235,189,50)" fg:x="5241" fg:w="1"/><text x="92.7002%" y="1327.50"></text></g><g><title>leveldb::TableBuilder::Flush (70 samples, 1.23%)</title><rect x="91.2683%" y="1365" width="1.2348%" height="15" fill="rgb(242,173,8)" fg:x="5174" fg:w="70"/><text x="91.5183%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (9 samples, 0.16%)</title><rect x="92.3443%" y="1349" width="0.1588%" height="15" fill="rgb(209,206,10)" fg:x="5235" fg:w="9"/><text x="92.5943%" y="1359.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (7 samples, 0.12%)</title><rect x="92.3796%" y="1333" width="0.1235%" height="15" fill="rgb(213,182,44)" fg:x="5237" fg:w="7"/><text x="92.6296%" y="1343.50"></text></g><g><title>leveldb::crc32c::Value (2 samples, 0.04%)</title><rect x="92.4678%" y="1317" width="0.0353%" height="15" fill="rgb(243,51,15)" fg:x="5242" fg:w="2"/><text x="92.7178%" y="1327.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.04%)</title><rect x="92.4678%" y="1301" width="0.0353%" height="15" fill="rgb(241,13,14)" fg:x="5242" fg:w="2"/><text x="92.7178%" y="1311.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="92.4854%" y="1285" width="0.0176%" height="15" fill="rgb(239,147,24)" fg:x="5243" fg:w="1"/><text x="92.7354%" y="1295.50"></text></g><g><title>leveldb::Compaction::IsBaseLevelForKey (1 samples, 0.02%)</title><rect x="92.5031%" y="1349" width="0.0176%" height="15" fill="rgb(223,129,16)" fg:x="5244" fg:w="1"/><text x="92.7531%" y="1359.50"></text></g><g><title>leveldb::Compaction::ShouldStopBefore (1 samples, 0.02%)</title><rect x="92.5207%" y="1349" width="0.0176%" height="15" fill="rgb(209,169,13)" fg:x="5245" fg:w="1"/><text x="92.7707%" y="1359.50"></text></g><g><title>leveldb::ParseInternalKey (1 samples, 0.02%)</title><rect x="92.5736%" y="1333" width="0.0176%" height="15" fill="rgb(235,159,41)" fg:x="5248" fg:w="1"/><text x="92.8236%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (166 samples, 2.93%)</title><rect x="89.6807%" y="1381" width="2.9282%" height="15" fill="rgb(223,219,48)" fg:x="5084" fg:w="166"/><text x="89.9307%" y="1391.50">le..</text></g><g><title>leveldb::TableBuilder::ok (6 samples, 0.11%)</title><rect x="92.5031%" y="1365" width="0.1058%" height="15" fill="rgb(236,80,13)" fg:x="5244" fg:w="6"/><text x="92.7531%" y="1375.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (4 samples, 0.07%)</title><rect x="92.5384%" y="1349" width="0.0706%" height="15" fill="rgb(213,5,6)" fg:x="5246" fg:w="4"/><text x="92.7884%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="92.5913%" y="1333" width="0.0176%" height="15" fill="rgb(205,59,21)" fg:x="5249" fg:w="1"/><text x="92.8413%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="92.5913%" y="1317" width="0.0176%" height="15" fill="rgb(247,137,35)" fg:x="5249" fg:w="1"/><text x="92.8413%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="92.5913%" y="1301" width="0.0176%" height="15" fill="rgb(242,208,28)" fg:x="5249" fg:w="1"/><text x="92.8413%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="92.5913%" y="1285" width="0.0176%" height="15" fill="rgb(245,62,25)" fg:x="5249" fg:w="1"/><text x="92.8413%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (347 samples, 6.12%)</title><rect x="86.5232%" y="1397" width="6.1210%" height="15" fill="rgb(233,99,54)" fg:x="4905" fg:w="347"/><text x="86.7732%" y="1407.50">leveldb:..</text></g><g><title>leveldb::TableBuilder::status (2 samples, 0.04%)</title><rect x="92.6089%" y="1381" width="0.0353%" height="15" fill="rgb(213,10,37)" fg:x="5250" fg:w="2"/><text x="92.8589%" y="1391.50"></text></g><g><title>leveldb::Status::Status (2 samples, 0.04%)</title><rect x="92.6089%" y="1365" width="0.0353%" height="15" fill="rgb(235,143,30)" fg:x="5250" fg:w="2"/><text x="92.8589%" y="1375.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (372 samples, 6.56%)</title><rect x="86.1528%" y="1413" width="6.5620%" height="15" fill="rgb(250,146,33)" fg:x="4884" fg:w="372"/><text x="86.4028%" y="1423.50">leveldb::..</text></g><g><title>leveldb::InternalKeyComparator::Compare (4 samples, 0.07%)</title><rect x="92.6442%" y="1397" width="0.0706%" height="15" fill="rgb(226,198,42)" fg:x="5252" fg:w="4"/><text x="92.8942%" y="1407.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="92.6971%" y="1381" width="0.0176%" height="15" fill="rgb(222,55,6)" fg:x="5255" fg:w="1"/><text x="92.9471%" y="1391.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (5 samples, 0.09%)</title><rect x="92.7148%" y="1397" width="0.0882%" height="15" fill="rgb(213,224,31)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1407.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (5 samples, 0.09%)</title><rect x="92.7148%" y="1381" width="0.0882%" height="15" fill="rgb(226,103,35)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1391.50"></text></g><g><title>__unlink (5 samples, 0.09%)</title><rect x="92.7148%" y="1365" width="0.0882%" height="15" fill="rgb(205,66,45)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1375.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1349" width="0.0882%" height="15" fill="rgb(226,51,42)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1359.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1333" width="0.0882%" height="15" fill="rgb(206,69,1)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1343.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1317" width="0.0882%" height="15" fill="rgb(213,228,47)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1301" width="0.0882%" height="15" fill="rgb(224,204,18)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1285" width="0.0882%" height="15" fill="rgb(253,187,47)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1295.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="92.7148%" y="1269" width="0.0882%" height="15" fill="rgb(232,61,2)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1253" width="0.0882%" height="15" fill="rgb(213,132,35)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1237" width="0.0882%" height="15" fill="rgb(247,33,21)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="92.7148%" y="1221" width="0.0882%" height="15" fill="rgb(233,71,46)" fg:x="5256" fg:w="5"/><text x="92.9648%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="92.7324%" y="1205" width="0.0706%" height="15" fill="rgb(222,173,43)" fg:x="5257" fg:w="4"/><text x="92.9824%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.7853%" y="1189" width="0.0176%" height="15" fill="rgb(249,218,47)" fg:x="5260" fg:w="1"/><text x="93.0353%" y="1199.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="92.8030%" y="1125" width="0.0176%" height="15" fill="rgb(254,185,48)" fg:x="5261" fg:w="1"/><text x="93.0530%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8030%" y="1109" width="0.0176%" height="15" fill="rgb(252,165,50)" fg:x="5261" fg:w="1"/><text x="93.0530%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8030%" y="1093" width="0.0176%" height="15" fill="rgb(206,219,6)" fg:x="5261" fg:w="1"/><text x="93.0530%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8030%" y="1077" width="0.0176%" height="15" fill="rgb(212,212,45)" fg:x="5261" fg:w="1"/><text x="93.0530%" y="1087.50"></text></g><g><title>Sync (2 samples, 0.04%)</title><rect x="92.8030%" y="1365" width="0.0353%" height="15" fill="rgb(221,31,9)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1375.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (2 samples, 0.04%)</title><rect x="92.8030%" y="1349" width="0.0353%" height="15" fill="rgb(234,198,39)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1359.50"></text></g><g><title>fdatasync (2 samples, 0.04%)</title><rect x="92.8030%" y="1333" width="0.0353%" height="15" fill="rgb(252,145,46)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1343.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.8030%" y="1317" width="0.0353%" height="15" fill="rgb(237,149,0)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1327.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.8030%" y="1301" width="0.0353%" height="15" fill="rgb(229,65,5)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1311.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.8030%" y="1285" width="0.0353%" height="15" fill="rgb(235,60,36)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1295.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="92.8030%" y="1269" width="0.0353%" height="15" fill="rgb(222,47,18)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.8030%" y="1253" width="0.0353%" height="15" fill="rgb(235,114,22)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.8030%" y="1237" width="0.0353%" height="15" fill="rgb(209,167,11)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.8030%" y="1221" width="0.0353%" height="15" fill="rgb(251,73,18)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="92.8030%" y="1205" width="0.0353%" height="15" fill="rgb(217,60,17)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1215.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="92.8030%" y="1189" width="0.0353%" height="15" fill="rgb(224,36,37)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1199.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="92.8030%" y="1173" width="0.0353%" height="15" fill="rgb(211,21,32)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1183.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="92.8030%" y="1157" width="0.0353%" height="15" fill="rgb(231,55,48)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1167.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="92.8030%" y="1141" width="0.0353%" height="15" fill="rgb(227,42,18)" fg:x="5261" fg:w="2"/><text x="93.0530%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8206%" y="1125" width="0.0176%" height="15" fill="rgb(217,2,27)" fg:x="5262" fg:w="1"/><text x="93.0706%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8206%" y="1109" width="0.0176%" height="15" fill="rgb(251,138,23)" fg:x="5262" fg:w="1"/><text x="93.0706%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8206%" y="1093" width="0.0176%" height="15" fill="rgb(226,184,11)" fg:x="5262" fg:w="1"/><text x="93.0706%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.8206%" y="1077" width="0.0176%" height="15" fill="rgb(242,142,12)" fg:x="5262" fg:w="1"/><text x="93.0706%" y="1087.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="92.8382%" y="1349" width="0.0176%" height="15" fill="rgb(234,187,18)" fg:x="5263" fg:w="1"/><text x="93.0882%" y="1359.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="92.8382%" y="1333" width="0.0176%" height="15" fill="rgb(237,44,42)" fg:x="5263" fg:w="1"/><text x="93.0882%" y="1343.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="92.9794%" y="1317" width="0.0176%" height="15" fill="rgb(211,90,23)" fg:x="5271" fg:w="1"/><text x="93.2294%" y="1327.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (15 samples, 0.26%)</title><rect x="92.8559%" y="1333" width="0.2646%" height="15" fill="rgb(207,81,18)" fg:x="5264" fg:w="15"/><text x="93.1059%" y="1343.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (7 samples, 0.12%)</title><rect x="92.9970%" y="1317" width="0.1235%" height="15" fill="rgb(222,107,28)" fg:x="5272" fg:w="7"/><text x="93.2470%" y="1327.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="93.1028%" y="1301" width="0.0176%" height="15" fill="rgb(237,83,52)" fg:x="5278" fg:w="1"/><text x="93.3528%" y="1311.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="93.1205%" y="1333" width="0.0176%" height="15" fill="rgb(208,67,11)" fg:x="5279" fg:w="1"/><text x="93.3705%" y="1343.50"></text></g><g><title>leveldb::TableBuilder::Add (1 samples, 0.02%)</title><rect x="93.1205%" y="1317" width="0.0176%" height="15" fill="rgb(249,157,49)" fg:x="5279" fg:w="1"/><text x="93.3705%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="93.1205%" y="1301" width="0.0176%" height="15" fill="rgb(243,200,1)" fg:x="5279" fg:w="1"/><text x="93.3705%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="93.1205%" y="1285" width="0.0176%" height="15" fill="rgb(225,162,37)" fg:x="5279" fg:w="1"/><text x="93.3705%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="93.1205%" y="1269" width="0.0176%" height="15" fill="rgb(242,92,13)" fg:x="5279" fg:w="1"/><text x="93.3705%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="93.1205%" y="1253" width="0.0176%" height="15" fill="rgb(220,43,36)" fg:x="5279" fg:w="1"/><text x="93.3705%" y="1263.50"></text></g><g><title>leveldb::Slice::operator[] (2 samples, 0.04%)</title><rect x="93.1381%" y="1333" width="0.0353%" height="15" fill="rgb(213,165,48)" fg:x="5280" fg:w="2"/><text x="93.3881%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="93.1734%" y="1317" width="0.0176%" height="15" fill="rgb(227,200,9)" fg:x="5282" fg:w="1"/><text x="93.4234%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="93.1734%" y="1301" width="0.0176%" height="15" fill="rgb(221,222,28)" fg:x="5282" fg:w="1"/><text x="93.4234%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="93.1734%" y="1285" width="0.0176%" height="15" fill="rgb(223,142,26)" fg:x="5282" fg:w="1"/><text x="93.4234%" y="1295.50"></text></g><g><title>leveldb::BlockBuilder::Add (20 samples, 0.35%)</title><rect x="92.8559%" y="1349" width="0.3528%" height="15" fill="rgb(243,46,9)" fg:x="5264" fg:w="20"/><text x="93.1059%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.04%)</title><rect x="93.1734%" y="1333" width="0.0353%" height="15" fill="rgb(250,56,11)" fg:x="5282" fg:w="2"/><text x="93.4234%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (1 samples, 0.02%)</title><rect x="93.1910%" y="1317" width="0.0176%" height="15" fill="rgb(229,113,5)" fg:x="5283" fg:w="1"/><text x="93.4410%" y="1327.50"></text></g><g><title>leveldb::FilterBlockBuilder::AddKey (1 samples, 0.02%)</title><rect x="93.2087%" y="1349" width="0.0176%" height="15" fill="rgb(244,108,28)" fg:x="5284" fg:w="1"/><text x="93.4587%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="93.2087%" y="1333" width="0.0176%" height="15" fill="rgb(242,119,50)" fg:x="5284" fg:w="1"/><text x="93.4587%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="93.2087%" y="1317" width="0.0176%" height="15" fill="rgb(224,164,23)" fg:x="5284" fg:w="1"/><text x="93.4587%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="93.2087%" y="1301" width="0.0176%" height="15" fill="rgb(214,227,44)" fg:x="5284" fg:w="1"/><text x="93.4587%" y="1311.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.02%)</title><rect x="93.2087%" y="1285" width="0.0176%" height="15" fill="rgb(238,202,4)" fg:x="5284" fg:w="1"/><text x="93.4587%" y="1295.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.02%)</title><rect x="93.2087%" y="1269" width="0.0176%" height="15" fill="rgb(213,190,30)" fg:x="5284" fg:w="1"/><text x="93.4587%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="93.2087%" y="1253" width="0.0176%" height="15" fill="rgb(239,15,2)" fg:x="5284" fg:w="1"/><text x="93.4587%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (2 samples, 0.04%)</title><rect x="93.2263%" y="1317" width="0.0353%" height="15" fill="rgb(249,229,4)" fg:x="5285" fg:w="2"/><text x="93.4763%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="93.2440%" y="1301" width="0.0176%" height="15" fill="rgb(239,75,44)" fg:x="5286" fg:w="1"/><text x="93.4940%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="93.2440%" y="1285" width="0.0176%" height="15" fill="rgb(251,206,23)" fg:x="5286" fg:w="1"/><text x="93.4940%" y="1295.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (3 samples, 0.05%)</title><rect x="93.2263%" y="1349" width="0.0529%" height="15" fill="rgb(215,208,0)" fg:x="5285" fg:w="3"/><text x="93.4763%" y="1359.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (3 samples, 0.05%)</title><rect x="93.2263%" y="1333" width="0.0529%" height="15" fill="rgb(230,75,50)" fg:x="5285" fg:w="3"/><text x="93.4763%" y="1343.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="93.2616%" y="1317" width="0.0176%" height="15" fill="rgb(246,180,39)" fg:x="5287" fg:w="1"/><text x="93.5116%" y="1327.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="93.2792%" y="1349" width="0.0176%" height="15" fill="rgb(249,175,24)" fg:x="5288" fg:w="1"/><text x="93.5292%" y="1359.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.02%)</title><rect x="93.2792%" y="1333" width="0.0176%" height="15" fill="rgb(247,176,22)" fg:x="5288" fg:w="1"/><text x="93.5292%" y="1343.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.02%)</title><rect x="93.2792%" y="1317" width="0.0176%" height="15" fill="rgb(241,100,24)" fg:x="5288" fg:w="1"/><text x="93.5292%" y="1327.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="93.2792%" y="1301" width="0.0176%" height="15" fill="rgb(233,4,35)" fg:x="5288" fg:w="1"/><text x="93.5292%" y="1311.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.02%)</title><rect x="93.2792%" y="1285" width="0.0176%" height="15" fill="rgb(211,164,46)" fg:x="5288" fg:w="1"/><text x="93.5292%" y="1295.50"></text></g><g><title>WriteUnbuffered (1 samples, 0.02%)</title><rect x="93.2969%" y="1301" width="0.0176%" height="15" fill="rgb(242,99,53)" fg:x="5289" fg:w="1"/><text x="93.5469%" y="1311.50"></text></g><g><title>__clone (424 samples, 7.48%)</title><rect x="85.9940%" y="1509" width="7.4793%" height="15" fill="rgb(243,45,33)" fg:x="4875" fg:w="424"/><text x="86.2440%" y="1519.50">__clone</text></g><g><title>start_thread (423 samples, 7.46%)</title><rect x="86.0116%" y="1493" width="7.4616%" height="15" fill="rgb(217,55,21)" fg:x="4876" fg:w="423"/><text x="86.2616%" y="1503.50">start_thre..</text></g><g><title>execute_native_thread_routine (415 samples, 7.32%)</title><rect x="86.1528%" y="1477" width="7.3205%" height="15" fill="rgb(245,145,46)" fg:x="4884" fg:w="415"/><text x="86.4028%" y="1487.50">execute_na..</text></g><g><title>BackgroundThreadEntryPoint (415 samples, 7.32%)</title><rect x="86.1528%" y="1461" width="7.3205%" height="15" fill="rgb(215,112,45)" fg:x="4884" fg:w="415"/><text x="86.4028%" y="1471.50">Background..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (415 samples, 7.32%)</title><rect x="86.1528%" y="1445" width="7.3205%" height="15" fill="rgb(228,104,16)" fg:x="4884" fg:w="415"/><text x="86.4028%" y="1455.50">leveldb::(..</text></g><g><title>leveldb::DBImpl::BackgroundCall (415 samples, 7.32%)</title><rect x="86.1528%" y="1429" width="7.3205%" height="15" fill="rgb(239,186,38)" fg:x="4884" fg:w="415"/><text x="86.4028%" y="1439.50">leveldb::D..</text></g><g><title>leveldb::DBImpl::CompactMemTable (43 samples, 0.76%)</title><rect x="92.7148%" y="1413" width="0.7585%" height="15" fill="rgb(228,38,35)" fg:x="5256" fg:w="43"/><text x="92.9648%" y="1423.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (38 samples, 0.67%)</title><rect x="92.8030%" y="1397" width="0.6703%" height="15" fill="rgb(251,42,40)" fg:x="5261" fg:w="38"/><text x="93.0530%" y="1407.50"></text></g><g><title>leveldb::BuildTable (38 samples, 0.67%)</title><rect x="92.8030%" y="1381" width="0.6703%" height="15" fill="rgb(210,51,19)" fg:x="5261" fg:w="38"/><text x="93.0530%" y="1391.50"></text></g><g><title>leveldb::TableBuilder::Add (36 samples, 0.64%)</title><rect x="92.8382%" y="1365" width="0.6350%" height="15" fill="rgb(236,94,42)" fg:x="5263" fg:w="36"/><text x="93.0882%" y="1375.50"></text></g><g><title>leveldb::TableBuilder::Flush (10 samples, 0.18%)</title><rect x="93.2969%" y="1349" width="0.1764%" height="15" fill="rgb(239,167,16)" fg:x="5289" fg:w="10"/><text x="93.5469%" y="1359.50"></text></g><g><title>Flush (10 samples, 0.18%)</title><rect x="93.2969%" y="1333" width="0.1764%" height="15" fill="rgb(252,175,31)" fg:x="5289" fg:w="10"/><text x="93.5469%" y="1343.50"></text></g><g><title>FlushBuffer (10 samples, 0.18%)</title><rect x="93.2969%" y="1317" width="0.1764%" height="15" fill="rgb(206,166,30)" fg:x="5289" fg:w="10"/><text x="93.5469%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (9 samples, 0.16%)</title><rect x="93.3145%" y="1301" width="0.1588%" height="15" fill="rgb(206,209,37)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1311.50"></text></g><g><title>__GI___libc_write (9 samples, 0.16%)</title><rect x="93.3145%" y="1285" width="0.1588%" height="15" fill="rgb(226,91,4)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1295.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1269" width="0.1588%" height="15" fill="rgb(222,167,0)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1279.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1253" width="0.1588%" height="15" fill="rgb(211,70,14)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1263.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1237" width="0.1588%" height="15" fill="rgb(214,84,42)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1247.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1221" width="0.1588%" height="15" fill="rgb(235,157,37)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1231.50"></text></g><g><title>[[ext4]] (9 samples, 0.16%)</title><rect x="93.3145%" y="1205" width="0.1588%" height="15" fill="rgb(225,13,6)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1215.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1189" width="0.1588%" height="15" fill="rgb(205,202,1)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1199.50"></text></g><g><title>[[ext4]] (9 samples, 0.16%)</title><rect x="93.3145%" y="1173" width="0.1588%" height="15" fill="rgb(232,195,26)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1183.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1157" width="0.1588%" height="15" fill="rgb(208,102,26)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1167.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1141" width="0.1588%" height="15" fill="rgb(215,41,39)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1151.50"></text></g><g><title>[unknown] (9 samples, 0.16%)</title><rect x="93.3145%" y="1125" width="0.1588%" height="15" fill="rgb(247,139,11)" fg:x="5290" fg:w="9"/><text x="93.5645%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.14%)</title><rect x="93.3322%" y="1109" width="0.1411%" height="15" fill="rgb(243,99,6)" fg:x="5291" fg:w="8"/><text x="93.5822%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="93.3674%" y="1093" width="0.1058%" height="15" fill="rgb(230,168,48)" fg:x="5293" fg:w="6"/><text x="93.6174%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="93.3851%" y="1077" width="0.0882%" height="15" fill="rgb(238,227,13)" fg:x="5294" fg:w="5"/><text x="93.6351%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="1061" width="0.0353%" height="15" fill="rgb(209,109,13)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="1045" width="0.0353%" height="15" fill="rgb(228,195,1)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="1029" width="0.0353%" height="15" fill="rgb(230,218,0)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="1013" width="0.0353%" height="15" fill="rgb(206,1,45)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="997" width="0.0353%" height="15" fill="rgb(209,124,26)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="981" width="0.0353%" height="15" fill="rgb(220,59,8)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="965" width="0.0353%" height="15" fill="rgb(251,41,37)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="949" width="0.0353%" height="15" fill="rgb(239,152,21)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.4380%" y="933" width="0.0353%" height="15" fill="rgb(226,32,1)" fg:x="5297" fg:w="2"/><text x="93.6880%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4556%" y="917" width="0.0176%" height="15" fill="rgb(230,154,36)" fg:x="5298" fg:w="1"/><text x="93.7056%" y="927.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="93.4733%" y="1381" width="0.0176%" height="15" fill="rgb(208,228,43)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1391.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="93.4733%" y="1365" width="0.0176%" height="15" fill="rgb(214,203,3)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1375.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="93.4733%" y="1349" width="0.0176%" height="15" fill="rgb(207,149,29)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1359.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="93.4733%" y="1333" width="0.0176%" height="15" fill="rgb(250,105,7)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1343.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="93.4733%" y="1317" width="0.0176%" height="15" fill="rgb(232,222,16)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1327.50"></text></g><g><title>leveldb::DBImpl::Recover (1 samples, 0.02%)</title><rect x="93.4733%" y="1301" width="0.0176%" height="15" fill="rgb(209,32,24)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1311.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (1 samples, 0.02%)</title><rect x="93.4733%" y="1285" width="0.0176%" height="15" fill="rgb(225,13,6)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="93.4733%" y="1269" width="0.0176%" height="15" fill="rgb(245,226,26)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.02%)</title><rect x="93.4733%" y="1253" width="0.0176%" height="15" fill="rgb(229,178,27)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.02%)</title><rect x="93.4733%" y="1237" width="0.0176%" height="15" fill="rgb(205,227,28)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1247.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="93.4733%" y="1221" width="0.0176%" height="15" fill="rgb(210,191,45)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1231.50"></text></g><g><title>std::allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="93.4733%" y="1205" width="0.0176%" height="15" fill="rgb(206,124,16)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1215.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (1 samples, 0.02%)</title><rect x="93.4733%" y="1189" width="0.0176%" height="15" fill="rgb(210,162,0)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1199.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="93.4733%" y="1173" width="0.0176%" height="15" fill="rgb(211,54,38)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1183.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="93.4733%" y="1157" width="0.0176%" height="15" fill="rgb(248,192,3)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1141" width="0.0176%" height="15" fill="rgb(233,187,18)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1125" width="0.0176%" height="15" fill="rgb(237,208,14)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1109" width="0.0176%" height="15" fill="rgb(212,77,1)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1093" width="0.0176%" height="15" fill="rgb(210,163,22)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1077" width="0.0176%" height="15" fill="rgb(250,58,28)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1061" width="0.0176%" height="15" fill="rgb(254,28,41)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1045" width="0.0176%" height="15" fill="rgb(237,162,36)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1029" width="0.0176%" height="15" fill="rgb(232,56,6)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="1013" width="0.0176%" height="15" fill="rgb(216,127,42)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="997" width="0.0176%" height="15" fill="rgb(241,69,15)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="981" width="0.0176%" height="15" fill="rgb(227,180,19)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="965" width="0.0176%" height="15" fill="rgb(231,188,29)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.4733%" y="949" width="0.0176%" height="15" fill="rgb(224,176,27)" fg:x="5299" fg:w="1"/><text x="93.7233%" y="959.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="93.4909%" y="1285" width="0.0176%" height="15" fill="rgb(249,214,19)" fg:x="5300" fg:w="1"/><text x="93.7409%" y="1295.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="93.5086%" y="1285" width="0.0176%" height="15" fill="rgb(240,0,4)" fg:x="5301" fg:w="1"/><text x="93.7586%" y="1295.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (3 samples, 0.05%)</title><rect x="93.5262%" y="1285" width="0.0529%" height="15" fill="rgb(233,28,41)" fg:x="5302" fg:w="3"/><text x="93.7762%" y="1295.50"></text></g><g><title>CheckProofOfWorkImpl (6 samples, 0.11%)</title><rect x="93.4909%" y="1301" width="0.1058%" height="15" fill="rgb(220,90,51)" fg:x="5300" fg:w="6"/><text x="93.7409%" y="1311.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="93.5791%" y="1285" width="0.0176%" height="15" fill="rgb(250,52,22)" fg:x="5305" fg:w="1"/><text x="93.8291%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="93.5791%" y="1269" width="0.0176%" height="15" fill="rgb(231,152,36)" fg:x="5305" fg:w="1"/><text x="93.8291%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="93.5791%" y="1253" width="0.0176%" height="15" fill="rgb(250,218,4)" fg:x="5305" fg:w="1"/><text x="93.8291%" y="1263.50"></text></g><g><title>std::equal_to&lt;uint256&gt;::operator (1 samples, 0.02%)</title><rect x="93.5791%" y="1237" width="0.0176%" height="15" fill="rgb(210,38,21)" fg:x="5305" fg:w="1"/><text x="93.8291%" y="1247.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="93.5791%" y="1221" width="0.0176%" height="15" fill="rgb(230,75,13)" fg:x="5305" fg:w="1"/><text x="93.8291%" y="1231.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="93.5791%" y="1205" width="0.0176%" height="15" fill="rgb(250,68,53)" fg:x="5305" fg:w="1"/><text x="93.8291%" y="1215.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="93.5968%" y="1253" width="0.0176%" height="15" fill="rgb(250,210,16)" fg:x="5306" fg:w="1"/><text x="93.8468%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="93.5968%" y="1237" width="0.0176%" height="15" fill="rgb(240,132,5)" fg:x="5306" fg:w="1"/><text x="93.8468%" y="1247.50"></text></g><g><title>leveldb::IteratorWrapper::Update (1 samples, 0.02%)</title><rect x="93.5968%" y="1221" width="0.0176%" height="15" fill="rgb(222,148,48)" fg:x="5306" fg:w="1"/><text x="93.8468%" y="1231.50"></text></g><g><title>value (1 samples, 0.02%)</title><rect x="93.5968%" y="1205" width="0.0176%" height="15" fill="rgb(247,181,24)" fg:x="5306" fg:w="1"/><text x="93.8468%" y="1215.50"></text></g><g><title>leveldb::IteratorWrapper::value (1 samples, 0.02%)</title><rect x="93.5968%" y="1189" width="0.0176%" height="15" fill="rgb(239,5,31)" fg:x="5306" fg:w="1"/><text x="93.8468%" y="1199.50"></text></g><g><title>Next (2 samples, 0.04%)</title><rect x="93.5968%" y="1285" width="0.0353%" height="15" fill="rgb(241,152,38)" fg:x="5306" fg:w="2"/><text x="93.8468%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.04%)</title><rect x="93.5968%" y="1269" width="0.0353%" height="15" fill="rgb(246,200,37)" fg:x="5306" fg:w="2"/><text x="93.8468%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="93.6144%" y="1253" width="0.0176%" height="15" fill="rgb(243,210,26)" fg:x="5307" fg:w="1"/><text x="93.8644%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (1 samples, 0.02%)</title><rect x="93.6144%" y="1237" width="0.0176%" height="15" fill="rgb(222,22,22)" fg:x="5307" fg:w="1"/><text x="93.8644%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (3 samples, 0.05%)</title><rect x="93.5968%" y="1301" width="0.0529%" height="15" fill="rgb(208,129,28)" fg:x="5306" fg:w="3"/><text x="93.8468%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="93.6320%" y="1285" width="0.0176%" height="15" fill="rgb(254,169,28)" fg:x="5308" fg:w="1"/><text x="93.8820%" y="1295.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="93.6320%" y="1269" width="0.0176%" height="15" fill="rgb(225,45,17)" fg:x="5308" fg:w="1"/><text x="93.8820%" y="1279.50"></text></g><g><title>DecodeEntry (1 samples, 0.02%)</title><rect x="93.6320%" y="1253" width="0.0176%" height="15" fill="rgb(232,199,2)" fg:x="5308" fg:w="1"/><text x="93.8820%" y="1263.50"></text></g><g><title>__libc_start_call_main (11 samples, 0.19%)</title><rect x="93.4733%" y="1509" width="0.1940%" height="15" fill="rgb(235,33,40)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1519.50"></text></g><g><title>main (11 samples, 0.19%)</title><rect x="93.4733%" y="1493" width="0.1940%" height="15" fill="rgb(237,89,50)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1503.50"></text></g><g><title>main (11 samples, 0.19%)</title><rect x="93.4733%" y="1477" width="0.1940%" height="15" fill="rgb(238,126,5)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1487.50"></text></g><g><title>AppInitMain (11 samples, 0.19%)</title><rect x="93.4733%" y="1461" width="0.1940%" height="15" fill="rgb(247,214,42)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1471.50"></text></g><g><title>InitAndLoadChainstate (11 samples, 0.19%)</title><rect x="93.4733%" y="1445" width="0.1940%" height="15" fill="rgb(238,60,45)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1455.50"></text></g><g><title>operator (11 samples, 0.19%)</title><rect x="93.4733%" y="1429" width="0.1940%" height="15" fill="rgb(225,69,44)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1439.50"></text></g><g><title>InitAndLoadChainstate (11 samples, 0.19%)</title><rect x="93.4733%" y="1413" width="0.1940%" height="15" fill="rgb(241,13,44)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1423.50"></text></g><g><title>node::LoadChainstate (11 samples, 0.19%)</title><rect x="93.4733%" y="1397" width="0.1940%" height="15" fill="rgb(227,121,22)" fg:x="5299" fg:w="11"/><text x="93.7233%" y="1407.50"></text></g><g><title>node::CompleteChainstateInitialization (10 samples, 0.18%)</title><rect x="93.4909%" y="1381" width="0.1764%" height="15" fill="rgb(231,160,23)" fg:x="5300" fg:w="10"/><text x="93.7409%" y="1391.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (10 samples, 0.18%)</title><rect x="93.4909%" y="1365" width="0.1764%" height="15" fill="rgb(250,179,43)" fg:x="5300" fg:w="10"/><text x="93.7409%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (10 samples, 0.18%)</title><rect x="93.4909%" y="1349" width="0.1764%" height="15" fill="rgb(233,54,46)" fg:x="5300" fg:w="10"/><text x="93.7409%" y="1359.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (10 samples, 0.18%)</title><rect x="93.4909%" y="1333" width="0.1764%" height="15" fill="rgb(247,120,42)" fg:x="5300" fg:w="10"/><text x="93.7409%" y="1343.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (10 samples, 0.18%)</title><rect x="93.4909%" y="1317" width="0.1764%" height="15" fill="rgb(221,219,12)" fg:x="5300" fg:w="10"/><text x="93.7409%" y="1327.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.02%)</title><rect x="93.6497%" y="1301" width="0.0176%" height="15" fill="rgb(211,126,8)" fg:x="5309" fg:w="1"/><text x="93.8997%" y="1311.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::Next (1 samples, 0.02%)</title><rect x="93.6497%" y="1285" width="0.0176%" height="15" fill="rgb(218,154,33)" fg:x="5309" fg:w="1"/><text x="93.8997%" y="1295.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="93.6497%" y="1269" width="0.0176%" height="15" fill="rgb(212,199,16)" fg:x="5309" fg:w="1"/><text x="93.8997%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="93.6497%" y="1253" width="0.0176%" height="15" fill="rgb(236,215,46)" fg:x="5309" fg:w="1"/><text x="93.8997%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="93.6497%" y="1237" width="0.0176%" height="15" fill="rgb(232,32,22)" fg:x="5309" fg:w="1"/><text x="93.8997%" y="1247.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="93.6673%" y="1205" width="0.0176%" height="15" fill="rgb(234,79,15)" fg:x="5310" fg:w="1"/><text x="93.9173%" y="1215.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="93.6673%" y="1189" width="0.0176%" height="15" fill="rgb(235,187,47)" fg:x="5310" fg:w="1"/><text x="93.9173%" y="1199.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (2 samples, 0.04%)</title><rect x="93.6673%" y="1333" width="0.0353%" height="15" fill="rgb(244,69,37)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1343.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (2 samples, 0.04%)</title><rect x="93.6673%" y="1317" width="0.0353%" height="15" fill="rgb(249,140,25)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1327.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (2 samples, 0.04%)</title><rect x="93.6673%" y="1301" width="0.0353%" height="15" fill="rgb(213,69,8)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1311.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (2 samples, 0.04%)</title><rect x="93.6673%" y="1285" width="0.0353%" height="15" fill="rgb(220,136,2)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1295.50"></text></g><g><title>CBlockHeader::GetHash (2 samples, 0.04%)</title><rect x="93.6673%" y="1269" width="0.0353%" height="15" fill="rgb(237,50,36)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1279.50"></text></g><g><title>HashWriter::GetHash (2 samples, 0.04%)</title><rect x="93.6673%" y="1253" width="0.0353%" height="15" fill="rgb(226,18,11)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1263.50"></text></g><g><title>CSHA256::Finalize (2 samples, 0.04%)</title><rect x="93.6673%" y="1237" width="0.0353%" height="15" fill="rgb(243,156,2)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1247.50"></text></g><g><title>CSHA256::Write (2 samples, 0.04%)</title><rect x="93.6673%" y="1221" width="0.0353%" height="15" fill="rgb(218,8,34)" fg:x="5310" fg:w="2"/><text x="93.9173%" y="1231.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.02%)</title><rect x="93.6850%" y="1205" width="0.0176%" height="15" fill="rgb(250,94,35)" fg:x="5311" fg:w="1"/><text x="93.9350%" y="1215.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="93.6850%" y="1189" width="0.0176%" height="15" fill="rgb(229,127,21)" fg:x="5311" fg:w="1"/><text x="93.9350%" y="1199.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="93.6850%" y="1173" width="0.0176%" height="15" fill="rgb(234,49,5)" fg:x="5311" fg:w="1"/><text x="93.9350%" y="1183.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="93.6850%" y="1157" width="0.0176%" height="15" fill="rgb(248,12,16)" fg:x="5311" fg:w="1"/><text x="93.9350%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.6850%" y="1141" width="0.0176%" height="15" fill="rgb(208,220,31)" fg:x="5311" fg:w="1"/><text x="93.9350%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.6850%" y="1125" width="0.0176%" height="15" fill="rgb(243,184,0)" fg:x="5311" fg:w="1"/><text x="93.9350%" y="1135.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (3 samples, 0.05%)</title><rect x="93.6673%" y="1509" width="0.0529%" height="15" fill="rgb(217,38,21)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1519.50"></text></g><g><title>__libc_start_call_main (3 samples, 0.05%)</title><rect x="93.6673%" y="1493" width="0.0529%" height="15" fill="rgb(239,120,45)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1503.50"></text></g><g><title>main (3 samples, 0.05%)</title><rect x="93.6673%" y="1477" width="0.0529%" height="15" fill="rgb(235,33,2)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1487.50"></text></g><g><title>main (3 samples, 0.05%)</title><rect x="93.6673%" y="1461" width="0.0529%" height="15" fill="rgb(249,161,5)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1471.50"></text></g><g><title>AppInitMain (3 samples, 0.05%)</title><rect x="93.6673%" y="1445" width="0.0529%" height="15" fill="rgb(250,165,48)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (3 samples, 0.05%)</title><rect x="93.6673%" y="1429" width="0.0529%" height="15" fill="rgb(221,23,45)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1439.50"></text></g><g><title>operator (3 samples, 0.05%)</title><rect x="93.6673%" y="1413" width="0.0529%" height="15" fill="rgb(217,108,46)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1423.50"></text></g><g><title>InitAndLoadChainstate (3 samples, 0.05%)</title><rect x="93.6673%" y="1397" width="0.0529%" height="15" fill="rgb(254,26,35)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1407.50"></text></g><g><title>node::LoadChainstate (3 samples, 0.05%)</title><rect x="93.6673%" y="1381" width="0.0529%" height="15" fill="rgb(218,223,28)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1391.50"></text></g><g><title>node::CompleteChainstateInitialization (3 samples, 0.05%)</title><rect x="93.6673%" y="1365" width="0.0529%" height="15" fill="rgb(242,27,47)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1375.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (3 samples, 0.05%)</title><rect x="93.6673%" y="1349" width="0.0529%" height="15" fill="rgb(218,39,35)" fg:x="5310" fg:w="3"/><text x="93.9173%" y="1359.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1333" width="0.0176%" height="15" fill="rgb(232,127,16)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1343.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1317" width="0.0176%" height="15" fill="rgb(231,219,51)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1327.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1301" width="0.0176%" height="15" fill="rgb(217,220,46)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1285" width="0.0176%" height="15" fill="rgb(230,75,1)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1269" width="0.0176%" height="15" fill="rgb(218,2,8)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1253" width="0.0176%" height="15" fill="rgb(206,111,30)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1237" width="0.0176%" height="15" fill="rgb(209,135,6)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1221" width="0.0176%" height="15" fill="rgb(205,169,10)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1205" width="0.0176%" height="15" fill="rgb(212,204,38)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1189" width="0.0176%" height="15" fill="rgb(205,199,14)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1173" width="0.0176%" height="15" fill="rgb(212,4,6)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1157" width="0.0176%" height="15" fill="rgb(250,15,10)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1167.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1141" width="0.0176%" height="15" fill="rgb(212,49,51)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1151.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1125" width="0.0176%" height="15" fill="rgb(235,21,9)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1109" width="0.0176%" height="15" fill="rgb(251,31,32)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="93.7026%" y="1093" width="0.0176%" height="15" fill="rgb(246,23,9)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1103.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="93.7026%" y="1077" width="0.0176%" height="15" fill="rgb(225,216,14)" fg:x="5312" fg:w="1"/><text x="93.9526%" y="1087.50"></text></g><g><title>__printf_buffer (2 samples, 0.04%)</title><rect x="93.7202%" y="1509" width="0.0353%" height="15" fill="rgb(215,200,26)" fg:x="5313" fg:w="2"/><text x="93.9702%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7379%" y="1493" width="0.0176%" height="15" fill="rgb(237,130,47)" fg:x="5314" fg:w="1"/><text x="93.9879%" y="1503.50"></text></g><g><title>AppInit (11 samples, 0.19%)</title><rect x="93.7555%" y="1445" width="0.1940%" height="15" fill="rgb(247,74,14)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1455.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (11 samples, 0.19%)</title><rect x="93.7555%" y="1429" width="0.1940%" height="15" fill="rgb(254,97,46)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1439.50"></text></g><g><title>kernel::Context::Context (11 samples, 0.19%)</title><rect x="93.7555%" y="1413" width="0.1940%" height="15" fill="rgb(234,191,1)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1423.50"></text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 0.19%)</title><rect x="93.7555%" y="1397" width="0.1940%" height="15" fill="rgb(215,165,14)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1407.50"></text></g><g><title>kernel::Context::Context (11 samples, 0.19%)</title><rect x="93.7555%" y="1381" width="0.1940%" height="15" fill="rgb(230,182,6)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1391.50"></text></g><g><title>__pthread_once_slow (11 samples, 0.19%)</title><rect x="93.7555%" y="1365" width="0.1940%" height="15" fill="rgb(210,127,39)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1375.50"></text></g><g><title>_FUN (11 samples, 0.19%)</title><rect x="93.7555%" y="1349" width="0.1940%" height="15" fill="rgb(223,212,51)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1359.50"></text></g><g><title>operator (11 samples, 0.19%)</title><rect x="93.7555%" y="1333" width="0.1940%" height="15" fill="rgb(226,176,43)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1343.50"></text></g><g><title>operator (11 samples, 0.19%)</title><rect x="93.7555%" y="1317" width="0.1940%" height="15" fill="rgb(222,155,4)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1327.50"></text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 0.19%)</title><rect x="93.7555%" y="1301" width="0.1940%" height="15" fill="rgb(215,149,7)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1311.50"></text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (11 samples, 0.19%)</title><rect x="93.7555%" y="1285" width="0.1940%" height="15" fill="rgb(252,199,23)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1295.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (11 samples, 0.19%)</title><rect x="93.7555%" y="1269" width="0.1940%" height="15" fill="rgb(245,52,29)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1279.50"></text></g><g><title>RandomInit (11 samples, 0.19%)</title><rect x="93.7555%" y="1253" width="0.1940%" height="15" fill="rgb(221,228,19)" fg:x="5315" fg:w="11"/><text x="94.0055%" y="1263.50"></text></g><g><title>CSHA512::Finalize (10 samples, 0.18%)</title><rect x="93.7732%" y="1237" width="0.1764%" height="15" fill="rgb(253,101,6)" fg:x="5316" fg:w="10"/><text x="94.0232%" y="1247.50"></text></g><g><title>CSHA512::Write (10 samples, 0.18%)</title><rect x="93.7732%" y="1221" width="0.1764%" height="15" fill="rgb(211,130,8)" fg:x="5316" fg:w="10"/><text x="94.0232%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.8790%" y="1205" width="0.0706%" height="15" fill="rgb(238,37,53)" fg:x="5322" fg:w="4"/><text x="94.1290%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.8790%" y="1189" width="0.0706%" height="15" fill="rgb(235,145,5)" fg:x="5322" fg:w="4"/><text x="94.1290%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.8790%" y="1173" width="0.0706%" height="15" fill="rgb(244,12,43)" fg:x="5322" fg:w="4"/><text x="94.1290%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1157" width="0.0529%" height="15" fill="rgb(246,195,24)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1141" width="0.0529%" height="15" fill="rgb(235,163,6)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1125" width="0.0529%" height="15" fill="rgb(236,218,17)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1109" width="0.0529%" height="15" fill="rgb(235,12,38)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1093" width="0.0529%" height="15" fill="rgb(225,195,33)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1077" width="0.0529%" height="15" fill="rgb(238,54,35)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1061" width="0.0529%" height="15" fill="rgb(238,33,7)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1045" width="0.0529%" height="15" fill="rgb(245,5,14)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1029" width="0.0529%" height="15" fill="rgb(251,95,31)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="1013" width="0.0529%" height="15" fill="rgb(222,15,46)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="997" width="0.0529%" height="15" fill="rgb(226,182,24)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="981" width="0.0529%" height="15" fill="rgb(229,105,41)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="965" width="0.0529%" height="15" fill="rgb(216,99,53)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.8966%" y="949" width="0.0529%" height="15" fill="rgb(253,26,20)" fg:x="5323" fg:w="3"/><text x="94.1466%" y="959.50"></text></g><g><title>Shutdown (4 samples, 0.07%)</title><rect x="93.9496%" y="1445" width="0.0706%" height="15" fill="rgb(249,155,28)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1455.50"></text></g><g><title>void LogPrintFormatInternal&lt;char [9]&gt; (4 samples, 0.07%)</title><rect x="93.9496%" y="1429" width="0.0706%" height="15" fill="rgb(241,221,2)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1439.50"></text></g><g><title>BCLog::Logger::LogPrintStr (4 samples, 0.07%)</title><rect x="93.9496%" y="1413" width="0.0706%" height="15" fill="rgb(219,124,6)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1423.50"></text></g><g><title>StdLockGuard::StdLockGuard (4 samples, 0.07%)</title><rect x="93.9496%" y="1397" width="0.0706%" height="15" fill="rgb(233,37,6)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1407.50"></text></g><g><title>std::lock_guard&lt;StdMutex&gt;::lock_guard (4 samples, 0.07%)</title><rect x="93.9496%" y="1381" width="0.0706%" height="15" fill="rgb(238,20,14)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1391.50"></text></g><g><title>std::mutex::lock (4 samples, 0.07%)</title><rect x="93.9496%" y="1365" width="0.0706%" height="15" fill="rgb(232,106,27)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1375.50"></text></g><g><title>BCLog::Logger::LogPrintStr (4 samples, 0.07%)</title><rect x="93.9496%" y="1349" width="0.0706%" height="15" fill="rgb(246,157,24)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1359.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.07%)</title><rect x="93.9496%" y="1333" width="0.0706%" height="15" fill="rgb(214,153,10)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1343.50"></text></g><g><title>__GI___lll_lock_wait (4 samples, 0.07%)</title><rect x="93.9496%" y="1317" width="0.0706%" height="15" fill="rgb(212,94,6)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1301" width="0.0706%" height="15" fill="rgb(254,25,27)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1285" width="0.0706%" height="15" fill="rgb(250,43,52)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1269" width="0.0706%" height="15" fill="rgb(221,226,40)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1253" width="0.0706%" height="15" fill="rgb(235,162,34)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1237" width="0.0706%" height="15" fill="rgb(239,24,26)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1221" width="0.0706%" height="15" fill="rgb(244,226,11)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1205" width="0.0706%" height="15" fill="rgb(225,23,10)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1189" width="0.0706%" height="15" fill="rgb(249,125,6)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1173" width="0.0706%" height="15" fill="rgb(246,212,12)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1157" width="0.0706%" height="15" fill="rgb(230,43,32)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1141" width="0.0706%" height="15" fill="rgb(210,95,23)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="93.9496%" y="1125" width="0.0706%" height="15" fill="rgb(229,103,33)" fg:x="5326" fg:w="4"/><text x="94.1996%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="1109" width="0.0529%" height="15" fill="rgb(222,104,27)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="1093" width="0.0529%" height="15" fill="rgb(239,221,23)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="1077" width="0.0529%" height="15" fill="rgb(222,98,21)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="1061" width="0.0529%" height="15" fill="rgb(231,101,20)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="1045" width="0.0529%" height="15" fill="rgb(215,150,22)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="1029" width="0.0529%" height="15" fill="rgb(248,3,34)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="1013" width="0.0529%" height="15" fill="rgb(220,141,21)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="93.9672%" y="997" width="0.0529%" height="15" fill="rgb(223,41,48)" fg:x="5327" fg:w="3"/><text x="94.2172%" y="1007.50"></text></g><g><title>CompleteChainstateInitialization (1 samples, 0.02%)</title><rect x="94.0201%" y="1349" width="0.0176%" height="15" fill="rgb(247,12,5)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1359.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (1 samples, 0.02%)</title><rect x="94.0201%" y="1333" width="0.0176%" height="15" fill="rgb(206,173,10)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1343.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (1 samples, 0.02%)</title><rect x="94.0201%" y="1317" width="0.0176%" height="15" fill="rgb(233,214,37)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1327.50"></text></g><g><title>CDBWrapper::CDBWrapper (1 samples, 0.02%)</title><rect x="94.0201%" y="1301" width="0.0176%" height="15" fill="rgb(238,86,43)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1311.50"></text></g><g><title>leveldb::DB::Open (1 samples, 0.02%)</title><rect x="94.0201%" y="1285" width="0.0176%" height="15" fill="rgb(212,182,8)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1295.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1 samples, 0.02%)</title><rect x="94.0201%" y="1269" width="0.0176%" height="15" fill="rgb(240,91,47)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1 samples, 0.02%)</title><rect x="94.0201%" y="1253" width="0.0176%" height="15" fill="rgb(209,138,26)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1263.50"></text></g><g><title>__unlink (1 samples, 0.02%)</title><rect x="94.0201%" y="1237" width="0.0176%" height="15" fill="rgb(231,163,20)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1221" width="0.0176%" height="15" fill="rgb(214,91,54)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1205" width="0.0176%" height="15" fill="rgb(230,32,17)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1189" width="0.0176%" height="15" fill="rgb(231,34,34)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1173" width="0.0176%" height="15" fill="rgb(224,228,27)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1157" width="0.0176%" height="15" fill="rgb(219,35,40)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1167.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="94.0201%" y="1141" width="0.0176%" height="15" fill="rgb(234,42,8)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1125" width="0.0176%" height="15" fill="rgb(226,75,22)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1109" width="0.0176%" height="15" fill="rgb(242,203,28)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1093" width="0.0176%" height="15" fill="rgb(221,3,9)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1077" width="0.0176%" height="15" fill="rgb(214,34,31)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1061" width="0.0176%" height="15" fill="rgb(252,119,15)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.0201%" y="1045" width="0.0176%" height="15" fill="rgb(244,224,31)" fg:x="5330" fg:w="1"/><text x="94.2701%" y="1055.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="94.1259%" y="1301" width="0.0176%" height="15" fill="rgb(215,8,51)" fg:x="5336" fg:w="1"/><text x="94.3759%" y="1311.50"></text></g><g><title>Chainstate::LoadChainTip (7 samples, 0.12%)</title><rect x="94.0377%" y="1333" width="0.1235%" height="15" fill="rgb(207,24,1)" fg:x="5331" fg:w="7"/><text x="94.2877%" y="1343.50"></text></g><g><title>CChain::SetTip (7 samples, 0.12%)</title><rect x="94.0377%" y="1317" width="0.1235%" height="15" fill="rgb(245,90,0)" fg:x="5331" fg:w="7"/><text x="94.2877%" y="1327.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="94.1436%" y="1301" width="0.0176%" height="15" fill="rgb(246,43,48)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1311.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="94.1436%" y="1285" width="0.0176%" height="15" fill="rgb(252,218,10)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1295.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n_a&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1269" width="0.0176%" height="15" fill="rgb(231,24,35)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1279.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n&lt;CBlockIndex**, unsigned long&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1253" width="0.0176%" height="15" fill="rgb(225,66,19)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1263.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;CBlockIndex**, unsigned long&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1237" width="0.0176%" height="15" fill="rgb(214,96,51)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1247.50"></text></g><g><title>CBlockIndex** std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;CBlockIndex**, unsigned long&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1221" width="0.0176%" height="15" fill="rgb(251,151,47)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1231.50"></text></g><g><title>CBlockIndex** std::fill_n&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1205" width="0.0176%" height="15" fill="rgb(236,79,14)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1215.50"></text></g><g><title>CBlockIndex** std::__fill_n_a&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1189" width="0.0176%" height="15" fill="rgb(210,205,11)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1199.50"></text></g><g><title>CBlockIndex** std::__fill_n_a&lt;CBlockIndex**, unsigned long, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1173" width="0.0176%" height="15" fill="rgb(233,142,53)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1183.50"></text></g><g><title>void std::__fill_a&lt;CBlockIndex**, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1157" width="0.0176%" height="15" fill="rgb(212,116,48)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1167.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;CBlockIndex*&gt;::__value, void&gt;::__type std::__fill_a1&lt;CBlockIndex**, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.1436%" y="1141" width="0.0176%" height="15" fill="rgb(234,55,33)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1151.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="94.1436%" y="1125" width="0.0176%" height="15" fill="rgb(253,92,27)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="1109" width="0.0176%" height="15" fill="rgb(220,7,35)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="1093" width="0.0176%" height="15" fill="rgb(246,124,6)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="1077" width="0.0176%" height="15" fill="rgb(212,111,51)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="1061" width="0.0176%" height="15" fill="rgb(253,116,7)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="1045" width="0.0176%" height="15" fill="rgb(213,145,18)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="1029" width="0.0176%" height="15" fill="rgb(219,149,7)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="1013" width="0.0176%" height="15" fill="rgb(225,156,20)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="997" width="0.0176%" height="15" fill="rgb(211,98,19)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="981" width="0.0176%" height="15" fill="rgb(231,192,31)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="965" width="0.0176%" height="15" fill="rgb(249,95,19)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="949" width="0.0176%" height="15" fill="rgb(247,101,36)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.1436%" y="933" width="0.0176%" height="15" fill="rgb(221,45,43)" fg:x="5337" fg:w="1"/><text x="94.3936%" y="943.50"></text></g><g><title>ChainstateManager::GetSnapshotBaseBlock (1 samples, 0.02%)</title><rect x="94.1612%" y="1333" width="0.0176%" height="15" fill="rgb(220,42,1)" fg:x="5338" fg:w="1"/><text x="94.4112%" y="1343.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.02%)</title><rect x="94.1965%" y="1301" width="0.0176%" height="15" fill="rgb(236,19,24)" fg:x="5340" fg:w="1"/><text x="94.4465%" y="1311.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.02%)</title><rect x="94.1965%" y="1285" width="0.0176%" height="15" fill="rgb(225,192,6)" fg:x="5340" fg:w="1"/><text x="94.4465%" y="1295.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.02%)</title><rect x="94.1965%" y="1269" width="0.0176%" height="15" fill="rgb(242,30,19)" fg:x="5340" fg:w="1"/><text x="94.4465%" y="1279.50"></text></g><g><title>std::tuple_element&lt;1ul, std::pair&lt;uint256 const, CBlockIndex&gt; &gt;::type&amp; std::get&lt;1ul, uint256 const, CBlockIndex&gt; (2 samples, 0.04%)</title><rect x="94.2141%" y="1301" width="0.0353%" height="15" fill="rgb(240,36,6)" fg:x="5341" fg:w="2"/><text x="94.4641%" y="1311.50"></text></g><g><title>CBlockIndex&amp; std::__pair_get&lt;1ul&gt;::__get&lt;uint256 const, CBlockIndex&gt; (2 samples, 0.04%)</title><rect x="94.2141%" y="1285" width="0.0353%" height="15" fill="rgb(246,40,28)" fg:x="5341" fg:w="2"/><text x="94.4641%" y="1295.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.12%)</title><rect x="94.1965%" y="1317" width="0.1235%" height="15" fill="rgb(225,155,33)" fg:x="5340" fg:w="7"/><text x="94.4465%" y="1327.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (4 samples, 0.07%)</title><rect x="94.2494%" y="1301" width="0.0706%" height="15" fill="rgb(240,65,18)" fg:x="5343" fg:w="4"/><text x="94.4994%" y="1311.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (4 samples, 0.07%)</title><rect x="94.2494%" y="1285" width="0.0706%" height="15" fill="rgb(217,0,48)" fg:x="5343" fg:w="4"/><text x="94.4994%" y="1295.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;CBlockIndex*&gt; &gt;::construct&lt;CBlockIndex*, CBlockIndex*&gt; (1 samples, 0.02%)</title><rect x="94.3023%" y="1269" width="0.0176%" height="15" fill="rgb(217,80,15)" fg:x="5346" fg:w="1"/><text x="94.5523%" y="1279.50"></text></g><g><title>decltype (1 samples, 0.02%)</title><rect x="94.3023%" y="1253" width="0.0176%" height="15" fill="rgb(253,43,51)" fg:x="5346" fg:w="1"/><text x="94.5523%" y="1263.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="94.4082%" y="1269" width="0.0176%" height="15" fill="rgb(246,60,4)" fg:x="5352" fg:w="1"/><text x="94.6582%" y="1279.50"></text></g><g><title>CBlockIndex::GetAncestor (2 samples, 0.04%)</title><rect x="94.4082%" y="1301" width="0.0353%" height="15" fill="rgb(230,40,54)" fg:x="5352" fg:w="2"/><text x="94.6582%" y="1311.50"></text></g><g><title>GetSkipHeight (2 samples, 0.04%)</title><rect x="94.4082%" y="1285" width="0.0353%" height="15" fill="rgb(208,20,44)" fg:x="5352" fg:w="2"/><text x="94.6582%" y="1295.50"></text></g><g><title>GetSkipHeight (1 samples, 0.02%)</title><rect x="94.4258%" y="1269" width="0.0176%" height="15" fill="rgb(230,22,22)" fg:x="5353" fg:w="1"/><text x="94.6758%" y="1279.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="94.4258%" y="1253" width="0.0176%" height="15" fill="rgb(207,57,4)" fg:x="5353" fg:w="1"/><text x="94.6758%" y="1263.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (2 samples, 0.04%)</title><rect x="94.4435%" y="1301" width="0.0353%" height="15" fill="rgb(242,130,33)" fg:x="5354" fg:w="2"/><text x="94.6935%" y="1311.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="94.4787%" y="1285" width="0.0176%" height="15" fill="rgb(218,66,43)" fg:x="5356" fg:w="1"/><text x="94.7287%" y="1295.50"></text></g><g><title>std::optional&lt;unsigned long&gt; CheckedAdd&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="94.4787%" y="1269" width="0.0176%" height="15" fill="rgb(236,105,16)" fg:x="5356" fg:w="1"/><text x="94.7287%" y="1279.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="94.4964%" y="1269" width="0.0176%" height="15" fill="rgb(230,46,15)" fg:x="5357" fg:w="1"/><text x="94.7464%" y="1279.50"></text></g><g><title>GetSkipHeight (1 samples, 0.02%)</title><rect x="94.4964%" y="1253" width="0.0176%" height="15" fill="rgb(251,172,40)" fg:x="5357" fg:w="1"/><text x="94.7464%" y="1263.50"></text></g><g><title>CBlockIndex::GetAncestor (1 samples, 0.02%)</title><rect x="94.4964%" y="1237" width="0.0176%" height="15" fill="rgb(225,217,32)" fg:x="5357" fg:w="1"/><text x="94.7464%" y="1247.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="94.5140%" y="1237" width="0.0176%" height="15" fill="rgb(243,10,29)" fg:x="5358" fg:w="1"/><text x="94.7640%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (7 samples, 0.12%)</title><rect x="94.5317%" y="1221" width="0.1235%" height="15" fill="rgb(207,102,10)" fg:x="5359" fg:w="7"/><text x="94.7817%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (11 samples, 0.19%)</title><rect x="94.5317%" y="1237" width="0.1940%" height="15" fill="rgb(241,125,5)" fg:x="5359" fg:w="11"/><text x="94.7817%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator- (4 samples, 0.07%)</title><rect x="94.6551%" y="1221" width="0.0706%" height="15" fill="rgb(230,125,29)" fg:x="5366" fg:w="4"/><text x="94.9051%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator++ (1 samples, 0.02%)</title><rect x="94.7081%" y="1205" width="0.0176%" height="15" fill="rgb(223,65,44)" fg:x="5369" fg:w="1"/><text x="94.9581%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (2 samples, 0.04%)</title><rect x="94.7786%" y="1221" width="0.0353%" height="15" fill="rgb(224,188,28)" fg:x="5373" fg:w="2"/><text x="95.0286%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator+= (2 samples, 0.04%)</title><rect x="94.7786%" y="1205" width="0.0353%" height="15" fill="rgb(254,197,27)" fg:x="5373" fg:w="2"/><text x="95.0286%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (6 samples, 0.11%)</title><rect x="94.7257%" y="1237" width="0.1058%" height="15" fill="rgb(220,200,25)" fg:x="5370" fg:w="6"/><text x="94.9757%" y="1247.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.02%)</title><rect x="94.8139%" y="1221" width="0.0176%" height="15" fill="rgb(239,225,54)" fg:x="5375" fg:w="1"/><text x="95.0639%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="94.8139%" y="1205" width="0.0176%" height="15" fill="rgb(211,59,40)" fg:x="5375" fg:w="1"/><text x="95.0639%" y="1215.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (6 samples, 0.11%)</title><rect x="94.8315%" y="1237" width="0.1058%" height="15" fill="rgb(213,176,46)" fg:x="5376" fg:w="6"/><text x="95.0815%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.02%)</title><rect x="94.9197%" y="1221" width="0.0176%" height="15" fill="rgb(226,99,4)" fg:x="5381" fg:w="1"/><text x="95.1697%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (27 samples, 0.48%)</title><rect x="94.9374%" y="1237" width="0.4763%" height="15" fill="rgb(239,203,43)" fg:x="5382" fg:w="27"/><text x="95.1874%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (53 samples, 0.93%)</title><rect x="94.5140%" y="1253" width="0.9349%" height="15" fill="rgb(246,1,45)" fg:x="5358" fg:w="53"/><text x="94.7640%" y="1263.50"></text></g><g><title>operator&gt;=(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (2 samples, 0.04%)</title><rect x="95.4137%" y="1237" width="0.0353%" height="15" fill="rgb(231,42,52)" fg:x="5409" fg:w="2"/><text x="95.6637%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (2 samples, 0.04%)</title><rect x="95.4137%" y="1221" width="0.0353%" height="15" fill="rgb(240,13,50)" fg:x="5409" fg:w="2"/><text x="95.6637%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="95.4489%" y="1253" width="0.0176%" height="15" fill="rgb(225,81,14)" fg:x="5411" fg:w="1"/><text x="95.6989%" y="1263.50"></text></g><g><title>GetBlockProof (78 samples, 1.38%)</title><rect x="94.4964%" y="1285" width="1.3759%" height="15" fill="rgb(216,182,23)" fg:x="5357" fg:w="78"/><text x="94.7464%" y="1295.50"></text></g><g><title>operator/ (77 samples, 1.36%)</title><rect x="94.5140%" y="1269" width="1.3583%" height="15" fill="rgb(233,137,19)" fg:x="5358" fg:w="77"/><text x="94.7640%" y="1279.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (23 samples, 0.41%)</title><rect x="95.4666%" y="1253" width="0.4057%" height="15" fill="rgb(242,61,46)" fg:x="5412" fg:w="23"/><text x="95.7166%" y="1263.50"></text></g><g><title>UintToArith256 (1 samples, 0.02%)</title><rect x="95.8723%" y="1285" width="0.0176%" height="15" fill="rgb(221,168,51)" fg:x="5435" fg:w="1"/><text x="96.1223%" y="1295.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="95.8899%" y="1285" width="0.0176%" height="15" fill="rgb(238,48,15)" fg:x="5436" fg:w="1"/><text x="96.1399%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (7 samples, 0.12%)</title><rect x="95.9076%" y="1285" width="0.1235%" height="15" fill="rgb(216,13,16)" fg:x="5437" fg:w="7"/><text x="96.1576%" y="1295.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (2 samples, 0.04%)</title><rect x="95.9958%" y="1269" width="0.0353%" height="15" fill="rgb(223,185,34)" fg:x="5442" fg:w="2"/><text x="96.2458%" y="1279.50"></text></g><g><title>CDiskBlockIndex::CDiskBlockIndex (1 samples, 0.02%)</title><rect x="96.0310%" y="1269" width="0.0176%" height="15" fill="rgb(228,94,42)" fg:x="5444" fg:w="1"/><text x="96.2810%" y="1279.50"></text></g><g><title>CBlockIndex::CBlockIndex (1 samples, 0.02%)</title><rect x="96.0310%" y="1253" width="0.0176%" height="15" fill="rgb(218,166,43)" fg:x="5444" fg:w="1"/><text x="96.2810%" y="1263.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.02%)</title><rect x="96.0487%" y="1045" width="0.0176%" height="15" fill="rgb(232,30,50)" fg:x="5445" fg:w="1"/><text x="96.2987%" y="1055.50"></text></g><g><title>void Serialize&lt;HashWriter, uint256&gt; (2 samples, 0.04%)</title><rect x="96.0487%" y="1125" width="0.0353%" height="15" fill="rgb(245,206,45)" fg:x="5445" fg:w="2"/><text x="96.2987%" y="1135.50"></text></g><g><title>void base_blob&lt;256u&gt;::Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="96.0487%" y="1109" width="0.0353%" height="15" fill="rgb(220,56,22)" fg:x="5445" fg:w="2"/><text x="96.2987%" y="1119.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;Span&lt;unsigned char const&gt; &gt;(Span&lt;unsigned char const&gt; const&amp;) (2 samples, 0.04%)</title><rect x="96.0487%" y="1093" width="0.0353%" height="15" fill="rgb(239,129,38)" fg:x="5445" fg:w="2"/><text x="96.2987%" y="1103.50"></text></g><g><title>void Serialize&lt;HashWriter, unsigned char const&gt; (2 samples, 0.04%)</title><rect x="96.0487%" y="1077" width="0.0353%" height="15" fill="rgb(207,68,41)" fg:x="5445" fg:w="2"/><text x="96.2987%" y="1087.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="96.0487%" y="1061" width="0.0353%" height="15" fill="rgb(221,21,7)" fg:x="5445" fg:w="2"/><text x="96.2987%" y="1071.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="96.0663%" y="1045" width="0.0176%" height="15" fill="rgb(240,33,25)" fg:x="5446" fg:w="1"/><text x="96.3163%" y="1055.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="96.0663%" y="1029" width="0.0176%" height="15" fill="rgb(242,119,10)" fg:x="5446" fg:w="1"/><text x="96.3163%" y="1039.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="96.0663%" y="1013" width="0.0176%" height="15" fill="rgb(214,149,40)" fg:x="5446" fg:w="1"/><text x="96.3163%" y="1023.50"></text></g><g><title>ShiftMessageB (1 samples, 0.02%)</title><rect x="96.0840%" y="1061" width="0.0176%" height="15" fill="rgb(228,25,36)" fg:x="5447" fg:w="1"/><text x="96.3340%" y="1071.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="96.0840%" y="1045" width="0.0176%" height="15" fill="rgb(222,59,15)" fg:x="5447" fg:w="1"/><text x="96.3340%" y="1055.50"></text></g><g><title>_mm_sha256msg2_epu32 (1 samples, 0.02%)</title><rect x="96.0840%" y="1029" width="0.0176%" height="15" fill="rgb(218,170,0)" fg:x="5447" fg:w="1"/><text x="96.3340%" y="1039.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;CBlockHeader&gt;(CBlockHeader const&amp;) (4 samples, 0.07%)</title><rect x="96.0487%" y="1237" width="0.0706%" height="15" fill="rgb(232,173,23)" fg:x="5445" fg:w="4"/><text x="96.2987%" y="1247.50"></text></g><g><title>void Serialize&lt;HashWriter, CBlockHeader&gt; (4 samples, 0.07%)</title><rect x="96.0487%" y="1221" width="0.0706%" height="15" fill="rgb(218,116,1)" fg:x="5445" fg:w="4"/><text x="96.2987%" y="1231.50"></text></g><g><title>void CBlockHeader::Serialize&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="96.0487%" y="1205" width="0.0706%" height="15" fill="rgb(207,34,4)" fg:x="5445" fg:w="4"/><text x="96.2987%" y="1215.50"></text></g><g><title>void CBlockHeader::Ser&lt;HashWriter&gt; (4 samples, 0.07%)</title><rect x="96.0487%" y="1189" width="0.0706%" height="15" fill="rgb(229,54,52)" fg:x="5445" fg:w="4"/><text x="96.2987%" y="1199.50"></text></g><g><title>void CBlockHeader::SerializationOps&lt;HashWriter, CBlockHeader const, ActionSerialize&gt; (4 samples, 0.07%)</title><rect x="96.0487%" y="1173" width="0.0706%" height="15" fill="rgb(211,86,23)" fg:x="5445" fg:w="4"/><text x="96.2987%" y="1183.50"></text></g><g><title>void ActionSerialize::SerReadWriteMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (4 samples, 0.07%)</title><rect x="96.0487%" y="1157" width="0.0706%" height="15" fill="rgb(254,153,34)" fg:x="5445" fg:w="4"/><text x="96.2987%" y="1167.50"></text></g><g><title>void SerializeMany&lt;HashWriter, int, uint256, uint256, unsigned int, unsigned int, unsigned int&gt; (4 samples, 0.07%)</title><rect x="96.0487%" y="1141" width="0.0706%" height="15" fill="rgb(219,220,14)" fg:x="5445" fg:w="4"/><text x="96.2987%" y="1151.50"></text></g><g><title>void Serialize&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="96.0840%" y="1125" width="0.0353%" height="15" fill="rgb(247,8,26)" fg:x="5447" fg:w="2"/><text x="96.3340%" y="1135.50"></text></g><g><title>void ser_writedata32&lt;HashWriter&gt; (2 samples, 0.04%)</title><rect x="96.0840%" y="1109" width="0.0353%" height="15" fill="rgb(213,129,42)" fg:x="5447" fg:w="2"/><text x="96.3340%" y="1119.50"></text></g><g><title>HashWriter::write (2 samples, 0.04%)</title><rect x="96.0840%" y="1093" width="0.0353%" height="15" fill="rgb(225,95,41)" fg:x="5447" fg:w="2"/><text x="96.3340%" y="1103.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="96.0840%" y="1077" width="0.0353%" height="15" fill="rgb(215,134,24)" fg:x="5447" fg:w="2"/><text x="96.3340%" y="1087.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="96.1016%" y="1061" width="0.0176%" height="15" fill="rgb(235,23,54)" fg:x="5448" fg:w="1"/><text x="96.3516%" y="1071.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="96.1016%" y="1045" width="0.0176%" height="15" fill="rgb(229,96,31)" fg:x="5448" fg:w="1"/><text x="96.3516%" y="1055.50"></text></g><g><title>CSHA256::Write (1 samples, 0.02%)</title><rect x="96.1192%" y="1221" width="0.0176%" height="15" fill="rgb(206,111,12)" fg:x="5449" fg:w="1"/><text x="96.3692%" y="1231.50"></text></g><g><title>QuadRound (1 samples, 0.02%)</title><rect x="96.1369%" y="1205" width="0.0176%" height="15" fill="rgb(222,177,8)" fg:x="5450" fg:w="1"/><text x="96.3869%" y="1215.50"></text></g><g><title>_mm_sha256rnds2_epu32 (1 samples, 0.02%)</title><rect x="96.1369%" y="1189" width="0.0176%" height="15" fill="rgb(251,36,52)" fg:x="5450" fg:w="1"/><text x="96.3869%" y="1199.50"></text></g><g><title>CBlockHeader::GetHash (7 samples, 0.12%)</title><rect x="96.0487%" y="1253" width="0.1235%" height="15" fill="rgb(216,182,29)" fg:x="5445" fg:w="7"/><text x="96.2987%" y="1263.50"></text></g><g><title>HashWriter::GetHash (3 samples, 0.05%)</title><rect x="96.1192%" y="1237" width="0.0529%" height="15" fill="rgb(241,145,50)" fg:x="5449" fg:w="3"/><text x="96.3692%" y="1247.50"></text></g><g><title>sha256_x86_shani::Transform (2 samples, 0.04%)</title><rect x="96.1369%" y="1221" width="0.0353%" height="15" fill="rgb(231,71,35)" fg:x="5450" fg:w="2"/><text x="96.3869%" y="1231.50"></text></g><g><title>ShiftMessageC (1 samples, 0.02%)</title><rect x="96.1545%" y="1205" width="0.0176%" height="15" fill="rgb(218,22,17)" fg:x="5451" fg:w="1"/><text x="96.4045%" y="1215.50"></text></g><g><title>_mm_alignr_epi8 (1 samples, 0.02%)</title><rect x="96.1545%" y="1189" width="0.0176%" height="15" fill="rgb(225,227,6)" fg:x="5451" fg:w="1"/><text x="96.4045%" y="1199.50"></text></g><g><title>CDiskBlockIndex::ConstructBlockHash (9 samples, 0.16%)</title><rect x="96.0487%" y="1269" width="0.1588%" height="15" fill="rgb(224,204,17)" fg:x="5445" fg:w="9"/><text x="96.2987%" y="1279.50"></text></g><g><title>DataStream::read (2 samples, 0.04%)</title><rect x="96.1722%" y="1253" width="0.0353%" height="15" fill="rgb(227,61,28)" fg:x="5452" fg:w="2"/><text x="96.4222%" y="1263.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="96.2074%" y="1253" width="0.0176%" height="15" fill="rgb(242,148,23)" fg:x="5454" fg:w="1"/><text x="96.4574%" y="1263.50"></text></g><g><title>arith_uint256::arith_uint256 (1 samples, 0.02%)</title><rect x="96.2074%" y="1237" width="0.0176%" height="15" fill="rgb(237,105,33)" fg:x="5454" fg:w="1"/><text x="96.4574%" y="1247.50"></text></g><g><title>base_uint&lt;256u&gt;::base_uint (1 samples, 0.02%)</title><rect x="96.2074%" y="1221" width="0.0176%" height="15" fill="rgb(238,218,40)" fg:x="5454" fg:w="1"/><text x="96.4574%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="96.2251%" y="1253" width="0.0176%" height="15" fill="rgb(209,126,11)" fg:x="5455" fg:w="1"/><text x="96.4751%" y="1263.50"></text></g><g><title>CheckProofOfWorkImpl (3 samples, 0.05%)</title><rect x="96.2074%" y="1269" width="0.0529%" height="15" fill="rgb(245,90,11)" fg:x="5454" fg:w="3"/><text x="96.4574%" y="1279.50"></text></g><g><title>operator&gt;(base_uint&lt;256u&gt; const&amp;, base_uint&lt;256u&gt; const&amp;) (1 samples, 0.02%)</title><rect x="96.2427%" y="1253" width="0.0176%" height="15" fill="rgb(211,195,10)" fg:x="5456" fg:w="1"/><text x="96.4927%" y="1263.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.02%)</title><rect x="96.2427%" y="1237" width="0.0176%" height="15" fill="rgb(231,45,45)" fg:x="5456" fg:w="1"/><text x="96.4927%" y="1247.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.2780%" y="1237" width="0.0176%" height="15" fill="rgb(246,100,43)" fg:x="5458" fg:w="1"/><text x="96.5280%" y="1247.50"></text></g><g><title>bool CDBIterator::GetKey&lt;std::pair&lt;unsigned char, uint256&gt; &gt; (1 samples, 0.02%)</title><rect x="96.2780%" y="1221" width="0.0176%" height="15" fill="rgb(241,193,8)" fg:x="5458" fg:w="1"/><text x="96.5280%" y="1231.50"></text></g><g><title>DataStream::DataStream (1 samples, 0.02%)</title><rect x="96.2780%" y="1205" width="0.0176%" height="15" fill="rgb(208,76,19)" fg:x="5458" fg:w="1"/><text x="96.5280%" y="1215.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (1 samples, 0.02%)</title><rect x="96.2780%" y="1189" width="0.0176%" height="15" fill="rgb(223,69,40)" fg:x="5458" fg:w="1"/><text x="96.5280%" y="1199.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (1 samples, 0.02%)</title><rect x="96.2780%" y="1173" width="0.0176%" height="15" fill="rgb(207,120,39)" fg:x="5458" fg:w="1"/><text x="96.5280%" y="1183.50"></text></g><g><title>CDBIterator::GetValueImpl (2 samples, 0.04%)</title><rect x="96.2780%" y="1253" width="0.0353%" height="15" fill="rgb(212,209,28)" fg:x="5458" fg:w="2"/><text x="96.5280%" y="1263.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="96.2956%" y="1237" width="0.0176%" height="15" fill="rgb(246,82,29)" fg:x="5459" fg:w="1"/><text x="96.5456%" y="1247.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.3133%" y="1173" width="0.0176%" height="15" fill="rgb(239,6,40)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="96.3133%" y="1157" width="0.0176%" height="15" fill="rgb(228,181,35)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="96.3133%" y="1141" width="0.0176%" height="15" fill="rgb(238,151,2)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1151.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="96.3133%" y="1125" width="0.0176%" height="15" fill="rgb(236,94,18)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1135.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (1 samples, 0.02%)</title><rect x="96.3133%" y="1109" width="0.0176%" height="15" fill="rgb(208,38,14)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1119.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="96.3133%" y="1093" width="0.0176%" height="15" fill="rgb(234,215,27)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1103.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="96.3133%" y="1077" width="0.0176%" height="15" fill="rgb(254,211,53)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1087.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="96.3133%" y="1061" width="0.0176%" height="15" fill="rgb(216,175,11)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1071.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="96.3133%" y="1045" width="0.0176%" height="15" fill="rgb(246,179,26)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1055.50"></text></g><g><title>std::operator^= (1 samples, 0.02%)</title><rect x="96.3133%" y="1029" width="0.0176%" height="15" fill="rgb(249,19,52)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1039.50"></text></g><g><title>std::operator^ (1 samples, 0.02%)</title><rect x="96.3133%" y="1013" width="0.0176%" height="15" fill="rgb(230,42,52)" fg:x="5460" fg:w="1"/><text x="96.5633%" y="1023.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, int&amp;&gt; (3 samples, 0.05%)</title><rect x="96.3309%" y="1173" width="0.0529%" height="15" fill="rgb(221,171,0)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, int&amp;&gt; (3 samples, 0.05%)</title><rect x="96.3309%" y="1157" width="0.0529%" height="15" fill="rgb(222,177,40)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="96.3309%" y="1141" width="0.0529%" height="15" fill="rgb(247,34,16)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1151.50"></text></g><g><title>unsigned int ser_readdata32&lt;DataStream&gt; (3 samples, 0.05%)</title><rect x="96.3309%" y="1125" width="0.0529%" height="15" fill="rgb(213,217,37)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1135.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (3 samples, 0.05%)</title><rect x="96.3309%" y="1109" width="0.0529%" height="15" fill="rgb(231,189,24)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1119.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (3 samples, 0.05%)</title><rect x="96.3309%" y="1093" width="0.0529%" height="15" fill="rgb(214,22,9)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1103.50"></text></g><g><title>DataStream::Xor (3 samples, 0.05%)</title><rect x="96.3309%" y="1077" width="0.0529%" height="15" fill="rgb(212,70,22)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1087.50"></text></g><g><title>util::Xor (3 samples, 0.05%)</title><rect x="96.3309%" y="1061" width="0.0529%" height="15" fill="rgb(249,64,51)" fg:x="5461" fg:w="3"/><text x="96.5809%" y="1071.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="96.3838%" y="1109" width="0.0176%" height="15" fill="rgb(249,148,20)" fg:x="5464" fg:w="1"/><text x="96.6338%" y="1119.50"></text></g><g><title>DataStream::read (1 samples, 0.02%)</title><rect x="96.3838%" y="1093" width="0.0176%" height="15" fill="rgb(246,46,48)" fg:x="5464" fg:w="1"/><text x="96.6338%" y="1103.50"></text></g><g><title>pthread_mutex_lock@plt (1 samples, 0.02%)</title><rect x="96.3838%" y="1077" width="0.0176%" height="15" fill="rgb(217,34,48)" fg:x="5464" fg:w="1"/><text x="96.6338%" y="1087.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (6 samples, 0.11%)</title><rect x="96.3133%" y="1253" width="0.1058%" height="15" fill="rgb(222,45,26)" fg:x="5460" fg:w="6"/><text x="96.5633%" y="1263.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (6 samples, 0.11%)</title><rect x="96.3133%" y="1237" width="0.1058%" height="15" fill="rgb(230,201,36)" fg:x="5460" fg:w="6"/><text x="96.5633%" y="1247.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (6 samples, 0.11%)</title><rect x="96.3133%" y="1221" width="0.1058%" height="15" fill="rgb(217,30,43)" fg:x="5460" fg:w="6"/><text x="96.5633%" y="1231.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (6 samples, 0.11%)</title><rect x="96.3133%" y="1205" width="0.1058%" height="15" fill="rgb(230,197,40)" fg:x="5460" fg:w="6"/><text x="96.5633%" y="1215.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (6 samples, 0.11%)</title><rect x="96.3133%" y="1189" width="0.1058%" height="15" fill="rgb(239,181,18)" fg:x="5460" fg:w="6"/><text x="96.5633%" y="1199.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, uint256&amp;&gt; (2 samples, 0.04%)</title><rect x="96.3838%" y="1173" width="0.0353%" height="15" fill="rgb(222,60,39)" fg:x="5464" fg:w="2"/><text x="96.6338%" y="1183.50"></text></g><g><title>void UnserializeMany&lt;DataStream, uint256&amp;&gt; (2 samples, 0.04%)</title><rect x="96.3838%" y="1157" width="0.0353%" height="15" fill="rgb(210,60,22)" fg:x="5464" fg:w="2"/><text x="96.6338%" y="1167.50"></text></g><g><title>void Unserialize&lt;DataStream, uint256&amp;&gt; (2 samples, 0.04%)</title><rect x="96.3838%" y="1141" width="0.0353%" height="15" fill="rgb(239,213,48)" fg:x="5464" fg:w="2"/><text x="96.6338%" y="1151.50"></text></g><g><title>void base_blob&lt;256u&gt;::Unserialize&lt;DataStream&gt; (2 samples, 0.04%)</title><rect x="96.3838%" y="1125" width="0.0353%" height="15" fill="rgb(253,214,23)" fg:x="5464" fg:w="2"/><text x="96.6338%" y="1135.50"></text></g><g><title>unsigned int ReadVarInt&lt;DataStream, (VarIntMode)0, unsigned int&gt; (1 samples, 0.02%)</title><rect x="96.4015%" y="1109" width="0.0176%" height="15" fill="rgb(211,98,45)" fg:x="5465" fg:w="1"/><text x="96.6515%" y="1119.50"></text></g><g><title>DataStream::DataStream (6 samples, 0.11%)</title><rect x="96.4191%" y="1253" width="0.1058%" height="15" fill="rgb(239,130,44)" fg:x="5466" fg:w="6"/><text x="96.6691%" y="1263.50"></text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::vector&lt;std::byte const*, void&gt; (6 samples, 0.11%)</title><rect x="96.4191%" y="1237" width="0.1058%" height="15" fill="rgb(222,181,35)" fg:x="5466" fg:w="6"/><text x="96.6691%" y="1247.50"></text></g><g><title>void std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_range_initialize&lt;std::byte const*&gt; (6 samples, 0.11%)</title><rect x="96.4191%" y="1221" width="0.1058%" height="15" fill="rgb(219,219,49)" fg:x="5466" fg:w="6"/><text x="96.6691%" y="1231.50"></text></g><g><title>std::byte* std::__uninitialized_copy_a&lt;std::byte const*, std::byte*, zero_after_free_allocator&lt;std::byte&gt; &gt; (6 samples, 0.11%)</title><rect x="96.4191%" y="1205" width="0.1058%" height="15" fill="rgb(227,161,51)" fg:x="5466" fg:w="6"/><text x="96.6691%" y="1215.50"></text></g><g><title>decltype  (4 samples, 0.07%)</title><rect x="96.4544%" y="1189" width="0.0706%" height="15" fill="rgb(239,112,27)" fg:x="5468" fg:w="4"/><text x="96.7044%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__and_&lt;std::__and_&lt;std::__not_&lt;std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::__construct_helper&lt;std::byte, std::byte const&amp;&gt;::type&gt;, std::is_constructible&lt;std::byte, std::byte const&amp;&gt; &gt; &gt;::value, void&gt;::type std::allocator_traits&lt;zero_after_free_allocator&lt;std::byte&gt; &gt;::_S_construct&lt;std::byte, std::byte const&amp;&gt; (4 samples, 0.07%)</title><rect x="96.4544%" y="1173" width="0.0706%" height="15" fill="rgb(248,122,18)" fg:x="5468" fg:w="4"/><text x="96.7044%" y="1183.50"></text></g><g><title>decltype (4 samples, 0.07%)</title><rect x="96.4544%" y="1157" width="0.0706%" height="15" fill="rgb(245,130,23)" fg:x="5468" fg:w="4"/><text x="96.7044%" y="1167.50"></text></g><g><title>DataStream::Xor (1 samples, 0.02%)</title><rect x="96.5250%" y="1253" width="0.0176%" height="15" fill="rgb(211,225,28)" fg:x="5472" fg:w="1"/><text x="96.7750%" y="1263.50"></text></g><g><title>util::Xor (1 samples, 0.02%)</title><rect x="96.5250%" y="1237" width="0.0176%" height="15" fill="rgb(242,105,44)" fg:x="5472" fg:w="1"/><text x="96.7750%" y="1247.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (20 samples, 0.35%)</title><rect x="96.2604%" y="1269" width="0.3528%" height="15" fill="rgb(216,183,46)" fg:x="5457" fg:w="20"/><text x="96.5104%" y="1279.50"></text></g><g><title>dbwrapper_private::GetObfuscateKey (4 samples, 0.07%)</title><rect x="96.5426%" y="1253" width="0.0706%" height="15" fill="rgb(227,112,9)" fg:x="5473" fg:w="4"/><text x="96.7926%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.5426%" y="1237" width="0.0706%" height="15" fill="rgb(244,21,0)" fg:x="5473" fg:w="4"/><text x="96.7926%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.5426%" y="1221" width="0.0706%" height="15" fill="rgb(236,185,14)" fg:x="5473" fg:w="4"/><text x="96.7926%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.5426%" y="1205" width="0.0706%" height="15" fill="rgb(236,170,30)" fg:x="5473" fg:w="4"/><text x="96.7926%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.5426%" y="1189" width="0.0706%" height="15" fill="rgb(209,198,51)" fg:x="5473" fg:w="4"/><text x="96.7926%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="96.5426%" y="1173" width="0.0706%" height="15" fill="rgb(205,171,26)" fg:x="5473" fg:w="4"/><text x="96.7926%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1157" width="0.0529%" height="15" fill="rgb(246,41,49)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1141" width="0.0529%" height="15" fill="rgb(240,229,12)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1125" width="0.0529%" height="15" fill="rgb(212,8,54)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1109" width="0.0529%" height="15" fill="rgb(230,114,13)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1093" width="0.0529%" height="15" fill="rgb(229,130,28)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1077" width="0.0529%" height="15" fill="rgb(206,139,15)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1061" width="0.0529%" height="15" fill="rgb(241,188,35)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1045" width="0.0529%" height="15" fill="rgb(208,224,26)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="96.5602%" y="1029" width="0.0529%" height="15" fill="rgb(251,131,28)" fg:x="5474" fg:w="3"/><text x="96.8102%" y="1039.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="96.6132%" y="1253" width="0.0176%" height="15" fill="rgb(208,153,1)" fg:x="5477" fg:w="1"/><text x="96.8632%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (2 samples, 0.04%)</title><rect x="96.6132%" y="1269" width="0.0353%" height="15" fill="rgb(234,33,36)" fg:x="5477" fg:w="2"/><text x="96.8632%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.6308%" y="1253" width="0.0176%" height="15" fill="rgb(246,42,29)" fg:x="5478" fg:w="1"/><text x="96.8808%" y="1263.50"></text></g><g><title>Next (1 samples, 0.02%)</title><rect x="96.6484%" y="1253" width="0.0176%" height="15" fill="rgb(251,114,16)" fg:x="5479" fg:w="1"/><text x="96.8984%" y="1263.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.02%)</title><rect x="96.6484%" y="1237" width="0.0176%" height="15" fill="rgb(233,13,38)" fg:x="5479" fg:w="1"/><text x="96.8984%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::key (1 samples, 0.02%)</title><rect x="96.6484%" y="1221" width="0.0176%" height="15" fill="rgb(247,120,19)" fg:x="5479" fg:w="1"/><text x="96.8984%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.04%)</title><rect x="96.6484%" y="1269" width="0.0353%" height="15" fill="rgb(205,11,16)" fg:x="5479" fg:w="2"/><text x="96.8984%" y="1279.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="96.6661%" y="1253" width="0.0176%" height="15" fill="rgb(228,185,19)" fg:x="5480" fg:w="1"/><text x="96.9161%" y="1263.50"></text></g><g><title>leveldb::Block::Iter::ParseNextKey (1 samples, 0.02%)</title><rect x="96.6661%" y="1237" width="0.0176%" height="15" fill="rgb(239,88,52)" fg:x="5480" fg:w="1"/><text x="96.9161%" y="1247.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.04%)</title><rect x="96.6837%" y="1269" width="0.0353%" height="15" fill="rgb(219,23,1)" fg:x="5481" fg:w="2"/><text x="96.9337%" y="1279.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="96.7014%" y="1253" width="0.0176%" height="15" fill="rgb(253,177,16)" fg:x="5482" fg:w="1"/><text x="96.9514%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2 samples, 0.04%)</title><rect x="96.7190%" y="1205" width="0.0353%" height="15" fill="rgb(225,150,40)" fg:x="5483" fg:w="2"/><text x="96.9690%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="96.7190%" y="1189" width="0.0353%" height="15" fill="rgb(208,108,30)" fg:x="5483" fg:w="2"/><text x="96.9690%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="96.7366%" y="1173" width="0.0176%" height="15" fill="rgb(214,122,4)" fg:x="5484" fg:w="1"/><text x="96.9866%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="96.7366%" y="1157" width="0.0176%" height="15" fill="rgb(229,74,37)" fg:x="5484" fg:w="1"/><text x="96.9866%" y="1167.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (3 samples, 0.05%)</title><rect x="96.8601%" y="1157" width="0.0529%" height="15" fill="rgb(233,61,41)" fg:x="5491" fg:w="3"/><text x="97.1101%" y="1167.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (3 samples, 0.05%)</title><rect x="96.8601%" y="1141" width="0.0529%" height="15" fill="rgb(238,191,5)" fg:x="5491" fg:w="3"/><text x="97.1101%" y="1151.50"></text></g><g><title>__memset_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="96.8601%" y="1125" width="0.0529%" height="15" fill="rgb(233,78,24)" fg:x="5491" fg:w="3"/><text x="97.1101%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8954%" y="1109" width="0.0176%" height="15" fill="rgb(211,142,8)" fg:x="5493" fg:w="1"/><text x="97.1454%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8954%" y="1093" width="0.0176%" height="15" fill="rgb(253,38,53)" fg:x="5493" fg:w="1"/><text x="97.1454%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8954%" y="1077" width="0.0176%" height="15" fill="rgb(234,63,51)" fg:x="5493" fg:w="1"/><text x="97.1454%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8954%" y="1061" width="0.0176%" height="15" fill="rgb(205,23,31)" fg:x="5493" fg:w="1"/><text x="97.1454%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8954%" y="1045" width="0.0176%" height="15" fill="rgb(210,184,50)" fg:x="5493" fg:w="1"/><text x="97.1454%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8954%" y="1029" width="0.0176%" height="15" fill="rgb(222,112,26)" fg:x="5493" fg:w="1"/><text x="97.1454%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.8954%" y="1013" width="0.0176%" height="15" fill="rgb(250,98,18)" fg:x="5493" fg:w="1"/><text x="97.1454%" y="1023.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10 samples, 0.18%)</title><rect x="96.7543%" y="1205" width="0.1764%" height="15" fill="rgb(250,34,12)" fg:x="5485" fg:w="10"/><text x="97.0043%" y="1215.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10 samples, 0.18%)</title><rect x="96.7543%" y="1189" width="0.1764%" height="15" fill="rgb(236,141,30)" fg:x="5485" fg:w="10"/><text x="97.0043%" y="1199.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (10 samples, 0.18%)</title><rect x="96.7543%" y="1173" width="0.1764%" height="15" fill="rgb(246,134,38)" fg:x="5485" fg:w="10"/><text x="97.0043%" y="1183.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.02%)</title><rect x="96.9130%" y="1157" width="0.0176%" height="15" fill="rgb(240,114,4)" fg:x="5494" fg:w="1"/><text x="97.1630%" y="1167.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.02%)</title><rect x="96.9130%" y="1141" width="0.0176%" height="15" fill="rgb(243,113,39)" fg:x="5494" fg:w="1"/><text x="97.1630%" y="1151.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (13 samples, 0.23%)</title><rect x="96.7190%" y="1253" width="0.2293%" height="15" fill="rgb(239,215,4)" fg:x="5483" fg:w="13"/><text x="96.9690%" y="1263.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (13 samples, 0.23%)</title><rect x="96.7190%" y="1237" width="0.2293%" height="15" fill="rgb(236,229,45)" fg:x="5483" fg:w="13"/><text x="96.9690%" y="1247.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (13 samples, 0.23%)</title><rect x="96.7190%" y="1221" width="0.2293%" height="15" fill="rgb(242,2,6)" fg:x="5483" fg:w="13"/><text x="96.9690%" y="1231.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9307%" y="1205" width="0.0176%" height="15" fill="rgb(239,108,21)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1215.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="96.9307%" y="1189" width="0.0176%" height="15" fill="rgb(215,168,34)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1199.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="96.9307%" y="1173" width="0.0176%" height="15" fill="rgb(238,31,17)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1183.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="96.9307%" y="1157" width="0.0176%" height="15" fill="rgb(220,133,11)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1167.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="96.9307%" y="1141" width="0.0176%" height="15" fill="rgb(212,158,23)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1151.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="96.9307%" y="1125" width="0.0176%" height="15" fill="rgb(223,172,7)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1135.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="96.9307%" y="1109" width="0.0176%" height="15" fill="rgb(244,3,52)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1119.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="96.9307%" y="1093" width="0.0176%" height="15" fill="rgb(207,69,27)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="1077" width="0.0176%" height="15" fill="rgb(213,136,45)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="1061" width="0.0176%" height="15" fill="rgb(218,79,17)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="1045" width="0.0176%" height="15" fill="rgb(216,106,36)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="1029" width="0.0176%" height="15" fill="rgb(251,27,45)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="1013" width="0.0176%" height="15" fill="rgb(232,21,34)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="997" width="0.0176%" height="15" fill="rgb(249,191,16)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="981" width="0.0176%" height="15" fill="rgb(224,88,20)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="965" width="0.0176%" height="15" fill="rgb(237,93,27)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="949" width="0.0176%" height="15" fill="rgb(226,198,48)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="933" width="0.0176%" height="15" fill="rgb(207,162,53)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.9307%" y="917" width="0.0176%" height="15" fill="rgb(207,169,9)" fg:x="5495" fg:w="1"/><text x="97.1807%" y="927.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (53 samples, 0.93%)</title><rect x="96.0310%" y="1285" width="0.9349%" height="15" fill="rgb(224,166,46)" fg:x="5444" fg:w="53"/><text x="96.2810%" y="1295.50"></text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (14 samples, 0.25%)</title><rect x="96.7190%" y="1269" width="0.2470%" height="15" fill="rgb(233,26,6)" fg:x="5483" fg:w="14"/><text x="96.9690%" y="1279.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="96.9483%" y="1253" width="0.0176%" height="15" fill="rgb(218,106,45)" fg:x="5496" fg:w="1"/><text x="97.1983%" y="1263.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (7 samples, 0.12%)</title><rect x="96.9660%" y="1285" width="0.1235%" height="15" fill="rgb(240,217,4)" fg:x="5497" fg:w="7"/><text x="97.2160%" y="1295.50"></text></g><g><title>std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::push_back (6 samples, 0.11%)</title><rect x="96.9836%" y="1269" width="0.1058%" height="15" fill="rgb(246,171,10)" fg:x="5498" fg:w="6"/><text x="97.2336%" y="1279.50"></text></g><g><title>CBlockIndex*&amp; std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt;::emplace_back&lt;CBlockIndex*&gt; (6 samples, 0.11%)</title><rect x="96.9836%" y="1253" width="0.1058%" height="15" fill="rgb(223,197,30)" fg:x="5498" fg:w="6"/><text x="97.2336%" y="1263.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="97.0894%" y="1285" width="0.0176%" height="15" fill="rgb(207,92,16)" fg:x="5504" fg:w="1"/><text x="97.3394%" y="1295.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1 samples, 0.02%)</title><rect x="97.0894%" y="1269" width="0.0176%" height="15" fill="rgb(211,6,44)" fg:x="5504" fg:w="1"/><text x="97.3394%" y="1279.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (1 samples, 0.02%)</title><rect x="97.0894%" y="1253" width="0.0176%" height="15" fill="rgb(219,139,2)" fg:x="5504" fg:w="1"/><text x="97.3394%" y="1263.50"></text></g><g><title>std::equal_to&lt;uint256&gt;::operator (1 samples, 0.02%)</title><rect x="97.0894%" y="1237" width="0.0176%" height="15" fill="rgb(224,103,21)" fg:x="5504" fg:w="1"/><text x="97.3394%" y="1247.50"></text></g><g><title>operator== (1 samples, 0.02%)</title><rect x="97.0894%" y="1221" width="0.0176%" height="15" fill="rgb(254,110,48)" fg:x="5504" fg:w="1"/><text x="97.3394%" y="1231.50"></text></g><g><title>base_blob&lt;256u&gt;::Compare (1 samples, 0.02%)</title><rect x="97.0894%" y="1205" width="0.0176%" height="15" fill="rgb(212,88,19)" fg:x="5504" fg:w="1"/><text x="97.3394%" y="1215.50"></text></g><g><title>value (1 samples, 0.02%)</title><rect x="97.1071%" y="1285" width="0.0176%" height="15" fill="rgb(248,103,6)" fg:x="5505" fg:w="1"/><text x="97.3571%" y="1295.50"></text></g><g><title>leveldb::IteratorWrapper::value (1 samples, 0.02%)</title><rect x="97.1071%" y="1269" width="0.0176%" height="15" fill="rgb(214,53,46)" fg:x="5505" fg:w="1"/><text x="97.3571%" y="1279.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (3 samples, 0.05%)</title><rect x="97.1247%" y="1189" width="0.0529%" height="15" fill="rgb(236,190,24)" fg:x="5506" fg:w="3"/><text x="97.3747%" y="1199.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (3 samples, 0.05%)</title><rect x="97.1247%" y="1173" width="0.0529%" height="15" fill="rgb(254,58,28)" fg:x="5506" fg:w="3"/><text x="97.3747%" y="1183.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.1247%" y="1157" width="0.0529%" height="15" fill="rgb(243,63,27)" fg:x="5506" fg:w="3"/><text x="97.3747%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.1247%" y="1141" width="0.0529%" height="15" fill="rgb(206,81,20)" fg:x="5506" fg:w="3"/><text x="97.3747%" y="1151.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.1247%" y="1125" width="0.0529%" height="15" fill="rgb(252,69,51)" fg:x="5506" fg:w="3"/><text x="97.3747%" y="1135.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.1247%" y="1253" width="0.0706%" height="15" fill="rgb(222,213,4)" fg:x="5506" fg:w="4"/><text x="97.3747%" y="1263.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.1247%" y="1237" width="0.0706%" height="15" fill="rgb(226,198,12)" fg:x="5506" fg:w="4"/><text x="97.3747%" y="1247.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.1247%" y="1221" width="0.0706%" height="15" fill="rgb(248,115,11)" fg:x="5506" fg:w="4"/><text x="97.3747%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.07%)</title><rect x="97.1247%" y="1205" width="0.0706%" height="15" fill="rgb(221,148,54)" fg:x="5506" fg:w="4"/><text x="97.3747%" y="1215.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.1776%" y="1189" width="0.0176%" height="15" fill="rgb(214,209,51)" fg:x="5509" fg:w="1"/><text x="97.4276%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;::operator-- (2 samples, 0.04%)</title><rect x="97.1953%" y="1141" width="0.0353%" height="15" fill="rgb(249,116,53)" fg:x="5510" fg:w="2"/><text x="97.4453%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.1953%" y="1237" width="0.0882%" height="15" fill="rgb(248,170,1)" fg:x="5510" fg:w="5"/><text x="97.4453%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.1953%" y="1221" width="0.0882%" height="15" fill="rgb(244,105,10)" fg:x="5510" fg:w="5"/><text x="97.4453%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (5 samples, 0.09%)</title><rect x="97.1953%" y="1205" width="0.0882%" height="15" fill="rgb(229,100,5)" fg:x="5510" fg:w="5"/><text x="97.4453%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.1953%" y="1189" width="0.0882%" height="15" fill="rgb(233,221,39)" fg:x="5510" fg:w="5"/><text x="97.4453%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.1953%" y="1173" width="0.0882%" height="15" fill="rgb(233,88,21)" fg:x="5510" fg:w="5"/><text x="97.4453%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.1953%" y="1157" width="0.0882%" height="15" fill="rgb(206,13,0)" fg:x="5510" fg:w="5"/><text x="97.4453%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.05%)</title><rect x="97.2306%" y="1141" width="0.0529%" height="15" fill="rgb(242,15,35)" fg:x="5512" fg:w="3"/><text x="97.4806%" y="1151.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.04%)</title><rect x="97.2835%" y="1173" width="0.0353%" height="15" fill="rgb(247,142,41)" fg:x="5515" fg:w="2"/><text x="97.5335%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.2835%" y="1221" width="0.0529%" height="15" fill="rgb(245,51,29)" fg:x="5515" fg:w="3"/><text x="97.5335%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.2835%" y="1205" width="0.0529%" height="15" fill="rgb(228,209,43)" fg:x="5515" fg:w="3"/><text x="97.5335%" y="1215.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.05%)</title><rect x="97.2835%" y="1189" width="0.0529%" height="15" fill="rgb(233,185,9)" fg:x="5515" fg:w="3"/><text x="97.5335%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3188%" y="1173" width="0.0176%" height="15" fill="rgb(226,93,0)" fg:x="5517" fg:w="1"/><text x="97.5688%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3188%" y="1157" width="0.0176%" height="15" fill="rgb(245,194,43)" fg:x="5517" fg:w="1"/><text x="97.5688%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3188%" y="1141" width="0.0176%" height="15" fill="rgb(211,145,34)" fg:x="5517" fg:w="1"/><text x="97.5688%" y="1151.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.3188%" y="1125" width="0.0176%" height="15" fill="rgb(231,228,28)" fg:x="5517" fg:w="1"/><text x="97.5688%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3364%" y="1205" width="0.0176%" height="15" fill="rgb(236,149,4)" fg:x="5518" fg:w="1"/><text x="97.5864%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.3364%" y="1189" width="0.0176%" height="15" fill="rgb(234,114,38)" fg:x="5518" fg:w="1"/><text x="97.5864%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.3364%" y="1173" width="0.0176%" height="15" fill="rgb(246,132,51)" fg:x="5518" fg:w="1"/><text x="97.5864%" y="1183.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (165 samples, 2.91%)</title><rect x="94.4787%" y="1301" width="2.9106%" height="15" fill="rgb(251,137,22)" fg:x="5356" fg:w="165"/><text x="94.7287%" y="1311.50">no..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (15 samples, 0.26%)</title><rect x="97.1247%" y="1285" width="0.2646%" height="15" fill="rgb(243,59,52)" fg:x="5506" fg:w="15"/><text x="97.3747%" y="1295.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (15 samples, 0.26%)</title><rect x="97.1247%" y="1269" width="0.2646%" height="15" fill="rgb(239,56,28)" fg:x="5506" fg:w="15"/><text x="97.3747%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (11 samples, 0.19%)</title><rect x="97.1953%" y="1253" width="0.1940%" height="15" fill="rgb(218,168,27)" fg:x="5510" fg:w="11"/><text x="97.4453%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (6 samples, 0.11%)</title><rect x="97.2835%" y="1237" width="0.1058%" height="15" fill="rgb(232,165,11)" fg:x="5515" fg:w="6"/><text x="97.5335%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.3364%" y="1221" width="0.0529%" height="15" fill="rgb(253,55,41)" fg:x="5518" fg:w="3"/><text x="97.5864%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3540%" y="1205" width="0.0353%" height="15" fill="rgb(233,206,24)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3540%" y="1189" width="0.0353%" height="15" fill="rgb(220,199,8)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3540%" y="1173" width="0.0353%" height="15" fill="rgb(254,65,26)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3540%" y="1157" width="0.0353%" height="15" fill="rgb(253,102,23)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1167.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.04%)</title><rect x="97.3540%" y="1141" width="0.0353%" height="15" fill="rgb(231,103,35)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1151.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3540%" y="1125" width="0.0353%" height="15" fill="rgb(238,26,10)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3540%" y="1109" width="0.0353%" height="15" fill="rgb(234,191,34)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1119.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.3540%" y="1093" width="0.0353%" height="15" fill="rgb(206,210,9)" fg:x="5519" fg:w="2"/><text x="97.6040%" y="1103.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.3717%" y="1077" width="0.0176%" height="15" fill="rgb(219,155,3)" fg:x="5520" fg:w="1"/><text x="97.6217%" y="1087.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (176 samples, 3.10%)</title><rect x="94.3200%" y="1317" width="3.1046%" height="15" fill="rgb(221,62,52)" fg:x="5347" fg:w="176"/><text x="94.5700%" y="1327.50">nod..</text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (2 samples, 0.04%)</title><rect x="97.3893%" y="1301" width="0.0353%" height="15" fill="rgb(215,197,36)" fg:x="5521" fg:w="2"/><text x="97.6393%" y="1311.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (2 samples, 0.04%)</title><rect x="97.3893%" y="1285" width="0.0353%" height="15" fill="rgb(226,222,6)" fg:x="5521" fg:w="2"/><text x="97.6393%" y="1295.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (2 samples, 0.04%)</title><rect x="97.3893%" y="1269" width="0.0353%" height="15" fill="rgb(215,58,28)" fg:x="5521" fg:w="2"/><text x="97.6393%" y="1279.50"></text></g><g><title>util::SignalInterrupt::operator bool (2 samples, 0.04%)</title><rect x="97.4246%" y="1317" width="0.0353%" height="15" fill="rgb(212,148,2)" fg:x="5523" fg:w="2"/><text x="97.6746%" y="1327.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (2 samples, 0.04%)</title><rect x="97.4775%" y="1221" width="0.0353%" height="15" fill="rgb(208,21,42)" fg:x="5526" fg:w="2"/><text x="97.7275%" y="1231.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.04%)</title><rect x="97.4775%" y="1205" width="0.0353%" height="15" fill="rgb(209,107,26)" fg:x="5526" fg:w="2"/><text x="97.7275%" y="1215.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.4775%" y="1189" width="0.0353%" height="15" fill="rgb(254,60,47)" fg:x="5526" fg:w="2"/><text x="97.7275%" y="1199.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.4775%" y="1173" width="0.0353%" height="15" fill="rgb(207,226,45)" fg:x="5526" fg:w="2"/><text x="97.7275%" y="1183.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.04%)</title><rect x="97.4775%" y="1157" width="0.0353%" height="15" fill="rgb(223,124,22)" fg:x="5526" fg:w="2"/><text x="97.7275%" y="1167.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.4599%" y="1285" width="0.0882%" height="15" fill="rgb(240,162,13)" fg:x="5525" fg:w="5"/><text x="97.7099%" y="1295.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (5 samples, 0.09%)</title><rect x="97.4599%" y="1269" width="0.0882%" height="15" fill="rgb(244,199,31)" fg:x="5525" fg:w="5"/><text x="97.7099%" y="1279.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.4775%" y="1253" width="0.0706%" height="15" fill="rgb(207,92,16)" fg:x="5526" fg:w="4"/><text x="97.7275%" y="1263.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.07%)</title><rect x="97.4775%" y="1237" width="0.0706%" height="15" fill="rgb(215,31,19)" fg:x="5526" fg:w="4"/><text x="97.7275%" y="1247.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.04%)</title><rect x="97.5128%" y="1221" width="0.0353%" height="15" fill="rgb(245,118,14)" fg:x="5528" fg:w="2"/><text x="97.7628%" y="1231.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.5481%" y="1221" width="0.0176%" height="15" fill="rgb(248,12,46)" fg:x="5530" fg:w="1"/><text x="97.7981%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;::operator-- (1 samples, 0.02%)</title><rect x="97.5657%" y="1173" width="0.0176%" height="15" fill="rgb(209,119,0)" fg:x="5531" fg:w="1"/><text x="97.8157%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.5481%" y="1269" width="0.0706%" height="15" fill="rgb(254,51,44)" fg:x="5530" fg:w="4"/><text x="97.7981%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.5481%" y="1253" width="0.0706%" height="15" fill="rgb(253,182,35)" fg:x="5530" fg:w="4"/><text x="97.7981%" y="1263.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (4 samples, 0.07%)</title><rect x="97.5481%" y="1237" width="0.0706%" height="15" fill="rgb(205,198,39)" fg:x="5530" fg:w="4"/><text x="97.7981%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.5657%" y="1221" width="0.0529%" height="15" fill="rgb(251,175,48)" fg:x="5531" fg:w="3"/><text x="97.8157%" y="1231.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.5657%" y="1205" width="0.0529%" height="15" fill="rgb(239,38,17)" fg:x="5531" fg:w="3"/><text x="97.8157%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.5657%" y="1189" width="0.0529%" height="15" fill="rgb(212,101,8)" fg:x="5531" fg:w="3"/><text x="97.8157%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (2 samples, 0.04%)</title><rect x="97.5833%" y="1173" width="0.0353%" height="15" fill="rgb(228,35,17)" fg:x="5532" fg:w="2"/><text x="97.8333%" y="1183.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (2 samples, 0.04%)</title><rect x="97.6186%" y="1205" width="0.0353%" height="15" fill="rgb(214,95,8)" fg:x="5534" fg:w="2"/><text x="97.8686%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.6186%" y="1253" width="0.0529%" height="15" fill="rgb(210,176,35)" fg:x="5534" fg:w="3"/><text x="97.8686%" y="1263.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.6186%" y="1237" width="0.0529%" height="15" fill="rgb(226,4,3)" fg:x="5534" fg:w="3"/><text x="97.8686%" y="1247.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (3 samples, 0.05%)</title><rect x="97.6186%" y="1221" width="0.0529%" height="15" fill="rgb(232,133,14)" fg:x="5534" fg:w="3"/><text x="97.8686%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6539%" y="1205" width="0.0176%" height="15" fill="rgb(250,191,8)" fg:x="5536" fg:w="1"/><text x="97.9039%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6539%" y="1189" width="0.0176%" height="15" fill="rgb(213,12,45)" fg:x="5536" fg:w="1"/><text x="97.9039%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6539%" y="1173" width="0.0176%" height="15" fill="rgb(233,78,26)" fg:x="5536" fg:w="1"/><text x="97.9039%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6715%" y="1237" width="0.0176%" height="15" fill="rgb(245,222,11)" fg:x="5537" fg:w="1"/><text x="97.9215%" y="1247.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6715%" y="1221" width="0.0176%" height="15" fill="rgb(216,174,12)" fg:x="5537" fg:w="1"/><text x="97.9215%" y="1231.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.6715%" y="1205" width="0.0176%" height="15" fill="rgb(213,15,9)" fg:x="5537" fg:w="1"/><text x="97.9215%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6715%" y="1189" width="0.0176%" height="15" fill="rgb(238,103,32)" fg:x="5537" fg:w="1"/><text x="97.9215%" y="1199.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6715%" y="1173" width="0.0176%" height="15" fill="rgb(245,85,15)" fg:x="5537" fg:w="1"/><text x="97.9215%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6715%" y="1157" width="0.0176%" height="15" fill="rgb(254,204,5)" fg:x="5537" fg:w="1"/><text x="97.9215%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;::operator-- (1 samples, 0.02%)</title><rect x="97.6715%" y="1141" width="0.0176%" height="15" fill="rgb(231,178,15)" fg:x="5537" fg:w="1"/><text x="97.9215%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6892%" y="1205" width="0.0176%" height="15" fill="rgb(248,151,3)" fg:x="5538" fg:w="1"/><text x="97.9392%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6892%" y="1189" width="0.0176%" height="15" fill="rgb(250,139,13)" fg:x="5538" fg:w="1"/><text x="97.9392%" y="1199.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.6892%" y="1173" width="0.0176%" height="15" fill="rgb(243,107,53)" fg:x="5538" fg:w="1"/><text x="97.9392%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6892%" y="1157" width="0.0176%" height="15" fill="rgb(232,81,15)" fg:x="5538" fg:w="1"/><text x="97.9392%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6892%" y="1141" width="0.0176%" height="15" fill="rgb(225,187,48)" fg:x="5538" fg:w="1"/><text x="97.9392%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.6892%" y="1125" width="0.0176%" height="15" fill="rgb(205,116,12)" fg:x="5538" fg:w="1"/><text x="97.9392%" y="1135.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.6892%" y="1109" width="0.0176%" height="15" fill="rgb(220,222,31)" fg:x="5538" fg:w="1"/><text x="97.9392%" y="1119.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.7068%" y="1205" width="0.0176%" height="15" fill="rgb(233,187,49)" fg:x="5539" fg:w="1"/><text x="97.9568%" y="1215.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (202 samples, 3.56%)</title><rect x="94.1789%" y="1333" width="3.5632%" height="15" fill="rgb(211,168,53)" fg:x="5339" fg:w="202"/><text x="94.4289%" y="1343.50">Chai..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (16 samples, 0.28%)</title><rect x="97.4599%" y="1317" width="0.2822%" height="15" fill="rgb(206,160,16)" fg:x="5525" fg:w="16"/><text x="97.7099%" y="1327.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (16 samples, 0.28%)</title><rect x="97.4599%" y="1301" width="0.2822%" height="15" fill="rgb(254,164,13)" fg:x="5525" fg:w="16"/><text x="97.7099%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (11 samples, 0.19%)</title><rect x="97.5481%" y="1285" width="0.1940%" height="15" fill="rgb(229,45,30)" fg:x="5530" fg:w="11"/><text x="97.7981%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (7 samples, 0.12%)</title><rect x="97.6186%" y="1269" width="0.1235%" height="15" fill="rgb(237,32,10)" fg:x="5534" fg:w="7"/><text x="97.8686%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (4 samples, 0.07%)</title><rect x="97.6715%" y="1253" width="0.0706%" height="15" fill="rgb(251,20,47)" fg:x="5537" fg:w="4"/><text x="97.9215%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.6892%" y="1237" width="0.0529%" height="15" fill="rgb(251,116,12)" fg:x="5538" fg:w="3"/><text x="97.9392%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.05%)</title><rect x="97.6892%" y="1221" width="0.0529%" height="15" fill="rgb(214,227,27)" fg:x="5538" fg:w="3"/><text x="97.9392%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7245%" y="1205" width="0.0176%" height="15" fill="rgb(248,10,53)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7245%" y="1189" width="0.0176%" height="15" fill="rgb(221,176,25)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7245%" y="1173" width="0.0176%" height="15" fill="rgb(205,70,46)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1183.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7245%" y="1157" width="0.0176%" height="15" fill="rgb(217,45,38)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1167.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7245%" y="1141" width="0.0176%" height="15" fill="rgb(243,6,54)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1151.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7245%" y="1125" width="0.0176%" height="15" fill="rgb(242,76,23)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1135.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="97.7245%" y="1109" width="0.0176%" height="15" fill="rgb(239,166,0)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1119.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="97.7245%" y="1093" width="0.0176%" height="15" fill="rgb(238,174,32)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1103.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="97.7245%" y="1077" width="0.0176%" height="15" fill="rgb(238,124,44)" fg:x="5540" fg:w="1"/><text x="97.9745%" y="1087.50"></text></g><g><title>any_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (3 samples, 0.05%)</title><rect x="97.7421%" y="1333" width="0.0529%" height="15" fill="rgb(206,185,9)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1343.50"></text></g><g><title>none_of&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (3 samples, 0.05%)</title><rect x="97.7421%" y="1317" width="0.0529%" height="15" fill="rgb(215,157,17)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1327.50"></text></g><g><title>find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; (3 samples, 0.05%)</title><rect x="97.7421%" y="1301" width="0.0529%" height="15" fill="rgb(251,17,29)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1311.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="97.7421%" y="1285" width="0.0529%" height="15" fill="rgb(227,113,27)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1295.50"></text></g><g><title>__find_if&lt;__gnu_cxx::__normal_iterator&lt;Chainstate**, std::vector&lt;Chainstate*&gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;node::CompleteChainstateInitialization(ChainstateManager&amp;, const CacheSizes&amp;, const ChainstateLoadOptions&amp;)::&lt;lambda(const Chainstate*)&gt; &gt; &gt; (3 samples, 0.05%)</title><rect x="97.7421%" y="1269" width="0.0529%" height="15" fill="rgb(217,226,24)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1279.50"></text></g><g><title>operator (3 samples, 0.05%)</title><rect x="97.7421%" y="1253" width="0.0529%" height="15" fill="rgb(251,99,38)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1263.50"></text></g><g><title>node::CompleteChainstateInitialization (3 samples, 0.05%)</title><rect x="97.7421%" y="1237" width="0.0529%" height="15" fill="rgb(231,147,19)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1247.50"></text></g><g><title>Chainstate::NeedsRedownload (3 samples, 0.05%)</title><rect x="97.7421%" y="1221" width="0.0529%" height="15" fill="rgb(230,86,8)" fg:x="5541" fg:w="3"/><text x="97.9921%" y="1231.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.02%)</title><rect x="97.7950%" y="1333" width="0.0176%" height="15" fill="rgb(237,159,39)" fg:x="5544" fg:w="1"/><text x="98.0450%" y="1343.50"></text></g><g><title>operator (217 samples, 3.83%)</title><rect x="94.0201%" y="1397" width="3.8278%" height="15" fill="rgb(247,179,47)" fg:x="5330" fg:w="217"/><text x="94.2701%" y="1407.50">oper..</text></g><g><title>InitAndLoadChainstate (217 samples, 3.83%)</title><rect x="94.0201%" y="1381" width="3.8278%" height="15" fill="rgb(253,152,26)" fg:x="5330" fg:w="217"/><text x="94.2701%" y="1391.50">Init..</text></g><g><title>node::LoadChainstate (217 samples, 3.83%)</title><rect x="94.0201%" y="1365" width="3.8278%" height="15" fill="rgb(222,211,15)" fg:x="5330" fg:w="217"/><text x="94.2701%" y="1375.50">node..</text></g><g><title>node::CompleteChainstateInitialization (216 samples, 3.81%)</title><rect x="94.0377%" y="1349" width="3.8102%" height="15" fill="rgb(236,193,6)" fg:x="5331" fg:w="216"/><text x="94.2877%" y="1359.50">node..</text></g><g><title>util::SignalInterrupt::operator bool (2 samples, 0.04%)</title><rect x="97.8127%" y="1333" width="0.0353%" height="15" fill="rgb(226,206,10)" fg:x="5545" fg:w="2"/><text x="98.0627%" y="1343.50"></text></g><g><title>main (218 samples, 3.85%)</title><rect x="94.0201%" y="1445" width="3.8455%" height="15" fill="rgb(213,125,22)" fg:x="5330" fg:w="218"/><text x="94.2701%" y="1455.50">main</text></g><g><title>AppInitMain (218 samples, 3.85%)</title><rect x="94.0201%" y="1429" width="3.8455%" height="15" fill="rgb(221,66,28)" fg:x="5330" fg:w="218"/><text x="94.2701%" y="1439.50">AppI..</text></g><g><title>InitAndLoadChainstate (218 samples, 3.85%)</title><rect x="94.0201%" y="1413" width="3.8455%" height="15" fill="rgb(222,84,53)" fg:x="5330" fg:w="218"/><text x="94.2701%" y="1423.50">Init..</text></g><g><title>std::__detail::_MakeUniq&lt;ChainstateManager&gt;::__single_object std::make_unique&lt;ChainstateManager, util::SignalInterrupt&amp;, kernel::ChainstateManagerOpts&amp;, kernel::BlockManagerOpts&amp;&gt; (1 samples, 0.02%)</title><rect x="97.8479%" y="1397" width="0.0176%" height="15" fill="rgb(243,50,15)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1407.50"></text></g><g><title>ChainstateManager::ChainstateManager (1 samples, 0.02%)</title><rect x="97.8479%" y="1381" width="0.0176%" height="15" fill="rgb(208,184,23)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1391.50"></text></g><g><title>ValidationCache::ValidationCache (1 samples, 0.02%)</title><rect x="97.8479%" y="1365" width="0.0176%" height="15" fill="rgb(221,83,2)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1375.50"></text></g><g><title>SignatureCache::SignatureCache (1 samples, 0.02%)</title><rect x="97.8479%" y="1349" width="0.0176%" height="15" fill="rgb(236,53,24)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1359.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (1 samples, 0.02%)</title><rect x="97.8479%" y="1333" width="0.0176%" height="15" fill="rgb(244,171,29)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1343.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (1 samples, 0.02%)</title><rect x="97.8479%" y="1317" width="0.0176%" height="15" fill="rgb(205,19,11)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1327.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="97.8479%" y="1301" width="0.0176%" height="15" fill="rgb(207,108,29)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1311.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="97.8479%" y="1285" width="0.0176%" height="15" fill="rgb(236,215,43)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1295.50"></text></g><g><title>uint256* std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (1 samples, 0.02%)</title><rect x="97.8479%" y="1269" width="0.0176%" height="15" fill="rgb(213,58,35)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1279.50"></text></g><g><title>uint256* std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.8479%" y="1253" width="0.0176%" height="15" fill="rgb(220,211,46)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1263.50"></text></g><g><title>uint256* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="97.8479%" y="1237" width="0.0176%" height="15" fill="rgb(212,134,16)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1247.50"></text></g><g><title>void std::_Construct&lt;uint256&gt; (1 samples, 0.02%)</title><rect x="97.8479%" y="1221" width="0.0176%" height="15" fill="rgb(232,90,44)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1231.50"></text></g><g><title>uint256::uint256 (1 samples, 0.02%)</title><rect x="97.8479%" y="1205" width="0.0176%" height="15" fill="rgb(212,18,36)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1215.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.02%)</title><rect x="97.8479%" y="1189" width="0.0176%" height="15" fill="rgb(206,112,24)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1199.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="97.8479%" y="1173" width="0.0176%" height="15" fill="rgb(238,223,40)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8479%" y="1157" width="0.0176%" height="15" fill="rgb(226,169,20)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8479%" y="1141" width="0.0176%" height="15" fill="rgb(241,64,52)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8479%" y="1125" width="0.0176%" height="15" fill="rgb(228,120,25)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8479%" y="1109" width="0.0176%" height="15" fill="rgb(234,108,19)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="97.8479%" y="1093" width="0.0176%" height="15" fill="rgb(236,133,29)" fg:x="5547" fg:w="1"/><text x="98.0979%" y="1103.50"></text></g><g><title>_start (237 samples, 4.18%)</title><rect x="93.7555%" y="1509" width="4.1806%" height="15" fill="rgb(246,174,53)" fg:x="5315" fg:w="237"/><text x="94.0055%" y="1519.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (237 samples, 4.18%)</title><rect x="93.7555%" y="1493" width="4.1806%" height="15" fill="rgb(210,105,35)" fg:x="5315" fg:w="237"/><text x="94.0055%" y="1503.50">__lib..</text></g><g><title>__libc_start_call_main (237 samples, 4.18%)</title><rect x="93.7555%" y="1477" width="4.1806%" height="15" fill="rgb(225,27,26)" fg:x="5315" fg:w="237"/><text x="94.0055%" y="1487.50">__lib..</text></g><g><title>main (237 samples, 4.18%)</title><rect x="93.7555%" y="1461" width="4.1806%" height="15" fill="rgb(233,2,39)" fg:x="5315" fg:w="237"/><text x="94.0055%" y="1471.50">main</text></g><g><title>util::SignalInterrupt::wait (4 samples, 0.07%)</title><rect x="97.8656%" y="1445" width="0.0706%" height="15" fill="rgb(219,164,26)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1455.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.07%)</title><rect x="97.8656%" y="1429" width="0.0706%" height="15" fill="rgb(236,211,5)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1439.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 0.07%)</title><rect x="97.8656%" y="1413" width="0.0706%" height="15" fill="rgb(244,227,23)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1423.50"></text></g><g><title>read (4 samples, 0.07%)</title><rect x="97.8656%" y="1397" width="0.0706%" height="15" fill="rgb(230,184,8)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1381" width="0.0706%" height="15" fill="rgb(217,125,48)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1365" width="0.0706%" height="15" fill="rgb(223,192,47)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1349" width="0.0706%" height="15" fill="rgb(226,119,10)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1333" width="0.0706%" height="15" fill="rgb(221,49,29)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1317" width="0.0706%" height="15" fill="rgb(217,205,19)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1301" width="0.0706%" height="15" fill="rgb(242,104,7)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1285" width="0.0706%" height="15" fill="rgb(209,154,48)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1269" width="0.0706%" height="15" fill="rgb(219,213,46)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1253" width="0.0706%" height="15" fill="rgb(229,105,38)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1237" width="0.0706%" height="15" fill="rgb(205,151,5)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1247.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1221" width="0.0706%" height="15" fill="rgb(248,115,40)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="97.8656%" y="1205" width="0.0706%" height="15" fill="rgb(206,179,2)" fg:x="5548" fg:w="4"/><text x="98.1156%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.8832%" y="1189" width="0.0529%" height="15" fill="rgb(230,103,24)" fg:x="5549" fg:w="3"/><text x="98.1332%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.8832%" y="1173" width="0.0529%" height="15" fill="rgb(218,152,4)" fg:x="5549" fg:w="3"/><text x="98.1332%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.8832%" y="1157" width="0.0529%" height="15" fill="rgb(236,161,54)" fg:x="5549" fg:w="3"/><text x="98.1332%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="97.8832%" y="1141" width="0.0529%" height="15" fill="rgb(226,65,17)" fg:x="5549" fg:w="3"/><text x="98.1332%" y="1151.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="97.9361%" y="1509" width="0.0176%" height="15" fill="rgb(221,134,44)" fg:x="5552" fg:w="1"/><text x="98.1861%" y="1519.50"></text></g><g><title>crc32c::ExtendSse42 (2 samples, 0.04%)</title><rect x="97.9538%" y="1509" width="0.0353%" height="15" fill="rgb(251,129,4)" fg:x="5553" fg:w="2"/><text x="98.2038%" y="1519.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="97.9714%" y="1493" width="0.0176%" height="15" fill="rgb(244,32,34)" fg:x="5554" fg:w="1"/><text x="98.2214%" y="1503.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.02%)</title><rect x="97.9891%" y="1509" width="0.0176%" height="15" fill="rgb(251,224,37)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1519.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1493" width="0.0176%" height="15" fill="rgb(248,117,31)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1503.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (1 samples, 0.02%)</title><rect x="97.9891%" y="1477" width="0.0176%" height="15" fill="rgb(222,208,37)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1487.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1461" width="0.0176%" height="15" fill="rgb(234,211,25)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1471.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1445" width="0.0176%" height="15" fill="rgb(211,72,6)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1455.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1429" width="0.0176%" height="15" fill="rgb(249,198,38)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1439.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1413" width="0.0176%" height="15" fill="rgb(221,86,51)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1423.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1397" width="0.0176%" height="15" fill="rgb(226,178,43)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1407.50"></text></g><g><title>void UnserializeMany&lt;DataStream, unsigned int&amp;&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1381" width="0.0176%" height="15" fill="rgb(215,145,7)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1391.50"></text></g><g><title>void Unserialize&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1365" width="0.0176%" height="15" fill="rgb(250,202,36)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1375.50"></text></g><g><title>unsigned int ser_readdata32&lt;DataStream&gt; (1 samples, 0.02%)</title><rect x="97.9891%" y="1349" width="0.0176%" height="15" fill="rgb(215,86,13)" fg:x="5555" fg:w="1"/><text x="98.2391%" y="1359.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.0067%" y="1477" width="0.0176%" height="15" fill="rgb(221,134,12)" fg:x="5556" fg:w="1"/><text x="98.2567%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.04%)</title><rect x="98.0067%" y="1509" width="0.0353%" height="15" fill="rgb(213,82,10)" fg:x="5556" fg:w="2"/><text x="98.2567%" y="1519.50"></text></g><g><title>leveldb::Slice::compare (2 samples, 0.04%)</title><rect x="98.0067%" y="1493" width="0.0353%" height="15" fill="rgb(214,142,0)" fg:x="5556" fg:w="2"/><text x="98.2567%" y="1503.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.02%)</title><rect x="98.0243%" y="1477" width="0.0176%" height="15" fill="rgb(205,145,9)" fg:x="5557" fg:w="1"/><text x="98.2743%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (1 samples, 0.02%)</title><rect x="98.0420%" y="1509" width="0.0176%" height="15" fill="rgb(244,214,8)" fg:x="5558" fg:w="1"/><text x="98.2920%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="98.0596%" y="1509" width="0.0176%" height="15" fill="rgb(224,72,51)" fg:x="5559" fg:w="1"/><text x="98.3096%" y="1519.50"></text></g><g><title>Lookup (1 samples, 0.02%)</title><rect x="98.0596%" y="1493" width="0.0176%" height="15" fill="rgb(233,137,37)" fg:x="5559" fg:w="1"/><text x="98.3096%" y="1503.50"></text></g><g><title>leveldb::MutexLock::~MutexLock (1 samples, 0.02%)</title><rect x="98.0596%" y="1477" width="0.0176%" height="15" fill="rgb(208,71,28)" fg:x="5559" fg:w="1"/><text x="98.3096%" y="1487.50"></text></g><g><title>leveldb::port::Mutex::Unlock (1 samples, 0.02%)</title><rect x="98.0596%" y="1461" width="0.0176%" height="15" fill="rgb(226,31,7)" fg:x="5559" fg:w="1"/><text x="98.3096%" y="1471.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.02%)</title><rect x="98.0596%" y="1445" width="0.0176%" height="15" fill="rgb(229,62,18)" fg:x="5559" fg:w="1"/><text x="98.3096%" y="1455.50"></text></g><g><title>leveldb::(anonymous namespace)::ShardedLRUCache::Lookup (1 samples, 0.02%)</title><rect x="98.0596%" y="1429" width="0.0176%" height="15" fill="rgb(226,74,28)" fg:x="5559" fg:w="1"/><text x="98.3096%" y="1439.50"></text></g><g><title>leveldb::GetVarint64 (1 samples, 0.02%)</title><rect x="98.0596%" y="1413" width="0.0176%" height="15" fill="rgb(214,170,18)" fg:x="5559" fg:w="1"/><text x="98.3096%" y="1423.50"></text></g><g><title>leveldb::EncodeVarint32 (5 samples, 0.09%)</title><rect x="98.0773%" y="1477" width="0.0882%" height="15" fill="rgb(227,229,35)" fg:x="5560" fg:w="5"/><text x="98.3273%" y="1487.50"></text></g><g><title>leveldb::operator== (6 samples, 0.11%)</title><rect x="98.0773%" y="1493" width="0.1058%" height="15" fill="rgb(225,181,39)" fg:x="5560" fg:w="6"/><text x="98.3273%" y="1503.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.02%)</title><rect x="98.1655%" y="1477" width="0.0176%" height="15" fill="rgb(253,124,44)" fg:x="5565" fg:w="1"/><text x="98.4155%" y="1487.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.1831%" y="1413" width="0.0176%" height="15" fill="rgb(220,75,18)" fg:x="5566" fg:w="1"/><text x="98.4331%" y="1423.50"></text></g><g><title>leveldb::BlockBuilder::Add (8 samples, 0.14%)</title><rect x="98.0773%" y="1509" width="0.1411%" height="15" fill="rgb(239,175,43)" fg:x="5560" fg:w="8"/><text x="98.3273%" y="1519.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.04%)</title><rect x="98.1831%" y="1493" width="0.0353%" height="15" fill="rgb(228,112,50)" fg:x="5566" fg:w="2"/><text x="98.4331%" y="1503.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.04%)</title><rect x="98.1831%" y="1477" width="0.0353%" height="15" fill="rgb(232,105,36)" fg:x="5566" fg:w="2"/><text x="98.4331%" y="1487.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="98.1831%" y="1461" width="0.0353%" height="15" fill="rgb(227,137,47)" fg:x="5566" fg:w="2"/><text x="98.4331%" y="1471.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="98.1831%" y="1445" width="0.0353%" height="15" fill="rgb(217,51,9)" fg:x="5566" fg:w="2"/><text x="98.4331%" y="1455.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.04%)</title><rect x="98.1831%" y="1429" width="0.0353%" height="15" fill="rgb(245,117,0)" fg:x="5566" fg:w="2"/><text x="98.4331%" y="1439.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.2007%" y="1413" width="0.0176%" height="15" fill="rgb(252,52,30)" fg:x="5567" fg:w="1"/><text x="98.4507%" y="1423.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.2184%" y="1509" width="0.0176%" height="15" fill="rgb(227,85,33)" fg:x="5568" fg:w="1"/><text x="98.4684%" y="1519.50"></text></g><g><title>leveldb::TableBuilder::status (1 samples, 0.02%)</title><rect x="98.2184%" y="1493" width="0.0176%" height="15" fill="rgb(220,157,20)" fg:x="5568" fg:w="1"/><text x="98.4684%" y="1503.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="98.2360%" y="1509" width="0.0176%" height="15" fill="rgb(254,14,34)" fg:x="5569" fg:w="1"/><text x="98.4860%" y="1519.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.2360%" y="1493" width="0.0176%" height="15" fill="rgb(216,103,41)" fg:x="5569" fg:w="1"/><text x="98.4860%" y="1503.50"></text></g><g><title>NewWritableFile (1 samples, 0.02%)</title><rect x="98.2537%" y="1253" width="0.0176%" height="15" fill="rgb(245,221,9)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (1 samples, 0.02%)</title><rect x="98.2537%" y="1237" width="0.0176%" height="15" fill="rgb(254,136,47)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1247.50"></text></g><g><title>__GI___libc_open (1 samples, 0.02%)</title><rect x="98.2537%" y="1221" width="0.0176%" height="15" fill="rgb(235,71,46)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1205" width="0.0176%" height="15" fill="rgb(242,154,29)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1189" width="0.0176%" height="15" fill="rgb(210,65,31)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1173" width="0.0176%" height="15" fill="rgb(244,9,50)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1157" width="0.0176%" height="15" fill="rgb(215,141,38)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1141" width="0.0176%" height="15" fill="rgb(241,129,6)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1125" width="0.0176%" height="15" fill="rgb(253,169,4)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1109" width="0.0176%" height="15" fill="rgb(237,82,36)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1093" width="0.0176%" height="15" fill="rgb(209,171,11)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1103.50"></text></g><g><title>[[ext4]] (1 samples, 0.02%)</title><rect x="98.2537%" y="1077" width="0.0176%" height="15" fill="rgb(242,19,22)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1061" width="0.0176%" height="15" fill="rgb(251,122,24)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1045" width="0.0176%" height="15" fill="rgb(226,166,42)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1029" width="0.0176%" height="15" fill="rgb(244,101,48)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="1013" width="0.0176%" height="15" fill="rgb(227,125,1)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2537%" y="997" width="0.0176%" height="15" fill="rgb(206,79,43)" fg:x="5570" fg:w="1"/><text x="98.5037%" y="1007.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="98.2713%" y="1077" width="0.0353%" height="15" fill="rgb(241,109,41)" fg:x="5571" fg:w="2"/><text x="98.5213%" y="1087.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="98.2713%" y="1061" width="0.0353%" height="15" fill="rgb(219,73,4)" fg:x="5571" fg:w="2"/><text x="98.5213%" y="1071.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="98.2713%" y="1045" width="0.0353%" height="15" fill="rgb(239,25,41)" fg:x="5571" fg:w="2"/><text x="98.5213%" y="1055.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="98.2713%" y="1029" width="0.0353%" height="15" fill="rgb(208,88,46)" fg:x="5571" fg:w="2"/><text x="98.5213%" y="1039.50"></text></g><g><title>[[ext4]] (2 samples, 0.04%)</title><rect x="98.2713%" y="1013" width="0.0353%" height="15" fill="rgb(239,184,9)" fg:x="5571" fg:w="2"/><text x="98.5213%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.2713%" y="997" width="0.0353%" height="15" fill="rgb(223,114,13)" fg:x="5571" fg:w="2"/><text x="98.5213%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.2713%" y="981" width="0.0353%" height="15" fill="rgb(214,28,42)" fg:x="5571" fg:w="2"/><text x="98.5213%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2889%" y="965" width="0.0176%" height="15" fill="rgb(252,32,44)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2889%" y="949" width="0.0176%" height="15" fill="rgb(231,159,4)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2889%" y="933" width="0.0176%" height="15" fill="rgb(210,35,26)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="943.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="98.2889%" y="917" width="0.0176%" height="15" fill="rgb(208,190,37)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="927.50"></text></g><g><title>[[nvme]] (1 samples, 0.02%)</title><rect x="98.2889%" y="901" width="0.0176%" height="15" fill="rgb(226,148,22)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2889%" y="885" width="0.0176%" height="15" fill="rgb(242,153,24)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2889%" y="869" width="0.0176%" height="15" fill="rgb(213,133,7)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.2889%" y="853" width="0.0176%" height="15" fill="rgb(248,206,18)" fg:x="5572" fg:w="1"/><text x="98.5389%" y="863.50"></text></g><g><title>Sync (6 samples, 0.11%)</title><rect x="98.2713%" y="1253" width="0.1058%" height="15" fill="rgb(233,157,4)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (6 samples, 0.11%)</title><rect x="98.2713%" y="1237" width="0.1058%" height="15" fill="rgb(249,179,32)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1247.50"></text></g><g><title>fdatasync (6 samples, 0.11%)</title><rect x="98.2713%" y="1221" width="0.1058%" height="15" fill="rgb(248,69,35)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.2713%" y="1205" width="0.1058%" height="15" fill="rgb(249,158,38)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.2713%" y="1189" width="0.1058%" height="15" fill="rgb(223,18,43)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1199.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.2713%" y="1173" width="0.1058%" height="15" fill="rgb(238,42,45)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1183.50"></text></g><g><title>[[ext4]] (6 samples, 0.11%)</title><rect x="98.2713%" y="1157" width="0.1058%" height="15" fill="rgb(219,65,47)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.2713%" y="1141" width="0.1058%" height="15" fill="rgb(248,153,12)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.2713%" y="1125" width="0.1058%" height="15" fill="rgb(240,118,4)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.2713%" y="1109" width="0.1058%" height="15" fill="rgb(250,96,34)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="98.2713%" y="1093" width="0.1058%" height="15" fill="rgb(221,15,4)" fg:x="5571" fg:w="6"/><text x="98.5213%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.3066%" y="1077" width="0.0706%" height="15" fill="rgb(217,149,33)" fg:x="5573" fg:w="4"/><text x="98.5566%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.3066%" y="1061" width="0.0706%" height="15" fill="rgb(213,58,29)" fg:x="5573" fg:w="4"/><text x="98.5566%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.3066%" y="1045" width="0.0706%" height="15" fill="rgb(236,218,9)" fg:x="5573" fg:w="4"/><text x="98.5566%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.3066%" y="1029" width="0.0706%" height="15" fill="rgb(248,40,19)" fg:x="5573" fg:w="4"/><text x="98.5566%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="1013" width="0.0529%" height="15" fill="rgb(212,17,6)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="997" width="0.0529%" height="15" fill="rgb(206,212,20)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="981" width="0.0529%" height="15" fill="rgb(229,80,37)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="965" width="0.0529%" height="15" fill="rgb(253,8,37)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="949" width="0.0529%" height="15" fill="rgb(215,16,43)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="933" width="0.0529%" height="15" fill="rgb(236,219,16)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="943.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="917" width="0.0529%" height="15" fill="rgb(251,0,3)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="927.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.3242%" y="901" width="0.0529%" height="15" fill="rgb(207,133,37)" fg:x="5574" fg:w="3"/><text x="98.5742%" y="911.50"></text></g><g><title>leveldb::MemTableIterator::value (1 samples, 0.02%)</title><rect x="98.3771%" y="1253" width="0.0176%" height="15" fill="rgb(250,143,20)" fg:x="5577" fg:w="1"/><text x="98.6271%" y="1263.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (1 samples, 0.02%)</title><rect x="98.3771%" y="1237" width="0.0176%" height="15" fill="rgb(242,19,50)" fg:x="5577" fg:w="1"/><text x="98.6271%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1 samples, 0.02%)</title><rect x="98.3771%" y="1221" width="0.0176%" height="15" fill="rgb(206,124,43)" fg:x="5577" fg:w="1"/><text x="98.6271%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="98.3948%" y="1221" width="0.0529%" height="15" fill="rgb(229,4,38)" fg:x="5578" fg:w="3"/><text x="98.6448%" y="1231.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.4301%" y="1205" width="0.0176%" height="15" fill="rgb(247,220,45)" fg:x="5580" fg:w="1"/><text x="98.6801%" y="1215.50"></text></g><g><title>leveldb::Slice::operator[] (1 samples, 0.02%)</title><rect x="98.4477%" y="1221" width="0.0176%" height="15" fill="rgb(247,195,0)" fg:x="5581" fg:w="1"/><text x="98.6977%" y="1231.50"></text></g><g><title>leveldb::BlockBuilder::Add (6 samples, 0.11%)</title><rect x="98.3948%" y="1237" width="0.1058%" height="15" fill="rgb(252,12,19)" fg:x="5578" fg:w="6"/><text x="98.6448%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::Add (2 samples, 0.04%)</title><rect x="98.4653%" y="1221" width="0.0353%" height="15" fill="rgb(222,49,50)" fg:x="5582" fg:w="2"/><text x="98.7153%" y="1231.50"></text></g><g><title>leveldb::BuildTable (1 samples, 0.02%)</title><rect x="98.5006%" y="1237" width="0.0176%" height="15" fill="rgb(209,157,28)" fg:x="5584" fg:w="1"/><text x="98.7506%" y="1247.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.02%)</title><rect x="98.5006%" y="1221" width="0.0176%" height="15" fill="rgb(238,174,24)" fg:x="5584" fg:w="1"/><text x="98.7506%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="98.5006%" y="1205" width="0.0176%" height="15" fill="rgb(224,17,28)" fg:x="5584" fg:w="1"/><text x="98.7506%" y="1215.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="98.5006%" y="1189" width="0.0176%" height="15" fill="rgb(249,7,29)" fg:x="5584" fg:w="1"/><text x="98.7506%" y="1199.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_disjunct (1 samples, 0.02%)</title><rect x="98.5006%" y="1173" width="0.0176%" height="15" fill="rgb(243,178,4)" fg:x="5584" fg:w="1"/><text x="98.7506%" y="1183.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.02%)</title><rect x="98.5183%" y="1237" width="0.0176%" height="15" fill="rgb(246,138,35)" fg:x="5585" fg:w="1"/><text x="98.7683%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="98.5359%" y="1205" width="0.0176%" height="15" fill="rgb(251,85,18)" fg:x="5586" fg:w="1"/><text x="98.7859%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="98.5359%" y="1189" width="0.0176%" height="15" fill="rgb(254,55,9)" fg:x="5586" fg:w="1"/><text x="98.7859%" y="1199.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.02%)</title><rect x="98.5359%" y="1173" width="0.0176%" height="15" fill="rgb(248,4,50)" fg:x="5586" fg:w="1"/><text x="98.7859%" y="1183.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (2 samples, 0.04%)</title><rect x="98.5359%" y="1237" width="0.0353%" height="15" fill="rgb(215,208,14)" fg:x="5586" fg:w="2"/><text x="98.7859%" y="1247.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (2 samples, 0.04%)</title><rect x="98.5359%" y="1221" width="0.0353%" height="15" fill="rgb(218,37,18)" fg:x="5586" fg:w="2"/><text x="98.7859%" y="1231.50"></text></g><g><title>leveldb::Hash (1 samples, 0.02%)</title><rect x="98.5535%" y="1205" width="0.0176%" height="15" fill="rgb(206,104,13)" fg:x="5587" fg:w="1"/><text x="98.8035%" y="1215.50"></text></g><g><title>[[ext4]] (4 samples, 0.07%)</title><rect x="98.5712%" y="1061" width="0.0706%" height="15" fill="rgb(248,94,22)" fg:x="5588" fg:w="4"/><text x="98.8212%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.5712%" y="1045" width="0.0706%" height="15" fill="rgb(235,42,46)" fg:x="5588" fg:w="4"/><text x="98.8212%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.5712%" y="1029" width="0.0706%" height="15" fill="rgb(220,228,48)" fg:x="5588" fg:w="4"/><text x="98.8212%" y="1039.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.5712%" y="1013" width="0.0706%" height="15" fill="rgb(216,58,12)" fg:x="5588" fg:w="4"/><text x="98.8212%" y="1023.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.5712%" y="997" width="0.0706%" height="15" fill="rgb(223,97,52)" fg:x="5588" fg:w="4"/><text x="98.8212%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.6065%" y="981" width="0.0353%" height="15" fill="rgb(208,159,17)" fg:x="5590" fg:w="2"/><text x="98.8565%" y="991.50"></text></g><g><title>Flush (5 samples, 0.09%)</title><rect x="98.5712%" y="1221" width="0.0882%" height="15" fill="rgb(215,172,9)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1231.50"></text></g><g><title>FlushBuffer (5 samples, 0.09%)</title><rect x="98.5712%" y="1205" width="0.0882%" height="15" fill="rgb(252,175,30)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1215.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (5 samples, 0.09%)</title><rect x="98.5712%" y="1189" width="0.0882%" height="15" fill="rgb(209,159,10)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1199.50"></text></g><g><title>__GI___libc_write (5 samples, 0.09%)</title><rect x="98.5712%" y="1173" width="0.0882%" height="15" fill="rgb(229,73,51)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="98.5712%" y="1157" width="0.0882%" height="15" fill="rgb(208,212,43)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="98.5712%" y="1141" width="0.0882%" height="15" fill="rgb(254,123,53)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="98.5712%" y="1125" width="0.0882%" height="15" fill="rgb(254,128,49)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="98.5712%" y="1109" width="0.0882%" height="15" fill="rgb(246,16,16)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1119.50"></text></g><g><title>[[ext4]] (5 samples, 0.09%)</title><rect x="98.5712%" y="1093" width="0.0882%" height="15" fill="rgb(209,200,1)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="98.5712%" y="1077" width="0.0882%" height="15" fill="rgb(235,9,3)" fg:x="5588" fg:w="5"/><text x="98.8212%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6417%" y="1061" width="0.0176%" height="15" fill="rgb(233,121,54)" fg:x="5592" fg:w="1"/><text x="98.8917%" y="1071.50"></text></g><g><title>leveldb::TableBuilder::Add (16 samples, 0.28%)</title><rect x="98.3948%" y="1253" width="0.2822%" height="15" fill="rgb(236,80,25)" fg:x="5578" fg:w="16"/><text x="98.6448%" y="1263.50"></text></g><g><title>leveldb::TableBuilder::Flush (6 samples, 0.11%)</title><rect x="98.5712%" y="1237" width="0.1058%" height="15" fill="rgb(220,44,24)" fg:x="5588" fg:w="6"/><text x="98.8212%" y="1247.50"></text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.02%)</title><rect x="98.6594%" y="1221" width="0.0176%" height="15" fill="rgb(236,225,16)" fg:x="5593" fg:w="1"/><text x="98.9094%" y="1231.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="98.6594%" y="1205" width="0.0176%" height="15" fill="rgb(237,140,0)" fg:x="5593" fg:w="1"/><text x="98.9094%" y="1215.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (25 samples, 0.44%)</title><rect x="98.2537%" y="1285" width="0.4410%" height="15" fill="rgb(243,225,53)" fg:x="5570" fg:w="25"/><text x="98.5037%" y="1295.50"></text></g><g><title>leveldb::BuildTable (25 samples, 0.44%)</title><rect x="98.2537%" y="1269" width="0.4410%" height="15" fill="rgb(240,140,30)" fg:x="5570" fg:w="25"/><text x="98.5037%" y="1279.50"></text></g><g><title>leveldb::TableCache::NewIterator (1 samples, 0.02%)</title><rect x="98.6770%" y="1253" width="0.0176%" height="15" fill="rgb(217,51,16)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1263.50"></text></g><g><title>leveldb::TableCache::FindTable (1 samples, 0.02%)</title><rect x="98.6770%" y="1237" width="0.0176%" height="15" fill="rgb(245,75,50)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1247.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::NewRandomAccessFile (1 samples, 0.02%)</title><rect x="98.6770%" y="1221" width="0.0176%" height="15" fill="rgb(208,174,22)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1231.50"></text></g><g><title>__mmap (1 samples, 0.02%)</title><rect x="98.6770%" y="1205" width="0.0176%" height="15" fill="rgb(219,98,50)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1189" width="0.0176%" height="15" fill="rgb(243,138,3)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1173" width="0.0176%" height="15" fill="rgb(243,132,26)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1157" width="0.0176%" height="15" fill="rgb(250,201,8)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1141" width="0.0176%" height="15" fill="rgb(213,91,26)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1125" width="0.0176%" height="15" fill="rgb(229,117,1)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1109" width="0.0176%" height="15" fill="rgb(229,24,6)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1093" width="0.0176%" height="15" fill="rgb(206,69,11)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.6770%" y="1077" width="0.0176%" height="15" fill="rgb(234,111,34)" fg:x="5594" fg:w="1"/><text x="98.9270%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.6947%" y="1221" width="0.0706%" height="15" fill="rgb(213,187,51)" fg:x="5595" fg:w="4"/><text x="98.9447%" y="1231.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.6947%" y="1205" width="0.0706%" height="15" fill="rgb(207,45,11)" fg:x="5595" fg:w="4"/><text x="98.9447%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.6947%" y="1189" width="0.0706%" height="15" fill="rgb(225,151,47)" fg:x="5595" fg:w="4"/><text x="98.9447%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.6947%" y="1173" width="0.0706%" height="15" fill="rgb(211,226,5)" fg:x="5595" fg:w="4"/><text x="98.9447%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.6947%" y="1157" width="0.0706%" height="15" fill="rgb(214,83,52)" fg:x="5595" fg:w="4"/><text x="98.9447%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.6947%" y="1141" width="0.0706%" height="15" fill="rgb(229,49,53)" fg:x="5595" fg:w="4"/><text x="98.9447%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1125" width="0.0529%" height="15" fill="rgb(246,8,28)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1109" width="0.0529%" height="15" fill="rgb(207,28,41)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1093" width="0.0529%" height="15" fill="rgb(254,22,25)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1077" width="0.0529%" height="15" fill="rgb(209,120,42)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1061" width="0.0529%" height="15" fill="rgb(216,194,18)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1045" width="0.0529%" height="15" fill="rgb(213,70,17)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1029" width="0.0529%" height="15" fill="rgb(228,66,19)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.7123%" y="1013" width="0.0529%" height="15" fill="rgb(236,221,54)" fg:x="5596" fg:w="3"/><text x="98.9623%" y="1023.50"></text></g><g><title>leveldb::MemTable::Unref (5 samples, 0.09%)</title><rect x="98.6947%" y="1285" width="0.0882%" height="15" fill="rgb(207,175,15)" fg:x="5595" fg:w="5"/><text x="98.9447%" y="1295.50"></text></g><g><title>leveldb::MemTable::~MemTable (5 samples, 0.09%)</title><rect x="98.6947%" y="1269" width="0.0882%" height="15" fill="rgb(234,76,8)" fg:x="5595" fg:w="5"/><text x="98.9447%" y="1279.50"></text></g><g><title>leveldb::Arena::~Arena (5 samples, 0.09%)</title><rect x="98.6947%" y="1253" width="0.0882%" height="15" fill="rgb(243,106,0)" fg:x="5595" fg:w="5"/><text x="98.9447%" y="1263.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.09%)</title><rect x="98.6947%" y="1237" width="0.0882%" height="15" fill="rgb(208,48,19)" fg:x="5595" fg:w="5"/><text x="98.9447%" y="1247.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="98.7652%" y="1221" width="0.0176%" height="15" fill="rgb(251,50,29)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1231.50"></text></g><g><title>systrim.constprop.0 (1 samples, 0.02%)</title><rect x="98.7652%" y="1205" width="0.0176%" height="15" fill="rgb(222,31,49)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1215.50"></text></g><g><title>__default_morecore@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="98.7652%" y="1189" width="0.0176%" height="15" fill="rgb(232,33,18)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1199.50"></text></g><g><title>__sbrk (1 samples, 0.02%)</title><rect x="98.7652%" y="1173" width="0.0176%" height="15" fill="rgb(209,1,44)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1183.50"></text></g><g><title>__brk (1 samples, 0.02%)</title><rect x="98.7652%" y="1157" width="0.0176%" height="15" fill="rgb(211,7,1)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1141" width="0.0176%" height="15" fill="rgb(224,111,27)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1125" width="0.0176%" height="15" fill="rgb(252,195,39)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1109" width="0.0176%" height="15" fill="rgb(237,198,5)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1093" width="0.0176%" height="15" fill="rgb(232,148,1)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1077" width="0.0176%" height="15" fill="rgb(249,41,3)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1061" width="0.0176%" height="15" fill="rgb(215,14,33)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1045" width="0.0176%" height="15" fill="rgb(209,146,24)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.7652%" y="1029" width="0.0176%" height="15" fill="rgb(219,51,47)" fg:x="5599" fg:w="1"/><text x="99.0152%" y="1039.50"></text></g><g><title>leveldb::Arena::AllocateAligned (1 samples, 0.02%)</title><rect x="98.7829%" y="1253" width="0.0176%" height="15" fill="rgb(234,217,40)" fg:x="5600" fg:w="1"/><text x="99.0329%" y="1263.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.8005%" y="1109" width="0.0706%" height="15" fill="rgb(228,34,26)" fg:x="5601" fg:w="4"/><text x="99.0505%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.8005%" y="1093" width="0.0706%" height="15" fill="rgb(224,50,29)" fg:x="5601" fg:w="4"/><text x="99.0505%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.8181%" y="1077" width="0.0529%" height="15" fill="rgb(205,79,51)" fg:x="5602" fg:w="3"/><text x="99.0681%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.8181%" y="1061" width="0.0529%" height="15" fill="rgb(218,136,28)" fg:x="5602" fg:w="3"/><text x="99.0681%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.8181%" y="1045" width="0.0529%" height="15" fill="rgb(220,150,10)" fg:x="5602" fg:w="3"/><text x="99.0681%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.8358%" y="1029" width="0.0353%" height="15" fill="rgb(242,158,47)" fg:x="5603" fg:w="2"/><text x="99.0858%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.8358%" y="1013" width="0.0353%" height="15" fill="rgb(209,68,0)" fg:x="5603" fg:w="2"/><text x="99.0858%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.8358%" y="997" width="0.0353%" height="15" fill="rgb(208,13,41)" fg:x="5603" fg:w="2"/><text x="99.0858%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.8358%" y="981" width="0.0353%" height="15" fill="rgb(226,201,7)" fg:x="5603" fg:w="2"/><text x="99.0858%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.8358%" y="965" width="0.0353%" height="15" fill="rgb(236,103,26)" fg:x="5603" fg:w="2"/><text x="99.0858%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="98.8358%" y="949" width="0.0353%" height="15" fill="rgb(243,162,8)" fg:x="5603" fg:w="2"/><text x="99.0858%" y="959.50"></text></g><g><title>leveldb::Arena::Allocate (5 samples, 0.09%)</title><rect x="98.8005%" y="1221" width="0.0882%" height="15" fill="rgb(237,225,11)" fg:x="5601" fg:w="5"/><text x="99.0505%" y="1231.50"></text></g><g><title>leveldb::Arena::AllocateFallback (5 samples, 0.09%)</title><rect x="98.8005%" y="1205" width="0.0882%" height="15" fill="rgb(247,186,32)" fg:x="5601" fg:w="5"/><text x="99.0505%" y="1215.50"></text></g><g><title>leveldb::Arena::AllocateFallback (5 samples, 0.09%)</title><rect x="98.8005%" y="1189" width="0.0882%" height="15" fill="rgb(215,26,28)" fg:x="5601" fg:w="5"/><text x="99.0505%" y="1199.50"></text></g><g><title>leveldb::Arena::AllocateNewBlock (5 samples, 0.09%)</title><rect x="98.8005%" y="1173" width="0.0882%" height="15" fill="rgb(208,121,6)" fg:x="5601" fg:w="5"/><text x="99.0505%" y="1183.50"></text></g><g><title>operator new (5 samples, 0.09%)</title><rect x="98.8005%" y="1157" width="0.0882%" height="15" fill="rgb(225,91,3)" fg:x="5601" fg:w="5"/><text x="99.0505%" y="1167.50"></text></g><g><title>malloc (5 samples, 0.09%)</title><rect x="98.8005%" y="1141" width="0.0882%" height="15" fill="rgb(246,119,36)" fg:x="5601" fg:w="5"/><text x="99.0505%" y="1151.50"></text></g><g><title>_int_malloc (5 samples, 0.09%)</title><rect x="98.8005%" y="1125" width="0.0882%" height="15" fill="rgb(254,173,2)" fg:x="5601" fg:w="5"/><text x="99.0505%" y="1135.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="98.8711%" y="1109" width="0.0176%" height="15" fill="rgb(209,87,54)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="1093" width="0.0176%" height="15" fill="rgb(223,216,20)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="1077" width="0.0176%" height="15" fill="rgb(220,31,8)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="1061" width="0.0176%" height="15" fill="rgb(220,185,15)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="1045" width="0.0176%" height="15" fill="rgb(247,190,50)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="1029" width="0.0176%" height="15" fill="rgb(239,173,47)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="1013" width="0.0176%" height="15" fill="rgb(218,190,42)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="997" width="0.0176%" height="15" fill="rgb(251,207,16)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="981" width="0.0176%" height="15" fill="rgb(222,199,47)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="965" width="0.0176%" height="15" fill="rgb(245,190,7)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="949" width="0.0176%" height="15" fill="rgb(239,85,38)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.8711%" y="933" width="0.0176%" height="15" fill="rgb(229,69,51)" fg:x="5605" fg:w="1"/><text x="99.1211%" y="943.50"></text></g><g><title>leveldb::MemTable::Add (1 samples, 0.02%)</title><rect x="98.8887%" y="1221" width="0.0176%" height="15" fill="rgb(231,104,51)" fg:x="5606" fg:w="1"/><text x="99.1387%" y="1231.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="98.9063%" y="1205" width="0.0176%" height="15" fill="rgb(235,49,4)" fg:x="5607" fg:w="1"/><text x="99.1563%" y="1215.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="98.9063%" y="1189" width="0.0176%" height="15" fill="rgb(246,166,20)" fg:x="5607" fg:w="1"/><text x="99.1563%" y="1199.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="98.9240%" y="1205" width="0.0176%" height="15" fill="rgb(230,119,37)" fg:x="5608" fg:w="1"/><text x="99.1740%" y="1215.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="98.9240%" y="1189" width="0.0176%" height="15" fill="rgb(234,77,34)" fg:x="5608" fg:w="1"/><text x="99.1740%" y="1199.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (7 samples, 0.12%)</title><rect x="98.9416%" y="1205" width="0.1235%" height="15" fill="rgb(211,222,33)" fg:x="5609" fg:w="7"/><text x="99.1916%" y="1215.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="99.0298%" y="1189" width="0.0353%" height="15" fill="rgb(226,45,42)" fg:x="5614" fg:w="2"/><text x="99.2798%" y="1199.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.04%)</title><rect x="99.0298%" y="1173" width="0.0353%" height="15" fill="rgb(215,174,28)" fg:x="5614" fg:w="2"/><text x="99.2798%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="99.0651%" y="1173" width="0.0176%" height="15" fill="rgb(254,173,49)" fg:x="5616" fg:w="1"/><text x="99.3151%" y="1183.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="99.0651%" y="1157" width="0.0176%" height="15" fill="rgb(229,191,6)" fg:x="5616" fg:w="1"/><text x="99.3151%" y="1167.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.0651%" y="1141" width="0.0176%" height="15" fill="rgb(212,145,22)" fg:x="5616" fg:w="1"/><text x="99.3151%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (2 samples, 0.04%)</title><rect x="99.0651%" y="1205" width="0.0353%" height="15" fill="rgb(226,6,51)" fg:x="5616" fg:w="2"/><text x="99.3151%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="99.0651%" y="1189" width="0.0353%" height="15" fill="rgb(227,128,8)" fg:x="5616" fg:w="2"/><text x="99.3151%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1 samples, 0.02%)</title><rect x="99.0827%" y="1173" width="0.0176%" height="15" fill="rgb(205,24,10)" fg:x="5617" fg:w="1"/><text x="99.3327%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="99.1180%" y="1173" width="0.0176%" height="15" fill="rgb(217,147,27)" fg:x="5619" fg:w="1"/><text x="99.3680%" y="1183.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.02%)</title><rect x="99.1357%" y="1173" width="0.0176%" height="15" fill="rgb(250,82,42)" fg:x="5620" fg:w="1"/><text x="99.3857%" y="1183.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.02%)</title><rect x="99.1886%" y="1157" width="0.0176%" height="15" fill="rgb(248,93,17)" fg:x="5623" fg:w="1"/><text x="99.4386%" y="1167.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="99.2062%" y="1157" width="0.0176%" height="15" fill="rgb(254,212,40)" fg:x="5624" fg:w="1"/><text x="99.4562%" y="1167.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="99.2062%" y="1141" width="0.0176%" height="15" fill="rgb(229,209,2)" fg:x="5624" fg:w="1"/><text x="99.4562%" y="1151.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.02%)</title><rect x="99.2591%" y="1141" width="0.0176%" height="15" fill="rgb(211,50,43)" fg:x="5627" fg:w="1"/><text x="99.5091%" y="1151.50"></text></g><g><title>leveldb::Slice::compare (1 samples, 0.02%)</title><rect x="99.2591%" y="1125" width="0.0176%" height="15" fill="rgb(245,196,29)" fg:x="5627" fg:w="1"/><text x="99.5091%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.05%)</title><rect x="99.2768%" y="1141" width="0.0529%" height="15" fill="rgb(216,132,13)" fg:x="5628" fg:w="3"/><text x="99.5268%" y="1151.50"></text></g><g><title>leveldb::ExtractUserKey (1 samples, 0.02%)</title><rect x="99.3120%" y="1125" width="0.0176%" height="15" fill="rgb(251,108,21)" fg:x="5630" fg:w="1"/><text x="99.5620%" y="1135.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (9 samples, 0.16%)</title><rect x="99.2238%" y="1157" width="0.1588%" height="15" fill="rgb(229,174,54)" fg:x="5625" fg:w="9"/><text x="99.4738%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (3 samples, 0.05%)</title><rect x="99.3297%" y="1141" width="0.0529%" height="15" fill="rgb(211,175,47)" fg:x="5631" fg:w="3"/><text x="99.5797%" y="1151.50"></text></g><g><title>GetLengthPrefixedSlice (2 samples, 0.04%)</title><rect x="99.3473%" y="1125" width="0.0353%" height="15" fill="rgb(234,5,37)" fg:x="5632" fg:w="2"/><text x="99.5973%" y="1135.50"></text></g><g><title>leveldb::GetVarint32Ptr (2 samples, 0.04%)</title><rect x="99.3473%" y="1109" width="0.0353%" height="15" fill="rgb(244,150,43)" fg:x="5632" fg:w="2"/><text x="99.5973%" y="1119.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="99.4355%" y="1141" width="0.0176%" height="15" fill="rgb(242,172,38)" fg:x="5637" fg:w="1"/><text x="99.6855%" y="1151.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.4355%" y="1125" width="0.0176%" height="15" fill="rgb(205,27,8)" fg:x="5637" fg:w="1"/><text x="99.6855%" y="1135.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (19 samples, 0.34%)</title><rect x="99.1533%" y="1173" width="0.3352%" height="15" fill="rgb(217,57,3)" fg:x="5621" fg:w="19"/><text x="99.4033%" y="1183.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (6 samples, 0.11%)</title><rect x="99.3826%" y="1157" width="0.1058%" height="15" fill="rgb(242,21,38)" fg:x="5634" fg:w="6"/><text x="99.6326%" y="1167.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.04%)</title><rect x="99.4532%" y="1141" width="0.0353%" height="15" fill="rgb(209,64,43)" fg:x="5638" fg:w="2"/><text x="99.7032%" y="1151.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (24 samples, 0.42%)</title><rect x="99.1004%" y="1205" width="0.4234%" height="15" fill="rgb(222,2,46)" fg:x="5618" fg:w="24"/><text x="99.3504%" y="1215.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (23 samples, 0.41%)</title><rect x="99.1180%" y="1189" width="0.4057%" height="15" fill="rgb(218,19,44)" fg:x="5619" fg:w="23"/><text x="99.3680%" y="1199.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2 samples, 0.04%)</title><rect x="99.4884%" y="1173" width="0.0353%" height="15" fill="rgb(240,203,42)" fg:x="5640" fg:w="2"/><text x="99.7384%" y="1183.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (43 samples, 0.76%)</title><rect x="98.7829%" y="1285" width="0.7585%" height="15" fill="rgb(229,23,45)" fg:x="5600" fg:w="43"/><text x="99.0329%" y="1295.50"></text></g><g><title>leveldb::WriteBatch::Iterate (43 samples, 0.76%)</title><rect x="98.7829%" y="1269" width="0.7585%" height="15" fill="rgb(205,228,51)" fg:x="5600" fg:w="43"/><text x="99.0329%" y="1279.50"></text></g><g><title>leveldb::WriteBatch::Iterate (42 samples, 0.74%)</title><rect x="98.8005%" y="1253" width="0.7409%" height="15" fill="rgb(239,36,20)" fg:x="5601" fg:w="42"/><text x="99.0505%" y="1263.50"></text></g><g><title>leveldb::MemTable::Add (42 samples, 0.74%)</title><rect x="98.8005%" y="1237" width="0.7409%" height="15" fill="rgb(248,172,27)" fg:x="5601" fg:w="42"/><text x="99.0505%" y="1247.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (36 samples, 0.64%)</title><rect x="98.9063%" y="1221" width="0.6350%" height="15" fill="rgb(244,55,32)" fg:x="5607" fg:w="36"/><text x="99.1563%" y="1231.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1 samples, 0.02%)</title><rect x="99.5237%" y="1205" width="0.0176%" height="15" fill="rgb(215,97,16)" fg:x="5642" fg:w="1"/><text x="99.7737%" y="1215.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.02%)</title><rect x="99.5237%" y="1189" width="0.0176%" height="15" fill="rgb(224,80,29)" fg:x="5642" fg:w="1"/><text x="99.7737%" y="1199.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.02%)</title><rect x="99.5237%" y="1173" width="0.0176%" height="15" fill="rgb(216,93,47)" fg:x="5642" fg:w="1"/><text x="99.7737%" y="1183.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.02%)</title><rect x="99.5237%" y="1157" width="0.0176%" height="15" fill="rgb(238,159,10)" fg:x="5642" fg:w="1"/><text x="99.7737%" y="1167.50"></text></g><g><title>leveldb::WriteBatchInternal::SetContents (3 samples, 0.05%)</title><rect x="99.5414%" y="1285" width="0.0529%" height="15" fill="rgb(223,98,29)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (3 samples, 0.05%)</title><rect x="99.5414%" y="1269" width="0.0529%" height="15" fill="rgb(210,176,23)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (3 samples, 0.05%)</title><rect x="99.5414%" y="1253" width="0.0529%" height="15" fill="rgb(242,162,27)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.05%)</title><rect x="99.5414%" y="1237" width="0.0529%" height="15" fill="rgb(245,109,32)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.5414%" y="1221" width="0.0529%" height="15" fill="rgb(248,87,8)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.5414%" y="1205" width="0.0529%" height="15" fill="rgb(250,160,50)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="99.5414%" y="1189" width="0.0529%" height="15" fill="rgb(246,165,25)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="99.5414%" y="1173" width="0.0529%" height="15" fill="rgb(249,219,3)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1157" width="0.0529%" height="15" fill="rgb(226,66,5)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1141" width="0.0529%" height="15" fill="rgb(250,220,43)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1125" width="0.0529%" height="15" fill="rgb(225,111,31)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1109" width="0.0529%" height="15" fill="rgb(248,106,18)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1093" width="0.0529%" height="15" fill="rgb(220,226,45)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1077" width="0.0529%" height="15" fill="rgb(208,58,53)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1061" width="0.0529%" height="15" fill="rgb(209,133,1)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1045" width="0.0529%" height="15" fill="rgb(228,216,27)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1029" width="0.0529%" height="15" fill="rgb(238,155,2)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.5414%" y="1013" width="0.0529%" height="15" fill="rgb(244,99,37)" fg:x="5643" fg:w="3"/><text x="99.7914%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.5590%" y="997" width="0.0353%" height="15" fill="rgb(254,32,3)" fg:x="5644" fg:w="2"/><text x="99.8090%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.5766%" y="981" width="0.0176%" height="15" fill="rgb(234,46,50)" fg:x="5645" fg:w="1"/><text x="99.8266%" y="991.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (5 samples, 0.09%)</title><rect x="99.5943%" y="1237" width="0.0882%" height="15" fill="rgb(232,118,51)" fg:x="5646" fg:w="5"/><text x="99.8443%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (5 samples, 0.09%)</title><rect x="99.5943%" y="1221" width="0.0882%" height="15" fill="rgb(207,24,32)" fg:x="5646" fg:w="5"/><text x="99.8443%" y="1231.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (5 samples, 0.09%)</title><rect x="99.5943%" y="1205" width="0.0882%" height="15" fill="rgb(208,107,43)" fg:x="5646" fg:w="5"/><text x="99.8443%" y="1215.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (5 samples, 0.09%)</title><rect x="99.5943%" y="1189" width="0.0882%" height="15" fill="rgb(231,28,9)" fg:x="5646" fg:w="5"/><text x="99.8443%" y="1199.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5 samples, 0.09%)</title><rect x="99.5943%" y="1173" width="0.0882%" height="15" fill="rgb(241,204,15)" fg:x="5646" fg:w="5"/><text x="99.8443%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1157" width="0.0706%" height="15" fill="rgb(214,54,15)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1141" width="0.0706%" height="15" fill="rgb(230,12,28)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1125" width="0.0706%" height="15" fill="rgb(221,171,5)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1109" width="0.0706%" height="15" fill="rgb(207,72,25)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1093" width="0.0706%" height="15" fill="rgb(249,79,37)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1077" width="0.0706%" height="15" fill="rgb(209,98,49)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1061" width="0.0706%" height="15" fill="rgb(221,62,13)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1045" width="0.0706%" height="15" fill="rgb(223,39,6)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1055.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.6119%" y="1029" width="0.0706%" height="15" fill="rgb(246,163,20)" fg:x="5647" fg:w="4"/><text x="99.8619%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6648%" y="1013" width="0.0176%" height="15" fill="rgb(211,111,29)" fg:x="5650" fg:w="1"/><text x="99.9148%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.6648%" y="997" width="0.0176%" height="15" fill="rgb(243,118,5)" fg:x="5650" fg:w="1"/><text x="99.9148%" y="1007.50"></text></g><g><title>CompleteChainstateInitialization (84 samples, 1.48%)</title><rect x="98.2537%" y="1397" width="1.4817%" height="15" fill="rgb(240,144,52)" fg:x="5570" fg:w="84"/><text x="98.5037%" y="1407.50"></text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (84 samples, 1.48%)</title><rect x="98.2537%" y="1381" width="1.4817%" height="15" fill="rgb(244,158,36)" fg:x="5570" fg:w="84"/><text x="98.5037%" y="1391.50"></text></g><g><title>kernel::BlockTreeDB::CDBWrapper (84 samples, 1.48%)</title><rect x="98.2537%" y="1365" width="1.4817%" height="15" fill="rgb(241,109,37)" fg:x="5570" fg:w="84"/><text x="98.5037%" y="1375.50"></text></g><g><title>CDBWrapper::CDBWrapper (84 samples, 1.48%)</title><rect x="98.2537%" y="1349" width="1.4817%" height="15" fill="rgb(213,95,32)" fg:x="5570" fg:w="84"/><text x="98.5037%" y="1359.50"></text></g><g><title>leveldb::DB::Open (84 samples, 1.48%)</title><rect x="98.2537%" y="1333" width="1.4817%" height="15" fill="rgb(252,193,9)" fg:x="5570" fg:w="84"/><text x="98.5037%" y="1343.50"></text></g><g><title>leveldb::DBImpl::Recover (84 samples, 1.48%)</title><rect x="98.2537%" y="1317" width="1.4817%" height="15" fill="rgb(225,213,21)" fg:x="5570" fg:w="84"/><text x="98.5037%" y="1327.50"></text></g><g><title>leveldb::DBImpl::RecoverLogFile (84 samples, 1.48%)</title><rect x="98.2537%" y="1301" width="1.4817%" height="15" fill="rgb(220,172,46)" fg:x="5570" fg:w="84"/><text x="98.5037%" y="1311.50"></text></g><g><title>leveldb::log::Reader::ReadRecord (8 samples, 0.14%)</title><rect x="99.5943%" y="1285" width="0.1411%" height="15" fill="rgb(235,75,41)" fg:x="5646" fg:w="8"/><text x="99.8443%" y="1295.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (8 samples, 0.14%)</title><rect x="99.5943%" y="1269" width="0.1411%" height="15" fill="rgb(213,86,9)" fg:x="5646" fg:w="8"/><text x="99.8443%" y="1279.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (8 samples, 0.14%)</title><rect x="99.5943%" y="1253" width="0.1411%" height="15" fill="rgb(238,127,51)" fg:x="5646" fg:w="8"/><text x="99.8443%" y="1263.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.6825%" y="1237" width="0.0529%" height="15" fill="rgb(215,2,54)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1247.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (3 samples, 0.05%)</title><rect x="99.6825%" y="1221" width="0.0529%" height="15" fill="rgb(245,80,6)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1231.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (3 samples, 0.05%)</title><rect x="99.6825%" y="1205" width="0.0529%" height="15" fill="rgb(233,106,42)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1215.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.05%)</title><rect x="99.6825%" y="1189" width="0.0529%" height="15" fill="rgb(244,86,38)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6825%" y="1173" width="0.0529%" height="15" fill="rgb(242,167,7)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6825%" y="1157" width="0.0529%" height="15" fill="rgb(218,216,3)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6825%" y="1141" width="0.0529%" height="15" fill="rgb(206,136,36)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6825%" y="1125" width="0.0529%" height="15" fill="rgb(206,206,15)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6825%" y="1109" width="0.0529%" height="15" fill="rgb(207,163,34)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.6825%" y="1093" width="0.0529%" height="15" fill="rgb(240,127,22)" fg:x="5651" fg:w="3"/><text x="99.9325%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7001%" y="1077" width="0.0353%" height="15" fill="rgb(227,49,5)" fg:x="5652" fg:w="2"/><text x="99.9501%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7001%" y="1061" width="0.0353%" height="15" fill="rgb(231,8,6)" fg:x="5652" fg:w="2"/><text x="99.9501%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7178%" y="1045" width="0.0176%" height="15" fill="rgb(223,21,24)" fg:x="5653" fg:w="1"/><text x="99.9678%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7178%" y="1029" width="0.0176%" height="15" fill="rgb(244,44,52)" fg:x="5653" fg:w="1"/><text x="99.9678%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7178%" y="1013" width="0.0176%" height="15" fill="rgb(207,73,28)" fg:x="5653" fg:w="1"/><text x="99.9678%" y="1023.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="99.7354%" y="1189" width="0.0176%" height="15" fill="rgb(234,215,10)" fg:x="5654" fg:w="1"/><text x="99.9854%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="99.7354%" y="1173" width="0.0176%" height="15" fill="rgb(236,85,3)" fg:x="5654" fg:w="1"/><text x="99.9854%" y="1183.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::FindNextUserEntry (3 samples, 0.05%)</title><rect x="99.7354%" y="1317" width="0.0529%" height="15" fill="rgb(236,102,39)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1327.50"></text></g><g><title>Next (3 samples, 0.05%)</title><rect x="99.7354%" y="1301" width="0.0529%" height="15" fill="rgb(243,50,8)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (3 samples, 0.05%)</title><rect x="99.7354%" y="1285" width="0.0529%" height="15" fill="rgb(207,111,4)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1295.50"></text></g><g><title>SkipEmptyDataBlocksForward (3 samples, 0.05%)</title><rect x="99.7354%" y="1269" width="0.0529%" height="15" fill="rgb(230,52,42)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (3 samples, 0.05%)</title><rect x="99.7354%" y="1253" width="0.0529%" height="15" fill="rgb(252,178,50)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (3 samples, 0.05%)</title><rect x="99.7354%" y="1237" width="0.0529%" height="15" fill="rgb(234,46,35)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (3 samples, 0.05%)</title><rect x="99.7354%" y="1221" width="0.0529%" height="15" fill="rgb(228,69,37)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (3 samples, 0.05%)</title><rect x="99.7354%" y="1205" width="0.0529%" height="15" fill="rgb(221,21,11)" fg:x="5654" fg:w="3"/><text x="99.9854%" y="1215.50"></text></g><g><title>operator new (2 samples, 0.04%)</title><rect x="99.7530%" y="1189" width="0.0353%" height="15" fill="rgb(223,56,9)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1199.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="99.7530%" y="1173" width="0.0353%" height="15" fill="rgb(234,30,19)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1183.50"></text></g><g><title>_int_malloc (2 samples, 0.04%)</title><rect x="99.7530%" y="1157" width="0.0353%" height="15" fill="rgb(211,64,54)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1141" width="0.0353%" height="15" fill="rgb(250,189,5)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1125" width="0.0353%" height="15" fill="rgb(214,180,13)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1109" width="0.0353%" height="15" fill="rgb(238,40,40)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1093" width="0.0353%" height="15" fill="rgb(214,101,38)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1077" width="0.0353%" height="15" fill="rgb(242,65,53)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1061" width="0.0353%" height="15" fill="rgb(230,22,45)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1045" width="0.0353%" height="15" fill="rgb(223,77,1)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.7530%" y="1029" width="0.0353%" height="15" fill="rgb(227,33,37)" fg:x="5655" fg:w="2"/><text x="100.0030%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7707%" y="1013" width="0.0176%" height="15" fill="rgb(224,148,39)" fg:x="5656" fg:w="1"/><text x="100.0207%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7707%" y="997" width="0.0176%" height="15" fill="rgb(232,212,39)" fg:x="5656" fg:w="1"/><text x="100.0207%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7707%" y="981" width="0.0176%" height="15" fill="rgb(251,172,7)" fg:x="5656" fg:w="1"/><text x="100.0207%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7707%" y="965" width="0.0176%" height="15" fill="rgb(219,39,9)" fg:x="5656" fg:w="1"/><text x="100.0207%" y="975.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.02%)</title><rect x="99.7883%" y="1189" width="0.0176%" height="15" fill="rgb(228,118,14)" fg:x="5657" fg:w="1"/><text x="100.0383%" y="1199.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.02%)</title><rect x="99.7883%" y="1173" width="0.0176%" height="15" fill="rgb(207,140,10)" fg:x="5657" fg:w="1"/><text x="100.0383%" y="1183.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.02%)</title><rect x="99.7883%" y="1157" width="0.0176%" height="15" fill="rgb(227,111,53)" fg:x="5657" fg:w="1"/><text x="100.0383%" y="1167.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (5 samples, 0.09%)</title><rect x="99.7354%" y="1333" width="0.0882%" height="15" fill="rgb(216,165,16)" fg:x="5654" fg:w="5"/><text x="99.9854%" y="1343.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (2 samples, 0.04%)</title><rect x="99.7883%" y="1317" width="0.0353%" height="15" fill="rgb(226,111,18)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1327.50"></text></g><g><title>Next (2 samples, 0.04%)</title><rect x="99.7883%" y="1301" width="0.0353%" height="15" fill="rgb(251,27,17)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1311.50"></text></g><g><title>leveldb::IteratorWrapper::Next (2 samples, 0.04%)</title><rect x="99.7883%" y="1285" width="0.0353%" height="15" fill="rgb(254,69,9)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1295.50"></text></g><g><title>SkipEmptyDataBlocksForward (2 samples, 0.04%)</title><rect x="99.7883%" y="1269" width="0.0353%" height="15" fill="rgb(234,140,37)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1279.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (2 samples, 0.04%)</title><rect x="99.7883%" y="1253" width="0.0353%" height="15" fill="rgb(220,93,8)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1263.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (2 samples, 0.04%)</title><rect x="99.7883%" y="1237" width="0.0353%" height="15" fill="rgb(236,113,3)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1247.50"></text></g><g><title>leveldb::Table::BlockReader (2 samples, 0.04%)</title><rect x="99.7883%" y="1221" width="0.0353%" height="15" fill="rgb(234,108,23)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1231.50"></text></g><g><title>leveldb::ReadBlock (2 samples, 0.04%)</title><rect x="99.7883%" y="1205" width="0.0353%" height="15" fill="rgb(205,114,34)" fg:x="5657" fg:w="2"/><text x="100.0383%" y="1215.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="99.8060%" y="1189" width="0.0176%" height="15" fill="rgb(236,200,45)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1199.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.8060%" y="1173" width="0.0176%" height="15" fill="rgb(227,194,29)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1183.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="99.8060%" y="1157" width="0.0176%" height="15" fill="rgb(250,76,42)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1141" width="0.0176%" height="15" fill="rgb(208,128,8)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1125" width="0.0176%" height="15" fill="rgb(229,209,35)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1109" width="0.0176%" height="15" fill="rgb(215,39,53)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1093" width="0.0176%" height="15" fill="rgb(219,123,41)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1077" width="0.0176%" height="15" fill="rgb(212,158,18)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1061" width="0.0176%" height="15" fill="rgb(234,196,53)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1045" width="0.0176%" height="15" fill="rgb(210,139,12)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1029" width="0.0176%" height="15" fill="rgb(220,116,54)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8060%" y="1013" width="0.0176%" height="15" fill="rgb(247,103,28)" fg:x="5658" fg:w="1"/><text x="100.0560%" y="1023.50"></text></g><g><title>bitcoind-head (977 samples, 17.23%)</title><rect x="82.6072%" y="1525" width="17.2341%" height="15" fill="rgb(253,156,45)" fg:x="4683" fg:w="977"/><text x="82.8572%" y="1535.50">bitcoind-head</text></g><g><title>main (90 samples, 1.59%)</title><rect x="98.2537%" y="1509" width="1.5876%" height="15" fill="rgb(237,157,52)" fg:x="5570" fg:w="90"/><text x="98.5037%" y="1519.50"></text></g><g><title>main (90 samples, 1.59%)</title><rect x="98.2537%" y="1493" width="1.5876%" height="15" fill="rgb(253,112,16)" fg:x="5570" fg:w="90"/><text x="98.5037%" y="1503.50"></text></g><g><title>AppInitMain (90 samples, 1.59%)</title><rect x="98.2537%" y="1477" width="1.5876%" height="15" fill="rgb(234,70,18)" fg:x="5570" fg:w="90"/><text x="98.5037%" y="1487.50"></text></g><g><title>InitAndLoadChainstate (90 samples, 1.59%)</title><rect x="98.2537%" y="1461" width="1.5876%" height="15" fill="rgb(247,138,19)" fg:x="5570" fg:w="90"/><text x="98.5037%" y="1471.50"></text></g><g><title>operator (90 samples, 1.59%)</title><rect x="98.2537%" y="1445" width="1.5876%" height="15" fill="rgb(207,171,1)" fg:x="5570" fg:w="90"/><text x="98.5037%" y="1455.50"></text></g><g><title>InitAndLoadChainstate (90 samples, 1.59%)</title><rect x="98.2537%" y="1429" width="1.5876%" height="15" fill="rgb(239,213,3)" fg:x="5570" fg:w="90"/><text x="98.5037%" y="1439.50"></text></g><g><title>node::LoadChainstate (90 samples, 1.59%)</title><rect x="98.2537%" y="1413" width="1.5876%" height="15" fill="rgb(226,112,4)" fg:x="5570" fg:w="90"/><text x="98.5037%" y="1423.50"></text></g><g><title>node::CompleteChainstateInitialization (6 samples, 0.11%)</title><rect x="99.7354%" y="1397" width="0.1058%" height="15" fill="rgb(252,170,12)" fg:x="5654" fg:w="6"/><text x="99.9854%" y="1407.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (6 samples, 0.11%)</title><rect x="99.7354%" y="1381" width="0.1058%" height="15" fill="rgb(241,106,13)" fg:x="5654" fg:w="6"/><text x="99.9854%" y="1391.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (6 samples, 0.11%)</title><rect x="99.7354%" y="1365" width="0.1058%" height="15" fill="rgb(225,73,23)" fg:x="5654" fg:w="6"/><text x="99.9854%" y="1375.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (6 samples, 0.11%)</title><rect x="99.7354%" y="1349" width="0.1058%" height="15" fill="rgb(251,227,29)" fg:x="5654" fg:w="6"/><text x="99.9854%" y="1359.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1333" width="0.0176%" height="15" fill="rgb(237,144,13)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1343.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1317" width="0.0176%" height="15" fill="rgb(232,106,46)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1327.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1301" width="0.0176%" height="15" fill="rgb(245,154,53)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1311.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1285" width="0.0176%" height="15" fill="rgb(212,119,47)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1295.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1269" width="0.0176%" height="15" fill="rgb(253,135,25)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1279.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1253" width="0.0176%" height="15" fill="rgb(253,208,39)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1263.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1237" width="0.0176%" height="15" fill="rgb(226,64,12)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1247.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1221" width="0.0176%" height="15" fill="rgb(214,162,37)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1231.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1205" width="0.0176%" height="15" fill="rgb(250,104,5)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1215.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1189" width="0.0176%" height="15" fill="rgb(220,202,50)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1199.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1173" width="0.0176%" height="15" fill="rgb(248,67,38)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1183.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1157" width="0.0176%" height="15" fill="rgb(242,94,35)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1167.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.02%)</title><rect x="99.8236%" y="1141" width="0.0176%" height="15" fill="rgb(209,78,37)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1151.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.02%)</title><rect x="99.8236%" y="1125" width="0.0176%" height="15" fill="rgb(230,126,47)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1135.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.02%)</title><rect x="99.8236%" y="1109" width="0.0176%" height="15" fill="rgb(222,110,35)" fg:x="5659" fg:w="1"/><text x="100.0736%" y="1119.50"></text></g><g><title>perf-exec (4 samples, 0.07%)</title><rect x="99.8412%" y="1525" width="0.0706%" height="15" fill="rgb(233,154,20)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1535.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1509" width="0.0706%" height="15" fill="rgb(223,53,50)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1519.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1493" width="0.0706%" height="15" fill="rgb(251,27,26)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1477" width="0.0706%" height="15" fill="rgb(223,189,16)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1461" width="0.0706%" height="15" fill="rgb(207,5,54)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1471.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1445" width="0.0706%" height="15" fill="rgb(254,124,50)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1455.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1429" width="0.0706%" height="15" fill="rgb(253,193,24)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1413" width="0.0706%" height="15" fill="rgb(235,170,24)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1397" width="0.0706%" height="15" fill="rgb(222,212,52)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.8412%" y="1381" width="0.0706%" height="15" fill="rgb(223,17,45)" fg:x="5660" fg:w="4"/><text x="100.0912%" y="1391.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8589%" y="1365" width="0.0529%" height="15" fill="rgb(227,103,26)" fg:x="5661" fg:w="3"/><text x="100.1089%" y="1375.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8589%" y="1349" width="0.0529%" height="15" fill="rgb(251,151,25)" fg:x="5661" fg:w="3"/><text x="100.1089%" y="1359.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8589%" y="1333" width="0.0529%" height="15" fill="rgb(248,144,29)" fg:x="5661" fg:w="3"/><text x="100.1089%" y="1343.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8589%" y="1317" width="0.0529%" height="15" fill="rgb(245,97,16)" fg:x="5661" fg:w="3"/><text x="100.1089%" y="1327.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8589%" y="1301" width="0.0529%" height="15" fill="rgb(220,200,29)" fg:x="5661" fg:w="3"/><text x="100.1089%" y="1311.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8589%" y="1285" width="0.0529%" height="15" fill="rgb(206,38,29)" fg:x="5661" fg:w="3"/><text x="100.1089%" y="1295.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.8589%" y="1269" width="0.0529%" height="15" fill="rgb(245,19,52)" fg:x="5661" fg:w="3"/><text x="100.1089%" y="1279.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4 samples, 0.07%)</title><rect x="99.9118%" y="1493" width="0.0706%" height="15" fill="rgb(205,67,43)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1503.50"></text></g><g><title>__libc_start_call_main (4 samples, 0.07%)</title><rect x="99.9118%" y="1477" width="0.0706%" height="15" fill="rgb(217,128,23)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1487.50"></text></g><g><title>main (4 samples, 0.07%)</title><rect x="99.9118%" y="1461" width="0.0706%" height="15" fill="rgb(210,109,28)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1471.50"></text></g><g><title>do_taskset (4 samples, 0.07%)</title><rect x="99.9118%" y="1445" width="0.0706%" height="15" fill="rgb(233,181,7)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1455.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (4 samples, 0.07%)</title><rect x="99.9118%" y="1429" width="0.0706%" height="15" fill="rgb(244,11,22)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1413" width="0.0706%" height="15" fill="rgb(205,124,54)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1397" width="0.0706%" height="15" fill="rgb(218,21,27)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1407.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1381" width="0.0706%" height="15" fill="rgb(224,153,33)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1391.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1365" width="0.0706%" height="15" fill="rgb(240,219,28)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1375.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1349" width="0.0706%" height="15" fill="rgb(214,80,29)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1359.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1333" width="0.0706%" height="15" fill="rgb(247,148,44)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1343.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1317" width="0.0706%" height="15" fill="rgb(243,110,30)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1327.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1301" width="0.0706%" height="15" fill="rgb(243,173,41)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1311.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1285" width="0.0706%" height="15" fill="rgb(225,160,47)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1295.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1269" width="0.0706%" height="15" fill="rgb(215,44,21)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1279.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="99.9118%" y="1253" width="0.0706%" height="15" fill="rgb(248,90,3)" fg:x="5664" fg:w="4"/><text x="100.1618%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1237" width="0.0529%" height="15" fill="rgb(220,196,49)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1221" width="0.0529%" height="15" fill="rgb(217,138,14)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1205" width="0.0529%" height="15" fill="rgb(219,111,20)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1189" width="0.0529%" height="15" fill="rgb(218,114,4)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1173" width="0.0529%" height="15" fill="rgb(238,133,3)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1157" width="0.0529%" height="15" fill="rgb(224,95,0)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1141" width="0.0529%" height="15" fill="rgb(220,169,35)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.9294%" y="1125" width="0.0529%" height="15" fill="rgb(242,116,47)" fg:x="5665" fg:w="3"/><text x="100.1794%" y="1135.50"></text></g><g><title>all (5,669 samples, 100%)</title><rect x="0.0000%" y="1541" width="100.0000%" height="15" fill="rgb(251,42,20)" fg:x="0" fg:w="5669"/><text x="0.2500%" y="1551.50"></text></g><g><title>taskset (5 samples, 0.09%)</title><rect x="99.9118%" y="1525" width="0.0882%" height="15" fill="rgb(234,7,34)" fg:x="5664" fg:w="5"/><text x="100.1618%" y="1535.50"></text></g><g><title>_start (5 samples, 0.09%)</title><rect x="99.9118%" y="1509" width="0.0882%" height="15" fill="rgb(243,208,13)" fg:x="5664" fg:w="5"/><text x="100.1618%" y="1519.50"></text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect x="99.9824%" y="1493" width="0.0176%" height="15" fill="rgb(227,33,28)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1503.50"></text></g><g><title>_dl_start_final (1 samples, 0.02%)</title><rect x="99.9824%" y="1477" width="0.0176%" height="15" fill="rgb(250,47,37)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1487.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="99.9824%" y="1461" width="0.0176%" height="15" fill="rgb(235,111,52)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1471.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="99.9824%" y="1445" width="0.0176%" height="15" fill="rgb(223,64,28)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1455.50"></text></g><g><title>init_tls (1 samples, 0.02%)</title><rect x="99.9824%" y="1429" width="0.0176%" height="15" fill="rgb(236,67,22)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1439.50"></text></g><g><title>call_tls_init_tp (1 samples, 0.02%)</title><rect x="99.9824%" y="1413" width="0.0176%" height="15" fill="rgb(243,79,24)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9824%" y="1397" width="0.0176%" height="15" fill="rgb(241,225,22)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9824%" y="1381" width="0.0176%" height="15" fill="rgb(228,214,26)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9824%" y="1365" width="0.0176%" height="15" fill="rgb(219,84,52)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9824%" y="1349" width="0.0176%" height="15" fill="rgb(220,12,22)" fg:x="5668" fg:w="1"/><text x="100.2324%" y="1359.50"></text></g></svg></svg>