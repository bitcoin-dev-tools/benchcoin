<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="306"><g><title>b-http (4 samples, 1.31%)</title><rect x="0.0000%" y="885" width="1.3072%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="895.50"></text></g><g><title>__clone (4 samples, 1.31%)</title><rect x="0.0000%" y="869" width="1.3072%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="879.50"></text></g><g><title>start_thread (4 samples, 1.31%)</title><rect x="0.0000%" y="853" width="1.3072%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="863.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.31%)</title><rect x="0.0000%" y="837" width="1.3072%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="847.50"></text></g><g><title>ThreadHTTP (4 samples, 1.31%)</title><rect x="0.0000%" y="821" width="1.3072%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="831.50"></text></g><g><title>event_base_loop (4 samples, 1.31%)</title><rect x="0.0000%" y="805" width="1.3072%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="815.50"></text></g><g><title>epoll_dispatch (4 samples, 1.31%)</title><rect x="0.0000%" y="789" width="1.3072%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="799.50"></text></g><g><title>epoll_wait (4 samples, 1.31%)</title><rect x="0.0000%" y="773" width="1.3072%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="0.0000%" y="757" width="1.3072%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="0.0000%" y="741" width="1.3072%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="0.0000%" y="725" width="1.3072%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="0.0000%" y="709" width="1.3072%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="0.0000%" y="693" width="1.3072%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="677" width="0.9804%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="3"/><text x="0.5768%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="661" width="0.9804%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="3"/><text x="0.5768%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="645" width="0.9804%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="3"/><text x="0.5768%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="629" width="0.9804%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="3"/><text x="0.5768%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="613" width="0.9804%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="3"/><text x="0.5768%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="597" width="0.9804%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="3"/><text x="0.5768%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="581" width="0.9804%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="3"/><text x="0.5768%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="565" width="0.9804%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="3"/><text x="0.5768%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="549" width="0.9804%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="3"/><text x="0.5768%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="0.3268%" y="533" width="0.9804%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="3"/><text x="0.5768%" y="543.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (1 samples, 0.33%)</title><rect x="1.3072%" y="869" width="0.3268%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="1.5572%" y="879.50"></text></g><g><title>CheckBlock (1 samples, 0.33%)</title><rect x="1.3072%" y="853" width="0.3268%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="1.5572%" y="863.50"></text></g><g><title>CheckSignetBlockSolution (1 samples, 0.33%)</title><rect x="1.3072%" y="837" width="0.3268%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="1.5572%" y="847.50"></text></g><g><title>VerifyScript (1 samples, 0.33%)</title><rect x="1.3072%" y="821" width="0.3268%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="1.5572%" y="831.50"></text></g><g><title>EvalScript (1 samples, 0.33%)</title><rect x="1.3072%" y="805" width="0.3268%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="1.5572%" y="815.50"></text></g><g><title>EvalScript (1 samples, 0.33%)</title><rect x="1.3072%" y="789" width="0.3268%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="1"/><text x="1.5572%" y="799.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::CheckECDSASignature (1 samples, 0.33%)</title><rect x="1.3072%" y="773" width="0.3268%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="1"/><text x="1.5572%" y="783.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::VerifyECDSASignature (1 samples, 0.33%)</title><rect x="1.3072%" y="757" width="0.3268%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="1"/><text x="1.5572%" y="767.50"></text></g><g><title>CPubKey::Verify (1 samples, 0.33%)</title><rect x="1.3072%" y="741" width="0.3268%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="1.5572%" y="751.50"></text></g><g><title>secp256k1_ecdsa_verify (1 samples, 0.33%)</title><rect x="1.3072%" y="725" width="0.3268%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="1.5572%" y="735.50"></text></g><g><title>secp256k1_ecdsa_sig_verify (1 samples, 0.33%)</title><rect x="1.3072%" y="709" width="0.3268%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="1.5572%" y="719.50"></text></g><g><title>secp256k1_ecmult (1 samples, 0.33%)</title><rect x="1.3072%" y="693" width="0.3268%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="1.5572%" y="703.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (1 samples, 0.33%)</title><rect x="1.3072%" y="677" width="0.3268%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="1.5572%" y="687.50"></text></g><g><title>secp256k1_gej_add_ge_var (1 samples, 0.33%)</title><rect x="1.3072%" y="661" width="0.3268%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="1.5572%" y="671.50"></text></g><g><title>secp256k1_fe_impl_mul (1 samples, 0.33%)</title><rect x="1.3072%" y="645" width="0.3268%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="1.5572%" y="655.50"></text></g><g><title>secp256k1_fe_sqr_inner (1 samples, 0.33%)</title><rect x="1.3072%" y="629" width="0.3268%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="1.5572%" y="639.50"></text></g><g><title>secp256k1_u128_accum_mul (1 samples, 0.33%)</title><rect x="1.3072%" y="613" width="0.3268%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="1.5572%" y="623.50"></text></g><g><title>prevector&lt;16u, unsigned char, unsigned int, int&gt;::resize (1 samples, 0.33%)</title><rect x="1.6340%" y="853" width="0.3268%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="1.8840%" y="863.50"></text></g><g><title>secp256k1_fe_mul_inner (1 samples, 0.33%)</title><rect x="1.9608%" y="853" width="0.3268%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="2.2108%" y="863.50"></text></g><g><title>[anon] (3 samples, 0.98%)</title><rect x="1.6340%" y="869" width="0.9804%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="3"/><text x="1.8840%" y="879.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (1 samples, 0.33%)</title><rect x="2.2876%" y="853" width="0.3268%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="1"/><text x="2.5376%" y="863.50"></text></g><g><title>[bitcoind-head] (1 samples, 0.33%)</title><rect x="2.6144%" y="869" width="0.3268%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="2.8644%" y="879.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.33%)</title><rect x="2.6144%" y="853" width="0.3268%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="2.8644%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="2.9412%" y="869" width="0.6536%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="2"/><text x="3.1912%" y="879.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.33%)</title><rect x="3.2680%" y="853" width="0.3268%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="3.5180%" y="863.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.33%)</title><rect x="3.5948%" y="661" width="0.3268%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="1"/><text x="3.8448%" y="671.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.33%)</title><rect x="3.5948%" y="645" width="0.3268%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="3.8448%" y="655.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.33%)</title><rect x="3.5948%" y="629" width="0.3268%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="3.8448%" y="639.50"></text></g><g><title>CSHA256::Write (1 samples, 0.33%)</title><rect x="3.5948%" y="613" width="0.3268%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="3.8448%" y="623.50"></text></g><g><title>CSHA256::Write (1 samples, 0.33%)</title><rect x="3.5948%" y="597" width="0.3268%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="3.8448%" y="607.50"></text></g><g><title>CCoinsViewCache::GetCoin (1 samples, 0.33%)</title><rect x="3.9216%" y="581" width="0.3268%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1"/><text x="4.1716%" y="591.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.33%)</title><rect x="3.9216%" y="565" width="0.3268%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="4.1716%" y="575.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (1 samples, 0.33%)</title><rect x="3.9216%" y="549" width="0.3268%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="4.1716%" y="559.50"></text></g><g><title>ExecuteBackedWrapper&lt;std::optional&lt;Coin&gt;, CCoinsViewErrorCatcher::GetCoin(const COutPoint&amp;) const::&lt;lambda()&gt; &gt; (1 samples, 0.33%)</title><rect x="3.9216%" y="533" width="0.3268%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="4.1716%" y="543.50"></text></g><g><title>CCoinsViewErrorCatcher::GetCoin (1 samples, 0.33%)</title><rect x="3.9216%" y="517" width="0.3268%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="4.1716%" y="527.50"></text></g><g><title>CCoinsViewBacked::GetCoin (1 samples, 0.33%)</title><rect x="3.9216%" y="501" width="0.3268%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="4.1716%" y="511.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.33%)</title><rect x="3.9216%" y="485" width="0.3268%" height="15" fill="rgb(227,1,9)" fg:x="12" fg:w="1"/><text x="4.1716%" y="495.50"></text></g><g><title>CCoinsViewDB::GetCoin (1 samples, 0.33%)</title><rect x="3.9216%" y="469" width="0.3268%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="1"/><text x="4.1716%" y="479.50"></text></g><g><title>CDBWrapper::ReadImpl[abi:cxx11] (1 samples, 0.33%)</title><rect x="3.9216%" y="453" width="0.3268%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="1"/><text x="4.1716%" y="463.50"></text></g><g><title>leveldb::DBImpl::Get (1 samples, 0.33%)</title><rect x="3.9216%" y="437" width="0.3268%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="1"/><text x="4.1716%" y="447.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.33%)</title><rect x="3.9216%" y="421" width="0.3268%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="1"/><text x="4.1716%" y="431.50"></text></g><g><title>leveldb::Version::ForEachOverlapping (1 samples, 0.33%)</title><rect x="3.9216%" y="405" width="0.3268%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="4.1716%" y="415.50"></text></g><g><title>leveldb::Version::Get (1 samples, 0.33%)</title><rect x="3.9216%" y="389" width="0.3268%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="4.1716%" y="399.50"></text></g><g><title>leveldb::TableCache::Get (1 samples, 0.33%)</title><rect x="3.9216%" y="373" width="0.3268%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="1"/><text x="4.1716%" y="383.50"></text></g><g><title>leveldb::Table::InternalGet (1 samples, 0.33%)</title><rect x="3.9216%" y="357" width="0.3268%" height="15" fill="rgb(213,79,30)" fg:x="12" fg:w="1"/><text x="4.1716%" y="367.50"></text></g><g><title>leveldb::Block::NewIterator (1 samples, 0.33%)</title><rect x="3.9216%" y="341" width="0.3268%" height="15" fill="rgb(246,177,23)" fg:x="12" fg:w="1"/><text x="4.1716%" y="351.50"></text></g><g><title>leveldb::Block::Iter::Iter (1 samples, 0.33%)</title><rect x="3.9216%" y="325" width="0.3268%" height="15" fill="rgb(230,62,27)" fg:x="12" fg:w="1"/><text x="4.1716%" y="335.50"></text></g><g><title>leveldb::Slice::Slice (1 samples, 0.33%)</title><rect x="3.9216%" y="309" width="0.3268%" height="15" fill="rgb(216,154,8)" fg:x="12" fg:w="1"/><text x="4.1716%" y="319.50"></text></g><g><title>CCoinsViewCache::HaveCoin (2 samples, 0.65%)</title><rect x="3.9216%" y="613" width="0.6536%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="2"/><text x="4.1716%" y="623.50"></text></g><g><title>CCoinsViewCache::FetchCoin (2 samples, 0.65%)</title><rect x="3.9216%" y="597" width="0.6536%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="2"/><text x="4.1716%" y="607.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::try_emplace&lt;&gt; (1 samples, 0.33%)</title><rect x="4.2484%" y="581" width="0.3268%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="1"/><text x="4.4984%" y="591.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false, false&gt;, bool&gt; std::__detail::_Insert_base&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::try_emplace&lt;COutPoint const&amp;&gt; (1 samples, 0.33%)</title><rect x="4.2484%" y="565" width="0.3268%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="4.4984%" y="575.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;COutPoint const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.33%)</title><rect x="4.2484%" y="549" width="0.3268%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="4.4984%" y="559.50"></text></g><g><title>CCoinsViewCache::FetchCoin (1 samples, 0.33%)</title><rect x="4.2484%" y="533" width="0.3268%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="4.4984%" y="543.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::erase (1 samples, 0.33%)</title><rect x="4.2484%" y="517" width="0.3268%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="4.4984%" y="527.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (1 samples, 0.33%)</title><rect x="4.2484%" y="501" width="0.3268%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="1"/><text x="4.4984%" y="511.50"></text></g><g><title>void LogPrintFormatInternal&lt;double, double, double&gt; (1 samples, 0.33%)</title><rect x="4.5752%" y="613" width="0.3268%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="1"/><text x="4.8252%" y="623.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.33%)</title><rect x="4.5752%" y="597" width="0.3268%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="1"/><text x="4.8252%" y="607.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.33%)</title><rect x="4.5752%" y="581" width="0.3268%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="1"/><text x="4.8252%" y="591.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.33%)</title><rect x="4.5752%" y="565" width="0.3268%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="1"/><text x="4.8252%" y="575.50"></text></g><g><title>_IO_fwrite (1 samples, 0.33%)</title><rect x="4.5752%" y="549" width="0.3268%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="1"/><text x="4.8252%" y="559.50"></text></g><g><title>_IO_file_xsputn@@GLIBC_2.2.5 (1 samples, 0.33%)</title><rect x="4.5752%" y="533" width="0.3268%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="1"/><text x="4.8252%" y="543.50"></text></g><g><title>new_do_write (1 samples, 0.33%)</title><rect x="4.5752%" y="517" width="0.3268%" height="15" fill="rgb(237,122,38)" fg:x="14" fg:w="1"/><text x="4.8252%" y="527.50"></text></g><g><title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.33%)</title><rect x="4.5752%" y="501" width="0.3268%" height="15" fill="rgb(244,218,35)" fg:x="14" fg:w="1"/><text x="4.8252%" y="511.50"></text></g><g><title>__GI___libc_write (1 samples, 0.33%)</title><rect x="4.5752%" y="485" width="0.3268%" height="15" fill="rgb(240,68,47)" fg:x="14" fg:w="1"/><text x="4.8252%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="469" width="0.3268%" height="15" fill="rgb(210,16,53)" fg:x="14" fg:w="1"/><text x="4.8252%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="453" width="0.3268%" height="15" fill="rgb(235,124,12)" fg:x="14" fg:w="1"/><text x="4.8252%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="437" width="0.3268%" height="15" fill="rgb(224,169,11)" fg:x="14" fg:w="1"/><text x="4.8252%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="421" width="0.3268%" height="15" fill="rgb(250,166,2)" fg:x="14" fg:w="1"/><text x="4.8252%" y="431.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="4.5752%" y="405" width="0.3268%" height="15" fill="rgb(242,216,29)" fg:x="14" fg:w="1"/><text x="4.8252%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="389" width="0.3268%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="1"/><text x="4.8252%" y="399.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="4.5752%" y="373" width="0.3268%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="1"/><text x="4.8252%" y="383.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="4.5752%" y="357" width="0.3268%" height="15" fill="rgb(253,11,6)" fg:x="14" fg:w="1"/><text x="4.8252%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="341" width="0.3268%" height="15" fill="rgb(247,143,39)" fg:x="14" fg:w="1"/><text x="4.8252%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="325" width="0.3268%" height="15" fill="rgb(236,97,10)" fg:x="14" fg:w="1"/><text x="4.8252%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="309" width="0.3268%" height="15" fill="rgb(233,208,19)" fg:x="14" fg:w="1"/><text x="4.8252%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="4.5752%" y="293" width="0.3268%" height="15" fill="rgb(216,164,2)" fg:x="14" fg:w="1"/><text x="4.8252%" y="303.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.33%)</title><rect x="4.9020%" y="597" width="0.3268%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="5.1520%" y="607.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.33%)</title><rect x="4.9020%" y="581" width="0.3268%" height="15" fill="rgb(242,17,10)" fg:x="15" fg:w="1"/><text x="5.1520%" y="591.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (1 samples, 0.33%)</title><rect x="4.9020%" y="565" width="0.3268%" height="15" fill="rgb(242,107,0)" fg:x="15" fg:w="1"/><text x="5.1520%" y="575.50"></text></g><g><title>Chainstate::ConnectBlock (5 samples, 1.63%)</title><rect x="3.9216%" y="629" width="1.6340%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="5"/><text x="4.1716%" y="639.50"></text></g><g><title>void LogPrintFormatInternal&lt;unsigned int, double, double, double, double, double&gt; (2 samples, 0.65%)</title><rect x="4.9020%" y="613" width="0.6536%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="2"/><text x="5.1520%" y="623.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;unsigned int, double, double, double, double, double&gt; (1 samples, 0.33%)</title><rect x="5.2288%" y="597" width="0.3268%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="1"/><text x="5.4788%" y="607.50"></text></g><g><title>void tinyformat::format&lt;unsigned int, double, double, double, double, double&gt; (1 samples, 0.33%)</title><rect x="5.2288%" y="581" width="0.3268%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="1"/><text x="5.4788%" y="591.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.33%)</title><rect x="5.2288%" y="565" width="0.3268%" height="15" fill="rgb(244,5,23)" fg:x="16" fg:w="1"/><text x="5.4788%" y="575.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.33%)</title><rect x="5.2288%" y="549" width="0.3268%" height="15" fill="rgb(226,81,46)" fg:x="16" fg:w="1"/><text x="5.4788%" y="559.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.33%)</title><rect x="5.2288%" y="533" width="0.3268%" height="15" fill="rgb(247,70,30)" fg:x="16" fg:w="1"/><text x="5.4788%" y="543.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.33%)</title><rect x="5.2288%" y="517" width="0.3268%" height="15" fill="rgb(212,68,19)" fg:x="16" fg:w="1"/><text x="5.4788%" y="527.50"></text></g><g><title>Chainstate::ActivateBestChainStep (9 samples, 2.94%)</title><rect x="3.9216%" y="661" width="2.9412%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="9"/><text x="4.1716%" y="671.50">Ch..</text></g><g><title>Chainstate::ConnectTip (9 samples, 2.94%)</title><rect x="3.9216%" y="645" width="2.9412%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="9"/><text x="4.1716%" y="655.50">Ch..</text></g><g><title>Chainstate::UpdateTip (4 samples, 1.31%)</title><rect x="5.5556%" y="629" width="1.3072%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="4"/><text x="5.8056%" y="639.50"></text></g><g><title>UpdateTipLog (4 samples, 1.31%)</title><rect x="5.5556%" y="613" width="1.3072%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="4"/><text x="5.8056%" y="623.50"></text></g><g><title>void LogPrintFormatInternal&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, int, double, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, double, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (4 samples, 1.31%)</title><rect x="5.5556%" y="597" width="1.3072%" height="15" fill="rgb(247,173,49)" fg:x="17" fg:w="4"/><text x="5.8056%" y="607.50"></text></g><g><title>BCLog::Logger::LogPrintStr (4 samples, 1.31%)</title><rect x="5.5556%" y="581" width="1.3072%" height="15" fill="rgb(224,114,35)" fg:x="17" fg:w="4"/><text x="5.8056%" y="591.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (4 samples, 1.31%)</title><rect x="5.5556%" y="565" width="1.3072%" height="15" fill="rgb(245,159,27)" fg:x="17" fg:w="4"/><text x="5.8056%" y="575.50"></text></g><g><title>BCLog::Logger::FormatLogStrInPlace (4 samples, 1.31%)</title><rect x="5.5556%" y="549" width="1.3072%" height="15" fill="rgb(245,172,44)" fg:x="17" fg:w="4"/><text x="5.8056%" y="559.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (4 samples, 1.31%)</title><rect x="5.5556%" y="533" width="1.3072%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="4"/><text x="5.8056%" y="543.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (4 samples, 1.31%)</title><rect x="5.5556%" y="517" width="1.3072%" height="15" fill="rgb(205,117,38)" fg:x="17" fg:w="4"/><text x="5.8056%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (4 samples, 1.31%)</title><rect x="5.5556%" y="501" width="1.3072%" height="15" fill="rgb(237,72,25)" fg:x="17" fg:w="4"/><text x="5.8056%" y="511.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (4 samples, 1.31%)</title><rect x="5.5556%" y="485" width="1.3072%" height="15" fill="rgb(244,70,9)" fg:x="17" fg:w="4"/><text x="5.8056%" y="495.50"></text></g><g><title>std::allocator&lt;char&gt;::deallocate (4 samples, 1.31%)</title><rect x="5.5556%" y="469" width="1.3072%" height="15" fill="rgb(217,125,39)" fg:x="17" fg:w="4"/><text x="5.8056%" y="479.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (4 samples, 1.31%)</title><rect x="5.5556%" y="453" width="1.3072%" height="15" fill="rgb(235,36,10)" fg:x="17" fg:w="4"/><text x="5.8056%" y="463.50"></text></g><g><title>operator delete (4 samples, 1.31%)</title><rect x="5.5556%" y="437" width="1.3072%" height="15" fill="rgb(251,123,47)" fg:x="17" fg:w="4"/><text x="5.8056%" y="447.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="5.5556%" y="421" width="1.3072%" height="15" fill="rgb(221,13,13)" fg:x="17" fg:w="4"/><text x="5.8056%" y="431.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="5.5556%" y="405" width="1.3072%" height="15" fill="rgb(238,131,9)" fg:x="17" fg:w="4"/><text x="5.8056%" y="415.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="5.5556%" y="389" width="1.3072%" height="15" fill="rgb(211,50,8)" fg:x="17" fg:w="4"/><text x="5.8056%" y="399.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="5.5556%" y="373" width="1.3072%" height="15" fill="rgb(245,182,24)" fg:x="17" fg:w="4"/><text x="5.8056%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="357" width="0.9804%" height="15" fill="rgb(242,14,37)" fg:x="18" fg:w="3"/><text x="6.1324%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="341" width="0.9804%" height="15" fill="rgb(246,228,12)" fg:x="18" fg:w="3"/><text x="6.1324%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="325" width="0.9804%" height="15" fill="rgb(213,55,15)" fg:x="18" fg:w="3"/><text x="6.1324%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="309" width="0.9804%" height="15" fill="rgb(209,9,3)" fg:x="18" fg:w="3"/><text x="6.1324%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="293" width="0.9804%" height="15" fill="rgb(230,59,30)" fg:x="18" fg:w="3"/><text x="6.1324%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="277" width="0.9804%" height="15" fill="rgb(209,121,21)" fg:x="18" fg:w="3"/><text x="6.1324%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="261" width="0.9804%" height="15" fill="rgb(220,109,13)" fg:x="18" fg:w="3"/><text x="6.1324%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="245" width="0.9804%" height="15" fill="rgb(232,18,1)" fg:x="18" fg:w="3"/><text x="6.1324%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="5.8824%" y="229" width="0.9804%" height="15" fill="rgb(215,41,42)" fg:x="18" fg:w="3"/><text x="6.1324%" y="239.50"></text></g><g><title>ValidationSignals::BlockConnected (1 samples, 0.33%)</title><rect x="6.8627%" y="661" width="0.3268%" height="15" fill="rgb(224,123,36)" fg:x="21" fg:w="1"/><text x="7.1127%" y="671.50"></text></g><g><title>CBlockHeader::GetHash (1 samples, 0.33%)</title><rect x="6.8627%" y="645" width="0.3268%" height="15" fill="rgb(240,125,3)" fg:x="21" fg:w="1"/><text x="7.1127%" y="655.50"></text></g><g><title>HashWriter::GetHash (1 samples, 0.33%)</title><rect x="6.8627%" y="629" width="0.3268%" height="15" fill="rgb(205,98,50)" fg:x="21" fg:w="1"/><text x="7.1127%" y="639.50"></text></g><g><title>CSHA256::Finalize (1 samples, 0.33%)</title><rect x="6.8627%" y="613" width="0.3268%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="1"/><text x="7.1127%" y="623.50"></text></g><g><title>CSHA256::Write (1 samples, 0.33%)</title><rect x="6.8627%" y="597" width="0.3268%" height="15" fill="rgb(238,207,15)" fg:x="21" fg:w="1"/><text x="7.1127%" y="607.50"></text></g><g><title>CSHA256::Write (1 samples, 0.33%)</title><rect x="6.8627%" y="581" width="0.3268%" height="15" fill="rgb(213,199,42)" fg:x="21" fg:w="1"/><text x="7.1127%" y="591.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.33%)</title><rect x="7.1895%" y="629" width="0.3268%" height="15" fill="rgb(235,201,11)" fg:x="22" fg:w="1"/><text x="7.4395%" y="639.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.33%)</title><rect x="7.1895%" y="613" width="0.3268%" height="15" fill="rgb(207,46,11)" fg:x="22" fg:w="1"/><text x="7.4395%" y="623.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (1 samples, 0.33%)</title><rect x="7.1895%" y="597" width="0.3268%" height="15" fill="rgb(241,35,35)" fg:x="22" fg:w="1"/><text x="7.4395%" y="607.50"></text></g><g><title>Chainstate::ActivateBestChain (13 samples, 4.25%)</title><rect x="3.5948%" y="677" width="4.2484%" height="15" fill="rgb(243,32,47)" fg:x="11" fg:w="13"/><text x="3.8448%" y="687.50">Chain..</text></g><g><title>ValidationSignals::UpdatedBlockTip (2 samples, 0.65%)</title><rect x="7.1895%" y="661" width="0.6536%" height="15" fill="rgb(247,202,23)" fg:x="22" fg:w="2"/><text x="7.4395%" y="671.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (2 samples, 0.65%)</title><rect x="7.1895%" y="645" width="0.6536%" height="15" fill="rgb(219,102,11)" fg:x="22" fg:w="2"/><text x="7.4395%" y="655.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.33%)</title><rect x="7.5163%" y="629" width="0.3268%" height="15" fill="rgb(243,110,44)" fg:x="23" fg:w="1"/><text x="7.7663%" y="639.50"></text></g><g><title>void tinyformat::format&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.33%)</title><rect x="7.5163%" y="613" width="0.3268%" height="15" fill="rgb(222,74,54)" fg:x="23" fg:w="1"/><text x="7.7663%" y="623.50"></text></g><g><title>tinyformat::vformat (1 samples, 0.33%)</title><rect x="7.5163%" y="597" width="0.3268%" height="15" fill="rgb(216,99,12)" fg:x="23" fg:w="1"/><text x="7.7663%" y="607.50"></text></g><g><title>tinyformat::detail::formatImpl (1 samples, 0.33%)</title><rect x="7.5163%" y="581" width="0.3268%" height="15" fill="rgb(226,22,26)" fg:x="23" fg:w="1"/><text x="7.7663%" y="591.50"></text></g><g><title>tinyformat::detail::printFormatStringLiteral (1 samples, 0.33%)</title><rect x="7.5163%" y="565" width="0.3268%" height="15" fill="rgb(217,163,10)" fg:x="23" fg:w="1"/><text x="7.7663%" y="575.50"></text></g><g><title>ChainstateManager::ProcessNewBlock (14 samples, 4.58%)</title><rect x="3.5948%" y="693" width="4.5752%" height="15" fill="rgb(213,25,53)" fg:x="11" fg:w="14"/><text x="3.8448%" y="703.50">Chain..</text></g><g><title>CheckBlock (1 samples, 0.33%)</title><rect x="7.8431%" y="677" width="0.3268%" height="15" fill="rgb(252,105,26)" fg:x="24" fg:w="1"/><text x="8.0931%" y="687.50"></text></g><g><title>CheckBlockHeader (1 samples, 0.33%)</title><rect x="7.8431%" y="661" width="0.3268%" height="15" fill="rgb(220,39,43)" fg:x="24" fg:w="1"/><text x="8.0931%" y="671.50"></text></g><g><title>CheckBlock (1 samples, 0.33%)</title><rect x="7.8431%" y="645" width="0.3268%" height="15" fill="rgb(229,68,48)" fg:x="24" fg:w="1"/><text x="8.0931%" y="655.50"></text></g><g><title>node::BlockManager::AddToBlockIndex (1 samples, 0.33%)</title><rect x="8.1699%" y="661" width="0.3268%" height="15" fill="rgb(252,8,32)" fg:x="25" fg:w="1"/><text x="8.4199%" y="671.50"></text></g><g><title>GetBlockProof (1 samples, 0.33%)</title><rect x="8.1699%" y="645" width="0.3268%" height="15" fill="rgb(223,20,43)" fg:x="25" fg:w="1"/><text x="8.4199%" y="655.50"></text></g><g><title>operator/ (1 samples, 0.33%)</title><rect x="8.1699%" y="629" width="0.3268%" height="15" fill="rgb(229,81,49)" fg:x="25" fg:w="1"/><text x="8.4199%" y="639.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.33%)</title><rect x="8.1699%" y="613" width="0.3268%" height="15" fill="rgb(236,28,36)" fg:x="25" fg:w="1"/><text x="8.4199%" y="623.50"></text></g><g><title>ChainstateManager::ProcessNewBlockHeaders (2 samples, 0.65%)</title><rect x="8.1699%" y="693" width="0.6536%" height="15" fill="rgb(249,185,26)" fg:x="25" fg:w="2"/><text x="8.4199%" y="703.50"></text></g><g><title>ChainstateManager::AcceptBlockHeader (2 samples, 0.65%)</title><rect x="8.1699%" y="677" width="0.6536%" height="15" fill="rgb(249,174,33)" fg:x="25" fg:w="2"/><text x="8.4199%" y="687.50"></text></g><g><title>std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::find (1 samples, 0.33%)</title><rect x="8.4967%" y="661" width="0.3268%" height="15" fill="rgb(233,201,37)" fg:x="26" fg:w="1"/><text x="8.7467%" y="671.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.33%)</title><rect x="8.4967%" y="645" width="0.3268%" height="15" fill="rgb(221,78,26)" fg:x="26" fg:w="1"/><text x="8.7467%" y="655.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.33%)</title><rect x="8.4967%" y="629" width="0.3268%" height="15" fill="rgb(250,127,30)" fg:x="26" fg:w="1"/><text x="8.7467%" y="639.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1 samples, 0.33%)</title><rect x="8.4967%" y="613" width="0.3268%" height="15" fill="rgb(230,49,44)" fg:x="26" fg:w="1"/><text x="8.7467%" y="623.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.33%)</title><rect x="8.4967%" y="597" width="0.3268%" height="15" fill="rgb(229,67,23)" fg:x="26" fg:w="1"/><text x="8.7467%" y="607.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;ParamsWrapper&lt;TransactionSerParams, CBlock&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&amp;) (1 samples, 0.33%)</title><rect x="8.8235%" y="693" width="0.3268%" height="15" fill="rgb(249,83,47)" fg:x="27" fg:w="1"/><text x="9.0735%" y="703.50"></text></g><g><title>void Unserialize&lt;DataStream, ParamsWrapper&lt;TransactionSerParams, CBlock&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="677" width="0.3268%" height="15" fill="rgb(215,43,3)" fg:x="27" fg:w="1"/><text x="9.0735%" y="687.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CBlock&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="661" width="0.3268%" height="15" fill="rgb(238,154,13)" fg:x="27" fg:w="1"/><text x="9.0735%" y="671.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="645" width="0.3268%" height="15" fill="rgb(219,56,2)" fg:x="27" fg:w="1"/><text x="9.0735%" y="655.50"></text></g><g><title>void CBlock::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="629" width="0.3268%" height="15" fill="rgb(233,0,4)" fg:x="27" fg:w="1"/><text x="9.0735%" y="639.50"></text></g><g><title>void CBlock::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="613" width="0.3268%" height="15" fill="rgb(235,30,7)" fg:x="27" fg:w="1"/><text x="9.0735%" y="623.50"></text></g><g><title>void CBlock::SerializationOps&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlock, ActionUnserialize&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="597" width="0.3268%" height="15" fill="rgb(250,79,13)" fg:x="27" fg:w="1"/><text x="9.0735%" y="607.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="581" width="0.3268%" height="15" fill="rgb(211,146,34)" fg:x="27" fg:w="1"/><text x="9.0735%" y="591.50"></text></g><g><title>void UnserializeMany&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CBlockHeader&amp;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="565" width="0.3268%" height="15" fill="rgb(228,22,38)" fg:x="27" fg:w="1"/><text x="9.0735%" y="575.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="549" width="0.3268%" height="15" fill="rgb(235,168,5)" fg:x="27" fg:w="1"/><text x="9.0735%" y="559.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="533" width="0.3268%" height="15" fill="rgb(221,155,16)" fg:x="27" fg:w="1"/><text x="9.0735%" y="543.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt;&amp;&gt;::Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="517" width="0.3268%" height="15" fill="rgb(215,215,53)" fg:x="27" fg:w="1"/><text x="9.0735%" y="527.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::vector&lt;std::shared_ptr&lt;CTransaction const&gt;, std::allocator&lt;std::shared_ptr&lt;CTransaction const&gt; &gt; &gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="501" width="0.3268%" height="15" fill="rgb(223,4,10)" fg:x="27" fg:w="1"/><text x="9.0735%" y="511.50"></text></g><g><title>void DefaultFormatter::Unser&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, std::shared_ptr&lt;CTransaction const&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="485" width="0.3268%" height="15" fill="rgb(234,103,6)" fg:x="27" fg:w="1"/><text x="9.0735%" y="495.50"></text></g><g><title>void Unserialize&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="469" width="0.3268%" height="15" fill="rgb(227,97,0)" fg:x="27" fg:w="1"/><text x="9.0735%" y="479.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt; std::make_shared&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="453" width="0.3268%" height="15" fill="rgb(234,150,53)" fg:x="27" fg:w="1"/><text x="9.0735%" y="463.50"></text></g><g><title>std::shared_ptr&lt;CTransaction const&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="437" width="0.3268%" height="15" fill="rgb(228,201,54)" fg:x="27" fg:w="1"/><text x="9.0735%" y="447.50"></text></g><g><title>std::__shared_ptr&lt;CTransaction const, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="421" width="0.3268%" height="15" fill="rgb(222,22,37)" fg:x="27" fg:w="1"/><text x="9.0735%" y="431.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;CTransaction const, std::allocator&lt;void&gt;, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="405" width="0.3268%" height="15" fill="rgb(237,53,32)" fg:x="27" fg:w="1"/><text x="9.0735%" y="415.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;CTransaction const, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="389" width="0.3268%" height="15" fill="rgb(233,25,53)" fg:x="27" fg:w="1"/><text x="9.0735%" y="399.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="373" width="0.3268%" height="15" fill="rgb(210,40,34)" fg:x="27" fg:w="1"/><text x="9.0735%" y="383.50"></text></g><g><title>void std::_Construct&lt;CTransaction const, deserialize_type const&amp;, ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="357" width="0.3268%" height="15" fill="rgb(241,220,44)" fg:x="27" fg:w="1"/><text x="9.0735%" y="367.50"></text></g><g><title>CTransaction::CTransaction&lt;ParamsStream&lt;DataStream&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="341" width="0.3268%" height="15" fill="rgb(235,28,35)" fg:x="27" fg:w="1"/><text x="9.0735%" y="351.50"></text></g><g><title>CTransaction::CTransaction (1 samples, 0.33%)</title><rect x="8.8235%" y="325" width="0.3268%" height="15" fill="rgb(210,56,17)" fg:x="27" fg:w="1"/><text x="9.0735%" y="335.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.33%)</title><rect x="8.8235%" y="309" width="0.3268%" height="15" fill="rgb(224,130,29)" fg:x="27" fg:w="1"/><text x="9.0735%" y="319.50"></text></g><g><title>CTransaction::ComputeWitnessHash (1 samples, 0.33%)</title><rect x="8.8235%" y="293" width="0.3268%" height="15" fill="rgb(235,212,8)" fg:x="27" fg:w="1"/><text x="9.0735%" y="303.50"></text></g><g><title>HashWriter&amp; HashWriter::operator&lt;&lt; &lt;ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt;(ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; const&amp;) (1 samples, 0.33%)</title><rect x="8.8235%" y="277" width="0.3268%" height="15" fill="rgb(223,33,50)" fg:x="27" fg:w="1"/><text x="9.0735%" y="287.50"></text></g><g><title>void Serialize&lt;HashWriter, ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="261" width="0.3268%" height="15" fill="rgb(219,149,13)" fg:x="27" fg:w="1"/><text x="9.0735%" y="271.50"></text></g><g><title>void ParamsWrapper&lt;TransactionSerParams, CTransaction const&gt;::Serialize&lt;HashWriter&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="245" width="0.3268%" height="15" fill="rgb(250,156,29)" fg:x="27" fg:w="1"/><text x="9.0735%" y="255.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="229" width="0.3268%" height="15" fill="rgb(216,193,19)" fg:x="27" fg:w="1"/><text x="9.0735%" y="239.50"></text></g><g><title>void CTransaction::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="213" width="0.3268%" height="15" fill="rgb(216,135,14)" fg:x="27" fg:w="1"/><text x="9.0735%" y="223.50"></text></g><g><title>void SerializeTransaction&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, CTransaction&gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="197" width="0.3268%" height="15" fill="rgb(241,47,5)" fg:x="27" fg:w="1"/><text x="9.0735%" y="207.50"></text></g><g><title>ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;&amp; ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;(std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.33%)</title><rect x="8.8235%" y="181" width="0.3268%" height="15" fill="rgb(233,42,35)" fg:x="27" fg:w="1"/><text x="9.0735%" y="191.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="165" width="0.3268%" height="15" fill="rgb(231,13,6)" fg:x="27" fg:w="1"/><text x="9.0735%" y="175.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="149" width="0.3268%" height="15" fill="rgb(207,181,40)" fg:x="27" fg:w="1"/><text x="9.0735%" y="159.50"></text></g><g><title>void Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="133" width="0.3268%" height="15" fill="rgb(254,173,49)" fg:x="27" fg:w="1"/><text x="9.0735%" y="143.50"></text></g><g><title>void VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="117" width="0.3268%" height="15" fill="rgb(221,1,38)" fg:x="27" fg:w="1"/><text x="9.0735%" y="127.50"></text></g><g><title>void DefaultFormatter::Ser&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="101" width="0.3268%" height="15" fill="rgb(206,124,46)" fg:x="27" fg:w="1"/><text x="9.0735%" y="111.50"></text></g><g><title>void Serialize&lt;ParamsStream&lt;HashWriter&amp;, TransactionSerParams&gt;, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (1 samples, 0.33%)</title><rect x="8.8235%" y="85" width="0.3268%" height="15" fill="rgb(249,21,11)" fg:x="27" fg:w="1"/><text x="9.0735%" y="95.50"></text></g><g><title>sha256_x86_shani::Transform (1 samples, 0.33%)</title><rect x="8.8235%" y="69" width="0.3268%" height="15" fill="rgb(222,201,40)" fg:x="27" fg:w="1"/><text x="9.0735%" y="79.50"></text></g><g><title>ShiftMessageC (1 samples, 0.33%)</title><rect x="8.8235%" y="53" width="0.3268%" height="15" fill="rgb(235,61,29)" fg:x="27" fg:w="1"/><text x="9.0735%" y="63.50"></text></g><g><title>_mm_add_epi32 (1 samples, 0.33%)</title><rect x="8.8235%" y="37" width="0.3268%" height="15" fill="rgb(219,207,3)" fg:x="27" fg:w="1"/><text x="9.0735%" y="47.50"></text></g><g><title>IsBlockMutated (1 samples, 0.33%)</title><rect x="9.1503%" y="693" width="0.3268%" height="15" fill="rgb(222,56,46)" fg:x="28" fg:w="1"/><text x="9.4003%" y="703.50"></text></g><g><title>CheckMerkleRoot (1 samples, 0.33%)</title><rect x="9.1503%" y="677" width="0.3268%" height="15" fill="rgb(239,76,54)" fg:x="28" fg:w="1"/><text x="9.4003%" y="687.50"></text></g><g><title>BlockMerkleRoot (1 samples, 0.33%)</title><rect x="9.1503%" y="661" width="0.3268%" height="15" fill="rgb(231,124,27)" fg:x="28" fg:w="1"/><text x="9.4003%" y="671.50"></text></g><g><title>IsBlockMutated (1 samples, 0.33%)</title><rect x="9.1503%" y="645" width="0.3268%" height="15" fill="rgb(249,195,6)" fg:x="28" fg:w="1"/><text x="9.4003%" y="655.50"></text></g><g><title>BlockValidationState::BlockValidationState (1 samples, 0.33%)</title><rect x="9.1503%" y="629" width="0.3268%" height="15" fill="rgb(237,174,47)" fg:x="28" fg:w="1"/><text x="9.4003%" y="639.50"></text></g><g><title>ValidationState&lt;BlockValidationResult&gt;::ValidationState (1 samples, 0.33%)</title><rect x="9.1503%" y="613" width="0.3268%" height="15" fill="rgb(206,201,31)" fg:x="28" fg:w="1"/><text x="9.4003%" y="623.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.33%)</title><rect x="9.1503%" y="597" width="0.3268%" height="15" fill="rgb(231,57,52)" fg:x="28" fg:w="1"/><text x="9.4003%" y="607.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.33%)</title><rect x="9.1503%" y="581" width="0.3268%" height="15" fill="rgb(248,177,22)" fg:x="28" fg:w="1"/><text x="9.4003%" y="591.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.33%)</title><rect x="9.1503%" y="565" width="0.3268%" height="15" fill="rgb(215,211,37)" fg:x="28" fg:w="1"/><text x="9.4003%" y="575.50"></text></g><g><title>__clone (19 samples, 6.21%)</title><rect x="3.5948%" y="869" width="6.2092%" height="15" fill="rgb(241,128,51)" fg:x="11" fg:w="19"/><text x="3.8448%" y="879.50">__clone</text></g><g><title>start_thread (19 samples, 6.21%)</title><rect x="3.5948%" y="853" width="6.2092%" height="15" fill="rgb(227,165,31)" fg:x="11" fg:w="19"/><text x="3.8448%" y="863.50">start_th..</text></g><g><title>execute_native_thread_routine (19 samples, 6.21%)</title><rect x="3.5948%" y="837" width="6.2092%" height="15" fill="rgb(228,167,24)" fg:x="11" fg:w="19"/><text x="3.8448%" y="847.50">execute_..</text></g><g><title>_M_run (19 samples, 6.21%)</title><rect x="3.5948%" y="821" width="6.2092%" height="15" fill="rgb(228,143,12)" fg:x="11" fg:w="19"/><text x="3.8448%" y="831.50">_M_run</text></g><g><title>operator (19 samples, 6.21%)</title><rect x="3.5948%" y="805" width="6.2092%" height="15" fill="rgb(249,149,8)" fg:x="11" fg:w="19"/><text x="3.8448%" y="815.50">operator</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (19 samples, 6.21%)</title><rect x="3.5948%" y="789" width="6.2092%" height="15" fill="rgb(243,35,44)" fg:x="11" fg:w="19"/><text x="3.8448%" y="799.50">_M_invok..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (19 samples, 6.21%)</title><rect x="3.5948%" y="773" width="6.2092%" height="15" fill="rgb(246,89,9)" fg:x="11" fg:w="19"/><text x="3.8448%" y="783.50">__invoke..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#5}&gt; &gt; &gt;::_M_run (19 samples, 6.21%)</title><rect x="3.5948%" y="757" width="6.2092%" height="15" fill="rgb(233,213,13)" fg:x="11" fg:w="19"/><text x="3.8448%" y="767.50">std::thr..</text></g><g><title>util::TraceThread (19 samples, 6.21%)</title><rect x="3.5948%" y="741" width="6.2092%" height="15" fill="rgb(233,141,41)" fg:x="11" fg:w="19"/><text x="3.8448%" y="751.50">util::Tr..</text></g><g><title>std::function&lt;void ()&gt;::operator (19 samples, 6.21%)</title><rect x="3.5948%" y="725" width="6.2092%" height="15" fill="rgb(239,167,4)" fg:x="11" fg:w="19"/><text x="3.8448%" y="735.50">std::fun..</text></g><g><title>CConnman::ThreadMessageHandler (19 samples, 6.21%)</title><rect x="3.5948%" y="709" width="6.2092%" height="15" fill="rgb(209,217,16)" fg:x="11" fg:w="19"/><text x="3.8448%" y="719.50">CConnman..</text></g><g><title>ProcessHeadersMessage (1 samples, 0.33%)</title><rect x="9.4771%" y="693" width="0.3268%" height="15" fill="rgb(219,88,35)" fg:x="29" fg:w="1"/><text x="9.7271%" y="703.50"></text></g><g><title>CalculateClaimedHeadersWork (1 samples, 0.33%)</title><rect x="9.4771%" y="677" width="0.3268%" height="15" fill="rgb(220,193,23)" fg:x="29" fg:w="1"/><text x="9.7271%" y="687.50"></text></g><g><title>GetBlockProof (1 samples, 0.33%)</title><rect x="9.4771%" y="661" width="0.3268%" height="15" fill="rgb(230,90,52)" fg:x="29" fg:w="1"/><text x="9.7271%" y="671.50"></text></g><g><title>operator/ (1 samples, 0.33%)</title><rect x="9.4771%" y="645" width="0.3268%" height="15" fill="rgb(252,106,19)" fg:x="29" fg:w="1"/><text x="9.7271%" y="655.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.33%)</title><rect x="9.4771%" y="629" width="0.3268%" height="15" fill="rgb(206,74,20)" fg:x="29" fg:w="1"/><text x="9.7271%" y="639.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.33%)</title><rect x="9.8039%" y="869" width="0.3268%" height="15" fill="rgb(230,138,44)" fg:x="30" fg:w="1"/><text x="10.0539%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.33%)</title><rect x="10.1307%" y="869" width="0.3268%" height="15" fill="rgb(235,182,43)" fg:x="31" fg:w="1"/><text x="10.3807%" y="879.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.33%)</title><rect x="10.1307%" y="853" width="0.3268%" height="15" fill="rgb(242,16,51)" fg:x="31" fg:w="1"/><text x="10.3807%" y="863.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.33%)</title><rect x="10.1307%" y="837" width="0.3268%" height="15" fill="rgb(248,9,4)" fg:x="31" fg:w="1"/><text x="10.3807%" y="847.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.33%)</title><rect x="10.1307%" y="821" width="0.3268%" height="15" fill="rgb(210,31,22)" fg:x="31" fg:w="1"/><text x="10.3807%" y="831.50"></text></g><g><title>b-msghand (29 samples, 9.48%)</title><rect x="1.3072%" y="885" width="9.4771%" height="15" fill="rgb(239,54,39)" fg:x="4" fg:w="29"/><text x="1.5572%" y="895.50">b-msghand</text></g><g><title>tinyformat::detail::parseWidthOrPrecision (1 samples, 0.33%)</title><rect x="10.4575%" y="869" width="0.3268%" height="15" fill="rgb(230,99,41)" fg:x="32" fg:w="1"/><text x="10.7075%" y="879.50"></text></g><g><title>ChaCha20Aligned::Crypt (1 samples, 0.33%)</title><rect x="10.7843%" y="741" width="0.3268%" height="15" fill="rgb(253,106,12)" fg:x="33" fg:w="1"/><text x="11.0343%" y="751.50"></text></g><g><title>V2Transport::ReceivedBytes (5 samples, 1.63%)</title><rect x="10.7843%" y="837" width="1.6340%" height="15" fill="rgb(213,46,41)" fg:x="33" fg:w="5"/><text x="11.0343%" y="847.50"></text></g><g><title>V2Transport::ProcessReceivedPacketBytes (5 samples, 1.63%)</title><rect x="10.7843%" y="821" width="1.6340%" height="15" fill="rgb(215,133,35)" fg:x="33" fg:w="5"/><text x="11.0343%" y="831.50"></text></g><g><title>BIP324Cipher::Decrypt (5 samples, 1.63%)</title><rect x="10.7843%" y="805" width="1.6340%" height="15" fill="rgb(213,28,5)" fg:x="33" fg:w="5"/><text x="11.0343%" y="815.50"></text></g><g><title>FSChaCha20Poly1305::Decrypt (5 samples, 1.63%)</title><rect x="10.7843%" y="789" width="1.6340%" height="15" fill="rgb(215,77,49)" fg:x="33" fg:w="5"/><text x="11.0343%" y="799.50"></text></g><g><title>AEADChaCha20Poly1305::Decrypt (5 samples, 1.63%)</title><rect x="10.7843%" y="773" width="1.6340%" height="15" fill="rgb(248,100,22)" fg:x="33" fg:w="5"/><text x="11.0343%" y="783.50"></text></g><g><title>ChaCha20::Crypt (5 samples, 1.63%)</title><rect x="10.7843%" y="757" width="1.6340%" height="15" fill="rgb(208,67,9)" fg:x="33" fg:w="5"/><text x="11.0343%" y="767.50"></text></g><g><title>ChaCha20Aligned::Keystream (4 samples, 1.31%)</title><rect x="11.1111%" y="741" width="1.3072%" height="15" fill="rgb(219,133,21)" fg:x="34" fg:w="4"/><text x="11.3611%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="725" width="0.9804%" height="15" fill="rgb(246,46,29)" fg:x="35" fg:w="3"/><text x="11.6879%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="709" width="0.9804%" height="15" fill="rgb(246,185,52)" fg:x="35" fg:w="3"/><text x="11.6879%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="693" width="0.9804%" height="15" fill="rgb(252,136,11)" fg:x="35" fg:w="3"/><text x="11.6879%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="677" width="0.9804%" height="15" fill="rgb(219,138,53)" fg:x="35" fg:w="3"/><text x="11.6879%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="661" width="0.9804%" height="15" fill="rgb(211,51,23)" fg:x="35" fg:w="3"/><text x="11.6879%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="645" width="0.9804%" height="15" fill="rgb(247,221,28)" fg:x="35" fg:w="3"/><text x="11.6879%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="629" width="0.9804%" height="15" fill="rgb(251,222,45)" fg:x="35" fg:w="3"/><text x="11.6879%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="613" width="0.9804%" height="15" fill="rgb(217,162,53)" fg:x="35" fg:w="3"/><text x="11.6879%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="597" width="0.9804%" height="15" fill="rgb(229,93,14)" fg:x="35" fg:w="3"/><text x="11.6879%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="581" width="0.9804%" height="15" fill="rgb(209,67,49)" fg:x="35" fg:w="3"/><text x="11.6879%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="11.4379%" y="565" width="0.9804%" height="15" fill="rgb(213,87,29)" fg:x="35" fg:w="3"/><text x="11.6879%" y="575.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find (4 samples, 1.31%)</title><rect x="12.4183%" y="837" width="1.3072%" height="15" fill="rgb(205,151,52)" fg:x="38" fg:w="4"/><text x="12.6683%" y="847.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find (4 samples, 1.31%)</title><rect x="12.4183%" y="821" width="1.3072%" height="15" fill="rgb(253,215,39)" fg:x="38" fg:w="4"/><text x="12.6683%" y="831.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_lower_bound (4 samples, 1.31%)</title><rect x="12.4183%" y="805" width="1.3072%" height="15" fill="rgb(221,220,41)" fg:x="38" fg:w="4"/><text x="12.6683%" y="815.50"></text></g><g><title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (4 samples, 1.31%)</title><rect x="12.4183%" y="789" width="1.3072%" height="15" fill="rgb(218,133,21)" fg:x="38" fg:w="4"/><text x="12.6683%" y="799.50"></text></g><g><title>decltype  (4 samples, 1.31%)</title><rect x="12.4183%" y="773" width="1.3072%" height="15" fill="rgb(221,193,43)" fg:x="38" fg:w="4"/><text x="12.6683%" y="783.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (4 samples, 1.31%)</title><rect x="12.4183%" y="757" width="1.3072%" height="15" fill="rgb(240,128,52)" fg:x="38" fg:w="4"/><text x="12.6683%" y="767.50"></text></g><g><title>std::char_traits&lt;char&gt;::compare (4 samples, 1.31%)</title><rect x="12.4183%" y="741" width="1.3072%" height="15" fill="rgb(253,114,12)" fg:x="38" fg:w="4"/><text x="12.6683%" y="751.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 1.31%)</title><rect x="12.4183%" y="725" width="1.3072%" height="15" fill="rgb(215,223,47)" fg:x="38" fg:w="4"/><text x="12.6683%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="12.4183%" y="709" width="1.3072%" height="15" fill="rgb(248,225,23)" fg:x="38" fg:w="4"/><text x="12.6683%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="693" width="0.9804%" height="15" fill="rgb(250,108,0)" fg:x="39" fg:w="3"/><text x="12.9951%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="677" width="0.9804%" height="15" fill="rgb(228,208,7)" fg:x="39" fg:w="3"/><text x="12.9951%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="661" width="0.9804%" height="15" fill="rgb(244,45,10)" fg:x="39" fg:w="3"/><text x="12.9951%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="645" width="0.9804%" height="15" fill="rgb(207,125,25)" fg:x="39" fg:w="3"/><text x="12.9951%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="629" width="0.9804%" height="15" fill="rgb(210,195,18)" fg:x="39" fg:w="3"/><text x="12.9951%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="613" width="0.9804%" height="15" fill="rgb(249,80,12)" fg:x="39" fg:w="3"/><text x="12.9951%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="597" width="0.9804%" height="15" fill="rgb(221,65,9)" fg:x="39" fg:w="3"/><text x="12.9951%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="581" width="0.9804%" height="15" fill="rgb(235,49,36)" fg:x="39" fg:w="3"/><text x="12.9951%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="565" width="0.9804%" height="15" fill="rgb(225,32,20)" fg:x="39" fg:w="3"/><text x="12.9951%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="549" width="0.9804%" height="15" fill="rgb(215,141,46)" fg:x="39" fg:w="3"/><text x="12.9951%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="533" width="0.9804%" height="15" fill="rgb(250,160,47)" fg:x="39" fg:w="3"/><text x="12.9951%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="12.7451%" y="517" width="0.9804%" height="15" fill="rgb(216,222,40)" fg:x="39" fg:w="3"/><text x="12.9951%" y="527.50"></text></g><g><title>CConnman::SocketHandlerConnected (10 samples, 3.27%)</title><rect x="10.7843%" y="869" width="3.2680%" height="15" fill="rgb(234,217,39)" fg:x="33" fg:w="10"/><text x="11.0343%" y="879.50">CCo..</text></g><g><title>CNode::ReceiveMsgBytes (10 samples, 3.27%)</title><rect x="10.7843%" y="853" width="3.2680%" height="15" fill="rgb(207,178,40)" fg:x="33" fg:w="10"/><text x="11.0343%" y="863.50">CNo..</text></g><g><title>std::vector&lt;std::byte, zero_after_free_allocator&lt;std::byte&gt; &gt;::_M_fill_insert (1 samples, 0.33%)</title><rect x="13.7255%" y="837" width="0.3268%" height="15" fill="rgb(221,136,13)" fg:x="42" fg:w="1"/><text x="13.9755%" y="847.50"></text></g><g><title>[anon] (1 samples, 0.33%)</title><rect x="14.0523%" y="869" width="0.3268%" height="15" fill="rgb(249,199,10)" fg:x="43" fg:w="1"/><text x="14.3023%" y="879.50"></text></g><g><title>_int_malloc (1 samples, 0.33%)</title><rect x="14.0523%" y="853" width="0.3268%" height="15" fill="rgb(249,222,13)" fg:x="43" fg:w="1"/><text x="14.3023%" y="863.50"></text></g><g><title>b-net (20 samples, 6.54%)</title><rect x="10.7843%" y="885" width="6.5359%" height="15" fill="rgb(244,185,38)" fg:x="33" fg:w="20"/><text x="11.0343%" y="895.50">b-net</text></g><g><title>__clone (9 samples, 2.94%)</title><rect x="14.3791%" y="869" width="2.9412%" height="15" fill="rgb(236,202,9)" fg:x="44" fg:w="9"/><text x="14.6291%" y="879.50">__..</text></g><g><title>start_thread (9 samples, 2.94%)</title><rect x="14.3791%" y="853" width="2.9412%" height="15" fill="rgb(250,229,37)" fg:x="44" fg:w="9"/><text x="14.6291%" y="863.50">st..</text></g><g><title>execute_native_thread_routine (9 samples, 2.94%)</title><rect x="14.3791%" y="837" width="2.9412%" height="15" fill="rgb(206,174,23)" fg:x="44" fg:w="9"/><text x="14.6291%" y="847.50">ex..</text></g><g><title>_M_run (9 samples, 2.94%)</title><rect x="14.3791%" y="821" width="2.9412%" height="15" fill="rgb(211,33,43)" fg:x="44" fg:w="9"/><text x="14.6291%" y="831.50">_M..</text></g><g><title>operator (9 samples, 2.94%)</title><rect x="14.3791%" y="805" width="2.9412%" height="15" fill="rgb(245,58,50)" fg:x="44" fg:w="9"/><text x="14.6291%" y="815.50">op..</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (9 samples, 2.94%)</title><rect x="14.3791%" y="789" width="2.9412%" height="15" fill="rgb(244,68,36)" fg:x="44" fg:w="9"/><text x="14.6291%" y="799.50">_M..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, CConnman::Start(CScheduler&amp;, const Options&amp;)::&lt;lambda()&gt; &gt; (9 samples, 2.94%)</title><rect x="14.3791%" y="773" width="2.9412%" height="15" fill="rgb(232,229,15)" fg:x="44" fg:w="9"/><text x="14.6291%" y="783.50">__..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, CConnman::Start(CScheduler&amp;, CConnman::Options const&amp;)::{lambda()#1}&gt; &gt; &gt;::_M_run (9 samples, 2.94%)</title><rect x="14.3791%" y="757" width="2.9412%" height="15" fill="rgb(254,30,23)" fg:x="44" fg:w="9"/><text x="14.6291%" y="767.50">st..</text></g><g><title>util::TraceThread (9 samples, 2.94%)</title><rect x="14.3791%" y="741" width="2.9412%" height="15" fill="rgb(235,160,14)" fg:x="44" fg:w="9"/><text x="14.6291%" y="751.50">ut..</text></g><g><title>std::function&lt;void ()&gt;::operator (9 samples, 2.94%)</title><rect x="14.3791%" y="725" width="2.9412%" height="15" fill="rgb(212,155,44)" fg:x="44" fg:w="9"/><text x="14.6291%" y="735.50">st..</text></g><g><title>CConnman::ThreadSocketHandler (9 samples, 2.94%)</title><rect x="14.3791%" y="709" width="2.9412%" height="15" fill="rgb(226,2,50)" fg:x="44" fg:w="9"/><text x="14.6291%" y="719.50">CC..</text></g><g><title>CConnman::SocketHandler (9 samples, 2.94%)</title><rect x="14.3791%" y="693" width="2.9412%" height="15" fill="rgb(234,177,6)" fg:x="44" fg:w="9"/><text x="14.6291%" y="703.50">CC..</text></g><g><title>Sock::WaitMany (9 samples, 2.94%)</title><rect x="14.3791%" y="677" width="2.9412%" height="15" fill="rgb(217,24,9)" fg:x="44" fg:w="9"/><text x="14.6291%" y="687.50">So..</text></g><g><title>Sock::WaitMany (9 samples, 2.94%)</title><rect x="14.3791%" y="661" width="2.9412%" height="15" fill="rgb(220,13,46)" fg:x="44" fg:w="9"/><text x="14.6291%" y="671.50">So..</text></g><g><title>__poll (9 samples, 2.94%)</title><rect x="14.3791%" y="645" width="2.9412%" height="15" fill="rgb(239,221,27)" fg:x="44" fg:w="9"/><text x="14.6291%" y="655.50">__..</text></g><g><title>[unknown] (9 samples, 2.94%)</title><rect x="14.3791%" y="629" width="2.9412%" height="15" fill="rgb(222,198,25)" fg:x="44" fg:w="9"/><text x="14.6291%" y="639.50">[u..</text></g><g><title>[unknown] (9 samples, 2.94%)</title><rect x="14.3791%" y="613" width="2.9412%" height="15" fill="rgb(211,99,13)" fg:x="44" fg:w="9"/><text x="14.6291%" y="623.50">[u..</text></g><g><title>[unknown] (9 samples, 2.94%)</title><rect x="14.3791%" y="597" width="2.9412%" height="15" fill="rgb(232,111,31)" fg:x="44" fg:w="9"/><text x="14.6291%" y="607.50">[u..</text></g><g><title>[unknown] (9 samples, 2.94%)</title><rect x="14.3791%" y="581" width="2.9412%" height="15" fill="rgb(245,82,37)" fg:x="44" fg:w="9"/><text x="14.6291%" y="591.50">[u..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="15.0327%" y="565" width="2.2876%" height="15" fill="rgb(227,149,46)" fg:x="46" fg:w="7"/><text x="15.2827%" y="575.50">[..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="15.0327%" y="549" width="2.2876%" height="15" fill="rgb(218,36,50)" fg:x="46" fg:w="7"/><text x="15.2827%" y="559.50">[..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="15.0327%" y="533" width="2.2876%" height="15" fill="rgb(226,80,48)" fg:x="46" fg:w="7"/><text x="15.2827%" y="543.50">[..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="15.0327%" y="517" width="2.2876%" height="15" fill="rgb(238,224,15)" fg:x="46" fg:w="7"/><text x="15.2827%" y="527.50">[..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="15.0327%" y="501" width="2.2876%" height="15" fill="rgb(241,136,10)" fg:x="46" fg:w="7"/><text x="15.2827%" y="511.50">[..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="15.0327%" y="485" width="2.2876%" height="15" fill="rgb(208,32,45)" fg:x="46" fg:w="7"/><text x="15.2827%" y="495.50">[..</text></g><g><title>[unknown] (6 samples, 1.96%)</title><rect x="15.3595%" y="469" width="1.9608%" height="15" fill="rgb(207,135,9)" fg:x="47" fg:w="6"/><text x="15.6095%" y="479.50">[..</text></g><g><title>[unknown] (6 samples, 1.96%)</title><rect x="15.3595%" y="453" width="1.9608%" height="15" fill="rgb(206,86,44)" fg:x="47" fg:w="6"/><text x="15.6095%" y="463.50">[..</text></g><g><title>[unknown] (6 samples, 1.96%)</title><rect x="15.3595%" y="437" width="1.9608%" height="15" fill="rgb(245,177,15)" fg:x="47" fg:w="6"/><text x="15.6095%" y="447.50">[..</text></g><g><title>[unknown] (6 samples, 1.96%)</title><rect x="15.3595%" y="421" width="1.9608%" height="15" fill="rgb(206,64,50)" fg:x="47" fg:w="6"/><text x="15.6095%" y="431.50">[..</text></g><g><title>[unknown] (6 samples, 1.96%)</title><rect x="15.3595%" y="405" width="1.9608%" height="15" fill="rgb(234,36,40)" fg:x="47" fg:w="6"/><text x="15.6095%" y="415.50">[..</text></g><g><title>std::cv_status std::condition_variable::wait_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (5 samples, 1.63%)</title><rect x="17.3203%" y="693" width="1.6340%" height="15" fill="rgb(213,64,8)" fg:x="53" fg:w="5"/><text x="17.5703%" y="703.50"></text></g><g><title>std::cv_status std::condition_variable::__wait_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (5 samples, 1.63%)</title><rect x="17.3203%" y="677" width="1.6340%" height="15" fill="rgb(210,75,36)" fg:x="53" fg:w="5"/><text x="17.5703%" y="687.50"></text></g><g><title>std::__condvar::wait_until (5 samples, 1.63%)</title><rect x="17.3203%" y="661" width="1.6340%" height="15" fill="rgb(229,88,21)" fg:x="53" fg:w="5"/><text x="17.5703%" y="671.50"></text></g><g><title>pthread_cond_clockwait@@GLIBC_2.34 (5 samples, 1.63%)</title><rect x="17.3203%" y="645" width="1.6340%" height="15" fill="rgb(252,204,47)" fg:x="53" fg:w="5"/><text x="17.5703%" y="655.50"></text></g><g><title>__futex_abstimed_wait_common (5 samples, 1.63%)</title><rect x="17.3203%" y="629" width="1.6340%" height="15" fill="rgb(208,77,27)" fg:x="53" fg:w="5"/><text x="17.5703%" y="639.50"></text></g><g><title>[unknown] (5 samples, 1.63%)</title><rect x="17.3203%" y="613" width="1.6340%" height="15" fill="rgb(221,76,26)" fg:x="53" fg:w="5"/><text x="17.5703%" y="623.50"></text></g><g><title>[unknown] (5 samples, 1.63%)</title><rect x="17.3203%" y="597" width="1.6340%" height="15" fill="rgb(225,139,18)" fg:x="53" fg:w="5"/><text x="17.5703%" y="607.50"></text></g><g><title>[unknown] (5 samples, 1.63%)</title><rect x="17.3203%" y="581" width="1.6340%" height="15" fill="rgb(230,137,11)" fg:x="53" fg:w="5"/><text x="17.5703%" y="591.50"></text></g><g><title>[unknown] (5 samples, 1.63%)</title><rect x="17.3203%" y="565" width="1.6340%" height="15" fill="rgb(212,28,1)" fg:x="53" fg:w="5"/><text x="17.5703%" y="575.50"></text></g><g><title>[unknown] (5 samples, 1.63%)</title><rect x="17.3203%" y="549" width="1.6340%" height="15" fill="rgb(248,164,17)" fg:x="53" fg:w="5"/><text x="17.5703%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="17.6471%" y="533" width="1.3072%" height="15" fill="rgb(222,171,42)" fg:x="54" fg:w="4"/><text x="17.8971%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="17.6471%" y="517" width="1.3072%" height="15" fill="rgb(243,84,45)" fg:x="54" fg:w="4"/><text x="17.8971%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="17.6471%" y="501" width="1.3072%" height="15" fill="rgb(252,49,23)" fg:x="54" fg:w="4"/><text x="17.8971%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="17.6471%" y="485" width="1.3072%" height="15" fill="rgb(215,19,7)" fg:x="54" fg:w="4"/><text x="17.8971%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="17.6471%" y="469" width="1.3072%" height="15" fill="rgb(238,81,41)" fg:x="54" fg:w="4"/><text x="17.8971%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="17.9739%" y="453" width="0.9804%" height="15" fill="rgb(210,199,37)" fg:x="55" fg:w="3"/><text x="18.2239%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="17.9739%" y="437" width="0.9804%" height="15" fill="rgb(244,192,49)" fg:x="55" fg:w="3"/><text x="18.2239%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="17.9739%" y="421" width="0.9804%" height="15" fill="rgb(226,211,11)" fg:x="55" fg:w="3"/><text x="18.2239%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="17.9739%" y="405" width="0.9804%" height="15" fill="rgb(236,162,54)" fg:x="55" fg:w="3"/><text x="18.2239%" y="415.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (2 samples, 0.65%)</title><rect x="18.9542%" y="629" width="0.6536%" height="15" fill="rgb(220,229,9)" fg:x="58" fg:w="2"/><text x="19.2042%" y="639.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;&amp;&gt; (2 samples, 0.65%)</title><rect x="18.9542%" y="613" width="0.6536%" height="15" fill="rgb(250,87,22)" fg:x="58" fg:w="2"/><text x="19.2042%" y="623.50"></text></g><g><title>operator (2 samples, 0.65%)</title><rect x="18.9542%" y="597" width="0.6536%" height="15" fill="rgb(239,43,17)" fg:x="58" fg:w="2"/><text x="19.2042%" y="607.50"></text></g><g><title>operator (2 samples, 0.65%)</title><rect x="18.9542%" y="581" width="0.6536%" height="15" fill="rgb(231,177,25)" fg:x="58" fg:w="2"/><text x="19.2042%" y="591.50"></text></g><g><title>Iterate&lt;ValidationSignals::BlockConnected(ChainstateRole, const std::shared_ptr&lt;const CBlock&gt;&amp;, const CBlockIndex*)::&lt;lambda()&gt;::&lt;lambda(CValidationInterface&amp;)&gt; &gt; (2 samples, 0.65%)</title><rect x="18.9542%" y="565" width="0.6536%" height="15" fill="rgb(219,179,1)" fg:x="58" fg:w="2"/><text x="19.2042%" y="575.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::BlockConnected(ChainstateRole, std::shared_ptr&lt;CBlock const&gt; const&amp;, CBlockIndex const*)::{lambda()#2}&gt;::_M_invoke (2 samples, 0.65%)</title><rect x="18.9542%" y="549" width="0.6536%" height="15" fill="rgb(238,219,53)" fg:x="58" fg:w="2"/><text x="19.2042%" y="559.50"></text></g><g><title>node::TxDownloadManagerImpl::BlockConnected (2 samples, 0.65%)</title><rect x="18.9542%" y="533" width="0.6536%" height="15" fill="rgb(232,167,36)" fg:x="58" fg:w="2"/><text x="19.2042%" y="543.50"></text></g><g><title>node::TxDownloadManagerImpl::RecentConfirmedTransactionsFilter (1 samples, 0.33%)</title><rect x="19.2810%" y="517" width="0.3268%" height="15" fill="rgb(244,19,51)" fg:x="59" fg:w="1"/><text x="19.5310%" y="527.50"></text></g><g><title>std::__detail::_MakeUniq&lt;CRollingBloomFilter&gt;::__single_object std::make_unique&lt;CRollingBloomFilter, int, double&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="501" width="0.3268%" height="15" fill="rgb(224,6,22)" fg:x="59" fg:w="1"/><text x="19.5310%" y="511.50"></text></g><g><title>CRollingBloomFilter::CRollingBloomFilter (1 samples, 0.33%)</title><rect x="19.2810%" y="485" width="0.3268%" height="15" fill="rgb(224,145,5)" fg:x="59" fg:w="1"/><text x="19.5310%" y="495.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.33%)</title><rect x="19.2810%" y="469" width="0.3268%" height="15" fill="rgb(234,130,49)" fg:x="59" fg:w="1"/><text x="19.5310%" y="479.50"></text></g><g><title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.33%)</title><rect x="19.2810%" y="453" width="0.3268%" height="15" fill="rgb(254,6,2)" fg:x="59" fg:w="1"/><text x="19.5310%" y="463.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="437" width="0.3268%" height="15" fill="rgb(208,96,46)" fg:x="59" fg:w="1"/><text x="19.5310%" y="447.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="421" width="0.3268%" height="15" fill="rgb(239,3,39)" fg:x="59" fg:w="1"/><text x="19.5310%" y="431.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="405" width="0.3268%" height="15" fill="rgb(233,210,1)" fg:x="59" fg:w="1"/><text x="19.5310%" y="415.50"></text></g><g><title>unsigned long* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="389" width="0.3268%" height="15" fill="rgb(244,137,37)" fg:x="59" fg:w="1"/><text x="19.5310%" y="399.50"></text></g><g><title>unsigned long* std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="373" width="0.3268%" height="15" fill="rgb(240,136,2)" fg:x="59" fg:w="1"/><text x="19.5310%" y="383.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="357" width="0.3268%" height="15" fill="rgb(239,18,37)" fg:x="59" fg:w="1"/><text x="19.5310%" y="367.50"></text></g><g><title>unsigned long* std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="341" width="0.3268%" height="15" fill="rgb(218,185,22)" fg:x="59" fg:w="1"/><text x="19.5310%" y="351.50"></text></g><g><title>void std::__fill_a&lt;unsigned long*, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="325" width="0.3268%" height="15" fill="rgb(225,218,4)" fg:x="59" fg:w="1"/><text x="19.5310%" y="335.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;unsigned long&gt;::__value, void&gt;::__type std::__fill_a1&lt;unsigned long*, unsigned long&gt; (1 samples, 0.33%)</title><rect x="19.2810%" y="309" width="0.3268%" height="15" fill="rgb(230,182,32)" fg:x="59" fg:w="1"/><text x="19.5310%" y="319.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.33%)</title><rect x="19.2810%" y="293" width="0.3268%" height="15" fill="rgb(242,56,43)" fg:x="59" fg:w="1"/><text x="19.5310%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="19.2810%" y="277" width="0.3268%" height="15" fill="rgb(233,99,24)" fg:x="59" fg:w="1"/><text x="19.5310%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="19.2810%" y="261" width="0.3268%" height="15" fill="rgb(234,209,42)" fg:x="59" fg:w="1"/><text x="19.5310%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="19.2810%" y="245" width="0.3268%" height="15" fill="rgb(227,7,12)" fg:x="59" fg:w="1"/><text x="19.5310%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="19.2810%" y="229" width="0.3268%" height="15" fill="rgb(245,203,43)" fg:x="59" fg:w="1"/><text x="19.5310%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="19.2810%" y="213" width="0.3268%" height="15" fill="rgb(238,205,33)" fg:x="59" fg:w="1"/><text x="19.5310%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="19.2810%" y="197" width="0.3268%" height="15" fill="rgb(231,56,7)" fg:x="59" fg:w="1"/><text x="19.5310%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="19.2810%" y="181" width="0.3268%" height="15" fill="rgb(244,186,29)" fg:x="59" fg:w="1"/><text x="19.5310%" y="191.50"></text></g><g><title>b-scheduler (8 samples, 2.61%)</title><rect x="17.3203%" y="885" width="2.6144%" height="15" fill="rgb(234,111,31)" fg:x="53" fg:w="8"/><text x="17.5703%" y="895.50">b-..</text></g><g><title>__clone (8 samples, 2.61%)</title><rect x="17.3203%" y="869" width="2.6144%" height="15" fill="rgb(241,149,10)" fg:x="53" fg:w="8"/><text x="17.5703%" y="879.50">__..</text></g><g><title>start_thread (8 samples, 2.61%)</title><rect x="17.3203%" y="853" width="2.6144%" height="15" fill="rgb(249,206,44)" fg:x="53" fg:w="8"/><text x="17.5703%" y="863.50">st..</text></g><g><title>execute_native_thread_routine (8 samples, 2.61%)</title><rect x="17.3203%" y="837" width="2.6144%" height="15" fill="rgb(251,153,30)" fg:x="53" fg:w="8"/><text x="17.5703%" y="847.50">ex..</text></g><g><title>_M_run (8 samples, 2.61%)</title><rect x="17.3203%" y="821" width="2.6144%" height="15" fill="rgb(239,152,38)" fg:x="53" fg:w="8"/><text x="17.5703%" y="831.50">_M..</text></g><g><title>operator (8 samples, 2.61%)</title><rect x="17.3203%" y="805" width="2.6144%" height="15" fill="rgb(249,139,47)" fg:x="53" fg:w="8"/><text x="17.5703%" y="815.50">op..</text></g><g><title>_M_invoke&lt;0, 1, 2&gt; (8 samples, 2.61%)</title><rect x="17.3203%" y="789" width="2.6144%" height="15" fill="rgb(244,64,35)" fg:x="53" fg:w="8"/><text x="17.5703%" y="799.50">_M..</text></g><g><title>__invoke&lt;void (*)(std::basic_string_view&lt;char&gt;, std::function&lt;void()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::&lt;lambda()&gt; &gt; (8 samples, 2.61%)</title><rect x="17.3203%" y="773" width="2.6144%" height="15" fill="rgb(216,46,15)" fg:x="53" fg:w="8"/><text x="17.5703%" y="783.50">__..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::function&lt;void ()&gt;), char const*, AppInitMain(node::NodeContext&amp;, interfaces::BlockAndHeaderTipInfo*)::{lambda()#1}&gt; &gt; &gt;::_M_run (8 samples, 2.61%)</title><rect x="17.3203%" y="757" width="2.6144%" height="15" fill="rgb(250,74,19)" fg:x="53" fg:w="8"/><text x="17.5703%" y="767.50">st..</text></g><g><title>util::TraceThread (8 samples, 2.61%)</title><rect x="17.3203%" y="741" width="2.6144%" height="15" fill="rgb(249,42,33)" fg:x="53" fg:w="8"/><text x="17.5703%" y="751.50">ut..</text></g><g><title>std::function&lt;void ()&gt;::operator (8 samples, 2.61%)</title><rect x="17.3203%" y="725" width="2.6144%" height="15" fill="rgb(242,149,17)" fg:x="53" fg:w="8"/><text x="17.5703%" y="735.50">st..</text></g><g><title>CScheduler::serviceQueue (8 samples, 2.61%)</title><rect x="17.3203%" y="709" width="2.6144%" height="15" fill="rgb(244,29,21)" fg:x="53" fg:w="8"/><text x="17.5703%" y="719.50">CS..</text></g><g><title>std::function&lt;void ()&gt;::operator (3 samples, 0.98%)</title><rect x="18.9542%" y="693" width="0.9804%" height="15" fill="rgb(220,130,37)" fg:x="58" fg:w="3"/><text x="19.2042%" y="703.50"></text></g><g><title>SerialTaskRunner::ProcessQueue (3 samples, 0.98%)</title><rect x="18.9542%" y="677" width="0.9804%" height="15" fill="rgb(211,67,2)" fg:x="58" fg:w="3"/><text x="19.2042%" y="687.50"></text></g><g><title>std::function&lt;void ()&gt;::operator (3 samples, 0.98%)</title><rect x="18.9542%" y="661" width="0.9804%" height="15" fill="rgb(235,68,52)" fg:x="58" fg:w="3"/><text x="19.2042%" y="671.50"></text></g><g><title>_M_invoke (3 samples, 0.98%)</title><rect x="18.9542%" y="645" width="0.9804%" height="15" fill="rgb(246,142,3)" fg:x="58" fg:w="3"/><text x="19.2042%" y="655.50"></text></g><g><title>__invoke_r&lt;void, ValidationSignals::UpdatedBlockTip(const CBlockIndex*, const CBlockIndex*, bool)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="19.6078%" y="629" width="0.3268%" height="15" fill="rgb(241,25,7)" fg:x="60" fg:w="1"/><text x="19.8578%" y="639.50"></text></g><g><title>__invoke_impl&lt;void, ValidationSignals::UpdatedBlockTip(const CBlockIndex*, const CBlockIndex*, bool)::&lt;lambda()&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="19.6078%" y="613" width="0.3268%" height="15" fill="rgb(242,119,39)" fg:x="60" fg:w="1"/><text x="19.8578%" y="623.50"></text></g><g><title>std::_Function_handler&lt;void (), ValidationSignals::UpdatedBlockTip(CBlockIndex const*, CBlockIndex const*, bool)::{lambda()#2}&gt;::_M_invoke (1 samples, 0.33%)</title><rect x="19.6078%" y="597" width="0.3268%" height="15" fill="rgb(241,98,45)" fg:x="60" fg:w="1"/><text x="19.8578%" y="607.50"></text></g><g><title>void LogPrintFormatInternal&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt; (1 samples, 0.33%)</title><rect x="19.6078%" y="581" width="0.3268%" height="15" fill="rgb(254,28,30)" fg:x="60" fg:w="1"/><text x="19.8578%" y="591.50"></text></g><g><title>BCLog::Logger::LogPrintStr (1 samples, 0.33%)</title><rect x="19.6078%" y="565" width="0.3268%" height="15" fill="rgb(241,142,54)" fg:x="60" fg:w="1"/><text x="19.8578%" y="575.50"></text></g><g><title>BCLog::Logger::LogPrintStr_ (1 samples, 0.33%)</title><rect x="19.6078%" y="549" width="0.3268%" height="15" fill="rgb(222,85,15)" fg:x="60" fg:w="1"/><text x="19.8578%" y="559.50"></text></g><g><title>BCLog::LogEscapeMessage[abi:cxx11] (1 samples, 0.33%)</title><rect x="19.6078%" y="533" width="0.3268%" height="15" fill="rgb(210,85,47)" fg:x="60" fg:w="1"/><text x="19.8578%" y="543.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.33%)</title><rect x="19.6078%" y="517" width="0.3268%" height="15" fill="rgb(224,206,25)" fg:x="60" fg:w="1"/><text x="19.8578%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.33%)</title><rect x="19.6078%" y="501" width="0.3268%" height="15" fill="rgb(243,201,19)" fg:x="60" fg:w="1"/><text x="19.8578%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.33%)</title><rect x="19.6078%" y="485" width="0.3268%" height="15" fill="rgb(236,59,4)" fg:x="60" fg:w="1"/><text x="19.8578%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.33%)</title><rect x="19.6078%" y="469" width="0.3268%" height="15" fill="rgb(254,179,45)" fg:x="60" fg:w="1"/><text x="19.8578%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.33%)</title><rect x="19.6078%" y="453" width="0.3268%" height="15" fill="rgb(226,14,10)" fg:x="60" fg:w="1"/><text x="19.8578%" y="463.50"></text></g><g><title>b-scriptch.10 (4 samples, 1.31%)</title><rect x="19.9346%" y="885" width="1.3072%" height="15" fill="rgb(244,27,41)" fg:x="61" fg:w="4"/><text x="20.1846%" y="895.50"></text></g><g><title>__clone (4 samples, 1.31%)</title><rect x="19.9346%" y="869" width="1.3072%" height="15" fill="rgb(235,35,32)" fg:x="61" fg:w="4"/><text x="20.1846%" y="879.50"></text></g><g><title>start_thread (4 samples, 1.31%)</title><rect x="19.9346%" y="853" width="1.3072%" height="15" fill="rgb(218,68,31)" fg:x="61" fg:w="4"/><text x="20.1846%" y="863.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.31%)</title><rect x="19.9346%" y="837" width="1.3072%" height="15" fill="rgb(207,120,37)" fg:x="61" fg:w="4"/><text x="20.1846%" y="847.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.31%)</title><rect x="19.9346%" y="821" width="1.3072%" height="15" fill="rgb(227,98,0)" fg:x="61" fg:w="4"/><text x="20.1846%" y="831.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.31%)</title><rect x="19.9346%" y="805" width="1.3072%" height="15" fill="rgb(207,7,3)" fg:x="61" fg:w="4"/><text x="20.1846%" y="815.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.31%)</title><rect x="19.9346%" y="789" width="1.3072%" height="15" fill="rgb(206,98,19)" fg:x="61" fg:w="4"/><text x="20.1846%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="773" width="1.3072%" height="15" fill="rgb(217,5,26)" fg:x="61" fg:w="4"/><text x="20.1846%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="757" width="1.3072%" height="15" fill="rgb(235,190,38)" fg:x="61" fg:w="4"/><text x="20.1846%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="741" width="1.3072%" height="15" fill="rgb(247,86,24)" fg:x="61" fg:w="4"/><text x="20.1846%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="725" width="1.3072%" height="15" fill="rgb(205,101,16)" fg:x="61" fg:w="4"/><text x="20.1846%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="709" width="1.3072%" height="15" fill="rgb(246,168,33)" fg:x="61" fg:w="4"/><text x="20.1846%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="693" width="1.3072%" height="15" fill="rgb(231,114,1)" fg:x="61" fg:w="4"/><text x="20.1846%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="677" width="1.3072%" height="15" fill="rgb(207,184,53)" fg:x="61" fg:w="4"/><text x="20.1846%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="661" width="1.3072%" height="15" fill="rgb(224,95,51)" fg:x="61" fg:w="4"/><text x="20.1846%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="645" width="1.3072%" height="15" fill="rgb(212,188,45)" fg:x="61" fg:w="4"/><text x="20.1846%" y="655.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="629" width="1.3072%" height="15" fill="rgb(223,154,38)" fg:x="61" fg:w="4"/><text x="20.1846%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="613" width="1.3072%" height="15" fill="rgb(251,22,52)" fg:x="61" fg:w="4"/><text x="20.1846%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="19.9346%" y="597" width="1.3072%" height="15" fill="rgb(229,209,22)" fg:x="61" fg:w="4"/><text x="20.1846%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="20.2614%" y="581" width="0.9804%" height="15" fill="rgb(234,138,34)" fg:x="62" fg:w="3"/><text x="20.5114%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="20.2614%" y="565" width="0.9804%" height="15" fill="rgb(212,95,11)" fg:x="62" fg:w="3"/><text x="20.5114%" y="575.50"></text></g><g><title>b-scriptch.11 (4 samples, 1.31%)</title><rect x="21.2418%" y="885" width="1.3072%" height="15" fill="rgb(240,179,47)" fg:x="65" fg:w="4"/><text x="21.4918%" y="895.50"></text></g><g><title>__clone (4 samples, 1.31%)</title><rect x="21.2418%" y="869" width="1.3072%" height="15" fill="rgb(240,163,11)" fg:x="65" fg:w="4"/><text x="21.4918%" y="879.50"></text></g><g><title>start_thread (4 samples, 1.31%)</title><rect x="21.2418%" y="853" width="1.3072%" height="15" fill="rgb(236,37,12)" fg:x="65" fg:w="4"/><text x="21.4918%" y="863.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.31%)</title><rect x="21.2418%" y="837" width="1.3072%" height="15" fill="rgb(232,164,16)" fg:x="65" fg:w="4"/><text x="21.4918%" y="847.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.31%)</title><rect x="21.2418%" y="821" width="1.3072%" height="15" fill="rgb(244,205,15)" fg:x="65" fg:w="4"/><text x="21.4918%" y="831.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.31%)</title><rect x="21.2418%" y="805" width="1.3072%" height="15" fill="rgb(223,117,47)" fg:x="65" fg:w="4"/><text x="21.4918%" y="815.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.31%)</title><rect x="21.2418%" y="789" width="1.3072%" height="15" fill="rgb(244,107,35)" fg:x="65" fg:w="4"/><text x="21.4918%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="773" width="1.3072%" height="15" fill="rgb(205,140,8)" fg:x="65" fg:w="4"/><text x="21.4918%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="757" width="1.3072%" height="15" fill="rgb(228,84,46)" fg:x="65" fg:w="4"/><text x="21.4918%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="741" width="1.3072%" height="15" fill="rgb(254,188,9)" fg:x="65" fg:w="4"/><text x="21.4918%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="725" width="1.3072%" height="15" fill="rgb(206,112,54)" fg:x="65" fg:w="4"/><text x="21.4918%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="709" width="1.3072%" height="15" fill="rgb(216,84,49)" fg:x="65" fg:w="4"/><text x="21.4918%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="693" width="1.3072%" height="15" fill="rgb(214,194,35)" fg:x="65" fg:w="4"/><text x="21.4918%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="677" width="1.3072%" height="15" fill="rgb(249,28,3)" fg:x="65" fg:w="4"/><text x="21.4918%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="661" width="1.3072%" height="15" fill="rgb(222,56,52)" fg:x="65" fg:w="4"/><text x="21.4918%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="21.2418%" y="645" width="1.3072%" height="15" fill="rgb(245,217,50)" fg:x="65" fg:w="4"/><text x="21.4918%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="629" width="0.9804%" height="15" fill="rgb(213,201,24)" fg:x="66" fg:w="3"/><text x="21.8186%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="613" width="0.9804%" height="15" fill="rgb(248,116,28)" fg:x="66" fg:w="3"/><text x="21.8186%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="597" width="0.9804%" height="15" fill="rgb(219,72,43)" fg:x="66" fg:w="3"/><text x="21.8186%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="581" width="0.9804%" height="15" fill="rgb(209,138,14)" fg:x="66" fg:w="3"/><text x="21.8186%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="565" width="0.9804%" height="15" fill="rgb(222,18,33)" fg:x="66" fg:w="3"/><text x="21.8186%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="549" width="0.9804%" height="15" fill="rgb(213,199,7)" fg:x="66" fg:w="3"/><text x="21.8186%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="533" width="0.9804%" height="15" fill="rgb(250,110,10)" fg:x="66" fg:w="3"/><text x="21.8186%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="21.5686%" y="517" width="0.9804%" height="15" fill="rgb(248,123,6)" fg:x="66" fg:w="3"/><text x="21.8186%" y="527.50"></text></g><g><title>b-scriptch.12 (4 samples, 1.31%)</title><rect x="22.5490%" y="885" width="1.3072%" height="15" fill="rgb(206,91,31)" fg:x="69" fg:w="4"/><text x="22.7990%" y="895.50"></text></g><g><title>__clone (4 samples, 1.31%)</title><rect x="22.5490%" y="869" width="1.3072%" height="15" fill="rgb(211,154,13)" fg:x="69" fg:w="4"/><text x="22.7990%" y="879.50"></text></g><g><title>start_thread (4 samples, 1.31%)</title><rect x="22.5490%" y="853" width="1.3072%" height="15" fill="rgb(225,148,7)" fg:x="69" fg:w="4"/><text x="22.7990%" y="863.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.31%)</title><rect x="22.5490%" y="837" width="1.3072%" height="15" fill="rgb(220,160,43)" fg:x="69" fg:w="4"/><text x="22.7990%" y="847.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.31%)</title><rect x="22.5490%" y="821" width="1.3072%" height="15" fill="rgb(213,52,39)" fg:x="69" fg:w="4"/><text x="22.7990%" y="831.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.31%)</title><rect x="22.5490%" y="805" width="1.3072%" height="15" fill="rgb(243,137,7)" fg:x="69" fg:w="4"/><text x="22.7990%" y="815.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.31%)</title><rect x="22.5490%" y="789" width="1.3072%" height="15" fill="rgb(230,79,13)" fg:x="69" fg:w="4"/><text x="22.7990%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="773" width="1.3072%" height="15" fill="rgb(247,105,23)" fg:x="69" fg:w="4"/><text x="22.7990%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="757" width="1.3072%" height="15" fill="rgb(223,179,41)" fg:x="69" fg:w="4"/><text x="22.7990%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="741" width="1.3072%" height="15" fill="rgb(218,9,34)" fg:x="69" fg:w="4"/><text x="22.7990%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="725" width="1.3072%" height="15" fill="rgb(222,106,8)" fg:x="69" fg:w="4"/><text x="22.7990%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="709" width="1.3072%" height="15" fill="rgb(211,220,0)" fg:x="69" fg:w="4"/><text x="22.7990%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="693" width="1.3072%" height="15" fill="rgb(229,52,16)" fg:x="69" fg:w="4"/><text x="22.7990%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="677" width="1.3072%" height="15" fill="rgb(212,155,18)" fg:x="69" fg:w="4"/><text x="22.7990%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="661" width="1.3072%" height="15" fill="rgb(242,21,14)" fg:x="69" fg:w="4"/><text x="22.7990%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="645" width="1.3072%" height="15" fill="rgb(222,19,48)" fg:x="69" fg:w="4"/><text x="22.7990%" y="655.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="629" width="1.3072%" height="15" fill="rgb(232,45,27)" fg:x="69" fg:w="4"/><text x="22.7990%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="613" width="1.3072%" height="15" fill="rgb(249,103,42)" fg:x="69" fg:w="4"/><text x="22.7990%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="597" width="1.3072%" height="15" fill="rgb(246,81,33)" fg:x="69" fg:w="4"/><text x="22.7990%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="581" width="1.3072%" height="15" fill="rgb(252,33,42)" fg:x="69" fg:w="4"/><text x="22.7990%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="565" width="1.3072%" height="15" fill="rgb(209,212,41)" fg:x="69" fg:w="4"/><text x="22.7990%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="22.5490%" y="549" width="1.3072%" height="15" fill="rgb(207,154,6)" fg:x="69" fg:w="4"/><text x="22.7990%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="22.8758%" y="533" width="0.9804%" height="15" fill="rgb(223,64,47)" fg:x="70" fg:w="3"/><text x="23.1258%" y="543.50"></text></g><g><title>b-scriptch.13 (4 samples, 1.31%)</title><rect x="23.8562%" y="885" width="1.3072%" height="15" fill="rgb(211,161,38)" fg:x="73" fg:w="4"/><text x="24.1062%" y="895.50"></text></g><g><title>__clone (4 samples, 1.31%)</title><rect x="23.8562%" y="869" width="1.3072%" height="15" fill="rgb(219,138,40)" fg:x="73" fg:w="4"/><text x="24.1062%" y="879.50"></text></g><g><title>start_thread (4 samples, 1.31%)</title><rect x="23.8562%" y="853" width="1.3072%" height="15" fill="rgb(241,228,46)" fg:x="73" fg:w="4"/><text x="24.1062%" y="863.50"></text></g><g><title>__madvise (4 samples, 1.31%)</title><rect x="23.8562%" y="837" width="1.3072%" height="15" fill="rgb(223,209,38)" fg:x="73" fg:w="4"/><text x="24.1062%" y="847.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="821" width="1.3072%" height="15" fill="rgb(236,164,45)" fg:x="73" fg:w="4"/><text x="24.1062%" y="831.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="805" width="1.3072%" height="15" fill="rgb(231,15,5)" fg:x="73" fg:w="4"/><text x="24.1062%" y="815.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="789" width="1.3072%" height="15" fill="rgb(252,35,15)" fg:x="73" fg:w="4"/><text x="24.1062%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="773" width="1.3072%" height="15" fill="rgb(248,181,18)" fg:x="73" fg:w="4"/><text x="24.1062%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="757" width="1.3072%" height="15" fill="rgb(233,39,42)" fg:x="73" fg:w="4"/><text x="24.1062%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="741" width="1.3072%" height="15" fill="rgb(238,110,33)" fg:x="73" fg:w="4"/><text x="24.1062%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="725" width="1.3072%" height="15" fill="rgb(233,195,10)" fg:x="73" fg:w="4"/><text x="24.1062%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="709" width="1.3072%" height="15" fill="rgb(254,105,3)" fg:x="73" fg:w="4"/><text x="24.1062%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="693" width="1.3072%" height="15" fill="rgb(221,225,9)" fg:x="73" fg:w="4"/><text x="24.1062%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="677" width="1.3072%" height="15" fill="rgb(224,227,45)" fg:x="73" fg:w="4"/><text x="24.1062%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="661" width="1.3072%" height="15" fill="rgb(229,198,43)" fg:x="73" fg:w="4"/><text x="24.1062%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="645" width="1.3072%" height="15" fill="rgb(206,209,35)" fg:x="73" fg:w="4"/><text x="24.1062%" y="655.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="629" width="1.3072%" height="15" fill="rgb(245,195,53)" fg:x="73" fg:w="4"/><text x="24.1062%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="23.8562%" y="613" width="1.3072%" height="15" fill="rgb(240,92,26)" fg:x="73" fg:w="4"/><text x="24.1062%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="24.1830%" y="597" width="0.9804%" height="15" fill="rgb(207,40,23)" fg:x="74" fg:w="3"/><text x="24.4330%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="24.1830%" y="581" width="0.9804%" height="15" fill="rgb(223,111,35)" fg:x="74" fg:w="3"/><text x="24.4330%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="24.1830%" y="565" width="0.9804%" height="15" fill="rgb(229,147,28)" fg:x="74" fg:w="3"/><text x="24.4330%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="24.1830%" y="549" width="0.9804%" height="15" fill="rgb(211,29,28)" fg:x="74" fg:w="3"/><text x="24.4330%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="24.1830%" y="533" width="0.9804%" height="15" fill="rgb(228,72,33)" fg:x="74" fg:w="3"/><text x="24.4330%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="24.1830%" y="517" width="0.9804%" height="15" fill="rgb(205,214,31)" fg:x="74" fg:w="3"/><text x="24.4330%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="24.1830%" y="501" width="0.9804%" height="15" fill="rgb(224,111,15)" fg:x="74" fg:w="3"/><text x="24.4330%" y="511.50"></text></g><g><title>b-scriptch.1 (4 samples, 1.31%)</title><rect x="25.1634%" y="885" width="1.3072%" height="15" fill="rgb(253,21,26)" fg:x="77" fg:w="4"/><text x="25.4134%" y="895.50"></text></g><g><title>__clone (4 samples, 1.31%)</title><rect x="25.1634%" y="869" width="1.3072%" height="15" fill="rgb(245,139,43)" fg:x="77" fg:w="4"/><text x="25.4134%" y="879.50"></text></g><g><title>start_thread (4 samples, 1.31%)</title><rect x="25.1634%" y="853" width="1.3072%" height="15" fill="rgb(252,170,7)" fg:x="77" fg:w="4"/><text x="25.4134%" y="863.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="837" width="1.3072%" height="15" fill="rgb(231,118,14)" fg:x="77" fg:w="4"/><text x="25.4134%" y="847.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="821" width="1.3072%" height="15" fill="rgb(238,83,0)" fg:x="77" fg:w="4"/><text x="25.4134%" y="831.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="805" width="1.3072%" height="15" fill="rgb(221,39,39)" fg:x="77" fg:w="4"/><text x="25.4134%" y="815.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="789" width="1.3072%" height="15" fill="rgb(222,119,46)" fg:x="77" fg:w="4"/><text x="25.4134%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="773" width="1.3072%" height="15" fill="rgb(222,165,49)" fg:x="77" fg:w="4"/><text x="25.4134%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="757" width="1.3072%" height="15" fill="rgb(219,113,52)" fg:x="77" fg:w="4"/><text x="25.4134%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="741" width="1.3072%" height="15" fill="rgb(214,7,15)" fg:x="77" fg:w="4"/><text x="25.4134%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="725" width="1.3072%" height="15" fill="rgb(235,32,4)" fg:x="77" fg:w="4"/><text x="25.4134%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="709" width="1.3072%" height="15" fill="rgb(238,90,54)" fg:x="77" fg:w="4"/><text x="25.4134%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="693" width="1.3072%" height="15" fill="rgb(213,208,19)" fg:x="77" fg:w="4"/><text x="25.4134%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="677" width="1.3072%" height="15" fill="rgb(233,156,4)" fg:x="77" fg:w="4"/><text x="25.4134%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="661" width="1.3072%" height="15" fill="rgb(207,194,5)" fg:x="77" fg:w="4"/><text x="25.4134%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="25.1634%" y="645" width="1.3072%" height="15" fill="rgb(206,111,30)" fg:x="77" fg:w="4"/><text x="25.4134%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="25.4902%" y="629" width="0.9804%" height="15" fill="rgb(243,70,54)" fg:x="78" fg:w="3"/><text x="25.7402%" y="639.50"></text></g><g><title>b-scriptch.9 (4 samples, 1.31%)</title><rect x="26.4706%" y="885" width="1.3072%" height="15" fill="rgb(242,28,8)" fg:x="81" fg:w="4"/><text x="26.7206%" y="895.50"></text></g><g><title>__clone (4 samples, 1.31%)</title><rect x="26.4706%" y="869" width="1.3072%" height="15" fill="rgb(219,106,18)" fg:x="81" fg:w="4"/><text x="26.7206%" y="879.50"></text></g><g><title>start_thread (4 samples, 1.31%)</title><rect x="26.4706%" y="853" width="1.3072%" height="15" fill="rgb(244,222,10)" fg:x="81" fg:w="4"/><text x="26.7206%" y="863.50"></text></g><g><title>execute_native_thread_routine (4 samples, 1.31%)</title><rect x="26.4706%" y="837" width="1.3072%" height="15" fill="rgb(236,179,52)" fg:x="81" fg:w="4"/><text x="26.7206%" y="847.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::Loop (4 samples, 1.31%)</title><rect x="26.4706%" y="821" width="1.3072%" height="15" fill="rgb(213,23,39)" fg:x="81" fg:w="4"/><text x="26.7206%" y="831.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.31%)</title><rect x="26.4706%" y="805" width="1.3072%" height="15" fill="rgb(238,48,10)" fg:x="81" fg:w="4"/><text x="26.7206%" y="815.50"></text></g><g><title>__futex_abstimed_wait_common (4 samples, 1.31%)</title><rect x="26.4706%" y="789" width="1.3072%" height="15" fill="rgb(251,196,23)" fg:x="81" fg:w="4"/><text x="26.7206%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="773" width="1.3072%" height="15" fill="rgb(250,152,24)" fg:x="81" fg:w="4"/><text x="26.7206%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="757" width="1.3072%" height="15" fill="rgb(209,150,17)" fg:x="81" fg:w="4"/><text x="26.7206%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="741" width="1.3072%" height="15" fill="rgb(234,202,34)" fg:x="81" fg:w="4"/><text x="26.7206%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="725" width="1.3072%" height="15" fill="rgb(253,148,53)" fg:x="81" fg:w="4"/><text x="26.7206%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="709" width="1.3072%" height="15" fill="rgb(218,129,16)" fg:x="81" fg:w="4"/><text x="26.7206%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="693" width="1.3072%" height="15" fill="rgb(216,85,19)" fg:x="81" fg:w="4"/><text x="26.7206%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="677" width="1.3072%" height="15" fill="rgb(235,228,7)" fg:x="81" fg:w="4"/><text x="26.7206%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="661" width="1.3072%" height="15" fill="rgb(245,175,0)" fg:x="81" fg:w="4"/><text x="26.7206%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="645" width="1.3072%" height="15" fill="rgb(208,168,36)" fg:x="81" fg:w="4"/><text x="26.7206%" y="655.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="629" width="1.3072%" height="15" fill="rgb(246,171,24)" fg:x="81" fg:w="4"/><text x="26.7206%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="613" width="1.3072%" height="15" fill="rgb(215,142,24)" fg:x="81" fg:w="4"/><text x="26.7206%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="597" width="1.3072%" height="15" fill="rgb(250,187,7)" fg:x="81" fg:w="4"/><text x="26.7206%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="581" width="1.3072%" height="15" fill="rgb(228,66,33)" fg:x="81" fg:w="4"/><text x="26.7206%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="565" width="1.3072%" height="15" fill="rgb(234,215,21)" fg:x="81" fg:w="4"/><text x="26.7206%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="26.4706%" y="549" width="1.3072%" height="15" fill="rgb(222,191,20)" fg:x="81" fg:w="4"/><text x="26.7206%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="26.7974%" y="533" width="0.9804%" height="15" fill="rgb(245,79,54)" fg:x="82" fg:w="3"/><text x="27.0474%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="27.7778%" y="869" width="0.3268%" height="15" fill="rgb(240,10,37)" fg:x="85" fg:w="1"/><text x="28.0278%" y="879.50"></text></g><g><title>exit (1 samples, 0.33%)</title><rect x="28.1046%" y="821" width="0.3268%" height="15" fill="rgb(214,192,32)" fg:x="86" fg:w="1"/><text x="28.3546%" y="831.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.33%)</title><rect x="28.1046%" y="805" width="0.3268%" height="15" fill="rgb(209,36,54)" fg:x="86" fg:w="1"/><text x="28.3546%" y="815.50"></text></g><g><title>LockedPool::~LockedPool (1 samples, 0.33%)</title><rect x="28.1046%" y="789" width="0.3268%" height="15" fill="rgb(220,10,11)" fg:x="86" fg:w="1"/><text x="28.3546%" y="799.50"></text></g><g><title>std::__cxx11::list&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::~list (1 samples, 0.33%)</title><rect x="28.1046%" y="773" width="0.3268%" height="15" fill="rgb(221,106,17)" fg:x="86" fg:w="1"/><text x="28.3546%" y="783.50"></text></g><g><title>std::__cxx11::_List_base&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::~_List_base (1 samples, 0.33%)</title><rect x="28.1046%" y="757" width="0.3268%" height="15" fill="rgb(251,142,44)" fg:x="86" fg:w="1"/><text x="28.3546%" y="767.50"></text></g><g><title>std::__cxx11::_List_base&lt;LockedPool::LockedPageArena, std::allocator&lt;LockedPool::LockedPageArena&gt; &gt;::_M_clear (1 samples, 0.33%)</title><rect x="28.1046%" y="741" width="0.3268%" height="15" fill="rgb(238,13,15)" fg:x="86" fg:w="1"/><text x="28.3546%" y="751.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;LockedPool::LockedPageArena&gt; &gt; &gt;::destroy&lt;LockedPool::LockedPageArena&gt; (1 samples, 0.33%)</title><rect x="28.1046%" y="725" width="0.3268%" height="15" fill="rgb(208,107,27)" fg:x="86" fg:w="1"/><text x="28.3546%" y="735.50"></text></g><g><title>void std::destroy_at&lt;LockedPool::LockedPageArena&gt; (1 samples, 0.33%)</title><rect x="28.1046%" y="709" width="0.3268%" height="15" fill="rgb(205,136,37)" fg:x="86" fg:w="1"/><text x="28.3546%" y="719.50"></text></g><g><title>LockedPool::LockedPageArena::~LockedPageArena (1 samples, 0.33%)</title><rect x="28.1046%" y="693" width="0.3268%" height="15" fill="rgb(250,205,27)" fg:x="86" fg:w="1"/><text x="28.3546%" y="703.50"></text></g><g><title>PosixLockedPageAllocator::FreeLocked (1 samples, 0.33%)</title><rect x="28.1046%" y="677" width="0.3268%" height="15" fill="rgb(210,80,43)" fg:x="86" fg:w="1"/><text x="28.3546%" y="687.50"></text></g><g><title>munlock (1 samples, 0.33%)</title><rect x="28.1046%" y="661" width="0.3268%" height="15" fill="rgb(247,160,36)" fg:x="86" fg:w="1"/><text x="28.3546%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="645" width="0.3268%" height="15" fill="rgb(234,13,49)" fg:x="86" fg:w="1"/><text x="28.3546%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="629" width="0.3268%" height="15" fill="rgb(234,122,0)" fg:x="86" fg:w="1"/><text x="28.3546%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="613" width="0.3268%" height="15" fill="rgb(207,146,38)" fg:x="86" fg:w="1"/><text x="28.3546%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="597" width="0.3268%" height="15" fill="rgb(207,177,25)" fg:x="86" fg:w="1"/><text x="28.3546%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="581" width="0.3268%" height="15" fill="rgb(211,178,42)" fg:x="86" fg:w="1"/><text x="28.3546%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="565" width="0.3268%" height="15" fill="rgb(230,69,54)" fg:x="86" fg:w="1"/><text x="28.3546%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="549" width="0.3268%" height="15" fill="rgb(214,135,41)" fg:x="86" fg:w="1"/><text x="28.3546%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="533" width="0.3268%" height="15" fill="rgb(237,67,25)" fg:x="86" fg:w="1"/><text x="28.3546%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="517" width="0.3268%" height="15" fill="rgb(222,189,50)" fg:x="86" fg:w="1"/><text x="28.3546%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="501" width="0.3268%" height="15" fill="rgb(245,148,34)" fg:x="86" fg:w="1"/><text x="28.3546%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.1046%" y="485" width="0.3268%" height="15" fill="rgb(222,29,6)" fg:x="86" fg:w="1"/><text x="28.3546%" y="495.50"></text></g><g><title>CConnman::Stop (1 samples, 0.33%)</title><rect x="28.4314%" y="789" width="0.3268%" height="15" fill="rgb(221,189,43)" fg:x="87" fg:w="1"/><text x="28.6814%" y="799.50"></text></g><g><title>CConnman::StopNodes (1 samples, 0.33%)</title><rect x="28.4314%" y="773" width="0.3268%" height="15" fill="rgb(207,36,27)" fg:x="87" fg:w="1"/><text x="28.6814%" y="783.50"></text></g><g><title>CConnman::DumpAddresses (1 samples, 0.33%)</title><rect x="28.4314%" y="757" width="0.3268%" height="15" fill="rgb(217,90,24)" fg:x="87" fg:w="1"/><text x="28.6814%" y="767.50"></text></g><g><title>DumpPeerAddresses (1 samples, 0.33%)</title><rect x="28.4314%" y="741" width="0.3268%" height="15" fill="rgb(224,66,35)" fg:x="87" fg:w="1"/><text x="28.6814%" y="751.50"></text></g><g><title>DumpPeerAddresses (1 samples, 0.33%)</title><rect x="28.4314%" y="725" width="0.3268%" height="15" fill="rgb(221,13,50)" fg:x="87" fg:w="1"/><text x="28.6814%" y="735.50"></text></g><g><title>__fopen_internal (1 samples, 0.33%)</title><rect x="28.4314%" y="709" width="0.3268%" height="15" fill="rgb(236,68,49)" fg:x="87" fg:w="1"/><text x="28.6814%" y="719.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.33%)</title><rect x="28.4314%" y="693" width="0.3268%" height="15" fill="rgb(229,146,28)" fg:x="87" fg:w="1"/><text x="28.6814%" y="703.50"></text></g><g><title>_IO_file_open (1 samples, 0.33%)</title><rect x="28.4314%" y="677" width="0.3268%" height="15" fill="rgb(225,31,38)" fg:x="87" fg:w="1"/><text x="28.6814%" y="687.50"></text></g><g><title>__GI___libc_open (1 samples, 0.33%)</title><rect x="28.4314%" y="661" width="0.3268%" height="15" fill="rgb(250,208,3)" fg:x="87" fg:w="1"/><text x="28.6814%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.4314%" y="645" width="0.3268%" height="15" fill="rgb(246,54,23)" fg:x="87" fg:w="1"/><text x="28.6814%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.4314%" y="629" width="0.3268%" height="15" fill="rgb(243,76,11)" fg:x="87" fg:w="1"/><text x="28.6814%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.4314%" y="613" width="0.3268%" height="15" fill="rgb(245,21,50)" fg:x="87" fg:w="1"/><text x="28.6814%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.4314%" y="597" width="0.3268%" height="15" fill="rgb(228,9,43)" fg:x="87" fg:w="1"/><text x="28.6814%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.4314%" y="581" width="0.3268%" height="15" fill="rgb(208,100,47)" fg:x="87" fg:w="1"/><text x="28.6814%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.4314%" y="565" width="0.3268%" height="15" fill="rgb(232,26,8)" fg:x="87" fg:w="1"/><text x="28.6814%" y="575.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="28.4314%" y="549" width="0.3268%" height="15" fill="rgb(216,166,38)" fg:x="87" fg:w="1"/><text x="28.6814%" y="559.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="28.4314%" y="533" width="0.3268%" height="15" fill="rgb(251,202,51)" fg:x="87" fg:w="1"/><text x="28.6814%" y="543.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="28.4314%" y="517" width="0.3268%" height="15" fill="rgb(254,216,34)" fg:x="87" fg:w="1"/><text x="28.6814%" y="527.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="28.4314%" y="501" width="0.3268%" height="15" fill="rgb(251,32,27)" fg:x="87" fg:w="1"/><text x="28.6814%" y="511.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="28.4314%" y="485" width="0.3268%" height="15" fill="rgb(208,127,28)" fg:x="87" fg:w="1"/><text x="28.6814%" y="495.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="28.4314%" y="469" width="0.3268%" height="15" fill="rgb(224,137,22)" fg:x="87" fg:w="1"/><text x="28.6814%" y="479.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="28.4314%" y="453" width="0.3268%" height="15" fill="rgb(254,70,32)" fg:x="87" fg:w="1"/><text x="28.6814%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="28.4314%" y="437" width="0.3268%" height="15" fill="rgb(229,75,37)" fg:x="87" fg:w="1"/><text x="28.6814%" y="447.50"></text></g><g><title>CCoinsViewCache::Flush (1 samples, 0.33%)</title><rect x="28.7582%" y="757" width="0.3268%" height="15" fill="rgb(252,64,23)" fg:x="88" fg:w="1"/><text x="29.0082%" y="767.50"></text></g><g><title>std::unordered_map&lt;COutPoint, CCoinsCacheEntry, SaltedOutpointHasher, std::equal_to&lt;COutPoint&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt; &gt;::clear (1 samples, 0.33%)</title><rect x="28.7582%" y="741" width="0.3268%" height="15" fill="rgb(232,162,48)" fg:x="88" fg:w="1"/><text x="29.0082%" y="751.50"></text></g><g><title>std::_Hashtable&lt;COutPoint, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, PoolAllocator&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, 144ul, 8ul&gt;, std::__detail::_Select1st, std::equal_to&lt;COutPoint&gt;, SaltedOutpointHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.33%)</title><rect x="28.7582%" y="725" width="0.3268%" height="15" fill="rgb(246,160,12)" fg:x="88" fg:w="1"/><text x="29.0082%" y="735.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_nodes (1 samples, 0.33%)</title><rect x="28.7582%" y="709" width="0.3268%" height="15" fill="rgb(247,166,0)" fg:x="88" fg:w="1"/><text x="29.0082%" y="719.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_M_deallocate_node (1 samples, 0.33%)</title><rect x="28.7582%" y="693" width="0.3268%" height="15" fill="rgb(249,219,21)" fg:x="88" fg:w="1"/><text x="29.0082%" y="703.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.33%)</title><rect x="28.7582%" y="677" width="0.3268%" height="15" fill="rgb(205,209,3)" fg:x="88" fg:w="1"/><text x="29.0082%" y="687.50"></text></g><g><title>void std::allocator_traits&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt; &gt;::_S_destroy&lt;PoolAllocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;, false&gt;, 144ul, 8ul&gt;, std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.33%)</title><rect x="28.7582%" y="661" width="0.3268%" height="15" fill="rgb(243,44,1)" fg:x="88" fg:w="1"/><text x="29.0082%" y="671.50"></text></g><g><title>void std::_Destroy&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.33%)</title><rect x="28.7582%" y="645" width="0.3268%" height="15" fill="rgb(206,159,16)" fg:x="88" fg:w="1"/><text x="29.0082%" y="655.50"></text></g><g><title>void std::destroy_at&lt;std::pair&lt;COutPoint const, CCoinsCacheEntry&gt; &gt; (1 samples, 0.33%)</title><rect x="28.7582%" y="629" width="0.3268%" height="15" fill="rgb(244,77,30)" fg:x="88" fg:w="1"/><text x="29.0082%" y="639.50"></text></g><g><title>std::pair&lt;COutPoint const, CCoinsCacheEntry&gt;::~pair (1 samples, 0.33%)</title><rect x="28.7582%" y="613" width="0.3268%" height="15" fill="rgb(218,69,12)" fg:x="88" fg:w="1"/><text x="29.0082%" y="623.50"></text></g><g><title>CCoinsCacheEntry::~CCoinsCacheEntry (1 samples, 0.33%)</title><rect x="28.7582%" y="597" width="0.3268%" height="15" fill="rgb(212,87,7)" fg:x="88" fg:w="1"/><text x="29.0082%" y="607.50"></text></g><g><title>Coin::~Coin (1 samples, 0.33%)</title><rect x="28.7582%" y="581" width="0.3268%" height="15" fill="rgb(245,114,25)" fg:x="88" fg:w="1"/><text x="29.0082%" y="591.50"></text></g><g><title>CTxOut::~CTxOut (1 samples, 0.33%)</title><rect x="28.7582%" y="565" width="0.3268%" height="15" fill="rgb(210,61,42)" fg:x="88" fg:w="1"/><text x="29.0082%" y="575.50"></text></g><g><title>CScript::~CScript (1 samples, 0.33%)</title><rect x="28.7582%" y="549" width="0.3268%" height="15" fill="rgb(211,52,33)" fg:x="88" fg:w="1"/><text x="29.0082%" y="559.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::~prevector (1 samples, 0.33%)</title><rect x="28.7582%" y="533" width="0.3268%" height="15" fill="rgb(234,58,33)" fg:x="88" fg:w="1"/><text x="29.0082%" y="543.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.33%)</title><rect x="28.7582%" y="517" width="0.3268%" height="15" fill="rgb(220,115,36)" fg:x="88" fg:w="1"/><text x="29.0082%" y="527.50"></text></g><g><title>_int_free (1 samples, 0.33%)</title><rect x="28.7582%" y="501" width="0.3268%" height="15" fill="rgb(243,153,54)" fg:x="88" fg:w="1"/><text x="29.0082%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="29.0850%" y="693" width="1.3072%" height="15" fill="rgb(251,47,18)" fg:x="89" fg:w="4"/><text x="29.3350%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="29.0850%" y="677" width="1.3072%" height="15" fill="rgb(242,102,42)" fg:x="89" fg:w="4"/><text x="29.3350%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="29.0850%" y="661" width="1.3072%" height="15" fill="rgb(234,31,38)" fg:x="89" fg:w="4"/><text x="29.3350%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="29.0850%" y="645" width="1.3072%" height="15" fill="rgb(221,117,51)" fg:x="89" fg:w="4"/><text x="29.3350%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="629" width="0.9804%" height="15" fill="rgb(212,20,18)" fg:x="90" fg:w="3"/><text x="29.6618%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="613" width="0.9804%" height="15" fill="rgb(245,133,36)" fg:x="90" fg:w="3"/><text x="29.6618%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="597" width="0.9804%" height="15" fill="rgb(212,6,19)" fg:x="90" fg:w="3"/><text x="29.6618%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="581" width="0.9804%" height="15" fill="rgb(218,1,36)" fg:x="90" fg:w="3"/><text x="29.6618%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="565" width="0.9804%" height="15" fill="rgb(246,84,54)" fg:x="90" fg:w="3"/><text x="29.6618%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="549" width="0.9804%" height="15" fill="rgb(242,110,6)" fg:x="90" fg:w="3"/><text x="29.6618%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="533" width="0.9804%" height="15" fill="rgb(214,47,5)" fg:x="90" fg:w="3"/><text x="29.6618%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="517" width="0.9804%" height="15" fill="rgb(218,159,25)" fg:x="90" fg:w="3"/><text x="29.6618%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="501" width="0.9804%" height="15" fill="rgb(215,211,28)" fg:x="90" fg:w="3"/><text x="29.6618%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="485" width="0.9804%" height="15" fill="rgb(238,59,32)" fg:x="90" fg:w="3"/><text x="29.6618%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="469" width="0.9804%" height="15" fill="rgb(226,82,3)" fg:x="90" fg:w="3"/><text x="29.6618%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="453" width="0.9804%" height="15" fill="rgb(240,164,32)" fg:x="90" fg:w="3"/><text x="29.6618%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="29.4118%" y="437" width="0.9804%" height="15" fill="rgb(232,46,7)" fg:x="90" fg:w="3"/><text x="29.6618%" y="447.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (1 samples, 0.33%)</title><rect x="30.3922%" y="693" width="0.3268%" height="15" fill="rgb(229,129,53)" fg:x="93" fg:w="1"/><text x="30.6422%" y="703.50"></text></g><g><title>CDBBatch::WriteImpl (1 samples, 0.33%)</title><rect x="30.3922%" y="677" width="0.3268%" height="15" fill="rgb(234,188,29)" fg:x="93" fg:w="1"/><text x="30.6422%" y="687.50"></text></g><g><title>DataStream::size (1 samples, 0.33%)</title><rect x="30.3922%" y="661" width="0.3268%" height="15" fill="rgb(246,141,4)" fg:x="93" fg:w="1"/><text x="30.6422%" y="671.50"></text></g><g><title>Chainstate::ForceFlushStateToDisk (9 samples, 2.94%)</title><rect x="28.7582%" y="789" width="2.9412%" height="15" fill="rgb(229,23,39)" fg:x="88" fg:w="9"/><text x="29.0082%" y="799.50">Ch..</text></g><g><title>Chainstate::FlushStateToDisk (9 samples, 2.94%)</title><rect x="28.7582%" y="773" width="2.9412%" height="15" fill="rgb(206,12,3)" fg:x="88" fg:w="9"/><text x="29.0082%" y="783.50">Ch..</text></g><g><title>node::BlockManager::WriteBlockIndexDB (8 samples, 2.61%)</title><rect x="29.0850%" y="757" width="2.6144%" height="15" fill="rgb(252,226,20)" fg:x="89" fg:w="8"/><text x="29.3350%" y="767.50">no..</text></g><g><title>kernel::BlockTreeDB::WriteBatchSync (8 samples, 2.61%)</title><rect x="29.0850%" y="741" width="2.6144%" height="15" fill="rgb(216,123,35)" fg:x="89" fg:w="8"/><text x="29.3350%" y="751.50">ke..</text></g><g><title>void CDBBatch::Write&lt;std::pair&lt;unsigned char, uint256&gt;, CDiskBlockIndex&gt; (8 samples, 2.61%)</title><rect x="29.0850%" y="725" width="2.6144%" height="15" fill="rgb(212,68,40)" fg:x="89" fg:w="8"/><text x="29.3350%" y="735.50">vo..</text></g><g><title>CDBBatch::WriteImpl (8 samples, 2.61%)</title><rect x="29.0850%" y="709" width="2.6144%" height="15" fill="rgb(254,125,32)" fg:x="89" fg:w="8"/><text x="29.3350%" y="719.50">CD..</text></g><g><title>leveldb::WriteBatch::Put (3 samples, 0.98%)</title><rect x="30.7190%" y="693" width="0.9804%" height="15" fill="rgb(253,97,22)" fg:x="94" fg:w="3"/><text x="30.9690%" y="703.50"></text></g><g><title>leveldb::PutLengthPrefixedSlice (3 samples, 0.98%)</title><rect x="30.7190%" y="677" width="0.9804%" height="15" fill="rgb(241,101,14)" fg:x="94" fg:w="3"/><text x="30.9690%" y="687.50"></text></g><g><title>leveldb::PutVarint32 (3 samples, 0.98%)</title><rect x="30.7190%" y="661" width="0.9804%" height="15" fill="rgb(238,103,29)" fg:x="94" fg:w="3"/><text x="30.9690%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="645" width="0.9804%" height="15" fill="rgb(233,195,47)" fg:x="94" fg:w="3"/><text x="30.9690%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="629" width="0.9804%" height="15" fill="rgb(246,218,30)" fg:x="94" fg:w="3"/><text x="30.9690%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="613" width="0.9804%" height="15" fill="rgb(219,145,47)" fg:x="94" fg:w="3"/><text x="30.9690%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="597" width="0.9804%" height="15" fill="rgb(243,12,26)" fg:x="94" fg:w="3"/><text x="30.9690%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="581" width="0.9804%" height="15" fill="rgb(214,87,16)" fg:x="94" fg:w="3"/><text x="30.9690%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="565" width="0.9804%" height="15" fill="rgb(208,99,42)" fg:x="94" fg:w="3"/><text x="30.9690%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="549" width="0.9804%" height="15" fill="rgb(253,99,2)" fg:x="94" fg:w="3"/><text x="30.9690%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="533" width="0.9804%" height="15" fill="rgb(220,168,23)" fg:x="94" fg:w="3"/><text x="30.9690%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="517" width="0.9804%" height="15" fill="rgb(242,38,24)" fg:x="94" fg:w="3"/><text x="30.9690%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="501" width="0.9804%" height="15" fill="rgb(225,182,9)" fg:x="94" fg:w="3"/><text x="30.9690%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="485" width="0.9804%" height="15" fill="rgb(243,178,37)" fg:x="94" fg:w="3"/><text x="30.9690%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="469" width="0.9804%" height="15" fill="rgb(232,139,19)" fg:x="94" fg:w="3"/><text x="30.9690%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="30.7190%" y="453" width="0.9804%" height="15" fill="rgb(225,201,24)" fg:x="94" fg:w="3"/><text x="30.9690%" y="463.50"></text></g><g><title>b-shutoff (16 samples, 5.23%)</title><rect x="27.7778%" y="885" width="5.2288%" height="15" fill="rgb(221,47,46)" fg:x="85" fg:w="16"/><text x="28.0278%" y="895.50">b-shut..</text></g><g><title>_start (15 samples, 4.90%)</title><rect x="28.1046%" y="869" width="4.9020%" height="15" fill="rgb(249,23,13)" fg:x="86" fg:w="15"/><text x="28.3546%" y="879.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (15 samples, 4.90%)</title><rect x="28.1046%" y="853" width="4.9020%" height="15" fill="rgb(219,9,5)" fg:x="86" fg:w="15"/><text x="28.3546%" y="863.50">__libc..</text></g><g><title>__libc_start_call_main (15 samples, 4.90%)</title><rect x="28.1046%" y="837" width="4.9020%" height="15" fill="rgb(254,171,16)" fg:x="86" fg:w="15"/><text x="28.3546%" y="847.50">__libc..</text></g><g><title>main (14 samples, 4.58%)</title><rect x="28.4314%" y="821" width="4.5752%" height="15" fill="rgb(230,171,20)" fg:x="87" fg:w="14"/><text x="28.6814%" y="831.50">main</text></g><g><title>Shutdown (14 samples, 4.58%)</title><rect x="28.4314%" y="805" width="4.5752%" height="15" fill="rgb(210,71,41)" fg:x="87" fg:w="14"/><text x="28.6814%" y="815.50">Shutd..</text></g><g><title>std::unique_ptr&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (4 samples, 1.31%)</title><rect x="31.6993%" y="789" width="1.3072%" height="15" fill="rgb(206,173,20)" fg:x="97" fg:w="4"/><text x="31.9493%" y="799.50"></text></g><g><title>std::__uniq_ptr_impl&lt;ChainstateManager, std::default_delete&lt;ChainstateManager&gt; &gt;::reset (4 samples, 1.31%)</title><rect x="31.6993%" y="773" width="1.3072%" height="15" fill="rgb(233,88,34)" fg:x="97" fg:w="4"/><text x="31.9493%" y="783.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (4 samples, 1.31%)</title><rect x="31.6993%" y="757" width="1.3072%" height="15" fill="rgb(223,209,46)" fg:x="97" fg:w="4"/><text x="31.9493%" y="767.50"></text></g><g><title>std::default_delete&lt;ChainstateManager&gt;::operator (4 samples, 1.31%)</title><rect x="31.6993%" y="741" width="1.3072%" height="15" fill="rgb(250,43,18)" fg:x="97" fg:w="4"/><text x="31.9493%" y="751.50"></text></g><g><title>ChainstateManager::~ChainstateManager (4 samples, 1.31%)</title><rect x="31.6993%" y="725" width="1.3072%" height="15" fill="rgb(208,13,10)" fg:x="97" fg:w="4"/><text x="31.9493%" y="735.50"></text></g><g><title>CCheckQueue&lt;CScriptCheck&gt;::~CCheckQueue (4 samples, 1.31%)</title><rect x="31.6993%" y="709" width="1.3072%" height="15" fill="rgb(212,200,36)" fg:x="97" fg:w="4"/><text x="31.9493%" y="719.50"></text></g><g><title>std::thread::join (4 samples, 1.31%)</title><rect x="31.6993%" y="693" width="1.3072%" height="15" fill="rgb(225,90,30)" fg:x="97" fg:w="4"/><text x="31.9493%" y="703.50"></text></g><g><title>__pthread_clockjoin_ex (4 samples, 1.31%)</title><rect x="31.6993%" y="677" width="1.3072%" height="15" fill="rgb(236,182,39)" fg:x="97" fg:w="4"/><text x="31.9493%" y="687.50"></text></g><g><title>__GI___nptl_deallocate_stack (4 samples, 1.31%)</title><rect x="31.6993%" y="661" width="1.3072%" height="15" fill="rgb(212,144,35)" fg:x="97" fg:w="4"/><text x="31.9493%" y="671.50"></text></g><g><title>__nptl_free_stacks (4 samples, 1.31%)</title><rect x="31.6993%" y="645" width="1.3072%" height="15" fill="rgb(228,63,44)" fg:x="97" fg:w="4"/><text x="31.9493%" y="655.50"></text></g><g><title>__munmap (4 samples, 1.31%)</title><rect x="31.6993%" y="629" width="1.3072%" height="15" fill="rgb(228,109,6)" fg:x="97" fg:w="4"/><text x="31.9493%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="613" width="1.3072%" height="15" fill="rgb(238,117,24)" fg:x="97" fg:w="4"/><text x="31.9493%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="597" width="1.3072%" height="15" fill="rgb(242,26,26)" fg:x="97" fg:w="4"/><text x="31.9493%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="581" width="1.3072%" height="15" fill="rgb(221,92,48)" fg:x="97" fg:w="4"/><text x="31.9493%" y="591.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="565" width="1.3072%" height="15" fill="rgb(209,209,32)" fg:x="97" fg:w="4"/><text x="31.9493%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="549" width="1.3072%" height="15" fill="rgb(221,70,22)" fg:x="97" fg:w="4"/><text x="31.9493%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="533" width="1.3072%" height="15" fill="rgb(248,145,5)" fg:x="97" fg:w="4"/><text x="31.9493%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="517" width="1.3072%" height="15" fill="rgb(226,116,26)" fg:x="97" fg:w="4"/><text x="31.9493%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="31.6993%" y="501" width="1.3072%" height="15" fill="rgb(244,5,17)" fg:x="97" fg:w="4"/><text x="31.9493%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="485" width="0.9804%" height="15" fill="rgb(252,159,33)" fg:x="98" fg:w="3"/><text x="32.2761%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="469" width="0.9804%" height="15" fill="rgb(206,71,0)" fg:x="98" fg:w="3"/><text x="32.2761%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="453" width="0.9804%" height="15" fill="rgb(233,118,54)" fg:x="98" fg:w="3"/><text x="32.2761%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="437" width="0.9804%" height="15" fill="rgb(234,83,48)" fg:x="98" fg:w="3"/><text x="32.2761%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="421" width="0.9804%" height="15" fill="rgb(228,3,54)" fg:x="98" fg:w="3"/><text x="32.2761%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="405" width="0.9804%" height="15" fill="rgb(226,155,13)" fg:x="98" fg:w="3"/><text x="32.2761%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="389" width="0.9804%" height="15" fill="rgb(241,28,37)" fg:x="98" fg:w="3"/><text x="32.2761%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="373" width="0.9804%" height="15" fill="rgb(233,93,10)" fg:x="98" fg:w="3"/><text x="32.2761%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="32.0261%" y="357" width="0.9804%" height="15" fill="rgb(225,113,19)" fg:x="98" fg:w="3"/><text x="32.2761%" y="367.50"></text></g><g><title>CRPCCommand::CRPCCommand (1 samples, 0.33%)</title><rect x="33.0065%" y="869" width="0.3268%" height="15" fill="rgb(241,2,18)" fg:x="101" fg:w="1"/><text x="33.2565%" y="879.50"></text></g><g><title>getblocktemplate (1 samples, 0.33%)</title><rect x="33.0065%" y="853" width="0.3268%" height="15" fill="rgb(228,207,21)" fg:x="101" fg:w="1"/><text x="33.2565%" y="863.50"></text></g><g><title>RPCResult::RPCResult (1 samples, 0.33%)</title><rect x="33.0065%" y="837" width="0.3268%" height="15" fill="rgb(213,211,35)" fg:x="101" fg:w="1"/><text x="33.2565%" y="847.50"></text></g><g><title>RPCResult::RPCResult (1 samples, 0.33%)</title><rect x="33.0065%" y="821" width="0.3268%" height="15" fill="rgb(209,83,10)" fg:x="101" fg:w="1"/><text x="33.2565%" y="831.50"></text></g><g><title>RPCResult::CheckInnerDoc (1 samples, 0.33%)</title><rect x="33.0065%" y="805" width="0.3268%" height="15" fill="rgb(209,164,1)" fg:x="101" fg:w="1"/><text x="33.2565%" y="815.50"></text></g><g><title>RPCResult::RPCResult (1 samples, 0.33%)</title><rect x="33.0065%" y="789" width="0.3268%" height="15" fill="rgb(213,184,43)" fg:x="101" fg:w="1"/><text x="33.2565%" y="799.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.33%)</title><rect x="33.0065%" y="773" width="0.3268%" height="15" fill="rgb(231,61,34)" fg:x="101" fg:w="1"/><text x="33.2565%" y="783.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.33%)</title><rect x="33.0065%" y="757" width="0.3268%" height="15" fill="rgb(235,75,3)" fg:x="101" fg:w="1"/><text x="33.2565%" y="767.50"></text></g><g><title>Next (1 samples, 0.33%)</title><rect x="33.3333%" y="869" width="0.3268%" height="15" fill="rgb(220,106,47)" fg:x="102" fg:w="1"/><text x="33.5833%" y="879.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.33%)</title><rect x="33.3333%" y="853" width="0.3268%" height="15" fill="rgb(210,196,33)" fg:x="102" fg:w="1"/><text x="33.5833%" y="863.50"></text></g><g><title>UintToArith256 (1 samples, 0.33%)</title><rect x="33.3333%" y="837" width="0.3268%" height="15" fill="rgb(229,154,42)" fg:x="102" fg:w="1"/><text x="33.5833%" y="847.50"></text></g><g><title>SetDataIterator (1 samples, 0.33%)</title><rect x="33.6601%" y="869" width="0.3268%" height="15" fill="rgb(228,114,26)" fg:x="103" fg:w="1"/><text x="33.9101%" y="879.50"></text></g><g><title>leveldb::IteratorWrapper::Set (1 samples, 0.33%)</title><rect x="33.6601%" y="853" width="0.3268%" height="15" fill="rgb(208,144,1)" fg:x="103" fg:w="1"/><text x="33.9101%" y="863.50"></text></g><g><title>[[heap]] (84 samples, 27.45%)</title><rect x="33.9869%" y="869" width="27.4510%" height="15" fill="rgb(239,112,37)" fg:x="104" fg:w="84"/><text x="34.2369%" y="879.50">[[heap]]</text></g><g><title>__clone (84 samples, 27.45%)</title><rect x="33.9869%" y="853" width="27.4510%" height="15" fill="rgb(210,96,50)" fg:x="104" fg:w="84"/><text x="34.2369%" y="863.50">__clone</text></g><g><title>[unknown] (82 samples, 26.80%)</title><rect x="34.6405%" y="837" width="26.7974%" height="15" fill="rgb(222,178,2)" fg:x="106" fg:w="82"/><text x="34.8905%" y="847.50">[unknown]</text></g><g><title>[unknown] (81 samples, 26.47%)</title><rect x="34.9673%" y="821" width="26.4706%" height="15" fill="rgb(226,74,18)" fg:x="107" fg:w="81"/><text x="35.2173%" y="831.50">[unknown]</text></g><g><title>[unknown] (80 samples, 26.14%)</title><rect x="35.2941%" y="805" width="26.1438%" height="15" fill="rgb(225,67,54)" fg:x="108" fg:w="80"/><text x="35.5441%" y="815.50">[unknown]</text></g><g><title>[unknown] (78 samples, 25.49%)</title><rect x="35.9477%" y="789" width="25.4902%" height="15" fill="rgb(251,92,32)" fg:x="110" fg:w="78"/><text x="36.1977%" y="799.50">[unknown]</text></g><g><title>[unknown] (78 samples, 25.49%)</title><rect x="35.9477%" y="773" width="25.4902%" height="15" fill="rgb(228,149,22)" fg:x="110" fg:w="78"/><text x="36.1977%" y="783.50">[unknown]</text></g><g><title>[unknown] (78 samples, 25.49%)</title><rect x="35.9477%" y="757" width="25.4902%" height="15" fill="rgb(243,54,13)" fg:x="110" fg:w="78"/><text x="36.1977%" y="767.50">[unknown]</text></g><g><title>[unknown] (78 samples, 25.49%)</title><rect x="35.9477%" y="741" width="25.4902%" height="15" fill="rgb(243,180,28)" fg:x="110" fg:w="78"/><text x="36.1977%" y="751.50">[unknown]</text></g><g><title>[unknown] (78 samples, 25.49%)</title><rect x="35.9477%" y="725" width="25.4902%" height="15" fill="rgb(208,167,24)" fg:x="110" fg:w="78"/><text x="36.1977%" y="735.50">[unknown]</text></g><g><title>[unknown] (68 samples, 22.22%)</title><rect x="39.2157%" y="709" width="22.2222%" height="15" fill="rgb(245,73,45)" fg:x="120" fg:w="68"/><text x="39.4657%" y="719.50">[unknown]</text></g><g><title>[unknown] (29 samples, 9.48%)</title><rect x="51.9608%" y="693" width="9.4771%" height="15" fill="rgb(237,203,48)" fg:x="159" fg:w="29"/><text x="52.2108%" y="703.50">[unknown]</text></g><g><title>[unknown] (17 samples, 5.56%)</title><rect x="55.8824%" y="677" width="5.5556%" height="15" fill="rgb(211,197,16)" fg:x="171" fg:w="17"/><text x="56.1324%" y="687.50">[unknow..</text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="61.1111%" y="661" width="0.3268%" height="15" fill="rgb(243,99,51)" fg:x="187" fg:w="1"/><text x="61.3611%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="61.1111%" y="645" width="0.3268%" height="15" fill="rgb(215,123,29)" fg:x="187" fg:w="1"/><text x="61.3611%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="61.1111%" y="629" width="0.3268%" height="15" fill="rgb(239,186,37)" fg:x="187" fg:w="1"/><text x="61.3611%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="61.1111%" y="613" width="0.3268%" height="15" fill="rgb(252,136,39)" fg:x="187" fg:w="1"/><text x="61.3611%" y="623.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.33%)</title><rect x="61.4379%" y="853" width="0.3268%" height="15" fill="rgb(223,213,32)" fg:x="188" fg:w="1"/><text x="61.6879%" y="863.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1 samples, 0.33%)</title><rect x="61.7647%" y="853" width="0.3268%" height="15" fill="rgb(233,115,5)" fg:x="189" fg:w="1"/><text x="62.0147%" y="863.50"></text></g><g><title>[anon] (3 samples, 0.98%)</title><rect x="61.4379%" y="869" width="0.9804%" height="15" fill="rgb(207,226,44)" fg:x="188" fg:w="3"/><text x="61.6879%" y="879.50"></text></g><g><title>leveldb::EncodeVarint32 (1 samples, 0.33%)</title><rect x="62.0915%" y="853" width="0.3268%" height="15" fill="rgb(208,126,0)" fg:x="190" fg:w="1"/><text x="62.3415%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="62.7451%" y="853" width="0.6536%" height="15" fill="rgb(244,66,21)" fg:x="192" fg:w="2"/><text x="62.9951%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="62.7451%" y="837" width="0.6536%" height="15" fill="rgb(222,97,12)" fg:x="192" fg:w="2"/><text x="62.9951%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="62.7451%" y="821" width="0.6536%" height="15" fill="rgb(219,213,19)" fg:x="192" fg:w="2"/><text x="62.9951%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="805" width="0.3268%" height="15" fill="rgb(252,169,30)" fg:x="193" fg:w="1"/><text x="63.3219%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="789" width="0.3268%" height="15" fill="rgb(206,32,51)" fg:x="193" fg:w="1"/><text x="63.3219%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="773" width="0.3268%" height="15" fill="rgb(250,172,42)" fg:x="193" fg:w="1"/><text x="63.3219%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="757" width="0.3268%" height="15" fill="rgb(209,34,43)" fg:x="193" fg:w="1"/><text x="63.3219%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="741" width="0.3268%" height="15" fill="rgb(223,11,35)" fg:x="193" fg:w="1"/><text x="63.3219%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="725" width="0.3268%" height="15" fill="rgb(251,219,26)" fg:x="193" fg:w="1"/><text x="63.3219%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="709" width="0.3268%" height="15" fill="rgb(231,119,3)" fg:x="193" fg:w="1"/><text x="63.3219%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="693" width="0.3268%" height="15" fill="rgb(216,97,11)" fg:x="193" fg:w="1"/><text x="63.3219%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="63.0719%" y="677" width="0.3268%" height="15" fill="rgb(223,59,9)" fg:x="193" fg:w="1"/><text x="63.3219%" y="687.50"></text></g><g><title>base_uint&lt;256u&gt;::CompareTo (1 samples, 0.33%)</title><rect x="63.3987%" y="853" width="0.3268%" height="15" fill="rgb(233,93,31)" fg:x="194" fg:w="1"/><text x="63.6487%" y="863.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.33%)</title><rect x="63.7255%" y="853" width="0.3268%" height="15" fill="rgb(239,81,33)" fg:x="195" fg:w="1"/><text x="63.9755%" y="863.50"></text></g><g><title>[unknown] (6 samples, 1.96%)</title><rect x="62.4183%" y="869" width="1.9608%" height="15" fill="rgb(213,120,34)" fg:x="191" fg:w="6"/><text x="62.6683%" y="879.50">[..</text></g><g><title>start_thread (1 samples, 0.33%)</title><rect x="64.0523%" y="853" width="0.3268%" height="15" fill="rgb(243,49,53)" fg:x="196" fg:w="1"/><text x="64.3023%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="64.3791%" y="853" width="0.3268%" height="15" fill="rgb(247,216,33)" fg:x="197" fg:w="1"/><text x="64.6291%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="64.3791%" y="837" width="0.3268%" height="15" fill="rgb(226,26,14)" fg:x="197" fg:w="1"/><text x="64.6291%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="64.3791%" y="821" width="0.3268%" height="15" fill="rgb(215,49,53)" fg:x="197" fg:w="1"/><text x="64.6291%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="64.3791%" y="805" width="0.3268%" height="15" fill="rgb(245,162,40)" fg:x="197" fg:w="1"/><text x="64.6291%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="64.3791%" y="789" width="0.3268%" height="15" fill="rgb(229,68,17)" fg:x="197" fg:w="1"/><text x="64.6291%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="64.3791%" y="773" width="0.3268%" height="15" fill="rgb(213,182,10)" fg:x="197" fg:w="1"/><text x="64.6291%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="64.3791%" y="757" width="0.3268%" height="15" fill="rgb(245,125,30)" fg:x="197" fg:w="1"/><text x="64.6291%" y="767.50"></text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="64.7059%" y="837" width="2.2876%" height="15" fill="rgb(232,202,2)" fg:x="198" fg:w="7"/><text x="64.9559%" y="847.50">[..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="64.7059%" y="821" width="2.2876%" height="15" fill="rgb(237,140,51)" fg:x="198" fg:w="7"/><text x="64.9559%" y="831.50">[..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="64.7059%" y="805" width="2.2876%" height="15" fill="rgb(236,157,25)" fg:x="198" fg:w="7"/><text x="64.9559%" y="815.50">[..</text></g><g><title>[unknown] (5 samples, 1.63%)</title><rect x="65.3595%" y="789" width="1.6340%" height="15" fill="rgb(219,209,0)" fg:x="200" fg:w="5"/><text x="65.6095%" y="799.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="66.0131%" y="773" width="0.9804%" height="15" fill="rgb(240,116,54)" fg:x="202" fg:w="3"/><text x="66.2631%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="66.3399%" y="757" width="0.6536%" height="15" fill="rgb(216,10,36)" fg:x="203" fg:w="2"/><text x="66.5899%" y="767.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.33%)</title><rect x="66.9935%" y="757" width="0.3268%" height="15" fill="rgb(222,72,44)" fg:x="205" fg:w="1"/><text x="67.2435%" y="767.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (2 samples, 0.65%)</title><rect x="67.3203%" y="757" width="0.6536%" height="15" fill="rgb(232,159,9)" fg:x="206" fg:w="2"/><text x="67.5703%" y="767.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (2 samples, 0.65%)</title><rect x="67.3203%" y="741" width="0.6536%" height="15" fill="rgb(210,39,32)" fg:x="206" fg:w="2"/><text x="67.5703%" y="751.50"></text></g><g><title>__unlink (2 samples, 0.65%)</title><rect x="67.3203%" y="725" width="0.6536%" height="15" fill="rgb(216,194,45)" fg:x="206" fg:w="2"/><text x="67.5703%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="709" width="0.6536%" height="15" fill="rgb(218,18,35)" fg:x="206" fg:w="2"/><text x="67.5703%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="693" width="0.6536%" height="15" fill="rgb(207,83,51)" fg:x="206" fg:w="2"/><text x="67.5703%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="677" width="0.6536%" height="15" fill="rgb(225,63,43)" fg:x="206" fg:w="2"/><text x="67.5703%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="661" width="0.6536%" height="15" fill="rgb(207,57,36)" fg:x="206" fg:w="2"/><text x="67.5703%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="645" width="0.6536%" height="15" fill="rgb(216,99,33)" fg:x="206" fg:w="2"/><text x="67.5703%" y="655.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="67.3203%" y="629" width="0.6536%" height="15" fill="rgb(225,42,16)" fg:x="206" fg:w="2"/><text x="67.5703%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="613" width="0.6536%" height="15" fill="rgb(220,201,45)" fg:x="206" fg:w="2"/><text x="67.5703%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="597" width="0.6536%" height="15" fill="rgb(225,33,4)" fg:x="206" fg:w="2"/><text x="67.5703%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="67.3203%" y="581" width="0.6536%" height="15" fill="rgb(224,33,50)" fg:x="206" fg:w="2"/><text x="67.5703%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="67.6471%" y="565" width="0.3268%" height="15" fill="rgb(246,198,51)" fg:x="207" fg:w="1"/><text x="67.8971%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="67.6471%" y="549" width="0.3268%" height="15" fill="rgb(205,22,4)" fg:x="207" fg:w="1"/><text x="67.8971%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="67.6471%" y="533" width="0.3268%" height="15" fill="rgb(206,3,8)" fg:x="207" fg:w="1"/><text x="67.8971%" y="543.50"></text></g><g><title>Next (1 samples, 0.33%)</title><rect x="67.9739%" y="741" width="0.3268%" height="15" fill="rgb(251,23,15)" fg:x="208" fg:w="1"/><text x="68.2239%" y="751.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.33%)</title><rect x="67.9739%" y="725" width="0.3268%" height="15" fill="rgb(252,88,28)" fg:x="208" fg:w="1"/><text x="68.2239%" y="735.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.33%)</title><rect x="67.9739%" y="709" width="0.3268%" height="15" fill="rgb(212,127,14)" fg:x="208" fg:w="1"/><text x="68.2239%" y="719.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1 samples, 0.33%)</title><rect x="67.9739%" y="693" width="0.3268%" height="15" fill="rgb(247,145,37)" fg:x="208" fg:w="1"/><text x="68.2239%" y="703.50"></text></g><g><title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1 samples, 0.33%)</title><rect x="67.9739%" y="677" width="0.3268%" height="15" fill="rgb(209,117,53)" fg:x="208" fg:w="1"/><text x="68.2239%" y="687.50"></text></g><g><title>leveldb::Table::BlockReader (1 samples, 0.33%)</title><rect x="67.9739%" y="661" width="0.3268%" height="15" fill="rgb(212,90,42)" fg:x="208" fg:w="1"/><text x="68.2239%" y="671.50"></text></g><g><title>leveldb::ReadBlock (1 samples, 0.33%)</title><rect x="67.9739%" y="645" width="0.3268%" height="15" fill="rgb(218,164,37)" fg:x="208" fg:w="1"/><text x="68.2239%" y="655.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.33%)</title><rect x="67.9739%" y="629" width="0.3268%" height="15" fill="rgb(246,65,34)" fg:x="208" fg:w="1"/><text x="68.2239%" y="639.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.33%)</title><rect x="67.9739%" y="613" width="0.3268%" height="15" fill="rgb(231,100,33)" fg:x="208" fg:w="1"/><text x="68.2239%" y="623.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="68.3007%" y="485" width="0.3268%" height="15" fill="rgb(228,126,14)" fg:x="209" fg:w="1"/><text x="68.5507%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="68.3007%" y="469" width="0.3268%" height="15" fill="rgb(215,173,21)" fg:x="209" fg:w="1"/><text x="68.5507%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="68.3007%" y="453" width="0.3268%" height="15" fill="rgb(210,6,40)" fg:x="209" fg:w="1"/><text x="68.5507%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="68.3007%" y="437" width="0.3268%" height="15" fill="rgb(212,48,18)" fg:x="209" fg:w="1"/><text x="68.5507%" y="447.50"></text></g><g><title>leveldb::DBImpl::FinishCompactionOutputFile (2 samples, 0.65%)</title><rect x="68.3007%" y="741" width="0.6536%" height="15" fill="rgb(230,214,11)" fg:x="209" fg:w="2"/><text x="68.5507%" y="751.50"></text></g><g><title>Sync (2 samples, 0.65%)</title><rect x="68.3007%" y="725" width="0.6536%" height="15" fill="rgb(254,105,39)" fg:x="209" fg:w="2"/><text x="68.5507%" y="735.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (2 samples, 0.65%)</title><rect x="68.3007%" y="709" width="0.6536%" height="15" fill="rgb(245,158,5)" fg:x="209" fg:w="2"/><text x="68.5507%" y="719.50"></text></g><g><title>fdatasync (2 samples, 0.65%)</title><rect x="68.3007%" y="693" width="0.6536%" height="15" fill="rgb(249,208,11)" fg:x="209" fg:w="2"/><text x="68.5507%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="68.3007%" y="677" width="0.6536%" height="15" fill="rgb(210,39,28)" fg:x="209" fg:w="2"/><text x="68.5507%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="68.3007%" y="661" width="0.6536%" height="15" fill="rgb(211,56,53)" fg:x="209" fg:w="2"/><text x="68.5507%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="68.3007%" y="645" width="0.6536%" height="15" fill="rgb(226,201,30)" fg:x="209" fg:w="2"/><text x="68.5507%" y="655.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="68.3007%" y="629" width="0.6536%" height="15" fill="rgb(239,101,34)" fg:x="209" fg:w="2"/><text x="68.5507%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="68.3007%" y="613" width="0.6536%" height="15" fill="rgb(226,209,5)" fg:x="209" fg:w="2"/><text x="68.5507%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="68.3007%" y="597" width="0.6536%" height="15" fill="rgb(250,105,47)" fg:x="209" fg:w="2"/><text x="68.5507%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="68.3007%" y="581" width="0.6536%" height="15" fill="rgb(230,72,3)" fg:x="209" fg:w="2"/><text x="68.5507%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="68.3007%" y="565" width="0.6536%" height="15" fill="rgb(232,218,39)" fg:x="209" fg:w="2"/><text x="68.5507%" y="575.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="68.3007%" y="549" width="0.6536%" height="15" fill="rgb(248,166,6)" fg:x="209" fg:w="2"/><text x="68.5507%" y="559.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="68.3007%" y="533" width="0.6536%" height="15" fill="rgb(247,89,20)" fg:x="209" fg:w="2"/><text x="68.5507%" y="543.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="68.3007%" y="517" width="0.6536%" height="15" fill="rgb(248,130,54)" fg:x="209" fg:w="2"/><text x="68.5507%" y="527.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="68.3007%" y="501" width="0.6536%" height="15" fill="rgb(234,196,4)" fg:x="209" fg:w="2"/><text x="68.5507%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="68.6275%" y="485" width="0.3268%" height="15" fill="rgb(250,143,31)" fg:x="210" fg:w="1"/><text x="68.8775%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="68.6275%" y="469" width="0.3268%" height="15" fill="rgb(211,110,34)" fg:x="210" fg:w="1"/><text x="68.8775%" y="479.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.98%)</title><rect x="68.9542%" y="709" width="0.9804%" height="15" fill="rgb(215,124,48)" fg:x="211" fg:w="3"/><text x="69.2042%" y="719.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2 samples, 0.65%)</title><rect x="69.2810%" y="693" width="0.6536%" height="15" fill="rgb(216,46,13)" fg:x="212" fg:w="2"/><text x="69.5310%" y="703.50"></text></g><g><title>leveldb::BlockBuilder::Add (4 samples, 1.31%)</title><rect x="68.9542%" y="725" width="1.3072%" height="15" fill="rgb(205,184,25)" fg:x="211" fg:w="4"/><text x="69.2042%" y="735.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.33%)</title><rect x="69.9346%" y="709" width="0.3268%" height="15" fill="rgb(228,1,10)" fg:x="214" fg:w="1"/><text x="70.1846%" y="719.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.33%)</title><rect x="69.9346%" y="693" width="0.3268%" height="15" fill="rgb(213,116,27)" fg:x="214" fg:w="1"/><text x="70.1846%" y="703.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (1 samples, 0.33%)</title><rect x="70.2614%" y="725" width="0.3268%" height="15" fill="rgb(241,95,50)" fg:x="215" fg:w="1"/><text x="70.5114%" y="735.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (1 samples, 0.33%)</title><rect x="70.2614%" y="709" width="0.3268%" height="15" fill="rgb(238,48,32)" fg:x="215" fg:w="1"/><text x="70.5114%" y="719.50"></text></g><g><title>leveldb::Hash (1 samples, 0.33%)</title><rect x="70.2614%" y="693" width="0.3268%" height="15" fill="rgb(235,113,49)" fg:x="215" fg:w="1"/><text x="70.5114%" y="703.50"></text></g><g><title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1 samples, 0.33%)</title><rect x="70.9150%" y="709" width="0.3268%" height="15" fill="rgb(205,127,43)" fg:x="217" fg:w="1"/><text x="71.1650%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="70.9150%" y="693" width="0.3268%" height="15" fill="rgb(250,162,2)" fg:x="217" fg:w="1"/><text x="71.1650%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="70.9150%" y="677" width="0.3268%" height="15" fill="rgb(220,13,41)" fg:x="217" fg:w="1"/><text x="71.1650%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="70.9150%" y="661" width="0.3268%" height="15" fill="rgb(249,221,25)" fg:x="217" fg:w="1"/><text x="71.1650%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="70.9150%" y="645" width="0.3268%" height="15" fill="rgb(215,208,19)" fg:x="217" fg:w="1"/><text x="71.1650%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="70.9150%" y="629" width="0.3268%" height="15" fill="rgb(236,175,2)" fg:x="217" fg:w="1"/><text x="71.1650%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="70.9150%" y="613" width="0.3268%" height="15" fill="rgb(241,52,2)" fg:x="217" fg:w="1"/><text x="71.1650%" y="623.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (3 samples, 0.98%)</title><rect x="70.5882%" y="725" width="0.9804%" height="15" fill="rgb(248,140,14)" fg:x="216" fg:w="3"/><text x="70.8382%" y="735.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (1 samples, 0.33%)</title><rect x="71.2418%" y="709" width="0.3268%" height="15" fill="rgb(253,22,42)" fg:x="218" fg:w="1"/><text x="71.4918%" y="719.50"></text></g><g><title>leveldb::InternalKey::DecodeFrom (1 samples, 0.33%)</title><rect x="71.2418%" y="693" width="0.3268%" height="15" fill="rgb(234,61,47)" fg:x="218" fg:w="1"/><text x="71.4918%" y="703.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.33%)</title><rect x="71.2418%" y="677" width="0.3268%" height="15" fill="rgb(208,226,15)" fg:x="218" fg:w="1"/><text x="71.4918%" y="687.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.33%)</title><rect x="71.2418%" y="661" width="0.3268%" height="15" fill="rgb(217,221,4)" fg:x="218" fg:w="1"/><text x="71.4918%" y="671.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (1 samples, 0.33%)</title><rect x="71.2418%" y="645" width="0.3268%" height="15" fill="rgb(212,174,34)" fg:x="218" fg:w="1"/><text x="71.4918%" y="655.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.33%)</title><rect x="71.2418%" y="629" width="0.3268%" height="15" fill="rgb(253,83,4)" fg:x="218" fg:w="1"/><text x="71.4918%" y="639.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.33%)</title><rect x="71.5686%" y="725" width="0.3268%" height="15" fill="rgb(250,195,49)" fg:x="219" fg:w="1"/><text x="71.8186%" y="735.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.33%)</title><rect x="71.5686%" y="709" width="0.3268%" height="15" fill="rgb(241,192,25)" fg:x="219" fg:w="1"/><text x="71.8186%" y="719.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.33%)</title><rect x="71.5686%" y="693" width="0.3268%" height="15" fill="rgb(208,124,10)" fg:x="219" fg:w="1"/><text x="71.8186%" y="703.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.33%)</title><rect x="71.5686%" y="677" width="0.3268%" height="15" fill="rgb(222,33,0)" fg:x="219" fg:w="1"/><text x="71.8186%" y="687.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.33%)</title><rect x="71.5686%" y="661" width="0.3268%" height="15" fill="rgb(234,209,28)" fg:x="219" fg:w="1"/><text x="71.8186%" y="671.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="72.2222%" y="533" width="0.6536%" height="15" fill="rgb(224,11,23)" fg:x="221" fg:w="2"/><text x="72.4722%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="72.2222%" y="517" width="0.6536%" height="15" fill="rgb(232,99,1)" fg:x="221" fg:w="2"/><text x="72.4722%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="72.2222%" y="501" width="0.6536%" height="15" fill="rgb(237,95,45)" fg:x="221" fg:w="2"/><text x="72.4722%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="72.2222%" y="485" width="0.6536%" height="15" fill="rgb(208,109,11)" fg:x="221" fg:w="2"/><text x="72.4722%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="72.5490%" y="469" width="0.3268%" height="15" fill="rgb(216,190,48)" fg:x="222" fg:w="1"/><text x="72.7990%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="72.5490%" y="453" width="0.3268%" height="15" fill="rgb(251,171,36)" fg:x="222" fg:w="1"/><text x="72.7990%" y="463.50"></text></g><g><title>[[ext4]] (6 samples, 1.96%)</title><rect x="72.2222%" y="581" width="1.9608%" height="15" fill="rgb(230,62,22)" fg:x="221" fg:w="6"/><text x="72.4722%" y="591.50">[..</text></g><g><title>[unknown] (6 samples, 1.96%)</title><rect x="72.2222%" y="565" width="1.9608%" height="15" fill="rgb(225,114,35)" fg:x="221" fg:w="6"/><text x="72.4722%" y="575.50">[..</text></g><g><title>[[ext4]] (6 samples, 1.96%)</title><rect x="72.2222%" y="549" width="1.9608%" height="15" fill="rgb(215,118,42)" fg:x="221" fg:w="6"/><text x="72.4722%" y="559.50">[..</text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="72.8758%" y="533" width="1.3072%" height="15" fill="rgb(243,119,21)" fg:x="223" fg:w="4"/><text x="73.1258%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="72.8758%" y="517" width="1.3072%" height="15" fill="rgb(252,177,53)" fg:x="223" fg:w="4"/><text x="73.1258%" y="527.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="72.8758%" y="501" width="1.3072%" height="15" fill="rgb(237,209,29)" fg:x="223" fg:w="4"/><text x="73.1258%" y="511.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="72.8758%" y="485" width="1.3072%" height="15" fill="rgb(212,65,23)" fg:x="223" fg:w="4"/><text x="73.1258%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="73.2026%" y="469" width="0.9804%" height="15" fill="rgb(230,222,46)" fg:x="224" fg:w="3"/><text x="73.4526%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="73.8562%" y="453" width="0.3268%" height="15" fill="rgb(215,135,32)" fg:x="226" fg:w="1"/><text x="74.1062%" y="463.50"></text></g><g><title>Flush (8 samples, 2.61%)</title><rect x="71.8954%" y="709" width="2.6144%" height="15" fill="rgb(246,101,22)" fg:x="220" fg:w="8"/><text x="72.1454%" y="719.50">Fl..</text></g><g><title>FlushBuffer (8 samples, 2.61%)</title><rect x="71.8954%" y="693" width="2.6144%" height="15" fill="rgb(206,107,13)" fg:x="220" fg:w="8"/><text x="72.1454%" y="703.50">Fl..</text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (8 samples, 2.61%)</title><rect x="71.8954%" y="677" width="2.6144%" height="15" fill="rgb(250,100,44)" fg:x="220" fg:w="8"/><text x="72.1454%" y="687.50">le..</text></g><g><title>__GI___libc_write (8 samples, 2.61%)</title><rect x="71.8954%" y="661" width="2.6144%" height="15" fill="rgb(231,147,38)" fg:x="220" fg:w="8"/><text x="72.1454%" y="671.50">__..</text></g><g><title>[unknown] (8 samples, 2.61%)</title><rect x="71.8954%" y="645" width="2.6144%" height="15" fill="rgb(229,8,40)" fg:x="220" fg:w="8"/><text x="72.1454%" y="655.50">[u..</text></g><g><title>[unknown] (8 samples, 2.61%)</title><rect x="71.8954%" y="629" width="2.6144%" height="15" fill="rgb(221,135,30)" fg:x="220" fg:w="8"/><text x="72.1454%" y="639.50">[u..</text></g><g><title>[unknown] (8 samples, 2.61%)</title><rect x="71.8954%" y="613" width="2.6144%" height="15" fill="rgb(249,193,18)" fg:x="220" fg:w="8"/><text x="72.1454%" y="623.50">[u..</text></g><g><title>[unknown] (7 samples, 2.29%)</title><rect x="72.2222%" y="597" width="2.2876%" height="15" fill="rgb(209,133,39)" fg:x="221" fg:w="7"/><text x="72.4722%" y="607.50">[..</text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="74.1830%" y="581" width="0.3268%" height="15" fill="rgb(232,100,14)" fg:x="227" fg:w="1"/><text x="74.4330%" y="591.50"></text></g><g><title>leveldb::DBImpl::DoCompactionWork (21 samples, 6.86%)</title><rect x="67.9739%" y="757" width="6.8627%" height="15" fill="rgb(224,185,1)" fg:x="208" fg:w="21"/><text x="68.2239%" y="767.50">leveldb::..</text></g><g><title>leveldb::TableBuilder::Add (18 samples, 5.88%)</title><rect x="68.9542%" y="741" width="5.8824%" height="15" fill="rgb(223,139,8)" fg:x="211" fg:w="18"/><text x="69.2042%" y="751.50">leveldb..</text></g><g><title>leveldb::TableBuilder::Flush (9 samples, 2.94%)</title><rect x="71.8954%" y="725" width="2.9412%" height="15" fill="rgb(232,213,38)" fg:x="220" fg:w="9"/><text x="72.1454%" y="735.50">le..</text></g><g><title>leveldb::TableBuilder::WriteBlock (1 samples, 0.33%)</title><rect x="74.5098%" y="709" width="0.3268%" height="15" fill="rgb(207,94,22)" fg:x="228" fg:w="1"/><text x="74.7598%" y="719.50"></text></g><g><title>leveldb::TableBuilder::WriteRawBlock (1 samples, 0.33%)</title><rect x="74.5098%" y="693" width="0.3268%" height="15" fill="rgb(219,183,54)" fg:x="228" fg:w="1"/><text x="74.7598%" y="703.50"></text></g><g><title>leveldb::crc32c::Value (1 samples, 0.33%)</title><rect x="74.5098%" y="677" width="0.3268%" height="15" fill="rgb(216,185,54)" fg:x="228" fg:w="1"/><text x="74.7598%" y="687.50"></text></g><g><title>crc32c::ExtendSse42 (1 samples, 0.33%)</title><rect x="74.5098%" y="661" width="0.3268%" height="15" fill="rgb(254,217,39)" fg:x="228" fg:w="1"/><text x="74.7598%" y="671.50"></text></g><g><title>_mm_crc32_u64 (1 samples, 0.33%)</title><rect x="74.5098%" y="645" width="0.3268%" height="15" fill="rgb(240,178,23)" fg:x="228" fg:w="1"/><text x="74.7598%" y="655.50"></text></g><g><title>leveldb::DBImpl::BackgroundCompaction (26 samples, 8.50%)</title><rect x="66.9935%" y="773" width="8.4967%" height="15" fill="rgb(218,11,47)" fg:x="205" fg:w="26"/><text x="67.2435%" y="783.50">leveldb::DBI..</text></g><g><title>leveldb::InternalKeyComparator::Compare (2 samples, 0.65%)</title><rect x="74.8366%" y="757" width="0.6536%" height="15" fill="rgb(218,51,51)" fg:x="229" fg:w="2"/><text x="75.0866%" y="767.50"></text></g><g><title>__clone (35 samples, 11.44%)</title><rect x="64.3791%" y="869" width="11.4379%" height="15" fill="rgb(238,126,27)" fg:x="197" fg:w="35"/><text x="64.6291%" y="879.50">__clone</text></g><g><title>start_thread (34 samples, 11.11%)</title><rect x="64.7059%" y="853" width="11.1111%" height="15" fill="rgb(249,202,22)" fg:x="198" fg:w="34"/><text x="64.9559%" y="863.50">start_thread</text></g><g><title>execute_native_thread_routine (27 samples, 8.82%)</title><rect x="66.9935%" y="837" width="8.8235%" height="15" fill="rgb(254,195,49)" fg:x="205" fg:w="27"/><text x="67.2435%" y="847.50">execute_nati..</text></g><g><title>BackgroundThreadEntryPoint (27 samples, 8.82%)</title><rect x="66.9935%" y="821" width="8.8235%" height="15" fill="rgb(208,123,14)" fg:x="205" fg:w="27"/><text x="67.2435%" y="831.50">BackgroundTh..</text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadEntryPoint (27 samples, 8.82%)</title><rect x="66.9935%" y="805" width="8.8235%" height="15" fill="rgb(224,200,8)" fg:x="205" fg:w="27"/><text x="67.2435%" y="815.50">leveldb::(an..</text></g><g><title>leveldb::DBImpl::BackgroundCall (27 samples, 8.82%)</title><rect x="66.9935%" y="789" width="8.8235%" height="15" fill="rgb(217,61,36)" fg:x="205" fg:w="27"/><text x="67.2435%" y="799.50">leveldb::DBI..</text></g><g><title>leveldb::DBImpl::CompactMemTable (1 samples, 0.33%)</title><rect x="75.4902%" y="773" width="0.3268%" height="15" fill="rgb(206,35,45)" fg:x="231" fg:w="1"/><text x="75.7402%" y="783.50"></text></g><g><title>leveldb::DBImpl::DeleteObsoleteFiles (1 samples, 0.33%)</title><rect x="75.4902%" y="757" width="0.3268%" height="15" fill="rgb(217,65,33)" fg:x="231" fg:w="1"/><text x="75.7402%" y="767.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixEnv::DeleteFile (1 samples, 0.33%)</title><rect x="75.4902%" y="741" width="0.3268%" height="15" fill="rgb(222,158,48)" fg:x="231" fg:w="1"/><text x="75.7402%" y="751.50"></text></g><g><title>__unlink (1 samples, 0.33%)</title><rect x="75.4902%" y="725" width="0.3268%" height="15" fill="rgb(254,2,54)" fg:x="231" fg:w="1"/><text x="75.7402%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="709" width="0.3268%" height="15" fill="rgb(250,143,38)" fg:x="231" fg:w="1"/><text x="75.7402%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="693" width="0.3268%" height="15" fill="rgb(248,25,0)" fg:x="231" fg:w="1"/><text x="75.7402%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="677" width="0.3268%" height="15" fill="rgb(206,152,27)" fg:x="231" fg:w="1"/><text x="75.7402%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="661" width="0.3268%" height="15" fill="rgb(240,77,30)" fg:x="231" fg:w="1"/><text x="75.7402%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="645" width="0.3268%" height="15" fill="rgb(231,5,3)" fg:x="231" fg:w="1"/><text x="75.7402%" y="655.50"></text></g><g><title>[[ext4]] (1 samples, 0.33%)</title><rect x="75.4902%" y="629" width="0.3268%" height="15" fill="rgb(207,226,32)" fg:x="231" fg:w="1"/><text x="75.7402%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="613" width="0.3268%" height="15" fill="rgb(222,207,47)" fg:x="231" fg:w="1"/><text x="75.7402%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="597" width="0.3268%" height="15" fill="rgb(229,115,45)" fg:x="231" fg:w="1"/><text x="75.7402%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="581" width="0.3268%" height="15" fill="rgb(224,191,6)" fg:x="231" fg:w="1"/><text x="75.7402%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="565" width="0.3268%" height="15" fill="rgb(230,227,24)" fg:x="231" fg:w="1"/><text x="75.7402%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="75.4902%" y="549" width="0.3268%" height="15" fill="rgb(228,80,19)" fg:x="231" fg:w="1"/><text x="75.7402%" y="559.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.33%)</title><rect x="75.8170%" y="869" width="0.3268%" height="15" fill="rgb(247,229,0)" fg:x="232" fg:w="1"/><text x="76.0670%" y="879.50"></text></g><g><title>main (1 samples, 0.33%)</title><rect x="75.8170%" y="853" width="0.3268%" height="15" fill="rgb(237,194,15)" fg:x="232" fg:w="1"/><text x="76.0670%" y="863.50"></text></g><g><title>main (1 samples, 0.33%)</title><rect x="75.8170%" y="837" width="0.3268%" height="15" fill="rgb(219,203,20)" fg:x="232" fg:w="1"/><text x="76.0670%" y="847.50"></text></g><g><title>AppInitMain (1 samples, 0.33%)</title><rect x="75.8170%" y="821" width="0.3268%" height="15" fill="rgb(234,128,8)" fg:x="232" fg:w="1"/><text x="76.0670%" y="831.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.33%)</title><rect x="75.8170%" y="805" width="0.3268%" height="15" fill="rgb(248,202,8)" fg:x="232" fg:w="1"/><text x="76.0670%" y="815.50"></text></g><g><title>operator (1 samples, 0.33%)</title><rect x="75.8170%" y="789" width="0.3268%" height="15" fill="rgb(206,104,37)" fg:x="232" fg:w="1"/><text x="76.0670%" y="799.50"></text></g><g><title>InitAndLoadChainstate (1 samples, 0.33%)</title><rect x="75.8170%" y="773" width="0.3268%" height="15" fill="rgb(223,8,27)" fg:x="232" fg:w="1"/><text x="76.0670%" y="783.50"></text></g><g><title>node::LoadChainstate (1 samples, 0.33%)</title><rect x="75.8170%" y="757" width="0.3268%" height="15" fill="rgb(216,217,28)" fg:x="232" fg:w="1"/><text x="76.0670%" y="767.50"></text></g><g><title>node::CompleteChainstateInitialization (1 samples, 0.33%)</title><rect x="75.8170%" y="741" width="0.3268%" height="15" fill="rgb(249,199,1)" fg:x="232" fg:w="1"/><text x="76.0670%" y="751.50"></text></g><g><title>ChainstateManager::LoadBlockIndex (1 samples, 0.33%)</title><rect x="75.8170%" y="725" width="0.3268%" height="15" fill="rgb(240,85,17)" fg:x="232" fg:w="1"/><text x="76.0670%" y="735.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (1 samples, 0.33%)</title><rect x="75.8170%" y="709" width="0.3268%" height="15" fill="rgb(206,108,45)" fg:x="232" fg:w="1"/><text x="76.0670%" y="719.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.33%)</title><rect x="75.8170%" y="693" width="0.3268%" height="15" fill="rgb(245,210,41)" fg:x="232" fg:w="1"/><text x="76.0670%" y="703.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.33%)</title><rect x="75.8170%" y="677" width="0.3268%" height="15" fill="rgb(206,13,37)" fg:x="232" fg:w="1"/><text x="76.0670%" y="687.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.33%)</title><rect x="75.8170%" y="661" width="0.3268%" height="15" fill="rgb(250,61,18)" fg:x="232" fg:w="1"/><text x="76.0670%" y="671.50"></text></g><g><title>Next (1 samples, 0.33%)</title><rect x="75.8170%" y="645" width="0.3268%" height="15" fill="rgb(235,172,48)" fg:x="232" fg:w="1"/><text x="76.0670%" y="655.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.33%)</title><rect x="75.8170%" y="629" width="0.3268%" height="15" fill="rgb(249,201,17)" fg:x="232" fg:w="1"/><text x="76.0670%" y="639.50"></text></g><g><title>SkipEmptyDataBlocksForward (1 samples, 0.33%)</title><rect x="75.8170%" y="613" width="0.3268%" height="15" fill="rgb(219,208,6)" fg:x="232" fg:w="1"/><text x="76.0670%" y="623.50"></text></g><g><title>leveldb::IteratorWrapper::Next (1 samples, 0.33%)</title><rect x="75.8170%" y="597" width="0.3268%" height="15" fill="rgb(248,31,23)" fg:x="232" fg:w="1"/><text x="76.0670%" y="607.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.33%)</title><rect x="75.8170%" y="581" width="0.3268%" height="15" fill="rgb(245,15,42)" fg:x="232" fg:w="1"/><text x="76.0670%" y="591.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.33%)</title><rect x="75.8170%" y="565" width="0.3268%" height="15" fill="rgb(222,217,39)" fg:x="232" fg:w="1"/><text x="76.0670%" y="575.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.33%)</title><rect x="75.8170%" y="549" width="0.3268%" height="15" fill="rgb(210,219,27)" fg:x="232" fg:w="1"/><text x="76.0670%" y="559.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.33%)</title><rect x="75.8170%" y="533" width="0.3268%" height="15" fill="rgb(252,166,36)" fg:x="232" fg:w="1"/><text x="76.0670%" y="543.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.33%)</title><rect x="76.1438%" y="869" width="0.3268%" height="15" fill="rgb(245,132,34)" fg:x="233" fg:w="1"/><text x="76.3938%" y="879.50"></text></g><g><title>__printf_buffer (3 samples, 0.98%)</title><rect x="76.4706%" y="869" width="0.9804%" height="15" fill="rgb(236,54,3)" fg:x="234" fg:w="3"/><text x="76.7206%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="77.1242%" y="853" width="0.3268%" height="15" fill="rgb(241,173,43)" fg:x="236" fg:w="1"/><text x="77.3742%" y="863.50"></text></g><g><title>_itoa_word (1 samples, 0.33%)</title><rect x="77.4510%" y="869" width="0.3268%" height="15" fill="rgb(215,190,9)" fg:x="237" fg:w="1"/><text x="77.7010%" y="879.50"></text></g><g><title>CSHA512::Write (1 samples, 0.33%)</title><rect x="79.4118%" y="565" width="0.3268%" height="15" fill="rgb(242,101,16)" fg:x="243" fg:w="1"/><text x="79.6618%" y="575.50"></text></g><g><title>AppInit (10 samples, 3.27%)</title><rect x="77.7778%" y="805" width="3.2680%" height="15" fill="rgb(223,190,21)" fg:x="238" fg:w="10"/><text x="78.0278%" y="815.50">App..</text></g><g><title>std::__detail::_MakeUniq&lt;kernel::Context&gt;::__single_object std::make_unique&lt;kernel::Context&gt; (10 samples, 3.27%)</title><rect x="77.7778%" y="789" width="3.2680%" height="15" fill="rgb(215,228,25)" fg:x="238" fg:w="10"/><text x="78.0278%" y="799.50">std..</text></g><g><title>kernel::Context::Context (10 samples, 3.27%)</title><rect x="77.7778%" y="773" width="3.2680%" height="15" fill="rgb(225,36,22)" fg:x="238" fg:w="10"/><text x="78.0278%" y="783.50">ker..</text></g><g><title>call_once&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (10 samples, 3.27%)</title><rect x="77.7778%" y="757" width="3.2680%" height="15" fill="rgb(251,106,46)" fg:x="238" fg:w="10"/><text x="78.0278%" y="767.50">cal..</text></g><g><title>kernel::Context::Context (10 samples, 3.27%)</title><rect x="77.7778%" y="741" width="3.2680%" height="15" fill="rgb(208,90,1)" fg:x="238" fg:w="10"/><text x="78.0278%" y="751.50">ker..</text></g><g><title>__pthread_once_slow (10 samples, 3.27%)</title><rect x="77.7778%" y="725" width="3.2680%" height="15" fill="rgb(243,10,4)" fg:x="238" fg:w="10"/><text x="78.0278%" y="735.50">__p..</text></g><g><title>_FUN (10 samples, 3.27%)</title><rect x="77.7778%" y="709" width="3.2680%" height="15" fill="rgb(212,137,27)" fg:x="238" fg:w="10"/><text x="78.0278%" y="719.50">_FUN</text></g><g><title>operator (10 samples, 3.27%)</title><rect x="77.7778%" y="693" width="3.2680%" height="15" fill="rgb(231,220,49)" fg:x="238" fg:w="10"/><text x="78.0278%" y="703.50">ope..</text></g><g><title>operator (10 samples, 3.27%)</title><rect x="77.7778%" y="677" width="3.2680%" height="15" fill="rgb(237,96,20)" fg:x="238" fg:w="10"/><text x="78.0278%" y="687.50">ope..</text></g><g><title>__invoke&lt;kernel::Context::Context()::&lt;lambda()&gt; &gt; (10 samples, 3.27%)</title><rect x="77.7778%" y="661" width="3.2680%" height="15" fill="rgb(239,229,30)" fg:x="238" fg:w="10"/><text x="78.0278%" y="671.50">__i..</text></g><g><title>__invoke_impl&lt;void, kernel::Context::Context()::&lt;lambda()&gt; &gt; (10 samples, 3.27%)</title><rect x="77.7778%" y="645" width="3.2680%" height="15" fill="rgb(219,65,33)" fg:x="238" fg:w="10"/><text x="78.0278%" y="655.50">__i..</text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;kernel::Context::Context()::{lambda()#1}&gt;(std::once_flag&amp;, kernel::Context::Context()::{lambda()#1}&amp;&amp;)::{lambda()#1}&gt; (10 samples, 3.27%)</title><rect x="77.7778%" y="629" width="3.2680%" height="15" fill="rgb(243,134,7)" fg:x="238" fg:w="10"/><text x="78.0278%" y="639.50">std..</text></g><g><title>RandomInit (10 samples, 3.27%)</title><rect x="77.7778%" y="613" width="3.2680%" height="15" fill="rgb(216,177,54)" fg:x="238" fg:w="10"/><text x="78.0278%" y="623.50">Ran..</text></g><g><title>CSHA512::Finalize (9 samples, 2.94%)</title><rect x="78.1046%" y="597" width="2.9412%" height="15" fill="rgb(211,160,20)" fg:x="239" fg:w="9"/><text x="78.3546%" y="607.50">CS..</text></g><g><title>CSHA512::Write (9 samples, 2.94%)</title><rect x="78.1046%" y="581" width="2.9412%" height="15" fill="rgb(239,85,39)" fg:x="239" fg:w="9"/><text x="78.3546%" y="591.50">CS..</text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="79.7386%" y="565" width="1.3072%" height="15" fill="rgb(232,125,22)" fg:x="244" fg:w="4"/><text x="79.9886%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="79.7386%" y="549" width="1.3072%" height="15" fill="rgb(244,57,34)" fg:x="244" fg:w="4"/><text x="79.9886%" y="559.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="79.7386%" y="533" width="1.3072%" height="15" fill="rgb(214,203,32)" fg:x="244" fg:w="4"/><text x="79.9886%" y="543.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="79.7386%" y="517" width="1.3072%" height="15" fill="rgb(207,58,43)" fg:x="244" fg:w="4"/><text x="79.9886%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="501" width="0.9804%" height="15" fill="rgb(215,193,15)" fg:x="245" fg:w="3"/><text x="80.3154%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="485" width="0.9804%" height="15" fill="rgb(232,15,44)" fg:x="245" fg:w="3"/><text x="80.3154%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="469" width="0.9804%" height="15" fill="rgb(212,3,48)" fg:x="245" fg:w="3"/><text x="80.3154%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="453" width="0.9804%" height="15" fill="rgb(218,128,7)" fg:x="245" fg:w="3"/><text x="80.3154%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="437" width="0.9804%" height="15" fill="rgb(226,216,39)" fg:x="245" fg:w="3"/><text x="80.3154%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="421" width="0.9804%" height="15" fill="rgb(243,47,51)" fg:x="245" fg:w="3"/><text x="80.3154%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="405" width="0.9804%" height="15" fill="rgb(241,183,40)" fg:x="245" fg:w="3"/><text x="80.3154%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="389" width="0.9804%" height="15" fill="rgb(231,217,32)" fg:x="245" fg:w="3"/><text x="80.3154%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="373" width="0.9804%" height="15" fill="rgb(229,61,38)" fg:x="245" fg:w="3"/><text x="80.3154%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="357" width="0.9804%" height="15" fill="rgb(225,210,5)" fg:x="245" fg:w="3"/><text x="80.3154%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="341" width="0.9804%" height="15" fill="rgb(231,79,45)" fg:x="245" fg:w="3"/><text x="80.3154%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="325" width="0.9804%" height="15" fill="rgb(224,100,7)" fg:x="245" fg:w="3"/><text x="80.3154%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="80.0654%" y="309" width="0.9804%" height="15" fill="rgb(241,198,18)" fg:x="245" fg:w="3"/><text x="80.3154%" y="319.50"></text></g><g><title>Chainstate::LoadChainTip (1 samples, 0.33%)</title><rect x="81.0458%" y="693" width="0.3268%" height="15" fill="rgb(252,97,53)" fg:x="248" fg:w="1"/><text x="81.2958%" y="703.50"></text></g><g><title>CChain::SetTip (1 samples, 0.33%)</title><rect x="81.0458%" y="677" width="0.3268%" height="15" fill="rgb(220,88,7)" fg:x="248" fg:w="1"/><text x="81.2958%" y="687.50"></text></g><g><title>node::BlockManager::GetAllBlockIndices (1 samples, 0.33%)</title><rect x="81.3725%" y="677" width="0.3268%" height="15" fill="rgb(213,176,14)" fg:x="249" fg:w="1"/><text x="81.6225%" y="687.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.33%)</title><rect x="81.3725%" y="661" width="0.3268%" height="15" fill="rgb(246,73,7)" fg:x="249" fg:w="1"/><text x="81.6225%" y="671.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.33%)</title><rect x="81.3725%" y="645" width="0.3268%" height="15" fill="rgb(245,64,36)" fg:x="249" fg:w="1"/><text x="81.6225%" y="655.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.33%)</title><rect x="81.3725%" y="629" width="0.3268%" height="15" fill="rgb(245,80,10)" fg:x="249" fg:w="1"/><text x="81.6225%" y="639.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.33%)</title><rect x="81.6993%" y="597" width="0.3268%" height="15" fill="rgb(232,107,50)" fg:x="250" fg:w="1"/><text x="81.9493%" y="607.50"></text></g><g><title>base_uint&lt;256u&gt;::bits (1 samples, 0.33%)</title><rect x="82.0261%" y="597" width="0.3268%" height="15" fill="rgb(253,3,0)" fg:x="251" fg:w="1"/><text x="82.2761%" y="607.50"></text></g><g><title>base_uint&lt;256u&gt;::operator-= (1 samples, 0.33%)</title><rect x="82.3529%" y="597" width="0.3268%" height="15" fill="rgb(212,99,53)" fg:x="252" fg:w="1"/><text x="82.6029%" y="607.50"></text></g><g><title>base_uint&lt;256u&gt;::operator- (1 samples, 0.33%)</title><rect x="82.3529%" y="581" width="0.3268%" height="15" fill="rgb(249,111,54)" fg:x="252" fg:w="1"/><text x="82.6029%" y="591.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (3 samples, 0.98%)</title><rect x="82.6797%" y="597" width="0.9804%" height="15" fill="rgb(249,55,30)" fg:x="253" fg:w="3"/><text x="82.9297%" y="607.50"></text></g><g><title>base_uint&lt;256u&gt;::operator/= (9 samples, 2.94%)</title><rect x="81.6993%" y="613" width="2.9412%" height="15" fill="rgb(237,47,42)" fg:x="250" fg:w="9"/><text x="81.9493%" y="623.50">ba..</text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (3 samples, 0.98%)</title><rect x="83.6601%" y="597" width="0.9804%" height="15" fill="rgb(211,20,18)" fg:x="256" fg:w="3"/><text x="83.9101%" y="607.50"></text></g><g><title>GetBlockProof (10 samples, 3.27%)</title><rect x="81.6993%" y="645" width="3.2680%" height="15" fill="rgb(231,203,46)" fg:x="250" fg:w="10"/><text x="81.9493%" y="655.50">Get..</text></g><g><title>operator/ (10 samples, 3.27%)</title><rect x="81.6993%" y="629" width="3.2680%" height="15" fill="rgb(237,142,3)" fg:x="250" fg:w="10"/><text x="81.9493%" y="639.50">ope..</text></g><g><title>base_uint&lt;256u&gt;::operator&gt;&gt;=(unsigned int) (1 samples, 0.33%)</title><rect x="84.6405%" y="613" width="0.3268%" height="15" fill="rgb(241,107,1)" fg:x="259" fg:w="1"/><text x="84.8905%" y="623.50"></text></g><g><title>CheckProofOfWorkImpl (2 samples, 0.65%)</title><rect x="84.9673%" y="629" width="0.6536%" height="15" fill="rgb(229,83,13)" fg:x="260" fg:w="2"/><text x="85.2173%" y="639.50"></text></g><g><title>arith_uint256::SetCompact (2 samples, 0.65%)</title><rect x="84.9673%" y="613" width="0.6536%" height="15" fill="rgb(241,91,40)" fg:x="260" fg:w="2"/><text x="85.2173%" y="623.50"></text></g><g><title>Next (1 samples, 0.33%)</title><rect x="85.6209%" y="629" width="0.3268%" height="15" fill="rgb(225,3,45)" fg:x="262" fg:w="1"/><text x="85.8709%" y="639.50"></text></g><g><title>leveldb::(anonymous namespace)::DBIter::Next (1 samples, 0.33%)</title><rect x="85.6209%" y="613" width="0.3268%" height="15" fill="rgb(244,223,14)" fg:x="262" fg:w="1"/><text x="85.8709%" y="623.50"></text></g><g><title>base_uint&lt;256u&gt;::operator&lt;&lt;=(unsigned int) (1 samples, 0.33%)</title><rect x="85.6209%" y="597" width="0.3268%" height="15" fill="rgb(224,124,37)" fg:x="262" fg:w="1"/><text x="85.8709%" y="607.50"></text></g><g><title>arith_uint256::SetCompact (1 samples, 0.33%)</title><rect x="85.9477%" y="629" width="0.3268%" height="15" fill="rgb(251,171,30)" fg:x="263" fg:w="1"/><text x="86.1977%" y="639.50"></text></g><g><title>arith_uint256::operator= (1 samples, 0.33%)</title><rect x="85.9477%" y="613" width="0.3268%" height="15" fill="rgb(236,46,54)" fg:x="263" fg:w="1"/><text x="86.1977%" y="623.50"></text></g><g><title>base_uint&lt;256u&gt;::operator= (1 samples, 0.33%)</title><rect x="85.9477%" y="597" width="0.3268%" height="15" fill="rgb(245,213,5)" fg:x="263" fg:w="1"/><text x="86.1977%" y="607.50"></text></g><g><title>base_uint&lt;256u&gt;::operator= (1 samples, 0.33%)</title><rect x="85.9477%" y="581" width="0.3268%" height="15" fill="rgb(230,144,27)" fg:x="263" fg:w="1"/><text x="86.1977%" y="591.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="629" width="0.3268%" height="15" fill="rgb(220,86,6)" fg:x="264" fg:w="1"/><text x="86.5245%" y="639.50"></text></g><g><title>DataStream&amp; DataStream::operator&gt;&gt;&lt;CDiskBlockIndex&amp;&gt;(CDiskBlockIndex&amp;) (1 samples, 0.33%)</title><rect x="86.2745%" y="613" width="0.3268%" height="15" fill="rgb(240,20,13)" fg:x="264" fg:w="1"/><text x="86.5245%" y="623.50"></text></g><g><title>void Unserialize&lt;DataStream, CDiskBlockIndex&amp;&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="597" width="0.3268%" height="15" fill="rgb(217,89,34)" fg:x="264" fg:w="1"/><text x="86.5245%" y="607.50"></text></g><g><title>void CDiskBlockIndex::Unserialize&lt;DataStream&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="581" width="0.3268%" height="15" fill="rgb(229,13,5)" fg:x="264" fg:w="1"/><text x="86.5245%" y="591.50"></text></g><g><title>void CDiskBlockIndex::Unser&lt;DataStream&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="565" width="0.3268%" height="15" fill="rgb(244,67,35)" fg:x="264" fg:w="1"/><text x="86.5245%" y="575.50"></text></g><g><title>void CDiskBlockIndex::SerializationOps&lt;DataStream, CDiskBlockIndex, ActionUnserialize&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="549" width="0.3268%" height="15" fill="rgb(221,40,2)" fg:x="264" fg:w="1"/><text x="86.5245%" y="559.50"></text></g><g><title>void ActionUnserialize::SerReadWriteMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt; &gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="533" width="0.3268%" height="15" fill="rgb(237,157,21)" fg:x="264" fg:w="1"/><text x="86.5245%" y="543.50"></text></g><g><title>void UnserializeMany&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="517" width="0.3268%" height="15" fill="rgb(222,94,11)" fg:x="264" fg:w="1"/><text x="86.5245%" y="527.50"></text></g><g><title>void Unserialize&lt;DataStream, Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;&amp;&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="501" width="0.3268%" height="15" fill="rgb(249,113,6)" fg:x="264" fg:w="1"/><text x="86.5245%" y="511.50"></text></g><g><title>void Wrapper&lt;VarIntFormatter&lt;(VarIntMode)0&gt;, unsigned int&amp;&gt;::Unserialize&lt;DataStream&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="485" width="0.3268%" height="15" fill="rgb(238,137,36)" fg:x="264" fg:w="1"/><text x="86.5245%" y="495.50"></text></g><g><title>void VarIntFormatter&lt;(VarIntMode)0&gt;::Unser&lt;DataStream, unsigned int&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="469" width="0.3268%" height="15" fill="rgb(210,102,26)" fg:x="264" fg:w="1"/><text x="86.5245%" y="479.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (1 samples, 0.33%)</title><rect x="86.2745%" y="453" width="0.3268%" height="15" fill="rgb(218,30,30)" fg:x="264" fg:w="1"/><text x="86.5245%" y="463.50"></text></g><g><title>bool CDBIterator::GetValue&lt;CDiskBlockIndex&gt; (1 samples, 0.33%)</title><rect x="86.2745%" y="437" width="0.3268%" height="15" fill="rgb(214,67,26)" fg:x="264" fg:w="1"/><text x="86.5245%" y="447.50"></text></g><g><title>DataStream::Xor (1 samples, 0.33%)</title><rect x="86.2745%" y="421" width="0.3268%" height="15" fill="rgb(251,9,53)" fg:x="264" fg:w="1"/><text x="86.5245%" y="431.50"></text></g><g><title>util::Xor (1 samples, 0.33%)</title><rect x="86.2745%" y="405" width="0.3268%" height="15" fill="rgb(228,204,25)" fg:x="264" fg:w="1"/><text x="86.5245%" y="415.50"></text></g><g><title>std::operator^= (1 samples, 0.33%)</title><rect x="86.2745%" y="389" width="0.3268%" height="15" fill="rgb(207,153,8)" fg:x="264" fg:w="1"/><text x="86.5245%" y="399.50"></text></g><g><title>std::operator^ (1 samples, 0.33%)</title><rect x="86.2745%" y="373" width="0.3268%" height="15" fill="rgb(242,9,16)" fg:x="264" fg:w="1"/><text x="86.5245%" y="383.50"></text></g><g><title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1 samples, 0.33%)</title><rect x="86.6013%" y="629" width="0.3268%" height="15" fill="rgb(217,211,10)" fg:x="265" fg:w="1"/><text x="86.8513%" y="639.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.33%)</title><rect x="86.9281%" y="629" width="0.3268%" height="15" fill="rgb(219,228,52)" fg:x="266" fg:w="1"/><text x="87.1781%" y="639.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.33%)</title><rect x="86.9281%" y="613" width="0.3268%" height="15" fill="rgb(231,92,29)" fg:x="266" fg:w="1"/><text x="87.1781%" y="623.50"></text></g><g><title>leveldb::DecodeFixed64 (1 samples, 0.33%)</title><rect x="86.9281%" y="597" width="0.3268%" height="15" fill="rgb(232,8,23)" fg:x="266" fg:w="1"/><text x="87.1781%" y="607.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.33%)</title><rect x="86.9281%" y="581" width="0.3268%" height="15" fill="rgb(216,211,34)" fg:x="266" fg:w="1"/><text x="87.1781%" y="591.50"></text></g><g><title>kernel::BlockTreeDB::LoadBlockIndexGuts (11 samples, 3.59%)</title><rect x="84.9673%" y="645" width="3.5948%" height="15" fill="rgb(236,151,0)" fg:x="260" fg:w="11"/><text x="85.2173%" y="655.50">kern..</text></g><g><title>std::function&lt;CBlockIndex* (uint256 const&amp;)&gt;::operator (4 samples, 1.31%)</title><rect x="87.2549%" y="629" width="1.3072%" height="15" fill="rgb(209,168,3)" fg:x="267" fg:w="4"/><text x="87.5049%" y="639.50"></text></g><g><title>node::BlockManager::InsertBlockIndex (4 samples, 1.31%)</title><rect x="87.2549%" y="613" width="1.3072%" height="15" fill="rgb(208,129,28)" fg:x="267" fg:w="4"/><text x="87.5049%" y="623.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::unordered_map&lt;uint256, CBlockIndex, BlockHasher, std::equal_to&lt;uint256&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt; &gt;::try_emplace&lt;&gt; (4 samples, 1.31%)</title><rect x="87.2549%" y="597" width="1.3072%" height="15" fill="rgb(229,78,22)" fg:x="267" fg:w="4"/><text x="87.5049%" y="607.50"></text></g><g><title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;uint256 const&amp;&gt; (4 samples, 1.31%)</title><rect x="87.2549%" y="581" width="1.3072%" height="15" fill="rgb(228,187,13)" fg:x="267" fg:w="4"/><text x="87.5049%" y="591.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 1.31%)</title><rect x="87.2549%" y="565" width="1.3072%" height="15" fill="rgb(240,119,24)" fg:x="267" fg:w="4"/><text x="87.5049%" y="575.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 1.31%)</title><rect x="87.2549%" y="549" width="1.3072%" height="15" fill="rgb(209,194,42)" fg:x="267" fg:w="4"/><text x="87.5049%" y="559.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;uint256 const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 1.31%)</title><rect x="87.2549%" y="533" width="1.3072%" height="15" fill="rgb(247,200,46)" fg:x="267" fg:w="4"/><text x="87.5049%" y="543.50"></text></g><g><title>decltype  (4 samples, 1.31%)</title><rect x="87.2549%" y="517" width="1.3072%" height="15" fill="rgb(218,76,16)" fg:x="267" fg:w="4"/><text x="87.5049%" y="527.50"></text></g><g><title>std::pair&lt;uint256 const, CBlockIndex&gt;::pair&lt;uint256 const&amp;&gt; (4 samples, 1.31%)</title><rect x="87.2549%" y="501" width="1.3072%" height="15" fill="rgb(225,21,48)" fg:x="267" fg:w="4"/><text x="87.5049%" y="511.50"></text></g><g><title>std::pair&lt;uint256 const, CBlockIndex&gt;::pair&lt;uint256 const&amp;, 0ul&gt; (4 samples, 1.31%)</title><rect x="87.2549%" y="485" width="1.3072%" height="15" fill="rgb(239,223,50)" fg:x="267" fg:w="4"/><text x="87.5049%" y="495.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="87.2549%" y="469" width="1.3072%" height="15" fill="rgb(244,45,21)" fg:x="267" fg:w="4"/><text x="87.5049%" y="479.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="87.2549%" y="453" width="1.3072%" height="15" fill="rgb(232,33,43)" fg:x="267" fg:w="4"/><text x="87.5049%" y="463.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="87.2549%" y="437" width="1.3072%" height="15" fill="rgb(209,8,3)" fg:x="267" fg:w="4"/><text x="87.5049%" y="447.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="87.2549%" y="421" width="1.3072%" height="15" fill="rgb(214,25,53)" fg:x="267" fg:w="4"/><text x="87.5049%" y="431.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="87.2549%" y="405" width="1.3072%" height="15" fill="rgb(254,186,54)" fg:x="267" fg:w="4"/><text x="87.5049%" y="415.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="87.2549%" y="389" width="1.3072%" height="15" fill="rgb(208,174,49)" fg:x="267" fg:w="4"/><text x="87.5049%" y="399.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="87.2549%" y="373" width="1.3072%" height="15" fill="rgb(233,191,51)" fg:x="267" fg:w="4"/><text x="87.5049%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="87.5817%" y="357" width="0.9804%" height="15" fill="rgb(222,134,10)" fg:x="268" fg:w="3"/><text x="87.8317%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="87.5817%" y="341" width="0.9804%" height="15" fill="rgb(230,226,20)" fg:x="268" fg:w="3"/><text x="87.8317%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="87.5817%" y="325" width="0.9804%" height="15" fill="rgb(251,111,25)" fg:x="268" fg:w="3"/><text x="87.8317%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="87.5817%" y="309" width="0.9804%" height="15" fill="rgb(224,40,46)" fg:x="268" fg:w="3"/><text x="87.8317%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="87.5817%" y="293" width="0.9804%" height="15" fill="rgb(236,108,47)" fg:x="268" fg:w="3"/><text x="87.8317%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="87.5817%" y="277" width="0.9804%" height="15" fill="rgb(234,93,0)" fg:x="268" fg:w="3"/><text x="87.8317%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="87.5817%" y="261" width="0.9804%" height="15" fill="rgb(224,213,32)" fg:x="268" fg:w="3"/><text x="87.8317%" y="271.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.33%)</title><rect x="88.5621%" y="645" width="0.3268%" height="15" fill="rgb(251,11,48)" fg:x="271" fg:w="1"/><text x="88.8121%" y="655.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="613" width="0.3268%" height="15" fill="rgb(236,173,5)" fg:x="272" fg:w="1"/><text x="89.1389%" y="623.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="597" width="0.3268%" height="15" fill="rgb(230,95,12)" fg:x="272" fg:w="1"/><text x="89.1389%" y="607.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="581" width="0.3268%" height="15" fill="rgb(232,209,1)" fg:x="272" fg:w="1"/><text x="89.1389%" y="591.50"></text></g><g><title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.33%)</title><rect x="88.8889%" y="565" width="0.3268%" height="15" fill="rgb(232,6,1)" fg:x="272" fg:w="1"/><text x="89.1389%" y="575.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (1 samples, 0.33%)</title><rect x="88.8889%" y="549" width="0.3268%" height="15" fill="rgb(210,224,50)" fg:x="272" fg:w="1"/><text x="89.1389%" y="559.50"></text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="533" width="0.3268%" height="15" fill="rgb(228,127,35)" fg:x="272" fg:w="1"/><text x="89.1389%" y="543.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="517" width="0.3268%" height="15" fill="rgb(245,102,45)" fg:x="272" fg:w="1"/><text x="89.1389%" y="527.50"></text></g><g><title>void std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="501" width="0.3268%" height="15" fill="rgb(214,1,49)" fg:x="272" fg:w="1"/><text x="89.1389%" y="511.50"></text></g><g><title>void std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="485" width="0.3268%" height="15" fill="rgb(226,163,40)" fg:x="272" fg:w="1"/><text x="89.1389%" y="495.50"></text></g><g><title>void std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="88.8889%" y="469" width="0.3268%" height="15" fill="rgb(239,212,28)" fg:x="272" fg:w="1"/><text x="89.1389%" y="479.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="89.2157%" y="597" width="0.3268%" height="15" fill="rgb(220,20,13)" fg:x="273" fg:w="1"/><text x="89.4657%" y="607.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="89.2157%" y="581" width="0.3268%" height="15" fill="rgb(210,164,35)" fg:x="273" fg:w="1"/><text x="89.4657%" y="591.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.33%)</title><rect x="89.2157%" y="565" width="0.3268%" height="15" fill="rgb(248,109,41)" fg:x="273" fg:w="1"/><text x="89.4657%" y="575.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.33%)</title><rect x="89.2157%" y="549" width="0.3268%" height="15" fill="rgb(238,23,50)" fg:x="273" fg:w="1"/><text x="89.4657%" y="559.50"></text></g><g><title>node::BlockManager::LoadBlockIndex (25 samples, 8.17%)</title><rect x="81.6993%" y="661" width="8.1699%" height="15" fill="rgb(211,48,49)" fg:x="250" fg:w="25"/><text x="81.9493%" y="671.50">node::Block..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (3 samples, 0.98%)</title><rect x="88.8889%" y="645" width="0.9804%" height="15" fill="rgb(223,36,21)" fg:x="272" fg:w="3"/><text x="89.1389%" y="655.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (3 samples, 0.98%)</title><rect x="88.8889%" y="629" width="0.9804%" height="15" fill="rgb(207,123,46)" fg:x="272" fg:w="3"/><text x="89.1389%" y="639.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="89.2157%" y="613" width="0.6536%" height="15" fill="rgb(240,218,32)" fg:x="273" fg:w="2"/><text x="89.4657%" y="623.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="89.5425%" y="597" width="0.3268%" height="15" fill="rgb(252,5,43)" fg:x="274" fg:w="1"/><text x="89.7925%" y="607.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="89.5425%" y="581" width="0.3268%" height="15" fill="rgb(252,84,19)" fg:x="274" fg:w="1"/><text x="89.7925%" y="591.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="89.5425%" y="565" width="0.3268%" height="15" fill="rgb(243,152,39)" fg:x="274" fg:w="1"/><text x="89.7925%" y="575.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.33%)</title><rect x="89.5425%" y="549" width="0.3268%" height="15" fill="rgb(234,160,15)" fg:x="274" fg:w="1"/><text x="89.7925%" y="559.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.33%)</title><rect x="89.5425%" y="533" width="0.3268%" height="15" fill="rgb(237,34,20)" fg:x="274" fg:w="1"/><text x="89.7925%" y="543.50"></text></g><g><title>node::BlockManager::LoadBlockIndexDB (26 samples, 8.50%)</title><rect x="81.6993%" y="677" width="8.4967%" height="15" fill="rgb(229,97,13)" fg:x="250" fg:w="26"/><text x="81.9493%" y="687.50">node::BlockM..</text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, false, true&gt;::operator++ (1 samples, 0.33%)</title><rect x="89.8693%" y="661" width="0.3268%" height="15" fill="rgb(234,71,50)" fg:x="275" fg:w="1"/><text x="90.1193%" y="671.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_incr (1 samples, 0.33%)</title><rect x="89.8693%" y="645" width="0.3268%" height="15" fill="rgb(253,155,4)" fg:x="275" fg:w="1"/><text x="90.1193%" y="655.50"></text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;uint256 const, CBlockIndex&gt;, true&gt;::_M_next (1 samples, 0.33%)</title><rect x="89.8693%" y="629" width="0.3268%" height="15" fill="rgb(222,185,37)" fg:x="275" fg:w="1"/><text x="90.1193%" y="639.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="90.1961%" y="549" width="0.3268%" height="15" fill="rgb(251,177,13)" fg:x="276" fg:w="1"/><text x="90.4461%" y="559.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="90.1961%" y="533" width="0.3268%" height="15" fill="rgb(250,179,40)" fg:x="276" fg:w="1"/><text x="90.4461%" y="543.50"></text></g><g><title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt;::operator (1 samples, 0.33%)</title><rect x="90.1961%" y="517" width="0.3268%" height="15" fill="rgb(242,44,2)" fg:x="276" fg:w="1"/><text x="90.4461%" y="527.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="90.1961%" y="501" width="0.3268%" height="15" fill="rgb(216,177,13)" fg:x="276" fg:w="1"/><text x="90.4461%" y="511.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="90.1961%" y="485" width="0.3268%" height="15" fill="rgb(216,106,43)" fg:x="276" fg:w="1"/><text x="90.4461%" y="495.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt; std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="90.1961%" y="469" width="0.3268%" height="15" fill="rgb(216,183,2)" fg:x="276" fg:w="1"/><text x="90.4461%" y="479.50"></text></g><g><title>operator (30 samples, 9.80%)</title><rect x="81.0458%" y="757" width="9.8039%" height="15" fill="rgb(249,75,3)" fg:x="248" fg:w="30"/><text x="81.2958%" y="767.50">operator</text></g><g><title>InitAndLoadChainstate (30 samples, 9.80%)</title><rect x="81.0458%" y="741" width="9.8039%" height="15" fill="rgb(219,67,39)" fg:x="248" fg:w="30"/><text x="81.2958%" y="751.50">InitAndLoadCha..</text></g><g><title>node::LoadChainstate (30 samples, 9.80%)</title><rect x="81.0458%" y="725" width="9.8039%" height="15" fill="rgb(253,228,2)" fg:x="248" fg:w="30"/><text x="81.2958%" y="735.50">node::LoadChai..</text></g><g><title>node::CompleteChainstateInitialization (30 samples, 9.80%)</title><rect x="81.0458%" y="709" width="9.8039%" height="15" fill="rgb(235,138,27)" fg:x="248" fg:w="30"/><text x="81.2958%" y="719.50">node::Complete..</text></g><g><title>ChainstateManager::LoadBlockIndex (29 samples, 9.48%)</title><rect x="81.3725%" y="693" width="9.4771%" height="15" fill="rgb(236,97,51)" fg:x="249" fg:w="29"/><text x="81.6225%" y="703.50">ChainstateMana..</text></g><g><title>void std::sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, node::CBlockIndexHeightOnlyComparator&gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="677" width="0.6536%" height="15" fill="rgb(240,80,30)" fg:x="276" fg:w="2"/><text x="90.4461%" y="687.50"></text></g><g><title>void std::__sort&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="661" width="0.6536%" height="15" fill="rgb(230,178,19)" fg:x="276" fg:w="2"/><text x="90.4461%" y="671.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="645" width="0.6536%" height="15" fill="rgb(210,190,27)" fg:x="276" fg:w="2"/><text x="90.4461%" y="655.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="629" width="0.6536%" height="15" fill="rgb(222,107,31)" fg:x="276" fg:w="2"/><text x="90.4461%" y="639.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="613" width="0.6536%" height="15" fill="rgb(216,127,34)" fg:x="276" fg:w="2"/><text x="90.4461%" y="623.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="597" width="0.6536%" height="15" fill="rgb(234,116,52)" fg:x="276" fg:w="2"/><text x="90.4461%" y="607.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="581" width="0.6536%" height="15" fill="rgb(222,124,15)" fg:x="276" fg:w="2"/><text x="90.4461%" y="591.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (2 samples, 0.65%)</title><rect x="90.1961%" y="565" width="0.6536%" height="15" fill="rgb(231,179,28)" fg:x="276" fg:w="2"/><text x="90.4461%" y="575.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="90.5229%" y="549" width="0.3268%" height="15" fill="rgb(226,93,45)" fg:x="277" fg:w="1"/><text x="90.7729%" y="559.50"></text></g><g><title>void std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;CBlockIndex**, std::vector&lt;CBlockIndex*, std::allocator&lt;CBlockIndex*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node::CBlockIndexHeightOnlyComparator&gt; &gt; (1 samples, 0.33%)</title><rect x="90.5229%" y="533" width="0.3268%" height="15" fill="rgb(215,8,51)" fg:x="277" fg:w="1"/><text x="90.7729%" y="543.50"></text></g><g><title>node::CBlockIndexHeightOnlyComparator::operator (1 samples, 0.33%)</title><rect x="90.5229%" y="517" width="0.3268%" height="15" fill="rgb(223,106,5)" fg:x="277" fg:w="1"/><text x="90.7729%" y="527.50"></text></g><g><title>main (31 samples, 10.13%)</title><rect x="81.0458%" y="805" width="10.1307%" height="15" fill="rgb(250,191,5)" fg:x="248" fg:w="31"/><text x="81.2958%" y="815.50">main</text></g><g><title>AppInitMain (31 samples, 10.13%)</title><rect x="81.0458%" y="789" width="10.1307%" height="15" fill="rgb(242,132,44)" fg:x="248" fg:w="31"/><text x="81.2958%" y="799.50">AppInitMain</text></g><g><title>InitAndLoadChainstate (31 samples, 10.13%)</title><rect x="81.0458%" y="773" width="10.1307%" height="15" fill="rgb(251,152,29)" fg:x="248" fg:w="31"/><text x="81.2958%" y="783.50">InitAndLoadChai..</text></g><g><title>std::__detail::_MakeUniq&lt;ChainstateManager&gt;::__single_object std::make_unique&lt;ChainstateManager, util::SignalInterrupt&amp;, kernel::ChainstateManagerOpts&amp;, kernel::BlockManagerOpts&amp;&gt; (1 samples, 0.33%)</title><rect x="90.8497%" y="757" width="0.3268%" height="15" fill="rgb(218,179,5)" fg:x="278" fg:w="1"/><text x="91.0997%" y="767.50"></text></g><g><title>ChainstateManager::ChainstateManager (1 samples, 0.33%)</title><rect x="90.8497%" y="741" width="0.3268%" height="15" fill="rgb(227,67,19)" fg:x="278" fg:w="1"/><text x="91.0997%" y="751.50"></text></g><g><title>ValidationCache::ValidationCache (1 samples, 0.33%)</title><rect x="90.8497%" y="725" width="0.3268%" height="15" fill="rgb(233,119,31)" fg:x="278" fg:w="1"/><text x="91.0997%" y="735.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup_bytes (1 samples, 0.33%)</title><rect x="90.8497%" y="709" width="0.3268%" height="15" fill="rgb(241,120,22)" fg:x="278" fg:w="1"/><text x="91.0997%" y="719.50"></text></g><g><title>CuckooCache::cache&lt;uint256, SignatureCacheHasher&gt;::setup (1 samples, 0.33%)</title><rect x="90.8497%" y="693" width="0.3268%" height="15" fill="rgb(224,102,30)" fg:x="278" fg:w="1"/><text x="91.0997%" y="703.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::resize (1 samples, 0.33%)</title><rect x="90.8497%" y="677" width="0.3268%" height="15" fill="rgb(210,164,37)" fg:x="278" fg:w="1"/><text x="91.0997%" y="687.50"></text></g><g><title>std::vector&lt;uint256, std::allocator&lt;uint256&gt; &gt;::_M_default_append (1 samples, 0.33%)</title><rect x="90.8497%" y="661" width="0.3268%" height="15" fill="rgb(226,191,16)" fg:x="278" fg:w="1"/><text x="91.0997%" y="671.50"></text></g><g><title>uint256* std::__uninitialized_default_n_a&lt;uint256*, unsigned long, uint256&gt; (1 samples, 0.33%)</title><rect x="90.8497%" y="645" width="0.3268%" height="15" fill="rgb(214,40,45)" fg:x="278" fg:w="1"/><text x="91.0997%" y="655.50"></text></g><g><title>uint256* std::__uninitialized_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.33%)</title><rect x="90.8497%" y="629" width="0.3268%" height="15" fill="rgb(244,29,26)" fg:x="278" fg:w="1"/><text x="91.0997%" y="639.50"></text></g><g><title>uint256* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;uint256*, unsigned long&gt; (1 samples, 0.33%)</title><rect x="90.8497%" y="613" width="0.3268%" height="15" fill="rgb(216,16,5)" fg:x="278" fg:w="1"/><text x="91.0997%" y="623.50"></text></g><g><title>void std::_Construct&lt;uint256&gt; (1 samples, 0.33%)</title><rect x="90.8497%" y="597" width="0.3268%" height="15" fill="rgb(249,76,35)" fg:x="278" fg:w="1"/><text x="91.0997%" y="607.50"></text></g><g><title>uint256::uint256 (1 samples, 0.33%)</title><rect x="90.8497%" y="581" width="0.3268%" height="15" fill="rgb(207,11,44)" fg:x="278" fg:w="1"/><text x="91.0997%" y="591.50"></text></g><g><title>base_blob&lt;256u&gt;::base_blob (1 samples, 0.33%)</title><rect x="90.8497%" y="565" width="0.3268%" height="15" fill="rgb(228,190,49)" fg:x="278" fg:w="1"/><text x="91.0997%" y="575.50"></text></g><g><title>__memset_avx512_unaligned_erms (1 samples, 0.33%)</title><rect x="90.8497%" y="549" width="0.3268%" height="15" fill="rgb(214,173,12)" fg:x="278" fg:w="1"/><text x="91.0997%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="533" width="0.3268%" height="15" fill="rgb(218,26,35)" fg:x="278" fg:w="1"/><text x="91.0997%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="517" width="0.3268%" height="15" fill="rgb(220,200,19)" fg:x="278" fg:w="1"/><text x="91.0997%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="501" width="0.3268%" height="15" fill="rgb(239,95,49)" fg:x="278" fg:w="1"/><text x="91.0997%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="485" width="0.3268%" height="15" fill="rgb(235,85,53)" fg:x="278" fg:w="1"/><text x="91.0997%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="469" width="0.3268%" height="15" fill="rgb(233,133,31)" fg:x="278" fg:w="1"/><text x="91.0997%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="453" width="0.3268%" height="15" fill="rgb(218,25,20)" fg:x="278" fg:w="1"/><text x="91.0997%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="437" width="0.3268%" height="15" fill="rgb(252,210,38)" fg:x="278" fg:w="1"/><text x="91.0997%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="90.8497%" y="421" width="0.3268%" height="15" fill="rgb(242,134,21)" fg:x="278" fg:w="1"/><text x="91.0997%" y="431.50"></text></g><g><title>_start (45 samples, 14.71%)</title><rect x="77.7778%" y="869" width="14.7059%" height="15" fill="rgb(213,28,48)" fg:x="238" fg:w="45"/><text x="78.0278%" y="879.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (45 samples, 14.71%)</title><rect x="77.7778%" y="853" width="14.7059%" height="15" fill="rgb(250,196,2)" fg:x="238" fg:w="45"/><text x="78.0278%" y="863.50">__libc_start_main@@GLI..</text></g><g><title>__libc_start_call_main (45 samples, 14.71%)</title><rect x="77.7778%" y="837" width="14.7059%" height="15" fill="rgb(227,5,17)" fg:x="238" fg:w="45"/><text x="78.0278%" y="847.50">__libc_start_call_main</text></g><g><title>main (45 samples, 14.71%)</title><rect x="77.7778%" y="821" width="14.7059%" height="15" fill="rgb(221,226,24)" fg:x="238" fg:w="45"/><text x="78.0278%" y="831.50">main</text></g><g><title>util::SignalInterrupt::wait (4 samples, 1.31%)</title><rect x="91.1765%" y="805" width="1.3072%" height="15" fill="rgb(211,5,48)" fg:x="279" fg:w="4"/><text x="91.4265%" y="815.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 1.31%)</title><rect x="91.1765%" y="789" width="1.3072%" height="15" fill="rgb(219,150,6)" fg:x="279" fg:w="4"/><text x="91.4265%" y="799.50"></text></g><g><title>TokenPipeEnd::TokenRead (4 samples, 1.31%)</title><rect x="91.1765%" y="773" width="1.3072%" height="15" fill="rgb(251,46,16)" fg:x="279" fg:w="4"/><text x="91.4265%" y="783.50"></text></g><g><title>read (4 samples, 1.31%)</title><rect x="91.1765%" y="757" width="1.3072%" height="15" fill="rgb(220,204,40)" fg:x="279" fg:w="4"/><text x="91.4265%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="91.1765%" y="741" width="1.3072%" height="15" fill="rgb(211,85,2)" fg:x="279" fg:w="4"/><text x="91.4265%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="91.1765%" y="725" width="1.3072%" height="15" fill="rgb(229,17,7)" fg:x="279" fg:w="4"/><text x="91.4265%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="91.1765%" y="709" width="1.3072%" height="15" fill="rgb(239,72,28)" fg:x="279" fg:w="4"/><text x="91.4265%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="91.1765%" y="693" width="1.3072%" height="15" fill="rgb(230,47,54)" fg:x="279" fg:w="4"/><text x="91.4265%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="91.1765%" y="677" width="1.3072%" height="15" fill="rgb(214,50,8)" fg:x="279" fg:w="4"/><text x="91.4265%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="661" width="0.9804%" height="15" fill="rgb(216,198,43)" fg:x="280" fg:w="3"/><text x="91.7533%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="645" width="0.9804%" height="15" fill="rgb(234,20,35)" fg:x="280" fg:w="3"/><text x="91.7533%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="629" width="0.9804%" height="15" fill="rgb(254,45,19)" fg:x="280" fg:w="3"/><text x="91.7533%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="613" width="0.9804%" height="15" fill="rgb(219,14,44)" fg:x="280" fg:w="3"/><text x="91.7533%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="597" width="0.9804%" height="15" fill="rgb(217,220,26)" fg:x="280" fg:w="3"/><text x="91.7533%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="581" width="0.9804%" height="15" fill="rgb(213,158,28)" fg:x="280" fg:w="3"/><text x="91.7533%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="565" width="0.9804%" height="15" fill="rgb(252,51,52)" fg:x="280" fg:w="3"/><text x="91.7533%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="549" width="0.9804%" height="15" fill="rgb(246,89,16)" fg:x="280" fg:w="3"/><text x="91.7533%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="533" width="0.9804%" height="15" fill="rgb(216,158,49)" fg:x="280" fg:w="3"/><text x="91.7533%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="517" width="0.9804%" height="15" fill="rgb(236,107,19)" fg:x="280" fg:w="3"/><text x="91.7533%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="501" width="0.9804%" height="15" fill="rgb(228,185,30)" fg:x="280" fg:w="3"/><text x="91.7533%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="91.5033%" y="485" width="0.9804%" height="15" fill="rgb(246,134,8)" fg:x="280" fg:w="3"/><text x="91.7533%" y="495.50"></text></g><g><title>leveldb::FilterBlockBuilder::StartBlock (1 samples, 0.33%)</title><rect x="92.4837%" y="597" width="0.3268%" height="15" fill="rgb(214,143,50)" fg:x="283" fg:w="1"/><text x="92.7337%" y="607.50"></text></g><g><title>leveldb::FilterBlockBuilder::GenerateFilter (1 samples, 0.33%)</title><rect x="92.4837%" y="581" width="0.3268%" height="15" fill="rgb(228,75,8)" fg:x="283" fg:w="1"/><text x="92.7337%" y="591.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.33%)</title><rect x="92.4837%" y="565" width="0.3268%" height="15" fill="rgb(207,175,4)" fg:x="283" fg:w="1"/><text x="92.7337%" y="575.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.33%)</title><rect x="92.4837%" y="549" width="0.3268%" height="15" fill="rgb(205,108,24)" fg:x="283" fg:w="1"/><text x="92.7337%" y="559.50"></text></g><g><title>leveldb::(anonymous namespace)::BloomFilterPolicy::CreateFilter (1 samples, 0.33%)</title><rect x="92.4837%" y="533" width="0.3268%" height="15" fill="rgb(244,120,49)" fg:x="283" fg:w="1"/><text x="92.7337%" y="543.50"></text></g><g><title>leveldb::PutVarint32 (1 samples, 0.33%)</title><rect x="92.8105%" y="597" width="0.3268%" height="15" fill="rgb(223,47,38)" fg:x="284" fg:w="1"/><text x="93.0605%" y="607.50"></text></g><g><title>leveldb::DBImpl::WriteLevel0Table (4 samples, 1.31%)</title><rect x="92.4837%" y="645" width="1.3072%" height="15" fill="rgb(229,179,11)" fg:x="283" fg:w="4"/><text x="92.7337%" y="655.50"></text></g><g><title>leveldb::BuildTable (4 samples, 1.31%)</title><rect x="92.4837%" y="629" width="1.3072%" height="15" fill="rgb(231,122,1)" fg:x="283" fg:w="4"/><text x="92.7337%" y="639.50"></text></g><g><title>leveldb::TableBuilder::Add (4 samples, 1.31%)</title><rect x="92.4837%" y="613" width="1.3072%" height="15" fill="rgb(245,119,9)" fg:x="283" fg:w="4"/><text x="92.7337%" y="623.50"></text></g><g><title>leveldb::TableBuilder::Flush (2 samples, 0.65%)</title><rect x="93.1373%" y="597" width="0.6536%" height="15" fill="rgb(241,163,25)" fg:x="285" fg:w="2"/><text x="93.3873%" y="607.50"></text></g><g><title>Flush (2 samples, 0.65%)</title><rect x="93.1373%" y="581" width="0.6536%" height="15" fill="rgb(217,214,3)" fg:x="285" fg:w="2"/><text x="93.3873%" y="591.50"></text></g><g><title>FlushBuffer (2 samples, 0.65%)</title><rect x="93.1373%" y="565" width="0.6536%" height="15" fill="rgb(240,86,28)" fg:x="285" fg:w="2"/><text x="93.3873%" y="575.50"></text></g><g><title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (2 samples, 0.65%)</title><rect x="93.1373%" y="549" width="0.6536%" height="15" fill="rgb(215,47,9)" fg:x="285" fg:w="2"/><text x="93.3873%" y="559.50"></text></g><g><title>__GI___libc_write (2 samples, 0.65%)</title><rect x="93.1373%" y="533" width="0.6536%" height="15" fill="rgb(252,25,45)" fg:x="285" fg:w="2"/><text x="93.3873%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="93.1373%" y="517" width="0.6536%" height="15" fill="rgb(251,164,9)" fg:x="285" fg:w="2"/><text x="93.3873%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="93.1373%" y="501" width="0.6536%" height="15" fill="rgb(233,194,0)" fg:x="285" fg:w="2"/><text x="93.3873%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="93.1373%" y="485" width="0.6536%" height="15" fill="rgb(249,111,24)" fg:x="285" fg:w="2"/><text x="93.3873%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="93.1373%" y="469" width="0.6536%" height="15" fill="rgb(250,223,3)" fg:x="285" fg:w="2"/><text x="93.3873%" y="479.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="93.1373%" y="453" width="0.6536%" height="15" fill="rgb(236,178,37)" fg:x="285" fg:w="2"/><text x="93.3873%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="93.1373%" y="437" width="0.6536%" height="15" fill="rgb(241,158,50)" fg:x="285" fg:w="2"/><text x="93.3873%" y="447.50"></text></g><g><title>[[ext4]] (2 samples, 0.65%)</title><rect x="93.1373%" y="421" width="0.6536%" height="15" fill="rgb(213,121,41)" fg:x="285" fg:w="2"/><text x="93.3873%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="93.1373%" y="405" width="0.6536%" height="15" fill="rgb(240,92,3)" fg:x="285" fg:w="2"/><text x="93.3873%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.65%)</title><rect x="93.1373%" y="389" width="0.6536%" height="15" fill="rgb(205,123,3)" fg:x="285" fg:w="2"/><text x="93.3873%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="93.4641%" y="373" width="0.3268%" height="15" fill="rgb(205,97,47)" fg:x="286" fg:w="1"/><text x="93.7141%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="93.4641%" y="357" width="0.3268%" height="15" fill="rgb(247,152,14)" fg:x="286" fg:w="1"/><text x="93.7141%" y="367.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (1 samples, 0.33%)</title><rect x="93.7908%" y="565" width="0.3268%" height="15" fill="rgb(248,195,53)" fg:x="287" fg:w="1"/><text x="94.0408%" y="575.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.33%)</title><rect x="94.7712%" y="517" width="0.3268%" height="15" fill="rgb(226,201,16)" fg:x="290" fg:w="1"/><text x="95.0212%" y="527.50"></text></g><g><title>leveldb::InternalKeyComparator::Compare (1 samples, 0.33%)</title><rect x="94.7712%" y="501" width="0.3268%" height="15" fill="rgb(205,98,0)" fg:x="290" fg:w="1"/><text x="95.0212%" y="511.50"></text></g><g><title>leveldb::WriteBatchInternal::InsertInto (6 samples, 1.96%)</title><rect x="93.7908%" y="645" width="1.9608%" height="15" fill="rgb(214,191,48)" fg:x="287" fg:w="6"/><text x="94.0408%" y="655.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (6 samples, 1.96%)</title><rect x="93.7908%" y="629" width="1.9608%" height="15" fill="rgb(237,112,39)" fg:x="287" fg:w="6"/><text x="94.0408%" y="639.50">l..</text></g><g><title>leveldb::WriteBatch::Iterate (6 samples, 1.96%)</title><rect x="93.7908%" y="613" width="1.9608%" height="15" fill="rgb(247,203,27)" fg:x="287" fg:w="6"/><text x="94.0408%" y="623.50">l..</text></g><g><title>leveldb::MemTable::Add (6 samples, 1.96%)</title><rect x="93.7908%" y="597" width="1.9608%" height="15" fill="rgb(235,124,28)" fg:x="287" fg:w="6"/><text x="94.0408%" y="607.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (6 samples, 1.96%)</title><rect x="93.7908%" y="581" width="1.9608%" height="15" fill="rgb(208,207,46)" fg:x="287" fg:w="6"/><text x="94.0408%" y="591.50">l..</text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (5 samples, 1.63%)</title><rect x="94.1176%" y="565" width="1.6340%" height="15" fill="rgb(234,176,4)" fg:x="288" fg:w="5"/><text x="94.3676%" y="575.50"></text></g><g><title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (5 samples, 1.63%)</title><rect x="94.1176%" y="549" width="1.6340%" height="15" fill="rgb(230,133,28)" fg:x="288" fg:w="5"/><text x="94.3676%" y="559.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (4 samples, 1.31%)</title><rect x="94.4444%" y="533" width="1.3072%" height="15" fill="rgb(211,137,40)" fg:x="289" fg:w="4"/><text x="94.6944%" y="543.50"></text></g><g><title>leveldb::MemTable::KeyComparator::operator (2 samples, 0.65%)</title><rect x="95.0980%" y="517" width="0.6536%" height="15" fill="rgb(254,35,13)" fg:x="291" fg:w="2"/><text x="95.3480%" y="527.50"></text></g><g><title>GetLengthPrefixedSlice (1 samples, 0.33%)</title><rect x="95.4248%" y="501" width="0.3268%" height="15" fill="rgb(225,49,51)" fg:x="292" fg:w="1"/><text x="95.6748%" y="511.50"></text></g><g><title>leveldb::GetVarint32Ptr (1 samples, 0.33%)</title><rect x="95.4248%" y="485" width="0.3268%" height="15" fill="rgb(251,10,15)" fg:x="292" fg:w="1"/><text x="95.6748%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.33%)</title><rect x="95.7516%" y="581" width="0.3268%" height="15" fill="rgb(228,207,15)" fg:x="293" fg:w="1"/><text x="96.0016%" y="591.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.33%)</title><rect x="95.7516%" y="565" width="0.3268%" height="15" fill="rgb(241,99,19)" fg:x="293" fg:w="1"/><text x="96.0016%" y="575.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1 samples, 0.33%)</title><rect x="95.7516%" y="549" width="0.3268%" height="15" fill="rgb(207,104,49)" fg:x="293" fg:w="1"/><text x="96.0016%" y="559.50"></text></g><g><title>std::allocator&lt;char&gt;::deallocate (1 samples, 0.33%)</title><rect x="95.7516%" y="533" width="0.3268%" height="15" fill="rgb(234,99,18)" fg:x="293" fg:w="1"/><text x="96.0016%" y="543.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (1 samples, 0.33%)</title><rect x="95.7516%" y="517" width="0.3268%" height="15" fill="rgb(213,191,49)" fg:x="293" fg:w="1"/><text x="96.0016%" y="527.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.33%)</title><rect x="95.7516%" y="501" width="0.3268%" height="15" fill="rgb(210,226,19)" fg:x="293" fg:w="1"/><text x="96.0016%" y="511.50"></text></g><g><title>__munmap (1 samples, 0.33%)</title><rect x="95.7516%" y="485" width="0.3268%" height="15" fill="rgb(229,97,18)" fg:x="293" fg:w="1"/><text x="96.0016%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="469" width="0.3268%" height="15" fill="rgb(211,167,15)" fg:x="293" fg:w="1"/><text x="96.0016%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="453" width="0.3268%" height="15" fill="rgb(210,169,34)" fg:x="293" fg:w="1"/><text x="96.0016%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="437" width="0.3268%" height="15" fill="rgb(241,121,31)" fg:x="293" fg:w="1"/><text x="96.0016%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="421" width="0.3268%" height="15" fill="rgb(232,40,11)" fg:x="293" fg:w="1"/><text x="96.0016%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="405" width="0.3268%" height="15" fill="rgb(205,86,26)" fg:x="293" fg:w="1"/><text x="96.0016%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="389" width="0.3268%" height="15" fill="rgb(231,126,28)" fg:x="293" fg:w="1"/><text x="96.0016%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="373" width="0.3268%" height="15" fill="rgb(219,221,18)" fg:x="293" fg:w="1"/><text x="96.0016%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="357" width="0.3268%" height="15" fill="rgb(211,40,0)" fg:x="293" fg:w="1"/><text x="96.0016%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="341" width="0.3268%" height="15" fill="rgb(239,85,43)" fg:x="293" fg:w="1"/><text x="96.0016%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="95.7516%" y="325" width="0.3268%" height="15" fill="rgb(231,55,21)" fg:x="293" fg:w="1"/><text x="96.0016%" y="335.50"></text></g><g><title>main (12 samples, 3.92%)</title><rect x="92.4837%" y="869" width="3.9216%" height="15" fill="rgb(225,184,43)" fg:x="283" fg:w="12"/><text x="92.7337%" y="879.50">main</text></g><g><title>main (12 samples, 3.92%)</title><rect x="92.4837%" y="853" width="3.9216%" height="15" fill="rgb(251,158,41)" fg:x="283" fg:w="12"/><text x="92.7337%" y="863.50">main</text></g><g><title>AppInitMain (12 samples, 3.92%)</title><rect x="92.4837%" y="837" width="3.9216%" height="15" fill="rgb(234,159,37)" fg:x="283" fg:w="12"/><text x="92.7337%" y="847.50">AppI..</text></g><g><title>InitAndLoadChainstate (12 samples, 3.92%)</title><rect x="92.4837%" y="821" width="3.9216%" height="15" fill="rgb(216,204,22)" fg:x="283" fg:w="12"/><text x="92.7337%" y="831.50">Init..</text></g><g><title>operator (12 samples, 3.92%)</title><rect x="92.4837%" y="805" width="3.9216%" height="15" fill="rgb(214,17,3)" fg:x="283" fg:w="12"/><text x="92.7337%" y="815.50">oper..</text></g><g><title>InitAndLoadChainstate (12 samples, 3.92%)</title><rect x="92.4837%" y="789" width="3.9216%" height="15" fill="rgb(212,111,17)" fg:x="283" fg:w="12"/><text x="92.7337%" y="799.50">Init..</text></g><g><title>node::LoadChainstate (12 samples, 3.92%)</title><rect x="92.4837%" y="773" width="3.9216%" height="15" fill="rgb(221,157,24)" fg:x="283" fg:w="12"/><text x="92.7337%" y="783.50">node..</text></g><g><title>CompleteChainstateInitialization (12 samples, 3.92%)</title><rect x="92.4837%" y="757" width="3.9216%" height="15" fill="rgb(252,16,13)" fg:x="283" fg:w="12"/><text x="92.7337%" y="767.50">Comp..</text></g><g><title>std::__detail::_MakeUniq&lt;kernel::BlockTreeDB&gt;::__single_object std::make_unique&lt;kernel::BlockTreeDB, DBParams&gt; (12 samples, 3.92%)</title><rect x="92.4837%" y="741" width="3.9216%" height="15" fill="rgb(221,62,2)" fg:x="283" fg:w="12"/><text x="92.7337%" y="751.50">std:..</text></g><g><title>kernel::BlockTreeDB::CDBWrapper (12 samples, 3.92%)</title><rect x="92.4837%" y="725" width="3.9216%" height="15" fill="rgb(247,87,22)" fg:x="283" fg:w="12"/><text x="92.7337%" y="735.50">kern..</text></g><g><title>CDBWrapper::CDBWrapper (12 samples, 3.92%)</title><rect x="92.4837%" y="709" width="3.9216%" height="15" fill="rgb(215,73,9)" fg:x="283" fg:w="12"/><text x="92.7337%" y="719.50">CDBW..</text></g><g><title>leveldb::DB::Open (12 samples, 3.92%)</title><rect x="92.4837%" y="693" width="3.9216%" height="15" fill="rgb(207,175,33)" fg:x="283" fg:w="12"/><text x="92.7337%" y="703.50">leve..</text></g><g><title>leveldb::DBImpl::Recover (12 samples, 3.92%)</title><rect x="92.4837%" y="677" width="3.9216%" height="15" fill="rgb(243,129,54)" fg:x="283" fg:w="12"/><text x="92.7337%" y="687.50">leve..</text></g><g><title>leveldb::DBImpl::RecoverLogFile (12 samples, 3.92%)</title><rect x="92.4837%" y="661" width="3.9216%" height="15" fill="rgb(227,119,45)" fg:x="283" fg:w="12"/><text x="92.7337%" y="671.50">leve..</text></g><g><title>leveldb::log::Reader::ReadRecord (2 samples, 0.65%)</title><rect x="95.7516%" y="645" width="0.6536%" height="15" fill="rgb(205,109,36)" fg:x="293" fg:w="2"/><text x="96.0016%" y="655.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (2 samples, 0.65%)</title><rect x="95.7516%" y="629" width="0.6536%" height="15" fill="rgb(205,6,39)" fg:x="293" fg:w="2"/><text x="96.0016%" y="639.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.65%)</title><rect x="95.7516%" y="613" width="0.6536%" height="15" fill="rgb(221,32,16)" fg:x="293" fg:w="2"/><text x="96.0016%" y="623.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.65%)</title><rect x="95.7516%" y="597" width="0.6536%" height="15" fill="rgb(228,144,50)" fg:x="293" fg:w="2"/><text x="96.0016%" y="607.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.33%)</title><rect x="96.0784%" y="581" width="0.3268%" height="15" fill="rgb(229,201,53)" fg:x="294" fg:w="1"/><text x="96.3284%" y="591.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.33%)</title><rect x="96.0784%" y="565" width="0.3268%" height="15" fill="rgb(249,153,27)" fg:x="294" fg:w="1"/><text x="96.3284%" y="575.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.33%)</title><rect x="96.0784%" y="549" width="0.3268%" height="15" fill="rgb(227,106,25)" fg:x="294" fg:w="1"/><text x="96.3284%" y="559.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.33%)</title><rect x="96.0784%" y="533" width="0.3268%" height="15" fill="rgb(230,65,29)" fg:x="294" fg:w="1"/><text x="96.3284%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="96.0784%" y="517" width="0.3268%" height="15" fill="rgb(221,57,46)" fg:x="294" fg:w="1"/><text x="96.3284%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="96.0784%" y="501" width="0.3268%" height="15" fill="rgb(229,161,17)" fg:x="294" fg:w="1"/><text x="96.3284%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="96.0784%" y="485" width="0.3268%" height="15" fill="rgb(222,213,11)" fg:x="294" fg:w="1"/><text x="96.3284%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="96.0784%" y="469" width="0.3268%" height="15" fill="rgb(235,35,13)" fg:x="294" fg:w="1"/><text x="96.3284%" y="479.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (1 samples, 0.33%)</title><rect x="96.4052%" y="869" width="0.3268%" height="15" fill="rgb(233,158,34)" fg:x="295" fg:w="1"/><text x="96.6552%" y="879.50"></text></g><g><title>bitcoind-head (196 samples, 64.05%)</title><rect x="33.0065%" y="885" width="64.0523%" height="15" fill="rgb(215,151,48)" fg:x="101" fg:w="196"/><text x="33.2565%" y="895.50">bitcoind-head</text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.33%)</title><rect x="96.7320%" y="869" width="0.3268%" height="15" fill="rgb(229,84,14)" fg:x="296" fg:w="1"/><text x="96.9820%" y="879.50"></text></g><g><title>std::_Hashtable&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::allocator&lt;std::pair&lt;uint256 const, CBlockIndex&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;uint256&gt;, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.33%)</title><rect x="96.7320%" y="853" width="0.3268%" height="15" fill="rgb(229,68,14)" fg:x="296" fg:w="1"/><text x="96.9820%" y="863.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;uint256, std::pair&lt;uint256 const, CBlockIndex&gt;, std::__detail::_Select1st, BlockHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1 samples, 0.33%)</title><rect x="96.7320%" y="837" width="0.3268%" height="15" fill="rgb(243,106,26)" fg:x="296" fg:w="1"/><text x="96.9820%" y="847.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.33%)</title><rect x="96.7320%" y="821" width="0.3268%" height="15" fill="rgb(206,45,38)" fg:x="296" fg:w="1"/><text x="96.9820%" y="831.50"></text></g><g><title>perf-exec (4 samples, 1.31%)</title><rect x="97.0588%" y="885" width="1.3072%" height="15" fill="rgb(226,6,15)" fg:x="297" fg:w="4"/><text x="97.3088%" y="895.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="869" width="1.3072%" height="15" fill="rgb(232,22,54)" fg:x="297" fg:w="4"/><text x="97.3088%" y="879.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="853" width="1.3072%" height="15" fill="rgb(229,222,32)" fg:x="297" fg:w="4"/><text x="97.3088%" y="863.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="837" width="1.3072%" height="15" fill="rgb(228,62,29)" fg:x="297" fg:w="4"/><text x="97.3088%" y="847.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="821" width="1.3072%" height="15" fill="rgb(251,103,34)" fg:x="297" fg:w="4"/><text x="97.3088%" y="831.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="805" width="1.3072%" height="15" fill="rgb(233,12,30)" fg:x="297" fg:w="4"/><text x="97.3088%" y="815.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="789" width="1.3072%" height="15" fill="rgb(238,52,0)" fg:x="297" fg:w="4"/><text x="97.3088%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="773" width="1.3072%" height="15" fill="rgb(223,98,5)" fg:x="297" fg:w="4"/><text x="97.3088%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="757" width="1.3072%" height="15" fill="rgb(228,75,37)" fg:x="297" fg:w="4"/><text x="97.3088%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="97.0588%" y="741" width="1.3072%" height="15" fill="rgb(205,115,49)" fg:x="297" fg:w="4"/><text x="97.3088%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="97.3856%" y="725" width="0.9804%" height="15" fill="rgb(250,154,43)" fg:x="298" fg:w="3"/><text x="97.6356%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="97.3856%" y="709" width="0.9804%" height="15" fill="rgb(226,43,29)" fg:x="298" fg:w="3"/><text x="97.6356%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="97.3856%" y="693" width="0.9804%" height="15" fill="rgb(249,228,39)" fg:x="298" fg:w="3"/><text x="97.6356%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="97.3856%" y="677" width="0.9804%" height="15" fill="rgb(216,79,43)" fg:x="298" fg:w="3"/><text x="97.6356%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="97.3856%" y="661" width="0.9804%" height="15" fill="rgb(228,95,12)" fg:x="298" fg:w="3"/><text x="97.6356%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="97.3856%" y="645" width="0.9804%" height="15" fill="rgb(249,221,15)" fg:x="298" fg:w="3"/><text x="97.6356%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="97.3856%" y="629" width="0.9804%" height="15" fill="rgb(233,34,13)" fg:x="298" fg:w="3"/><text x="97.6356%" y="639.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4 samples, 1.31%)</title><rect x="98.3660%" y="853" width="1.3072%" height="15" fill="rgb(214,103,39)" fg:x="301" fg:w="4"/><text x="98.6160%" y="863.50"></text></g><g><title>__libc_start_call_main (4 samples, 1.31%)</title><rect x="98.3660%" y="837" width="1.3072%" height="15" fill="rgb(251,126,39)" fg:x="301" fg:w="4"/><text x="98.6160%" y="847.50"></text></g><g><title>main (4 samples, 1.31%)</title><rect x="98.3660%" y="821" width="1.3072%" height="15" fill="rgb(214,216,36)" fg:x="301" fg:w="4"/><text x="98.6160%" y="831.50"></text></g><g><title>do_taskset (4 samples, 1.31%)</title><rect x="98.3660%" y="805" width="1.3072%" height="15" fill="rgb(220,221,8)" fg:x="301" fg:w="4"/><text x="98.6160%" y="815.50"></text></g><g><title>sched_setaffinity@@GLIBC_2.3.4 (4 samples, 1.31%)</title><rect x="98.3660%" y="789" width="1.3072%" height="15" fill="rgb(240,216,3)" fg:x="301" fg:w="4"/><text x="98.6160%" y="799.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="773" width="1.3072%" height="15" fill="rgb(232,218,17)" fg:x="301" fg:w="4"/><text x="98.6160%" y="783.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="757" width="1.3072%" height="15" fill="rgb(229,163,45)" fg:x="301" fg:w="4"/><text x="98.6160%" y="767.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="741" width="1.3072%" height="15" fill="rgb(231,110,42)" fg:x="301" fg:w="4"/><text x="98.6160%" y="751.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="725" width="1.3072%" height="15" fill="rgb(208,170,48)" fg:x="301" fg:w="4"/><text x="98.6160%" y="735.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="709" width="1.3072%" height="15" fill="rgb(239,116,25)" fg:x="301" fg:w="4"/><text x="98.6160%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="693" width="1.3072%" height="15" fill="rgb(219,200,50)" fg:x="301" fg:w="4"/><text x="98.6160%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="677" width="1.3072%" height="15" fill="rgb(245,200,0)" fg:x="301" fg:w="4"/><text x="98.6160%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="661" width="1.3072%" height="15" fill="rgb(245,119,33)" fg:x="301" fg:w="4"/><text x="98.6160%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.31%)</title><rect x="98.3660%" y="645" width="1.3072%" height="15" fill="rgb(231,125,12)" fg:x="301" fg:w="4"/><text x="98.6160%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="629" width="0.9804%" height="15" fill="rgb(216,96,41)" fg:x="302" fg:w="3"/><text x="98.9428%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="613" width="0.9804%" height="15" fill="rgb(248,43,45)" fg:x="302" fg:w="3"/><text x="98.9428%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="597" width="0.9804%" height="15" fill="rgb(217,222,7)" fg:x="302" fg:w="3"/><text x="98.9428%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="581" width="0.9804%" height="15" fill="rgb(233,28,6)" fg:x="302" fg:w="3"/><text x="98.9428%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="565" width="0.9804%" height="15" fill="rgb(231,218,15)" fg:x="302" fg:w="3"/><text x="98.9428%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="549" width="0.9804%" height="15" fill="rgb(226,171,48)" fg:x="302" fg:w="3"/><text x="98.9428%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="533" width="0.9804%" height="15" fill="rgb(235,201,9)" fg:x="302" fg:w="3"/><text x="98.9428%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="517" width="0.9804%" height="15" fill="rgb(217,80,15)" fg:x="302" fg:w="3"/><text x="98.9428%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="501" width="0.9804%" height="15" fill="rgb(219,152,8)" fg:x="302" fg:w="3"/><text x="98.9428%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="485" width="0.9804%" height="15" fill="rgb(243,107,38)" fg:x="302" fg:w="3"/><text x="98.9428%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="469" width="0.9804%" height="15" fill="rgb(231,17,5)" fg:x="302" fg:w="3"/><text x="98.9428%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="453" width="0.9804%" height="15" fill="rgb(209,25,54)" fg:x="302" fg:w="3"/><text x="98.9428%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.98%)</title><rect x="98.6928%" y="437" width="0.9804%" height="15" fill="rgb(219,0,2)" fg:x="302" fg:w="3"/><text x="98.9428%" y="447.50"></text></g><g><title>all (306 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(246,9,5)" fg:x="0" fg:w="306"/><text x="0.2500%" y="911.50"></text></g><g><title>taskset (5 samples, 1.63%)</title><rect x="98.3660%" y="885" width="1.6340%" height="15" fill="rgb(226,159,4)" fg:x="301" fg:w="5"/><text x="98.6160%" y="895.50"></text></g><g><title>_start (5 samples, 1.63%)</title><rect x="98.3660%" y="869" width="1.6340%" height="15" fill="rgb(219,175,34)" fg:x="301" fg:w="5"/><text x="98.6160%" y="879.50"></text></g><g><title>_dl_start (1 samples, 0.33%)</title><rect x="99.6732%" y="853" width="0.3268%" height="15" fill="rgb(236,10,46)" fg:x="305" fg:w="1"/><text x="99.9232%" y="863.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.33%)</title><rect x="99.6732%" y="837" width="0.3268%" height="15" fill="rgb(240,211,16)" fg:x="305" fg:w="1"/><text x="99.9232%" y="847.50"></text></g><g><title>dl_main (1 samples, 0.33%)</title><rect x="99.6732%" y="821" width="0.3268%" height="15" fill="rgb(205,3,43)" fg:x="305" fg:w="1"/><text x="99.9232%" y="831.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.33%)</title><rect x="99.6732%" y="805" width="0.3268%" height="15" fill="rgb(245,7,22)" fg:x="305" fg:w="1"/><text x="99.9232%" y="815.50"></text></g></svg></svg>